
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e44  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080170e8  080170e8  000180e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080178e8  080178e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080178f0  080178f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080178f4  080178f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  080178f8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000072c4  24000248  08017b40  00019248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400750c  08017b40  0001950c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d6ba  00000000  00000000  00019276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005107  00000000  00000000  00046930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f50  00000000  00000000  0004ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001834  00000000  00000000  0004d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006420  00000000  00000000  0004f1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000273cc  00000000  00000000  000555dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f294  00000000  00000000  0007c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001fbc3c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a78  00000000  00000000  001fbcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  0020576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  002057e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  0020688b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080170cc 	.word	0x080170cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	080170cc 	.word	0x080170cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <uart3_rb_push_bytes>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
// 링버퍼에 len 바이트 밀어넣기 (꽉 차면 오래된 것부터 드롭)
static void uart3_rb_push_bytes(const uint8_t *src, uint16_t len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  if (len == 0) return;
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d055      	beq.n	8000d82 <uart3_rb_push_bytes+0xbe>

  uint16_t w = uart3_widx;
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	82fb      	strh	r3, [r7, #22]
  uint16_t r = uart3_ridx;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	82bb      	strh	r3, [r7, #20]

  // 남은 공간 계산 (1바이트 비워두는 구조)
  uint16_t free = (r > w) ? (r - w - 1) : (UART3_RBUF_SIZE - (w - r) - 1);
 8000ce2:	8aba      	ldrh	r2, [r7, #20]
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d906      	bls.n	8000cf8 <uart3_rb_push_bytes+0x34>
 8000cea:	8aba      	ldrh	r2, [r7, #20]
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	e006      	b.n	8000d06 <uart3_rb_push_bytes+0x42>
 8000cf8:	8aba      	ldrh	r2, [r7, #20]
 8000cfa:	8afb      	ldrh	r3, [r7, #22]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	827b      	strh	r3, [r7, #18]
  if (len > free) {
 8000d08:	887a      	ldrh	r2, [r7, #2]
 8000d0a:	8a7b      	ldrh	r3, [r7, #18]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d90e      	bls.n	8000d2e <uart3_rb_push_bytes+0x6a>
    uint16_t drop = len - free;
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	823b      	strh	r3, [r7, #16]
    uart3_ridx = (uart3_ridx + drop) & (UART3_RBUF_SIZE - 1);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	8a3b      	ldrh	r3, [r7, #16]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d2c:	801a      	strh	r2, [r3, #0]
  }

  // 연속 구간으로 두 번에 나눠 복사
  uint16_t to_end = UART3_RBUF_SIZE - w;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000d34:	81fb      	strh	r3, [r7, #14]
  uint16_t first  = (len < to_end) ? len : to_end;
 8000d36:	89fa      	ldrh	r2, [r7, #14]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	bf28      	it	cs
 8000d3e:	4613      	movcs	r3, r2
 8000d40:	81bb      	strh	r3, [r7, #12]
  memcpy(&uart3_rbuf[w], src, first);
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d46:	4413      	add	r3, r2
 8000d48:	89ba      	ldrh	r2, [r7, #12]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f013 fcca 	bl	80146e6 <memcpy>
  if (len > first) memcpy(&uart3_rbuf[0], src + first, len - first);
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d909      	bls.n	8000d6e <uart3_rb_push_bytes+0xaa>
 8000d5a:	89bb      	ldrh	r3, [r7, #12]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	18d1      	adds	r1, r2, r3
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	89bb      	ldrh	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d6a:	f013 fcbc 	bl	80146e6 <memcpy>

  uart3_widx = (w + len) & (UART3_RBUF_SIZE - 1);
 8000d6e:	8afa      	ldrh	r2, [r7, #22]
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	e000      	b.n	8000d84 <uart3_rb_push_bytes+0xc0>
  if (len == 0) return;
 8000d82:	bf00      	nop
}
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	24000eb4 	.word	0x24000eb4
 8000d90:	24000eb6 	.word	0x24000eb6
 8000d94:	240006b4 	.word	0x240006b4

08000d98 <uart3_rx_start_normal>:

// NORMAL 모드 + IDLE 이벤트 기반 재무장 (레지스터 직접접근 X)
static void uart3_rx_start_normal(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  // 1) RX DMA가 CIRC로 잡혀 있다면 HAL로 NORMAL로 재초기화
  if (huart3.hdmarx) {
 8000d9c:	4b65      	ldr	r3, [pc, #404]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <uart3_rx_start_normal+0x172>
    if (huart3.hdmarx->Init.Mode != DMA_NORMAL) {
 8000da8:	4b62      	ldr	r3, [pc, #392]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
      // 안전하게 모두 중단
      HAL_UART_AbortReceive(&huart3);
 8000db4:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000db6:	f00c ffc3 	bl	800dd40 <HAL_UART_AbortReceive>
      HAL_DMA_Abort(huart3.hdmarx);
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 f963 	bl	800708c <HAL_DMA_Abort>

      // DMA를 NORMAL로 재설정
      HAL_DMA_DeInit(huart3.hdmarx);
 8000dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f005 fd3d 	bl	800684c <HAL_DMA_DeInit>
      huart3.hdmarx->Init.Mode = DMA_NORMAL;
 8000dd2:	4b58      	ldr	r3, [pc, #352]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
      if (HAL_DMA_Init(huart3.hdmarx) != HAL_OK) {
 8000ddc:	4b55      	ldr	r3, [pc, #340]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 f9d6 	bl	8006194 <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
        sta = 3;  // MCU Init 에러 코드 재사용
 8000dee:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
        Error_Handler();
 8000df4:	f004 fa4c 	bl	8005290 <Error_Handler>
      }
      // __HAL_LINKDMA(&huart3, hdmarx, *huart3.hdmarx); // 보통 재링크 불필요
    }
    // Half-Transfer IRQ는 사용 안 함
    __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8000df8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <uart3_rx_start_normal+0x1a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d068      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e06:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <uart3_rx_start_normal+0x1a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d061      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e14:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <uart3_rx_start_normal+0x1ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d05a      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a47      	ldr	r2, [pc, #284]	@ (8000f48 <uart3_rx_start_normal+0x1b0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d053      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e30:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a44      	ldr	r2, [pc, #272]	@ (8000f4c <uart3_rx_start_normal+0x1b4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d04c      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	@ (8000f50 <uart3_rx_start_normal+0x1b8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d045      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e4c:	4b39      	ldr	r3, [pc, #228]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <uart3_rx_start_normal+0x1bc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d03e      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <uart3_rx_start_normal+0x1c0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d037      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <uart3_rx_start_normal+0x1c4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d030      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a38      	ldr	r2, [pc, #224]	@ (8000f60 <uart3_rx_start_normal+0x1c8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d029      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e84:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a35      	ldr	r2, [pc, #212]	@ (8000f64 <uart3_rx_start_normal+0x1cc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d022      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <uart3_rx_start_normal+0x1d0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d01b      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a30      	ldr	r2, [pc, #192]	@ (8000f6c <uart3_rx_start_normal+0x1d4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d014      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <uart3_rx_start_normal+0x1d8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <uart3_rx_start_normal+0x1dc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d006      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	@ (8000f78 <uart3_rx_start_normal+0x1e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d10c      	bne.n	8000ef2 <uart3_rx_start_normal+0x15a>
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0208 	bic.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e00b      	b.n	8000f0a <uart3_rx_start_normal+0x172>
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0204 	bic.w	r2, r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
  }

  // 2) IDLE 플래그 정리하고 ToIdle-DMA 재무장
  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2210      	movs	r2, #16
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart3_rx_dma, UART3_RX_DMA_SIZE) != HAL_OK) {
 8000f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f16:	4919      	ldr	r1, [pc, #100]	@ (8000f7c <uart3_rx_start_normal+0x1e4>)
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f1a:	f00e fe7f 	bl	800fc1c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <uart3_rx_start_normal+0x196>
    sta = 3;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	601a      	str	r2, [r3, #0]
    Error_Handler();
 8000f2a:	f004 f9b1 	bl	8005290 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000328 	.word	0x24000328
 8000f38:	24002978 	.word	0x24002978
 8000f3c:	40020010 	.word	0x40020010
 8000f40:	40020028 	.word	0x40020028
 8000f44:	40020040 	.word	0x40020040
 8000f48:	40020058 	.word	0x40020058
 8000f4c:	40020070 	.word	0x40020070
 8000f50:	40020088 	.word	0x40020088
 8000f54:	400200a0 	.word	0x400200a0
 8000f58:	400200b8 	.word	0x400200b8
 8000f5c:	40020410 	.word	0x40020410
 8000f60:	40020428 	.word	0x40020428
 8000f64:	40020440 	.word	0x40020440
 8000f68:	40020458 	.word	0x40020458
 8000f6c:	40020470 	.word	0x40020470
 8000f70:	40020488 	.word	0x40020488
 8000f74:	400204a0 	.word	0x400204a0
 8000f78:	400204b8 	.word	0x400204b8
 8000f7c:	240004b4 	.word	0x240004b4

08000f80 <HAL_UARTEx_RxEventCallback>:

// ToIdle-DMA가 IDLE 또는 버퍼가 다 찼을 때 호출됨 (Size: 수신 바이트 수)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance != USART3) return;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10a      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x2c>

  if (Size) {
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_UARTEx_RxEventCallback+0x26>
    uart3_rb_push_bytes(uart3_rx_dma, Size);
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000fa2:	f7ff fe8f 	bl	8000cc4 <uart3_rb_push_bytes>
  }
  // 다음 수신 다시 무장
  uart3_rx_start_normal();
 8000fa6:	f7ff fef7 	bl	8000d98 <uart3_rx_start_normal>
 8000faa:	e000      	b.n	8000fae <HAL_UARTEx_RxEventCallback+0x2e>
  if (huart->Instance != USART3) return;
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	240004b4 	.word	0x240004b4

08000fbc <HAL_UART_RxCpltCallback>:

// 혹시 HAL이 TC로만 불러줄 수도 있으므로 안전망 콜백도 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x2c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d107      	bne.n	8000fde <HAL_UART_RxCpltCallback+0x22>

  uart3_rb_push_bytes(uart3_rx_dma, UART3_RX_DMA_SIZE);
 8000fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_UART_RxCpltCallback+0x30>)
 8000fd4:	f7ff fe76 	bl	8000cc4 <uart3_rb_push_bytes>
  uart3_rx_start_normal();
 8000fd8:	f7ff fede 	bl	8000d98 <uart3_rx_start_normal>
 8000fdc:	e000      	b.n	8000fe0 <HAL_UART_RxCpltCallback+0x24>
  if (huart->Instance != USART3) return;
 8000fde:	bf00      	nop
}
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	240004b4 	.word	0x240004b4

08000ff0 <HAL_UART_ErrorCallback>:

// 에러 시 플래그 정리하고 즉시 재무장
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_UART_ErrorCallback+0x50>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d119      	bne.n	8001036 <HAL_UART_ErrorCallback+0x46>

  HAL_UART_AbortReceive(huart);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f00c fe9c 	bl	800dd40 <HAL_UART_AbortReceive>

  __HAL_UART_CLEAR_OREFLAG(huart);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2208      	movs	r2, #8
 800100e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FEFLAG(huart);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_NEFLAG(huart);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2204      	movs	r2, #4
 800101e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_PEFLAG(huart);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2210      	movs	r2, #16
 800102e:	621a      	str	r2, [r3, #32]

  uart3_rx_start_normal();
 8001030:	f7ff feb2 	bl	8000d98 <uart3_rx_start_normal>
 8001034:	e000      	b.n	8001038 <HAL_UART_ErrorCallback+0x48>
  if (huart->Instance != USART3) return;
 8001036:	bf00      	nop
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004800 	.word	0x40004800

08001044 <uart3_kick_tx_dma>:

static void uart3_kick_tx_dma(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  if (uart3_tx_busy) return;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d131      	bne.n	80010b8 <uart3_kick_tx_dma+0x74>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	429a      	cmp	r2, r3
 8001062:	d02b      	beq.n	80010bc <uart3_kick_tx_dma+0x78>

  // 연속 구간 길이 산출 (wrap 안 끊기게 1번 전송)
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	429a      	cmp	r2, r3
 8001072:	d308      	bcc.n	8001086 <uart3_kick_tx_dma+0x42>
               ? (uart3_tx_widx - uart3_tx_ridx)
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	e005      	b.n	8001092 <uart3_kick_tx_dma+0x4e>
               : (UART3_TBUF_SIZE - uart3_tx_ridx);
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 800108c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001090:	b29b      	uxth	r3, r3
 8001092:	80fb      	strh	r3, [r7, #6]

  uart3_tx_last_len = len;
 8001094:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <uart3_kick_tx_dma+0x8c>)
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	8013      	strh	r3, [r2, #0]
  uart3_tx_busy = 1;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]

  // (D-Cache 켠 경우) DMA가 읽을 영역 클린
  // SCB_CleanDCache_by_Addr((uint32_t*)&uart3_tbuf[uart3_tx_ridx], len);

  HAL_UART_Transmit_DMA(&huart3, &uart3_tbuf[uart3_tx_ridx], len);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <uart3_kick_tx_dma+0x90>)
 80010aa:	4413      	add	r3, r2
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <uart3_kick_tx_dma+0x94>)
 80010b2:	f00c fdc5 	bl	800dc40 <HAL_UART_Transmit_DMA>
 80010b6:	e002      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_busy) return;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 80010bc:	bf00      	nop
}
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240022c2 	.word	0x240022c2
 80010c8:	240022be 	.word	0x240022be
 80010cc:	240022bc 	.word	0x240022bc
 80010d0:	240022c0 	.word	0x240022c0
 80010d4:	240012bc 	.word	0x240012bc
 80010d8:	24000328 	.word	0x24000328

080010dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_UART_TxCpltCallback+0x40>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d112      	bne.n	8001114 <HAL_UART_TxCpltCallback+0x38>

  uart3_tx_ridx = (uart3_tx_ridx + uart3_tx_last_len) & (UART3_TBUF_SIZE - 1);
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_UART_TxCpltCallback+0x48>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 8001106:	801a      	strh	r2, [r3, #0]
  uart3_tx_busy = 0;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_UART_TxCpltCallback+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
  uart3_kick_tx_dma(); // 남은 데이터가 있으면 곧장 다음 덩어리 전송
 800110e:	f7ff ff99 	bl	8001044 <uart3_kick_tx_dma>
 8001112:	e000      	b.n	8001116 <HAL_UART_TxCpltCallback+0x3a>
  if (huart->Instance != USART3) return;
 8001114:	bf00      	nop
}
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004800 	.word	0x40004800
 8001120:	240022be 	.word	0x240022be
 8001124:	240022c0 	.word	0x240022c0
 8001128:	240022c2 	.word	0x240022c2

0800112c <uart3_tx_write>:

static size_t uart3_tx_write(const uint8_t *data, size_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  size_t w = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 800113a:	e05d      	b.n	80011f8 <uart3_tx_write+0xcc>
    // 먼저 남은 공간 계산(논크리티컬)
    uint16_t r = uart3_tx_ridx;
 800113c:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <uart3_tx_write+0xe4>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	837b      	strh	r3, [r7, #26]
    uint16_t w0 = uart3_tx_widx;
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <uart3_tx_write+0xe8>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	833b      	strh	r3, [r7, #24]
    uint16_t space = (r > w0) ? (r - w0 - 1) : (UART3_TBUF_SIZE - (w0 - r) - 1);
 8001148:	8b7a      	ldrh	r2, [r7, #26]
 800114a:	8b3b      	ldrh	r3, [r7, #24]
 800114c:	429a      	cmp	r2, r3
 800114e:	d906      	bls.n	800115e <uart3_tx_write+0x32>
 8001150:	8b7a      	ldrh	r2, [r7, #26]
 8001152:	8b3b      	ldrh	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b01      	subs	r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	e006      	b.n	800116c <uart3_tx_write+0x40>
 800115e:	8b7a      	ldrh	r2, [r7, #26]
 8001160:	8b3b      	ldrh	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800116a:	b29b      	uxth	r3, r3
 800116c:	82fb      	strh	r3, [r7, #22]
    if (space == 0) break;
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d046      	beq.n	8001202 <uart3_tx_write+0xd6>

    size_t chunk = (len - w < space) ? (len - w) : space;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	4293      	cmp	r3, r2
 800117e:	bf28      	it	cs
 8001180:	4613      	movcs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
    size_t first = (w0 + chunk <= UART3_TBUF_SIZE) ? chunk : (UART3_TBUF_SIZE - w0);
 8001184:	8b3a      	ldrh	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800118e:	d903      	bls.n	8001198 <uart3_tx_write+0x6c>
 8001190:	8b3b      	ldrh	r3, [r7, #24]
 8001192:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001196:	e000      	b.n	800119a <uart3_tx_write+0x6e>
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60fb      	str	r3, [r7, #12]

    memcpy(&uart3_tbuf[w0], &data[w], first);
 800119c:	8b3b      	ldrh	r3, [r7, #24]
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <uart3_tx_write+0xec>)
 80011a0:	1898      	adds	r0, r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	4413      	add	r3, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4619      	mov	r1, r3
 80011ac:	f013 fa9b 	bl	80146e6 <memcpy>
    if (chunk > first) memcpy(&uart3_tbuf[0], &data[w + first], chunk - first);
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d90b      	bls.n	80011d0 <uart3_tx_write+0xa4>
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	18d1      	adds	r1, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	@ (8001218 <uart3_tx_write+0xec>)
 80011cc:	f013 fa8b 	bl	80146e6 <memcpy>

    taskENTER_CRITICAL();
 80011d0:	f011 f912 	bl	80123f8 <vPortEnterCritical>
    uart3_tx_widx = (w0 + chunk) & (UART3_TBUF_SIZE - 1);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	8b3b      	ldrh	r3, [r7, #24]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <uart3_tx_write+0xe8>)
 80011e6:	801a      	strh	r2, [r3, #0]
    uart3_kick_tx_dma();
 80011e8:	f7ff ff2c 	bl	8001044 <uart3_kick_tx_dma>
    taskEXIT_CRITICAL();
 80011ec:	f011 f936 	bl	801245c <vPortExitCritical>

    w += chunk;
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d39d      	bcc.n	800113c <uart3_tx_write+0x10>
 8001200:	e000      	b.n	8001204 <uart3_tx_write+0xd8>
    if (space == 0) break;
 8001202:	bf00      	nop
  }
  return w;
 8001204:	69fb      	ldr	r3, [r7, #28]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	240022be 	.word	0x240022be
 8001214:	240022bc 	.word	0x240022bc
 8001218:	240012bc 	.word	0x240012bc

0800121c <_write>:

int _write(int file, char *p, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  size_t pos = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800122c:	e01e      	b.n	800126c <_write+0x50>
    size_t n = uart3_tx_write((uint8_t*)p + pos, (size_t)len - pos);
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	18d0      	adds	r0, r2, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff ff76 	bl	800112c <uart3_tx_write>
 8001240:	6138      	str	r0, [r7, #16]
    if (n == 0) {
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <_write+0x48>
      // 버퍼가 가득 → RT 제어를 막지 않게 즉시 양보
      if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 8001248:	f010 fb6a 	bl	8011920 <xTaskGetSchedulerState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b02      	cmp	r3, #2
 8001250:	d10c      	bne.n	800126c <_write+0x50>
        taskYIELD();      // 또는 vTaskDelay(1) 등
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <_write+0x64>)
 8001254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	e003      	b.n	800126c <_write+0x50>
      } else {
        // 스케줄러 전이면 잠깐 회전
      }
    } else {
      pos += n;
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3dc      	bcc.n	800122e <_write+0x12>
    }
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000ed04 	.word	0xe000ed04

08001284 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001298:	2201      	movs	r2, #1
 800129a:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	2400230c 	.word	0x2400230c

080012b4 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 80012c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012c8:	f7ff ffdc 	bl	8001284 <HAL_GPIO_EXTI_Callback>
    }
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 80012d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d8:	ed2d 8b02 	vpush	{d8}
 80012dc:	b087      	sub	sp, #28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	ed87 0a03 	vstr	s0, [r7, #12]
 80012e4:	edc7 0a02 	vstr	s1, [r7, #8]
 80012e8:	ed87 1a01 	vstr	s2, [r7, #4]
 80012ec:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 80012fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001302:	edd7 7a02 	vldr	s15, [r7, #8]
 8001306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	d502      	bpl.n	8001316 <float32_t_to_uint+0x42>
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	60f9      	str	r1, [r7, #12]
 8001314:	e00a      	b.n	800132c <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8001316:	ed97 7a03 	vldr	s14, [r7, #12]
 800131a:	edd7 7a01 	vldr	s15, [r7, #4]
 800131e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	dd01      	ble.n	800132c <float32_t_to_uint+0x58>
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 800132c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001330:	edd7 7a02 	vldr	s15, [r7, #8]
 8001334:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001338:	f04f 0001 	mov.w	r0, #1
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	683c      	ldr	r4, [r7, #0]
 8001342:	f1a4 0620 	sub.w	r6, r4, #32
 8001346:	f1c4 0520 	rsb	r5, r4, #32
 800134a:	fa01 f304 	lsl.w	r3, r1, r4
 800134e:	fa00 f606 	lsl.w	r6, r0, r6
 8001352:	4333      	orrs	r3, r6
 8001354:	fa20 f505 	lsr.w	r5, r0, r5
 8001358:	432b      	orrs	r3, r5
 800135a:	fa00 f204 	lsl.w	r2, r0, r4
 800135e:	f112 38ff 	adds.w	r8, r2, #4294967295
 8001362:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001366:	4640      	mov	r0, r8
 8001368:	4649      	mov	r1, r9
 800136a:	f7ff fa95 	bl	8000898 <__aeabi_ul2f>
 800136e:	ee06 0a90 	vmov	s13, r0
 8001372:	ed97 7a05 	vldr	s14, [r7, #20]
 8001376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
}
 8001386:	4618      	mov	r0, r3
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	ecbd 8b02 	vpop	{d8}
 8001390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001394 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8001394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001398:	ed2d 8b02 	vpush	{d8}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80013a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 80013ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b8:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	ee07 1a90 	vmov	s15, r1
 80013c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ce:	ee27 8a27 	vmul.f32	s16, s14, s15
 80013d2:	f04f 0001 	mov.w	r0, #1
 80013d6:	f04f 0100 	mov.w	r1, #0
 80013da:	683c      	ldr	r4, [r7, #0]
 80013dc:	f1a4 0620 	sub.w	r6, r4, #32
 80013e0:	f1c4 0520 	rsb	r5, r4, #32
 80013e4:	fa01 f304 	lsl.w	r3, r1, r4
 80013e8:	fa00 f606 	lsl.w	r6, r0, r6
 80013ec:	4333      	orrs	r3, r6
 80013ee:	fa20 f505 	lsr.w	r5, r0, r5
 80013f2:	432b      	orrs	r3, r5
 80013f4:	fa00 f204 	lsl.w	r2, r0, r4
 80013f8:	f112 38ff 	adds.w	r8, r2, #4294967295
 80013fc:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001400:	4640      	mov	r0, r8
 8001402:	4649      	mov	r1, r9
 8001404:	f7ff fa48 	bl	8000898 <__aeabi_ul2f>
 8001408:	ee07 0a90 	vmov	s15, r0
 800140c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001410:	edd7 7a04 	vldr	s15, [r7, #16]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	ecbd 8b02 	vpop	{d8}
 8001424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001428 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8001432:	23ff      	movs	r3, #255	@ 0xff
 8001434:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8001436:	23ff      	movs	r3, #255	@ 0xff
 8001438:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 800143e:	23ff      	movs	r3, #255	@ 0xff
 8001440:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001442:	23ff      	movs	r3, #255	@ 0xff
 8001444:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8001446:	23ff      	movs	r3, #255	@ 0xff
 8001448:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800144a:	23ff      	movs	r3, #255	@ 0xff
 800144c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 800144e:	23fe      	movs	r3, #254	@ 0xfe
 8001450:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001456:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MIT_reset_origin+0x88>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001466:	2208      	movs	r2, #8
 8001468:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MIT_reset_origin+0x88>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MIT_reset_origin+0x88>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	461a      	mov	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <MIT_reset_origin+0x88>)
 8001490:	4808      	ldr	r0, [pc, #32]	@ (80014b4 <MIT_reset_origin+0x8c>)
 8001492:	f008 f8ea 	bl	800966a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <MIT_reset_origin+0x7e>
		sta = 1;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MIT_reset_origin+0x90>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80014a2:	f003 fef5 	bl	8005290 <Error_Handler>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	24000264 	.word	0x24000264
 80014b4:	24000288 	.word	0x24000288
 80014b8:	24002978 	.word	0x24002978

080014bc <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 80014c6:	23ff      	movs	r3, #255	@ 0xff
 80014c8:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 80014ce:	23ff      	movs	r3, #255	@ 0xff
 80014d0:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 80014d2:	23ff      	movs	r3, #255	@ 0xff
 80014d4:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 80014d6:	23ff      	movs	r3, #255	@ 0xff
 80014d8:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 80014da:	23ff      	movs	r3, #255	@ 0xff
 80014dc:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 80014de:	23ff      	movs	r3, #255	@ 0xff
 80014e0:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 80014e2:	23fc      	movs	r3, #252	@ 0xfc
 80014e4:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <MIT_enter_control_mode+0x88>)
 80014ea:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MIT_enter_control_mode+0x88>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MIT_enter_control_mode+0x88>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MIT_enter_control_mode+0x88>)
 80014fa:	2208      	movs	r2, #8
 80014fc:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MIT_enter_control_mode+0x88>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MIT_enter_control_mode+0x88>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MIT_enter_control_mode+0x88>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MIT_enter_control_mode+0x88>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MIT_enter_control_mode+0x88>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	461a      	mov	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <MIT_enter_control_mode+0x88>)
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <MIT_enter_control_mode+0x8c>)
 8001526:	f008 f8a0 	bl	800966a <HAL_FDCAN_AddMessageToTxFifoQ>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <MIT_enter_control_mode+0x7e>
		sta = 1;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MIT_enter_control_mode+0x90>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001536:	f003 feab 	bl	8005290 <Error_Handler>
	}
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000264 	.word	0x24000264
 8001548:	24000288 	.word	0x24000288
 800154c:	24002978 	.word	0x24002978

08001550 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 800155a:	23ff      	movs	r3, #255	@ 0xff
 800155c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 800155e:	23ff      	movs	r3, #255	@ 0xff
 8001560:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8001562:	23ff      	movs	r3, #255	@ 0xff
 8001564:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 800156a:	23ff      	movs	r3, #255	@ 0xff
 800156c:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 800156e:	23ff      	movs	r3, #255	@ 0xff
 8001570:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8001572:	23ff      	movs	r3, #255	@ 0xff
 8001574:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8001576:	23fd      	movs	r3, #253	@ 0xfd
 8001578:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 800157e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 800158e:	2208      	movs	r2, #8
 8001590:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	461a      	mov	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <MIT_exit_control_mode+0x88>)
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <MIT_exit_control_mode+0x8c>)
 80015ba:	f008 f856 	bl	800966a <HAL_FDCAN_AddMessageToTxFifoQ>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <MIT_exit_control_mode+0x7e>
		sta = 1;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MIT_exit_control_mode+0x90>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80015ca:	f003 fe61 	bl	8005290 <Error_Handler>
	}
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000264 	.word	0x24000264
 80015dc:	24000288 	.word	0x24000288
 80015e0:	24002978 	.word	0x24002978

080015e4 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3301      	adds	r3, #1
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3302      	adds	r3, #2
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3303      	adds	r3, #3
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3305      	adds	r3, #5
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	121b      	asrs	r3, r3, #8
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3306      	adds	r3, #6
 8001628:	f002 020f 	and.w	r2, r2, #15
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3307      	adds	r3, #7
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	ed87 0a00 	vstr	s0, [r7]
 8001654:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <MIT_Mode+0xd8>)
 8001658:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 800165a:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <MIT_Mode+0xdc>)
 800165c:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 800165e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001666:	edd7 6a00 	vldr	s13, [r7]
 800166a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800166e:	eeb0 1b46 	vmov.f64	d1, d6
 8001672:	eeb0 0b47 	vmov.f64	d0, d7
 8001676:	f015 fae3 	bl	8016c40 <fmax>
 800167a:	eeb0 6b40 	vmov.f64	d6, d0
 800167e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001686:	eeb0 1b47 	vmov.f64	d1, d7
 800168a:	eeb0 0b46 	vmov.f64	d0, d6
 800168e:	f015 faf4 	bl	8016c7a <fmin>
 8001692:	eeb0 7b40 	vmov.f64	d7, d0
 8001696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800169a:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 800169e:	200c      	movs	r0, #12
 80016a0:	ed97 1a06 	vldr	s2, [r7, #24]
 80016a4:	edd7 0a07 	vldr	s1, [r7, #28]
 80016a8:	ed97 0a00 	vldr	s0, [r7]
 80016ac:	f7ff fe12 	bl	80012d4 <float32_t_to_uint>
 80016b0:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff91 	bl	80015e4 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4a18      	ldr	r2, [pc, #96]	@ (8001728 <MIT_Mode+0xe0>)
 80016c6:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <MIT_Mode+0xe0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MIT_Mode+0xe0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MIT_Mode+0xe0>)
 80016d6:	2208      	movs	r2, #8
 80016d8:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MIT_Mode+0xe0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MIT_Mode+0xe0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MIT_Mode+0xe0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MIT_Mode+0xe0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <MIT_Mode+0xe0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	461a      	mov	r2, r3
 80016fe:	490a      	ldr	r1, [pc, #40]	@ (8001728 <MIT_Mode+0xe0>)
 8001700:	480a      	ldr	r0, [pc, #40]	@ (800172c <MIT_Mode+0xe4>)
 8001702:	f007 ffb2 	bl	800966a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <MIT_Mode+0xce>
		sta = 1;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <MIT_Mode+0xe8>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001712:	f003 fdbd 	bl	8005290 <Error_Handler>
	}
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	c1c80000 	.word	0xc1c80000
 8001724:	41c80000 	.word	0x41c80000
 8001728:	24000264 	.word	0x24000264
 800172c:	24000288 	.word	0x24000288
 8001730:	24002978 	.word	0x24002978

08001734 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b092      	sub	sp, #72	@ 0x48
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d04b      	beq.n	80017e0 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001748:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	2140      	movs	r1, #64	@ 0x40
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f007 ffe4 	bl	8009720 <HAL_FDCAN_GetRxMessage>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 800175e:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
            Error_Handler();
 8001764:	f003 fd94 	bl	8005290 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001768:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800176c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001770:	2300      	movs	r3, #0
 8001772:	647b      	str	r3, [r7, #68]	@ 0x44
 8001774:	e02b      	b.n	80017ce <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 8001776:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800177a:	2198      	movs	r1, #152	@ 0x98
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3308      	adds	r3, #8
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800178a:	429a      	cmp	r2, r3
 800178c:	d11c      	bne.n	80017c8 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 8001792:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001796:	2198      	movs	r1, #152	@ 0x98
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3310      	adds	r3, #16
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80017a6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80017aa:	2300      	movs	r3, #0
 80017ac:	f00e ff28 	bl	8010600 <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00f      	beq.n	80017d6 <HAL_FDCAN_RxFifo0Callback+0xa2>
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80017b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	f3bf 8f6f 	isb	sy
                break;
 80017c6:	e006      	b.n	80017d6 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	3301      	adds	r3, #1
 80017cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	ddd0      	ble.n	8001776 <HAL_FDCAN_RxFifo0Callback+0x42>
 80017d4:	e000      	b.n	80017d8 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 80017d6:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80017dc:	f009 f86f 	bl	800a8be <HAL_GPIO_TogglePin>
    }
}
 80017e0:	bf00      	nop
 80017e2:	3748      	adds	r7, #72	@ 0x48
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	24002978 	.word	0x24002978
 80017ec:	2400230c 	.word	0x2400230c
 80017f0:	e000ed04 	.word	0xe000ed04
 80017f4:	58021000 	.word	0x58021000

080017f8 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001802:	edc7 0a02 	vstr	s1, [r7, #8]
 8001806:	ed87 1a01 	vstr	s2, [r7, #4]
 800180a:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 800180e:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001888 <tustin_derivative+0x90>
 8001812:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001816:	edd7 7a00 	vldr	s15, [r7]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001826:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001830:	ed97 7a03 	vldr	s14, [r7, #12]
 8001834:	edd7 7a02 	vldr	s15, [r7, #8]
 8001838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001840:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800188c <tustin_derivative+0x94>
 8001844:	edd7 7a05 	vldr	s15, [r7, #20]
 8001848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001850:	edd7 7a01 	vldr	s15, [r7, #4]
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 6a67 	vsub.f32	s13, s14, s15
 800185c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001860:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001864:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800188c <tustin_derivative+0x94>
 8001868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800186c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001870:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	ee07 3a90 	vmov	s15, r3
}
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40490fd8 	.word	0x40490fd8
 800188c:	3b03126f 	.word	0x3b03126f

08001890 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 80018ee:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f4:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t buf[8], last[8]; int got = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (xQueueReceive(m->canRxQueue, buf, 0) == pdPASS) { memcpy(last, buf, 8); got = 1; }
 80018fe:	e009      	b.n	8001914 <motor_encoder_read+0x84>
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	f107 0214 	add.w	r2, r7, #20
 8001908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800190c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f107 0114 	add.w	r1, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f00e ff0c 	bl	801073c <xQueueReceive>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d0ea      	beq.n	8001900 <motor_encoder_read+0x70>
	if (got)
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01f      	beq.n	8001970 <motor_encoder_read+0xe0>
	{
		// CAN 메시지가 이미 수신되었을 시
		unsigned int p_int = ((last[1]<<8)|last[2]);
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	7bba      	ldrb	r2, [r7, #14]
 8001936:	4313      	orrs	r3, r2
 8001938:	623b      	str	r3, [r7, #32]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 800193a:	2110      	movs	r1, #16
 800193c:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001940:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001944:	6a38      	ldr	r0, [r7, #32]
 8001946:	f7ff fd25 	bl	8001394 <uint_to_float32_t>
 800194a:	ed87 0a07 	vstr	s0, [r7, #28]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 800194e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80019ec <motor_encoder_read+0x15c>
 8001952:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	edd3 7a03 	vldr	s15, [r3, #12]
 800195c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001960:	edd7 7a07 	vldr	s15, [r7, #28]
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800196e:	e003      	b.n	8001978 <motor_encoder_read+0xe8>
	else
	{
//		sta = 2;
//		Error_Handler();
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		m->pos = m->pos_old;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ed93 6a06 	vldr	s12, [r3, #24]
 8001990:	eef0 1a46 	vmov.f32	s3, s12
 8001994:	eeb0 1a66 	vmov.f32	s2, s13
 8001998:	eef0 0a47 	vmov.f32	s1, s14
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	f7ff ff2a 	bl	80017f8 <tustin_derivative>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	ed93 6a06 	vldr	s12, [r3, #24]
 80019c6:	eef0 1a46 	vmov.f32	s3, s12
 80019ca:	eeb0 1a66 	vmov.f32	s2, s13
 80019ce:	eef0 0a47 	vmov.f32	s1, s14
 80019d2:	eeb0 0a67 	vmov.f32	s0, s15
 80019d6:	f7ff ff0f 	bl	80017f8 <tustin_derivative>
 80019da:	eef0 7a40 	vmov.f32	s15, s0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80019e4:	bf00      	nop
 80019e6:	3730      	adds	r7, #48	@ 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40490fd8 	.word	0x40490fd8

080019f0 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a02:	ed97 7a00 	vldr	s14, [r7]
 8001a06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	dd1a      	ble.n	8001a70 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001a46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	d400      	bmi.n	8001a88 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001a86:	e01a      	b.n	8001abe <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001a94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	f015 f971 	bl	8016dc8 <sinf>
 8001ae6:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f015 fa2a 	bl	8016f50 <cosf>
 8001afc:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001b06:	3304      	adds	r3, #4
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f015 f95a 	bl	8016dc8 <sinf>
 8001b14:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001b1e:	3304      	adds	r3, #4
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f015 fa12 	bl	8016f50 <cosf>
 8001b2c:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001b36:	3308      	adds	r3, #8
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	f015 f942 	bl	8016dc8 <sinf>
 8001b44:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001b4e:	3308      	adds	r3, #8
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	f015 f9fa 	bl	8016f50 <cosf>
 8001b5c:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b64:	e02c      	b.n	8001bc0 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	441a      	add	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	441a      	add	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	ddcf      	ble.n	8001b66 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001bec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001c1e:	3304      	adds	r3, #4
 8001c20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001c58:	3308      	adds	r3, #8
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001c74:	461a      	mov	r2, r3
 8001c76:	f010 ff2d 	bl	8012ad4 <arm_mat_mult_f32>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <robot_forward_kinematics_cal+0x1be>
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <robot_forward_kinematics_cal+0x1c8>)
 8001c82:	2204      	movs	r2, #4
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f003 fb03 	bl	8005290 <Error_Handler>
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	24002978 	.word	0x24002978

08001c98 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b0f0      	sub	sp, #448	@ 0x1c0
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ca2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ca6:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001ca8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f015 f883 	bl	8016dc8 <sinf>
 8001cc2:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8001cc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	f015 f938 	bl	8016f50 <cosf>
 8001ce0:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001ce4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfc:	f015 f864 	bl	8016dc8 <sinf>
 8001d00:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001d04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001d12:	3304      	adds	r3, #4
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	f015 f918 	bl	8016f50 <cosf>
 8001d20:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001d24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001d32:	3308      	adds	r3, #8
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	f015 f844 	bl	8016dc8 <sinf>
 8001d40:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001d44:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001d52:	3308      	adds	r3, #8
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5c:	f015 f8f8 	bl	8016f50 <cosf>
 8001d60:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8001d64:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001d72:	3308      	adds	r3, #8
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001d86:	3304      	adds	r3, #4
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f015 f818 	bl	8016dc8 <sinf>
 8001d98:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8001d9c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001da0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001daa:	3308      	adds	r3, #8
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dcc:	f015 f8c0 	bl	8016f50 <cosf>
 8001dd0:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 8001dd4:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001dd8:	eeb1 7a67 	vneg.f32	s14, s15
 8001ddc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001de0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001dea:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001df2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 8001e00:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001e22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001e30:	eeb1 7a67 	vneg.f32	s14, s15
 8001e34:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8001e58:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001e66:	eeb1 7a67 	vneg.f32	s14, s15
 8001e6a:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001e80:	3308      	adds	r3, #8
 8001e82:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8001e8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e92:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001e9c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ea8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001eb2:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ebe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ec2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001ecc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ed0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 8001eea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ef8:	eeb1 7a67 	vneg.f32	s14, s15
 8001efc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001f12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001f20:	3301      	adds	r3, #1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001f32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001f40:	eeb1 7a67 	vneg.f32	s14, s15
 8001f44:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001f5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001f68:	3302      	adds	r3, #2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 8001f7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001f88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 8001fa0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fa4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001fae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001fbc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fc0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 8001fdc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fe0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8001fea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001ff8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ffc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8002006:	3301      	adds	r3, #1
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 8002018:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8002026:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800202a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f010 fcee 	bl	8012a18 <arm_mat_trans_f32>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <robot_model_param_cal+0x3bc>
 8002042:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <robot_model_param_cal+0x3b8>)
 8002044:	2204      	movs	r2, #4
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f003 f922 	bl	8005290 <Error_Handler>
 800204c:	e002      	b.n	8002054 <robot_model_param_cal+0x3bc>
 800204e:	bf00      	nop
 8002050:	24002978 	.word	0x24002978

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8002054:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002058:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002062:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800206e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8002078:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8002088:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800208c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8002096:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 80020a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 80020b2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 80020cc:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d8:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 80020dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80020ea:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80020ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f2:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80020f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80020fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8002108:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 800210c:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002110:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002114:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 800211e:	eeb1 7a67 	vneg.f32	s14, s15
 8002122:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002126:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002138:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002146:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800214a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002152:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002156:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800215a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002164:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002168:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800216c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002170:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 800217a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800217e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002182:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002186:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800218a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8002194:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 800219a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 800219e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 80021ac:	eeb1 7a67 	vneg.f32	s14, s15
 80021b0:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80021b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 80021d8:	3308      	adds	r3, #8
 80021da:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 80021e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 80021f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8002202:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002206:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	6852      	ldr	r2, [r2, #4]
 8002216:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8002218:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800221c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8002226:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800222a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002234:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002238:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002242:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002246:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800224a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002254:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8002258:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800225c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002266:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800226a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002274:	3301      	adds	r3, #1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 800227a:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 800227e:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8002282:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002286:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8002290:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002294:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 80022c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 80022d0:	3302      	adds	r3, #2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 80022e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 80022f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80022fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002302:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	6892      	ldr	r2, [r2, #8]
 8002312:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8002314:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002318:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002322:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002326:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002330:	3302      	adds	r3, #2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800233a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8002344:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002348:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	3304      	adds	r3, #4
 8002356:	440b      	add	r3, r1
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 800235c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002360:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 800236a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800236e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002378:	3301      	adds	r3, #1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8002382:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 800238c:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 800238e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002392:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 800239c:	eeb1 7a67 	vneg.f32	s14, s15
 80023a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80023ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80023c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80023c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023cc:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80023d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80023e2:	3304      	adds	r3, #4
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 80023ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80023fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8002408:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800240c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002410:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002414:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 800241e:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002422:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002426:	ee76 7a27 	vadd.f32	s15, s12, s15
 800242a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800242e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002432:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 800243c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002440:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002444:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002448:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8002452:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002456:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800245a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800245e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002462:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800246c:	3304      	adds	r3, #4
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002476:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800247a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8002484:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002488:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800248c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002490:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800249a:	3308      	adds	r3, #8
 800249c:	ed93 5a00 	vldr	s10, [r3]
 80024a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80024ae:	3304      	adds	r3, #4
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80024b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80024c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 80024cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80024da:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80024de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80024f0:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 80024f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002502:	eeb1 7a67 	vneg.f32	s14, s15
 8002506:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800250a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002518:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800251c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002536:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002540:	3308      	adds	r3, #8
 8002542:	edd3 6a00 	vldr	s13, [r3]
 8002546:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800254a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002554:	3304      	adds	r3, #4
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800255e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002562:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002566:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002570:	3308      	adds	r3, #8
 8002572:	edd3 6a00 	vldr	s13, [r3]
 8002576:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800257a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002584:	3304      	adds	r3, #4
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800258e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002592:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800259c:	3304      	adds	r3, #4
 800259e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a2:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 80025a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 80025b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80025c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80025ee:	3304      	adds	r3, #4
 80025f0:	edd3 6a00 	vldr	s13, [r3]
 80025f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002602:	3304      	adds	r3, #4
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002610:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800261a:	3308      	adds	r3, #8
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002624:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002628:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002638:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800263c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 8002646:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800264a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002658:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800265c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002666:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002898 <robot_model_param_cal+0xc00>
 8002680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002684:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002688:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002692:	3304      	adds	r3, #4
 8002694:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 80026a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 80026ae:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002898 <robot_model_param_cal+0xc00>
 80026b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80026d6:	3308      	adds	r3, #8
 80026d8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80026dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e0:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 80026e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80026f2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80026f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8002708:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800270c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 8002718:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 800271c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002724:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002728:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002738:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800273c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002746:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800274a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800289c <robot_model_param_cal+0xc04>
 800275c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002760:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002764:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800276e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002772:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80028a0 <robot_model_param_cal+0xc08>
 8002784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002788:	eef0 0a67 	vmov.f32	s1, s15
 800278c:	eeb0 0a66 	vmov.f32	s0, s13
 8002790:	f014 fab4 	bl	8016cfc <fmaxf>
 8002794:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002798:	4b42      	ldr	r3, [pc, #264]	@ (80028a4 <robot_model_param_cal+0xc0c>)
 800279a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 800279e:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 80027a2:	eef0 7ae7 	vabs.f32	s15, s15
 80027a6:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 80027aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b2:	dc0b      	bgt.n	80027cc <robot_model_param_cal+0xb34>
 80027b4:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027b8:	eef0 7ae7 	vabs.f32	s15, s15
 80027bc:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 80027c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	f340 82aa 	ble.w	8002d20 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80027d4:	2203      	movs	r2, #3
 80027d6:	2103      	movs	r1, #3
 80027d8:	f010 fb1e 	bl	8012e18 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 80027dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027e0:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80027e4:	2203      	movs	r2, #3
 80027e6:	2103      	movs	r1, #3
 80027e8:	f010 fb16 	bl	8012e18 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 80027ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027f0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 80027f4:	2203      	movs	r2, #3
 80027f6:	2103      	movs	r1, #3
 80027f8:	f010 fb0e 	bl	8012e18 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80027fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002800:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800280a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800280e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8002818:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 800281c:	4619      	mov	r1, r3
 800281e:	f010 f959 	bl	8012ad4 <arm_mat_mult_f32>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <robot_model_param_cal+0xb9a>
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <robot_model_param_cal+0xc10>)
 800282a:	2204      	movs	r2, #4
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f002 fd2f 	bl	8005290 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002832:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002836:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002842:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002846:	edd3 7a04 	vldr	s15, [r3, #16]
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002852:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002856:	edd3 7a08 	vldr	s15, [r3, #32]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002862:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002866:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800286a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800286e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800289c <robot_model_param_cal+0xc04>
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80028ac <robot_model_param_cal+0xc14>
 800287a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287e:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002882:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002886:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800288a:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002894:	e023      	b.n	80028de <robot_model_param_cal+0xc46>
 8002896:	bf00      	nop
 8002898:	411ce80a 	.word	0x411ce80a
 800289c:	358637bd 	.word	0x358637bd
 80028a0:	34000000 	.word	0x34000000
 80028a4:	358637bd 	.word	0x358637bd
 80028a8:	24002978 	.word	0x24002978
 80028ac:	3d4ccccd 	.word	0x3d4ccccd
 80028b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028b4:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80028b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028c6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 80028ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80028d8:	3301      	adds	r3, #1
 80028da:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028de:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	dde4      	ble.n	80028b0 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 80028e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002902:	edc3 7a00 	vstr	s15, [r3]
 8002906:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800290a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800290e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002912:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002922:	edc3 7a04 	vstr	s15, [r3, #16]
 8002926:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800292e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002932:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800293e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002942:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002946:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800294a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f010 f963 	bl	8012c1c <arm_mat_inverse_f32>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <robot_model_param_cal+0xcce>
 800295c:	4b82      	ldr	r3, [pc, #520]	@ (8002b68 <robot_model_param_cal+0xed0>)
 800295e:	2204      	movs	r2, #4
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f002 fc95 	bl	8005290 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002966:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800296a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8002974:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002978:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002982:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002986:	4619      	mov	r1, r3
 8002988:	f010 f8a4 	bl	8012ad4 <arm_mat_mult_f32>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <robot_model_param_cal+0xd04>
 8002992:	4b75      	ldr	r3, [pc, #468]	@ (8002b68 <robot_model_param_cal+0xed0>)
 8002994:	2204      	movs	r2, #4
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f002 fc7a 	bl	8005290 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800299c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80029aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f010 f82c 	bl	8012a18 <arm_mat_trans_f32>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <robot_model_param_cal+0xd38>
 80029c6:	4b68      	ldr	r3, [pc, #416]	@ (8002b68 <robot_model_param_cal+0xed0>)
 80029c8:	2204      	movs	r2, #4
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f002 fc60 	bl	8005290 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 80029d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029d4:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80029d8:	2203      	movs	r2, #3
 80029da:	2103      	movs	r1, #3
 80029dc:	f010 fa1c 	bl	8012e18 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 80029e0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80029e4:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80029e8:	2203      	movs	r2, #3
 80029ea:	2103      	movs	r1, #3
 80029ec:	f010 fa14 	bl	8012e18 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 80029f0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80029f4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80029f8:	2203      	movs	r2, #3
 80029fa:	2103      	movs	r1, #3
 80029fc:	f010 fa0c 	bl	8012e18 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002a00:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002a04:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002a08:	2203      	movs	r2, #3
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	f010 fa04 	bl	8012e18 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002a10:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a14:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002a18:	2203      	movs	r2, #3
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	f010 f9fc 	bl	8012e18 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002a20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8002a2e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f010 f8f1 	bl	8012c1c <arm_mat_inverse_f32>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 80b2 	bne.w	8002ba6 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002a42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002a50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002a54:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f010 f83b 	bl	8012ad4 <arm_mat_mult_f32>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <robot_model_param_cal+0xdd6>
 8002a64:	4b40      	ldr	r3, [pc, #256]	@ (8002b68 <robot_model_param_cal+0xed0>)
 8002a66:	2204      	movs	r2, #4
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f002 fc11 	bl	8005290 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002a6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 8002a7c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a84:	4618      	mov	r0, r3
 8002a86:	f010 f825 	bl	8012ad4 <arm_mat_mult_f32>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <robot_model_param_cal+0xe02>
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <robot_model_param_cal+0xed0>)
 8002a92:	2204      	movs	r2, #4
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f002 fbfb 	bl	8005290 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002aa0:	e016      	b.n	8002ad0 <robot_model_param_cal+0xe38>
 8002aa2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa6:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002aaa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ab8:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002abc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002aca:	3301      	adds	r3, #1
 8002acc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002ad0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	dde4      	ble.n	8002aa2 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002ae0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ae8:	ed93 7a00 	vldr	s14, [r3]
 8002aec:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002afc:	edc3 7a00 	vstr	s15, [r3]
 8002b00:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b08:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b0c:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b1c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002b20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b28:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b2c:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b3c:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002b40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002b44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f010 f866 	bl	8012c1c <arm_mat_inverse_f32>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <robot_model_param_cal+0xec8>
 8002b56:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <robot_model_param_cal+0xed0>)
 8002b58:	2204      	movs	r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f002 fb98 	bl	8005290 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002b66:	e01a      	b.n	8002b9e <robot_model_param_cal+0xf06>
 8002b68:	24002978 	.word	0x24002978
 8002b6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 8002b8c:	443a      	add	r2, r7
 8002b8e:	3ae0      	subs	r2, #224	@ 0xe0
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002b9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	dde2      	ble.n	8002b6c <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002ba6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002baa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002bb4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bb8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002bdc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002be0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002bea:	3308      	adds	r3, #8
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002bf2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bf6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002c00:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c04:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002c18:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c1c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002c26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002c34:	3301      	adds	r3, #1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002c48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002c56:	3301      	adds	r3, #1
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002c60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002c6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002c88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002c96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c9a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002cae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002cbc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cc0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3304      	adds	r3, #4
 8002cce:	4413      	add	r3, r2
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002cd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002ce4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ce8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	441a      	add	r2, r3
 8002cf8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002d06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002d14:	3301      	adds	r3, #1
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	601a      	str	r2, [r3, #0]
	{
 8002d1e:	e227      	b.n	8003170 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002d20:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002d24:	eef1 6a67 	vneg.f32	s13, s15
 8002d28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002d36:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8002d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d3e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002d42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002d50:	3304      	adds	r3, #4
 8002d52:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8002d56:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8002d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d5e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 8002d62:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002d70:	3308      	adds	r3, #8
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8002d78:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8002d7c:	eeb1 7a67 	vneg.f32	s14, s15
 8002d80:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002d84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002d96:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002da2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002dac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002db0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 8002dc6:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002dca:	eeb1 7a67 	vneg.f32	s14, s15
 8002dce:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002dd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002dd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002de4:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002df0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002dfa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dfe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002e08:	3301      	adds	r3, #1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e12:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 8002e16:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002e1a:	eef1 6a67 	vneg.f32	s13, s15
 8002e1e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e22:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002e2c:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002e42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002e50:	3302      	adds	r3, #2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 8002e5e:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 8002e62:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002e66:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002e78:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002e8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e92:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea4:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8002ea8:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8002eac:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002eb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002eb4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002eb8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002ec2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ece:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002ed8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002edc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef0:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 8002ef4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ef8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002f02:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f0e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002f18:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f1c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002f26:	3301      	adds	r3, #1
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f34:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f38:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002f46:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f4a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f00f fd5e 	bl	8012a18 <arm_mat_trans_f32>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <robot_model_param_cal+0x12d4>
 8002f62:	4b86      	ldr	r3, [pc, #536]	@ (800317c <robot_model_param_cal+0x14e4>)
 8002f64:	2204      	movs	r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f002 f992 	bl	8005290 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 8002f6c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002f70:	2224      	movs	r2, #36	@ 0x24
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f011 faa4 	bl	80144c2 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 8002f7a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002f7e:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002f82:	2203      	movs	r2, #3
 8002f84:	2103      	movs	r1, #3
 8002f86:	f00f ff47 	bl	8012e18 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f8a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 8002f98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002fa6:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002faa:	4619      	mov	r1, r3
 8002fac:	f00f fd92 	bl	8012ad4 <arm_mat_mult_f32>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <robot_model_param_cal+0x1328>
 8002fb6:	4b71      	ldr	r3, [pc, #452]	@ (800317c <robot_model_param_cal+0x14e4>)
 8002fb8:	2204      	movs	r2, #4
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f002 f968 	bl	8005290 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002fce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fd2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8002fdc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f00f fd77 	bl	8012ad4 <arm_mat_mult_f32>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <robot_model_param_cal+0x135e>
 8002fec:	4b63      	ldr	r3, [pc, #396]	@ (800317c <robot_model_param_cal+0x14e4>)
 8002fee:	2204      	movs	r2, #4
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f002 f94d 	bl	8005290 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002ff6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ffa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8003004:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003008:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8003016:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800301a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8003024:	3304      	adds	r3, #4
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 800302c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003030:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800303a:	3308      	adds	r3, #8
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8003042:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003046:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8003050:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003054:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8003068:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800306c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8003076:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800307a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8003084:	3301      	adds	r3, #1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800308e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8003098:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800309c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80030a6:	3301      	adds	r3, #1
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 80030b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80030be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80030cc:	3302      	adds	r3, #2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 80030d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80030e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 80030fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003102:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800310c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003110:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	3304      	adds	r3, #4
 800311e:	4413      	add	r3, r2
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8003126:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800312a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8003134:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003138:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8003142:	3301      	adds	r3, #1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	441a      	add	r2, r3
 8003148:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800314c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8003156:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800315a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8003164:	3301      	adds	r3, #1
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	601a      	str	r2, [r3, #0]
	}
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	24002978 	.word	0x24002978

08003180 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e0cb      	b.n	8003326 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	3374      	adds	r3, #116	@ 0x74
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	ed93 7a00 	vldr	s14, [r3]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2198      	movs	r1, #152	@ 0x98
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	332c      	adds	r3, #44	@ 0x2c
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b2:	4bae      	ldr	r3, [pc, #696]	@ (800346c <robot_state_update+0x2ec>)
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d0:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3374      	adds	r3, #116	@ 0x74
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	ed93 7a00 	vldr	s14, [r3]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2198      	movs	r1, #152	@ 0x98
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3330      	adds	r3, #48	@ 0x30
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f8:	4b9c      	ldr	r3, [pc, #624]	@ (800346c <robot_state_update+0x2ec>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3374      	adds	r3, #116	@ 0x74
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	ed93 7a00 	vldr	s14, [r3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2198      	movs	r1, #152	@ 0x98
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3334      	adds	r3, #52	@ 0x34
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	3374      	adds	r3, #116	@ 0x74
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	ed93 7a00 	vldr	s14, [r3]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2198      	movs	r1, #152	@ 0x98
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3338      	adds	r3, #56	@ 0x38
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3374      	adds	r3, #116	@ 0x74
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2198      	movs	r1, #152	@ 0x98
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	333c      	adds	r3, #60	@ 0x3c
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3374      	adds	r3, #116	@ 0x74
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	ed93 7a00 	vldr	s14, [r3]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2198      	movs	r1, #152	@ 0x98
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3340      	adds	r3, #64	@ 0x40
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e6:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3374      	adds	r3, #116	@ 0x74
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	ed93 7a00 	vldr	s14, [r3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	2198      	movs	r1, #152	@ 0x98
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3304      	adds	r3, #4
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b02      	cmp	r3, #2
 800332a:	f77f af30 	ble.w	800318e <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800334a:	3304      	adds	r3, #4
 800334c:	6852      	ldr	r2, [r2, #4]
 800334e:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003356:	3308      	adds	r3, #8
 8003358:	ed93 7a00 	vldr	s14, [r3]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003362:	3304      	adds	r3, #4
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800336e:	3308      	adds	r3, #8
 8003370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003374:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e036      	b.n	80033ec <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	ed93 7a00 	vldr	s14, [r3]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	337c      	adds	r3, #124	@ 0x7c
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	dd05      	ble.n	80033b2 <robot_state_update+0x232>
 80033a6:	4b32      	ldr	r3, [pc, #200]	@ (8003470 <robot_state_update+0x2f0>)
 80033a8:	2205      	movs	r2, #5
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f001 ff70 	bl	8005290 <Error_Handler>
 80033b0:	e019      	b.n	80033e6 <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	337e      	adds	r3, #126	@ 0x7e
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d504      	bpl.n	80033e6 <robot_state_update+0x266>
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <robot_state_update+0x2f0>)
 80033de:	2205      	movs	r2, #5
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f001 ff55 	bl	8005290 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	ddc5      	ble.n	800337e <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fc50 	bl	8001c98 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fe fb67 	bl	8001acc <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e02c      	b.n	800345e <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b02      	cmp	r3, #2
 8003462:	ddcf      	ble.n	8003404 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e03f      	b.n	80034ea <robot_state_update+0x36a>
 800346a:	bf00      	nop
 800346c:	240022e8 	.word	0x240022e8
 8003470:	24002978 	.word	0x24002978
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	441a      	add	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3301      	adds	r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	ddc1      	ble.n	8003474 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e01e      	b.n	8003534 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b02      	cmp	r3, #2
 8003538:	dddd      	ble.n	80034f6 <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 800354c:	461a      	mov	r2, r3
 800354e:	f00f fac1 	bl	8012ad4 <arm_mat_mult_f32>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <robot_state_update+0x3e2>
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <robot_state_update+0x3ec>)
 800355a:	2204      	movs	r2, #4
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f001 fe97 	bl	8005290 <Error_Handler>
}
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	24002978 	.word	0x24002978

08003570 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e040      	b.n	8003606 <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	4413      	add	r3, r2
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3304      	adds	r3, #4
 80035cc:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	4413      	add	r3, r2
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3304      	adds	r3, #4
 80035e6:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	4413      	add	r3, r2
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	ddbb      	ble.n	8003584 <robot_pos_pid_gain_setting+0x14>
	}
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e145      	b.n	80038bc <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003630:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 80038f4 <robot_pos_pid+0x2d8>
 8003634:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800364c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003654:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036a0:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	ed93 7a00 	vldr	s14, [r3]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80038f8 <robot_pos_pid+0x2dc>
 80036ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036f6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80036fa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	edd3 5a00 	vldr	s11, [r3]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	edd3 7a00 	vldr	s15, [r3]
 8003748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	edd3 5a00 	vldr	s11, [r3]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800377a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003792:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037a6:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037be:	ee37 5b07 	vadd.f64	d5, d7, d7
 80037c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ca:	ee37 6b07 	vadd.f64	d6, d7, d7
 80037ce:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80038f8 <robot_pos_pid+0x2dc>
 80037d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037da:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	ed93 7a00 	vldr	s14, [r3]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800380a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80038f8 <robot_pos_pid+0x2dc>
 800380e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003812:	edd7 7a04 	vldr	s15, [r7, #16]
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800381e:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003822:	edd7 7a04 	vldr	s15, [r7, #16]
 8003826:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800382a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800382e:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80038f8 <robot_pos_pid+0x2dc>
 8003832:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003836:	ee35 7b07 	vadd.f64	d7, d5, d7
 800383a:	ee84 5b07 	vdiv.f64	d5, d4, d7
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003852:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003856:	ee36 7b47 	vsub.f64	d7, d6, d7
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386a:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	ed93 7a00 	vldr	s14, [r3]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3301      	adds	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	f77f aeb6 	ble.w	8003630 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80038d6:	461a      	mov	r2, r3
 80038d8:	f00f f8fc 	bl	8012ad4 <arm_mat_mult_f32>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <robot_pos_pid+0x2d0>
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <robot_pos_pid+0x2e0>)
 80038e4:	2204      	movs	r2, #4
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f001 fcd2 	bl	8005290 <Error_Handler>
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40490fd8 	.word	0x40490fd8
 80038f8:	3b03126f 	.word	0x3b03126f
 80038fc:	24002978 	.word	0x24002978

08003900 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <uart3_rb_pop+0x50>)
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	4b11      	ldr	r3, [pc, #68]	@ (8003954 <uart3_rb_pop+0x54>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	429a      	cmp	r2, r3
 8003916:	d101      	bne.n	800391c <uart3_rb_pop+0x1c>
 8003918:	2300      	movs	r3, #0
 800391a:	e012      	b.n	8003942 <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <uart3_rb_pop+0x50>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <uart3_rb_pop+0x58>)
 8003926:	5c9a      	ldrb	r2, [r3, r2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 800392c:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <uart3_rb_pop+0x50>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	3301      	adds	r3, #1
 8003934:	b29b      	uxth	r3, r3
 8003936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <uart3_rb_pop+0x50>)
 800393e:	801a      	strh	r2, [r3, #0]
  return 1;
 8003940:	2301      	movs	r3, #1
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	24000eb6 	.word	0x24000eb6
 8003954:	24000eb4 	.word	0x24000eb4
 8003958:	240006b4 	.word	0x240006b4

0800395c <parse_pc_line_to_floats>:
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
}

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	@ 0x38
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  char *L = strchr(line, '[');
 8003968:	215b      	movs	r1, #91	@ 0x5b
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f010 fdb1 	bl	80144d2 <strchr>
 8003970:	62b8      	str	r0, [r7, #40]	@ 0x28
  char *R = strrchr(line, ']');
 8003972:	215d      	movs	r1, #93	@ 0x5d
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f010 fdcb 	bl	8014510 <strrchr>
 800397a:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!L || !R || R <= L) return 0;
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <parse_pc_line_to_floats+0x34>
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <parse_pc_line_to_floats+0x34>
 8003988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	429a      	cmp	r2, r3
 800398e:	d801      	bhi.n	8003994 <parse_pc_line_to_floats+0x38>
 8003990:	2300      	movs	r3, #0
 8003992:	e097      	b.n	8003ac4 <parse_pc_line_to_floats+0x168>

  *R = '\0'; ++L;
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	3301      	adds	r3, #1
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28

  int count = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	637b      	str	r3, [r7, #52]	@ 0x34
  char *p = L;
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30

  while (*p && count < maxn) {
 80039a8:	e07b      	b.n	8003aa2 <parse_pc_line_to_floats+0x146>
    // 구분자(,) 전까지 토큰 범위 찾기
    char *q = p;
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*q && *q != ',') ++q;
 80039ae:	e002      	b.n	80039b6 <parse_pc_line_to_floats+0x5a>
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	3301      	adds	r3, #1
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <parse_pc_line_to_floats+0x72>
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b2c      	cmp	r3, #44	@ 0x2c
 80039c4:	d1f4      	bne.n	80039b0 <parse_pc_line_to_floats+0x54>

    // 토큰 문자열 [p, q)
    // 앞뒤 공백 제거
    while (*p == ' ' || *p == '\t') ++p;
 80039c6:	e002      	b.n	80039ce <parse_pc_line_to_floats+0x72>
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	3301      	adds	r3, #1
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d0f8      	beq.n	80039c8 <parse_pc_line_to_floats+0x6c>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d0f4      	beq.n	80039c8 <parse_pc_line_to_floats+0x6c>
    char *e = q;
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	61bb      	str	r3, [r7, #24]
    while (e > p && (e[-1] == ' ' || e[-1] == '\t')) --e;
 80039e2:	e002      	b.n	80039ea <parse_pc_line_to_floats+0x8e>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d209      	bcs.n	8003a06 <parse_pc_line_to_floats+0xaa>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d0f3      	beq.n	80039e4 <parse_pc_line_to_floats+0x88>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	d0ee      	beq.n	80039e4 <parse_pc_line_to_floats+0x88>

    if (e > p) { // 빈 토큰이 아니면
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d242      	bcs.n	8003a94 <parse_pc_line_to_floats+0x138>
      errno = 0;
 8003a0e:	f010 fe3d 	bl	801468c <__errno>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
      char tmp = *e; *e = '\0';
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
      char *endptr = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
      float v = strtof(p, endptr ? &endptr : &e); // newlib-nano 대응
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <parse_pc_line_to_floats+0xda>
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	e001      	b.n	8003a3a <parse_pc_line_to_floats+0xde>
 8003a36:	f107 0318 	add.w	r3, r7, #24
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a3e:	f00f ffa7 	bl	8013990 <strtof>
 8003a42:	ed87 0a07 	vstr	s0, [r7, #28]
      if (endptr) {
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <parse_pc_line_to_floats+0x120>
        while (*endptr == ' ' || *endptr == '\t') ++endptr;
 8003a4c:	e002      	b.n	8003a54 <parse_pc_line_to_floats+0xf8>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d0f8      	beq.n	8003a4e <parse_pc_line_to_floats+0xf2>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d0f4      	beq.n	8003a4e <parse_pc_line_to_floats+0xf2>
        if (errno != 0 || *endptr != '\0') return 0; // 유효 숫자 아님 → 실패
 8003a64:	f010 fe12 	bl	801468c <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <parse_pc_line_to_floats+0x11c>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <parse_pc_line_to_floats+0x120>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e023      	b.n	8003ac4 <parse_pc_line_to_floats+0x168>
      }
      vals[count++] = v;
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	4413      	add	r3, r2
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	601a      	str	r2, [r3, #0]
      *e = tmp;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003a92:	701a      	strb	r2, [r3, #0]
    }
    // 끝 처리
    if (*q == '\0') break;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <parse_pc_line_to_floats+0x15a>
    p = q + 1;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  while (*p && count < maxn) {
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <parse_pc_line_to_floats+0x15c>
 8003aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f6ff af7b 	blt.w	80039aa <parse_pc_line_to_floats+0x4e>
 8003ab4:	e000      	b.n	8003ab8 <parse_pc_line_to_floats+0x15c>
    if (*q == '\0') break;
 8003ab6:	bf00      	nop
  }

  // 꼭 19개여야 성공
  return (count == PC_MSG_FIELDS) ? count : 0;
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	2b13      	cmp	r3, #19
 8003abc:	d101      	bne.n	8003ac2 <parse_pc_line_to_floats+0x166>
 8003abe:	2313      	movs	r3, #19
 8003ac0:	e000      	b.n	8003ac4 <parse_pc_line_to_floats+0x168>
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3738      	adds	r7, #56	@ 0x38
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8003acc:	b480      	push	{r7}
 8003ace:	b097      	sub	sp, #92	@ 0x5c
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8003adc:	2302      	movs	r3, #2
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae8:	2305      	movs	r3, #5
 8003aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aec:	2306      	movs	r3, #6
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af0:	2307      	movs	r3, #7
 8003af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003af4:	2308      	movs	r3, #8
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 8003af8:	2309      	movs	r3, #9
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afc:	230a      	movs	r3, #10
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b00:	230b      	movs	r3, #11
 8003b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b04:	230c      	movs	r3, #12
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b08:	230d      	movs	r3, #13
 8003b0a:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 8003b0c:	230e      	movs	r3, #14
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	230f      	movs	r3, #15
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	2310      	movs	r3, #16
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	2311      	movs	r3, #17
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	2312      	movs	r3, #18
 8003b1e:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 8003b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	f240 809c 	bls.w	8003c70 <apply_pc_floats+0x1a4>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	f240 8090 	bls.w	8003c70 <apply_pc_floats+0x1a4>
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	f240 8084 	bls.w	8003c70 <apply_pc_floats+0x1a4>

	// 1) taskTime
	//  gTaskTime_s = v[T];

	// 2) 타겟 위치 (사용자 전역/객체)
	target_posXYZ.pData[0] = v[tx];
 8003b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	441a      	add	r2, r3
 8003b70:	4b42      	ldr	r3, [pc, #264]	@ (8003c7c <apply_pc_floats+0x1b0>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	601a      	str	r2, [r3, #0]
	target_posXYZ.pData[1] = v[ty];
 8003b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	441a      	add	r2, r3
 8003b80:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <apply_pc_floats+0x1b0>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	601a      	str	r2, [r3, #0]
	target_posXYZ.pData[2] = v[tz];
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	441a      	add	r2, r3
 8003b92:	4b3a      	ldr	r3, [pc, #232]	@ (8003c7c <apply_pc_floats+0x1b0>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	3308      	adds	r3, #8
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	601a      	str	r2, [r3, #0]

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a36      	ldr	r2, [pc, #216]	@ (8003c80 <apply_pc_floats+0x1b4>)
 8003ba8:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8003baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a33      	ldr	r2, [pc, #204]	@ (8003c84 <apply_pc_floats+0x1b8>)
 8003bb6:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a31      	ldr	r2, [pc, #196]	@ (8003c88 <apply_pc_floats+0x1bc>)
 8003bc4:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <apply_pc_floats+0x1c0>)
 8003bd2:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	@ (8003c90 <apply_pc_floats+0x1c4>)
 8003be0:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <apply_pc_floats+0x1b4>)
 8003bee:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a22      	ldr	r2, [pc, #136]	@ (8003c84 <apply_pc_floats+0x1b8>)
 8003bfc:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <apply_pc_floats+0x1bc>)
 8003c0a:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <apply_pc_floats+0x1c0>)
 8003c18:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <apply_pc_floats+0x1c4>)
 8003c26:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <apply_pc_floats+0x1b4>)
 8003c34:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <apply_pc_floats+0x1b8>)
 8003c42:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c88 <apply_pc_floats+0x1bc>)
 8003c50:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c8c <apply_pc_floats+0x1c0>)
 8003c5e:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <apply_pc_floats+0x1c4>)
 8003c6c:	6093      	str	r3, [r2, #8]
 8003c6e:	e000      	b.n	8003c72 <apply_pc_floats+0x1a6>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 8003c70:	bf00      	nop
}
 8003c72:	375c      	adds	r7, #92	@ 0x5c
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	240022f8 	.word	0x240022f8
 8003c80:	24000024 	.word	0x24000024
 8003c84:	24000030 	.word	0x24000030
 8003c88:	2400003c 	.word	0x2400003c
 8003c8c:	24000048 	.word	0x24000048
 8003c90:	24002300 	.word	0x24002300

08003c94 <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b096      	sub	sp, #88	@ 0x58
 8003c98:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 8003c9a:	e03b      	b.n	8003d14 <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 8003c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ca0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8003ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ca8:	2b0d      	cmp	r3, #13
 8003caa:	d032      	beq.n	8003d12 <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8003cac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003cb0:	2b0a      	cmp	r3, #10
 8003cb2:	d11a      	bne.n	8003cea <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d02b      	beq.n	8003d14 <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <uart3_poll_and_process_lines+0xa0>)
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	2213      	movs	r2, #19
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4819      	ldr	r0, [pc, #100]	@ (8003d34 <uart3_poll_and_process_lines+0xa0>)
 8003cce:	f7ff fe45 	bl	800395c <parse_pc_line_to_floats>
 8003cd2:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n >= PC_MSG_FIELDS) {
 8003cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd6:	2b12      	cmp	r3, #18
 8003cd8:	dd03      	ble.n	8003ce2 <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8003cda:	463b      	mov	r3, r7
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fef5 	bl	8003acc <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e014      	b.n	8003d14 <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d809      	bhi.n	8003d0a <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	490c      	ldr	r1, [pc, #48]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003cfe:	600a      	str	r2, [r1, #0]
 8003d00:	490c      	ldr	r1, [pc, #48]	@ (8003d34 <uart3_poll_and_process_lines+0xa0>)
 8003d02:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003d06:	54ca      	strb	r2, [r1, r3]
 8003d08:	e004      	b.n	8003d14 <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <uart3_poll_and_process_lines+0x9c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e000      	b.n	8003d14 <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 8003d12:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 8003d14:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fdf1 	bl	8003900 <uart3_rb_pop>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1bb      	bne.n	8003c9c <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3758      	adds	r7, #88	@ 0x58
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	240012b8 	.word	0x240012b8
 8003d34:	24000eb8 	.word	0x24000eb8

08003d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e060      	b.n	8003e06 <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	49bf      	ldr	r1, [pc, #764]	@ (8004048 <main+0x310>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2098      	movs	r0, #152	@ 0x98
 8003d4e:	fb00 f303 	mul.w	r3, r0, r3
 8003d52:	440b      	add	r3, r1
 8003d54:	3308      	adds	r3, #8
 8003d56:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 8003d58:	4abb      	ldr	r2, [pc, #748]	@ (8004048 <main+0x310>)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2198      	movs	r1, #152	@ 0x98
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	330c      	adds	r3, #12
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 8003d6a:	4ab7      	ldr	r2, [pc, #732]	@ (8004048 <main+0x310>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2198      	movs	r1, #152	@ 0x98
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3314      	adds	r3, #20
 8003d78:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003d7c:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 8003d7e:	4ab2      	ldr	r2, [pc, #712]	@ (8004048 <main+0x310>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2198      	movs	r1, #152	@ 0x98
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	4aaf      	ldr	r2, [pc, #700]	@ (800404c <main+0x314>)
 8003d8e:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 8003d90:	4aad      	ldr	r2, [pc, #692]	@ (8004048 <main+0x310>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2198      	movs	r1, #152	@ 0x98
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	331c      	adds	r3, #28
 8003d9e:	4aac      	ldr	r2, [pc, #688]	@ (8004050 <main+0x318>)
 8003da0:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 8003da2:	2200      	movs	r2, #0
 8003da4:	2108      	movs	r1, #8
 8003da6:	2008      	movs	r0, #8
 8003da8:	f00c fac9 	bl	801033e <xQueueGenericCreate>
 8003dac:	4602      	mov	r2, r0
 8003dae:	49a6      	ldr	r1, [pc, #664]	@ (8004048 <main+0x310>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2098      	movs	r0, #152	@ 0x98
 8003db4:	fb00 f303 	mul.w	r3, r0, r3
 8003db8:	440b      	add	r3, r1
 8003dba:	3310      	adds	r3, #16
 8003dbc:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 8003dbe:	4aa2      	ldr	r2, [pc, #648]	@ (8004048 <main+0x310>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2198      	movs	r1, #152	@ 0x98
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3310      	adds	r3, #16
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <main+0xa4>
			sta = 3;
 8003dd2:	4ba0      	ldr	r3, [pc, #640]	@ (8004054 <main+0x31c>)
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003dd8:	f001 fa5a 	bl	8005290 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8003ddc:	4a9a      	ldr	r2, [pc, #616]	@ (8004048 <main+0x310>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2198      	movs	r1, #152	@ 0x98
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3394      	adds	r3, #148	@ 0x94
 8003dea:	4a9b      	ldr	r2, [pc, #620]	@ (8004058 <main+0x320>)
 8003dec:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 8003dee:	4a96      	ldr	r2, [pc, #600]	@ (8004048 <main+0x310>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3301      	adds	r3, #1
 8003df4:	2198      	movs	r1, #152	@ 0x98
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a97      	ldr	r2, [pc, #604]	@ (800405c <main+0x324>)
 8003dfe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3301      	adds	r3, #1
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	dd9b      	ble.n	8003d44 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8003e0c:	4b94      	ldr	r3, [pc, #592]	@ (8004060 <main+0x328>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2103      	movs	r1, #3
 8003e12:	4894      	ldr	r0, [pc, #592]	@ (8004064 <main+0x32c>)
 8003e14:	f00f f800 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 8003e18:	4b93      	ldr	r3, [pc, #588]	@ (8004068 <main+0x330>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	4893      	ldr	r0, [pc, #588]	@ (800406c <main+0x334>)
 8003e20:	f00e fffa 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8003e24:	4b92      	ldr	r3, [pc, #584]	@ (8004070 <main+0x338>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4892      	ldr	r0, [pc, #584]	@ (8004074 <main+0x33c>)
 8003e2c:	f00e fff4 	bl	8012e18 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 8003e30:	4b85      	ldr	r3, [pc, #532]	@ (8004048 <main+0x310>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 8003e36:	4b84      	ldr	r3, [pc, #528]	@ (8004048 <main+0x310>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8003e3c:	4b82      	ldr	r3, [pc, #520]	@ (8004048 <main+0x310>)
 8003e3e:	4a8e      	ldr	r2, [pc, #568]	@ (8004078 <main+0x340>)
 8003e40:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 8003e44:	4b80      	ldr	r3, [pc, #512]	@ (8004048 <main+0x310>)
 8003e46:	4a8c      	ldr	r2, [pc, #560]	@ (8004078 <main+0x340>)
 8003e48:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004048 <main+0x310>)
 8003e4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003e52:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 8003e56:	eddf 7a89 	vldr	s15, [pc, #548]	@ 800407c <main+0x344>
 8003e5a:	eef1 7a67 	vneg.f32	s15, s15
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004048 <main+0x310>)
 8003e60:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 8003e64:	4a86      	ldr	r2, [pc, #536]	@ (8004080 <main+0x348>)
 8003e66:	4b78      	ldr	r3, [pc, #480]	@ (8004048 <main+0x310>)
 8003e68:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 8003e6c:	4b76      	ldr	r3, [pc, #472]	@ (8004048 <main+0x310>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 8003e76:	eddf 6a81 	vldr	s13, [pc, #516]	@ 800407c <main+0x344>
 8003e7a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8004084 <main+0x34c>
 8003e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e82:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004088 <main+0x350>
 8003e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004048 <main+0x310>)
 8003e8c:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 8003e90:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800407c <main+0x344>
 8003e94:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004084 <main+0x34c>
 8003e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800408c <main+0x354>
 8003ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <main+0x310>)
 8003ea6:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003eaa:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800407c <main+0x344>
 8003eae:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004084 <main+0x34c>
 8003eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb6:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8004090 <main+0x358>
 8003eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ebe:	4b62      	ldr	r3, [pc, #392]	@ (8004048 <main+0x310>)
 8003ec0:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 8003ec4:	4b60      	ldr	r3, [pc, #384]	@ (8004048 <main+0x310>)
 8003ec6:	4a73      	ldr	r2, [pc, #460]	@ (8004094 <main+0x35c>)
 8003ec8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 8003ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8004048 <main+0x310>)
 8003ece:	4a72      	ldr	r2, [pc, #456]	@ (8004098 <main+0x360>)
 8003ed0:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 8003ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8004048 <main+0x310>)
 8003ed6:	4a70      	ldr	r2, [pc, #448]	@ (8004098 <main+0x360>)
 8003ed8:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 8003edc:	4b5a      	ldr	r3, [pc, #360]	@ (8004048 <main+0x310>)
 8003ede:	4a6f      	ldr	r2, [pc, #444]	@ (800409c <main+0x364>)
 8003ee0:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 8003ee4:	4b58      	ldr	r3, [pc, #352]	@ (8004048 <main+0x310>)
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 8003eee:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <main+0x310>)
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 8003ef8:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <main+0x310>)
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 8003f02:	4b51      	ldr	r3, [pc, #324]	@ (8004048 <main+0x310>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004048 <main+0x310>)
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 8003f16:	4b4c      	ldr	r3, [pc, #304]	@ (8004048 <main+0x310>)
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 8003f20:	4b49      	ldr	r3, [pc, #292]	@ (8004048 <main+0x310>)
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <main+0x368>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2103      	movs	r1, #3
 8003f30:	485c      	ldr	r0, [pc, #368]	@ (80040a4 <main+0x36c>)
 8003f32:	f00e ff71 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 8003f36:	4b5c      	ldr	r3, [pc, #368]	@ (80040a8 <main+0x370>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	485b      	ldr	r0, [pc, #364]	@ (80040ac <main+0x374>)
 8003f3e:	f00e ff6b 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 8003f42:	4b5b      	ldr	r3, [pc, #364]	@ (80040b0 <main+0x378>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	2103      	movs	r1, #3
 8003f48:	485a      	ldr	r0, [pc, #360]	@ (80040b4 <main+0x37c>)
 8003f4a:	f00e ff65 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 8003f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80040b8 <main+0x380>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	2103      	movs	r1, #3
 8003f54:	4859      	ldr	r0, [pc, #356]	@ (80040bc <main+0x384>)
 8003f56:	f00e ff5f 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 8003f5a:	4b59      	ldr	r3, [pc, #356]	@ (80040c0 <main+0x388>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2103      	movs	r1, #3
 8003f60:	4858      	ldr	r0, [pc, #352]	@ (80040c4 <main+0x38c>)
 8003f62:	f00e ff59 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 8003f66:	4b58      	ldr	r3, [pc, #352]	@ (80040c8 <main+0x390>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	4857      	ldr	r0, [pc, #348]	@ (80040cc <main+0x394>)
 8003f6e:	f00e ff53 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 8003f72:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <main+0x398>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	2103      	movs	r1, #3
 8003f78:	4856      	ldr	r0, [pc, #344]	@ (80040d4 <main+0x39c>)
 8003f7a:	f00e ff4d 	bl	8012e18 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 8003f7e:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <main+0x3a0>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	2103      	movs	r1, #3
 8003f84:	4855      	ldr	r0, [pc, #340]	@ (80040dc <main+0x3a4>)
 8003f86:	f00e ff47 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 8003f8a:	4b55      	ldr	r3, [pc, #340]	@ (80040e0 <main+0x3a8>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2103      	movs	r1, #3
 8003f90:	4854      	ldr	r0, [pc, #336]	@ (80040e4 <main+0x3ac>)
 8003f92:	f00e ff41 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 8003f96:	4b54      	ldr	r3, [pc, #336]	@ (80040e8 <main+0x3b0>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2103      	movs	r1, #3
 8003f9c:	4853      	ldr	r0, [pc, #332]	@ (80040ec <main+0x3b4>)
 8003f9e:	f00e ff3b 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 8003fa2:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <main+0x3b8>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	4852      	ldr	r0, [pc, #328]	@ (80040f4 <main+0x3bc>)
 8003faa:	f00e ff35 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8003fae:	4b52      	ldr	r3, [pc, #328]	@ (80040f8 <main+0x3c0>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	4851      	ldr	r0, [pc, #324]	@ (80040fc <main+0x3c4>)
 8003fb6:	f00e ff2f 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003fba:	4b51      	ldr	r3, [pc, #324]	@ (8004100 <main+0x3c8>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	4850      	ldr	r0, [pc, #320]	@ (8004104 <main+0x3cc>)
 8003fc2:	f00e ff29 	bl	8012e18 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 8003fc6:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <main+0x3d0>)
 8003fc8:	2203      	movs	r2, #3
 8003fca:	2103      	movs	r1, #3
 8003fcc:	484f      	ldr	r0, [pc, #316]	@ (800410c <main+0x3d4>)
 8003fce:	f00e ff23 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 8003fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004110 <main+0x3d8>)
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	484e      	ldr	r0, [pc, #312]	@ (8004114 <main+0x3dc>)
 8003fda:	f00e ff1d 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8003fde:	4b4e      	ldr	r3, [pc, #312]	@ (8004118 <main+0x3e0>)
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	484d      	ldr	r0, [pc, #308]	@ (800411c <main+0x3e4>)
 8003fe6:	f00e ff17 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8003fea:	4b4d      	ldr	r3, [pc, #308]	@ (8004120 <main+0x3e8>)
 8003fec:	2203      	movs	r2, #3
 8003fee:	2103      	movs	r1, #3
 8003ff0:	484c      	ldr	r0, [pc, #304]	@ (8004124 <main+0x3ec>)
 8003ff2:	f00e ff11 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 8003ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8004128 <main+0x3f0>)
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	2103      	movs	r1, #3
 8003ffc:	484b      	ldr	r0, [pc, #300]	@ (800412c <main+0x3f4>)
 8003ffe:	f00e ff0b 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 8004002:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <main+0x3f8>)
 8004004:	2201      	movs	r2, #1
 8004006:	2103      	movs	r1, #3
 8004008:	484a      	ldr	r0, [pc, #296]	@ (8004134 <main+0x3fc>)
 800400a:	f00e ff05 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <main+0x400>)
 8004010:	2201      	movs	r2, #1
 8004012:	2103      	movs	r1, #3
 8004014:	4849      	ldr	r0, [pc, #292]	@ (800413c <main+0x404>)
 8004016:	f00e feff 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 800401a:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <main+0x408>)
 800401c:	2203      	movs	r2, #3
 800401e:	2103      	movs	r1, #3
 8004020:	4848      	ldr	r0, [pc, #288]	@ (8004144 <main+0x40c>)
 8004022:	f00e fef9 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8004026:	4b48      	ldr	r3, [pc, #288]	@ (8004148 <main+0x410>)
 8004028:	2203      	movs	r2, #3
 800402a:	2103      	movs	r1, #3
 800402c:	4847      	ldr	r0, [pc, #284]	@ (800414c <main+0x414>)
 800402e:	f00e fef3 	bl	8012e18 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 8004032:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <main+0x418>)
 8004034:	2201      	movs	r2, #1
 8004036:	2103      	movs	r1, #3
 8004038:	4846      	ldr	r0, [pc, #280]	@ (8004154 <main+0x41c>)
 800403a:	f00e feed 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 800403e:	4b46      	ldr	r3, [pc, #280]	@ (8004158 <main+0x420>)
 8004040:	2201      	movs	r2, #1
 8004042:	2103      	movs	r1, #3
 8004044:	e08a      	b.n	800415c <main+0x424>
 8004046:	bf00      	nop
 8004048:	2400230c 	.word	0x2400230c
 800404c:	41200000 	.word	0x41200000
 8004050:	3dfbe76d 	.word	0x3dfbe76d
 8004054:	24002978 	.word	0x24002978
 8004058:	40e66666 	.word	0x40e66666
 800405c:	c0e66666 	.word	0xc0e66666
 8004060:	24000000 	.word	0x24000000
 8004064:	240022e8 	.word	0x240022e8
 8004068:	2400000c 	.word	0x2400000c
 800406c:	240022f0 	.word	0x240022f0
 8004070:	24000018 	.word	0x24000018
 8004074:	240022f8 	.word	0x240022f8
 8004078:	bf800000 	.word	0xbf800000
 800407c:	40490fd8 	.word	0x40490fd8
 8004080:	40490fd8 	.word	0x40490fd8
 8004084:	43340000 	.word	0x43340000
 8004088:	42aa0000 	.word	0x42aa0000
 800408c:	c3200000 	.word	0xc3200000
 8004090:	c2200000 	.word	0xc2200000
 8004094:	3e343958 	.word	0x3e343958
 8004098:	3eeb851f 	.word	0x3eeb851f
 800409c:	407c209b 	.word	0x407c209b
 80040a0:	240024f0 	.word	0x240024f0
 80040a4:	240024e8 	.word	0x240024e8
 80040a8:	2400251c 	.word	0x2400251c
 80040ac:	24002514 	.word	0x24002514
 80040b0:	24002530 	.word	0x24002530
 80040b4:	24002528 	.word	0x24002528
 80040b8:	24002544 	.word	0x24002544
 80040bc:	2400253c 	.word	0x2400253c
 80040c0:	24002558 	.word	0x24002558
 80040c4:	24002550 	.word	0x24002550
 80040c8:	2400256c 	.word	0x2400256c
 80040cc:	24002564 	.word	0x24002564
 80040d0:	24002580 	.word	0x24002580
 80040d4:	24002578 	.word	0x24002578
 80040d8:	24002594 	.word	0x24002594
 80040dc:	2400258c 	.word	0x2400258c
 80040e0:	240025a8 	.word	0x240025a8
 80040e4:	240025a0 	.word	0x240025a0
 80040e8:	240025bc 	.word	0x240025bc
 80040ec:	240025b4 	.word	0x240025b4
 80040f0:	240025d0 	.word	0x240025d0
 80040f4:	240025c8 	.word	0x240025c8
 80040f8:	240025e4 	.word	0x240025e4
 80040fc:	240025dc 	.word	0x240025dc
 8004100:	240025f8 	.word	0x240025f8
 8004104:	240025f0 	.word	0x240025f0
 8004108:	24002638 	.word	0x24002638
 800410c:	24002630 	.word	0x24002630
 8004110:	24002664 	.word	0x24002664
 8004114:	2400265c 	.word	0x2400265c
 8004118:	24002690 	.word	0x24002690
 800411c:	24002688 	.word	0x24002688
 8004120:	240026bc 	.word	0x240026bc
 8004124:	240026b4 	.word	0x240026b4
 8004128:	240026e8 	.word	0x240026e8
 800412c:	240026e0 	.word	0x240026e0
 8004130:	24002714 	.word	0x24002714
 8004134:	2400270c 	.word	0x2400270c
 8004138:	24002728 	.word	0x24002728
 800413c:	24002720 	.word	0x24002720
 8004140:	2400273c 	.word	0x2400273c
 8004144:	24002734 	.word	0x24002734
 8004148:	24002768 	.word	0x24002768
 800414c:	24002760 	.word	0x24002760
 8004150:	240027d0 	.word	0x240027d0
 8004154:	240027c8 	.word	0x240027c8
 8004158:	240027e4 	.word	0x240027e4
 800415c:	4853      	ldr	r0, [pc, #332]	@ (80042ac <main+0x574>)
 800415e:	f00e fe5b 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 8004162:	4b53      	ldr	r3, [pc, #332]	@ (80042b0 <main+0x578>)
 8004164:	2201      	movs	r2, #1
 8004166:	2103      	movs	r1, #3
 8004168:	4852      	ldr	r0, [pc, #328]	@ (80042b4 <main+0x57c>)
 800416a:	f00e fe55 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 800416e:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <main+0x580>)
 8004170:	2201      	movs	r2, #1
 8004172:	2103      	movs	r1, #3
 8004174:	4851      	ldr	r0, [pc, #324]	@ (80042bc <main+0x584>)
 8004176:	f00e fe4f 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 800417a:	4b51      	ldr	r3, [pc, #324]	@ (80042c0 <main+0x588>)
 800417c:	2201      	movs	r2, #1
 800417e:	2103      	movs	r1, #3
 8004180:	4850      	ldr	r0, [pc, #320]	@ (80042c4 <main+0x58c>)
 8004182:	f00e fe49 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8004186:	4b50      	ldr	r3, [pc, #320]	@ (80042c8 <main+0x590>)
 8004188:	2201      	movs	r2, #1
 800418a:	2103      	movs	r1, #3
 800418c:	484f      	ldr	r0, [pc, #316]	@ (80042cc <main+0x594>)
 800418e:	f00e fe43 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 8004192:	4b4f      	ldr	r3, [pc, #316]	@ (80042d0 <main+0x598>)
 8004194:	2201      	movs	r2, #1
 8004196:	2103      	movs	r1, #3
 8004198:	484e      	ldr	r0, [pc, #312]	@ (80042d4 <main+0x59c>)
 800419a:	f00e fe3d 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 800419e:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <main+0x5a0>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	2103      	movs	r1, #3
 80041a4:	484d      	ldr	r0, [pc, #308]	@ (80042dc <main+0x5a4>)
 80041a6:	f00e fe37 	bl	8012e18 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 80041aa:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <main+0x5a8>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	2103      	movs	r1, #3
 80041b0:	484c      	ldr	r0, [pc, #304]	@ (80042e4 <main+0x5ac>)
 80041b2:	f00e fe31 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 80041b6:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <main+0x5b0>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	2103      	movs	r1, #3
 80041bc:	484b      	ldr	r0, [pc, #300]	@ (80042ec <main+0x5b4>)
 80041be:	f00e fe2b 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 80041c2:	4b4b      	ldr	r3, [pc, #300]	@ (80042f0 <main+0x5b8>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	2103      	movs	r1, #3
 80041c8:	484a      	ldr	r0, [pc, #296]	@ (80042f4 <main+0x5bc>)
 80041ca:	f00e fe25 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 80041ce:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <main+0x5c0>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	2103      	movs	r1, #3
 80041d4:	4849      	ldr	r0, [pc, #292]	@ (80042fc <main+0x5c4>)
 80041d6:	f00e fe1f 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 80041da:	4b49      	ldr	r3, [pc, #292]	@ (8004300 <main+0x5c8>)
 80041dc:	2201      	movs	r2, #1
 80041de:	2103      	movs	r1, #3
 80041e0:	4848      	ldr	r0, [pc, #288]	@ (8004304 <main+0x5cc>)
 80041e2:	f00e fe19 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 80041e6:	4b48      	ldr	r3, [pc, #288]	@ (8004308 <main+0x5d0>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	2103      	movs	r1, #3
 80041ec:	4847      	ldr	r0, [pc, #284]	@ (800430c <main+0x5d4>)
 80041ee:	f00e fe13 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 80041f2:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <main+0x5d8>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	2103      	movs	r1, #3
 80041f8:	4846      	ldr	r0, [pc, #280]	@ (8004314 <main+0x5dc>)
 80041fa:	f00e fe0d 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 80041fe:	4b46      	ldr	r3, [pc, #280]	@ (8004318 <main+0x5e0>)
 8004200:	2201      	movs	r2, #1
 8004202:	2103      	movs	r1, #3
 8004204:	4845      	ldr	r0, [pc, #276]	@ (800431c <main+0x5e4>)
 8004206:	f00e fe07 	bl	8012e18 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 800420a:	4b45      	ldr	r3, [pc, #276]	@ (8004320 <main+0x5e8>)
 800420c:	2201      	movs	r2, #1
 800420e:	2103      	movs	r1, #3
 8004210:	4844      	ldr	r0, [pc, #272]	@ (8004324 <main+0x5ec>)
 8004212:	f00e fe01 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 8004216:	4b44      	ldr	r3, [pc, #272]	@ (8004328 <main+0x5f0>)
 8004218:	2201      	movs	r2, #1
 800421a:	2103      	movs	r1, #3
 800421c:	4843      	ldr	r0, [pc, #268]	@ (800432c <main+0x5f4>)
 800421e:	f00e fdfb 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 8004222:	4b43      	ldr	r3, [pc, #268]	@ (8004330 <main+0x5f8>)
 8004224:	2201      	movs	r2, #1
 8004226:	2103      	movs	r1, #3
 8004228:	4842      	ldr	r0, [pc, #264]	@ (8004334 <main+0x5fc>)
 800422a:	f00e fdf5 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <main+0x600>)
 8004230:	2201      	movs	r2, #1
 8004232:	2103      	movs	r1, #3
 8004234:	4841      	ldr	r0, [pc, #260]	@ (800433c <main+0x604>)
 8004236:	f00e fdef 	bl	8012e18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 800423a:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <main+0x608>)
 800423c:	2201      	movs	r2, #1
 800423e:	2103      	movs	r1, #3
 8004240:	4840      	ldr	r0, [pc, #256]	@ (8004344 <main+0x60c>)
 8004242:	f00e fde9 	bl	8012e18 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004246:	f000 ffe5 	bl	8005214 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800424a:	f001 fdbf 	bl	8005dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800424e:	f000 f887 	bl	8004360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004252:	f000 fa25 	bl	80046a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004256:	f000 f9f3 	bl	8004640 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800425a:	f000 f8fb 	bl	8004454 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 800425e:	f000 f9a1 	bl	80045a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  uart3_rx_start_normal();
 8004262:	f7fc fd99 	bl	8000d98 <uart3_rx_start_normal>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004266:	f00b fdbf 	bl	800fde8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 800426a:	4a37      	ldr	r2, [pc, #220]	@ (8004348 <main+0x610>)
 800426c:	2100      	movs	r1, #0
 800426e:	4837      	ldr	r0, [pc, #220]	@ (800434c <main+0x614>)
 8004270:	f00b fe04 	bl	800fe7c <osThreadNew>
 8004274:	4603      	mov	r3, r0
 8004276:	4a36      	ldr	r2, [pc, #216]	@ (8004350 <main+0x618>)
 8004278:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 800427a:	4a36      	ldr	r2, [pc, #216]	@ (8004354 <main+0x61c>)
 800427c:	2100      	movs	r1, #0
 800427e:	4836      	ldr	r0, [pc, #216]	@ (8004358 <main+0x620>)
 8004280:	f00b fdfc 	bl	800fe7c <osThreadNew>
 8004284:	4603      	mov	r3, r0
 8004286:	4a35      	ldr	r2, [pc, #212]	@ (800435c <main+0x624>)
 8004288:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800428a:	2000      	movs	r0, #0
 800428c:	f001 fc9c 	bl	8005bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004290:	2001      	movs	r0, #1
 8004292:	f001 fc99 	bl	8005bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004296:	2002      	movs	r0, #2
 8004298:	f001 fc96 	bl	8005bc8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800429c:	2101      	movs	r1, #1
 800429e:	2000      	movs	r0, #0
 80042a0:	f001 fd08 	bl	8005cb4 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 80042a4:	f00b fdc4 	bl	800fe30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <main+0x570>
 80042ac:	240027dc 	.word	0x240027dc
 80042b0:	240027f8 	.word	0x240027f8
 80042b4:	240027f0 	.word	0x240027f0
 80042b8:	2400280c 	.word	0x2400280c
 80042bc:	24002804 	.word	0x24002804
 80042c0:	24002820 	.word	0x24002820
 80042c4:	24002818 	.word	0x24002818
 80042c8:	24002834 	.word	0x24002834
 80042cc:	2400282c 	.word	0x2400282c
 80042d0:	24002848 	.word	0x24002848
 80042d4:	24002840 	.word	0x24002840
 80042d8:	2400285c 	.word	0x2400285c
 80042dc:	24002854 	.word	0x24002854
 80042e0:	2400287c 	.word	0x2400287c
 80042e4:	24002874 	.word	0x24002874
 80042e8:	24002890 	.word	0x24002890
 80042ec:	24002888 	.word	0x24002888
 80042f0:	240028a4 	.word	0x240028a4
 80042f4:	2400289c 	.word	0x2400289c
 80042f8:	240028b8 	.word	0x240028b8
 80042fc:	240028b0 	.word	0x240028b0
 8004300:	240028cc 	.word	0x240028cc
 8004304:	240028c4 	.word	0x240028c4
 8004308:	240028e0 	.word	0x240028e0
 800430c:	240028d8 	.word	0x240028d8
 8004310:	240028f4 	.word	0x240028f4
 8004314:	240028ec 	.word	0x240028ec
 8004318:	24002908 	.word	0x24002908
 800431c:	24002900 	.word	0x24002900
 8004320:	2400291c 	.word	0x2400291c
 8004324:	24002914 	.word	0x24002914
 8004328:	24002930 	.word	0x24002930
 800432c:	24002928 	.word	0x24002928
 8004330:	24002944 	.word	0x24002944
 8004334:	2400293c 	.word	0x2400293c
 8004338:	24002958 	.word	0x24002958
 800433c:	24002950 	.word	0x24002950
 8004340:	2400296c 	.word	0x2400296c
 8004344:	24002964 	.word	0x24002964
 8004348:	080172d4 	.word	0x080172d4
 800434c:	080047ed 	.word	0x080047ed
 8004350:	240004ac 	.word	0x240004ac
 8004354:	080172f8 	.word	0x080172f8
 8004358:	08004f21 	.word	0x08004f21
 800435c:	240004b0 	.word	0x240004b0

08004360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b09c      	sub	sp, #112	@ 0x70
 8004364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800436a:	224c      	movs	r2, #76	@ 0x4c
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f010 f8a7 	bl	80144c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	2220      	movs	r2, #32
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f010 f8a1 	bl	80144c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004380:	2002      	movs	r0, #2
 8004382:	f006 fab7 	bl	800a8f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4b30      	ldr	r3, [pc, #192]	@ (800444c <SystemClock_Config+0xec>)
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	4a2f      	ldr	r2, [pc, #188]	@ (800444c <SystemClock_Config+0xec>)
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004396:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <SystemClock_Config+0xec>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004450 <SystemClock_Config+0xf0>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <SystemClock_Config+0xf0>)
 80043a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043aa:	6193      	str	r3, [r2, #24]
 80043ac:	4b28      	ldr	r3, [pc, #160]	@ (8004450 <SystemClock_Config+0xf0>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80043b8:	bf00      	nop
 80043ba:	4b25      	ldr	r3, [pc, #148]	@ (8004450 <SystemClock_Config+0xf0>)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c6:	d1f8      	bne.n	80043ba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d2:	2302      	movs	r3, #2
 80043d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043d6:	2302      	movs	r3, #2
 80043d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80043de:	2364      	movs	r3, #100	@ 0x64
 80043e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80043e2:	2302      	movs	r3, #2
 80043e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 80043e6:	2310      	movs	r3, #16
 80043e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80043ea:	2302      	movs	r3, #2
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80043ee:	230c      	movs	r3, #12
 80043f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fab2 	bl	800a968 <HAL_RCC_OscConfig>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800440a:	f000 ff41 	bl	8005290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800440e:	233f      	movs	r3, #63	@ 0x3f
 8004410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004412:	2303      	movs	r3, #3
 8004414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800441a:	2308      	movs	r3, #8
 800441c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800441e:	2340      	movs	r3, #64	@ 0x40
 8004420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004422:	2340      	movs	r3, #64	@ 0x40
 8004424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800442a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800442c:	2340      	movs	r3, #64	@ 0x40
 800442e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f006 fef1 	bl	800b21c <HAL_RCC_ClockConfig>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004440:	f000 ff26 	bl	8005290 <Error_Handler>
  }
}
 8004444:	bf00      	nop
 8004446:	3770      	adds	r7, #112	@ 0x70
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58000400 	.word	0x58000400
 8004450:	58024800 	.word	0x58024800

08004454 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800445a:	4b4e      	ldr	r3, [pc, #312]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800445c:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <MX_FDCAN1_Init+0x144>)
 800445e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004460:	4b4c      	ldr	r3, [pc, #304]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004466:	4b4b      	ldr	r3, [pc, #300]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004468:	2200      	movs	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800446c:	4b49      	ldr	r3, [pc, #292]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800446e:	2201      	movs	r2, #1
 8004470:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004472:	4b48      	ldr	r3, [pc, #288]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004474:	2200      	movs	r2, #0
 8004476:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004478:	4b46      	ldr	r3, [pc, #280]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800447a:	2200      	movs	r2, #0
 800447c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800447e:	4b45      	ldr	r3, [pc, #276]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004480:	2201      	movs	r2, #1
 8004482:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8004484:	4b43      	ldr	r3, [pc, #268]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004486:	2208      	movs	r2, #8
 8004488:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 800448a:	4b42      	ldr	r3, [pc, #264]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800448c:	221f      	movs	r2, #31
 800448e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8004490:	4b40      	ldr	r3, [pc, #256]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004492:	2208      	movs	r2, #8
 8004494:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004496:	4b3f      	ldr	r3, [pc, #252]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004498:	2201      	movs	r2, #1
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800449c:	4b3d      	ldr	r3, [pc, #244]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800449e:	2204      	movs	r2, #4
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80044a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044a4:	2205      	movs	r2, #5
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80044a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044aa:	2204      	movs	r2, #4
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80044ae:	4b39      	ldr	r3, [pc, #228]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80044b4:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80044ba:	4b36      	ldr	r3, [pc, #216]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044bc:	2200      	movs	r2, #0
 80044be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80044c0:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80044c6:	4b33      	ldr	r3, [pc, #204]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044c8:	2204      	movs	r2, #4
 80044ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80044cc:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80044d2:	4b30      	ldr	r3, [pc, #192]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044d4:	2204      	movs	r2, #4
 80044d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 80044d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044da:	2204      	movs	r2, #4
 80044dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80044de:	4b2d      	ldr	r3, [pc, #180]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044e0:	2204      	movs	r2, #4
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044e6:	2210      	movs	r2, #16
 80044e8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 80044ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044ec:	2210      	movs	r2, #16
 80044ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80044f0:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044f2:	2220      	movs	r2, #32
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80044f6:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80044fc:	4b25      	ldr	r3, [pc, #148]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 80044fe:	2204      	movs	r2, #4
 8004500:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004502:	4824      	ldr	r0, [pc, #144]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004504:	f004 fea8 	bl	8009258 <HAL_FDCAN_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800450e:	f000 febf 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8004512:	2200      	movs	r2, #0
 8004514:	2101      	movs	r1, #1
 8004516:	481f      	ldr	r0, [pc, #124]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 8004518:	f005 fa80 	bl	8009a1c <HAL_FDCAN_ActivateNotification>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8004522:	4b1e      	ldr	r3, [pc, #120]	@ (800459c <MX_FDCAN1_Init+0x148>)
 8004524:	2203      	movs	r2, #3
 8004526:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004528:	f000 feb2 	bl	8005290 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800452c:	4819      	ldr	r0, [pc, #100]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800452e:	f005 f871 	bl	8009614 <HAL_FDCAN_Start>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8004538:	4b18      	ldr	r3, [pc, #96]	@ (800459c <MX_FDCAN1_Init+0x148>)
 800453a:	2203      	movs	r2, #3
 800453c:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 800453e:	f000 fea7 	bl	8005290 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	e01d      	b.n	8004584 <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004548:	4812      	ldr	r0, [pc, #72]	@ (8004594 <MX_FDCAN1_Init+0x140>)
 800454a:	f005 fa55 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d014      	beq.n	800457e <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004554:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <MX_FDCAN1_Init+0x14c>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2198      	movs	r1, #152	@ 0x98
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3308      	adds	r3, #8
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fff2 	bl	8001550 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 800456c:	4a0c      	ldr	r2, [pc, #48]	@ (80045a0 <MX_FDCAN1_Init+0x14c>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2198      	movs	r1, #152	@ 0x98
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	330c      	adds	r3, #12
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3301      	adds	r3, #1
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	ddde      	ble.n	8004548 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	24000288 	.word	0x24000288
 8004598:	4000a000 	.word	0x4000a000
 800459c:	24002978 	.word	0x24002978
 80045a0:	2400230c 	.word	0x2400230c

080045a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045a8:	4b23      	ldr	r3, [pc, #140]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045aa:	4a24      	ldr	r2, [pc, #144]	@ (800463c <MX_USART3_UART_Init+0x98>)
 80045ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80045ae:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045b0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80045b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045b6:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045ca:	220c      	movs	r2, #12
 80045cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045d4:	4b18      	ldr	r3, [pc, #96]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045da:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045dc:	2200      	movs	r2, #0
 80045de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045e0:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045e6:	4b14      	ldr	r3, [pc, #80]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045ec:	4812      	ldr	r0, [pc, #72]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 80045ee:	f009 fad7 	bl	800dba0 <HAL_UART_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80045f8:	f000 fe4a 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 80045fc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004600:	480d      	ldr	r0, [pc, #52]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 8004602:	f00b fa8f 	bl	800fb24 <HAL_UARTEx_SetTxFifoThreshold>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 800460c:	f000 fe40 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8004610:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8004614:	4808      	ldr	r0, [pc, #32]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 8004616:	f00b fac3 	bl	800fba0 <HAL_UARTEx_SetRxFifoThreshold>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 8004620:	f000 fe36 	bl	8005290 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8004624:	4804      	ldr	r0, [pc, #16]	@ (8004638 <MX_USART3_UART_Init+0x94>)
 8004626:	f00b fa42 	bl	800faae <HAL_UARTEx_EnableFifoMode>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 8004630:	f000 fe2e 	bl	8005290 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	24000328 	.word	0x24000328
 800463c:	40004800 	.word	0x40004800

08004640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004646:	4b15      	ldr	r3, [pc, #84]	@ (800469c <MX_DMA_Init+0x5c>)
 8004648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800464c:	4a13      	ldr	r2, [pc, #76]	@ (800469c <MX_DMA_Init+0x5c>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004656:	4b11      	ldr	r3, [pc, #68]	@ (800469c <MX_DMA_Init+0x5c>)
 8004658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 8, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	2108      	movs	r1, #8
 8004668:	200b      	movs	r0, #11
 800466a:	f001 fcf3 	bl	8006054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800466e:	200b      	movs	r0, #11
 8004670:	f001 fd0a 	bl	8006088 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 8, 0);
 8004674:	2200      	movs	r2, #0
 8004676:	2108      	movs	r1, #8
 8004678:	200c      	movs	r0, #12
 800467a:	f001 fceb 	bl	8006054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800467e:	200c      	movs	r0, #12
 8004680:	f001 fd02 	bl	8006088 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
 8004684:	2200      	movs	r2, #0
 8004686:	2105      	movs	r1, #5
 8004688:	2066      	movs	r0, #102	@ 0x66
 800468a:	f001 fce3 	bl	8006054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800468e:	2066      	movs	r0, #102	@ 0x66
 8004690:	f001 fcfa 	bl	8006088 <HAL_NVIC_EnableIRQ>

}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	58024400 	.word	0x58024400

080046a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	@ 0x30
 80046a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a6:	f107 031c 	add.w	r3, r7, #28
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	609a      	str	r2, [r3, #8]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b6:	4b49      	ldr	r3, [pc, #292]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046bc:	4a47      	ldr	r2, [pc, #284]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046c6:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046d4:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046da:	4a40      	ldr	r2, [pc, #256]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046e4:	4b3d      	ldr	r3, [pc, #244]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f2:	4b3a      	ldr	r3, [pc, #232]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f8:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <MX_GPIO_Init+0x13c>)
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004702:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004710:	4b32      	ldr	r3, [pc, #200]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004716:	4a31      	ldr	r2, [pc, #196]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004720:	4b2e      	ldr	r3, [pc, #184]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800472e:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004734:	4a29      	ldr	r2, [pc, #164]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800473e:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800474c:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <MX_GPIO_Init+0x13c>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004752:	4a22      	ldr	r2, [pc, #136]	@ (80047dc <MX_GPIO_Init+0x13c>)
 8004754:	f043 0310 	orr.w	r3, r3, #16
 8004758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800475c:	4b1f      	ldr	r3, [pc, #124]	@ (80047dc <MX_GPIO_Init+0x13c>)
 800475e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800476a:	2200      	movs	r2, #0
 800476c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004770:	481b      	ldr	r0, [pc, #108]	@ (80047e0 <MX_GPIO_Init+0x140>)
 8004772:	f006 f88b 	bl	800a88c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004776:	2200      	movs	r2, #0
 8004778:	2102      	movs	r1, #2
 800477a:	481a      	ldr	r0, [pc, #104]	@ (80047e4 <MX_GPIO_Init+0x144>)
 800477c:	f006 f886 	bl	800a88c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 031c 	add.w	r3, r7, #28
 8004792:	4619      	mov	r1, r3
 8004794:	4814      	ldr	r0, [pc, #80]	@ (80047e8 <MX_GPIO_Init+0x148>)
 8004796:	f005 fec9 	bl	800a52c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 800479a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800479e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a0:	2301      	movs	r3, #1
 80047a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a8:	2300      	movs	r3, #0
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	480b      	ldr	r0, [pc, #44]	@ (80047e0 <MX_GPIO_Init+0x140>)
 80047b4:	f005 feba 	bl	800a52c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80047b8:	2302      	movs	r3, #2
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047bc:	2301      	movs	r3, #1
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80047c8:	f107 031c 	add.w	r3, r7, #28
 80047cc:	4619      	mov	r1, r3
 80047ce:	4805      	ldr	r0, [pc, #20]	@ (80047e4 <MX_GPIO_Init+0x144>)
 80047d0:	f005 feac 	bl	800a52c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80047d4:	bf00      	nop
 80047d6:	3730      	adds	r7, #48	@ 0x30
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58020400 	.word	0x58020400
 80047e4:	58021000 	.word	0x58021000
 80047e8:	58020800 	.word	0x58020800

080047ec <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b090      	sub	sp, #64	@ 0x40
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 80047f4:	f00c fd4c 	bl	8011290 <xTaskGetTickCount>
 80047f8:	4603      	mov	r3, r0
 80047fa:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 80047fc:	2301      	movs	r3, #1
 80047fe:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	4618      	mov	r0, r3
 8004808:	f00c fba6 	bl	8010f58 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 800480c:	4b70      	ldr	r3, [pc, #448]	@ (80049d0 <ControlTask+0x1e4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a70      	ldr	r2, [pc, #448]	@ (80049d4 <ControlTask+0x1e8>)
 8004812:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	005a      	lsls	r2, r3, #1
 8004818:	4b6d      	ldr	r3, [pc, #436]	@ (80049d0 <ControlTask+0x1e4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4413      	add	r3, r2
 800481e:	4a6c      	ldr	r2, [pc, #432]	@ (80049d0 <ControlTask+0x1e4>)
 8004820:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 8004822:	2101      	movs	r1, #1
 8004824:	486c      	ldr	r0, [pc, #432]	@ (80049d8 <ControlTask+0x1ec>)
 8004826:	f006 f84a 	bl	800a8be <HAL_GPIO_TogglePin>

		// 6) 여기서 PC로부터 들어온 task space PID Gain값과 Target Trajectory를 반영
		uart3_poll_and_process_lines();
 800482a:	f7ff fa33 	bl	8003c94 <uart3_poll_and_process_lines>

		// 7) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 800482e:	4b6b      	ldr	r3, [pc, #428]	@ (80049dc <ControlTask+0x1f0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	f040 80c3 	bne.w	80049be <ControlTask+0x1d2>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 8004838:	4b68      	ldr	r3, [pc, #416]	@ (80049dc <ControlTask+0x1f0>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d152      	bne.n	80048e6 <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004840:	2300      	movs	r3, #0
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
 8004844:	e048      	b.n	80048d8 <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	4863      	ldr	r0, [pc, #396]	@ (80049d8 <ControlTask+0x1ec>)
 800484a:	f006 f838 	bl	800a8be <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 800484e:	4a63      	ldr	r2, [pc, #396]	@ (80049dc <ControlTask+0x1f0>)
 8004850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004852:	2198      	movs	r1, #152	@ 0x98
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	338c      	adds	r3, #140	@ 0x8c
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004862:	485f      	ldr	r0, [pc, #380]	@ (80049e0 <ControlTask+0x1f4>)
 8004864:	f005 f8c8 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 800486e:	4a5b      	ldr	r2, [pc, #364]	@ (80049dc <ControlTask+0x1f0>)
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	2198      	movs	r1, #152	@ 0x98
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	3308      	adds	r3, #8
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	b29a      	uxth	r2, r3
 8004880:	4956      	ldr	r1, [pc, #344]	@ (80049dc <ControlTask+0x1f0>)
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	2098      	movs	r0, #152	@ 0x98
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	440b      	add	r3, r1
 800488c:	338c      	adds	r3, #140	@ 0x8c
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	eeb0 0a67 	vmov.f32	s0, s15
 8004896:	4610      	mov	r0, r2
 8004898:	f7fc fed6 	bl	8001648 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800489c:	4850      	ldr	r0, [pc, #320]	@ (80049e0 <ControlTask+0x1f4>)
 800489e:	f005 f8ab 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d014      	beq.n	80048d2 <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 80048a8:	4a4c      	ldr	r2, [pc, #304]	@ (80049dc <ControlTask+0x1f0>)
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	2198      	movs	r1, #152	@ 0x98
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	4413      	add	r3, r2
 80048b4:	3308      	adds	r3, #8
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc fe48 	bl	8001550 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 80048c0:	4a46      	ldr	r2, [pc, #280]	@ (80049dc <ControlTask+0x1f0>)
 80048c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c4:	2198      	movs	r1, #152	@ 0x98
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	330c      	adds	r3, #12
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80048d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d4:	3301      	adds	r3, #1
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048da:	2b02      	cmp	r3, #2
 80048dc:	ddb3      	ble.n	8004846 <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 80048de:	4b3f      	ldr	r3, [pc, #252]	@ (80049dc <ControlTask+0x1f0>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e78c      	b.n	8004800 <ControlTask+0x14>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 80048e6:	2300      	movs	r3, #0
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ea:	e00e      	b.n	800490a <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2298      	movs	r2, #152	@ 0x98
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	3308      	adds	r3, #8
 80048f6:	4a39      	ldr	r2, [pc, #228]	@ (80049dc <ControlTask+0x1f0>)
 80048f8:	4413      	add	r3, r2
 80048fa:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80049e4 <ControlTask+0x1f8>
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc ffc6 	bl	8001890 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	3301      	adds	r3, #1
 8004908:	633b      	str	r3, [r7, #48]	@ 0x30
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	2b02      	cmp	r3, #2
 800490e:	dded      	ble.n	80048ec <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8004910:	4832      	ldr	r0, [pc, #200]	@ (80049dc <ControlTask+0x1f0>)
 8004912:	f7fe fc35 	bl	8003180 <robot_state_update>
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 8004916:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <ControlTask+0x1fc>)
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <ControlTask+0x200>)
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <ControlTask+0x204>)
 8004920:	4a34      	ldr	r2, [pc, #208]	@ (80049f4 <ControlTask+0x208>)
 8004922:	4935      	ldr	r1, [pc, #212]	@ (80049f8 <ControlTask+0x20c>)
 8004924:	482d      	ldr	r0, [pc, #180]	@ (80049dc <ControlTask+0x1f0>)
 8004926:	f7fe fe23 	bl	8003570 <robot_pos_pid_gain_setting>
				// 2. 로봇의 Control Input 계산
				//target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 800492a:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <ControlTask+0x210>)
 800492c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004930:	482a      	ldr	r0, [pc, #168]	@ (80049dc <ControlTask+0x1f0>)
 8004932:	f7fe fe73 	bl	800361c <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004936:	2300      	movs	r3, #0
 8004938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493a:	e03c      	b.n	80049b6 <ControlTask+0x1ca>
				{
					// 3. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	2298      	movs	r2, #152	@ 0x98
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	3308      	adds	r3, #8
 8004946:	4a25      	ldr	r2, [pc, #148]	@ (80049dc <ControlTask+0x1f0>)
 8004948:	1899      	adds	r1, r3, r2
 800494a:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <ControlTask+0x1f0>)
 800494c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	ed93 7a00 	vldr	s14, [r3]
 800495a:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <ControlTask+0x1f0>)
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	3374      	adds	r3, #116	@ 0x74
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	edd3 7a00 	vldr	s15, [r3]
 8004968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	4608      	mov	r0, r1
 8004972:	f7fd f83d 	bl	80019f0 <motor_feedforward_torque>
					// 4. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004976:	481a      	ldr	r0, [pc, #104]	@ (80049e0 <ControlTask+0x1f4>)
 8004978:	f005 f83e 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <ControlTask+0x1c4>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004982:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <ControlTask+0x1f0>)
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	2198      	movs	r1, #152	@ 0x98
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3308      	adds	r3, #8
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b29a      	uxth	r2, r3
 8004994:	4911      	ldr	r1, [pc, #68]	@ (80049dc <ControlTask+0x1f0>)
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	2098      	movs	r0, #152	@ 0x98
 800499a:	fb00 f303 	mul.w	r3, r0, r3
 800499e:	440b      	add	r3, r1
 80049a0:	338c      	adds	r3, #140	@ 0x8c
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	eeb0 0a67 	vmov.f32	s0, s15
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fc fe4c 	bl	8001648 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 80049b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b2:	3301      	adds	r3, #1
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	ddbf      	ble.n	800493c <ControlTask+0x150>
 80049bc:	e720      	b.n	8004800 <ControlTask+0x14>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <ControlTask+0x1f0>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	f47f af1c 	bne.w	8004800 <ControlTask+0x14>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049cc:	e1e5      	b.n	8004d9a <ControlTask+0x5ae>
 80049ce:	bf00      	nop
 80049d0:	240022c4 	.word	0x240022c4
 80049d4:	240022c8 	.word	0x240022c8
 80049d8:	58020400 	.word	0x58020400
 80049dc:	2400230c 	.word	0x2400230c
 80049e0:	24000288 	.word	0x24000288
 80049e4:	428c0000 	.word	0x428c0000
 80049e8:	24000048 	.word	0x24000048
 80049ec:	24002300 	.word	0x24002300
 80049f0:	24000030 	.word	0x24000030
 80049f4:	2400003c 	.word	0x2400003c
 80049f8:	24000024 	.word	0x24000024
 80049fc:	240022f8 	.word	0x240022f8
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004a00:	2180      	movs	r1, #128	@ 0x80
 8004a02:	48bf      	ldr	r0, [pc, #764]	@ (8004d00 <ControlTask+0x514>)
 8004a04:	f005 ff5b 	bl	800a8be <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8004a08:	4bbe      	ldr	r3, [pc, #760]	@ (8004d04 <ControlTask+0x518>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8004a0e:	4bbe      	ldr	r3, [pc, #760]	@ (8004d08 <ControlTask+0x51c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004a14:	48bd      	ldr	r0, [pc, #756]	@ (8004d0c <ControlTask+0x520>)
 8004a16:	f004 ffef 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <ControlTask+0x24c>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8004a20:	4abb      	ldr	r2, [pc, #748]	@ (8004d10 <ControlTask+0x524>)
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2198      	movs	r1, #152	@ 0x98
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fcf8 	bl	8001428 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8004a38:	bf00      	nop
 8004a3a:	4ab5      	ldr	r2, [pc, #724]	@ (8004d10 <ControlTask+0x524>)
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	2198      	movs	r1, #152	@ 0x98
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3310      	adds	r3, #16
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f107 010c 	add.w	r1, r7, #12
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f00b fe73 	bl	801073c <xQueueReceive>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d0ee      	beq.n	8004a3a <ControlTask+0x24e>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004a5c:	48ab      	ldr	r0, [pc, #684]	@ (8004d0c <ControlTask+0x520>)
 8004a5e:	f004 ffcb 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d014      	beq.n	8004a92 <ControlTask+0x2a6>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8004a68:	4aa9      	ldr	r2, [pc, #676]	@ (8004d10 <ControlTask+0x524>)
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	2198      	movs	r1, #152	@ 0x98
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3308      	adds	r3, #8
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fd1e 	bl	80014bc <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8004a80:	4aa3      	ldr	r2, [pc, #652]	@ (8004d10 <ControlTask+0x524>)
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	2198      	movs	r1, #152	@ 0x98
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8004a92:	4a9f      	ldr	r2, [pc, #636]	@ (8004d10 <ControlTask+0x524>)
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	2198      	movs	r1, #152	@ 0x98
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	338c      	adds	r3, #140	@ 0x8c
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 8004aa6:	4a9a      	ldr	r2, [pc, #616]	@ (8004d10 <ControlTask+0x524>)
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	2198      	movs	r1, #152	@ 0x98
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3390      	adds	r3, #144	@ 0x90
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 8004aba:	4a95      	ldr	r2, [pc, #596]	@ (8004d10 <ControlTask+0x524>)
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	3301      	adds	r3, #1
 8004ac0:	2198      	movs	r1, #152	@ 0x98
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004ad0:	4a8f      	ldr	r2, [pc, #572]	@ (8004d10 <ControlTask+0x524>)
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	2198      	movs	r1, #152	@ 0x98
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	332c      	adds	r3, #44	@ 0x2c
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004ae4:	4a8a      	ldr	r2, [pc, #552]	@ (8004d10 <ControlTask+0x524>)
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2198      	movs	r1, #152	@ 0x98
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	332c      	adds	r3, #44	@ 0x2c
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4986      	ldr	r1, [pc, #536]	@ (8004d10 <ControlTask+0x524>)
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	2098      	movs	r0, #152	@ 0x98
 8004afa:	fb00 f303 	mul.w	r3, r0, r3
 8004afe:	440b      	add	r3, r1
 8004b00:	3330      	adds	r3, #48	@ 0x30
 8004b02:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004b04:	4a82      	ldr	r2, [pc, #520]	@ (8004d10 <ControlTask+0x524>)
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	2198      	movs	r1, #152	@ 0x98
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3334      	adds	r3, #52	@ 0x34
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 8004b18:	4a7d      	ldr	r2, [pc, #500]	@ (8004d10 <ControlTask+0x524>)
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	2198      	movs	r1, #152	@ 0x98
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	3334      	adds	r3, #52	@ 0x34
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4979      	ldr	r1, [pc, #484]	@ (8004d10 <ControlTask+0x524>)
 8004b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2c:	2098      	movs	r0, #152	@ 0x98
 8004b2e:	fb00 f303 	mul.w	r3, r0, r3
 8004b32:	440b      	add	r3, r1
 8004b34:	3338      	adds	r3, #56	@ 0x38
 8004b36:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 8004b38:	4a76      	ldr	r2, [pc, #472]	@ (8004d14 <ControlTask+0x528>)
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4973      	ldr	r1, [pc, #460]	@ (8004d10 <ControlTask+0x524>)
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2098      	movs	r0, #152	@ 0x98
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3324      	adds	r3, #36	@ 0x24
 8004b50:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 8004b52:	4a71      	ldr	r2, [pc, #452]	@ (8004d18 <ControlTask+0x52c>)
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	496c      	ldr	r1, [pc, #432]	@ (8004d10 <ControlTask+0x524>)
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	2098      	movs	r0, #152	@ 0x98
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	440b      	add	r3, r1
 8004b68:	3328      	adds	r3, #40	@ 0x28
 8004b6a:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 8004b6c:	4a68      	ldr	r2, [pc, #416]	@ (8004d10 <ControlTask+0x524>)
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	2198      	movs	r1, #152	@ 0x98
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3324      	adds	r3, #36	@ 0x24
 8004b7a:	ed93 7a00 	vldr	s14, [r3]
 8004b7e:	4a64      	ldr	r2, [pc, #400]	@ (8004d10 <ControlTask+0x524>)
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	2198      	movs	r1, #152	@ 0x98
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	332c      	adds	r3, #44	@ 0x2c
 8004b8c:	edd3 7a00 	vldr	s15, [r3]
 8004b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b94:	4a5e      	ldr	r2, [pc, #376]	@ (8004d10 <ControlTask+0x524>)
 8004b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b98:	2198      	movs	r1, #152	@ 0x98
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3344      	adds	r3, #68	@ 0x44
 8004ba2:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 8004ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d10 <ControlTask+0x524>)
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	2198      	movs	r1, #152	@ 0x98
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3344      	adds	r3, #68	@ 0x44
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4956      	ldr	r1, [pc, #344]	@ (8004d10 <ControlTask+0x524>)
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	2098      	movs	r0, #152	@ 0x98
 8004bbc:	fb00 f303 	mul.w	r3, r0, r3
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3348      	adds	r3, #72	@ 0x48
 8004bc4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 8004bc6:	4a52      	ldr	r2, [pc, #328]	@ (8004d10 <ControlTask+0x524>)
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	2198      	movs	r1, #152	@ 0x98
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	334c      	adds	r3, #76	@ 0x4c
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 8004bda:	4a4d      	ldr	r2, [pc, #308]	@ (8004d10 <ControlTask+0x524>)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2198      	movs	r1, #152	@ 0x98
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3350      	adds	r3, #80	@ 0x50
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 8004bee:	4a48      	ldr	r2, [pc, #288]	@ (8004d10 <ControlTask+0x524>)
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	2198      	movs	r1, #152	@ 0x98
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3350      	adds	r3, #80	@ 0x50
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4944      	ldr	r1, [pc, #272]	@ (8004d10 <ControlTask+0x524>)
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	2098      	movs	r0, #152	@ 0x98
 8004c04:	fb00 f303 	mul.w	r3, r0, r3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3354      	adds	r3, #84	@ 0x54
 8004c0c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004c0e:	4a40      	ldr	r2, [pc, #256]	@ (8004d10 <ControlTask+0x524>)
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	2198      	movs	r1, #152	@ 0x98
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3358      	adds	r3, #88	@ 0x58
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 8004c22:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <ControlTask+0x524>)
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	2198      	movs	r1, #152	@ 0x98
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3358      	adds	r3, #88	@ 0x58
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4937      	ldr	r1, [pc, #220]	@ (8004d10 <ControlTask+0x524>)
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	2098      	movs	r0, #152	@ 0x98
 8004c38:	fb00 f303 	mul.w	r3, r0, r3
 8004c3c:	440b      	add	r3, r1
 8004c3e:	335c      	adds	r3, #92	@ 0x5c
 8004c40:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 8004c42:	4a33      	ldr	r2, [pc, #204]	@ (8004d10 <ControlTask+0x524>)
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	2198      	movs	r1, #152	@ 0x98
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3328      	adds	r3, #40	@ 0x28
 8004c50:	ed93 7a00 	vldr	s14, [r3]
 8004c54:	4a2e      	ldr	r2, [pc, #184]	@ (8004d10 <ControlTask+0x524>)
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	2198      	movs	r1, #152	@ 0x98
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3334      	adds	r3, #52	@ 0x34
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6a:	4a29      	ldr	r2, [pc, #164]	@ (8004d10 <ControlTask+0x524>)
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	2198      	movs	r1, #152	@ 0x98
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3360      	adds	r3, #96	@ 0x60
 8004c78:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 8004c7c:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <ControlTask+0x524>)
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	2198      	movs	r1, #152	@ 0x98
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3360      	adds	r3, #96	@ 0x60
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4920      	ldr	r1, [pc, #128]	@ (8004d10 <ControlTask+0x524>)
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	2098      	movs	r0, #152	@ 0x98
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	440b      	add	r3, r1
 8004c98:	3364      	adds	r3, #100	@ 0x64
 8004c9a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <ControlTask+0x524>)
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	2198      	movs	r1, #152	@ 0x98
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3368      	adds	r3, #104	@ 0x68
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 8004cb0:	4a17      	ldr	r2, [pc, #92]	@ (8004d10 <ControlTask+0x524>)
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	2198      	movs	r1, #152	@ 0x98
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	336c      	adds	r3, #108	@ 0x6c
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 8004cc4:	4a12      	ldr	r2, [pc, #72]	@ (8004d10 <ControlTask+0x524>)
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	2198      	movs	r1, #152	@ 0x98
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	336c      	adds	r3, #108	@ 0x6c
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	490e      	ldr	r1, [pc, #56]	@ (8004d10 <ControlTask+0x524>)
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	2098      	movs	r0, #152	@ 0x98
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3370      	adds	r3, #112	@ 0x70
 8004ce2:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <ControlTask+0x524>)
 8004ce6:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <ControlTask+0x524>)
 8004cf8:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004cfc:	e00e      	b.n	8004d1c <ControlTask+0x530>
 8004cfe:	bf00      	nop
 8004d00:	58020400 	.word	0x58020400
 8004d04:	240022c4 	.word	0x240022c4
 8004d08:	240022c8 	.word	0x240022c8
 8004d0c:	24000288 	.word	0x24000288
 8004d10:	2400230c 	.word	0x2400230c
 8004d14:	240022d0 	.word	0x240022d0
 8004d18:	240022dc 	.word	0x240022dc
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 8004d28:	4b7b      	ldr	r3, [pc, #492]	@ (8004f18 <ControlTask+0x72c>)
 8004d2a:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 8004d3a:	4b77      	ldr	r3, [pc, #476]	@ (8004f18 <ControlTask+0x72c>)
 8004d3c:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 8004d4c:	4b72      	ldr	r3, [pc, #456]	@ (8004f18 <ControlTask+0x72c>)
 8004d4e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 8004d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004f18 <ControlTask+0x72c>)
 8004d60:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 8004d70:	4b69      	ldr	r3, [pc, #420]	@ (8004f18 <ControlTask+0x72c>)
 8004d72:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 8004d82:	4b65      	ldr	r3, [pc, #404]	@ (8004f18 <ControlTask+0x72c>)
 8004d84:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	3301      	adds	r3, #1
 8004d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f77f ae2f 	ble.w	8004a00 <ControlTask+0x214>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004da2:	2300      	movs	r3, #0
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da6:	e060      	b.n	8004e6a <ControlTask+0x67e>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 8004da8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <ControlTask+0x730>)
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <ControlTask+0x72c>)
 8004db4:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 8004dc2:	4b55      	ldr	r3, [pc, #340]	@ (8004f18 <ControlTask+0x72c>)
 8004dc4:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8004dd4:	4b50      	ldr	r3, [pc, #320]	@ (8004f18 <ControlTask+0x72c>)
 8004dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 8004de6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f18 <ControlTask+0x72c>)
 8004de8:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 8004df8:	4b47      	ldr	r3, [pc, #284]	@ (8004f18 <ControlTask+0x72c>)
 8004dfa:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <ControlTask+0x72c>)
 8004e0c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f18 <ControlTask+0x72c>)
 8004e1e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <ControlTask+0x72c>)
 8004e30:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 8004e40:	4b35      	ldr	r3, [pc, #212]	@ (8004f18 <ControlTask+0x72c>)
 8004e42:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <ControlTask+0x72c>)
 8004e54:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	3301      	adds	r3, #1
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	dd9b      	ble.n	8004da8 <ControlTask+0x5bc>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 8004e70:	2300      	movs	r3, #0
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	e00b      	b.n	8004e8e <ControlTask+0x6a2>
 8004e76:	4b28      	ldr	r3, [pc, #160]	@ (8004f18 <ControlTask+0x72c>)
 8004e78:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	ddf0      	ble.n	8004e76 <ControlTask+0x68a>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 8004e94:	4b20      	ldr	r3, [pc, #128]	@ (8004f18 <ControlTask+0x72c>)
 8004e96:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004e9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004e9e:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <ControlTask+0x72c>)
 8004ea2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004eac:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 8004eae:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <ControlTask+0x72c>)
 8004eb0:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004eb4:	3320      	adds	r3, #32
 8004eb6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004eba:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e00b      	b.n	8004eda <ControlTask+0x6ee>
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <ControlTask+0x72c>)
 8004ec4:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	ddf0      	ble.n	8004ec2 <ControlTask+0x6d6>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <ControlTask+0x72c>)
 8004ee2:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004ee6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004eea:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <ControlTask+0x72c>)
 8004eee:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ef8:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 8004efa:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <ControlTask+0x72c>)
 8004efc:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004f00:	3320      	adds	r3, #32
 8004f02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f06:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 8004f08:	4803      	ldr	r0, [pc, #12]	@ (8004f18 <ControlTask+0x72c>)
 8004f0a:	f7fe f939 	bl	8003180 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004f0e:	4b02      	ldr	r3, [pc, #8]	@ (8004f18 <ControlTask+0x72c>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004f14:	e474      	b.n	8004800 <ControlTask+0x14>
 8004f16:	bf00      	nop
 8004f18:	2400230c 	.word	0x2400230c
 8004f1c:	240022f8 	.word	0x240022f8

08004f20 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	ed2d 8b10 	vpush	{d8-d15}
 8004f26:	b0a9      	sub	sp, #164	@ 0xa4
 8004f28:	af24      	add	r7, sp, #144	@ 0x90
 8004f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8004f2c:	f00c f9b0 	bl	8011290 <xTaskGetTickCount>
 8004f30:	4603      	mov	r3, r0
 8004f32:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(5);  // 5 ms
 8004f34:	2302      	movs	r3, #2
 8004f36:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 10 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004f38:	f107 0308 	add.w	r3, r7, #8
 8004f3c:	68f9      	ldr	r1, [r7, #12]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00c f80a 	bl	8010f58 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	005a      	lsls	r2, r3, #1
 8004f48:	4bad      	ldr	r3, [pc, #692]	@ (8005200 <DataLoggingTask+0x2e0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	4aac      	ldr	r2, [pc, #688]	@ (8005200 <DataLoggingTask+0x2e0>)
 8004f50:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 8004f52:	4bac      	ldr	r3, [pc, #688]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	f040 80a9 	bne.w	80050ae <DataLoggingTask+0x18e>
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8004f5c:	4baa      	ldr	r3, [pc, #680]	@ (8005208 <DataLoggingTask+0x2e8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f68:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 800520c <DataLoggingTask+0x2ec>
 8004f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004f70:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8004f74:	4ba3      	ldr	r3, [pc, #652]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4aa2      	ldr	r2, [pc, #648]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f7a:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 8004f7c:	49a1      	ldr	r1, [pc, #644]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f7e:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004f82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004f86:	499f      	ldr	r1, [pc, #636]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f88:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 8004f8c:	489d      	ldr	r0, [pc, #628]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f8e:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004f92:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004f96:	489b      	ldr	r0, [pc, #620]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f98:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8004f9c:	4c99      	ldr	r4, [pc, #612]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004f9e:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fa2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004fa6:	4c97      	ldr	r4, [pc, #604]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004fa8:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004fac:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fb0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004fb4:	4c93      	ldr	r4, [pc, #588]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004fb6:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004fba:	3404      	adds	r4, #4
 8004fbc:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fc0:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004fc4:	4c8f      	ldr	r4, [pc, #572]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004fc6:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004fca:	3408      	adds	r4, #8
 8004fcc:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fd0:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004fd4:	4c8b      	ldr	r4, [pc, #556]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004fd6:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004fda:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fde:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004fe2:	4c88      	ldr	r4, [pc, #544]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004fe4:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004fe8:	3404      	adds	r4, #4
 8004fea:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004fee:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004ff2:	4c84      	ldr	r4, [pc, #528]	@ (8005204 <DataLoggingTask+0x2e4>)
 8004ff4:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004ff8:	3408      	adds	r4, #8
 8004ffa:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004ffe:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005002:	4c80      	ldr	r4, [pc, #512]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005004:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005008:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800500c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005010:	4c7c      	ldr	r4, [pc, #496]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005012:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005016:	3404      	adds	r4, #4
 8005018:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800501c:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005020:	4c78      	ldr	r4, [pc, #480]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005022:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005026:	3408      	adds	r4, #8
 8005028:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800502c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005030:	4c74      	ldr	r4, [pc, #464]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005032:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005036:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800503a:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 800503e:	4c71      	ldr	r4, [pc, #452]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005040:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005044:	3404      	adds	r4, #4
 8005046:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800504a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 800504e:	4c6d      	ldr	r4, [pc, #436]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005050:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005054:	3408      	adds	r4, #8
 8005056:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800505a:	eeb7 eace 	vcvt.f64.f32	d14, s28
 800505e:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005062:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005066:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 800506a:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 800506e:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005072:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005076:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 800507a:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 800507e:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005082:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005086:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 800508a:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 800508e:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005092:	9008      	str	r0, [sp, #32]
 8005094:	ed8d 6b06 	vstr	d6, [sp, #24]
 8005098:	9104      	str	r1, [sp, #16]
 800509a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	ec53 2b1f 	vmov	r2, r3, d15
 80050a6:	485a      	ldr	r0, [pc, #360]	@ (8005210 <DataLoggingTask+0x2f0>)
 80050a8:	f00f f9b6 	bl	8014418 <iprintf>
 80050ac:	e744      	b.n	8004f38 <DataLoggingTask+0x18>
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 80050ae:	4b56      	ldr	r3, [pc, #344]	@ (8005208 <DataLoggingTask+0x2e8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ba:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800520c <DataLoggingTask+0x2ec>
 80050be:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80050c2:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 80050c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050cc:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 80050ce:	494d      	ldr	r1, [pc, #308]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050d0:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80050d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80050d8:	494a      	ldr	r1, [pc, #296]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050da:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 80050de:	4849      	ldr	r0, [pc, #292]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050e0:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80050e4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80050e8:	4846      	ldr	r0, [pc, #280]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050ea:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 80050ee:	4c45      	ldr	r4, [pc, #276]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050f0:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80050f4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 80050f8:	4c42      	ldr	r4, [pc, #264]	@ (8005204 <DataLoggingTask+0x2e4>)
 80050fa:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 80050fe:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005102:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005106:	4c3f      	ldr	r4, [pc, #252]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005108:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800510c:	3404      	adds	r4, #4
 800510e:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005112:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005116:	4c3b      	ldr	r4, [pc, #236]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005118:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800511c:	3408      	adds	r4, #8
 800511e:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005122:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005126:	4c37      	ldr	r4, [pc, #220]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005128:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800512c:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005130:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005134:	4c33      	ldr	r4, [pc, #204]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005136:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800513a:	3404      	adds	r4, #4
 800513c:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005140:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005144:	4c2f      	ldr	r4, [pc, #188]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005146:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800514a:	3408      	adds	r4, #8
 800514c:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005150:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005154:	4c2b      	ldr	r4, [pc, #172]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005156:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 800515a:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800515e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005162:	4c28      	ldr	r4, [pc, #160]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005164:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005168:	3404      	adds	r4, #4
 800516a:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800516e:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005172:	4c24      	ldr	r4, [pc, #144]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005174:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005178:	3408      	adds	r4, #8
 800517a:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800517e:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005182:	4c20      	ldr	r4, [pc, #128]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005184:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005188:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800518c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005190:	4c1c      	ldr	r4, [pc, #112]	@ (8005204 <DataLoggingTask+0x2e4>)
 8005192:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005196:	3404      	adds	r4, #4
 8005198:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800519c:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 80051a0:	4c18      	ldr	r4, [pc, #96]	@ (8005204 <DataLoggingTask+0x2e4>)
 80051a2:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 80051a6:	3408      	adds	r4, #8
 80051a8:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80051ac:	eeb7 eace 	vcvt.f64.f32	d14, s28
 80051b0:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 80051b4:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 80051b8:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 80051bc:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 80051c0:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 80051c4:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 80051c8:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80051cc:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 80051d0:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 80051d4:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 80051d8:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 80051dc:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 80051e0:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 80051e4:	9008      	str	r0, [sp, #32]
 80051e6:	ed8d 6b06 	vstr	d6, [sp, #24]
 80051ea:	9104      	str	r1, [sp, #16]
 80051ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051f0:	9201      	str	r2, [sp, #4]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	ec53 2b1f 	vmov	r2, r3, d15
 80051f8:	4805      	ldr	r0, [pc, #20]	@ (8005210 <DataLoggingTask+0x2f0>)
 80051fa:	f00f f90d 	bl	8014418 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 80051fe:	e69b      	b.n	8004f38 <DataLoggingTask+0x18>
 8005200:	240022cc 	.word	0x240022cc
 8005204:	2400230c 	.word	0x2400230c
 8005208:	240022c4 	.word	0x240022c4
 800520c:	447a0000 	.word	0x447a0000
 8005210:	080170fc 	.word	0x080170fc

08005214 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800521a:	463b      	mov	r3, r7
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005226:	f000 ff3d 	bl	80060a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800522e:	2300      	movs	r3, #0
 8005230:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005236:	231f      	movs	r3, #31
 8005238:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800523a:	2387      	movs	r3, #135	@ 0x87
 800523c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800523e:	2300      	movs	r3, #0
 8005240:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005242:	2300      	movs	r3, #0
 8005244:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005246:	2301      	movs	r3, #1
 8005248:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800524a:	2301      	movs	r3, #1
 800524c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800524e:	2300      	movs	r3, #0
 8005250:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005256:	463b      	mov	r3, r7
 8005258:	4618      	mov	r0, r3
 800525a:	f000 ff5b 	bl	8006114 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800525e:	2004      	movs	r0, #4
 8005260:	f000 ff38 	bl	80060d4 <HAL_MPU_Enable>

}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a04      	ldr	r2, [pc, #16]	@ (800528c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800527e:	f000 fde1 	bl	8005e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40001400 	.word	0x40001400

08005290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8005296:	4b52      	ldr	r3, [pc, #328]	@ (80053e0 <Error_Handler+0x150>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d148      	bne.n	8005330 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 800529e:	2300      	movs	r3, #0
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	e03f      	b.n	8005324 <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 80052a4:	2180      	movs	r1, #128	@ 0x80
 80052a6:	484f      	ldr	r0, [pc, #316]	@ (80053e4 <Error_Handler+0x154>)
 80052a8:	f005 fb09 	bl	800a8be <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 80052ac:	4a4c      	ldr	r2, [pc, #304]	@ (80053e0 <Error_Handler+0x150>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2198      	movs	r1, #152	@ 0x98
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	338c      	adds	r3, #140	@ 0x8c
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80052c0:	4849      	ldr	r0, [pc, #292]	@ (80053e8 <Error_Handler+0x158>)
 80052c2:	f004 fb99 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d016      	beq.n	80052fa <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 80052cc:	4a44      	ldr	r2, [pc, #272]	@ (80053e0 <Error_Handler+0x150>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2198      	movs	r1, #152	@ 0x98
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	3308      	adds	r3, #8
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	4940      	ldr	r1, [pc, #256]	@ (80053e0 <Error_Handler+0x150>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2098      	movs	r0, #152	@ 0x98
 80052e4:	fb00 f303 	mul.w	r3, r0, r3
 80052e8:	440b      	add	r3, r1
 80052ea:	338c      	adds	r3, #140	@ 0x8c
 80052ec:	edd3 7a00 	vldr	s15, [r3]
 80052f0:	eeb0 0a67 	vmov.f32	s0, s15
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7fc f9a7 	bl	8001648 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80052fa:	483b      	ldr	r0, [pc, #236]	@ (80053e8 <Error_Handler+0x158>)
 80052fc:	f004 fb7c 	bl	80099f8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005306:	4a36      	ldr	r2, [pc, #216]	@ (80053e0 <Error_Handler+0x150>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2198      	movs	r1, #152	@ 0x98
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	3308      	adds	r3, #8
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	4618      	mov	r0, r3
 800531a:	f7fc f919 	bl	8001550 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3301      	adds	r3, #1
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	ddbc      	ble.n	80052a4 <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 800532a:	4b2d      	ldr	r3, [pc, #180]	@ (80053e0 <Error_Handler+0x150>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8005330:	4b2e      	ldr	r3, [pc, #184]	@ (80053ec <Error_Handler+0x15c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3b01      	subs	r3, #1
 8005336:	2b04      	cmp	r3, #4
 8005338:	d82f      	bhi.n	800539a <Error_Handler+0x10a>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <Error_Handler+0xb0>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005355 	.word	0x08005355
 8005344:	08005363 	.word	0x08005363
 8005348:	08005371 	.word	0x08005371
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800538d 	.word	0x0800538d
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 8005354:	4b25      	ldr	r3, [pc, #148]	@ (80053ec <Error_Handler+0x15c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	4825      	ldr	r0, [pc, #148]	@ (80053f0 <Error_Handler+0x160>)
 800535c:	f00f f85c 	bl	8014418 <iprintf>
 8005360:	e01e      	b.n	80053a0 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 8005362:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <Error_Handler+0x15c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	4822      	ldr	r0, [pc, #136]	@ (80053f4 <Error_Handler+0x164>)
 800536a:	f00f f855 	bl	8014418 <iprintf>
 800536e:	e017      	b.n	80053a0 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8005370:	4b1e      	ldr	r3, [pc, #120]	@ (80053ec <Error_Handler+0x15c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	4820      	ldr	r0, [pc, #128]	@ (80053f8 <Error_Handler+0x168>)
 8005378:	f00f f84e 	bl	8014418 <iprintf>
 800537c:	e010      	b.n	80053a0 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 800537e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <Error_Handler+0x15c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	481d      	ldr	r0, [pc, #116]	@ (80053fc <Error_Handler+0x16c>)
 8005386:	f00f f847 	bl	8014418 <iprintf>
 800538a:	e009      	b.n	80053a0 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <Error_Handler+0x15c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	481b      	ldr	r0, [pc, #108]	@ (8005400 <Error_Handler+0x170>)
 8005394:	f00f f840 	bl	8014418 <iprintf>
 8005398:	e002      	b.n	80053a0 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 800539a:	481a      	ldr	r0, [pc, #104]	@ (8005404 <Error_Handler+0x174>)
 800539c:	f00f f83c 	bl	8014418 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 80053a0:	2300      	movs	r3, #0
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	e012      	b.n	80053cc <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 80053a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80053aa:	480e      	ldr	r0, [pc, #56]	@ (80053e4 <Error_Handler+0x154>)
 80053ac:	f005 fa87 	bl	800a8be <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 80053b0:	20c8      	movs	r0, #200	@ 0xc8
 80053b2:	f000 fd67 	bl	8005e84 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 80053b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80053ba:	480a      	ldr	r0, [pc, #40]	@ (80053e4 <Error_Handler+0x154>)
 80053bc:	f005 fa7f 	bl	800a8be <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 80053c0:	20c8      	movs	r0, #200	@ 0xc8
 80053c2:	f000 fd5f 	bl	8005e84 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <Error_Handler+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	dbe7      	blt.n	80053a6 <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 80053d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053da:	f000 fd53 	bl	8005e84 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 80053de:	e7df      	b.n	80053a0 <Error_Handler+0x110>
 80053e0:	2400230c 	.word	0x2400230c
 80053e4:	58020400 	.word	0x58020400
 80053e8:	24000288 	.word	0x24000288
 80053ec:	24002978 	.word	0x24002978
 80053f0:	08017170 	.word	0x08017170
 80053f4:	08017198 	.word	0x08017198
 80053f8:	080171c0 	.word	0x080171c0
 80053fc:	080171f4 	.word	0x080171f4
 8005400:	08017228 	.word	0x08017228
 8005404:	0801725c 	.word	0x0801725c

08005408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <HAL_MspInit+0x38>)
 8005410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005414:	4a0a      	ldr	r2, [pc, #40]	@ (8005440 <HAL_MspInit+0x38>)
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800541e:	4b08      	ldr	r3, [pc, #32]	@ (8005440 <HAL_MspInit+0x38>)
 8005420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800542c:	2200      	movs	r2, #0
 800542e:	210f      	movs	r1, #15
 8005430:	f06f 0001 	mvn.w	r0, #1
 8005434:	f000 fe0e 	bl	8006054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	58024400 	.word	0x58024400

08005444 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b0ba      	sub	sp, #232	@ 0xe8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800544c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	609a      	str	r2, [r3, #8]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	22c0      	movs	r2, #192	@ 0xc0
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f00f f82c 	bl	80144c2 <memset>
  if(hfdcan->Instance==FDCAN1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a37      	ldr	r2, [pc, #220]	@ (800554c <HAL_FDCAN_MspInit+0x108>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d166      	bne.n	8005542 <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005474:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8005480:	2301      	movs	r3, #1
 8005482:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8005484:	2364      	movs	r3, #100	@ 0x64
 8005486:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8005488:	2302      	movs	r3, #2
 800548a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 800548c:	2314      	movs	r3, #20
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005490:	2302      	movs	r3, #2
 8005492:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8005494:	23c0      	movs	r3, #192	@ 0xc0
 8005496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005498:	2300      	movs	r3, #0
 800549a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80054a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80054a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	4618      	mov	r0, r3
 80054ae:	f006 fa83 	bl	800b9b8 <HAL_RCCEx_PeriphCLKConfig>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80054b8:	f7ff feea 	bl	8005290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80054bc:	4b24      	ldr	r3, [pc, #144]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80054c2:	4a23      	ldr	r2, [pc, #140]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80054cc:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054da:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054e2:	f043 0308 	orr.w	r3, r3, #8
 80054e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054ea:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <HAL_FDCAN_MspInit+0x10c>)
 80054ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054f8:	2303      	movs	r3, #3
 80054fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800550a:	2302      	movs	r3, #2
 800550c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005510:	2309      	movs	r3, #9
 8005512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005516:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800551a:	4619      	mov	r1, r3
 800551c:	480d      	ldr	r0, [pc, #52]	@ (8005554 <HAL_FDCAN_MspInit+0x110>)
 800551e:	f005 f805 	bl	800a52c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 8005522:	2200      	movs	r2, #0
 8005524:	2106      	movs	r1, #6
 8005526:	2013      	movs	r0, #19
 8005528:	f000 fd94 	bl	8006054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800552c:	2013      	movs	r0, #19
 800552e:	f000 fdab 	bl	8006088 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8005532:	2200      	movs	r2, #0
 8005534:	2106      	movs	r1, #6
 8005536:	2015      	movs	r0, #21
 8005538:	f000 fd8c 	bl	8006054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800553c:	2015      	movs	r0, #21
 800553e:	f000 fda3 	bl	8006088 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8005542:	bf00      	nop
 8005544:	37e8      	adds	r7, #232	@ 0xe8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	4000a000 	.word	0x4000a000
 8005550:	58024400 	.word	0x58024400
 8005554:	58020c00 	.word	0x58020c00

08005558 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b0ba      	sub	sp, #232	@ 0xe8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005560:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	22c0      	movs	r2, #192	@ 0xc0
 8005576:	2100      	movs	r1, #0
 8005578:	4618      	mov	r0, r3
 800557a:	f00e ffa2 	bl	80144c2 <memset>
  if(huart->Instance==USART3)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a59      	ldr	r2, [pc, #356]	@ (80056e8 <HAL_UART_MspInit+0x190>)
 8005584:	4293      	cmp	r3, r2
 8005586:	f040 80aa 	bne.w	80056de <HAL_UART_MspInit+0x186>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800558a:	f04f 0202 	mov.w	r2, #2
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005596:	2300      	movs	r3, #0
 8005598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	4618      	mov	r0, r3
 80055a2:	f006 fa09 	bl	800b9b8 <HAL_RCCEx_PeriphCLKConfig>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80055ac:	f7ff fe70 	bl	8005290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80055b0:	4b4e      	ldr	r3, [pc, #312]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055b6:	4a4d      	ldr	r2, [pc, #308]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80055c0:	4b4a      	ldr	r3, [pc, #296]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ce:	4b47      	ldr	r3, [pc, #284]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055d4:	4a45      	ldr	r2, [pc, #276]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055d6:	f043 0308 	orr.w	r3, r3, #8
 80055da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055de:	4b43      	ldr	r3, [pc, #268]	@ (80056ec <HAL_UART_MspInit+0x194>)
 80055e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005606:	2307      	movs	r3, #7
 8005608:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800560c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005610:	4619      	mov	r1, r3
 8005612:	4837      	ldr	r0, [pc, #220]	@ (80056f0 <HAL_UART_MspInit+0x198>)
 8005614:	f004 ff8a 	bl	800a52c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005618:	4b36      	ldr	r3, [pc, #216]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 800561a:	4a37      	ldr	r2, [pc, #220]	@ (80056f8 <HAL_UART_MspInit+0x1a0>)
 800561c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800561e:	4b35      	ldr	r3, [pc, #212]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005620:	222d      	movs	r2, #45	@ 0x2d
 8005622:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800562a:	4b32      	ldr	r3, [pc, #200]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 800562c:	2200      	movs	r2, #0
 800562e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005630:	4b30      	ldr	r3, [pc, #192]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005636:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005638:	4b2e      	ldr	r3, [pc, #184]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 800563a:	2200      	movs	r2, #0
 800563c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005640:	2200      	movs	r2, #0
 8005642:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005644:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005646:	2200      	movs	r2, #0
 8005648:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800564a:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 800564c:	2200      	movs	r2, #0
 800564e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005650:	4b28      	ldr	r3, [pc, #160]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005652:	2200      	movs	r2, #0
 8005654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005656:	4827      	ldr	r0, [pc, #156]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005658:	f000 fd9c 	bl	8006194 <HAL_DMA_Init>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8005662:	f7ff fe15 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a22      	ldr	r2, [pc, #136]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 800566a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800566e:	4a21      	ldr	r2, [pc, #132]	@ (80056f4 <HAL_UART_MspInit+0x19c>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005674:	4b21      	ldr	r3, [pc, #132]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 8005676:	4a22      	ldr	r2, [pc, #136]	@ (8005700 <HAL_UART_MspInit+0x1a8>)
 8005678:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 800567c:	222e      	movs	r2, #46	@ 0x2e
 800567e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005680:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 8005682:	2240      	movs	r2, #64	@ 0x40
 8005684:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 800568e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005692:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 8005696:	2200      	movs	r2, #0
 8005698:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800569a:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 800569c:	2200      	movs	r2, #0
 800569e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056a0:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056a6:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056ac:	4b13      	ldr	r3, [pc, #76]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056b2:	4812      	ldr	r0, [pc, #72]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056b4:	f000 fd6e 	bl	8006194 <HAL_DMA_Init>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80056be:	f7ff fde7 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80056c8:	4a0c      	ldr	r2, [pc, #48]	@ (80056fc <HAL_UART_MspInit+0x1a4>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80056ce:	2200      	movs	r2, #0
 80056d0:	2108      	movs	r1, #8
 80056d2:	2027      	movs	r0, #39	@ 0x27
 80056d4:	f000 fcbe 	bl	8006054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80056d8:	2027      	movs	r0, #39	@ 0x27
 80056da:	f000 fcd5 	bl	8006088 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80056de:	bf00      	nop
 80056e0:	37e8      	adds	r7, #232	@ 0xe8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40004800 	.word	0x40004800
 80056ec:	58024400 	.word	0x58024400
 80056f0:	58020c00 	.word	0x58020c00
 80056f4:	240003bc 	.word	0x240003bc
 80056f8:	40020010 	.word	0x40020010
 80056fc:	24000434 	.word	0x24000434
 8005700:	40020028 	.word	0x40020028

08005704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b090      	sub	sp, #64	@ 0x40
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d827      	bhi.n	8005762 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8005712:	2200      	movs	r2, #0
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	2037      	movs	r0, #55	@ 0x37
 8005718:	f000 fc9c 	bl	8006054 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800571c:	2037      	movs	r0, #55	@ 0x37
 800571e:	f000 fcb3 	bl	8006088 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8005722:	4a29      	ldr	r2, [pc, #164]	@ (80057c8 <HAL_InitTick+0xc4>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005728:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <HAL_InitTick+0xc8>)
 800572a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800572e:	4a27      	ldr	r2, [pc, #156]	@ (80057cc <HAL_InitTick+0xc8>)
 8005730:	f043 0320 	orr.w	r3, r3, #32
 8005734:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005738:	4b24      	ldr	r3, [pc, #144]	@ (80057cc <HAL_InitTick+0xc8>)
 800573a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005746:	f107 0210 	add.w	r2, r7, #16
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f006 f8ef 	bl	800b934 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <HAL_InitTick+0x6a>
 8005760:	e001      	b.n	8005766 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e02b      	b.n	80057be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005766:	f006 f8b9 	bl	800b8dc <HAL_RCC_GetPCLK1Freq>
 800576a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800576c:	e004      	b.n	8005778 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800576e:	f006 f8b5 	bl	800b8dc <HAL_RCC_GetPCLK1Freq>
 8005772:	4603      	mov	r3, r0
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_InitTick+0xcc>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	0c9b      	lsrs	r3, r3, #18
 8005782:	3b01      	subs	r3, #1
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005786:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <HAL_InitTick+0xd0>)
 8005788:	4a13      	ldr	r2, [pc, #76]	@ (80057d8 <HAL_InitTick+0xd4>)
 800578a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800578c:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_InitTick+0xd0>)
 800578e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005792:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005794:	4a0f      	ldr	r2, [pc, #60]	@ (80057d4 <HAL_InitTick+0xd0>)
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <HAL_InitTick+0xd0>)
 800579c:	2200      	movs	r2, #0
 800579e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <HAL_InitTick+0xd0>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80057a6:	480b      	ldr	r0, [pc, #44]	@ (80057d4 <HAL_InitTick+0xd0>)
 80057a8:	f007 ff32 	bl	800d610 <HAL_TIM_Base_Init>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80057b2:	4808      	ldr	r0, [pc, #32]	@ (80057d4 <HAL_InitTick+0xd0>)
 80057b4:	f007 ff8e 	bl	800d6d4 <HAL_TIM_Base_Start_IT>
 80057b8:	4603      	mov	r3, r0
 80057ba:	e000      	b.n	80057be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3740      	adds	r7, #64	@ 0x40
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	24000074 	.word	0x24000074
 80057cc:	58024400 	.word	0x58024400
 80057d0:	431bde83 	.word	0x431bde83
 80057d4:	2400297c 	.word	0x2400297c
 80057d8:	40001400 	.word	0x40001400

080057dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <NMI_Handler+0x4>

080057e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <HardFault_Handler+0x4>

080057ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <MemManage_Handler+0x4>

080057f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <BusFault_Handler+0x4>

080057fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <UsageFault_Handler+0x4>

08005804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005818:	4802      	ldr	r0, [pc, #8]	@ (8005824 <DMA1_Stream0_IRQHandler+0x10>)
 800581a:	f002 f99b 	bl	8007b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	240003bc 	.word	0x240003bc

08005828 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800582c:	4802      	ldr	r0, [pc, #8]	@ (8005838 <DMA1_Stream1_IRQHandler+0x10>)
 800582e:	f002 f991 	bl	8007b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	24000434 	.word	0x24000434

0800583c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005840:	4802      	ldr	r0, [pc, #8]	@ (800584c <FDCAN1_IT0_IRQHandler+0x10>)
 8005842:	f004 f965 	bl	8009b10 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	24000288 	.word	0x24000288

08005850 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005854:	4802      	ldr	r0, [pc, #8]	@ (8005860 <FDCAN1_IT1_IRQHandler+0x10>)
 8005856:	f004 f95b 	bl	8009b10 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	24000288 	.word	0x24000288

08005864 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005868:	4802      	ldr	r0, [pc, #8]	@ (8005874 <USART3_IRQHandler+0x10>)
 800586a:	f008 fb1f 	bl	800deac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	24000328 	.word	0x24000328

08005878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800587c:	2000      	movs	r0, #0
 800587e:	f000 fa8b 	bl	8005d98 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800588c:	4802      	ldr	r0, [pc, #8]	@ (8005898 <TIM7_IRQHandler+0x10>)
 800588e:	f007 ff99 	bl	800d7c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2400297c 	.word	0x2400297c

0800589c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  return 1;
 80058ae:	2301      	movs	r3, #1
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <_kill>:

int _kill(int pid, int sig)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058c4:	f00e fee2 	bl	801468c <__errno>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2216      	movs	r2, #22
 80058cc:	601a      	str	r2, [r3, #0]
  return -1;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_exit>:

void _exit (int status)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058e2:	f04f 31ff 	mov.w	r1, #4294967295
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ffe7 	bl	80058ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <_exit+0x12>

080058f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e00a      	b.n	8005918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005902:	f3af 8000 	nop.w
 8005906:	4601      	mov	r1, r0
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	60ba      	str	r2, [r7, #8]
 800590e:	b2ca      	uxtb	r2, r1
 8005910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	3301      	adds	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	dbf0      	blt.n	8005902 <_read+0x12>
  }

  return len;
 8005920:	687b      	ldr	r3, [r7, #4]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <_close>:
  }
  return len;
}

int _close(int file)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005952:	605a      	str	r2, [r3, #4]
  return 0;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <_isatty>:

int _isatty(int file)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800596a:	2301      	movs	r3, #1
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800599c:	4a14      	ldr	r2, [pc, #80]	@ (80059f0 <_sbrk+0x5c>)
 800599e:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <_sbrk+0x60>)
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059a8:	4b13      	ldr	r3, [pc, #76]	@ (80059f8 <_sbrk+0x64>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059b0:	4b11      	ldr	r3, [pc, #68]	@ (80059f8 <_sbrk+0x64>)
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <_sbrk+0x68>)
 80059b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <_sbrk+0x64>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d207      	bcs.n	80059d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059c4:	f00e fe62 	bl	801468c <__errno>
 80059c8:	4603      	mov	r3, r0
 80059ca:	220c      	movs	r2, #12
 80059cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	e009      	b.n	80059e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059d4:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <_sbrk+0x64>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <_sbrk+0x64>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4413      	add	r3, r2
 80059e2:	4a05      	ldr	r2, [pc, #20]	@ (80059f8 <_sbrk+0x64>)
 80059e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059e6:	68fb      	ldr	r3, [r7, #12]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	24080000 	.word	0x24080000
 80059f4:	00000400 	.word	0x00000400
 80059f8:	240029c8 	.word	0x240029c8
 80059fc:	24007510 	.word	0x24007510

08005a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a04:	4b43      	ldr	r3, [pc, #268]	@ (8005b14 <SystemInit+0x114>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	4a42      	ldr	r2, [pc, #264]	@ (8005b14 <SystemInit+0x114>)
 8005a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a14:	4b40      	ldr	r3, [pc, #256]	@ (8005b18 <SystemInit+0x118>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	d807      	bhi.n	8005a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a20:	4b3d      	ldr	r3, [pc, #244]	@ (8005b18 <SystemInit+0x118>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f023 030f 	bic.w	r3, r3, #15
 8005a28:	4a3b      	ldr	r2, [pc, #236]	@ (8005b18 <SystemInit+0x118>)
 8005a2a:	f043 0307 	orr.w	r3, r3, #7
 8005a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005a30:	4b3a      	ldr	r3, [pc, #232]	@ (8005b1c <SystemInit+0x11c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a39      	ldr	r2, [pc, #228]	@ (8005b1c <SystemInit+0x11c>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a3c:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <SystemInit+0x11c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005a42:	4b36      	ldr	r3, [pc, #216]	@ (8005b1c <SystemInit+0x11c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4935      	ldr	r1, [pc, #212]	@ (8005b1c <SystemInit+0x11c>)
 8005a48:	4b35      	ldr	r3, [pc, #212]	@ (8005b20 <SystemInit+0x120>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005a4e:	4b32      	ldr	r3, [pc, #200]	@ (8005b18 <SystemInit+0x118>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b18 <SystemInit+0x118>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 030f 	bic.w	r3, r3, #15
 8005a62:	4a2d      	ldr	r2, [pc, #180]	@ (8005b18 <SystemInit+0x118>)
 8005a64:	f043 0307 	orr.w	r3, r3, #7
 8005a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b1c <SystemInit+0x11c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005a70:	4b2a      	ldr	r3, [pc, #168]	@ (8005b1c <SystemInit+0x11c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005a76:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <SystemInit+0x11c>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005a7c:	4b27      	ldr	r3, [pc, #156]	@ (8005b1c <SystemInit+0x11c>)
 8005a7e:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <SystemInit+0x124>)
 8005a80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005a82:	4b26      	ldr	r3, [pc, #152]	@ (8005b1c <SystemInit+0x11c>)
 8005a84:	4a28      	ldr	r2, [pc, #160]	@ (8005b28 <SystemInit+0x128>)
 8005a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005a88:	4b24      	ldr	r3, [pc, #144]	@ (8005b1c <SystemInit+0x11c>)
 8005a8a:	4a28      	ldr	r2, [pc, #160]	@ (8005b2c <SystemInit+0x12c>)
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005a8e:	4b23      	ldr	r3, [pc, #140]	@ (8005b1c <SystemInit+0x11c>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005a94:	4b21      	ldr	r3, [pc, #132]	@ (8005b1c <SystemInit+0x11c>)
 8005a96:	4a25      	ldr	r2, [pc, #148]	@ (8005b2c <SystemInit+0x12c>)
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005a9a:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <SystemInit+0x11c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b1c <SystemInit+0x11c>)
 8005aa2:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <SystemInit+0x12c>)
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b1c <SystemInit+0x11c>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <SystemInit+0x11c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <SystemInit+0x11c>)
 8005ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ab8:	4b18      	ldr	r3, [pc, #96]	@ (8005b1c <SystemInit+0x11c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005abe:	4b1c      	ldr	r3, [pc, #112]	@ (8005b30 <SystemInit+0x130>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <SystemInit+0x134>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aca:	d202      	bcs.n	8005ad2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005acc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b38 <SystemInit+0x138>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8005ad2:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <SystemInit+0x11c>)
 8005ad4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d113      	bne.n	8005b08 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <SystemInit+0x11c>)
 8005ae2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8005b1c <SystemInit+0x11c>)
 8005ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005aec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005af0:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <SystemInit+0x13c>)
 8005af2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005af6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <SystemInit+0x11c>)
 8005afa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005afe:	4a07      	ldr	r2, [pc, #28]	@ (8005b1c <SystemInit+0x11c>)
 8005b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	e000ed00 	.word	0xe000ed00
 8005b18:	52002000 	.word	0x52002000
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	eaf6ed7f 	.word	0xeaf6ed7f
 8005b24:	02020200 	.word	0x02020200
 8005b28:	01ff0000 	.word	0x01ff0000
 8005b2c:	01010280 	.word	0x01010280
 8005b30:	5c001000 	.word	0x5c001000
 8005b34:	ffff0000 	.word	0xffff0000
 8005b38:	51008108 	.word	0x51008108
 8005b3c:	52004000 	.word	0x52004000

08005b40 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005b44:	4b09      	ldr	r3, [pc, #36]	@ (8005b6c <ExitRun0Mode+0x2c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <ExitRun0Mode+0x2c>)
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8005b50:	bf00      	nop
 8005b52:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <ExitRun0Mode+0x2c>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f9      	beq.n	8005b52 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	58024800 	.word	0x58024800

08005b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005b70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005bac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005b74:	f7ff ffe4 	bl	8005b40 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b78:	f7ff ff42 	bl	8005a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b7c:	480c      	ldr	r0, [pc, #48]	@ (8005bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b7e:	490d      	ldr	r1, [pc, #52]	@ (8005bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b80:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b84:	e002      	b.n	8005b8c <LoopCopyDataInit>

08005b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b8a:	3304      	adds	r3, #4

08005b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b90:	d3f9      	bcc.n	8005b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b92:	4a0a      	ldr	r2, [pc, #40]	@ (8005bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b94:	4c0a      	ldr	r4, [pc, #40]	@ (8005bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b98:	e001      	b.n	8005b9e <LoopFillZerobss>

08005b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b9c:	3204      	adds	r2, #4

08005b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ba0:	d3fb      	bcc.n	8005b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ba2:	f00e fd79 	bl	8014698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ba6:	f7fe f8c7 	bl	8003d38 <main>
  bx  lr
 8005baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005bac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005bb4:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8005bb8:	080178f8 	.word	0x080178f8
  ldr r2, =_sbss
 8005bbc:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005bc0:	2400750c 	.word	0x2400750c

08005bc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bc4:	e7fe      	b.n	8005bc4 <ADC3_IRQHandler>
	...

08005bc8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08c      	sub	sp, #48	@ 0x30
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <BSP_LED_Init+0x28>
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d006      	beq.n	8005bf0 <BSP_LED_Init+0x28>
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d003      	beq.n	8005bf0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005be8:	f06f 0301 	mvn.w	r3, #1
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bee:	e055      	b.n	8005c9c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10f      	bne.n	8005c16 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8005bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005bfe:	f043 0302 	orr.w	r3, r3, #2
 8005c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c06:	4b28      	ldr	r3, [pc, #160]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	e021      	b.n	8005c5a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10f      	bne.n	8005c3c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8005c1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c22:	4a21      	ldr	r2, [pc, #132]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	e00e      	b.n	8005c5a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c42:	4a19      	ldr	r2, [pc, #100]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c4c:	4b16      	ldr	r3, [pc, #88]	@ (8005ca8 <BSP_LED_Init+0xe0>)
 8005c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	4a13      	ldr	r2, [pc, #76]	@ (8005cac <BSP_LED_Init+0xe4>)
 8005c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c62:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005c64:	2301      	movs	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb0 <BSP_LED_Init+0xe8>)
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	f107 0218 	add.w	r2, r7, #24
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f004 fc54 	bl	800a52c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb0 <BSP_LED_Init+0xe8>)
 8005c88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	4a07      	ldr	r2, [pc, #28]	@ (8005cac <BSP_LED_Init+0xe4>)
 8005c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c94:	2200      	movs	r2, #0
 8005c96:	4619      	mov	r1, r3
 8005c98:	f004 fdf8 	bl	800a88c <HAL_GPIO_WritePin>
  }

  return ret;
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	@ 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	0801732c 	.word	0x0801732c
 8005cb0:	2400005c 	.word	0x2400005c

08005cb4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	460a      	mov	r2, r1
 8005cbe:	71fb      	strb	r3, [r7, #7]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d80 <BSP_PB_Init+0xcc>)
 8005cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cca:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <BSP_PB_Init+0xcc>)
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d80 <BSP_PB_Init+0xcc>)
 8005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ce6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cec:	2302      	movs	r3, #2
 8005cee:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005cf0:	79bb      	ldrb	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10c      	bne.n	8005d10 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <BSP_PB_Init+0xd0>)
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	f107 020c 	add.w	r2, r7, #12
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f004 fc0f 	bl	800a52c <HAL_GPIO_Init>
 8005d0e:	e031      	b.n	8005d74 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005d10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005d14:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4a1a      	ldr	r2, [pc, #104]	@ (8005d84 <BSP_PB_Init+0xd0>)
 8005d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1e:	f107 020c 	add.w	r2, r7, #12
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 fc01 	bl	800a52c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4a16      	ldr	r2, [pc, #88]	@ (8005d88 <BSP_PB_Init+0xd4>)
 8005d30:	441a      	add	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	4915      	ldr	r1, [pc, #84]	@ (8005d8c <BSP_PB_Init+0xd8>)
 8005d36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f003 fa46 	bl	80091ce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4a10      	ldr	r2, [pc, #64]	@ (8005d88 <BSP_PB_Init+0xd4>)
 8005d48:	1898      	adds	r0, r3, r2
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	4a10      	ldr	r2, [pc, #64]	@ (8005d90 <BSP_PB_Init+0xdc>)
 8005d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d52:	461a      	mov	r2, r3
 8005d54:	2100      	movs	r1, #0
 8005d56:	f003 fa1b 	bl	8009190 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005d5a:	2028      	movs	r0, #40	@ 0x28
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d94 <BSP_PB_Init+0xe0>)
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	2200      	movs	r2, #0
 8005d66:	4619      	mov	r1, r3
 8005d68:	f000 f974 	bl	8006054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005d6c:	2328      	movs	r3, #40	@ 0x28
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f98a 	bl	8006088 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	24000068 	.word	0x24000068
 8005d88:	240029cc 	.word	0x240029cc
 8005d8c:	08017334 	.word	0x08017334
 8005d90:	2400006c 	.word	0x2400006c
 8005d94:	24000070 	.word	0x24000070

08005d98 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <BSP_PB_IRQHandler+0x20>)
 8005da8:	4413      	add	r3, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f003 fa24 	bl	80091f8 <HAL_EXTI_IRQHandler>
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	240029cc 	.word	0x240029cc

08005dbc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f7fb fa77 	bl	80012b4 <BSP_PB_Callback>
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dd2:	2003      	movs	r0, #3
 8005dd4:	f000 f933 	bl	800603e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd8:	f005 fbd6 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <HAL_Init+0x68>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	4913      	ldr	r1, [pc, #76]	@ (8005e38 <HAL_Init+0x6c>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <HAL_Init+0x68>)
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8005e38 <HAL_Init+0x6c>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e3c <HAL_Init+0x70>)
 8005e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e10:	4a0b      	ldr	r2, [pc, #44]	@ (8005e40 <HAL_Init+0x74>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e16:	200f      	movs	r0, #15
 8005e18:	f7ff fc74 	bl	8005704 <HAL_InitTick>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e002      	b.n	8005e2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005e26:	f7ff faef 	bl	8005408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	58024400 	.word	0x58024400
 8005e38:	0801731c 	.word	0x0801731c
 8005e3c:	24000058 	.word	0x24000058
 8005e40:	24000054 	.word	0x24000054

08005e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e48:	4b06      	ldr	r3, [pc, #24]	@ (8005e64 <HAL_IncTick+0x20>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <HAL_IncTick+0x24>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <HAL_IncTick+0x24>)
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	24000078 	.word	0x24000078
 8005e68:	240029d4 	.word	0x240029d4

08005e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e70:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <HAL_GetTick+0x14>)
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	240029d4 	.word	0x240029d4

08005e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e8c:	f7ff ffee 	bl	8005e6c <HAL_GetTick>
 8005e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d005      	beq.n	8005eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <HAL_Delay+0x44>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005eaa:	bf00      	nop
 8005eac:	f7ff ffde 	bl	8005e6c <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d8f7      	bhi.n	8005eac <HAL_Delay+0x28>
  {
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	24000078 	.word	0x24000078

08005ecc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005ed0:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <HAL_GetREVID+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	0c1b      	lsrs	r3, r3, #16
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	5c001000 	.word	0x5c001000

08005ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <__NVIC_SetPriorityGrouping+0x40>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f00:	4013      	ands	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <__NVIC_SetPriorityGrouping+0x44>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f12:	4a04      	ldr	r2, [pc, #16]	@ (8005f24 <__NVIC_SetPriorityGrouping+0x40>)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	60d3      	str	r3, [r2, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000ed00 	.word	0xe000ed00
 8005f28:	05fa0000 	.word	0x05fa0000

08005f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f30:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <__NVIC_GetPriorityGrouping+0x18>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	f003 0307 	and.w	r3, r3, #7
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db0b      	blt.n	8005f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	4907      	ldr	r1, [pc, #28]	@ (8005f80 <__NVIC_EnableIRQ+0x38>)
 8005f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e100 	.word	0xe000e100

08005f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db0a      	blt.n	8005fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	490c      	ldr	r1, [pc, #48]	@ (8005fd0 <__NVIC_SetPriority+0x4c>)
 8005f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fa2:	0112      	lsls	r2, r2, #4
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fac:	e00a      	b.n	8005fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4908      	ldr	r1, [pc, #32]	@ (8005fd4 <__NVIC_SetPriority+0x50>)
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	761a      	strb	r2, [r3, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	e000e100 	.word	0xe000e100
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	@ 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f1c3 0307 	rsb	r3, r3, #7
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	bf28      	it	cs
 8005ff6:	2304      	movcs	r3, #4
 8005ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d902      	bls.n	8006008 <NVIC_EncodePriority+0x30>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3b03      	subs	r3, #3
 8006006:	e000      	b.n	800600a <NVIC_EncodePriority+0x32>
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	401a      	ands	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006020:	f04f 31ff 	mov.w	r1, #4294967295
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	43d9      	mvns	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	4313      	orrs	r3, r2
         );
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	@ 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff4c 	bl	8005ee4 <__NVIC_SetPriorityGrouping>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006062:	f7ff ff63 	bl	8005f2c <__NVIC_GetPriorityGrouping>
 8006066:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	6978      	ldr	r0, [r7, #20]
 800606e:	f7ff ffb3 	bl	8005fd8 <NVIC_EncodePriority>
 8006072:	4602      	mov	r2, r0
 8006074:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ff82 	bl	8005f84 <__NVIC_SetPriority>
}
 8006080:	bf00      	nop
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff ff56 	bl	8005f48 <__NVIC_EnableIRQ>
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80060a8:	f3bf 8f5f 	dmb	sy
}
 80060ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80060ae:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <HAL_MPU_Disable+0x28>)
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	4a06      	ldr	r2, [pc, #24]	@ (80060cc <HAL_MPU_Disable+0x28>)
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80060ba:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <HAL_MPU_Disable+0x2c>)
 80060bc:	2200      	movs	r2, #0
 80060be:	605a      	str	r2, [r3, #4]
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000ed00 	.word	0xe000ed00
 80060d0:	e000ed90 	.word	0xe000ed90

080060d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80060dc:	4a0b      	ldr	r2, [pc, #44]	@ (800610c <HAL_MPU_Enable+0x38>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80060e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <HAL_MPU_Enable+0x3c>)
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	4a09      	ldr	r2, [pc, #36]	@ (8006110 <HAL_MPU_Enable+0x3c>)
 80060ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80060f2:	f3bf 8f4f 	dsb	sy
}
 80060f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060f8:	f3bf 8f6f 	isb	sy
}
 80060fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000ed90 	.word	0xe000ed90
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	785a      	ldrb	r2, [r3, #1]
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006122:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7adb      	ldrb	r3, [r3, #11]
 8006142:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7a9b      	ldrb	r3, [r3, #10]
 800614a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800614c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7b5b      	ldrb	r3, [r3, #13]
 8006152:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006154:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7b9b      	ldrb	r3, [r3, #14]
 800615a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800615c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7bdb      	ldrb	r3, [r3, #15]
 8006162:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7a5b      	ldrb	r3, [r3, #9]
 800616a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800616c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7a1b      	ldrb	r3, [r3, #8]
 8006172:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006174:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800617c:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800617e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006180:	6113      	str	r3, [r2, #16]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000ed90 	.word	0xe000ed90

08006194 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800619c:	f7ff fe66 	bl	8005e6c <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e316      	b.n	80067da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a66      	ldr	r2, [pc, #408]	@ (800634c <HAL_DMA_Init+0x1b8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a65      	ldr	r2, [pc, #404]	@ (8006350 <HAL_DMA_Init+0x1bc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a63      	ldr	r2, [pc, #396]	@ (8006354 <HAL_DMA_Init+0x1c0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a62      	ldr	r2, [pc, #392]	@ (8006358 <HAL_DMA_Init+0x1c4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a60      	ldr	r2, [pc, #384]	@ (800635c <HAL_DMA_Init+0x1c8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a5f      	ldr	r2, [pc, #380]	@ (8006360 <HAL_DMA_Init+0x1cc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006364 <HAL_DMA_Init+0x1d0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006368 <HAL_DMA_Init+0x1d4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5a      	ldr	r2, [pc, #360]	@ (800636c <HAL_DMA_Init+0x1d8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a59      	ldr	r2, [pc, #356]	@ (8006370 <HAL_DMA_Init+0x1dc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a57      	ldr	r2, [pc, #348]	@ (8006374 <HAL_DMA_Init+0x1e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_DMA_Init+0xb8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a56      	ldr	r2, [pc, #344]	@ (8006378 <HAL_DMA_Init+0x1e4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a54      	ldr	r2, [pc, #336]	@ (800637c <HAL_DMA_Init+0x1e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_DMA_Init+0xb8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a53      	ldr	r2, [pc, #332]	@ (8006380 <HAL_DMA_Init+0x1ec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a51      	ldr	r2, [pc, #324]	@ (8006384 <HAL_DMA_Init+0x1f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a50      	ldr	r2, [pc, #320]	@ (8006388 <HAL_DMA_Init+0x1f4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Init+0xbc>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_DMA_Init+0xbe>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 813b 	beq.w	80064ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	@ (800634c <HAL_DMA_Init+0x1b8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04a      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	@ (8006350 <HAL_DMA_Init+0x1bc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d045      	beq.n	8006308 <HAL_DMA_Init+0x174>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_DMA_Init+0x1c0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d040      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_DMA_Init+0x1c4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d03b      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	@ (800635c <HAL_DMA_Init+0x1c8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d036      	beq.n	8006308 <HAL_DMA_Init+0x174>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a30      	ldr	r2, [pc, #192]	@ (8006360 <HAL_DMA_Init+0x1cc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d031      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <HAL_DMA_Init+0x1d0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02c      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <HAL_DMA_Init+0x1d4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d027      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	@ (800636c <HAL_DMA_Init+0x1d8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <HAL_DMA_Init+0x1dc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01d      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a28      	ldr	r2, [pc, #160]	@ (8006374 <HAL_DMA_Init+0x1e0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <HAL_DMA_Init+0x1e4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_DMA_Init+0x1e8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <HAL_DMA_Init+0x1ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_DMA_Init+0x1f0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	@ (8006388 <HAL_DMA_Init+0x1f4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <HAL_DMA_Init+0x186>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e007      	b.n	800632a <HAL_DMA_Init+0x196>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800632a:	e02f      	b.n	800638c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800632c:	f7ff fd9e 	bl	8005e6c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b05      	cmp	r3, #5
 8006338:	d928      	bls.n	800638c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2203      	movs	r2, #3
 8006344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e246      	b.n	80067da <HAL_DMA_Init+0x646>
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1c8      	bne.n	800632c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4b83      	ldr	r3, [pc, #524]	@ (80065b4 <HAL_DMA_Init+0x420>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d107      	bne.n	80063f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	4313      	orrs	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80063f0:	4b71      	ldr	r3, [pc, #452]	@ (80065b8 <HAL_DMA_Init+0x424>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b71      	ldr	r3, [pc, #452]	@ (80065bc <HAL_DMA_Init+0x428>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063fc:	d328      	bcc.n	8006450 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b28      	cmp	r3, #40	@ 0x28
 8006404:	d903      	bls.n	800640e <HAL_DMA_Init+0x27a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b2e      	cmp	r3, #46	@ 0x2e
 800640c:	d917      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b3e      	cmp	r3, #62	@ 0x3e
 8006414:	d903      	bls.n	800641e <HAL_DMA_Init+0x28a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b42      	cmp	r3, #66	@ 0x42
 800641c:	d90f      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b46      	cmp	r3, #70	@ 0x46
 8006424:	d903      	bls.n	800642e <HAL_DMA_Init+0x29a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b48      	cmp	r3, #72	@ 0x48
 800642c:	d907      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b4e      	cmp	r3, #78	@ 0x4e
 8006434:	d905      	bls.n	8006442 <HAL_DMA_Init+0x2ae>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b52      	cmp	r3, #82	@ 0x52
 800643c:	d801      	bhi.n	8006442 <HAL_DMA_Init+0x2ae>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_DMA_Init+0x2b0>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800644e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b04      	cmp	r3, #4
 8006478:	d117      	bne.n	80064aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f002 fcf5 	bl	8008e7c <DMA_CheckFifoParam>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2240      	movs	r2, #64	@ 0x40
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e197      	b.n	80067da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 fc30 	bl	8008d18 <DMA_CalcBaseAndBitshift>
 80064b8:	4603      	mov	r3, r0
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	223f      	movs	r2, #63	@ 0x3f
 80064c6:	409a      	lsls	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	609a      	str	r2, [r3, #8]
 80064cc:	e0cd      	b.n	800666a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3b      	ldr	r2, [pc, #236]	@ (80065c0 <HAL_DMA_Init+0x42c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a39      	ldr	r2, [pc, #228]	@ (80065c4 <HAL_DMA_Init+0x430>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a38      	ldr	r2, [pc, #224]	@ (80065c8 <HAL_DMA_Init+0x434>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <HAL_DMA_Init+0x438>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <HAL_DMA_Init+0x43c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_Init+0x38a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a33      	ldr	r2, [pc, #204]	@ (80065d4 <HAL_DMA_Init+0x440>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_Init+0x38a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a32      	ldr	r2, [pc, #200]	@ (80065d8 <HAL_DMA_Init+0x444>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_Init+0x38a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <HAL_DMA_Init+0x448>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_DMA_Init+0x38e>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_DMA_Init+0x390>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a24      	ldr	r2, [pc, #144]	@ (80065c0 <HAL_DMA_Init+0x42c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d021      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a22      	ldr	r2, [pc, #136]	@ (80065c4 <HAL_DMA_Init+0x430>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01c      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a21      	ldr	r2, [pc, #132]	@ (80065c8 <HAL_DMA_Init+0x434>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d017      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <HAL_DMA_Init+0x438>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d012      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_DMA_Init+0x43c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00d      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <HAL_DMA_Init+0x440>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d008      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_DMA_Init+0x444>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a19      	ldr	r2, [pc, #100]	@ (80065dc <HAL_DMA_Init+0x448>)
 8006576:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4b13      	ldr	r3, [pc, #76]	@ (80065e0 <HAL_DMA_Init+0x44c>)
 8006594:	4013      	ands	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d021      	beq.n	80065e4 <HAL_DMA_Init+0x450>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b80      	cmp	r3, #128	@ 0x80
 80065a6:	d102      	bne.n	80065ae <HAL_DMA_Init+0x41a>
 80065a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065ac:	e01b      	b.n	80065e6 <HAL_DMA_Init+0x452>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e019      	b.n	80065e6 <HAL_DMA_Init+0x452>
 80065b2:	bf00      	nop
 80065b4:	fe10803f 	.word	0xfe10803f
 80065b8:	5c001000 	.word	0x5c001000
 80065bc:	ffff0000 	.word	0xffff0000
 80065c0:	58025408 	.word	0x58025408
 80065c4:	5802541c 	.word	0x5802541c
 80065c8:	58025430 	.word	0x58025430
 80065cc:	58025444 	.word	0x58025444
 80065d0:	58025458 	.word	0x58025458
 80065d4:	5802546c 	.word	0x5802546c
 80065d8:	58025480 	.word	0x58025480
 80065dc:	58025494 	.word	0x58025494
 80065e0:	fffe000f 	.word	0xfffe000f
 80065e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68d2      	ldr	r2, [r2, #12]
 80065ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800660c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006614:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	4b6e      	ldr	r3, [pc, #440]	@ (80067e4 <HAL_DMA_Init+0x650>)
 800662c:	4413      	add	r3, r2
 800662e:	4a6e      	ldr	r2, [pc, #440]	@ (80067e8 <HAL_DMA_Init+0x654>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f002 fb6b 	bl	8008d18 <DMA_CalcBaseAndBitshift>
 8006642:	4603      	mov	r3, r0
 8006644:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	e008      	b.n	800666a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e0b7      	b.n	80067da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5f      	ldr	r2, [pc, #380]	@ (80067ec <HAL_DMA_Init+0x658>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d072      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5d      	ldr	r2, [pc, #372]	@ (80067f0 <HAL_DMA_Init+0x65c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d06d      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a5c      	ldr	r2, [pc, #368]	@ (80067f4 <HAL_DMA_Init+0x660>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d068      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5a      	ldr	r2, [pc, #360]	@ (80067f8 <HAL_DMA_Init+0x664>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d063      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a59      	ldr	r2, [pc, #356]	@ (80067fc <HAL_DMA_Init+0x668>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d05e      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a57      	ldr	r2, [pc, #348]	@ (8006800 <HAL_DMA_Init+0x66c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d059      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a56      	ldr	r2, [pc, #344]	@ (8006804 <HAL_DMA_Init+0x670>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d054      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a54      	ldr	r2, [pc, #336]	@ (8006808 <HAL_DMA_Init+0x674>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04f      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a53      	ldr	r2, [pc, #332]	@ (800680c <HAL_DMA_Init+0x678>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d04a      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a51      	ldr	r2, [pc, #324]	@ (8006810 <HAL_DMA_Init+0x67c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d045      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a50      	ldr	r2, [pc, #320]	@ (8006814 <HAL_DMA_Init+0x680>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d040      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4e      	ldr	r2, [pc, #312]	@ (8006818 <HAL_DMA_Init+0x684>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d03b      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4d      	ldr	r2, [pc, #308]	@ (800681c <HAL_DMA_Init+0x688>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d036      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006820 <HAL_DMA_Init+0x68c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d031      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4a      	ldr	r2, [pc, #296]	@ (8006824 <HAL_DMA_Init+0x690>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d02c      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a48      	ldr	r2, [pc, #288]	@ (8006828 <HAL_DMA_Init+0x694>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d027      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a47      	ldr	r2, [pc, #284]	@ (800682c <HAL_DMA_Init+0x698>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a45      	ldr	r2, [pc, #276]	@ (8006830 <HAL_DMA_Init+0x69c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01d      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a44      	ldr	r2, [pc, #272]	@ (8006834 <HAL_DMA_Init+0x6a0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d018      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a42      	ldr	r2, [pc, #264]	@ (8006838 <HAL_DMA_Init+0x6a4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a41      	ldr	r2, [pc, #260]	@ (800683c <HAL_DMA_Init+0x6a8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00e      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3f      	ldr	r2, [pc, #252]	@ (8006840 <HAL_DMA_Init+0x6ac>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3e      	ldr	r2, [pc, #248]	@ (8006844 <HAL_DMA_Init+0x6b0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3c      	ldr	r2, [pc, #240]	@ (8006848 <HAL_DMA_Init+0x6b4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <HAL_DMA_Init+0x5ca>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_DMA_Init+0x5cc>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d032      	beq.n	80067ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f002 fc05 	bl	8008f74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b80      	cmp	r3, #128	@ 0x80
 8006770:	d102      	bne.n	8006778 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800678c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <HAL_DMA_Init+0x624>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b08      	cmp	r3, #8
 800679c:	d80c      	bhi.n	80067b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fc82 	bl	80090a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e008      	b.n	80067ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	a7fdabf8 	.word	0xa7fdabf8
 80067e8:	cccccccd 	.word	0xcccccccd
 80067ec:	40020010 	.word	0x40020010
 80067f0:	40020028 	.word	0x40020028
 80067f4:	40020040 	.word	0x40020040
 80067f8:	40020058 	.word	0x40020058
 80067fc:	40020070 	.word	0x40020070
 8006800:	40020088 	.word	0x40020088
 8006804:	400200a0 	.word	0x400200a0
 8006808:	400200b8 	.word	0x400200b8
 800680c:	40020410 	.word	0x40020410
 8006810:	40020428 	.word	0x40020428
 8006814:	40020440 	.word	0x40020440
 8006818:	40020458 	.word	0x40020458
 800681c:	40020470 	.word	0x40020470
 8006820:	40020488 	.word	0x40020488
 8006824:	400204a0 	.word	0x400204a0
 8006828:	400204b8 	.word	0x400204b8
 800682c:	58025408 	.word	0x58025408
 8006830:	5802541c 	.word	0x5802541c
 8006834:	58025430 	.word	0x58025430
 8006838:	58025444 	.word	0x58025444
 800683c:	58025458 	.word	0x58025458
 8006840:	5802546c 	.word	0x5802546c
 8006844:	58025480 	.word	0x58025480
 8006848:	58025494 	.word	0x58025494

0800684c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e1a8      	b.n	8006bb0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a82      	ldr	r2, [pc, #520]	@ (8006a6c <HAL_DMA_DeInit+0x220>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04a      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a80      	ldr	r2, [pc, #512]	@ (8006a70 <HAL_DMA_DeInit+0x224>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d045      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7f      	ldr	r2, [pc, #508]	@ (8006a74 <HAL_DMA_DeInit+0x228>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a7d      	ldr	r2, [pc, #500]	@ (8006a78 <HAL_DMA_DeInit+0x22c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d03b      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a7c <HAL_DMA_DeInit+0x230>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d036      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a7a      	ldr	r2, [pc, #488]	@ (8006a80 <HAL_DMA_DeInit+0x234>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d031      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a79      	ldr	r2, [pc, #484]	@ (8006a84 <HAL_DMA_DeInit+0x238>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d02c      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a77      	ldr	r2, [pc, #476]	@ (8006a88 <HAL_DMA_DeInit+0x23c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d027      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a76      	ldr	r2, [pc, #472]	@ (8006a8c <HAL_DMA_DeInit+0x240>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d022      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a74      	ldr	r2, [pc, #464]	@ (8006a90 <HAL_DMA_DeInit+0x244>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01d      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a73      	ldr	r2, [pc, #460]	@ (8006a94 <HAL_DMA_DeInit+0x248>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a71      	ldr	r2, [pc, #452]	@ (8006a98 <HAL_DMA_DeInit+0x24c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a70      	ldr	r2, [pc, #448]	@ (8006a9c <HAL_DMA_DeInit+0x250>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a6e      	ldr	r2, [pc, #440]	@ (8006aa0 <HAL_DMA_DeInit+0x254>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a6d      	ldr	r2, [pc, #436]	@ (8006aa4 <HAL_DMA_DeInit+0x258>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_DeInit+0xb2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a6b      	ldr	r2, [pc, #428]	@ (8006aa8 <HAL_DMA_DeInit+0x25c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <HAL_DMA_DeInit+0xc4>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e007      	b.n	8006920 <HAL_DMA_DeInit+0xd4>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a51      	ldr	r2, [pc, #324]	@ (8006a6c <HAL_DMA_DeInit+0x220>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d04a      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a50      	ldr	r2, [pc, #320]	@ (8006a70 <HAL_DMA_DeInit+0x224>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d045      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a4e      	ldr	r2, [pc, #312]	@ (8006a74 <HAL_DMA_DeInit+0x228>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d040      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a4d      	ldr	r2, [pc, #308]	@ (8006a78 <HAL_DMA_DeInit+0x22c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d03b      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a7c <HAL_DMA_DeInit+0x230>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d036      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a4a      	ldr	r2, [pc, #296]	@ (8006a80 <HAL_DMA_DeInit+0x234>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d031      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a48      	ldr	r2, [pc, #288]	@ (8006a84 <HAL_DMA_DeInit+0x238>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a47      	ldr	r2, [pc, #284]	@ (8006a88 <HAL_DMA_DeInit+0x23c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d027      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a45      	ldr	r2, [pc, #276]	@ (8006a8c <HAL_DMA_DeInit+0x240>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a44      	ldr	r2, [pc, #272]	@ (8006a90 <HAL_DMA_DeInit+0x244>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a42      	ldr	r2, [pc, #264]	@ (8006a94 <HAL_DMA_DeInit+0x248>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a41      	ldr	r2, [pc, #260]	@ (8006a98 <HAL_DMA_DeInit+0x24c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a9c <HAL_DMA_DeInit+0x250>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa0 <HAL_DMA_DeInit+0x254>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa4 <HAL_DMA_DeInit+0x258>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_DMA_DeInit+0x174>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a3b      	ldr	r2, [pc, #236]	@ (8006aa8 <HAL_DMA_DeInit+0x25c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_DMA_DeInit+0x178>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <HAL_DMA_DeInit+0x17a>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d025      	beq.n	8006a16 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2221      	movs	r2, #33	@ 0x21
 80069f8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f002 f98c 	bl	8008d18 <DMA_CalcBaseAndBitshift>
 8006a00:	4603      	mov	r3, r0
 8006a02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	223f      	movs	r2, #63	@ 0x3f
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]
 8006a14:	e081      	b.n	8006b1a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a24      	ldr	r2, [pc, #144]	@ (8006aac <HAL_DMA_DeInit+0x260>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d022      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a22      	ldr	r2, [pc, #136]	@ (8006ab0 <HAL_DMA_DeInit+0x264>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01d      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a21      	ldr	r2, [pc, #132]	@ (8006ab4 <HAL_DMA_DeInit+0x268>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <HAL_DMA_DeInit+0x26c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1e      	ldr	r2, [pc, #120]	@ (8006abc <HAL_DMA_DeInit+0x270>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac0 <HAL_DMA_DeInit+0x274>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac4 <HAL_DMA_DeInit+0x278>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_DMA_DeInit+0x21a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a19      	ldr	r2, [pc, #100]	@ (8006ac8 <HAL_DMA_DeInit+0x27c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d132      	bne.n	8006acc <HAL_DMA_DeInit+0x280>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e031      	b.n	8006ace <HAL_DMA_DeInit+0x282>
 8006a6a:	bf00      	nop
 8006a6c:	40020010 	.word	0x40020010
 8006a70:	40020028 	.word	0x40020028
 8006a74:	40020040 	.word	0x40020040
 8006a78:	40020058 	.word	0x40020058
 8006a7c:	40020070 	.word	0x40020070
 8006a80:	40020088 	.word	0x40020088
 8006a84:	400200a0 	.word	0x400200a0
 8006a88:	400200b8 	.word	0x400200b8
 8006a8c:	40020410 	.word	0x40020410
 8006a90:	40020428 	.word	0x40020428
 8006a94:	40020440 	.word	0x40020440
 8006a98:	40020458 	.word	0x40020458
 8006a9c:	40020470 	.word	0x40020470
 8006aa0:	40020488 	.word	0x40020488
 8006aa4:	400204a0 	.word	0x400204a0
 8006aa8:	400204b8 	.word	0x400204b8
 8006aac:	58025408 	.word	0x58025408
 8006ab0:	5802541c 	.word	0x5802541c
 8006ab4:	58025430 	.word	0x58025430
 8006ab8:	58025444 	.word	0x58025444
 8006abc:	58025458 	.word	0x58025458
 8006ac0:	5802546c 	.word	0x5802546c
 8006ac4:	58025480 	.word	0x58025480
 8006ac8:	58025494 	.word	0x58025494
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d021      	beq.n	8006b16 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f002 f90c 	bl	8008d18 <DMA_CalcBaseAndBitshift>
 8006b00:	4603      	mov	r3, r0
 8006b02:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	e001      	b.n	8006b1a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e04a      	b.n	8006bb0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f002 fa2a 	bl	8008f74 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b38:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00f      	beq.n	8006b62 <HAL_DMA_DeInit+0x316>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d80b      	bhi.n	8006b62 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f002 faac 	bl	80090a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b60:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e226      	b.n	8007022 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_DMA_Start_IT+0x2a>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e21f      	b.n	8007022 <HAL_DMA_Start_IT+0x46a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	f040 820a 	bne.w	800700c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a68      	ldr	r2, [pc, #416]	@ (8006dac <HAL_DMA_Start_IT+0x1f4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a66      	ldr	r2, [pc, #408]	@ (8006db0 <HAL_DMA_Start_IT+0x1f8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a65      	ldr	r2, [pc, #404]	@ (8006db4 <HAL_DMA_Start_IT+0x1fc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a63      	ldr	r2, [pc, #396]	@ (8006db8 <HAL_DMA_Start_IT+0x200>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a62      	ldr	r2, [pc, #392]	@ (8006dbc <HAL_DMA_Start_IT+0x204>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a60      	ldr	r2, [pc, #384]	@ (8006dc0 <HAL_DMA_Start_IT+0x208>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a5f      	ldr	r2, [pc, #380]	@ (8006dc4 <HAL_DMA_Start_IT+0x20c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5d      	ldr	r2, [pc, #372]	@ (8006dc8 <HAL_DMA_Start_IT+0x210>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5c      	ldr	r2, [pc, #368]	@ (8006dcc <HAL_DMA_Start_IT+0x214>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5a      	ldr	r2, [pc, #360]	@ (8006dd0 <HAL_DMA_Start_IT+0x218>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a59      	ldr	r2, [pc, #356]	@ (8006dd4 <HAL_DMA_Start_IT+0x21c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a57      	ldr	r2, [pc, #348]	@ (8006dd8 <HAL_DMA_Start_IT+0x220>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a56      	ldr	r2, [pc, #344]	@ (8006ddc <HAL_DMA_Start_IT+0x224>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a54      	ldr	r2, [pc, #336]	@ (8006de0 <HAL_DMA_Start_IT+0x228>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a53      	ldr	r2, [pc, #332]	@ (8006de4 <HAL_DMA_Start_IT+0x22c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xee>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a51      	ldr	r2, [pc, #324]	@ (8006de8 <HAL_DMA_Start_IT+0x230>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <HAL_DMA_Start_IT+0x100>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e007      	b.n	8006cc8 <HAL_DMA_Start_IT+0x110>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 fe76 	bl	80089c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a34      	ldr	r2, [pc, #208]	@ (8006dac <HAL_DMA_Start_IT+0x1f4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d04a      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <HAL_DMA_Start_IT+0x1f8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d045      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a31      	ldr	r2, [pc, #196]	@ (8006db4 <HAL_DMA_Start_IT+0x1fc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d040      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a30      	ldr	r2, [pc, #192]	@ (8006db8 <HAL_DMA_Start_IT+0x200>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d03b      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2e      	ldr	r2, [pc, #184]	@ (8006dbc <HAL_DMA_Start_IT+0x204>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d036      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc0 <HAL_DMA_Start_IT+0x208>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d031      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc4 <HAL_DMA_Start_IT+0x20c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d02c      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <HAL_DMA_Start_IT+0x210>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d027      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a28      	ldr	r2, [pc, #160]	@ (8006dcc <HAL_DMA_Start_IT+0x214>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d022      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a27      	ldr	r2, [pc, #156]	@ (8006dd0 <HAL_DMA_Start_IT+0x218>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d01d      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a25      	ldr	r2, [pc, #148]	@ (8006dd4 <HAL_DMA_Start_IT+0x21c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d018      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a24      	ldr	r2, [pc, #144]	@ (8006dd8 <HAL_DMA_Start_IT+0x220>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a22      	ldr	r2, [pc, #136]	@ (8006ddc <HAL_DMA_Start_IT+0x224>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00e      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a21      	ldr	r2, [pc, #132]	@ (8006de0 <HAL_DMA_Start_IT+0x228>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d009      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1f      	ldr	r2, [pc, #124]	@ (8006de4 <HAL_DMA_Start_IT+0x22c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_DMA_Start_IT+0x1bc>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006de8 <HAL_DMA_Start_IT+0x230>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d101      	bne.n	8006d78 <HAL_DMA_Start_IT+0x1c0>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_DMA_Start_IT+0x1c2>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d036      	beq.n	8006dec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f023 021e 	bic.w	r2, r3, #30
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0216 	orr.w	r2, r2, #22
 8006d90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d03e      	beq.n	8006e18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0208 	orr.w	r2, r2, #8
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e035      	b.n	8006e18 <HAL_DMA_Start_IT+0x260>
 8006dac:	40020010 	.word	0x40020010
 8006db0:	40020028 	.word	0x40020028
 8006db4:	40020040 	.word	0x40020040
 8006db8:	40020058 	.word	0x40020058
 8006dbc:	40020070 	.word	0x40020070
 8006dc0:	40020088 	.word	0x40020088
 8006dc4:	400200a0 	.word	0x400200a0
 8006dc8:	400200b8 	.word	0x400200b8
 8006dcc:	40020410 	.word	0x40020410
 8006dd0:	40020428 	.word	0x40020428
 8006dd4:	40020440 	.word	0x40020440
 8006dd8:	40020458 	.word	0x40020458
 8006ddc:	40020470 	.word	0x40020470
 8006de0:	40020488 	.word	0x40020488
 8006de4:	400204a0 	.word	0x400204a0
 8006de8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 020e 	bic.w	r2, r3, #14
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 020a 	orr.w	r2, r2, #10
 8006dfe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0204 	orr.w	r2, r2, #4
 8006e16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a83      	ldr	r2, [pc, #524]	@ (800702c <HAL_DMA_Start_IT+0x474>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d072      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a82      	ldr	r2, [pc, #520]	@ (8007030 <HAL_DMA_Start_IT+0x478>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d06d      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a80      	ldr	r2, [pc, #512]	@ (8007034 <HAL_DMA_Start_IT+0x47c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d068      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7f      	ldr	r2, [pc, #508]	@ (8007038 <HAL_DMA_Start_IT+0x480>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d063      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7d      	ldr	r2, [pc, #500]	@ (800703c <HAL_DMA_Start_IT+0x484>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d05e      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8007040 <HAL_DMA_Start_IT+0x488>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d059      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7a      	ldr	r2, [pc, #488]	@ (8007044 <HAL_DMA_Start_IT+0x48c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d054      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a79      	ldr	r2, [pc, #484]	@ (8007048 <HAL_DMA_Start_IT+0x490>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04f      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a77      	ldr	r2, [pc, #476]	@ (800704c <HAL_DMA_Start_IT+0x494>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d04a      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a76      	ldr	r2, [pc, #472]	@ (8007050 <HAL_DMA_Start_IT+0x498>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d045      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a74      	ldr	r2, [pc, #464]	@ (8007054 <HAL_DMA_Start_IT+0x49c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d040      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a73      	ldr	r2, [pc, #460]	@ (8007058 <HAL_DMA_Start_IT+0x4a0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d03b      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a71      	ldr	r2, [pc, #452]	@ (800705c <HAL_DMA_Start_IT+0x4a4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d036      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a70      	ldr	r2, [pc, #448]	@ (8007060 <HAL_DMA_Start_IT+0x4a8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d031      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8007064 <HAL_DMA_Start_IT+0x4ac>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d02c      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a6d      	ldr	r2, [pc, #436]	@ (8007068 <HAL_DMA_Start_IT+0x4b0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d027      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a6b      	ldr	r2, [pc, #428]	@ (800706c <HAL_DMA_Start_IT+0x4b4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d022      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a6a      	ldr	r2, [pc, #424]	@ (8007070 <HAL_DMA_Start_IT+0x4b8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d01d      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a68      	ldr	r2, [pc, #416]	@ (8007074 <HAL_DMA_Start_IT+0x4bc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a67      	ldr	r2, [pc, #412]	@ (8007078 <HAL_DMA_Start_IT+0x4c0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a65      	ldr	r2, [pc, #404]	@ (800707c <HAL_DMA_Start_IT+0x4c4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a64      	ldr	r2, [pc, #400]	@ (8007080 <HAL_DMA_Start_IT+0x4c8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a62      	ldr	r2, [pc, #392]	@ (8007084 <HAL_DMA_Start_IT+0x4cc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_DMA_Start_IT+0x350>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a61      	ldr	r2, [pc, #388]	@ (8007088 <HAL_DMA_Start_IT+0x4d0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d101      	bne.n	8006f0c <HAL_DMA_Start_IT+0x354>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <HAL_DMA_Start_IT+0x356>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01a      	beq.n	8006f48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a37      	ldr	r2, [pc, #220]	@ (800702c <HAL_DMA_Start_IT+0x474>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d04a      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a36      	ldr	r2, [pc, #216]	@ (8007030 <HAL_DMA_Start_IT+0x478>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d045      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a34      	ldr	r2, [pc, #208]	@ (8007034 <HAL_DMA_Start_IT+0x47c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d040      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a33      	ldr	r2, [pc, #204]	@ (8007038 <HAL_DMA_Start_IT+0x480>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d03b      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a31      	ldr	r2, [pc, #196]	@ (800703c <HAL_DMA_Start_IT+0x484>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d036      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a30      	ldr	r2, [pc, #192]	@ (8007040 <HAL_DMA_Start_IT+0x488>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d031      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2e      	ldr	r2, [pc, #184]	@ (8007044 <HAL_DMA_Start_IT+0x48c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d02c      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2d      	ldr	r2, [pc, #180]	@ (8007048 <HAL_DMA_Start_IT+0x490>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d027      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800704c <HAL_DMA_Start_IT+0x494>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d022      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2a      	ldr	r2, [pc, #168]	@ (8007050 <HAL_DMA_Start_IT+0x498>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d01d      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a28      	ldr	r2, [pc, #160]	@ (8007054 <HAL_DMA_Start_IT+0x49c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a27      	ldr	r2, [pc, #156]	@ (8007058 <HAL_DMA_Start_IT+0x4a0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a25      	ldr	r2, [pc, #148]	@ (800705c <HAL_DMA_Start_IT+0x4a4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a24      	ldr	r2, [pc, #144]	@ (8007060 <HAL_DMA_Start_IT+0x4a8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	@ (8007064 <HAL_DMA_Start_IT+0x4ac>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_DMA_Start_IT+0x430>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a21      	ldr	r2, [pc, #132]	@ (8007068 <HAL_DMA_Start_IT+0x4b0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d108      	bne.n	8006ffa <HAL_DMA_Start_IT+0x442>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e012      	b.n	8007020 <HAL_DMA_Start_IT+0x468>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e009      	b.n	8007020 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007012:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8
 800706c:	58025408 	.word	0x58025408
 8007070:	5802541c 	.word	0x5802541c
 8007074:	58025430 	.word	0x58025430
 8007078:	58025444 	.word	0x58025444
 800707c:	58025458 	.word	0x58025458
 8007080:	5802546c 	.word	0x5802546c
 8007084:	58025480 	.word	0x58025480
 8007088:	58025494 	.word	0x58025494

0800708c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007094:	f7fe feea 	bl	8005e6c <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e2dc      	b.n	800765e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d008      	beq.n	80070c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2280      	movs	r2, #128	@ 0x80
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e2cd      	b.n	800765e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a76      	ldr	r2, [pc, #472]	@ (80072a0 <HAL_DMA_Abort+0x214>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d04a      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a74      	ldr	r2, [pc, #464]	@ (80072a4 <HAL_DMA_Abort+0x218>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d045      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a73      	ldr	r2, [pc, #460]	@ (80072a8 <HAL_DMA_Abort+0x21c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d040      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a71      	ldr	r2, [pc, #452]	@ (80072ac <HAL_DMA_Abort+0x220>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d03b      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a70      	ldr	r2, [pc, #448]	@ (80072b0 <HAL_DMA_Abort+0x224>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d036      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a6e      	ldr	r2, [pc, #440]	@ (80072b4 <HAL_DMA_Abort+0x228>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d031      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a6d      	ldr	r2, [pc, #436]	@ (80072b8 <HAL_DMA_Abort+0x22c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d02c      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6b      	ldr	r2, [pc, #428]	@ (80072bc <HAL_DMA_Abort+0x230>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d027      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6a      	ldr	r2, [pc, #424]	@ (80072c0 <HAL_DMA_Abort+0x234>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d022      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a68      	ldr	r2, [pc, #416]	@ (80072c4 <HAL_DMA_Abort+0x238>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01d      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a67      	ldr	r2, [pc, #412]	@ (80072c8 <HAL_DMA_Abort+0x23c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d018      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a65      	ldr	r2, [pc, #404]	@ (80072cc <HAL_DMA_Abort+0x240>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a64      	ldr	r2, [pc, #400]	@ (80072d0 <HAL_DMA_Abort+0x244>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00e      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a62      	ldr	r2, [pc, #392]	@ (80072d4 <HAL_DMA_Abort+0x248>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d009      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a61      	ldr	r2, [pc, #388]	@ (80072d8 <HAL_DMA_Abort+0x24c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d004      	beq.n	8007162 <HAL_DMA_Abort+0xd6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5f      	ldr	r2, [pc, #380]	@ (80072dc <HAL_DMA_Abort+0x250>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d101      	bne.n	8007166 <HAL_DMA_Abort+0xda>
 8007162:	2301      	movs	r3, #1
 8007164:	e000      	b.n	8007168 <HAL_DMA_Abort+0xdc>
 8007166:	2300      	movs	r3, #0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 021e 	bic.w	r2, r2, #30
 800717a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695a      	ldr	r2, [r3, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800718a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e00a      	b.n	80071aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 020e 	bic.w	r2, r2, #14
 80071a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3c      	ldr	r2, [pc, #240]	@ (80072a0 <HAL_DMA_Abort+0x214>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d072      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a3a      	ldr	r2, [pc, #232]	@ (80072a4 <HAL_DMA_Abort+0x218>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d06d      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a39      	ldr	r2, [pc, #228]	@ (80072a8 <HAL_DMA_Abort+0x21c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d068      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a37      	ldr	r2, [pc, #220]	@ (80072ac <HAL_DMA_Abort+0x220>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d063      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a36      	ldr	r2, [pc, #216]	@ (80072b0 <HAL_DMA_Abort+0x224>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d05e      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a34      	ldr	r2, [pc, #208]	@ (80072b4 <HAL_DMA_Abort+0x228>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d059      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a33      	ldr	r2, [pc, #204]	@ (80072b8 <HAL_DMA_Abort+0x22c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d054      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a31      	ldr	r2, [pc, #196]	@ (80072bc <HAL_DMA_Abort+0x230>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04f      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a30      	ldr	r2, [pc, #192]	@ (80072c0 <HAL_DMA_Abort+0x234>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2e      	ldr	r2, [pc, #184]	@ (80072c4 <HAL_DMA_Abort+0x238>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2d      	ldr	r2, [pc, #180]	@ (80072c8 <HAL_DMA_Abort+0x23c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2b      	ldr	r2, [pc, #172]	@ (80072cc <HAL_DMA_Abort+0x240>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2a      	ldr	r2, [pc, #168]	@ (80072d0 <HAL_DMA_Abort+0x244>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a28      	ldr	r2, [pc, #160]	@ (80072d4 <HAL_DMA_Abort+0x248>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a27      	ldr	r2, [pc, #156]	@ (80072d8 <HAL_DMA_Abort+0x24c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a25      	ldr	r2, [pc, #148]	@ (80072dc <HAL_DMA_Abort+0x250>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a24      	ldr	r2, [pc, #144]	@ (80072e0 <HAL_DMA_Abort+0x254>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a22      	ldr	r2, [pc, #136]	@ (80072e4 <HAL_DMA_Abort+0x258>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a21      	ldr	r2, [pc, #132]	@ (80072e8 <HAL_DMA_Abort+0x25c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1f      	ldr	r2, [pc, #124]	@ (80072ec <HAL_DMA_Abort+0x260>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1e      	ldr	r2, [pc, #120]	@ (80072f0 <HAL_DMA_Abort+0x264>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1c      	ldr	r2, [pc, #112]	@ (80072f4 <HAL_DMA_Abort+0x268>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <HAL_DMA_Abort+0x26c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_DMA_Abort+0x20e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a19      	ldr	r2, [pc, #100]	@ (80072fc <HAL_DMA_Abort+0x270>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d132      	bne.n	8007300 <HAL_DMA_Abort+0x274>
 800729a:	2301      	movs	r3, #1
 800729c:	e031      	b.n	8007302 <HAL_DMA_Abort+0x276>
 800729e:	bf00      	nop
 80072a0:	40020010 	.word	0x40020010
 80072a4:	40020028 	.word	0x40020028
 80072a8:	40020040 	.word	0x40020040
 80072ac:	40020058 	.word	0x40020058
 80072b0:	40020070 	.word	0x40020070
 80072b4:	40020088 	.word	0x40020088
 80072b8:	400200a0 	.word	0x400200a0
 80072bc:	400200b8 	.word	0x400200b8
 80072c0:	40020410 	.word	0x40020410
 80072c4:	40020428 	.word	0x40020428
 80072c8:	40020440 	.word	0x40020440
 80072cc:	40020458 	.word	0x40020458
 80072d0:	40020470 	.word	0x40020470
 80072d4:	40020488 	.word	0x40020488
 80072d8:	400204a0 	.word	0x400204a0
 80072dc:	400204b8 	.word	0x400204b8
 80072e0:	58025408 	.word	0x58025408
 80072e4:	5802541c 	.word	0x5802541c
 80072e8:	58025430 	.word	0x58025430
 80072ec:	58025444 	.word	0x58025444
 80072f0:	58025458 	.word	0x58025458
 80072f4:	5802546c 	.word	0x5802546c
 80072f8:	58025480 	.word	0x58025480
 80072fc:	58025494 	.word	0x58025494
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007314:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a6d      	ldr	r2, [pc, #436]	@ (80074d0 <HAL_DMA_Abort+0x444>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d04a      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a6b      	ldr	r2, [pc, #428]	@ (80074d4 <HAL_DMA_Abort+0x448>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d045      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6a      	ldr	r2, [pc, #424]	@ (80074d8 <HAL_DMA_Abort+0x44c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d040      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a68      	ldr	r2, [pc, #416]	@ (80074dc <HAL_DMA_Abort+0x450>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d03b      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a67      	ldr	r2, [pc, #412]	@ (80074e0 <HAL_DMA_Abort+0x454>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d036      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a65      	ldr	r2, [pc, #404]	@ (80074e4 <HAL_DMA_Abort+0x458>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d031      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a64      	ldr	r2, [pc, #400]	@ (80074e8 <HAL_DMA_Abort+0x45c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d02c      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a62      	ldr	r2, [pc, #392]	@ (80074ec <HAL_DMA_Abort+0x460>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d027      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a61      	ldr	r2, [pc, #388]	@ (80074f0 <HAL_DMA_Abort+0x464>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d022      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5f      	ldr	r2, [pc, #380]	@ (80074f4 <HAL_DMA_Abort+0x468>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01d      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a5e      	ldr	r2, [pc, #376]	@ (80074f8 <HAL_DMA_Abort+0x46c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d018      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5c      	ldr	r2, [pc, #368]	@ (80074fc <HAL_DMA_Abort+0x470>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d013      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5b      	ldr	r2, [pc, #364]	@ (8007500 <HAL_DMA_Abort+0x474>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00e      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a59      	ldr	r2, [pc, #356]	@ (8007504 <HAL_DMA_Abort+0x478>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d009      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a58      	ldr	r2, [pc, #352]	@ (8007508 <HAL_DMA_Abort+0x47c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <HAL_DMA_Abort+0x32a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a56      	ldr	r2, [pc, #344]	@ (800750c <HAL_DMA_Abort+0x480>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d108      	bne.n	80073c8 <HAL_DMA_Abort+0x33c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e007      	b.n	80073d8 <HAL_DMA_Abort+0x34c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0201 	bic.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073d8:	e013      	b.n	8007402 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073da:	f7fe fd47 	bl	8005e6c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d90c      	bls.n	8007402 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2203      	movs	r2, #3
 80073f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e12d      	b.n	800765e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2f      	ldr	r2, [pc, #188]	@ (80074d0 <HAL_DMA_Abort+0x444>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d04a      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2d      	ldr	r2, [pc, #180]	@ (80074d4 <HAL_DMA_Abort+0x448>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d045      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2c      	ldr	r2, [pc, #176]	@ (80074d8 <HAL_DMA_Abort+0x44c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d040      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2a      	ldr	r2, [pc, #168]	@ (80074dc <HAL_DMA_Abort+0x450>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d03b      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a29      	ldr	r2, [pc, #164]	@ (80074e0 <HAL_DMA_Abort+0x454>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d036      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a27      	ldr	r2, [pc, #156]	@ (80074e4 <HAL_DMA_Abort+0x458>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d031      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a26      	ldr	r2, [pc, #152]	@ (80074e8 <HAL_DMA_Abort+0x45c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d02c      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a24      	ldr	r2, [pc, #144]	@ (80074ec <HAL_DMA_Abort+0x460>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d027      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a23      	ldr	r2, [pc, #140]	@ (80074f0 <HAL_DMA_Abort+0x464>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a21      	ldr	r2, [pc, #132]	@ (80074f4 <HAL_DMA_Abort+0x468>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a20      	ldr	r2, [pc, #128]	@ (80074f8 <HAL_DMA_Abort+0x46c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1e      	ldr	r2, [pc, #120]	@ (80074fc <HAL_DMA_Abort+0x470>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1d      	ldr	r2, [pc, #116]	@ (8007500 <HAL_DMA_Abort+0x474>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1b      	ldr	r2, [pc, #108]	@ (8007504 <HAL_DMA_Abort+0x478>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1a      	ldr	r2, [pc, #104]	@ (8007508 <HAL_DMA_Abort+0x47c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_DMA_Abort+0x422>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a18      	ldr	r2, [pc, #96]	@ (800750c <HAL_DMA_Abort+0x480>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <HAL_DMA_Abort+0x426>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_DMA_Abort+0x428>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d02b      	beq.n	8007510 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c2:	f003 031f 	and.w	r3, r3, #31
 80074c6:	223f      	movs	r2, #63	@ 0x3f
 80074c8:	409a      	lsls	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	609a      	str	r2, [r3, #8]
 80074ce:	e02a      	b.n	8007526 <HAL_DMA_Abort+0x49a>
 80074d0:	40020010 	.word	0x40020010
 80074d4:	40020028 	.word	0x40020028
 80074d8:	40020040 	.word	0x40020040
 80074dc:	40020058 	.word	0x40020058
 80074e0:	40020070 	.word	0x40020070
 80074e4:	40020088 	.word	0x40020088
 80074e8:	400200a0 	.word	0x400200a0
 80074ec:	400200b8 	.word	0x400200b8
 80074f0:	40020410 	.word	0x40020410
 80074f4:	40020428 	.word	0x40020428
 80074f8:	40020440 	.word	0x40020440
 80074fc:	40020458 	.word	0x40020458
 8007500:	40020470 	.word	0x40020470
 8007504:	40020488 	.word	0x40020488
 8007508:	400204a0 	.word	0x400204a0
 800750c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007514:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	2201      	movs	r2, #1
 8007520:	409a      	lsls	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4f      	ldr	r2, [pc, #316]	@ (8007668 <HAL_DMA_Abort+0x5dc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d072      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a4d      	ldr	r2, [pc, #308]	@ (800766c <HAL_DMA_Abort+0x5e0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d06d      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4c      	ldr	r2, [pc, #304]	@ (8007670 <HAL_DMA_Abort+0x5e4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d068      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a4a      	ldr	r2, [pc, #296]	@ (8007674 <HAL_DMA_Abort+0x5e8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d063      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a49      	ldr	r2, [pc, #292]	@ (8007678 <HAL_DMA_Abort+0x5ec>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d05e      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a47      	ldr	r2, [pc, #284]	@ (800767c <HAL_DMA_Abort+0x5f0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d059      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a46      	ldr	r2, [pc, #280]	@ (8007680 <HAL_DMA_Abort+0x5f4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d054      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a44      	ldr	r2, [pc, #272]	@ (8007684 <HAL_DMA_Abort+0x5f8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d04f      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a43      	ldr	r2, [pc, #268]	@ (8007688 <HAL_DMA_Abort+0x5fc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d04a      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a41      	ldr	r2, [pc, #260]	@ (800768c <HAL_DMA_Abort+0x600>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d045      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a40      	ldr	r2, [pc, #256]	@ (8007690 <HAL_DMA_Abort+0x604>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d040      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3e      	ldr	r2, [pc, #248]	@ (8007694 <HAL_DMA_Abort+0x608>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d03b      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007698 <HAL_DMA_Abort+0x60c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d036      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3b      	ldr	r2, [pc, #236]	@ (800769c <HAL_DMA_Abort+0x610>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d031      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3a      	ldr	r2, [pc, #232]	@ (80076a0 <HAL_DMA_Abort+0x614>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d02c      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a38      	ldr	r2, [pc, #224]	@ (80076a4 <HAL_DMA_Abort+0x618>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d027      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a37      	ldr	r2, [pc, #220]	@ (80076a8 <HAL_DMA_Abort+0x61c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d022      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <HAL_DMA_Abort+0x620>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01d      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <HAL_DMA_Abort+0x624>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d018      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a32      	ldr	r2, [pc, #200]	@ (80076b4 <HAL_DMA_Abort+0x628>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a31      	ldr	r2, [pc, #196]	@ (80076b8 <HAL_DMA_Abort+0x62c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2f      	ldr	r2, [pc, #188]	@ (80076bc <HAL_DMA_Abort+0x630>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2e      	ldr	r2, [pc, #184]	@ (80076c0 <HAL_DMA_Abort+0x634>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_DMA_Abort+0x58a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2c      	ldr	r2, [pc, #176]	@ (80076c4 <HAL_DMA_Abort+0x638>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_DMA_Abort+0x58e>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <HAL_DMA_Abort+0x590>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007628:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007640:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800764a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40020010 	.word	0x40020010
 800766c:	40020028 	.word	0x40020028
 8007670:	40020040 	.word	0x40020040
 8007674:	40020058 	.word	0x40020058
 8007678:	40020070 	.word	0x40020070
 800767c:	40020088 	.word	0x40020088
 8007680:	400200a0 	.word	0x400200a0
 8007684:	400200b8 	.word	0x400200b8
 8007688:	40020410 	.word	0x40020410
 800768c:	40020428 	.word	0x40020428
 8007690:	40020440 	.word	0x40020440
 8007694:	40020458 	.word	0x40020458
 8007698:	40020470 	.word	0x40020470
 800769c:	40020488 	.word	0x40020488
 80076a0:	400204a0 	.word	0x400204a0
 80076a4:	400204b8 	.word	0x400204b8
 80076a8:	58025408 	.word	0x58025408
 80076ac:	5802541c 	.word	0x5802541c
 80076b0:	58025430 	.word	0x58025430
 80076b4:	58025444 	.word	0x58025444
 80076b8:	58025458 	.word	0x58025458
 80076bc:	5802546c 	.word	0x5802546c
 80076c0:	58025480 	.word	0x58025480
 80076c4:	58025494 	.word	0x58025494

080076c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e237      	b.n	8007b4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d004      	beq.n	80076f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2280      	movs	r2, #128	@ 0x80
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e22c      	b.n	8007b4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007868 <HAL_DMA_Abort_IT+0x1a0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d04a      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a5b      	ldr	r2, [pc, #364]	@ (800786c <HAL_DMA_Abort_IT+0x1a4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d045      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a59      	ldr	r2, [pc, #356]	@ (8007870 <HAL_DMA_Abort_IT+0x1a8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d040      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a58      	ldr	r2, [pc, #352]	@ (8007874 <HAL_DMA_Abort_IT+0x1ac>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d03b      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a56      	ldr	r2, [pc, #344]	@ (8007878 <HAL_DMA_Abort_IT+0x1b0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d036      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a55      	ldr	r2, [pc, #340]	@ (800787c <HAL_DMA_Abort_IT+0x1b4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d031      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a53      	ldr	r2, [pc, #332]	@ (8007880 <HAL_DMA_Abort_IT+0x1b8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d02c      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a52      	ldr	r2, [pc, #328]	@ (8007884 <HAL_DMA_Abort_IT+0x1bc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d027      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a50      	ldr	r2, [pc, #320]	@ (8007888 <HAL_DMA_Abort_IT+0x1c0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d022      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4f      	ldr	r2, [pc, #316]	@ (800788c <HAL_DMA_Abort_IT+0x1c4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d01d      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a4d      	ldr	r2, [pc, #308]	@ (8007890 <HAL_DMA_Abort_IT+0x1c8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d018      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a4c      	ldr	r2, [pc, #304]	@ (8007894 <HAL_DMA_Abort_IT+0x1cc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a4a      	ldr	r2, [pc, #296]	@ (8007898 <HAL_DMA_Abort_IT+0x1d0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00e      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a49      	ldr	r2, [pc, #292]	@ (800789c <HAL_DMA_Abort_IT+0x1d4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d009      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a47      	ldr	r2, [pc, #284]	@ (80078a0 <HAL_DMA_Abort_IT+0x1d8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_DMA_Abort_IT+0xc8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a46      	ldr	r2, [pc, #280]	@ (80078a4 <HAL_DMA_Abort_IT+0x1dc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d101      	bne.n	8007794 <HAL_DMA_Abort_IT+0xcc>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <HAL_DMA_Abort_IT+0xce>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8086 	beq.w	80078a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2204      	movs	r2, #4
 80077a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007868 <HAL_DMA_Abort_IT+0x1a0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d04a      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2e      	ldr	r2, [pc, #184]	@ (800786c <HAL_DMA_Abort_IT+0x1a4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d045      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007870 <HAL_DMA_Abort_IT+0x1a8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d040      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007874 <HAL_DMA_Abort_IT+0x1ac>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d03b      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a29      	ldr	r2, [pc, #164]	@ (8007878 <HAL_DMA_Abort_IT+0x1b0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d036      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a28      	ldr	r2, [pc, #160]	@ (800787c <HAL_DMA_Abort_IT+0x1b4>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d031      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a26      	ldr	r2, [pc, #152]	@ (8007880 <HAL_DMA_Abort_IT+0x1b8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02c      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a25      	ldr	r2, [pc, #148]	@ (8007884 <HAL_DMA_Abort_IT+0x1bc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d027      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a23      	ldr	r2, [pc, #140]	@ (8007888 <HAL_DMA_Abort_IT+0x1c0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d022      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a22      	ldr	r2, [pc, #136]	@ (800788c <HAL_DMA_Abort_IT+0x1c4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d01d      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <HAL_DMA_Abort_IT+0x1c8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d018      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <HAL_DMA_Abort_IT+0x1cc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <HAL_DMA_Abort_IT+0x1d0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00e      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1c      	ldr	r2, [pc, #112]	@ (800789c <HAL_DMA_Abort_IT+0x1d4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1a      	ldr	r2, [pc, #104]	@ (80078a0 <HAL_DMA_Abort_IT+0x1d8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_DMA_Abort_IT+0x17c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a19      	ldr	r2, [pc, #100]	@ (80078a4 <HAL_DMA_Abort_IT+0x1dc>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d108      	bne.n	8007856 <HAL_DMA_Abort_IT+0x18e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e178      	b.n	8007b48 <HAL_DMA_Abort_IT+0x480>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0201 	bic.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e16f      	b.n	8007b48 <HAL_DMA_Abort_IT+0x480>
 8007868:	40020010 	.word	0x40020010
 800786c:	40020028 	.word	0x40020028
 8007870:	40020040 	.word	0x40020040
 8007874:	40020058 	.word	0x40020058
 8007878:	40020070 	.word	0x40020070
 800787c:	40020088 	.word	0x40020088
 8007880:	400200a0 	.word	0x400200a0
 8007884:	400200b8 	.word	0x400200b8
 8007888:	40020410 	.word	0x40020410
 800788c:	40020428 	.word	0x40020428
 8007890:	40020440 	.word	0x40020440
 8007894:	40020458 	.word	0x40020458
 8007898:	40020470 	.word	0x40020470
 800789c:	40020488 	.word	0x40020488
 80078a0:	400204a0 	.word	0x400204a0
 80078a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 020e 	bic.w	r2, r2, #14
 80078b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6c      	ldr	r2, [pc, #432]	@ (8007a70 <HAL_DMA_Abort_IT+0x3a8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d04a      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6b      	ldr	r2, [pc, #428]	@ (8007a74 <HAL_DMA_Abort_IT+0x3ac>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d045      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a69      	ldr	r2, [pc, #420]	@ (8007a78 <HAL_DMA_Abort_IT+0x3b0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d040      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a68      	ldr	r2, [pc, #416]	@ (8007a7c <HAL_DMA_Abort_IT+0x3b4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d03b      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a66      	ldr	r2, [pc, #408]	@ (8007a80 <HAL_DMA_Abort_IT+0x3b8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d036      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a65      	ldr	r2, [pc, #404]	@ (8007a84 <HAL_DMA_Abort_IT+0x3bc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d031      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a63      	ldr	r2, [pc, #396]	@ (8007a88 <HAL_DMA_Abort_IT+0x3c0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d02c      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a62      	ldr	r2, [pc, #392]	@ (8007a8c <HAL_DMA_Abort_IT+0x3c4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d027      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a60      	ldr	r2, [pc, #384]	@ (8007a90 <HAL_DMA_Abort_IT+0x3c8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d022      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a5f      	ldr	r2, [pc, #380]	@ (8007a94 <HAL_DMA_Abort_IT+0x3cc>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d01d      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a5d      	ldr	r2, [pc, #372]	@ (8007a98 <HAL_DMA_Abort_IT+0x3d0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d018      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a5c      	ldr	r2, [pc, #368]	@ (8007a9c <HAL_DMA_Abort_IT+0x3d4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a5a      	ldr	r2, [pc, #360]	@ (8007aa0 <HAL_DMA_Abort_IT+0x3d8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a59      	ldr	r2, [pc, #356]	@ (8007aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a57      	ldr	r2, [pc, #348]	@ (8007aa8 <HAL_DMA_Abort_IT+0x3e0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_DMA_Abort_IT+0x290>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a56      	ldr	r2, [pc, #344]	@ (8007aac <HAL_DMA_Abort_IT+0x3e4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d108      	bne.n	800796a <HAL_DMA_Abort_IT+0x2a2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0201 	bic.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e007      	b.n	800797a <HAL_DMA_Abort_IT+0x2b2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0201 	bic.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a70 <HAL_DMA_Abort_IT+0x3a8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d072      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a3a      	ldr	r2, [pc, #232]	@ (8007a74 <HAL_DMA_Abort_IT+0x3ac>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d06d      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a39      	ldr	r2, [pc, #228]	@ (8007a78 <HAL_DMA_Abort_IT+0x3b0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d068      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a37      	ldr	r2, [pc, #220]	@ (8007a7c <HAL_DMA_Abort_IT+0x3b4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d063      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a36      	ldr	r2, [pc, #216]	@ (8007a80 <HAL_DMA_Abort_IT+0x3b8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d05e      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a34      	ldr	r2, [pc, #208]	@ (8007a84 <HAL_DMA_Abort_IT+0x3bc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d059      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a33      	ldr	r2, [pc, #204]	@ (8007a88 <HAL_DMA_Abort_IT+0x3c0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d054      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a31      	ldr	r2, [pc, #196]	@ (8007a8c <HAL_DMA_Abort_IT+0x3c4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d04f      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a30      	ldr	r2, [pc, #192]	@ (8007a90 <HAL_DMA_Abort_IT+0x3c8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d04a      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a94 <HAL_DMA_Abort_IT+0x3cc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d045      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <HAL_DMA_Abort_IT+0x3d0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d040      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2b      	ldr	r2, [pc, #172]	@ (8007a9c <HAL_DMA_Abort_IT+0x3d4>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d03b      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <HAL_DMA_Abort_IT+0x3d8>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d036      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a28      	ldr	r2, [pc, #160]	@ (8007aa4 <HAL_DMA_Abort_IT+0x3dc>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d031      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a27      	ldr	r2, [pc, #156]	@ (8007aa8 <HAL_DMA_Abort_IT+0x3e0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d02c      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a25      	ldr	r2, [pc, #148]	@ (8007aac <HAL_DMA_Abort_IT+0x3e4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d027      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a24      	ldr	r2, [pc, #144]	@ (8007ab0 <HAL_DMA_Abort_IT+0x3e8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d022      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	@ (8007ab4 <HAL_DMA_Abort_IT+0x3ec>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01d      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	@ (8007ab8 <HAL_DMA_Abort_IT+0x3f0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d018      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <HAL_DMA_Abort_IT+0x3f4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d013      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac0 <HAL_DMA_Abort_IT+0x3f8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac4 <HAL_DMA_Abort_IT+0x3fc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d009      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <HAL_DMA_Abort_IT+0x400>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_DMA_Abort_IT+0x3a2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <HAL_DMA_Abort_IT+0x404>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d132      	bne.n	8007ad0 <HAL_DMA_Abort_IT+0x408>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e031      	b.n	8007ad2 <HAL_DMA_Abort_IT+0x40a>
 8007a6e:	bf00      	nop
 8007a70:	40020010 	.word	0x40020010
 8007a74:	40020028 	.word	0x40020028
 8007a78:	40020040 	.word	0x40020040
 8007a7c:	40020058 	.word	0x40020058
 8007a80:	40020070 	.word	0x40020070
 8007a84:	40020088 	.word	0x40020088
 8007a88:	400200a0 	.word	0x400200a0
 8007a8c:	400200b8 	.word	0x400200b8
 8007a90:	40020410 	.word	0x40020410
 8007a94:	40020428 	.word	0x40020428
 8007a98:	40020440 	.word	0x40020440
 8007a9c:	40020458 	.word	0x40020458
 8007aa0:	40020470 	.word	0x40020470
 8007aa4:	40020488 	.word	0x40020488
 8007aa8:	400204a0 	.word	0x400204a0
 8007aac:	400204b8 	.word	0x400204b8
 8007ab0:	58025408 	.word	0x58025408
 8007ab4:	5802541c 	.word	0x5802541c
 8007ab8:	58025430 	.word	0x58025430
 8007abc:	58025444 	.word	0x58025444
 8007ac0:	58025458 	.word	0x58025458
 8007ac4:	5802546c 	.word	0x5802546c
 8007ac8:	58025480 	.word	0x58025480
 8007acc:	58025494 	.word	0x58025494
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d028      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ae4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2201      	movs	r2, #1
 8007af6:	409a      	lsls	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007b04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop

08007b54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	@ 0x28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b60:	4b67      	ldr	r3, [pc, #412]	@ (8007d00 <HAL_DMA_IRQHandler+0x1ac>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a67      	ldr	r2, [pc, #412]	@ (8007d04 <HAL_DMA_IRQHandler+0x1b0>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	0a9b      	lsrs	r3, r3, #10
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8007d08 <HAL_DMA_IRQHandler+0x1b4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d04a      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a5d      	ldr	r2, [pc, #372]	@ (8007d0c <HAL_DMA_IRQHandler+0x1b8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d045      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007d10 <HAL_DMA_IRQHandler+0x1bc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d040      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8007d14 <HAL_DMA_IRQHandler+0x1c0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d03b      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a59      	ldr	r2, [pc, #356]	@ (8007d18 <HAL_DMA_IRQHandler+0x1c4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d036      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a57      	ldr	r2, [pc, #348]	@ (8007d1c <HAL_DMA_IRQHandler+0x1c8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d031      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a56      	ldr	r2, [pc, #344]	@ (8007d20 <HAL_DMA_IRQHandler+0x1cc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d02c      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a54      	ldr	r2, [pc, #336]	@ (8007d24 <HAL_DMA_IRQHandler+0x1d0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d027      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a53      	ldr	r2, [pc, #332]	@ (8007d28 <HAL_DMA_IRQHandler+0x1d4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d022      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a51      	ldr	r2, [pc, #324]	@ (8007d2c <HAL_DMA_IRQHandler+0x1d8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d01d      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a50      	ldr	r2, [pc, #320]	@ (8007d30 <HAL_DMA_IRQHandler+0x1dc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d018      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8007d34 <HAL_DMA_IRQHandler+0x1e0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a4d      	ldr	r2, [pc, #308]	@ (8007d38 <HAL_DMA_IRQHandler+0x1e4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00e      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8007d3c <HAL_DMA_IRQHandler+0x1e8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d009      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a4a      	ldr	r2, [pc, #296]	@ (8007d40 <HAL_DMA_IRQHandler+0x1ec>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_DMA_IRQHandler+0xd2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a48      	ldr	r2, [pc, #288]	@ (8007d44 <HAL_DMA_IRQHandler+0x1f0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d101      	bne.n	8007c2a <HAL_DMA_IRQHandler+0xd6>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e000      	b.n	8007c2c <HAL_DMA_IRQHandler+0xd8>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 842b 	beq.w	8008488 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	409a      	lsls	r2, r3
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a2 	beq.w	8007d8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007d08 <HAL_DMA_IRQHandler+0x1b4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d04a      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2d      	ldr	r2, [pc, #180]	@ (8007d0c <HAL_DMA_IRQHandler+0x1b8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d045      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2b      	ldr	r2, [pc, #172]	@ (8007d10 <HAL_DMA_IRQHandler+0x1bc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d040      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007d14 <HAL_DMA_IRQHandler+0x1c0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d03b      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a28      	ldr	r2, [pc, #160]	@ (8007d18 <HAL_DMA_IRQHandler+0x1c4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d036      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a27      	ldr	r2, [pc, #156]	@ (8007d1c <HAL_DMA_IRQHandler+0x1c8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d031      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a25      	ldr	r2, [pc, #148]	@ (8007d20 <HAL_DMA_IRQHandler+0x1cc>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d02c      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a24      	ldr	r2, [pc, #144]	@ (8007d24 <HAL_DMA_IRQHandler+0x1d0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d027      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a22      	ldr	r2, [pc, #136]	@ (8007d28 <HAL_DMA_IRQHandler+0x1d4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d022      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a21      	ldr	r2, [pc, #132]	@ (8007d2c <HAL_DMA_IRQHandler+0x1d8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d01d      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d30 <HAL_DMA_IRQHandler+0x1dc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d018      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <HAL_DMA_IRQHandler+0x1e0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d013      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d38 <HAL_DMA_IRQHandler+0x1e4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1b      	ldr	r2, [pc, #108]	@ (8007d3c <HAL_DMA_IRQHandler+0x1e8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d009      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <HAL_DMA_IRQHandler+0x1ec>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_DMA_IRQHandler+0x194>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a18      	ldr	r2, [pc, #96]	@ (8007d44 <HAL_DMA_IRQHandler+0x1f0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d12f      	bne.n	8007d48 <HAL_DMA_IRQHandler+0x1f4>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bf14      	ite	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	2300      	moveq	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	e02e      	b.n	8007d5c <HAL_DMA_IRQHandler+0x208>
 8007cfe:	bf00      	nop
 8007d00:	24000054 	.word	0x24000054
 8007d04:	1b4e81b5 	.word	0x1b4e81b5
 8007d08:	40020010 	.word	0x40020010
 8007d0c:	40020028 	.word	0x40020028
 8007d10:	40020040 	.word	0x40020040
 8007d14:	40020058 	.word	0x40020058
 8007d18:	40020070 	.word	0x40020070
 8007d1c:	40020088 	.word	0x40020088
 8007d20:	400200a0 	.word	0x400200a0
 8007d24:	400200b8 	.word	0x400200b8
 8007d28:	40020410 	.word	0x40020410
 8007d2c:	40020428 	.word	0x40020428
 8007d30:	40020440 	.word	0x40020440
 8007d34:	40020458 	.word	0x40020458
 8007d38:	40020470 	.word	0x40020470
 8007d3c:	40020488 	.word	0x40020488
 8007d40:	400204a0 	.word	0x400204a0
 8007d44:	400204b8 	.word	0x400204b8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d015      	beq.n	8007d8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0204 	bic.w	r2, r2, #4
 8007d6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d74:	f003 031f 	and.w	r3, r3, #31
 8007d78:	2208      	movs	r2, #8
 8007d7a:	409a      	lsls	r2, r3
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d84:	f043 0201 	orr.w	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06e      	beq.n	8007e80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a69      	ldr	r2, [pc, #420]	@ (8007f4c <HAL_DMA_IRQHandler+0x3f8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d04a      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a67      	ldr	r2, [pc, #412]	@ (8007f50 <HAL_DMA_IRQHandler+0x3fc>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d045      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a66      	ldr	r2, [pc, #408]	@ (8007f54 <HAL_DMA_IRQHandler+0x400>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d040      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a64      	ldr	r2, [pc, #400]	@ (8007f58 <HAL_DMA_IRQHandler+0x404>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d03b      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a63      	ldr	r2, [pc, #396]	@ (8007f5c <HAL_DMA_IRQHandler+0x408>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d036      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a61      	ldr	r2, [pc, #388]	@ (8007f60 <HAL_DMA_IRQHandler+0x40c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d031      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a60      	ldr	r2, [pc, #384]	@ (8007f64 <HAL_DMA_IRQHandler+0x410>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d02c      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a5e      	ldr	r2, [pc, #376]	@ (8007f68 <HAL_DMA_IRQHandler+0x414>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d027      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a5d      	ldr	r2, [pc, #372]	@ (8007f6c <HAL_DMA_IRQHandler+0x418>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d022      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a5b      	ldr	r2, [pc, #364]	@ (8007f70 <HAL_DMA_IRQHandler+0x41c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01d      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8007f74 <HAL_DMA_IRQHandler+0x420>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d018      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a58      	ldr	r2, [pc, #352]	@ (8007f78 <HAL_DMA_IRQHandler+0x424>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a57      	ldr	r2, [pc, #348]	@ (8007f7c <HAL_DMA_IRQHandler+0x428>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00e      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a55      	ldr	r2, [pc, #340]	@ (8007f80 <HAL_DMA_IRQHandler+0x42c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a54      	ldr	r2, [pc, #336]	@ (8007f84 <HAL_DMA_IRQHandler+0x430>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_DMA_IRQHandler+0x2ee>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a52      	ldr	r2, [pc, #328]	@ (8007f88 <HAL_DMA_IRQHandler+0x434>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d10a      	bne.n	8007e58 <HAL_DMA_IRQHandler+0x304>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bf14      	ite	ne
 8007e50:	2301      	movne	r3, #1
 8007e52:	2300      	moveq	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e003      	b.n	8007e60 <HAL_DMA_IRQHandler+0x30c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00d      	beq.n	8007e80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e68:	f003 031f 	and.w	r3, r3, #31
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	409a      	lsls	r2, r3
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e78:	f043 0202 	orr.w	r2, r3, #2
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2204      	movs	r2, #4
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 808f 	beq.w	8007fb4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f4c <HAL_DMA_IRQHandler+0x3f8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d04a      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f50 <HAL_DMA_IRQHandler+0x3fc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d045      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a29      	ldr	r2, [pc, #164]	@ (8007f54 <HAL_DMA_IRQHandler+0x400>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d040      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a27      	ldr	r2, [pc, #156]	@ (8007f58 <HAL_DMA_IRQHandler+0x404>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d03b      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a26      	ldr	r2, [pc, #152]	@ (8007f5c <HAL_DMA_IRQHandler+0x408>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d036      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a24      	ldr	r2, [pc, #144]	@ (8007f60 <HAL_DMA_IRQHandler+0x40c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d031      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a23      	ldr	r2, [pc, #140]	@ (8007f64 <HAL_DMA_IRQHandler+0x410>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d02c      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <HAL_DMA_IRQHandler+0x414>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d027      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <HAL_DMA_IRQHandler+0x418>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d022      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <HAL_DMA_IRQHandler+0x41c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01d      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1d      	ldr	r2, [pc, #116]	@ (8007f74 <HAL_DMA_IRQHandler+0x420>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d018      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <HAL_DMA_IRQHandler+0x424>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <HAL_DMA_IRQHandler+0x428>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00e      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a18      	ldr	r2, [pc, #96]	@ (8007f80 <HAL_DMA_IRQHandler+0x42c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <HAL_DMA_IRQHandler+0x430>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x3e2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a15      	ldr	r2, [pc, #84]	@ (8007f88 <HAL_DMA_IRQHandler+0x434>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d12a      	bne.n	8007f8c <HAL_DMA_IRQHandler+0x438>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf14      	ite	ne
 8007f44:	2301      	movne	r3, #1
 8007f46:	2300      	moveq	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	e023      	b.n	8007f94 <HAL_DMA_IRQHandler+0x440>
 8007f4c:	40020010 	.word	0x40020010
 8007f50:	40020028 	.word	0x40020028
 8007f54:	40020040 	.word	0x40020040
 8007f58:	40020058 	.word	0x40020058
 8007f5c:	40020070 	.word	0x40020070
 8007f60:	40020088 	.word	0x40020088
 8007f64:	400200a0 	.word	0x400200a0
 8007f68:	400200b8 	.word	0x400200b8
 8007f6c:	40020410 	.word	0x40020410
 8007f70:	40020428 	.word	0x40020428
 8007f74:	40020440 	.word	0x40020440
 8007f78:	40020458 	.word	0x40020458
 8007f7c:	40020470 	.word	0x40020470
 8007f80:	40020488 	.word	0x40020488
 8007f84:	400204a0 	.word	0x400204a0
 8007f88:	400204b8 	.word	0x400204b8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2300      	movs	r3, #0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00d      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	2210      	movs	r2, #16
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80a6 	beq.w	8008116 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a85      	ldr	r2, [pc, #532]	@ (80081e4 <HAL_DMA_IRQHandler+0x690>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d04a      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a83      	ldr	r2, [pc, #524]	@ (80081e8 <HAL_DMA_IRQHandler+0x694>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d045      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a82      	ldr	r2, [pc, #520]	@ (80081ec <HAL_DMA_IRQHandler+0x698>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d040      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a80      	ldr	r2, [pc, #512]	@ (80081f0 <HAL_DMA_IRQHandler+0x69c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d03b      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a7f      	ldr	r2, [pc, #508]	@ (80081f4 <HAL_DMA_IRQHandler+0x6a0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d036      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a7d      	ldr	r2, [pc, #500]	@ (80081f8 <HAL_DMA_IRQHandler+0x6a4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d031      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7c      	ldr	r2, [pc, #496]	@ (80081fc <HAL_DMA_IRQHandler+0x6a8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d02c      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a7a      	ldr	r2, [pc, #488]	@ (8008200 <HAL_DMA_IRQHandler+0x6ac>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d027      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a79      	ldr	r2, [pc, #484]	@ (8008204 <HAL_DMA_IRQHandler+0x6b0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d022      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a77      	ldr	r2, [pc, #476]	@ (8008208 <HAL_DMA_IRQHandler+0x6b4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01d      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a76      	ldr	r2, [pc, #472]	@ (800820c <HAL_DMA_IRQHandler+0x6b8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d018      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a74      	ldr	r2, [pc, #464]	@ (8008210 <HAL_DMA_IRQHandler+0x6bc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a73      	ldr	r2, [pc, #460]	@ (8008214 <HAL_DMA_IRQHandler+0x6c0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a71      	ldr	r2, [pc, #452]	@ (8008218 <HAL_DMA_IRQHandler+0x6c4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a70      	ldr	r2, [pc, #448]	@ (800821c <HAL_DMA_IRQHandler+0x6c8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_DMA_IRQHandler+0x516>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a6e      	ldr	r2, [pc, #440]	@ (8008220 <HAL_DMA_IRQHandler+0x6cc>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d10a      	bne.n	8008080 <HAL_DMA_IRQHandler+0x52c>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	bf14      	ite	ne
 8008078:	2301      	movne	r3, #1
 800807a:	2300      	moveq	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	e009      	b.n	8008094 <HAL_DMA_IRQHandler+0x540>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	bf14      	ite	ne
 800808e:	2301      	movne	r3, #1
 8008090:	2300      	moveq	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d03e      	beq.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	2210      	movs	r2, #16
 80080a2:	409a      	lsls	r2, r3
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d024      	beq.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
 80080d4:	e01f      	b.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01b      	beq.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
 80080e6:	e016      	b.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d107      	bne.n	8008106 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0208 	bic.w	r2, r2, #8
 8008104:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2220      	movs	r2, #32
 8008120:	409a      	lsls	r2, r3
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 8110 	beq.w	800834c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a2c      	ldr	r2, [pc, #176]	@ (80081e4 <HAL_DMA_IRQHandler+0x690>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04a      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a2b      	ldr	r2, [pc, #172]	@ (80081e8 <HAL_DMA_IRQHandler+0x694>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d045      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a29      	ldr	r2, [pc, #164]	@ (80081ec <HAL_DMA_IRQHandler+0x698>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d040      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a28      	ldr	r2, [pc, #160]	@ (80081f0 <HAL_DMA_IRQHandler+0x69c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d03b      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a26      	ldr	r2, [pc, #152]	@ (80081f4 <HAL_DMA_IRQHandler+0x6a0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d036      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a25      	ldr	r2, [pc, #148]	@ (80081f8 <HAL_DMA_IRQHandler+0x6a4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d031      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a23      	ldr	r2, [pc, #140]	@ (80081fc <HAL_DMA_IRQHandler+0x6a8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d02c      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a22      	ldr	r2, [pc, #136]	@ (8008200 <HAL_DMA_IRQHandler+0x6ac>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d027      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a20      	ldr	r2, [pc, #128]	@ (8008204 <HAL_DMA_IRQHandler+0x6b0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1f      	ldr	r2, [pc, #124]	@ (8008208 <HAL_DMA_IRQHandler+0x6b4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d01d      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1d      	ldr	r2, [pc, #116]	@ (800820c <HAL_DMA_IRQHandler+0x6b8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1c      	ldr	r2, [pc, #112]	@ (8008210 <HAL_DMA_IRQHandler+0x6bc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008214 <HAL_DMA_IRQHandler+0x6c0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a19      	ldr	r2, [pc, #100]	@ (8008218 <HAL_DMA_IRQHandler+0x6c4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a17      	ldr	r2, [pc, #92]	@ (800821c <HAL_DMA_IRQHandler+0x6c8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <HAL_DMA_IRQHandler+0x678>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a16      	ldr	r2, [pc, #88]	@ (8008220 <HAL_DMA_IRQHandler+0x6cc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d12b      	bne.n	8008224 <HAL_DMA_IRQHandler+0x6d0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf14      	ite	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	2300      	moveq	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	e02a      	b.n	8008238 <HAL_DMA_IRQHandler+0x6e4>
 80081e2:	bf00      	nop
 80081e4:	40020010 	.word	0x40020010
 80081e8:	40020028 	.word	0x40020028
 80081ec:	40020040 	.word	0x40020040
 80081f0:	40020058 	.word	0x40020058
 80081f4:	40020070 	.word	0x40020070
 80081f8:	40020088 	.word	0x40020088
 80081fc:	400200a0 	.word	0x400200a0
 8008200:	400200b8 	.word	0x400200b8
 8008204:	40020410 	.word	0x40020410
 8008208:	40020428 	.word	0x40020428
 800820c:	40020440 	.word	0x40020440
 8008210:	40020458 	.word	0x40020458
 8008214:	40020470 	.word	0x40020470
 8008218:	40020488 	.word	0x40020488
 800821c:	400204a0 	.word	0x400204a0
 8008220:	400204b8 	.word	0x400204b8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8087 	beq.w	800834c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2220      	movs	r2, #32
 8008248:	409a      	lsls	r2, r3
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b04      	cmp	r3, #4
 8008258:	d139      	bne.n	80082ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0216 	bic.w	r2, r2, #22
 8008268:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008278:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <HAL_DMA_IRQHandler+0x736>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0208 	bic.w	r2, r2, #8
 8008298:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	223f      	movs	r2, #63	@ 0x3f
 80082a4:	409a      	lsls	r2, r3
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 834a 	beq.w	8008958 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
          }
          return;
 80082cc:	e344      	b.n	8008958 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d018      	beq.n	800830e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d108      	bne.n	80082fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d02c      	beq.n	800834c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
 80082fa:	e027      	b.n	800834c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d023      	beq.n	800834c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
 800830c:	e01e      	b.n	800834c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10f      	bne.n	800833c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0210 	bic.w	r2, r2, #16
 800832a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8306 	beq.w	8008962 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8088 	beq.w	8008474 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2204      	movs	r2, #4
 8008368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7a      	ldr	r2, [pc, #488]	@ (800855c <HAL_DMA_IRQHandler+0xa08>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d04a      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a79      	ldr	r2, [pc, #484]	@ (8008560 <HAL_DMA_IRQHandler+0xa0c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d045      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a77      	ldr	r2, [pc, #476]	@ (8008564 <HAL_DMA_IRQHandler+0xa10>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d040      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a76      	ldr	r2, [pc, #472]	@ (8008568 <HAL_DMA_IRQHandler+0xa14>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d03b      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a74      	ldr	r2, [pc, #464]	@ (800856c <HAL_DMA_IRQHandler+0xa18>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d036      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a73      	ldr	r2, [pc, #460]	@ (8008570 <HAL_DMA_IRQHandler+0xa1c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d031      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a71      	ldr	r2, [pc, #452]	@ (8008574 <HAL_DMA_IRQHandler+0xa20>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d02c      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a70      	ldr	r2, [pc, #448]	@ (8008578 <HAL_DMA_IRQHandler+0xa24>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d027      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6e      	ldr	r2, [pc, #440]	@ (800857c <HAL_DMA_IRQHandler+0xa28>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d022      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6d      	ldr	r2, [pc, #436]	@ (8008580 <HAL_DMA_IRQHandler+0xa2c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d01d      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008584 <HAL_DMA_IRQHandler+0xa30>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d018      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a6a      	ldr	r2, [pc, #424]	@ (8008588 <HAL_DMA_IRQHandler+0xa34>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d013      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a68      	ldr	r2, [pc, #416]	@ (800858c <HAL_DMA_IRQHandler+0xa38>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00e      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a67      	ldr	r2, [pc, #412]	@ (8008590 <HAL_DMA_IRQHandler+0xa3c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d009      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a65      	ldr	r2, [pc, #404]	@ (8008594 <HAL_DMA_IRQHandler+0xa40>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d004      	beq.n	800840c <HAL_DMA_IRQHandler+0x8b8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a64      	ldr	r2, [pc, #400]	@ (8008598 <HAL_DMA_IRQHandler+0xa44>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d108      	bne.n	800841e <HAL_DMA_IRQHandler+0x8ca>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	e007      	b.n	800842e <HAL_DMA_IRQHandler+0x8da>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0201 	bic.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008436:	429a      	cmp	r2, r3
 8008438:	d307      	bcc.n	800844a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1f2      	bne.n	800842e <HAL_DMA_IRQHandler+0x8da>
 8008448:	e000      	b.n	800844c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800844a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2203      	movs	r2, #3
 800845e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008462:	e003      	b.n	800846c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8272 	beq.w	8008962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4798      	blx	r3
 8008486:	e26c      	b.n	8008962 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a43      	ldr	r2, [pc, #268]	@ (800859c <HAL_DMA_IRQHandler+0xa48>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d022      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a42      	ldr	r2, [pc, #264]	@ (80085a0 <HAL_DMA_IRQHandler+0xa4c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d01d      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a40      	ldr	r2, [pc, #256]	@ (80085a4 <HAL_DMA_IRQHandler+0xa50>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d018      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a3f      	ldr	r2, [pc, #252]	@ (80085a8 <HAL_DMA_IRQHandler+0xa54>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d013      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a3d      	ldr	r2, [pc, #244]	@ (80085ac <HAL_DMA_IRQHandler+0xa58>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00e      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a3c      	ldr	r2, [pc, #240]	@ (80085b0 <HAL_DMA_IRQHandler+0xa5c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d009      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3a      	ldr	r2, [pc, #232]	@ (80085b4 <HAL_DMA_IRQHandler+0xa60>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d004      	beq.n	80084d8 <HAL_DMA_IRQHandler+0x984>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a39      	ldr	r2, [pc, #228]	@ (80085b8 <HAL_DMA_IRQHandler+0xa64>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d101      	bne.n	80084dc <HAL_DMA_IRQHandler+0x988>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <HAL_DMA_IRQHandler+0x98a>
 80084dc:	2300      	movs	r3, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 823f 	beq.w	8008962 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	2204      	movs	r2, #4
 80084f6:	409a      	lsls	r2, r3
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80cd 	beq.w	800869c <HAL_DMA_IRQHandler+0xb48>
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 80c7 	beq.w	800869c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	2204      	movs	r2, #4
 8008518:	409a      	lsls	r2, r3
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d049      	beq.n	80085bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8210 	beq.w	800895c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008544:	e20a      	b.n	800895c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8206 	beq.w	800895c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008558:	e200      	b.n	800895c <HAL_DMA_IRQHandler+0xe08>
 800855a:	bf00      	nop
 800855c:	40020010 	.word	0x40020010
 8008560:	40020028 	.word	0x40020028
 8008564:	40020040 	.word	0x40020040
 8008568:	40020058 	.word	0x40020058
 800856c:	40020070 	.word	0x40020070
 8008570:	40020088 	.word	0x40020088
 8008574:	400200a0 	.word	0x400200a0
 8008578:	400200b8 	.word	0x400200b8
 800857c:	40020410 	.word	0x40020410
 8008580:	40020428 	.word	0x40020428
 8008584:	40020440 	.word	0x40020440
 8008588:	40020458 	.word	0x40020458
 800858c:	40020470 	.word	0x40020470
 8008590:	40020488 	.word	0x40020488
 8008594:	400204a0 	.word	0x400204a0
 8008598:	400204b8 	.word	0x400204b8
 800859c:	58025408 	.word	0x58025408
 80085a0:	5802541c 	.word	0x5802541c
 80085a4:	58025430 	.word	0x58025430
 80085a8:	58025444 	.word	0x58025444
 80085ac:	58025458 	.word	0x58025458
 80085b0:	5802546c 	.word	0x5802546c
 80085b4:	58025480 	.word	0x58025480
 80085b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d160      	bne.n	8008688 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a7f      	ldr	r2, [pc, #508]	@ (80087c8 <HAL_DMA_IRQHandler+0xc74>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d04a      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a7d      	ldr	r2, [pc, #500]	@ (80087cc <HAL_DMA_IRQHandler+0xc78>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d045      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a7c      	ldr	r2, [pc, #496]	@ (80087d0 <HAL_DMA_IRQHandler+0xc7c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d040      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a7a      	ldr	r2, [pc, #488]	@ (80087d4 <HAL_DMA_IRQHandler+0xc80>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d03b      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a79      	ldr	r2, [pc, #484]	@ (80087d8 <HAL_DMA_IRQHandler+0xc84>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d036      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a77      	ldr	r2, [pc, #476]	@ (80087dc <HAL_DMA_IRQHandler+0xc88>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d031      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a76      	ldr	r2, [pc, #472]	@ (80087e0 <HAL_DMA_IRQHandler+0xc8c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d02c      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a74      	ldr	r2, [pc, #464]	@ (80087e4 <HAL_DMA_IRQHandler+0xc90>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d027      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a73      	ldr	r2, [pc, #460]	@ (80087e8 <HAL_DMA_IRQHandler+0xc94>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d022      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a71      	ldr	r2, [pc, #452]	@ (80087ec <HAL_DMA_IRQHandler+0xc98>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d01d      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a70      	ldr	r2, [pc, #448]	@ (80087f0 <HAL_DMA_IRQHandler+0xc9c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d018      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a6e      	ldr	r2, [pc, #440]	@ (80087f4 <HAL_DMA_IRQHandler+0xca0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6d      	ldr	r2, [pc, #436]	@ (80087f8 <HAL_DMA_IRQHandler+0xca4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00e      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a6b      	ldr	r2, [pc, #428]	@ (80087fc <HAL_DMA_IRQHandler+0xca8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a6a      	ldr	r2, [pc, #424]	@ (8008800 <HAL_DMA_IRQHandler+0xcac>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_DMA_IRQHandler+0xb12>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a68      	ldr	r2, [pc, #416]	@ (8008804 <HAL_DMA_IRQHandler+0xcb0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <HAL_DMA_IRQHandler+0xb24>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0208 	bic.w	r2, r2, #8
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	e007      	b.n	8008688 <HAL_DMA_IRQHandler+0xb34>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0204 	bic.w	r2, r2, #4
 8008686:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8165 	beq.w	800895c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800869a:	e15f      	b.n	800895c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	2202      	movs	r2, #2
 80086a6:	409a      	lsls	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80c5 	beq.w	800883c <HAL_DMA_IRQHandler+0xce8>
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80bf 	beq.w	800883c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c2:	f003 031f 	and.w	r3, r3, #31
 80086c6:	2202      	movs	r2, #2
 80086c8:	409a      	lsls	r2, r3
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d018      	beq.n	800870a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 813a 	beq.w	8008960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086f4:	e134      	b.n	8008960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 8130 	beq.w	8008960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008708:	e12a      	b.n	8008960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	f040 8089 	bne.w	8008828 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2b      	ldr	r2, [pc, #172]	@ (80087c8 <HAL_DMA_IRQHandler+0xc74>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d04a      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a29      	ldr	r2, [pc, #164]	@ (80087cc <HAL_DMA_IRQHandler+0xc78>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d045      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a28      	ldr	r2, [pc, #160]	@ (80087d0 <HAL_DMA_IRQHandler+0xc7c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d040      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a26      	ldr	r2, [pc, #152]	@ (80087d4 <HAL_DMA_IRQHandler+0xc80>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d03b      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a25      	ldr	r2, [pc, #148]	@ (80087d8 <HAL_DMA_IRQHandler+0xc84>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d036      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a23      	ldr	r2, [pc, #140]	@ (80087dc <HAL_DMA_IRQHandler+0xc88>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d031      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a22      	ldr	r2, [pc, #136]	@ (80087e0 <HAL_DMA_IRQHandler+0xc8c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d02c      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a20      	ldr	r2, [pc, #128]	@ (80087e4 <HAL_DMA_IRQHandler+0xc90>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d027      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1f      	ldr	r2, [pc, #124]	@ (80087e8 <HAL_DMA_IRQHandler+0xc94>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d022      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1d      	ldr	r2, [pc, #116]	@ (80087ec <HAL_DMA_IRQHandler+0xc98>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01d      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1c      	ldr	r2, [pc, #112]	@ (80087f0 <HAL_DMA_IRQHandler+0xc9c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d018      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1a      	ldr	r2, [pc, #104]	@ (80087f4 <HAL_DMA_IRQHandler+0xca0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <HAL_DMA_IRQHandler+0xca4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00e      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a17      	ldr	r2, [pc, #92]	@ (80087fc <HAL_DMA_IRQHandler+0xca8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a16      	ldr	r2, [pc, #88]	@ (8008800 <HAL_DMA_IRQHandler+0xcac>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_DMA_IRQHandler+0xc62>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a14      	ldr	r2, [pc, #80]	@ (8008804 <HAL_DMA_IRQHandler+0xcb0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d128      	bne.n	8008808 <HAL_DMA_IRQHandler+0xcb4>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0214 	bic.w	r2, r2, #20
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e027      	b.n	8008818 <HAL_DMA_IRQHandler+0xcc4>
 80087c8:	40020010 	.word	0x40020010
 80087cc:	40020028 	.word	0x40020028
 80087d0:	40020040 	.word	0x40020040
 80087d4:	40020058 	.word	0x40020058
 80087d8:	40020070 	.word	0x40020070
 80087dc:	40020088 	.word	0x40020088
 80087e0:	400200a0 	.word	0x400200a0
 80087e4:	400200b8 	.word	0x400200b8
 80087e8:	40020410 	.word	0x40020410
 80087ec:	40020428 	.word	0x40020428
 80087f0:	40020440 	.word	0x40020440
 80087f4:	40020458 	.word	0x40020458
 80087f8:	40020470 	.word	0x40020470
 80087fc:	40020488 	.word	0x40020488
 8008800:	400204a0 	.word	0x400204a0
 8008804:	400204b8 	.word	0x400204b8
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f022 020a 	bic.w	r2, r2, #10
 8008816:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8097 	beq.w	8008960 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800883a:	e091      	b.n	8008960 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008840:	f003 031f 	and.w	r3, r3, #31
 8008844:	2208      	movs	r2, #8
 8008846:	409a      	lsls	r2, r3
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 8088 	beq.w	8008962 <HAL_DMA_IRQHandler+0xe0e>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f003 0308 	and.w	r3, r3, #8
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8082 	beq.w	8008962 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a41      	ldr	r2, [pc, #260]	@ (8008968 <HAL_DMA_IRQHandler+0xe14>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d04a      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <HAL_DMA_IRQHandler+0xe18>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d045      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a3e      	ldr	r2, [pc, #248]	@ (8008970 <HAL_DMA_IRQHandler+0xe1c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d040      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3c      	ldr	r2, [pc, #240]	@ (8008974 <HAL_DMA_IRQHandler+0xe20>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d03b      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a3b      	ldr	r2, [pc, #236]	@ (8008978 <HAL_DMA_IRQHandler+0xe24>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d036      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a39      	ldr	r2, [pc, #228]	@ (800897c <HAL_DMA_IRQHandler+0xe28>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d031      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a38      	ldr	r2, [pc, #224]	@ (8008980 <HAL_DMA_IRQHandler+0xe2c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d02c      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a36      	ldr	r2, [pc, #216]	@ (8008984 <HAL_DMA_IRQHandler+0xe30>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d027      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a35      	ldr	r2, [pc, #212]	@ (8008988 <HAL_DMA_IRQHandler+0xe34>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d022      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a33      	ldr	r2, [pc, #204]	@ (800898c <HAL_DMA_IRQHandler+0xe38>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d01d      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a32      	ldr	r2, [pc, #200]	@ (8008990 <HAL_DMA_IRQHandler+0xe3c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d018      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a30      	ldr	r2, [pc, #192]	@ (8008994 <HAL_DMA_IRQHandler+0xe40>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d013      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a2f      	ldr	r2, [pc, #188]	@ (8008998 <HAL_DMA_IRQHandler+0xe44>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a2d      	ldr	r2, [pc, #180]	@ (800899c <HAL_DMA_IRQHandler+0xe48>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2c      	ldr	r2, [pc, #176]	@ (80089a0 <HAL_DMA_IRQHandler+0xe4c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_DMA_IRQHandler+0xdaa>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2a      	ldr	r2, [pc, #168]	@ (80089a4 <HAL_DMA_IRQHandler+0xe50>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d108      	bne.n	8008910 <HAL_DMA_IRQHandler+0xdbc>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 021c 	bic.w	r2, r2, #28
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e007      	b.n	8008920 <HAL_DMA_IRQHandler+0xdcc>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 020e 	bic.w	r2, r2, #14
 800891e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008924:	f003 031f 	and.w	r3, r3, #31
 8008928:	2201      	movs	r2, #1
 800892a:	409a      	lsls	r2, r3
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
 8008956:	e004      	b.n	8008962 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008958:	bf00      	nop
 800895a:	e002      	b.n	8008962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008960:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008962:	3728      	adds	r7, #40	@ 0x28
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40020010 	.word	0x40020010
 800896c:	40020028 	.word	0x40020028
 8008970:	40020040 	.word	0x40020040
 8008974:	40020058 	.word	0x40020058
 8008978:	40020070 	.word	0x40020070
 800897c:	40020088 	.word	0x40020088
 8008980:	400200a0 	.word	0x400200a0
 8008984:	400200b8 	.word	0x400200b8
 8008988:	40020410 	.word	0x40020410
 800898c:	40020428 	.word	0x40020428
 8008990:	40020440 	.word	0x40020440
 8008994:	40020458 	.word	0x40020458
 8008998:	40020470 	.word	0x40020470
 800899c:	40020488 	.word	0x40020488
 80089a0:	400204a0 	.word	0x400204a0
 80089a4:	400204b8 	.word	0x400204b8

080089a8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a7f      	ldr	r2, [pc, #508]	@ (8008bdc <DMA_SetConfig+0x21c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d072      	beq.n	8008aca <DMA_SetConfig+0x10a>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a7d      	ldr	r2, [pc, #500]	@ (8008be0 <DMA_SetConfig+0x220>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d06d      	beq.n	8008aca <DMA_SetConfig+0x10a>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a7c      	ldr	r2, [pc, #496]	@ (8008be4 <DMA_SetConfig+0x224>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d068      	beq.n	8008aca <DMA_SetConfig+0x10a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a7a      	ldr	r2, [pc, #488]	@ (8008be8 <DMA_SetConfig+0x228>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d063      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a79      	ldr	r2, [pc, #484]	@ (8008bec <DMA_SetConfig+0x22c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d05e      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a77      	ldr	r2, [pc, #476]	@ (8008bf0 <DMA_SetConfig+0x230>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d059      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a76      	ldr	r2, [pc, #472]	@ (8008bf4 <DMA_SetConfig+0x234>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d054      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a74      	ldr	r2, [pc, #464]	@ (8008bf8 <DMA_SetConfig+0x238>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d04f      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a73      	ldr	r2, [pc, #460]	@ (8008bfc <DMA_SetConfig+0x23c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d04a      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a71      	ldr	r2, [pc, #452]	@ (8008c00 <DMA_SetConfig+0x240>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d045      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a70      	ldr	r2, [pc, #448]	@ (8008c04 <DMA_SetConfig+0x244>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d040      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8008c08 <DMA_SetConfig+0x248>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d03b      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a6d      	ldr	r2, [pc, #436]	@ (8008c0c <DMA_SetConfig+0x24c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d036      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a6b      	ldr	r2, [pc, #428]	@ (8008c10 <DMA_SetConfig+0x250>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d031      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8008c14 <DMA_SetConfig+0x254>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d02c      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a68      	ldr	r2, [pc, #416]	@ (8008c18 <DMA_SetConfig+0x258>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d027      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a67      	ldr	r2, [pc, #412]	@ (8008c1c <DMA_SetConfig+0x25c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d022      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a65      	ldr	r2, [pc, #404]	@ (8008c20 <DMA_SetConfig+0x260>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01d      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a64      	ldr	r2, [pc, #400]	@ (8008c24 <DMA_SetConfig+0x264>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d018      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a62      	ldr	r2, [pc, #392]	@ (8008c28 <DMA_SetConfig+0x268>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a61      	ldr	r2, [pc, #388]	@ (8008c2c <DMA_SetConfig+0x26c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00e      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8008c30 <DMA_SetConfig+0x270>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d009      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a5e      	ldr	r2, [pc, #376]	@ (8008c34 <DMA_SetConfig+0x274>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d004      	beq.n	8008aca <DMA_SetConfig+0x10a>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a5c      	ldr	r2, [pc, #368]	@ (8008c38 <DMA_SetConfig+0x278>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d101      	bne.n	8008ace <DMA_SetConfig+0x10e>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <DMA_SetConfig+0x110>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00d      	beq.n	8008af0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008adc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008aee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a39      	ldr	r2, [pc, #228]	@ (8008bdc <DMA_SetConfig+0x21c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d04a      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a38      	ldr	r2, [pc, #224]	@ (8008be0 <DMA_SetConfig+0x220>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d045      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a36      	ldr	r2, [pc, #216]	@ (8008be4 <DMA_SetConfig+0x224>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d040      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a35      	ldr	r2, [pc, #212]	@ (8008be8 <DMA_SetConfig+0x228>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d03b      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a33      	ldr	r2, [pc, #204]	@ (8008bec <DMA_SetConfig+0x22c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d036      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a32      	ldr	r2, [pc, #200]	@ (8008bf0 <DMA_SetConfig+0x230>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d031      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a30      	ldr	r2, [pc, #192]	@ (8008bf4 <DMA_SetConfig+0x234>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d02c      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf8 <DMA_SetConfig+0x238>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d027      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <DMA_SetConfig+0x23c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d022      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c00 <DMA_SetConfig+0x240>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d01d      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a2a      	ldr	r2, [pc, #168]	@ (8008c04 <DMA_SetConfig+0x244>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d018      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a29      	ldr	r2, [pc, #164]	@ (8008c08 <DMA_SetConfig+0x248>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a27      	ldr	r2, [pc, #156]	@ (8008c0c <DMA_SetConfig+0x24c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00e      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a26      	ldr	r2, [pc, #152]	@ (8008c10 <DMA_SetConfig+0x250>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d009      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a24      	ldr	r2, [pc, #144]	@ (8008c14 <DMA_SetConfig+0x254>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <DMA_SetConfig+0x1d0>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a23      	ldr	r2, [pc, #140]	@ (8008c18 <DMA_SetConfig+0x258>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d101      	bne.n	8008b94 <DMA_SetConfig+0x1d4>
 8008b90:	2301      	movs	r3, #1
 8008b92:	e000      	b.n	8008b96 <DMA_SetConfig+0x1d6>
 8008b94:	2300      	movs	r3, #0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d059      	beq.n	8008c4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	223f      	movs	r2, #63	@ 0x3f
 8008ba4:	409a      	lsls	r2, r3
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008bb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b40      	cmp	r3, #64	@ 0x40
 8008bc8:	d138      	bne.n	8008c3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008bda:	e086      	b.n	8008cea <DMA_SetConfig+0x32a>
 8008bdc:	40020010 	.word	0x40020010
 8008be0:	40020028 	.word	0x40020028
 8008be4:	40020040 	.word	0x40020040
 8008be8:	40020058 	.word	0x40020058
 8008bec:	40020070 	.word	0x40020070
 8008bf0:	40020088 	.word	0x40020088
 8008bf4:	400200a0 	.word	0x400200a0
 8008bf8:	400200b8 	.word	0x400200b8
 8008bfc:	40020410 	.word	0x40020410
 8008c00:	40020428 	.word	0x40020428
 8008c04:	40020440 	.word	0x40020440
 8008c08:	40020458 	.word	0x40020458
 8008c0c:	40020470 	.word	0x40020470
 8008c10:	40020488 	.word	0x40020488
 8008c14:	400204a0 	.word	0x400204a0
 8008c18:	400204b8 	.word	0x400204b8
 8008c1c:	58025408 	.word	0x58025408
 8008c20:	5802541c 	.word	0x5802541c
 8008c24:	58025430 	.word	0x58025430
 8008c28:	58025444 	.word	0x58025444
 8008c2c:	58025458 	.word	0x58025458
 8008c30:	5802546c 	.word	0x5802546c
 8008c34:	58025480 	.word	0x58025480
 8008c38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]
}
 8008c4c:	e04d      	b.n	8008cea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a29      	ldr	r2, [pc, #164]	@ (8008cf8 <DMA_SetConfig+0x338>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d022      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a27      	ldr	r2, [pc, #156]	@ (8008cfc <DMA_SetConfig+0x33c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d01d      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a26      	ldr	r2, [pc, #152]	@ (8008d00 <DMA_SetConfig+0x340>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d018      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a24      	ldr	r2, [pc, #144]	@ (8008d04 <DMA_SetConfig+0x344>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d013      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a23      	ldr	r2, [pc, #140]	@ (8008d08 <DMA_SetConfig+0x348>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00e      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a21      	ldr	r2, [pc, #132]	@ (8008d0c <DMA_SetConfig+0x34c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d009      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a20      	ldr	r2, [pc, #128]	@ (8008d10 <DMA_SetConfig+0x350>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d004      	beq.n	8008c9e <DMA_SetConfig+0x2de>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a1e      	ldr	r2, [pc, #120]	@ (8008d14 <DMA_SetConfig+0x354>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d101      	bne.n	8008ca2 <DMA_SetConfig+0x2e2>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <DMA_SetConfig+0x2e4>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d020      	beq.n	8008cea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	409a      	lsls	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2b40      	cmp	r3, #64	@ 0x40
 8008cc6:	d108      	bne.n	8008cda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	60da      	str	r2, [r3, #12]
}
 8008cd8:	e007      	b.n	8008cea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	58025408 	.word	0x58025408
 8008cfc:	5802541c 	.word	0x5802541c
 8008d00:	58025430 	.word	0x58025430
 8008d04:	58025444 	.word	0x58025444
 8008d08:	58025458 	.word	0x58025458
 8008d0c:	5802546c 	.word	0x5802546c
 8008d10:	58025480 	.word	0x58025480
 8008d14:	58025494 	.word	0x58025494

08008d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a42      	ldr	r2, [pc, #264]	@ (8008e30 <DMA_CalcBaseAndBitshift+0x118>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d04a      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a41      	ldr	r2, [pc, #260]	@ (8008e34 <DMA_CalcBaseAndBitshift+0x11c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d045      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a3f      	ldr	r2, [pc, #252]	@ (8008e38 <DMA_CalcBaseAndBitshift+0x120>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d040      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a3e      	ldr	r2, [pc, #248]	@ (8008e3c <DMA_CalcBaseAndBitshift+0x124>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d03b      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e40 <DMA_CalcBaseAndBitshift+0x128>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d036      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a3b      	ldr	r2, [pc, #236]	@ (8008e44 <DMA_CalcBaseAndBitshift+0x12c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d031      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a39      	ldr	r2, [pc, #228]	@ (8008e48 <DMA_CalcBaseAndBitshift+0x130>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d02c      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a38      	ldr	r2, [pc, #224]	@ (8008e4c <DMA_CalcBaseAndBitshift+0x134>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d027      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a36      	ldr	r2, [pc, #216]	@ (8008e50 <DMA_CalcBaseAndBitshift+0x138>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d022      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a35      	ldr	r2, [pc, #212]	@ (8008e54 <DMA_CalcBaseAndBitshift+0x13c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d01d      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a33      	ldr	r2, [pc, #204]	@ (8008e58 <DMA_CalcBaseAndBitshift+0x140>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d018      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a32      	ldr	r2, [pc, #200]	@ (8008e5c <DMA_CalcBaseAndBitshift+0x144>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a30      	ldr	r2, [pc, #192]	@ (8008e60 <DMA_CalcBaseAndBitshift+0x148>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00e      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a2f      	ldr	r2, [pc, #188]	@ (8008e64 <DMA_CalcBaseAndBitshift+0x14c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a2d      	ldr	r2, [pc, #180]	@ (8008e68 <DMA_CalcBaseAndBitshift+0x150>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <DMA_CalcBaseAndBitshift+0xa8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a2c      	ldr	r2, [pc, #176]	@ (8008e6c <DMA_CalcBaseAndBitshift+0x154>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d101      	bne.n	8008dc4 <DMA_CalcBaseAndBitshift+0xac>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <DMA_CalcBaseAndBitshift+0xae>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d024      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	3b10      	subs	r3, #16
 8008dd2:	4a27      	ldr	r2, [pc, #156]	@ (8008e70 <DMA_CalcBaseAndBitshift+0x158>)
 8008dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd8:	091b      	lsrs	r3, r3, #4
 8008dda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	4a24      	ldr	r2, [pc, #144]	@ (8008e74 <DMA_CalcBaseAndBitshift+0x15c>)
 8008de4:	5cd3      	ldrb	r3, [r2, r3]
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d908      	bls.n	8008e04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4b1f      	ldr	r3, [pc, #124]	@ (8008e78 <DMA_CalcBaseAndBitshift+0x160>)
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	1d1a      	adds	r2, r3, #4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e02:	e00d      	b.n	8008e20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e78 <DMA_CalcBaseAndBitshift+0x160>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e12:	e005      	b.n	8008e20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	40020010 	.word	0x40020010
 8008e34:	40020028 	.word	0x40020028
 8008e38:	40020040 	.word	0x40020040
 8008e3c:	40020058 	.word	0x40020058
 8008e40:	40020070 	.word	0x40020070
 8008e44:	40020088 	.word	0x40020088
 8008e48:	400200a0 	.word	0x400200a0
 8008e4c:	400200b8 	.word	0x400200b8
 8008e50:	40020410 	.word	0x40020410
 8008e54:	40020428 	.word	0x40020428
 8008e58:	40020440 	.word	0x40020440
 8008e5c:	40020458 	.word	0x40020458
 8008e60:	40020470 	.word	0x40020470
 8008e64:	40020488 	.word	0x40020488
 8008e68:	400204a0 	.word	0x400204a0
 8008e6c:	400204b8 	.word	0x400204b8
 8008e70:	aaaaaaab 	.word	0xaaaaaaab
 8008e74:	08017338 	.word	0x08017338
 8008e78:	fffffc00 	.word	0xfffffc00

08008e7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d120      	bne.n	8008ed2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d858      	bhi.n	8008f4a <DMA_CheckFifoParam+0xce>
 8008e98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <DMA_CheckFifoParam+0x24>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008ec3 	.word	0x08008ec3
 8008ea8:	08008eb1 	.word	0x08008eb1
 8008eac:	08008f4b 	.word	0x08008f4b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d048      	beq.n	8008f4e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ec0:	e045      	b.n	8008f4e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008eca:	d142      	bne.n	8008f52 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ed0:	e03f      	b.n	8008f52 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eda:	d123      	bne.n	8008f24 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d838      	bhi.n	8008f56 <DMA_CheckFifoParam+0xda>
 8008ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eec <DMA_CheckFifoParam+0x70>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	08008f03 	.word	0x08008f03
 8008ef4:	08008efd 	.word	0x08008efd
 8008ef8:	08008f15 	.word	0x08008f15
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
        break;
 8008f00:	e030      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d025      	beq.n	8008f5a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f12:	e022      	b.n	8008f5a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008f1c:	d11f      	bne.n	8008f5e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f22:	e01c      	b.n	8008f5e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d902      	bls.n	8008f32 <DMA_CheckFifoParam+0xb6>
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d003      	beq.n	8008f38 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008f30:	e018      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	73fb      	strb	r3, [r7, #15]
        break;
 8008f36:	e015      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00e      	beq.n	8008f62 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	e00b      	b.n	8008f62 <DMA_CheckFifoParam+0xe6>
        break;
 8008f4a:	bf00      	nop
 8008f4c:	e00a      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        break;
 8008f4e:	bf00      	nop
 8008f50:	e008      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        break;
 8008f52:	bf00      	nop
 8008f54:	e006      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        break;
 8008f56:	bf00      	nop
 8008f58:	e004      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        break;
 8008f5a:	bf00      	nop
 8008f5c:	e002      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
        break;
 8008f5e:	bf00      	nop
 8008f60:	e000      	b.n	8008f64 <DMA_CheckFifoParam+0xe8>
    break;
 8008f62:	bf00      	nop
    }
  }

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop

08008f74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a38      	ldr	r2, [pc, #224]	@ (8009068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d022      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a36      	ldr	r2, [pc, #216]	@ (800906c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01d      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a35      	ldr	r2, [pc, #212]	@ (8009070 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d018      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a33      	ldr	r2, [pc, #204]	@ (8009074 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d013      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a32      	ldr	r2, [pc, #200]	@ (8009078 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d00e      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a30      	ldr	r2, [pc, #192]	@ (800907c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d009      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8009080 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d004      	beq.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8009084 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d101      	bne.n	8008fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01a      	beq.n	8009012 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	3b08      	subs	r3, #8
 8008fe4:	4a28      	ldr	r2, [pc, #160]	@ (8009088 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fea:	091b      	lsrs	r3, r3, #4
 8008fec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4b26      	ldr	r3, [pc, #152]	@ (800908c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a24      	ldr	r2, [pc, #144]	@ (8009090 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	2201      	movs	r2, #1
 800900a:	409a      	lsls	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009010:	e024      	b.n	800905c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	3b10      	subs	r3, #16
 800901a:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800901c:	fba2 2303 	umull	r2, r3, r2, r3
 8009020:	091b      	lsrs	r3, r3, #4
 8009022:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d806      	bhi.n	800903a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4a1b      	ldr	r2, [pc, #108]	@ (800909c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d902      	bls.n	800903a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3308      	adds	r3, #8
 8009038:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4b18      	ldr	r3, [pc, #96]	@ (80090a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	461a      	mov	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a16      	ldr	r2, [pc, #88]	@ (80090a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800904c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	2201      	movs	r2, #1
 8009056:	409a      	lsls	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800905c:	bf00      	nop
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	58025408 	.word	0x58025408
 800906c:	5802541c 	.word	0x5802541c
 8009070:	58025430 	.word	0x58025430
 8009074:	58025444 	.word	0x58025444
 8009078:	58025458 	.word	0x58025458
 800907c:	5802546c 	.word	0x5802546c
 8009080:	58025480 	.word	0x58025480
 8009084:	58025494 	.word	0x58025494
 8009088:	cccccccd 	.word	0xcccccccd
 800908c:	16009600 	.word	0x16009600
 8009090:	58025880 	.word	0x58025880
 8009094:	aaaaaaab 	.word	0xaaaaaaab
 8009098:	400204b8 	.word	0x400204b8
 800909c:	4002040f 	.word	0x4002040f
 80090a0:	10008200 	.word	0x10008200
 80090a4:	40020880 	.word	0x40020880

080090a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d04a      	beq.n	8009154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d847      	bhi.n	8009154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a25      	ldr	r2, [pc, #148]	@ (8009160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a24      	ldr	r2, [pc, #144]	@ (8009164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a22      	ldr	r2, [pc, #136]	@ (8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a21      	ldr	r2, [pc, #132]	@ (800916c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1c      	ldr	r2, [pc, #112]	@ (8009178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1b      	ldr	r2, [pc, #108]	@ (800917c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d101      	bne.n	8009118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4b17      	ldr	r3, [pc, #92]	@ (8009180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a15      	ldr	r2, [pc, #84]	@ (8009184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009130:	671a      	str	r2, [r3, #112]	@ 0x70
 8009132:	e009      	b.n	8009148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4b14      	ldr	r3, [pc, #80]	@ (8009188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a11      	ldr	r2, [pc, #68]	@ (800918c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009146:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3b01      	subs	r3, #1
 800914c:	2201      	movs	r2, #1
 800914e:	409a      	lsls	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	58025408 	.word	0x58025408
 8009164:	5802541c 	.word	0x5802541c
 8009168:	58025430 	.word	0x58025430
 800916c:	58025444 	.word	0x58025444
 8009170:	58025458 	.word	0x58025458
 8009174:	5802546c 	.word	0x5802546c
 8009178:	58025480 	.word	0x58025480
 800917c:	58025494 	.word	0x58025494
 8009180:	1600963f 	.word	0x1600963f
 8009184:	58025940 	.word	0x58025940
 8009188:	1000823f 	.word	0x1000823f
 800918c:	40020940 	.word	0x40020940

08009190 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	460b      	mov	r3, r1
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e00a      	b.n	80091c2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	605a      	str	r2, [r3, #4]
      break;
 80091b8:	e002      	b.n	80091c0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	75fb      	strb	r3, [r7, #23]
      break;
 80091be:	bf00      	nop
  }

  return status;
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e003      	b.n	80091ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80091e8:	2300      	movs	r3, #0
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
	...

080091f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	2201      	movs	r2, #1
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	011a      	lsls	r2, r3, #4
 8009220:	4b0c      	ldr	r3, [pc, #48]	@ (8009254 <HAL_EXTI_IRQHandler+0x5c>)
 8009222:	4413      	add	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4013      	ands	r3, r2
 800922e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4798      	blx	r3
    }
  }
}
 800924a:	bf00      	nop
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	58000088 	.word	0x58000088

08009258 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b098      	sub	sp, #96	@ 0x60
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009260:	4a84      	ldr	r2, [pc, #528]	@ (8009474 <HAL_FDCAN_Init+0x21c>)
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4611      	mov	r1, r2
 8009268:	224c      	movs	r2, #76	@ 0x4c
 800926a:	4618      	mov	r0, r3
 800926c:	f00b fa3b 	bl	80146e6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e1c6      	b.n	8009608 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a7e      	ldr	r2, [pc, #504]	@ (8009478 <HAL_FDCAN_Init+0x220>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d106      	bne.n	8009292 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7fc f8cc 	bl	8005444 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699a      	ldr	r2, [r3, #24]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0210 	bic.w	r2, r2, #16
 80092ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092bc:	f7fc fdd6 	bl	8005e6c <HAL_GetTick>
 80092c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80092c2:	e014      	b.n	80092ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80092c4:	f7fc fdd2 	bl	8005e6c <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	d90d      	bls.n	80092ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092d8:	f043 0201 	orr.w	r2, r3, #1
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2203      	movs	r2, #3
 80092e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e18c      	b.n	8009608 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d0e3      	beq.n	80092c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800930c:	f7fc fdae 	bl	8005e6c <HAL_GetTick>
 8009310:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009312:	e014      	b.n	800933e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009314:	f7fc fdaa 	bl	8005e6c <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b0a      	cmp	r3, #10
 8009320:	d90d      	bls.n	800933e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009328:	f043 0201 	orr.w	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2203      	movs	r2, #3
 8009336:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e164      	b.n	8009608 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0e3      	beq.n	8009314 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0202 	orr.w	r2, r2, #2
 800935a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7c1b      	ldrb	r3, [r3, #16]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d108      	bne.n	8009376 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009372:	619a      	str	r2, [r3, #24]
 8009374:	e007      	b.n	8009386 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699a      	ldr	r2, [r3, #24]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009384:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7c5b      	ldrb	r3, [r3, #17]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d108      	bne.n	80093a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699a      	ldr	r2, [r3, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800939c:	619a      	str	r2, [r3, #24]
 800939e:	e007      	b.n	80093b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7c9b      	ldrb	r3, [r3, #18]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d108      	bne.n	80093ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093c6:	619a      	str	r2, [r3, #24]
 80093c8:	e007      	b.n	80093da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80093d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80093fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0210 	bic.w	r2, r2, #16
 800940e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d108      	bne.n	800942a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0204 	orr.w	r2, r2, #4
 8009426:	619a      	str	r2, [r3, #24]
 8009428:	e030      	b.n	800948c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d02c      	beq.n	800948c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d020      	beq.n	800947c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009448:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0210 	orr.w	r2, r2, #16
 8009458:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b03      	cmp	r3, #3
 8009460:	d114      	bne.n	800948c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 0220 	orr.w	r2, r2, #32
 8009470:	619a      	str	r2, [r3, #24]
 8009472:	e00b      	b.n	800948c <HAL_FDCAN_Init+0x234>
 8009474:	08017270 	.word	0x08017270
 8009478:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0220 	orr.w	r2, r2, #32
 800948a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	3b01      	subs	r3, #1
 8009492:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	3b01      	subs	r3, #1
 800949a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800949c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80094a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80094b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80094b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094c0:	d115      	bne.n	80094ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	3b01      	subs	r3, #1
 80094ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d6:	3b01      	subs	r3, #1
 80094d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80094da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	3b01      	subs	r3, #1
 80094e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80094ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009514:	4413      	add	r3, r2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009522:	f023 0107 	bic.w	r1, r3, #7
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	3360      	adds	r3, #96	@ 0x60
 800952e:	443b      	add	r3, r7
 8009530:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800954e:	f023 0107 	bic.w	r1, r3, #7
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	3360      	adds	r3, #96	@ 0x60
 800955a:	443b      	add	r3, r7
 800955c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800956e:	2b00      	cmp	r3, #0
 8009570:	d012      	beq.n	8009598 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800957a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	3360      	adds	r3, #96	@ 0x60
 8009586:	443b      	add	r3, r7
 8009588:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800958c:	011a      	lsls	r2, r3, #4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	2b00      	cmp	r3, #0
 800959e:	d012      	beq.n	80095c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	3360      	adds	r3, #96	@ 0x60
 80095b4:	443b      	add	r3, r7
 80095b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80095ba:	021a      	lsls	r2, r3, #8
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a11      	ldr	r2, [pc, #68]	@ (8009610 <HAL_FDCAN_Init+0x3b8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d107      	bne.n	80095e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	689a      	ldr	r2, [r3, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f022 0203 	bic.w	r2, r2, #3
 80095de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fd93 	bl	800a124 <FDCAN_CalcultateRamBlockAddresses>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009604:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009608:	4618      	mov	r0, r3
 800960a:	3760      	adds	r7, #96	@ 0x60
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	4000a000 	.word	0x4000a000

08009614 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d111      	bne.n	800964c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e008      	b.n	800965e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009652:	f043 0204 	orr.w	r2, r3, #4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b086      	sub	sp, #24
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b02      	cmp	r3, #2
 8009680:	d141      	bne.n	8009706 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800968a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d109      	bne.n	80096a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009698:	f043 0220 	orr.w	r2, r3, #32
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e038      	b.n	8009718 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80096ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e026      	b.n	8009718 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	f003 031f 	and.w	r3, r3, #31
 80096d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fea5 	bl	800a430 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2101      	movs	r1, #1
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	fa01 f202 	lsl.w	r2, r1, r2
 80096f2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80096f6:	2201      	movs	r2, #1
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	409a      	lsls	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e008      	b.n	8009718 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800970c:	f043 0208 	orr.w	r2, r3, #8
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
  }
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8009720:	b480      	push	{r7}
 8009722:	b08b      	sub	sp, #44	@ 0x2c
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009738:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800973a:	7efb      	ldrb	r3, [r7, #27]
 800973c:	2b02      	cmp	r3, #2
 800973e:	f040 8149 	bne.w	80099d4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b40      	cmp	r3, #64	@ 0x40
 8009746:	d14c      	bne.n	80097e2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009750:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800975e:	f043 0220 	orr.w	r2, r3, #32
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e13c      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009782:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e12a      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800979c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097a0:	d10a      	bne.n	80097b8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b2:	d101      	bne.n	80097b8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80097b4:	2301      	movs	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	fb01 f303 	mul.w	r3, r1, r3
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e0:	e068      	b.n	80098b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b41      	cmp	r3, #65	@ 0x41
 80097e6:	d14c      	bne.n	8009882 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d109      	bne.n	800980c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0ec      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009818:	2b00      	cmp	r3, #0
 800981a:	d109      	bne.n	8009830 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009822:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e0da      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800983c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009840:	d10a      	bne.n	8009858 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800984a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800984e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009852:	d101      	bne.n	8009858 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009854:	2301      	movs	r3, #1
 8009856:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009860:	0a1b      	lsrs	r3, r3, #8
 8009862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009874:	69f9      	ldr	r1, [r7, #28]
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009880:	e018      	b.n	80098b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	d309      	bcc.n	80098a0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009892:	f043 0220 	orr.w	r2, r3, #32
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e0a2      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	fb01 f303 	mul.w	r3, r1, r3
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80098b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d107      	bne.n	80098d8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	0c9b      	lsrs	r3, r3, #18
 80098ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e005      	b.n	80098e4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80098d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80098f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	3304      	adds	r3, #4
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	f003 020f 	and.w	r2, r3, #15
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	0e1b      	lsrs	r3, r3, #24
 8009938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	0fda      	lsrs	r2, r3, #31
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	3304      	adds	r3, #4
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009954:	2300      	movs	r3, #0
 8009956:	623b      	str	r3, [r7, #32]
 8009958:	e00a      	b.n	8009970 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	441a      	add	r2, r3
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	440b      	add	r3, r1
 8009966:	7812      	ldrb	r2, [r2, #0]
 8009968:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	3301      	adds	r3, #1
 800996e:	623b      	str	r3, [r7, #32]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	4a1f      	ldr	r2, [pc, #124]	@ (80099f4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8009976:	5cd3      	ldrb	r3, [r2, r3]
 8009978:	461a      	mov	r2, r3
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	4293      	cmp	r3, r2
 800997e:	d3ec      	bcc.n	800995a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b40      	cmp	r3, #64	@ 0x40
 8009984:	d105      	bne.n	8009992 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8009990:	e01e      	b.n	80099d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b41      	cmp	r3, #65	@ 0x41
 8009996:	d105      	bne.n	80099a4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80099a2:	e015      	b.n	80099d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b1f      	cmp	r3, #31
 80099a8:	d808      	bhi.n	80099bc <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2101      	movs	r1, #1
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	fa01 f202 	lsl.w	r2, r1, r2
 80099b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80099ba:	e009      	b.n	80099d0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 021f 	and.w	r2, r3, #31
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2101      	movs	r1, #1
 80099c8:	fa01 f202 	lsl.w	r2, r1, r2
 80099cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e008      	b.n	80099e6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099da:	f043 0208 	orr.w	r2, r3, #8
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	372c      	adds	r7, #44	@ 0x2c
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	08017340 	.word	0x08017340

080099f8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009a2e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d002      	beq.n	8009a3c <HAL_FDCAN_ActivateNotification+0x20>
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d155      	bne.n	8009ae8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4013      	ands	r3, r2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d108      	bne.n	8009a5c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a5a:	e014      	b.n	8009a86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	4013      	ands	r3, r2
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d108      	bne.n	8009a7e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0202 	orr.w	r2, r2, #2
 8009a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a7c:	e003      	b.n	8009a86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2203      	movs	r2, #3
 8009a84:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	4b0f      	ldr	r3, [pc, #60]	@ (8009b08 <HAL_FDCAN_ActivateNotification+0xec>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	6812      	ldr	r2, [r2, #0]
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b0c <HAL_FDCAN_ActivateNotification+0xf0>)
 8009ad8:	695a      	ldr	r2, [r3, #20]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	0f9b      	lsrs	r3, r3, #30
 8009ade:	490b      	ldr	r1, [pc, #44]	@ (8009b0c <HAL_FDCAN_ActivateNotification+0xf0>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e008      	b.n	8009afa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aee:	f043 0202 	orr.w	r2, r3, #2
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
  }
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	3fcfffff 	.word	0x3fcfffff
 8009b0c:	4000a800 	.word	0x4000a800

08009b10 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b096      	sub	sp, #88	@ 0x58
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009b18:	4b9a      	ldr	r3, [pc, #616]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	079b      	lsls	r3, r3, #30
 8009b1e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009b20:	4b98      	ldr	r3, [pc, #608]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	079b      	lsls	r3, r3, #30
 8009b26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b28:	4013      	ands	r3, r2
 8009b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009b36:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b40:	4013      	ands	r3, r2
 8009b42:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b58:	4013      	ands	r3, r2
 8009b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b70:	4013      	ands	r3, r2
 8009b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8009b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b88:	4013      	ands	r3, r2
 8009b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b92:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8009b96:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb6:	0a1b      	lsrs	r3, r3, #8
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d010      	beq.n	8009be2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bd6:	4b6b      	ldr	r3, [pc, #428]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa54 	bl	800a08a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be4:	0a9b      	lsrs	r3, r3, #10
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d01d      	beq.n	8009c2a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	0a9b      	lsrs	r3, r3, #10
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d017      	beq.n	8009c2a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009c02:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c0e:	4013      	ands	r3, r2
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c1c:	4b59      	ldr	r3, [pc, #356]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009c22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa07 	bl	800a038 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c36:	4b54      	ldr	r3, [pc, #336]	@ (8009d88 <HAL_FDCAN_IRQHandler+0x278>)
 8009c38:	400b      	ands	r3, r1
 8009c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c3c:	4a51      	ldr	r2, [pc, #324]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c40:	0f9b      	lsrs	r3, r3, #30
 8009c42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009c44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f9c0 	bl	8009fcc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c58:	4b4b      	ldr	r3, [pc, #300]	@ (8009d88 <HAL_FDCAN_IRQHandler+0x278>)
 8009c5a:	400b      	ands	r3, r1
 8009c5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c5e:	4a49      	ldr	r2, [pc, #292]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c62:	0f9b      	lsrs	r3, r3, #30
 8009c64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f9ba 	bl	8009fe2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00d      	beq.n	8009c90 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c7a:	4b43      	ldr	r3, [pc, #268]	@ (8009d88 <HAL_FDCAN_IRQHandler+0x278>)
 8009c7c:	400b      	ands	r3, r1
 8009c7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c80:	4a40      	ldr	r2, [pc, #256]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c84:	0f9b      	lsrs	r3, r3, #30
 8009c86:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009c88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f7 fd52 	bl	8001734 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00d      	beq.n	8009cb2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8009d88 <HAL_FDCAN_IRQHandler+0x278>)
 8009c9e:	400b      	ands	r3, r1
 8009ca0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ca2:	4a38      	ldr	r2, [pc, #224]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ca6:	0f9b      	lsrs	r3, r3, #30
 8009ca8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009caa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f9a3 	bl	8009ff8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb4:	0adb      	lsrs	r3, r3, #11
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d010      	beq.n	8009ce0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc0:	0adb      	lsrs	r3, r3, #11
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8009cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f997 	bl	800a00e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce2:	0a5b      	lsrs	r3, r3, #9
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01d      	beq.n	8009d28 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	0a5b      	lsrs	r3, r3, #9
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d017      	beq.n	8009d28 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d00:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d18:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009d20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f97d 	bl	800a022 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2a:	0cdb      	lsrs	r3, r3, #19
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	0cdb      	lsrs	r3, r3, #19
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009d48:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f97c 	bl	800a04e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d58:	0c1b      	lsrs	r3, r3, #16
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d016      	beq.n	8009d90 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d010      	beq.n	8009d90 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009d76:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d78:	4b02      	ldr	r3, [pc, #8]	@ (8009d84 <HAL_FDCAN_IRQHandler+0x274>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	e004      	b.n	8009d8c <HAL_FDCAN_IRQHandler+0x27c>
 8009d82:	bf00      	nop
 8009d84:	4000a800 	.word	0x4000a800
 8009d88:	3fcfffff 	.word	0x3fcfffff
 8009d8c:	f000 f969 	bl	800a062 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d92:	0c9b      	lsrs	r3, r3, #18
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d010      	beq.n	8009dbe <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9e:	0c9b      	lsrs	r3, r3, #18
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009db0:	651a      	str	r2, [r3, #80]	@ 0x50
 8009db2:	4b83      	ldr	r3, [pc, #524]	@ (8009fc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f95c 	bl	800a076 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc0:	0c5b      	lsrs	r3, r3, #17
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d015      	beq.n	8009df6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	0c5b      	lsrs	r3, r3, #17
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00f      	beq.n	8009df6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009dde:	651a      	str	r2, [r3, #80]	@ 0x50
 8009de0:	4b77      	ldr	r3, [pc, #476]	@ (8009fc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00d      	beq.n	8009e18 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e02:	4b70      	ldr	r3, [pc, #448]	@ (8009fc4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009e04:	400b      	ands	r3, r1
 8009e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e08:	4a6d      	ldr	r2, [pc, #436]	@ (8009fc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0c:	0f9b      	lsrs	r3, r3, #30
 8009e0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f94d 	bl	800a0b2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e24:	4b67      	ldr	r3, [pc, #412]	@ (8009fc4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009e26:	400b      	ands	r3, r1
 8009e28:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e2a:	4a65      	ldr	r2, [pc, #404]	@ (8009fc0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8009e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e2e:	0f9b      	lsrs	r3, r3, #30
 8009e30:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a60      	ldr	r2, [pc, #384]	@ (8009fc8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f040 80ac 	bne.w	8009fa6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f003 0303 	and.w	r3, r3, #3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 80a4 	beq.w	8009fa6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e72:	4013      	ands	r3, r2
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e80:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009eb0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	6a3a      	ldr	r2, [r7, #32]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009ec8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed0:	69fa      	ldr	r2, [r7, #28]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009edc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8009ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f8e6 	bl	800a0c8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d007      	beq.n	8009f12 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f08:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8009f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f8e6 	bl	800a0de <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	099b      	lsrs	r3, r3, #6
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01a      	beq.n	8009f54 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	099b      	lsrs	r3, r3, #6
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d014      	beq.n	8009f54 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f40:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2240      	movs	r2, #64	@ 0x40
 8009f48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	6939      	ldr	r1, [r7, #16]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f8d0 	bl	800a0f4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d007      	beq.n	8009f6a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f60:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8009f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f8d1 	bl	800a10c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00b      	beq.n	8009f88 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	6a3a      	ldr	r2, [r7, #32]
 8009f76:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	431a      	orrs	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	69fa      	ldr	r2, [r7, #28]
 8009f94:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f874 	bl	800a09e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009fb6:	bf00      	nop
 8009fb8:	3758      	adds	r7, #88	@ 0x58
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	4000a800 	.word	0x4000a800
 8009fc4:	3fcfffff 	.word	0x3fcfffff
 8009fc8:	4000a000 	.word	0x4000a000

08009fcc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800a002:	bf00      	nop
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a092:	bf00      	nop
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a0a6:	bf00      	nop
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a130:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a13a:	4ba7      	ldr	r3, [pc, #668]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a13c:	4013      	ands	r3, r2
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0091      	lsls	r1, r2, #2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	430b      	orrs	r3, r1
 800a148:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a154:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15c:	041a      	lsls	r2, r3, #16
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	4413      	add	r3, r2
 800a170:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a17a:	4b97      	ldr	r3, [pc, #604]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	0091      	lsls	r1, r2, #2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	430b      	orrs	r3, r1
 800a188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a194:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a19c:	041a      	lsls	r2, r3, #16
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a1bc:	4b86      	ldr	r3, [pc, #536]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	0091      	lsls	r1, r2, #2
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6812      	ldr	r2, [r2, #0]
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1de:	041a      	lsls	r2, r3, #16
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a204:	4b74      	ldr	r3, [pc, #464]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a206:	4013      	ands	r3, r2
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	0091      	lsls	r1, r2, #2
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	430b      	orrs	r3, r1
 800a212:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a21e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a226:	041a      	lsls	r2, r3, #16
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800a24c:	4b62      	ldr	r3, [pc, #392]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a24e:	4013      	ands	r3, r2
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	0091      	lsls	r1, r2, #2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	430b      	orrs	r3, r1
 800a25a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a266:	fb02 f303 	mul.w	r3, r2, r3
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4413      	add	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a278:	4b57      	ldr	r3, [pc, #348]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	0091      	lsls	r1, r2, #2
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	430b      	orrs	r3, r1
 800a286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a292:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29a:	041a      	lsls	r2, r3, #16
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a2ba:	4b47      	ldr	r3, [pc, #284]	@ (800a3d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	0091      	lsls	r1, r2, #2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2d4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2dc:	041a      	lsls	r2, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2f0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2f8:	061a      	lsls	r2, r3, #24
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a308:	4b34      	ldr	r3, [pc, #208]	@ (800a3dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a30a:	4413      	add	r3, r2
 800a30c:	009a      	lsls	r2, r3, #2
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	441a      	add	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	441a      	add	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a33e:	fb01 f303 	mul.w	r3, r1, r3
 800a342:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a344:	441a      	add	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a35c:	441a      	add	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a36e:	fb01 f303 	mul.w	r3, r1, r3
 800a372:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a374:	441a      	add	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	441a      	add	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a39e:	fb01 f303 	mul.w	r3, r1, r3
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a3c0:	441a      	add	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ce:	4a04      	ldr	r2, [pc, #16]	@ (800a3e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d915      	bls.n	800a400 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a3d4:	e006      	b.n	800a3e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a3d6:	bf00      	nop
 800a3d8:	ffff0003 	.word	0xffff0003
 800a3dc:	10002b00 	.word	0x10002b00
 800a3e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3ea:	f043 0220 	orr.w	r2, r3, #32
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2203      	movs	r2, #3
 800a3f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e010      	b.n	800a422 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	e005      	b.n	800a414 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3304      	adds	r3, #4
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d3f3      	bcc.n	800a408 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop

0800a430 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800a430:	b480      	push	{r7}
 800a432:	b089      	sub	sp, #36	@ 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a44e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a456:	4313      	orrs	r3, r2
 800a458:	61fb      	str	r3, [r7, #28]
 800a45a:	e00a      	b.n	800a472 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a464:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a46a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a46c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a470:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a47c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a482:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a488:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a490:	4313      	orrs	r3, r2
 800a492:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	fb01 f303 	mul.w	r3, r1, r3
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	e020      	b.n	800a50a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	3303      	adds	r3, #3
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	3302      	adds	r3, #2
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	440b      	add	r3, r1
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a4e0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	440b      	add	r3, r1
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a4ee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a4f8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	3304      	adds	r3, #4
 800a502:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3304      	adds	r3, #4
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	4a06      	ldr	r2, [pc, #24]	@ (800a528 <FDCAN_CopyMessageToRAM+0xf8>)
 800a510:	5cd3      	ldrb	r3, [r2, r3]
 800a512:	461a      	mov	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4293      	cmp	r3, r2
 800a518:	d3d6      	bcc.n	800a4c8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	3724      	adds	r7, #36	@ 0x24
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	08017340 	.word	0x08017340

0800a52c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	@ 0x24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a536:	2300      	movs	r3, #0
 800a538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a53a:	4b89      	ldr	r3, [pc, #548]	@ (800a760 <HAL_GPIO_Init+0x234>)
 800a53c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a53e:	e194      	b.n	800a86a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	2101      	movs	r1, #1
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	fa01 f303 	lsl.w	r3, r1, r3
 800a54c:	4013      	ands	r3, r2
 800a54e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 8186 	beq.w	800a864 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d005      	beq.n	800a570 <HAL_GPIO_Init+0x44>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d130      	bne.n	800a5d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	2203      	movs	r2, #3
 800a57c:	fa02 f303 	lsl.w	r3, r2, r3
 800a580:	43db      	mvns	r3, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	4013      	ands	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	68da      	ldr	r2, [r3, #12]
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	fa02 f303 	lsl.w	r3, r2, r3
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	4313      	orrs	r3, r2
 800a598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	43db      	mvns	r3, r3
 800a5b0:	69ba      	ldr	r2, [r7, #24]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	091b      	lsrs	r3, r3, #4
 800a5bc:	f003 0201 	and.w	r2, r3, #1
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f003 0303 	and.w	r3, r3, #3
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d017      	beq.n	800a60e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	2203      	movs	r2, #3
 800a5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ee:	43db      	mvns	r3, r3
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	4313      	orrs	r3, r2
 800a606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	2b02      	cmp	r3, #2
 800a618:	d123      	bne.n	800a662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	08da      	lsrs	r2, r3, #3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3208      	adds	r2, #8
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	220f      	movs	r2, #15
 800a632:	fa02 f303 	lsl.w	r3, r2, r3
 800a636:	43db      	mvns	r3, r3
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	4013      	ands	r3, r2
 800a63c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	fa02 f303 	lsl.w	r3, r2, r3
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	4313      	orrs	r3, r2
 800a652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	08da      	lsrs	r2, r3, #3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3208      	adds	r2, #8
 800a65c:	69b9      	ldr	r1, [r7, #24]
 800a65e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	2203      	movs	r2, #3
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43db      	mvns	r3, r3
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	4013      	ands	r3, r2
 800a678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f003 0203 	and.w	r2, r3, #3
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	fa02 f303 	lsl.w	r3, r2, r3
 800a68a:	69ba      	ldr	r2, [r7, #24]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 80e0 	beq.w	800a864 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a764 <HAL_GPIO_Init+0x238>)
 800a6a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a6aa:	4a2e      	ldr	r2, [pc, #184]	@ (800a764 <HAL_GPIO_Init+0x238>)
 800a6ac:	f043 0302 	orr.w	r3, r3, #2
 800a6b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a6b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a764 <HAL_GPIO_Init+0x238>)
 800a6b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a6ba:	f003 0302 	and.w	r3, r3, #2
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6c2:	4a29      	ldr	r2, [pc, #164]	@ (800a768 <HAL_GPIO_Init+0x23c>)
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	089b      	lsrs	r3, r3, #2
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	220f      	movs	r2, #15
 800a6da:	fa02 f303 	lsl.w	r3, r2, r3
 800a6de:	43db      	mvns	r3, r3
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a20      	ldr	r2, [pc, #128]	@ (800a76c <HAL_GPIO_Init+0x240>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d052      	beq.n	800a794 <HAL_GPIO_Init+0x268>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a770 <HAL_GPIO_Init+0x244>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d031      	beq.n	800a75a <HAL_GPIO_Init+0x22e>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a1e      	ldr	r2, [pc, #120]	@ (800a774 <HAL_GPIO_Init+0x248>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d02b      	beq.n	800a756 <HAL_GPIO_Init+0x22a>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a1d      	ldr	r2, [pc, #116]	@ (800a778 <HAL_GPIO_Init+0x24c>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d025      	beq.n	800a752 <HAL_GPIO_Init+0x226>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a1c      	ldr	r2, [pc, #112]	@ (800a77c <HAL_GPIO_Init+0x250>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d01f      	beq.n	800a74e <HAL_GPIO_Init+0x222>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a1b      	ldr	r2, [pc, #108]	@ (800a780 <HAL_GPIO_Init+0x254>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d019      	beq.n	800a74a <HAL_GPIO_Init+0x21e>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a1a      	ldr	r2, [pc, #104]	@ (800a784 <HAL_GPIO_Init+0x258>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d013      	beq.n	800a746 <HAL_GPIO_Init+0x21a>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <HAL_GPIO_Init+0x25c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d00d      	beq.n	800a742 <HAL_GPIO_Init+0x216>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a18      	ldr	r2, [pc, #96]	@ (800a78c <HAL_GPIO_Init+0x260>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d007      	beq.n	800a73e <HAL_GPIO_Init+0x212>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a17      	ldr	r2, [pc, #92]	@ (800a790 <HAL_GPIO_Init+0x264>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d101      	bne.n	800a73a <HAL_GPIO_Init+0x20e>
 800a736:	2309      	movs	r3, #9
 800a738:	e02d      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a73a:	230a      	movs	r3, #10
 800a73c:	e02b      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a73e:	2308      	movs	r3, #8
 800a740:	e029      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a742:	2307      	movs	r3, #7
 800a744:	e027      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a746:	2306      	movs	r3, #6
 800a748:	e025      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a74a:	2305      	movs	r3, #5
 800a74c:	e023      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a74e:	2304      	movs	r3, #4
 800a750:	e021      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a752:	2303      	movs	r3, #3
 800a754:	e01f      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a756:	2302      	movs	r3, #2
 800a758:	e01d      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a75a:	2301      	movs	r3, #1
 800a75c:	e01b      	b.n	800a796 <HAL_GPIO_Init+0x26a>
 800a75e:	bf00      	nop
 800a760:	58000080 	.word	0x58000080
 800a764:	58024400 	.word	0x58024400
 800a768:	58000400 	.word	0x58000400
 800a76c:	58020000 	.word	0x58020000
 800a770:	58020400 	.word	0x58020400
 800a774:	58020800 	.word	0x58020800
 800a778:	58020c00 	.word	0x58020c00
 800a77c:	58021000 	.word	0x58021000
 800a780:	58021400 	.word	0x58021400
 800a784:	58021800 	.word	0x58021800
 800a788:	58021c00 	.word	0x58021c00
 800a78c:	58022000 	.word	0x58022000
 800a790:	58022400 	.word	0x58022400
 800a794:	2300      	movs	r3, #0
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	f002 0203 	and.w	r2, r2, #3
 800a79c:	0092      	lsls	r2, r2, #2
 800a79e:	4093      	lsls	r3, r2
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7a6:	4938      	ldr	r1, [pc, #224]	@ (800a888 <HAL_GPIO_Init+0x35c>)
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	089b      	lsrs	r3, r3, #2
 800a7ac:	3302      	adds	r3, #2
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a7b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	43db      	mvns	r3, r3
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a7da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a7e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	43db      	mvns	r3, r3
 800a7ee:	69ba      	ldr	r2, [r7, #24]
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	43db      	mvns	r3, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	4013      	ands	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	43db      	mvns	r3, r3
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	4013      	ands	r3, r2
 800a848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3301      	adds	r3, #1
 800a868:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	fa22 f303 	lsr.w	r3, r2, r3
 800a874:	2b00      	cmp	r3, #0
 800a876:	f47f ae63 	bne.w	800a540 <HAL_GPIO_Init+0x14>
  }
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	3724      	adds	r7, #36	@ 0x24
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	58000400 	.word	0x58000400

0800a88c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	807b      	strh	r3, [r7, #2]
 800a898:	4613      	mov	r3, r2
 800a89a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a89c:	787b      	ldrb	r3, [r7, #1]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8a2:	887a      	ldrh	r2, [r7, #2]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a8a8:	e003      	b.n	800a8b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a8aa:	887b      	ldrh	r3, [r7, #2]
 800a8ac:	041a      	lsls	r2, r3, #16
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	619a      	str	r2, [r3, #24]
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a8d0:	887a      	ldrh	r2, [r7, #2]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	041a      	lsls	r2, r3, #16
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	43d9      	mvns	r1, r3
 800a8dc:	887b      	ldrh	r3, [r7, #2]
 800a8de:	400b      	ands	r3, r1
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	619a      	str	r2, [r3, #24]
}
 800a8e6:	bf00      	nop
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a8fc:	4b19      	ldr	r3, [pc, #100]	@ (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b04      	cmp	r3, #4
 800a906:	d00a      	beq.n	800a91e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a908:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d001      	beq.n	800a91a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e01f      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e01d      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a91e:	4b11      	ldr	r3, [pc, #68]	@ (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f023 0207 	bic.w	r2, r3, #7
 800a926:	490f      	ldr	r1, [pc, #60]	@ (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a92e:	f7fb fa9d 	bl	8005e6c <HAL_GetTick>
 800a932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a934:	e009      	b.n	800a94a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a936:	f7fb fa99 	bl	8005e6c <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a944:	d901      	bls.n	800a94a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e007      	b.n	800a95a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a94a:	4b06      	ldr	r3, [pc, #24]	@ (800a964 <HAL_PWREx_ConfigSupply+0x70>)
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a956:	d1ee      	bne.n	800a936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	58024800 	.word	0x58024800

0800a968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08c      	sub	sp, #48	@ 0x30
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f000 bc48 	b.w	800b20c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8088 	beq.w	800aa9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a98a:	4b99      	ldr	r3, [pc, #612]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a994:	4b96      	ldr	r3, [pc, #600]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a998:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99c:	2b10      	cmp	r3, #16
 800a99e:	d007      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x48>
 800a9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a2:	2b18      	cmp	r3, #24
 800a9a4:	d111      	bne.n	800a9ca <HAL_RCC_OscConfig+0x62>
 800a9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a8:	f003 0303 	and.w	r3, r3, #3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d10c      	bne.n	800a9ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d06d      	beq.n	800aa98 <HAL_RCC_OscConfig+0x130>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d169      	bne.n	800aa98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	f000 bc21 	b.w	800b20c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9d2:	d106      	bne.n	800a9e2 <HAL_RCC_OscConfig+0x7a>
 800a9d4:	4b86      	ldr	r3, [pc, #536]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a85      	ldr	r2, [pc, #532]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	e02e      	b.n	800aa40 <HAL_RCC_OscConfig+0xd8>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCC_OscConfig+0x9c>
 800a9ea:	4b81      	ldr	r3, [pc, #516]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a80      	ldr	r2, [pc, #512]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	4b7e      	ldr	r3, [pc, #504]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a7d      	ldr	r2, [pc, #500]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800a9fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	e01d      	b.n	800aa40 <HAL_RCC_OscConfig+0xd8>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa0c:	d10c      	bne.n	800aa28 <HAL_RCC_OscConfig+0xc0>
 800aa0e:	4b78      	ldr	r3, [pc, #480]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a77      	ldr	r2, [pc, #476]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	4b75      	ldr	r3, [pc, #468]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a74      	ldr	r2, [pc, #464]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	e00b      	b.n	800aa40 <HAL_RCC_OscConfig+0xd8>
 800aa28:	4b71      	ldr	r3, [pc, #452]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a70      	ldr	r2, [pc, #448]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa32:	6013      	str	r3, [r2, #0]
 800aa34:	4b6e      	ldr	r3, [pc, #440]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a6d      	ldr	r2, [pc, #436]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d013      	beq.n	800aa70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa48:	f7fb fa10 	bl	8005e6c <HAL_GetTick>
 800aa4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa4e:	e008      	b.n	800aa62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa50:	f7fb fa0c 	bl	8005e6c <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b64      	cmp	r3, #100	@ 0x64
 800aa5c:	d901      	bls.n	800aa62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e3d4      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa62:	4b63      	ldr	r3, [pc, #396]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0f0      	beq.n	800aa50 <HAL_RCC_OscConfig+0xe8>
 800aa6e:	e014      	b.n	800aa9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa70:	f7fb f9fc 	bl	8005e6c <HAL_GetTick>
 800aa74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa76:	e008      	b.n	800aa8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa78:	f7fb f9f8 	bl	8005e6c <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	2b64      	cmp	r3, #100	@ 0x64
 800aa84:	d901      	bls.n	800aa8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e3c0      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa8a:	4b59      	ldr	r3, [pc, #356]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1f0      	bne.n	800aa78 <HAL_RCC_OscConfig+0x110>
 800aa96:	e000      	b.n	800aa9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 80ca 	beq.w	800ac3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaa8:	4b51      	ldr	r3, [pc, #324]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aab0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aab2:	4b4f      	ldr	r3, [pc, #316]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <HAL_RCC_OscConfig+0x166>
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	2b18      	cmp	r3, #24
 800aac2:	d156      	bne.n	800ab72 <HAL_RCC_OscConfig+0x20a>
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f003 0303 	and.w	r3, r3, #3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d151      	bne.n	800ab72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aace:	4b48      	ldr	r3, [pc, #288]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <HAL_RCC_OscConfig+0x17e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e392      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aae6:	4b42      	ldr	r3, [pc, #264]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f023 0219 	bic.w	r2, r3, #25
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	493f      	ldr	r1, [pc, #252]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf8:	f7fb f9b8 	bl	8005e6c <HAL_GetTick>
 800aafc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab00:	f7fb f9b4 	bl	8005e6c <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e37c      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab12:	4b37      	ldr	r3, [pc, #220]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab1e:	f7fb f9d5 	bl	8005ecc <HAL_GetREVID>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d817      	bhi.n	800ab5c <HAL_RCC_OscConfig+0x1f4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	2b40      	cmp	r3, #64	@ 0x40
 800ab32:	d108      	bne.n	800ab46 <HAL_RCC_OscConfig+0x1de>
 800ab34:	4b2e      	ldr	r3, [pc, #184]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ab3c:	4a2c      	ldr	r2, [pc, #176]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab44:	e07a      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab46:	4b2a      	ldr	r3, [pc, #168]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	031b      	lsls	r3, r3, #12
 800ab54:	4926      	ldr	r1, [pc, #152]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab5a:	e06f      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab5c:	4b24      	ldr	r3, [pc, #144]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	4921      	ldr	r1, [pc, #132]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab70:	e064      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d047      	beq.n	800ac0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab7a:	4b1d      	ldr	r3, [pc, #116]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f023 0219 	bic.w	r2, r3, #25
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	491a      	ldr	r1, [pc, #104]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8c:	f7fb f96e 	bl	8005e6c <HAL_GetTick>
 800ab90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab94:	f7fb f96a 	bl	8005e6c <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e332      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aba6:	4b12      	ldr	r3, [pc, #72]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0304 	and.w	r3, r3, #4
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d0f0      	beq.n	800ab94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abb2:	f7fb f98b 	bl	8005ecc <HAL_GetREVID>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d819      	bhi.n	800abf4 <HAL_RCC_OscConfig+0x28c>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	2b40      	cmp	r3, #64	@ 0x40
 800abc6:	d108      	bne.n	800abda <HAL_RCC_OscConfig+0x272>
 800abc8:	4b09      	ldr	r3, [pc, #36]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800abd0:	4a07      	ldr	r2, [pc, #28]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800abd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abd6:	6053      	str	r3, [r2, #4]
 800abd8:	e030      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
 800abda:	4b05      	ldr	r3, [pc, #20]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	031b      	lsls	r3, r3, #12
 800abe8:	4901      	ldr	r1, [pc, #4]	@ (800abf0 <HAL_RCC_OscConfig+0x288>)
 800abea:	4313      	orrs	r3, r2
 800abec:	604b      	str	r3, [r1, #4]
 800abee:	e025      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
 800abf0:	58024400 	.word	0x58024400
 800abf4:	4b9a      	ldr	r3, [pc, #616]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	061b      	lsls	r3, r3, #24
 800ac02:	4997      	ldr	r1, [pc, #604]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	604b      	str	r3, [r1, #4]
 800ac08:	e018      	b.n	800ac3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac0a:	4b95      	ldr	r3, [pc, #596]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a94      	ldr	r2, [pc, #592]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac16:	f7fb f929 	bl	8005e6c <HAL_GetTick>
 800ac1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac1e:	f7fb f925 	bl	8005e6c <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e2ed      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac30:	4b8b      	ldr	r3, [pc, #556]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f0      	bne.n	800ac1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80a9 	beq.w	800ad9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac4a:	4b85      	ldr	r3, [pc, #532]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac54:	4b82      	ldr	r3, [pc, #520]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d007      	beq.n	800ac70 <HAL_RCC_OscConfig+0x308>
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b18      	cmp	r3, #24
 800ac64:	d13a      	bne.n	800acdc <HAL_RCC_OscConfig+0x374>
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f003 0303 	and.w	r3, r3, #3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d135      	bne.n	800acdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac70:	4b7b      	ldr	r3, [pc, #492]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <HAL_RCC_OscConfig+0x320>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	2b80      	cmp	r3, #128	@ 0x80
 800ac82:	d001      	beq.n	800ac88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e2c1      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac88:	f7fb f920 	bl	8005ecc <HAL_GetREVID>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d817      	bhi.n	800acc6 <HAL_RCC_OscConfig+0x35e>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	2b20      	cmp	r3, #32
 800ac9c:	d108      	bne.n	800acb0 <HAL_RCC_OscConfig+0x348>
 800ac9e:	4b70      	ldr	r3, [pc, #448]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800aca6:	4a6e      	ldr	r2, [pc, #440]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800aca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acae:	e075      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acb0:	4b6b      	ldr	r3, [pc, #428]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	069b      	lsls	r3, r3, #26
 800acbe:	4968      	ldr	r1, [pc, #416]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800acc0:	4313      	orrs	r3, r2
 800acc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acc4:	e06a      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acc6:	4b66      	ldr	r3, [pc, #408]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	061b      	lsls	r3, r3, #24
 800acd4:	4962      	ldr	r1, [pc, #392]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acda:	e05f      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d042      	beq.n	800ad6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ace4:	4b5e      	ldr	r3, [pc, #376]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a5d      	ldr	r2, [pc, #372]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf0:	f7fb f8bc 	bl	8005e6c <HAL_GetTick>
 800acf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acf6:	e008      	b.n	800ad0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800acf8:	f7fb f8b8 	bl	8005e6c <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d901      	bls.n	800ad0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e280      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad0a:	4b55      	ldr	r3, [pc, #340]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0f0      	beq.n	800acf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad16:	f7fb f8d9 	bl	8005ecc <HAL_GetREVID>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d817      	bhi.n	800ad54 <HAL_RCC_OscConfig+0x3ec>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	2b20      	cmp	r3, #32
 800ad2a:	d108      	bne.n	800ad3e <HAL_RCC_OscConfig+0x3d6>
 800ad2c:	4b4c      	ldr	r3, [pc, #304]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ad34:	4a4a      	ldr	r2, [pc, #296]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad3a:	6053      	str	r3, [r2, #4]
 800ad3c:	e02e      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
 800ad3e:	4b48      	ldr	r3, [pc, #288]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	069b      	lsls	r3, r3, #26
 800ad4c:	4944      	ldr	r1, [pc, #272]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	604b      	str	r3, [r1, #4]
 800ad52:	e023      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
 800ad54:	4b42      	ldr	r3, [pc, #264]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	061b      	lsls	r3, r3, #24
 800ad62:	493f      	ldr	r1, [pc, #252]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	60cb      	str	r3, [r1, #12]
 800ad68:	e018      	b.n	800ad9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad6a:	4b3d      	ldr	r3, [pc, #244]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a3c      	ldr	r2, [pc, #240]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad76:	f7fb f879 	bl	8005e6c <HAL_GetTick>
 800ad7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad7c:	e008      	b.n	800ad90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad7e:	f7fb f875 	bl	8005e6c <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d901      	bls.n	800ad90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e23d      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad90:	4b33      	ldr	r3, [pc, #204]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f0      	bne.n	800ad7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d036      	beq.n	800ae16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d019      	beq.n	800ade4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adb0:	4b2b      	ldr	r3, [pc, #172]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800adb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adb4:	4a2a      	ldr	r2, [pc, #168]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adbc:	f7fb f856 	bl	8005e6c <HAL_GetTick>
 800adc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adc4:	f7fb f852 	bl	8005e6c <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e21a      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800add6:	4b22      	ldr	r3, [pc, #136]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800add8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f0      	beq.n	800adc4 <HAL_RCC_OscConfig+0x45c>
 800ade2:	e018      	b.n	800ae16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ade4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ade6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800adea:	f023 0301 	bic.w	r3, r3, #1
 800adee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adf0:	f7fb f83c 	bl	8005e6c <HAL_GetTick>
 800adf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adf6:	e008      	b.n	800ae0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf8:	f7fb f838 	bl	8005e6c <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d901      	bls.n	800ae0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e200      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae0a:	4b15      	ldr	r3, [pc, #84]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ae0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1f0      	bne.n	800adf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d039      	beq.n	800ae96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01c      	beq.n	800ae64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ae30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae36:	f7fb f819 	bl	8005e6c <HAL_GetTick>
 800ae3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae3e:	f7fb f815 	bl	8005e6c <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e1dd      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae50:	4b03      	ldr	r3, [pc, #12]	@ (800ae60 <HAL_RCC_OscConfig+0x4f8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d0f0      	beq.n	800ae3e <HAL_RCC_OscConfig+0x4d6>
 800ae5c:	e01b      	b.n	800ae96 <HAL_RCC_OscConfig+0x52e>
 800ae5e:	bf00      	nop
 800ae60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae64:	4b9b      	ldr	r3, [pc, #620]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a9a      	ldr	r2, [pc, #616]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800ae6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae70:	f7fa fffc 	bl	8005e6c <HAL_GetTick>
 800ae74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae76:	e008      	b.n	800ae8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae78:	f7fa fff8 	bl	8005e6c <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d901      	bls.n	800ae8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e1c0      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae8a:	4b92      	ldr	r3, [pc, #584]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1f0      	bne.n	800ae78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0304 	and.w	r3, r3, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 8081 	beq.w	800afa6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aea4:	4b8c      	ldr	r3, [pc, #560]	@ (800b0d8 <HAL_RCC_OscConfig+0x770>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a8b      	ldr	r2, [pc, #556]	@ (800b0d8 <HAL_RCC_OscConfig+0x770>)
 800aeaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeb0:	f7fa ffdc 	bl	8005e6c <HAL_GetTick>
 800aeb4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeb8:	f7fa ffd8 	bl	8005e6c <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b64      	cmp	r3, #100	@ 0x64
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e1a0      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeca:	4b83      	ldr	r3, [pc, #524]	@ (800b0d8 <HAL_RCC_OscConfig+0x770>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0f0      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d106      	bne.n	800aeec <HAL_RCC_OscConfig+0x584>
 800aede:	4b7d      	ldr	r3, [pc, #500]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee2:	4a7c      	ldr	r2, [pc, #496]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	6713      	str	r3, [r2, #112]	@ 0x70
 800aeea:	e02d      	b.n	800af48 <HAL_RCC_OscConfig+0x5e0>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10c      	bne.n	800af0e <HAL_RCC_OscConfig+0x5a6>
 800aef4:	4b77      	ldr	r3, [pc, #476]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800aef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef8:	4a76      	ldr	r2, [pc, #472]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800aefa:	f023 0301 	bic.w	r3, r3, #1
 800aefe:	6713      	str	r3, [r2, #112]	@ 0x70
 800af00:	4b74      	ldr	r3, [pc, #464]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af04:	4a73      	ldr	r2, [pc, #460]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af06:	f023 0304 	bic.w	r3, r3, #4
 800af0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800af0c:	e01c      	b.n	800af48 <HAL_RCC_OscConfig+0x5e0>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b05      	cmp	r3, #5
 800af14:	d10c      	bne.n	800af30 <HAL_RCC_OscConfig+0x5c8>
 800af16:	4b6f      	ldr	r3, [pc, #444]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af1a:	4a6e      	ldr	r2, [pc, #440]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af1c:	f043 0304 	orr.w	r3, r3, #4
 800af20:	6713      	str	r3, [r2, #112]	@ 0x70
 800af22:	4b6c      	ldr	r3, [pc, #432]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af26:	4a6b      	ldr	r2, [pc, #428]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800af2e:	e00b      	b.n	800af48 <HAL_RCC_OscConfig+0x5e0>
 800af30:	4b68      	ldr	r3, [pc, #416]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af34:	4a67      	ldr	r2, [pc, #412]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800af3c:	4b65      	ldr	r3, [pc, #404]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af40:	4a64      	ldr	r2, [pc, #400]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af42:	f023 0304 	bic.w	r3, r3, #4
 800af46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d015      	beq.n	800af7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af50:	f7fa ff8c 	bl	8005e6c <HAL_GetTick>
 800af54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af56:	e00a      	b.n	800af6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af58:	f7fa ff88 	bl	8005e6c <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af66:	4293      	cmp	r3, r2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e14e      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6e:	4b59      	ldr	r3, [pc, #356]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0ee      	beq.n	800af58 <HAL_RCC_OscConfig+0x5f0>
 800af7a:	e014      	b.n	800afa6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af7c:	f7fa ff76 	bl	8005e6c <HAL_GetTick>
 800af80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af82:	e00a      	b.n	800af9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af84:	f7fa ff72 	bl	8005e6c <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af92:	4293      	cmp	r3, r2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e138      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af9a:	4b4e      	ldr	r3, [pc, #312]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800af9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1ee      	bne.n	800af84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 812d 	beq.w	800b20a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800afb0:	4b48      	ldr	r3, [pc, #288]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afb8:	2b18      	cmp	r3, #24
 800afba:	f000 80bd 	beq.w	800b138 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	f040 809e 	bne.w	800b104 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afc8:	4b42      	ldr	r3, [pc, #264]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a41      	ldr	r2, [pc, #260]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800afce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd4:	f7fa ff4a 	bl	8005e6c <HAL_GetTick>
 800afd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afda:	e008      	b.n	800afee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afdc:	f7fa ff46 	bl	8005e6c <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d901      	bls.n	800afee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e10e      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afee:	4b39      	ldr	r3, [pc, #228]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1f0      	bne.n	800afdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800affa:	4b36      	ldr	r3, [pc, #216]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800affc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800affe:	4b37      	ldr	r3, [pc, #220]	@ (800b0dc <HAL_RCC_OscConfig+0x774>)
 800b000:	4013      	ands	r3, r2
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b00a:	0112      	lsls	r2, r2, #4
 800b00c:	430a      	orrs	r2, r1
 800b00e:	4931      	ldr	r1, [pc, #196]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b010:	4313      	orrs	r3, r2
 800b012:	628b      	str	r3, [r1, #40]	@ 0x28
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b018:	3b01      	subs	r3, #1
 800b01a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b022:	3b01      	subs	r3, #1
 800b024:	025b      	lsls	r3, r3, #9
 800b026:	b29b      	uxth	r3, r3
 800b028:	431a      	orrs	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02e:	3b01      	subs	r3, #1
 800b030:	041b      	lsls	r3, r3, #16
 800b032:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03c:	3b01      	subs	r3, #1
 800b03e:	061b      	lsls	r3, r3, #24
 800b040:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b044:	4923      	ldr	r1, [pc, #140]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b046:	4313      	orrs	r3, r2
 800b048:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b04a:	4b22      	ldr	r3, [pc, #136]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04e:	4a21      	ldr	r2, [pc, #132]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b050:	f023 0301 	bic.w	r3, r3, #1
 800b054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b056:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b05a:	4b21      	ldr	r3, [pc, #132]	@ (800b0e0 <HAL_RCC_OscConfig+0x778>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b062:	00d2      	lsls	r2, r2, #3
 800b064:	491b      	ldr	r1, [pc, #108]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b066:	4313      	orrs	r3, r2
 800b068:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b06a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06e:	f023 020c 	bic.w	r2, r3, #12
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b076:	4917      	ldr	r1, [pc, #92]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b07c:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b080:	f023 0202 	bic.w	r2, r3, #2
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b088:	4912      	ldr	r1, [pc, #72]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b08e:	4b11      	ldr	r3, [pc, #68]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b092:	4a10      	ldr	r2, [pc, #64]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b09a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09e:	4a0d      	ldr	r2, [pc, #52]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b0b2:	4b08      	ldr	r3, [pc, #32]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b6:	4a07      	ldr	r2, [pc, #28]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0b8:	f043 0301 	orr.w	r3, r3, #1
 800b0bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0be:	4b05      	ldr	r3, [pc, #20]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a04      	ldr	r2, [pc, #16]	@ (800b0d4 <HAL_RCC_OscConfig+0x76c>)
 800b0c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ca:	f7fa fecf 	bl	8005e6c <HAL_GetTick>
 800b0ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0d0:	e011      	b.n	800b0f6 <HAL_RCC_OscConfig+0x78e>
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	58024800 	.word	0x58024800
 800b0dc:	fffffc0c 	.word	0xfffffc0c
 800b0e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e4:	f7fa fec2 	bl	8005e6c <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e08a      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0f6:	4b47      	ldr	r3, [pc, #284]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0f0      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x77c>
 800b102:	e082      	b.n	800b20a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b104:	4b43      	ldr	r3, [pc, #268]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a42      	ldr	r2, [pc, #264]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b10a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b110:	f7fa feac 	bl	8005e6c <HAL_GetTick>
 800b114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b118:	f7fa fea8 	bl	8005e6c <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e070      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b12a:	4b3a      	ldr	r3, [pc, #232]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f0      	bne.n	800b118 <HAL_RCC_OscConfig+0x7b0>
 800b136:	e068      	b.n	800b20a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b138:	4b36      	ldr	r3, [pc, #216]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b13e:	4b35      	ldr	r3, [pc, #212]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b142:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d031      	beq.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	f003 0203 	and.w	r2, r3, #3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b156:	429a      	cmp	r2, r3
 800b158:	d12a      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b166:	429a      	cmp	r2, r3
 800b168:	d122      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b174:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b176:	429a      	cmp	r2, r3
 800b178:	d11a      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	0a5b      	lsrs	r3, r3, #9
 800b17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b186:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b188:	429a      	cmp	r2, r3
 800b18a:	d111      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	0c1b      	lsrs	r3, r3, #16
 800b190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b198:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d108      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	0e1b      	lsrs	r3, r3, #24
 800b1a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d001      	beq.n	800b1b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e02b      	b.n	800b20c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b1b4:	4b17      	ldr	r3, [pc, #92]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b8:	08db      	lsrs	r3, r3, #3
 800b1ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d01f      	beq.n	800b20a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b1ca:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	4a11      	ldr	r2, [pc, #68]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b1d0:	f023 0301 	bic.w	r3, r3, #1
 800b1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1d6:	f7fa fe49 	bl	8005e6c <HAL_GetTick>
 800b1da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b1dc:	bf00      	nop
 800b1de:	f7fa fe45 	bl	8005e6c <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d0f9      	beq.n	800b1de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b218 <HAL_RCC_OscConfig+0x8b0>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1f6:	00d2      	lsls	r2, r2, #3
 800b1f8:	4906      	ldr	r1, [pc, #24]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b1fe:	4b05      	ldr	r3, [pc, #20]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	4a04      	ldr	r2, [pc, #16]	@ (800b214 <HAL_RCC_OscConfig+0x8ac>)
 800b204:	f043 0301 	orr.w	r3, r3, #1
 800b208:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3730      	adds	r7, #48	@ 0x30
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	58024400 	.word	0x58024400
 800b218:	ffff0007 	.word	0xffff0007

0800b21c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e19c      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b230:	4b8a      	ldr	r3, [pc, #552]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d910      	bls.n	800b260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b23e:	4b87      	ldr	r3, [pc, #540]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f023 020f 	bic.w	r2, r3, #15
 800b246:	4985      	ldr	r1, [pc, #532]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b24e:	4b83      	ldr	r3, [pc, #524]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 030f 	and.w	r3, r3, #15
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d001      	beq.n	800b260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e184      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0304 	and.w	r3, r3, #4
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d010      	beq.n	800b28e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	4b7b      	ldr	r3, [pc, #492]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b278:	429a      	cmp	r2, r3
 800b27a:	d908      	bls.n	800b28e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b27c:	4b78      	ldr	r3, [pc, #480]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	4975      	ldr	r1, [pc, #468]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0308 	and.w	r3, r3, #8
 800b296:	2b00      	cmp	r3, #0
 800b298:	d010      	beq.n	800b2bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	695a      	ldr	r2, [r3, #20]
 800b29e:	4b70      	ldr	r3, [pc, #448]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d908      	bls.n	800b2bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2aa:	4b6d      	ldr	r3, [pc, #436]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	496a      	ldr	r1, [pc, #424]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0310 	and.w	r3, r3, #16
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d010      	beq.n	800b2ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	699a      	ldr	r2, [r3, #24]
 800b2cc:	4b64      	ldr	r3, [pc, #400]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d908      	bls.n	800b2ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2d8:	4b61      	ldr	r3, [pc, #388]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	495e      	ldr	r1, [pc, #376]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0320 	and.w	r3, r3, #32
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d010      	beq.n	800b318 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69da      	ldr	r2, [r3, #28]
 800b2fa:	4b59      	ldr	r3, [pc, #356]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b302:	429a      	cmp	r2, r3
 800b304:	d908      	bls.n	800b318 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b306:	4b56      	ldr	r3, [pc, #344]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	4953      	ldr	r1, [pc, #332]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b314:	4313      	orrs	r3, r2
 800b316:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d010      	beq.n	800b346 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	4b4d      	ldr	r3, [pc, #308]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	429a      	cmp	r2, r3
 800b332:	d908      	bls.n	800b346 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b334:	4b4a      	ldr	r3, [pc, #296]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	f023 020f 	bic.w	r2, r3, #15
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	4947      	ldr	r1, [pc, #284]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b342:	4313      	orrs	r3, r2
 800b344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d055      	beq.n	800b3fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b352:	4b43      	ldr	r3, [pc, #268]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	4940      	ldr	r1, [pc, #256]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b360:	4313      	orrs	r3, r2
 800b362:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d107      	bne.n	800b37c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b36c:	4b3c      	ldr	r3, [pc, #240]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d121      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e0f6      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d107      	bne.n	800b394 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b384:	4b36      	ldr	r3, [pc, #216]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d115      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e0ea      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d107      	bne.n	800b3ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b39c:	4b30      	ldr	r3, [pc, #192]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d109      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e0de      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3ac:	4b2c      	ldr	r3, [pc, #176]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e0d6      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3bc:	4b28      	ldr	r3, [pc, #160]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	f023 0207 	bic.w	r2, r3, #7
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4925      	ldr	r1, [pc, #148]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ce:	f7fa fd4d 	bl	8005e6c <HAL_GetTick>
 800b3d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3d4:	e00a      	b.n	800b3ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3d6:	f7fa fd49 	bl	8005e6c <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d901      	bls.n	800b3ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e0be      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d1eb      	bne.n	800b3d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0302 	and.w	r3, r3, #2
 800b406:	2b00      	cmp	r3, #0
 800b408:	d010      	beq.n	800b42c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	4b14      	ldr	r3, [pc, #80]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	f003 030f 	and.w	r3, r3, #15
 800b416:	429a      	cmp	r2, r3
 800b418:	d208      	bcs.n	800b42c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b41a:	4b11      	ldr	r3, [pc, #68]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	f023 020f 	bic.w	r2, r3, #15
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	490e      	ldr	r1, [pc, #56]	@ (800b460 <HAL_RCC_ClockConfig+0x244>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b42c:	4b0b      	ldr	r3, [pc, #44]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 030f 	and.w	r3, r3, #15
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d214      	bcs.n	800b464 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b43a:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f023 020f 	bic.w	r2, r3, #15
 800b442:	4906      	ldr	r1, [pc, #24]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	4313      	orrs	r3, r2
 800b448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b44a:	4b04      	ldr	r3, [pc, #16]	@ (800b45c <HAL_RCC_ClockConfig+0x240>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d005      	beq.n	800b464 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e086      	b.n	800b56a <HAL_RCC_ClockConfig+0x34e>
 800b45c:	52002000 	.word	0x52002000
 800b460:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d010      	beq.n	800b492 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	4b3f      	ldr	r3, [pc, #252]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d208      	bcs.n	800b492 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b480:	4b3c      	ldr	r3, [pc, #240]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	4939      	ldr	r1, [pc, #228]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0308 	and.w	r3, r3, #8
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d010      	beq.n	800b4c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	695a      	ldr	r2, [r3, #20]
 800b4a2:	4b34      	ldr	r3, [pc, #208]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d208      	bcs.n	800b4c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4ae:	4b31      	ldr	r3, [pc, #196]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	492e      	ldr	r1, [pc, #184]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0310 	and.w	r3, r3, #16
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d010      	beq.n	800b4ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699a      	ldr	r2, [r3, #24]
 800b4d0:	4b28      	ldr	r3, [pc, #160]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d208      	bcs.n	800b4ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4dc:	4b25      	ldr	r3, [pc, #148]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	4922      	ldr	r1, [pc, #136]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d010      	beq.n	800b51c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b506:	429a      	cmp	r2, r3
 800b508:	d208      	bcs.n	800b51c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b50a:	4b1a      	ldr	r3, [pc, #104]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	69db      	ldr	r3, [r3, #28]
 800b516:	4917      	ldr	r1, [pc, #92]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b51c:	f000 f834 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800b520:	4602      	mov	r2, r0
 800b522:	4b14      	ldr	r3, [pc, #80]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	0a1b      	lsrs	r3, r3, #8
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	4912      	ldr	r1, [pc, #72]	@ (800b578 <HAL_RCC_ClockConfig+0x35c>)
 800b52e:	5ccb      	ldrb	r3, [r1, r3]
 800b530:	f003 031f 	and.w	r3, r3, #31
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
 800b538:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b53a:	4b0e      	ldr	r3, [pc, #56]	@ (800b574 <HAL_RCC_ClockConfig+0x358>)
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	4a0d      	ldr	r2, [pc, #52]	@ (800b578 <HAL_RCC_ClockConfig+0x35c>)
 800b544:	5cd3      	ldrb	r3, [r2, r3]
 800b546:	f003 031f 	and.w	r3, r3, #31
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	fa22 f303 	lsr.w	r3, r2, r3
 800b550:	4a0a      	ldr	r2, [pc, #40]	@ (800b57c <HAL_RCC_ClockConfig+0x360>)
 800b552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b554:	4a0a      	ldr	r2, [pc, #40]	@ (800b580 <HAL_RCC_ClockConfig+0x364>)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b55a:	4b0a      	ldr	r3, [pc, #40]	@ (800b584 <HAL_RCC_ClockConfig+0x368>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fa f8d0 	bl	8005704 <HAL_InitTick>
 800b564:	4603      	mov	r3, r0
 800b566:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	58024400 	.word	0x58024400
 800b578:	0801731c 	.word	0x0801731c
 800b57c:	24000058 	.word	0x24000058
 800b580:	24000054 	.word	0x24000054
 800b584:	24000074 	.word	0x24000074

0800b588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	b089      	sub	sp, #36	@ 0x24
 800b58c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b58e:	4bb3      	ldr	r3, [pc, #716]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b596:	2b18      	cmp	r3, #24
 800b598:	f200 8155 	bhi.w	800b846 <HAL_RCC_GetSysClockFreq+0x2be>
 800b59c:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a2:	bf00      	nop
 800b5a4:	0800b609 	.word	0x0800b609
 800b5a8:	0800b847 	.word	0x0800b847
 800b5ac:	0800b847 	.word	0x0800b847
 800b5b0:	0800b847 	.word	0x0800b847
 800b5b4:	0800b847 	.word	0x0800b847
 800b5b8:	0800b847 	.word	0x0800b847
 800b5bc:	0800b847 	.word	0x0800b847
 800b5c0:	0800b847 	.word	0x0800b847
 800b5c4:	0800b62f 	.word	0x0800b62f
 800b5c8:	0800b847 	.word	0x0800b847
 800b5cc:	0800b847 	.word	0x0800b847
 800b5d0:	0800b847 	.word	0x0800b847
 800b5d4:	0800b847 	.word	0x0800b847
 800b5d8:	0800b847 	.word	0x0800b847
 800b5dc:	0800b847 	.word	0x0800b847
 800b5e0:	0800b847 	.word	0x0800b847
 800b5e4:	0800b635 	.word	0x0800b635
 800b5e8:	0800b847 	.word	0x0800b847
 800b5ec:	0800b847 	.word	0x0800b847
 800b5f0:	0800b847 	.word	0x0800b847
 800b5f4:	0800b847 	.word	0x0800b847
 800b5f8:	0800b847 	.word	0x0800b847
 800b5fc:	0800b847 	.word	0x0800b847
 800b600:	0800b847 	.word	0x0800b847
 800b604:	0800b63b 	.word	0x0800b63b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b608:	4b94      	ldr	r3, [pc, #592]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0320 	and.w	r3, r3, #32
 800b610:	2b00      	cmp	r3, #0
 800b612:	d009      	beq.n	800b628 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b614:	4b91      	ldr	r3, [pc, #580]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	08db      	lsrs	r3, r3, #3
 800b61a:	f003 0303 	and.w	r3, r3, #3
 800b61e:	4a90      	ldr	r2, [pc, #576]	@ (800b860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b620:	fa22 f303 	lsr.w	r3, r2, r3
 800b624:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b626:	e111      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b628:	4b8d      	ldr	r3, [pc, #564]	@ (800b860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b62a:	61bb      	str	r3, [r7, #24]
      break;
 800b62c:	e10e      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b62e:	4b8d      	ldr	r3, [pc, #564]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b630:	61bb      	str	r3, [r7, #24]
      break;
 800b632:	e10b      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b634:	4b8c      	ldr	r3, [pc, #560]	@ (800b868 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b636:	61bb      	str	r3, [r7, #24]
      break;
 800b638:	e108      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b63a:	4b88      	ldr	r3, [pc, #544]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b644:	4b85      	ldr	r3, [pc, #532]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	091b      	lsrs	r3, r3, #4
 800b64a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b64e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b650:	4b82      	ldr	r3, [pc, #520]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b65a:	4b80      	ldr	r3, [pc, #512]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b65e:	08db      	lsrs	r3, r3, #3
 800b660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	fb02 f303 	mul.w	r3, r2, r3
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80e1 	beq.w	800b840 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b02      	cmp	r3, #2
 800b682:	f000 8083 	beq.w	800b78c <HAL_RCC_GetSysClockFreq+0x204>
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	f200 80a1 	bhi.w	800b7d0 <HAL_RCC_GetSysClockFreq+0x248>
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <HAL_RCC_GetSysClockFreq+0x114>
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d056      	beq.n	800b748 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b69a:	e099      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b69c:	4b6f      	ldr	r3, [pc, #444]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0320 	and.w	r3, r3, #32
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d02d      	beq.n	800b704 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a8:	4b6c      	ldr	r3, [pc, #432]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	08db      	lsrs	r3, r3, #3
 800b6ae:	f003 0303 	and.w	r3, r3, #3
 800b6b2:	4a6b      	ldr	r2, [pc, #428]	@ (800b860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	ee07 3a90 	vmov	s15, r3
 800b6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d2:	4b62      	ldr	r3, [pc, #392]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b702:	e087      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b870 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b716:	4b51      	ldr	r3, [pc, #324]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b726:	ed97 6a02 	vldr	s12, [r7, #8]
 800b72a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b746:	e065      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b752:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b75a:	4b40      	ldr	r3, [pc, #256]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b76e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b77a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b78a:	e043      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b796:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b878 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79e:	4b2f      	ldr	r3, [pc, #188]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7ce:	e021      	b.n	800b814 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b874 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ea:	ee07 3a90 	vmov	s15, r3
 800b7ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b812:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b814:	4b11      	ldr	r3, [pc, #68]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b818:	0a5b      	lsrs	r3, r3, #9
 800b81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81e:	3301      	adds	r3, #1
 800b820:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	ee07 3a90 	vmov	s15, r3
 800b828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b82c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b838:	ee17 3a90 	vmov	r3, s15
 800b83c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b83e:	e005      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b840:	2300      	movs	r3, #0
 800b842:	61bb      	str	r3, [r7, #24]
      break;
 800b844:	e002      	b.n	800b84c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b846:	4b07      	ldr	r3, [pc, #28]	@ (800b864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b848:	61bb      	str	r3, [r7, #24]
      break;
 800b84a:	bf00      	nop
  }

  return sysclockfreq;
 800b84c:	69bb      	ldr	r3, [r7, #24]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3724      	adds	r7, #36	@ 0x24
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	58024400 	.word	0x58024400
 800b860:	03d09000 	.word	0x03d09000
 800b864:	003d0900 	.word	0x003d0900
 800b868:	007a1200 	.word	0x007a1200
 800b86c:	46000000 	.word	0x46000000
 800b870:	4c742400 	.word	0x4c742400
 800b874:	4a742400 	.word	0x4a742400
 800b878:	4af42400 	.word	0x4af42400

0800b87c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b882:	f7ff fe81 	bl	800b588 <HAL_RCC_GetSysClockFreq>
 800b886:	4602      	mov	r2, r0
 800b888:	4b10      	ldr	r3, [pc, #64]	@ (800b8cc <HAL_RCC_GetHCLKFreq+0x50>)
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	0a1b      	lsrs	r3, r3, #8
 800b88e:	f003 030f 	and.w	r3, r3, #15
 800b892:	490f      	ldr	r1, [pc, #60]	@ (800b8d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b894:	5ccb      	ldrb	r3, [r1, r3]
 800b896:	f003 031f 	and.w	r3, r3, #31
 800b89a:	fa22 f303 	lsr.w	r3, r2, r3
 800b89e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b8cc <HAL_RCC_GetHCLKFreq+0x50>)
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	4a09      	ldr	r2, [pc, #36]	@ (800b8d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8aa:	5cd3      	ldrb	r3, [r2, r3]
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8b6:	4a07      	ldr	r2, [pc, #28]	@ (800b8d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8ba:	4a07      	ldr	r2, [pc, #28]	@ (800b8d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8c0:	4b04      	ldr	r3, [pc, #16]	@ (800b8d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	58024400 	.word	0x58024400
 800b8d0:	0801731c 	.word	0x0801731c
 800b8d4:	24000058 	.word	0x24000058
 800b8d8:	24000054 	.word	0x24000054

0800b8dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8e0:	f7ff ffcc 	bl	800b87c <HAL_RCC_GetHCLKFreq>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	4b06      	ldr	r3, [pc, #24]	@ (800b900 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	091b      	lsrs	r3, r3, #4
 800b8ec:	f003 0307 	and.w	r3, r3, #7
 800b8f0:	4904      	ldr	r1, [pc, #16]	@ (800b904 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8f2:	5ccb      	ldrb	r3, [r1, r3]
 800b8f4:	f003 031f 	and.w	r3, r3, #31
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	58024400 	.word	0x58024400
 800b904:	0801731c 	.word	0x0801731c

0800b908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b90c:	f7ff ffb6 	bl	800b87c <HAL_RCC_GetHCLKFreq>
 800b910:	4602      	mov	r2, r0
 800b912:	4b06      	ldr	r3, [pc, #24]	@ (800b92c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	0a1b      	lsrs	r3, r3, #8
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	4904      	ldr	r1, [pc, #16]	@ (800b930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b91e:	5ccb      	ldrb	r3, [r1, r3]
 800b920:	f003 031f 	and.w	r3, r3, #31
 800b924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b928:	4618      	mov	r0, r3
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	58024400 	.word	0x58024400
 800b930:	0801731c 	.word	0x0801731c

0800b934 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	223f      	movs	r2, #63	@ 0x3f
 800b942:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b944:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f003 0207 	and.w	r2, r3, #7
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b950:	4b17      	ldr	r3, [pc, #92]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b95c:	4b14      	ldr	r3, [pc, #80]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	f003 020f 	and.w	r2, r3, #15
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b968:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b974:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b980:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b98c:	4b08      	ldr	r3, [pc, #32]	@ (800b9b0 <HAL_RCC_GetClockConfig+0x7c>)
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b998:	4b06      	ldr	r3, [pc, #24]	@ (800b9b4 <HAL_RCC_GetClockConfig+0x80>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 020f 	and.w	r2, r3, #15
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	601a      	str	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	58024400 	.word	0x58024400
 800b9b4:	52002000 	.word	0x52002000

0800b9b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9bc:	b0ca      	sub	sp, #296	@ 0x128
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b9dc:	2500      	movs	r5, #0
 800b9de:	ea54 0305 	orrs.w	r3, r4, r5
 800b9e2:	d049      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9ee:	d02f      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b9f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9f4:	d828      	bhi.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9fa:	d01a      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b9fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ba00:	d822      	bhi.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ba06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba0a:	d007      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ba0c:	e01c      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba0e:	4bb8      	ldr	r3, [pc, #736]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba12:	4ab7      	ldr	r2, [pc, #732]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba1a:	e01a      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba20:	3308      	adds	r3, #8
 800ba22:	2102      	movs	r1, #2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f001 fc8f 	bl	800d348 <RCCEx_PLL2_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba30:	e00f      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba36:	3328      	adds	r3, #40	@ 0x28
 800ba38:	2102      	movs	r1, #2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fd36 	bl	800d4ac <RCCEx_PLL3_Config>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba46:	e004      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ba4e:	e000      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ba50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10a      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba5a:	4ba5      	ldr	r3, [pc, #660]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba68:	4aa1      	ldr	r2, [pc, #644]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba6e:	e003      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ba84:	f04f 0900 	mov.w	r9, #0
 800ba88:	ea58 0309 	orrs.w	r3, r8, r9
 800ba8c:	d047      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d82a      	bhi.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba98:	a201      	add	r2, pc, #4	@ (adr r2, 800baa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9e:	bf00      	nop
 800baa0:	0800bab5 	.word	0x0800bab5
 800baa4:	0800bac3 	.word	0x0800bac3
 800baa8:	0800bad9 	.word	0x0800bad9
 800baac:	0800baf7 	.word	0x0800baf7
 800bab0:	0800baf7 	.word	0x0800baf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab4:	4b8e      	ldr	r3, [pc, #568]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab8:	4a8d      	ldr	r2, [pc, #564]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800baba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800babe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bac0:	e01a      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bac6:	3308      	adds	r3, #8
 800bac8:	2100      	movs	r1, #0
 800baca:	4618      	mov	r0, r3
 800bacc:	f001 fc3c 	bl	800d348 <RCCEx_PLL2_Config>
 800bad0:	4603      	mov	r3, r0
 800bad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bad6:	e00f      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800badc:	3328      	adds	r3, #40	@ 0x28
 800bade:	2100      	movs	r1, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 fce3 	bl	800d4ac <RCCEx_PLL3_Config>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baec:	e004      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800baf4:	e000      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800baf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb00:	4b7b      	ldr	r3, [pc, #492]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb04:	f023 0107 	bic.w	r1, r3, #7
 800bb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb0e:	4a78      	ldr	r2, [pc, #480]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb10:	430b      	orrs	r3, r1
 800bb12:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb14:	e003      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800bb2a:	f04f 0b00 	mov.w	fp, #0
 800bb2e:	ea5a 030b 	orrs.w	r3, sl, fp
 800bb32:	d04c      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb3e:	d030      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb44:	d829      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb46:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb48:	d02d      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bb4a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb4c:	d825      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb4e:	2b80      	cmp	r3, #128	@ 0x80
 800bb50:	d018      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bb52:	2b80      	cmp	r3, #128	@ 0x80
 800bb54:	d821      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bb5a:	2b40      	cmp	r3, #64	@ 0x40
 800bb5c:	d007      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800bb5e:	e01c      	b.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb60:	4b63      	ldr	r3, [pc, #396]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb64:	4a62      	ldr	r2, [pc, #392]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb6c:	e01c      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb72:	3308      	adds	r3, #8
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 fbe6 	bl	800d348 <RCCEx_PLL2_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb82:	e011      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb88:	3328      	adds	r3, #40	@ 0x28
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 fc8d 	bl	800d4ac <RCCEx_PLL3_Config>
 800bb92:	4603      	mov	r3, r0
 800bb94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb98:	e006      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bba0:	e002      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bba2:	bf00      	nop
 800bba4:	e000      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bbb0:	4b4f      	ldr	r3, [pc, #316]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbb4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800bbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbbe:	4a4c      	ldr	r2, [pc, #304]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbc0:	430b      	orrs	r3, r1
 800bbc2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbc4:	e003      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bbca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bbda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800bbe4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4313      	orrs	r3, r2
 800bbec:	d053      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbfa:	d035      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bbfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc00:	d82e      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc06:	d031      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bc08:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc0c:	d828      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc12:	d01a      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800bc14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc18:	d822      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bc1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc22:	d007      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800bc24:	e01c      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc26:	4b32      	ldr	r3, [pc, #200]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	4a31      	ldr	r2, [pc, #196]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc32:	e01c      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc38:	3308      	adds	r3, #8
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 fb83 	bl	800d348 <RCCEx_PLL2_Config>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc48:	e011      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc4e:	3328      	adds	r3, #40	@ 0x28
 800bc50:	2100      	movs	r1, #0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 fc2a 	bl	800d4ac <RCCEx_PLL3_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc5e:	e006      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bc66:	e002      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc68:	bf00      	nop
 800bc6a:	e000      	b.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10b      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc76:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc7a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc86:	4a1a      	ldr	r2, [pc, #104]	@ (800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc8c:	e003      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bca2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bca6:	2300      	movs	r3, #0
 800bca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bcac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	d056      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bcbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcc2:	d038      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bcc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcc8:	d831      	bhi.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bcce:	d034      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bcd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bcd4:	d82b      	bhi.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcda:	d01d      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bcdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bce0:	d825      	bhi.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d006      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800bce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bcea:	d00a      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bcec:	e01f      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcee:	bf00      	nop
 800bcf0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf4:	4ba2      	ldr	r3, [pc, #648]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf8:	4aa1      	ldr	r2, [pc, #644]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd00:	e01c      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd06:	3308      	adds	r3, #8
 800bd08:	2100      	movs	r1, #0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 fb1c 	bl	800d348 <RCCEx_PLL2_Config>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd16:	e011      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd1c:	3328      	adds	r3, #40	@ 0x28
 800bd1e:	2100      	movs	r1, #0
 800bd20:	4618      	mov	r0, r3
 800bd22:	f001 fbc3 	bl	800d4ac <RCCEx_PLL3_Config>
 800bd26:	4603      	mov	r3, r0
 800bd28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd2c:	e006      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bd34:	e002      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bd36:	bf00      	nop
 800bd38:	e000      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bd3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10b      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bd44:	4b8e      	ldr	r3, [pc, #568]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd48:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd54:	4a8a      	ldr	r2, [pc, #552]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd56:	430b      	orrs	r3, r1
 800bd58:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd5a:	e003      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bd70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bd74:	2300      	movs	r3, #0
 800bd76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4313      	orrs	r3, r2
 800bd82:	d03a      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800bd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd8a:	2b30      	cmp	r3, #48	@ 0x30
 800bd8c:	d01f      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800bd8e:	2b30      	cmp	r3, #48	@ 0x30
 800bd90:	d819      	bhi.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd92:	2b20      	cmp	r3, #32
 800bd94:	d00c      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d815      	bhi.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d019      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bd9e:	2b10      	cmp	r3, #16
 800bda0:	d111      	bne.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda2:	4b77      	ldr	r3, [pc, #476]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	4a76      	ldr	r2, [pc, #472]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bda8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bdae:	e011      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	2102      	movs	r1, #2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 fac5 	bl	800d348 <RCCEx_PLL2_Config>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bdc4:	e006      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bdcc:	e002      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bdce:	bf00      	nop
 800bdd0:	e000      	b.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bdd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10a      	bne.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bddc:	4b68      	ldr	r3, [pc, #416]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bdde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bde8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdea:	4a65      	ldr	r2, [pc, #404]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bdec:	430b      	orrs	r3, r1
 800bdee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdf0:	e003      	b.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bdfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800be06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be0a:	2300      	movs	r3, #0
 800be0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800be10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800be14:	460b      	mov	r3, r1
 800be16:	4313      	orrs	r3, r2
 800be18:	d051      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800be1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be24:	d035      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800be26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be2a:	d82e      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be30:	d031      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800be32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be36:	d828      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be3c:	d01a      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800be3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be42:	d822      	bhi.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800be48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be4c:	d007      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800be4e:	e01c      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be50:	4b4b      	ldr	r3, [pc, #300]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be54:	4a4a      	ldr	r2, [pc, #296]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be5c:	e01c      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be62:	3308      	adds	r3, #8
 800be64:	2100      	movs	r1, #0
 800be66:	4618      	mov	r0, r3
 800be68:	f001 fa6e 	bl	800d348 <RCCEx_PLL2_Config>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be72:	e011      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be78:	3328      	adds	r3, #40	@ 0x28
 800be7a:	2100      	movs	r1, #0
 800be7c:	4618      	mov	r0, r3
 800be7e:	f001 fb15 	bl	800d4ac <RCCEx_PLL3_Config>
 800be82:	4603      	mov	r3, r0
 800be84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be88:	e006      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800be90:	e002      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be92:	bf00      	nop
 800be94:	e000      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bea0:	4b37      	ldr	r3, [pc, #220]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800beac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beae:	4a34      	ldr	r2, [pc, #208]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800beb0:	430b      	orrs	r3, r1
 800beb2:	6513      	str	r3, [r2, #80]	@ 0x50
 800beb4:	e003      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800beba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800beca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bed4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bed8:	460b      	mov	r3, r1
 800beda:	4313      	orrs	r3, r2
 800bedc:	d056      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bee8:	d033      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800beea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800beee:	d82c      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bef4:	d02f      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800bef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800befa:	d826      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800befc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf00:	d02b      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bf02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf06:	d820      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bf08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf0c:	d012      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800bf0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf12:	d81a      	bhi.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d022      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf1c:	d115      	bne.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf22:	3308      	adds	r3, #8
 800bf24:	2101      	movs	r1, #1
 800bf26:	4618      	mov	r0, r3
 800bf28:	f001 fa0e 	bl	800d348 <RCCEx_PLL2_Config>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf32:	e015      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf38:	3328      	adds	r3, #40	@ 0x28
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 fab5 	bl	800d4ac <RCCEx_PLL3_Config>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf48:	e00a      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bf50:	e006      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf52:	bf00      	nop
 800bf54:	e004      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf56:	bf00      	nop
 800bf58:	e002      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf5a:	bf00      	nop
 800bf5c:	e000      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10d      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bf68:	4b05      	ldr	r3, [pc, #20]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf76:	4a02      	ldr	r2, [pc, #8]	@ (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf7c:	e006      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf7e:	bf00      	nop
 800bf80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bf98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfa2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	d055      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfb8:	d033      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bfba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfbe:	d82c      	bhi.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfc4:	d02f      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfca:	d826      	bhi.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfd0:	d02b      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bfd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bfd6:	d820      	bhi.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfdc:	d012      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bfde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfe2:	d81a      	bhi.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d022      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bfe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfec:	d115      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bff2:	3308      	adds	r3, #8
 800bff4:	2101      	movs	r1, #1
 800bff6:	4618      	mov	r0, r3
 800bff8:	f001 f9a6 	bl	800d348 <RCCEx_PLL2_Config>
 800bffc:	4603      	mov	r3, r0
 800bffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c002:	e015      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c008:	3328      	adds	r3, #40	@ 0x28
 800c00a:	2101      	movs	r1, #1
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 fa4d 	bl	800d4ac <RCCEx_PLL3_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c018:	e00a      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c020:	e006      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c022:	bf00      	nop
 800c024:	e004      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c02e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10b      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c038:	4ba3      	ldr	r3, [pc, #652]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c03a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c03c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c044:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c048:	4a9f      	ldr	r2, [pc, #636]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c04a:	430b      	orrs	r3, r1
 800c04c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c04e:	e003      	b.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c068:	2300      	movs	r3, #0
 800c06a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c06e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c072:	460b      	mov	r3, r1
 800c074:	4313      	orrs	r3, r2
 800c076:	d037      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c07c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c07e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c082:	d00e      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c088:	d816      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d018      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c08e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c092:	d111      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c094:	4b8c      	ldr	r3, [pc, #560]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c098:	4a8b      	ldr	r2, [pc, #556]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c09a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c09e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c0a0:	e00f      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 f94c 	bl	800d348 <RCCEx_PLL2_Config>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c0b6:	e004      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c0be:	e000      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c0ca:	4b7f      	ldr	r3, [pc, #508]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0d8:	4a7b      	ldr	r2, [pc, #492]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6513      	str	r3, [r2, #80]	@ 0x50
 800c0de:	e003      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c0e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c102:	460b      	mov	r3, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	d039      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d81c      	bhi.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c112:	a201      	add	r2, pc, #4	@ (adr r2, 800c118 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c129 	.word	0x0800c129
 800c120:	0800c137 	.word	0x0800c137
 800c124:	0800c155 	.word	0x0800c155
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c128:	4b67      	ldr	r3, [pc, #412]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12c:	4a66      	ldr	r2, [pc, #408]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c12e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c134:	e00f      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c13a:	3308      	adds	r3, #8
 800c13c:	2102      	movs	r1, #2
 800c13e:	4618      	mov	r0, r3
 800c140:	f001 f902 	bl	800d348 <RCCEx_PLL2_Config>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c14a:	e004      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c152:	e000      	b.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c15e:	4b5a      	ldr	r3, [pc, #360]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c162:	f023 0103 	bic.w	r1, r3, #3
 800c166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c16a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c16c:	4a56      	ldr	r2, [pc, #344]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c16e:	430b      	orrs	r3, r1
 800c170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c172:	e003      	b.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c18c:	2300      	movs	r3, #0
 800c18e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c192:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c196:	460b      	mov	r3, r1
 800c198:	4313      	orrs	r3, r2
 800c19a:	f000 809f 	beq.w	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c19e:	4b4b      	ldr	r3, [pc, #300]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a4a      	ldr	r2, [pc, #296]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c1aa:	f7f9 fe5f 	bl	8005e6c <HAL_GetTick>
 800c1ae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1b2:	e00b      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1b4:	f7f9 fe5a 	bl	8005e6c <HAL_GetTick>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	2b64      	cmp	r3, #100	@ 0x64
 800c1c2:	d903      	bls.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c1ca:	e005      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1cc:	4b3f      	ldr	r3, [pc, #252]	@ (800c2cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0ed      	beq.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d179      	bne.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c1e0:	4b39      	ldr	r3, [pc, #228]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c1ec:	4053      	eors	r3, r2
 800c1ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d015      	beq.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c1f6:	4b34      	ldr	r3, [pc, #208]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c202:	4b31      	ldr	r3, [pc, #196]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c206:	4a30      	ldr	r2, [pc, #192]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c20c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c20e:	4b2e      	ldr	r3, [pc, #184]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c212:	4a2d      	ldr	r2, [pc, #180]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c218:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c21a:	4a2b      	ldr	r2, [pc, #172]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c21c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c220:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c22e:	d118      	bne.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c230:	f7f9 fe1c 	bl	8005e6c <HAL_GetTick>
 800c234:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c238:	e00d      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c23a:	f7f9 fe17 	bl	8005e6c <HAL_GetTick>
 800c23e:	4602      	mov	r2, r0
 800c240:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c244:	1ad2      	subs	r2, r2, r3
 800c246:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d903      	bls.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800c254:	e005      	b.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c256:	4b1c      	ldr	r3, [pc, #112]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c25a:	f003 0302 	and.w	r3, r3, #2
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d0eb      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800c262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c266:	2b00      	cmp	r3, #0
 800c268:	d129      	bne.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c26e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c27a:	d10e      	bne.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c27c:	4b12      	ldr	r3, [pc, #72]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c28c:	091a      	lsrs	r2, r3, #4
 800c28e:	4b10      	ldr	r3, [pc, #64]	@ (800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c290:	4013      	ands	r3, r2
 800c292:	4a0d      	ldr	r2, [pc, #52]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c294:	430b      	orrs	r3, r1
 800c296:	6113      	str	r3, [r2, #16]
 800c298:	e005      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c29a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	4a0a      	ldr	r2, [pc, #40]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2a4:	6113      	str	r3, [r2, #16]
 800c2a6:	4b08      	ldr	r3, [pc, #32]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c2b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2b6:	4a04      	ldr	r2, [pc, #16]	@ (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c2b8:	430b      	orrs	r3, r1
 800c2ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800c2bc:	e00e      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c2be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800c2c6:	e009      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c2c8:	58024400 	.word	0x58024400
 800c2cc:	58024800 	.word	0x58024800
 800c2d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f002 0301 	and.w	r3, r2, #1
 800c2e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	f000 8089 	beq.w	800c410 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c304:	2b28      	cmp	r3, #40	@ 0x28
 800c306:	d86b      	bhi.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c308:	a201      	add	r2, pc, #4	@ (adr r2, 800c310 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c3e9 	.word	0x0800c3e9
 800c314:	0800c3e1 	.word	0x0800c3e1
 800c318:	0800c3e1 	.word	0x0800c3e1
 800c31c:	0800c3e1 	.word	0x0800c3e1
 800c320:	0800c3e1 	.word	0x0800c3e1
 800c324:	0800c3e1 	.word	0x0800c3e1
 800c328:	0800c3e1 	.word	0x0800c3e1
 800c32c:	0800c3e1 	.word	0x0800c3e1
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c3e1 	.word	0x0800c3e1
 800c338:	0800c3e1 	.word	0x0800c3e1
 800c33c:	0800c3e1 	.word	0x0800c3e1
 800c340:	0800c3e1 	.word	0x0800c3e1
 800c344:	0800c3e1 	.word	0x0800c3e1
 800c348:	0800c3e1 	.word	0x0800c3e1
 800c34c:	0800c3e1 	.word	0x0800c3e1
 800c350:	0800c3cb 	.word	0x0800c3cb
 800c354:	0800c3e1 	.word	0x0800c3e1
 800c358:	0800c3e1 	.word	0x0800c3e1
 800c35c:	0800c3e1 	.word	0x0800c3e1
 800c360:	0800c3e1 	.word	0x0800c3e1
 800c364:	0800c3e1 	.word	0x0800c3e1
 800c368:	0800c3e1 	.word	0x0800c3e1
 800c36c:	0800c3e1 	.word	0x0800c3e1
 800c370:	0800c3e9 	.word	0x0800c3e9
 800c374:	0800c3e1 	.word	0x0800c3e1
 800c378:	0800c3e1 	.word	0x0800c3e1
 800c37c:	0800c3e1 	.word	0x0800c3e1
 800c380:	0800c3e1 	.word	0x0800c3e1
 800c384:	0800c3e1 	.word	0x0800c3e1
 800c388:	0800c3e1 	.word	0x0800c3e1
 800c38c:	0800c3e1 	.word	0x0800c3e1
 800c390:	0800c3e9 	.word	0x0800c3e9
 800c394:	0800c3e1 	.word	0x0800c3e1
 800c398:	0800c3e1 	.word	0x0800c3e1
 800c39c:	0800c3e1 	.word	0x0800c3e1
 800c3a0:	0800c3e1 	.word	0x0800c3e1
 800c3a4:	0800c3e1 	.word	0x0800c3e1
 800c3a8:	0800c3e1 	.word	0x0800c3e1
 800c3ac:	0800c3e1 	.word	0x0800c3e1
 800c3b0:	0800c3e9 	.word	0x0800c3e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3b8:	3308      	adds	r3, #8
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 ffc3 	bl	800d348 <RCCEx_PLL2_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c3c8:	e00f      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3ce:	3328      	adds	r3, #40	@ 0x28
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f001 f86a 	bl	800d4ac <RCCEx_PLL3_Config>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c3de:	e004      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c3e6:	e000      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c3f2:	4bbf      	ldr	r3, [pc, #764]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c3f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c400:	4abb      	ldr	r2, [pc, #748]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c402:	430b      	orrs	r3, r1
 800c404:	6553      	str	r3, [r2, #84]	@ 0x54
 800c406:	e003      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c40c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f002 0302 	and.w	r3, r2, #2
 800c41c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c420:	2300      	movs	r3, #0
 800c422:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c426:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c42a:	460b      	mov	r3, r1
 800c42c:	4313      	orrs	r3, r2
 800c42e:	d041      	beq.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c436:	2b05      	cmp	r3, #5
 800c438:	d824      	bhi.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c43a:	a201      	add	r2, pc, #4	@ (adr r2, 800c440 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c48d 	.word	0x0800c48d
 800c444:	0800c459 	.word	0x0800c459
 800c448:	0800c46f 	.word	0x0800c46f
 800c44c:	0800c48d 	.word	0x0800c48d
 800c450:	0800c48d 	.word	0x0800c48d
 800c454:	0800c48d 	.word	0x0800c48d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c45c:	3308      	adds	r3, #8
 800c45e:	2101      	movs	r1, #1
 800c460:	4618      	mov	r0, r3
 800c462:	f000 ff71 	bl	800d348 <RCCEx_PLL2_Config>
 800c466:	4603      	mov	r3, r0
 800c468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c46c:	e00f      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c472:	3328      	adds	r3, #40	@ 0x28
 800c474:	2101      	movs	r1, #1
 800c476:	4618      	mov	r0, r3
 800c478:	f001 f818 	bl	800d4ac <RCCEx_PLL3_Config>
 800c47c:	4603      	mov	r3, r0
 800c47e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c482:	e004      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c48a:	e000      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c48c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c48e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10a      	bne.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c496:	4b96      	ldr	r3, [pc, #600]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c49a:	f023 0107 	bic.w	r1, r3, #7
 800c49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4a4:	4a92      	ldr	r2, [pc, #584]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4aa:	e003      	b.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f002 0304 	and.w	r3, r2, #4
 800c4c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	d044      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	d825      	bhi.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c4e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e6:	bf00      	nop
 800c4e8:	0800c535 	.word	0x0800c535
 800c4ec:	0800c501 	.word	0x0800c501
 800c4f0:	0800c517 	.word	0x0800c517
 800c4f4:	0800c535 	.word	0x0800c535
 800c4f8:	0800c535 	.word	0x0800c535
 800c4fc:	0800c535 	.word	0x0800c535
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c504:	3308      	adds	r3, #8
 800c506:	2101      	movs	r1, #1
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 ff1d 	bl	800d348 <RCCEx_PLL2_Config>
 800c50e:	4603      	mov	r3, r0
 800c510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c514:	e00f      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c51a:	3328      	adds	r3, #40	@ 0x28
 800c51c:	2101      	movs	r1, #1
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 ffc4 	bl	800d4ac <RCCEx_PLL3_Config>
 800c524:	4603      	mov	r3, r0
 800c526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c52a:	e004      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c532:	e000      	b.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c534:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c53e:	4b6c      	ldr	r3, [pc, #432]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c542:	f023 0107 	bic.w	r1, r3, #7
 800c546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c54e:	4a68      	ldr	r2, [pc, #416]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c550:	430b      	orrs	r3, r1
 800c552:	6593      	str	r3, [r2, #88]	@ 0x58
 800c554:	e003      	b.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c55a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	f002 0320 	and.w	r3, r2, #32
 800c56a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c56e:	2300      	movs	r3, #0
 800c570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c578:	460b      	mov	r3, r1
 800c57a:	4313      	orrs	r3, r2
 800c57c:	d055      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c58a:	d033      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c58c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c590:	d82c      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c596:	d02f      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c59c:	d826      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c59e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c5a2:	d02b      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c5a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c5a8:	d820      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5ae:	d012      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c5b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5b4:	d81a      	bhi.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d022      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c5ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5be:	d115      	bne.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 febd 	bl	800d348 <RCCEx_PLL2_Config>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c5d4:	e015      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5da:	3328      	adds	r3, #40	@ 0x28
 800c5dc:	2102      	movs	r1, #2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 ff64 	bl	800d4ac <RCCEx_PLL3_Config>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c5ea:	e00a      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c5f2:	e006      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5f4:	bf00      	nop
 800c5f6:	e004      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5f8:	bf00      	nop
 800c5fa:	e002      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5fc:	bf00      	nop
 800c5fe:	e000      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10b      	bne.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c60a:	4b39      	ldr	r3, [pc, #228]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c60e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c61a:	4a35      	ldr	r2, [pc, #212]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c61c:	430b      	orrs	r3, r1
 800c61e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c620:	e003      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c63a:	2300      	movs	r3, #0
 800c63c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c640:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c644:	460b      	mov	r3, r1
 800c646:	4313      	orrs	r3, r2
 800c648:	d058      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c64e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c652:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c656:	d033      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c658:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c65c:	d82c      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c65e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c662:	d02f      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c668:	d826      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c66a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c66e:	d02b      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c674:	d820      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c67a:	d012      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c67c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c680:	d81a      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d022      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c68a:	d115      	bne.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c690:	3308      	adds	r3, #8
 800c692:	2100      	movs	r1, #0
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fe57 	bl	800d348 <RCCEx_PLL2_Config>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c6a0:	e015      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6a6:	3328      	adds	r3, #40	@ 0x28
 800c6a8:	2102      	movs	r1, #2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fefe 	bl	800d4ac <RCCEx_PLL3_Config>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c6b6:	e00a      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c6be:	e006      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6c0:	bf00      	nop
 800c6c2:	e004      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6c4:	bf00      	nop
 800c6c6:	e002      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6c8:	bf00      	nop
 800c6ca:	e000      	b.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10e      	bne.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c6d6:	4b06      	ldr	r3, [pc, #24]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6e6:	4a02      	ldr	r2, [pc, #8]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c6e8:	430b      	orrs	r3, r1
 800c6ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6ec:	e006      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c6ee:	bf00      	nop
 800c6f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c70c:	2300      	movs	r3, #0
 800c70e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c712:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c716:	460b      	mov	r3, r1
 800c718:	4313      	orrs	r3, r2
 800c71a:	d055      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c724:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c728:	d033      	beq.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c72a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c72e:	d82c      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c734:	d02f      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c73a:	d826      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c73c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c740:	d02b      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c742:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c746:	d820      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c74c:	d012      	beq.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c74e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c752:	d81a      	bhi.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d022      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c75c:	d115      	bne.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c762:	3308      	adds	r3, #8
 800c764:	2100      	movs	r1, #0
 800c766:	4618      	mov	r0, r3
 800c768:	f000 fdee 	bl	800d348 <RCCEx_PLL2_Config>
 800c76c:	4603      	mov	r3, r0
 800c76e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c772:	e015      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c778:	3328      	adds	r3, #40	@ 0x28
 800c77a:	2102      	movs	r1, #2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 fe95 	bl	800d4ac <RCCEx_PLL3_Config>
 800c782:	4603      	mov	r3, r0
 800c784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c788:	e00a      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c790:	e006      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c792:	bf00      	nop
 800c794:	e004      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c796:	bf00      	nop
 800c798:	e002      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10b      	bne.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c7a8:	4ba1      	ldr	r3, [pc, #644]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7b8:	4a9d      	ldr	r2, [pc, #628]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7ba:	430b      	orrs	r3, r1
 800c7bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7be:	e003      	b.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f002 0308 	and.w	r3, r2, #8
 800c7d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c7de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	d01e      	beq.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7f4:	d10c      	bne.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7fa:	3328      	adds	r3, #40	@ 0x28
 800c7fc:	2102      	movs	r1, #2
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fe54 	bl	800d4ac <RCCEx_PLL3_Config>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c810:	4b87      	ldr	r3, [pc, #540]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c814:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c820:	4a83      	ldr	r2, [pc, #524]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c822:	430b      	orrs	r3, r1
 800c824:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f002 0310 	and.w	r3, r2, #16
 800c832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c836:	2300      	movs	r3, #0
 800c838:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c83c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c840:	460b      	mov	r3, r1
 800c842:	4313      	orrs	r3, r2
 800c844:	d01e      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c84a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c852:	d10c      	bne.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c858:	3328      	adds	r3, #40	@ 0x28
 800c85a:	2102      	movs	r1, #2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 fe25 	bl	800d4ac <RCCEx_PLL3_Config>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d002      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c86e:	4b70      	ldr	r3, [pc, #448]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c872:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c87a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c87e:	4a6c      	ldr	r2, [pc, #432]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c880:	430b      	orrs	r3, r1
 800c882:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c894:	2300      	movs	r3, #0
 800c896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c89a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	d03e      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8b0:	d022      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8b6:	d81b      	bhi.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c8bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8c0:	d00b      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c8c2:	e015      	b.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fd3b 	bl	800d348 <RCCEx_PLL2_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c8d8:	e00f      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8de:	3328      	adds	r3, #40	@ 0x28
 800c8e0:	2102      	movs	r1, #2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fde2 	bl	800d4ac <RCCEx_PLL3_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c8ee:	e004      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c8f6:	e000      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10b      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c902:	4b4b      	ldr	r3, [pc, #300]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c906:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c90e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c912:	4a47      	ldr	r2, [pc, #284]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c914:	430b      	orrs	r3, r1
 800c916:	6593      	str	r3, [r2, #88]	@ 0x58
 800c918:	e003      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c91e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c92e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c930:	2300      	movs	r3, #0
 800c932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c934:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c938:	460b      	mov	r3, r1
 800c93a:	4313      	orrs	r3, r2
 800c93c:	d03b      	beq.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c946:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c94a:	d01f      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c94c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c950:	d818      	bhi.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c956:	d003      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c95c:	d007      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c95e:	e011      	b.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c960:	4b33      	ldr	r3, [pc, #204]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c964:	4a32      	ldr	r2, [pc, #200]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c96a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c96c:	e00f      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c972:	3328      	adds	r3, #40	@ 0x28
 800c974:	2101      	movs	r1, #1
 800c976:	4618      	mov	r0, r3
 800c978:	f000 fd98 	bl	800d4ac <RCCEx_PLL3_Config>
 800c97c:	4603      	mov	r3, r0
 800c97e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c982:	e004      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c98a:	e000      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c98e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10b      	bne.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c996:	4b26      	ldr	r3, [pc, #152]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c99a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9a6:	4a22      	ldr	r2, [pc, #136]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9ac:	e003      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c9c2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	d034      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e0:	d007      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c9e2:	e011      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9e4:	4b12      	ldr	r3, [pc, #72]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e8:	4a11      	ldr	r2, [pc, #68]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c9f0:	e00e      	b.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	2102      	movs	r1, #2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fca4 	bl	800d348 <RCCEx_PLL2_Config>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca06:	e003      	b.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10d      	bne.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca18:	4b05      	ldr	r3, [pc, #20]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca26:	4a02      	ldr	r2, [pc, #8]	@ (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ca28:	430b      	orrs	r3, r1
 800ca2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca2c:	e006      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ca2e:	bf00      	nop
 800ca30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ca3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ca48:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ca52:	460b      	mov	r3, r1
 800ca54:	4313      	orrs	r3, r2
 800ca56:	d00c      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ca58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca5c:	3328      	adds	r3, #40	@ 0x28
 800ca5e:	2102      	movs	r1, #2
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fd23 	bl	800d4ac <RCCEx_PLL3_Config>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ca7e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca80:	2300      	movs	r3, #0
 800ca82:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	d038      	beq.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ca8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca9a:	d018      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ca9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800caa0:	d811      	bhi.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800caa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa6:	d014      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800caa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caac:	d80b      	bhi.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d011      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800cab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cab6:	d106      	bne.n	800cac6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cab8:	4bc3      	ldr	r3, [pc, #780]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800caba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cabc:	4ac2      	ldr	r2, [pc, #776]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cabe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cac4:	e008      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cacc:	e004      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cace:	bf00      	nop
 800cad0:	e002      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cad2:	bf00      	nop
 800cad4:	e000      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800cad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10b      	bne.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cae0:	4bb9      	ldr	r3, [pc, #740]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cae4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf0:	4ab5      	ldr	r2, [pc, #724]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800caf2:	430b      	orrs	r3, r1
 800caf4:	6553      	str	r3, [r2, #84]	@ 0x54
 800caf6:	e003      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cafc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cb0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb0e:	2300      	movs	r3, #0
 800cb10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cb16:	460b      	mov	r3, r1
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	d009      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb1c:	4baa      	ldr	r3, [pc, #680]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb2a:	4aa7      	ldr	r2, [pc, #668]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb2c:	430b      	orrs	r3, r1
 800cb2e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb38:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800cb3c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb3e:	2300      	movs	r3, #0
 800cb40:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cb46:	460b      	mov	r3, r1
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	d00a      	beq.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cb4c:	4b9e      	ldr	r3, [pc, #632]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800cb54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cb5c:	4a9a      	ldr	r2, [pc, #616]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cb6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb70:	2300      	movs	r3, #0
 800cb72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	d009      	beq.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb7e:	4b92      	ldr	r3, [pc, #584]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb82:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb8c:	4a8e      	ldr	r2, [pc, #568]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb8e:	430b      	orrs	r3, r1
 800cb90:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cb9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cba0:	2300      	movs	r3, #0
 800cba2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cba4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cba8:	460b      	mov	r3, r1
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	d00e      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cbae:	4b86      	ldr	r3, [pc, #536]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	4a85      	ldr	r2, [pc, #532]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbb8:	6113      	str	r3, [r2, #16]
 800cbba:	4b83      	ldr	r3, [pc, #524]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbbc:	6919      	ldr	r1, [r3, #16]
 800cbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cbc6:	4a80      	ldr	r2, [pc, #512]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbc8:	430b      	orrs	r3, r1
 800cbca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cbd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbda:	2300      	movs	r3, #0
 800cbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	d009      	beq.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cbe8:	4b77      	ldr	r3, [pc, #476]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbec:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cbf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf6:	4a74      	ldr	r2, [pc, #464]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbf8:	430b      	orrs	r3, r1
 800cbfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cc08:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cc12:	460b      	mov	r3, r1
 800cc14:	4313      	orrs	r3, r2
 800cc16:	d00a      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc18:	4b6b      	ldr	r3, [pc, #428]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc1c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc28:	4a67      	ldr	r2, [pc, #412]	@ (800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cc2a:	430b      	orrs	r3, r1
 800cc2c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	2100      	movs	r1, #0
 800cc38:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cc44:	460b      	mov	r3, r1
 800cc46:	4313      	orrs	r3, r2
 800cc48:	d011      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc4e:	3308      	adds	r3, #8
 800cc50:	2100      	movs	r1, #0
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fb78 	bl	800d348 <RCCEx_PLL2_Config>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc76:	2100      	movs	r1, #0
 800cc78:	6239      	str	r1, [r7, #32]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cc84:	460b      	mov	r3, r1
 800cc86:	4313      	orrs	r3, r2
 800cc88:	d011      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc8e:	3308      	adds	r3, #8
 800cc90:	2101      	movs	r1, #1
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fb58 	bl	800d348 <RCCEx_PLL2_Config>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ccae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	61b9      	str	r1, [r7, #24]
 800ccba:	f003 0304 	and.w	r3, r3, #4
 800ccbe:	61fb      	str	r3, [r7, #28]
 800ccc0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	d011      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ccca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccce:	3308      	adds	r3, #8
 800ccd0:	2102      	movs	r1, #2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fb38 	bl	800d348 <RCCEx_PLL2_Config>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ccde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ccee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	6139      	str	r1, [r7, #16]
 800ccfa:	f003 0308 	and.w	r3, r3, #8
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd04:	460b      	mov	r3, r1
 800cd06:	4313      	orrs	r3, r2
 800cd08:	d011      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd0e:	3328      	adds	r3, #40	@ 0x28
 800cd10:	2100      	movs	r1, #0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fbca 	bl	800d4ac <RCCEx_PLL3_Config>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800cd1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd36:	2100      	movs	r1, #0
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	f003 0310 	and.w	r3, r3, #16
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd44:	460b      	mov	r3, r1
 800cd46:	4313      	orrs	r3, r2
 800cd48:	d011      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd4e:	3328      	adds	r3, #40	@ 0x28
 800cd50:	2101      	movs	r1, #1
 800cd52:	4618      	mov	r0, r3
 800cd54:	f000 fbaa 	bl	800d4ac <RCCEx_PLL3_Config>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cd5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd76:	2100      	movs	r1, #0
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	607b      	str	r3, [r7, #4]
 800cd80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd84:	460b      	mov	r3, r1
 800cd86:	4313      	orrs	r3, r2
 800cd88:	d011      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd8e:	3328      	adds	r3, #40	@ 0x28
 800cd90:	2102      	movs	r1, #2
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 fb8a 	bl	800d4ac <RCCEx_PLL3_Config>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cd9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d003      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800cdae:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e000      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdc8:	58024400 	.word	0x58024400

0800cdcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cdd0:	f7fe fd54 	bl	800b87c <HAL_RCC_GetHCLKFreq>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	4b06      	ldr	r3, [pc, #24]	@ (800cdf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	091b      	lsrs	r3, r3, #4
 800cddc:	f003 0307 	and.w	r3, r3, #7
 800cde0:	4904      	ldr	r1, [pc, #16]	@ (800cdf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cde2:	5ccb      	ldrb	r3, [r1, r3]
 800cde4:	f003 031f 	and.w	r3, r3, #31
 800cde8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	58024400 	.word	0x58024400
 800cdf4:	0801731c 	.word	0x0801731c

0800cdf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b089      	sub	sp, #36	@ 0x24
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce00:	4ba1      	ldr	r3, [pc, #644]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce04:	f003 0303 	and.w	r3, r3, #3
 800ce08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce0a:	4b9f      	ldr	r3, [pc, #636]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce0e:	0b1b      	lsrs	r3, r3, #12
 800ce10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce16:	4b9c      	ldr	r3, [pc, #624]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1a:	091b      	lsrs	r3, r3, #4
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ce22:	4b99      	ldr	r3, [pc, #612]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce26:	08db      	lsrs	r3, r3, #3
 800ce28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	fb02 f303 	mul.w	r3, r2, r3
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 8111 	beq.w	800d068 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	f000 8083 	beq.w	800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	f200 80a1 	bhi.w	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d056      	beq.n	800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ce62:	e099      	b.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce64:	4b88      	ldr	r3, [pc, #544]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d02d      	beq.n	800cecc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce70:	4b85      	ldr	r3, [pc, #532]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	08db      	lsrs	r3, r3, #3
 800ce76:	f003 0303 	and.w	r3, r3, #3
 800ce7a:	4a84      	ldr	r2, [pc, #528]	@ (800d08c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	ee07 3a90 	vmov	s15, r3
 800ce88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9a:	4b7b      	ldr	r3, [pc, #492]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ceca:	e087      	b.n	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	ee07 3a90 	vmov	s15, r3
 800ced2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d094 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ceda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cede:	4b6a      	ldr	r3, [pc, #424]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee6:	ee07 3a90 	vmov	s15, r3
 800ceea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cef2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cefe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf0e:	e065      	b.n	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	ee07 3a90 	vmov	s15, r3
 800cf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf22:	4b59      	ldr	r3, [pc, #356]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf52:	e043      	b.n	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d09c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf66:	4b48      	ldr	r3, [pc, #288]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf96:	e021      	b.n	800cfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfaa:	4b37      	ldr	r3, [pc, #220]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfba:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d090 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cfdc:	4b2a      	ldr	r3, [pc, #168]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfe0:	0a5b      	lsrs	r3, r3, #9
 800cfe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cff6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d002:	ee17 2a90 	vmov	r2, s15
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d00a:	4b1f      	ldr	r3, [pc, #124]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d00e:	0c1b      	lsrs	r3, r3, #16
 800d010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d020:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d024:	edd7 6a07 	vldr	s13, [r7, #28]
 800d028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d02c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d030:	ee17 2a90 	vmov	r2, s15
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d038:	4b13      	ldr	r3, [pc, #76]	@ (800d088 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03c:	0e1b      	lsrs	r3, r3, #24
 800d03e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d042:	ee07 3a90 	vmov	s15, r3
 800d046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d052:	edd7 6a07 	vldr	s13, [r7, #28]
 800d056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d05e:	ee17 2a90 	vmov	r2, s15
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d066:	e008      	b.n	800d07a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	609a      	str	r2, [r3, #8]
}
 800d07a:	bf00      	nop
 800d07c:	3724      	adds	r7, #36	@ 0x24
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	58024400 	.word	0x58024400
 800d08c:	03d09000 	.word	0x03d09000
 800d090:	46000000 	.word	0x46000000
 800d094:	4c742400 	.word	0x4c742400
 800d098:	4a742400 	.word	0x4a742400
 800d09c:	4af42400 	.word	0x4af42400

0800d0a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b089      	sub	sp, #36	@ 0x24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0a8:	4ba1      	ldr	r3, [pc, #644]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ac:	f003 0303 	and.w	r3, r3, #3
 800d0b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d0b2:	4b9f      	ldr	r3, [pc, #636]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b6:	0d1b      	lsrs	r3, r3, #20
 800d0b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d0be:	4b9c      	ldr	r3, [pc, #624]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d0ca:	4b99      	ldr	r3, [pc, #612]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ce:	08db      	lsrs	r3, r3, #3
 800d0d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	fb02 f303 	mul.w	r3, r2, r3
 800d0da:	ee07 3a90 	vmov	s15, r3
 800d0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 8111 	beq.w	800d310 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	f000 8083 	beq.w	800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	f200 80a1 	bhi.w	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d056      	beq.n	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d10a:	e099      	b.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d10c:	4b88      	ldr	r3, [pc, #544]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0320 	and.w	r3, r3, #32
 800d114:	2b00      	cmp	r3, #0
 800d116:	d02d      	beq.n	800d174 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d118:	4b85      	ldr	r3, [pc, #532]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	08db      	lsrs	r3, r3, #3
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	4a84      	ldr	r2, [pc, #528]	@ (800d334 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d124:	fa22 f303 	lsr.w	r3, r2, r3
 800d128:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	ee07 3a90 	vmov	s15, r3
 800d130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	ee07 3a90 	vmov	s15, r3
 800d13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d142:	4b7b      	ldr	r3, [pc, #492]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d152:	ed97 6a03 	vldr	s12, [r7, #12]
 800d156:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d172:	e087      	b.n	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d33c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d186:	4b6a      	ldr	r3, [pc, #424]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d196:	ed97 6a03 	vldr	s12, [r7, #12]
 800d19a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1b6:	e065      	b.n	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ca:	4b59      	ldr	r3, [pc, #356]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1fa:	e043      	b.n	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d20e:	4b48      	ldr	r3, [pc, #288]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d222:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d23e:	e021      	b.n	800d284 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	ee07 3a90 	vmov	s15, r3
 800d246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d252:	4b37      	ldr	r3, [pc, #220]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25a:	ee07 3a90 	vmov	s15, r3
 800d25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d262:	ed97 6a03 	vldr	s12, [r7, #12]
 800d266:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d338 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d282:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d284:	4b2a      	ldr	r3, [pc, #168]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d288:	0a5b      	lsrs	r3, r3, #9
 800d28a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d28e:	ee07 3a90 	vmov	s15, r3
 800d292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d29a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d29e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2aa:	ee17 2a90 	vmov	r2, s15
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b6:	0c1b      	lsrs	r3, r3, #16
 800d2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2bc:	ee07 3a90 	vmov	s15, r3
 800d2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2d8:	ee17 2a90 	vmov	r2, s15
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d2e0:	4b13      	ldr	r3, [pc, #76]	@ (800d330 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e4:	0e1b      	lsrs	r3, r3, #24
 800d2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d306:	ee17 2a90 	vmov	r2, s15
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d30e:	e008      	b.n	800d322 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	609a      	str	r2, [r3, #8]
}
 800d322:	bf00      	nop
 800d324:	3724      	adds	r7, #36	@ 0x24
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	58024400 	.word	0x58024400
 800d334:	03d09000 	.word	0x03d09000
 800d338:	46000000 	.word	0x46000000
 800d33c:	4c742400 	.word	0x4c742400
 800d340:	4a742400 	.word	0x4a742400
 800d344:	4af42400 	.word	0x4af42400

0800d348 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d356:	4b53      	ldr	r3, [pc, #332]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35a:	f003 0303 	and.w	r3, r3, #3
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d101      	bne.n	800d366 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e099      	b.n	800d49a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d366:	4b4f      	ldr	r3, [pc, #316]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a4e      	ldr	r2, [pc, #312]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d36c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d372:	f7f8 fd7b 	bl	8005e6c <HAL_GetTick>
 800d376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d378:	e008      	b.n	800d38c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d37a:	f7f8 fd77 	bl	8005e6c <HAL_GetTick>
 800d37e:	4602      	mov	r2, r0
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	2b02      	cmp	r3, #2
 800d386:	d901      	bls.n	800d38c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d388:	2303      	movs	r3, #3
 800d38a:	e086      	b.n	800d49a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d38c:	4b45      	ldr	r3, [pc, #276]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1f0      	bne.n	800d37a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d398:	4b42      	ldr	r3, [pc, #264]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	031b      	lsls	r3, r3, #12
 800d3a6:	493f      	ldr	r1, [pc, #252]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	025b      	lsls	r3, r3, #9
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	041b      	lsls	r3, r3, #16
 800d3ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	061b      	lsls	r3, r3, #24
 800d3d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d3dc:	4931      	ldr	r1, [pc, #196]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d3e2:	4b30      	ldr	r3, [pc, #192]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	492d      	ldr	r1, [pc, #180]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d3f4:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f8:	f023 0220 	bic.w	r2, r3, #32
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	4928      	ldr	r1, [pc, #160]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d402:	4313      	orrs	r3, r2
 800d404:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d406:	4b27      	ldr	r3, [pc, #156]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40a:	4a26      	ldr	r2, [pc, #152]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d40c:	f023 0310 	bic.w	r3, r3, #16
 800d410:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d412:	4b24      	ldr	r3, [pc, #144]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d416:	4b24      	ldr	r3, [pc, #144]	@ (800d4a8 <RCCEx_PLL2_Config+0x160>)
 800d418:	4013      	ands	r3, r2
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	69d2      	ldr	r2, [r2, #28]
 800d41e:	00d2      	lsls	r2, r2, #3
 800d420:	4920      	ldr	r1, [pc, #128]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d422:	4313      	orrs	r3, r2
 800d424:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d426:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42a:	4a1e      	ldr	r2, [pc, #120]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d42c:	f043 0310 	orr.w	r3, r3, #16
 800d430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d106      	bne.n	800d446 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d438:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d43c:	4a19      	ldr	r2, [pc, #100]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d43e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d444:	e00f      	b.n	800d466 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d106      	bne.n	800d45a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d44c:	4b15      	ldr	r3, [pc, #84]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	4a14      	ldr	r2, [pc, #80]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d458:	e005      	b.n	800d466 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d45a:	4b12      	ldr	r3, [pc, #72]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d45e:	4a11      	ldr	r2, [pc, #68]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d460:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d464:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a0e      	ldr	r2, [pc, #56]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d46c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d472:	f7f8 fcfb 	bl	8005e6c <HAL_GetTick>
 800d476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d478:	e008      	b.n	800d48c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d47a:	f7f8 fcf7 	bl	8005e6c <HAL_GetTick>
 800d47e:	4602      	mov	r2, r0
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	2b02      	cmp	r3, #2
 800d486:	d901      	bls.n	800d48c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d488:	2303      	movs	r3, #3
 800d48a:	e006      	b.n	800d49a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d48c:	4b05      	ldr	r3, [pc, #20]	@ (800d4a4 <RCCEx_PLL2_Config+0x15c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0f0      	beq.n	800d47a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	58024400 	.word	0x58024400
 800d4a8:	ffff0007 	.word	0xffff0007

0800d4ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4ba:	4b53      	ldr	r3, [pc, #332]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4be:	f003 0303 	and.w	r3, r3, #3
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d101      	bne.n	800d4ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e099      	b.n	800d5fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d4ca:	4b4f      	ldr	r3, [pc, #316]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a4e      	ldr	r2, [pc, #312]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d4d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4d6:	f7f8 fcc9 	bl	8005e6c <HAL_GetTick>
 800d4da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4dc:	e008      	b.n	800d4f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4de:	f7f8 fcc5 	bl	8005e6c <HAL_GetTick>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d901      	bls.n	800d4f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e086      	b.n	800d5fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4f0:	4b45      	ldr	r3, [pc, #276]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1f0      	bne.n	800d4de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d4fc:	4b42      	ldr	r3, [pc, #264]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d500:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	051b      	lsls	r3, r3, #20
 800d50a:	493f      	ldr	r1, [pc, #252]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d50c:	4313      	orrs	r3, r2
 800d50e:	628b      	str	r3, [r1, #40]	@ 0x28
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	3b01      	subs	r3, #1
 800d516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	3b01      	subs	r3, #1
 800d520:	025b      	lsls	r3, r3, #9
 800d522:	b29b      	uxth	r3, r3
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	041b      	lsls	r3, r3, #16
 800d52e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d532:	431a      	orrs	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	3b01      	subs	r3, #1
 800d53a:	061b      	lsls	r3, r3, #24
 800d53c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d540:	4931      	ldr	r1, [pc, #196]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d542:	4313      	orrs	r3, r2
 800d544:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d546:	4b30      	ldr	r3, [pc, #192]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d54a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	492d      	ldr	r1, [pc, #180]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d554:	4313      	orrs	r3, r2
 800d556:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d558:	4b2b      	ldr	r3, [pc, #172]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	4928      	ldr	r1, [pc, #160]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d566:	4313      	orrs	r3, r2
 800d568:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d56a:	4b27      	ldr	r3, [pc, #156]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56e:	4a26      	ldr	r2, [pc, #152]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d574:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d576:	4b24      	ldr	r3, [pc, #144]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d57a:	4b24      	ldr	r3, [pc, #144]	@ (800d60c <RCCEx_PLL3_Config+0x160>)
 800d57c:	4013      	ands	r3, r2
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	69d2      	ldr	r2, [r2, #28]
 800d582:	00d2      	lsls	r2, r2, #3
 800d584:	4920      	ldr	r1, [pc, #128]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d586:	4313      	orrs	r3, r2
 800d588:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d58a:	4b1f      	ldr	r3, [pc, #124]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58e:	4a1e      	ldr	r2, [pc, #120]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d59c:	4b1a      	ldr	r3, [pc, #104]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	4a19      	ldr	r2, [pc, #100]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d5a8:	e00f      	b.n	800d5ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d106      	bne.n	800d5be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d5b0:	4b15      	ldr	r3, [pc, #84]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b4:	4a14      	ldr	r2, [pc, #80]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d5ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d5bc:	e005      	b.n	800d5ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d5be:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c2:	4a11      	ldr	r2, [pc, #68]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a0e      	ldr	r2, [pc, #56]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d6:	f7f8 fc49 	bl	8005e6c <HAL_GetTick>
 800d5da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5dc:	e008      	b.n	800d5f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5de:	f7f8 fc45 	bl	8005e6c <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d901      	bls.n	800d5f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e006      	b.n	800d5fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5f0:	4b05      	ldr	r3, [pc, #20]	@ (800d608 <RCCEx_PLL3_Config+0x15c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0f0      	beq.n	800d5de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	58024400 	.word	0x58024400
 800d60c:	ffff0007 	.word	0xffff0007

0800d610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e049      	b.n	800d6b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f841 	bl	800d6be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2202      	movs	r2, #2
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3304      	adds	r3, #4
 800d64c:	4619      	mov	r1, r3
 800d64e:	4610      	mov	r0, r2
 800d650:	f000 f9e8 	bl	800da24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d6be:	b480      	push	{r7}
 800d6c0:	b083      	sub	sp, #12
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d6c6:	bf00      	nop
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d001      	beq.n	800d6ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e054      	b.n	800d796 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68da      	ldr	r2, [r3, #12]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f042 0201 	orr.w	r2, r2, #1
 800d702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a26      	ldr	r2, [pc, #152]	@ (800d7a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d022      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d716:	d01d      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a22      	ldr	r2, [pc, #136]	@ (800d7a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d018      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a21      	ldr	r2, [pc, #132]	@ (800d7ac <HAL_TIM_Base_Start_IT+0xd8>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d013      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a1f      	ldr	r2, [pc, #124]	@ (800d7b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d00e      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a1e      	ldr	r2, [pc, #120]	@ (800d7b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d009      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a1c      	ldr	r2, [pc, #112]	@ (800d7b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d004      	beq.n	800d754 <HAL_TIM_Base_Start_IT+0x80>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a1b      	ldr	r2, [pc, #108]	@ (800d7bc <HAL_TIM_Base_Start_IT+0xe8>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d115      	bne.n	800d780 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	689a      	ldr	r2, [r3, #8]
 800d75a:	4b19      	ldr	r3, [pc, #100]	@ (800d7c0 <HAL_TIM_Base_Start_IT+0xec>)
 800d75c:	4013      	ands	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b06      	cmp	r3, #6
 800d764:	d015      	beq.n	800d792 <HAL_TIM_Base_Start_IT+0xbe>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d76c:	d011      	beq.n	800d792 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f042 0201 	orr.w	r2, r2, #1
 800d77c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d77e:	e008      	b.n	800d792 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f042 0201 	orr.w	r2, r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	e000      	b.n	800d794 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	40010000 	.word	0x40010000
 800d7a8:	40000400 	.word	0x40000400
 800d7ac:	40000800 	.word	0x40000800
 800d7b0:	40000c00 	.word	0x40000c00
 800d7b4:	40010400 	.word	0x40010400
 800d7b8:	40001800 	.word	0x40001800
 800d7bc:	40014000 	.word	0x40014000
 800d7c0:	00010007 	.word	0x00010007

0800d7c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f003 0302 	and.w	r3, r3, #2
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d020      	beq.n	800d828 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f003 0302 	and.w	r3, r3, #2
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d01b      	beq.n	800d828 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f06f 0202 	mvn.w	r2, #2
 800d7f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	f003 0303 	and.w	r3, r3, #3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f8e9 	bl	800d9e6 <HAL_TIM_IC_CaptureCallback>
 800d814:	e005      	b.n	800d822 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f8db 	bl	800d9d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f8ec 	bl	800d9fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	f003 0304 	and.w	r3, r3, #4
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d020      	beq.n	800d874 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f003 0304 	and.w	r3, r3, #4
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01b      	beq.n	800d874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0204 	mvn.w	r2, #4
 800d844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2202      	movs	r2, #2
 800d84a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f8c3 	bl	800d9e6 <HAL_TIM_IC_CaptureCallback>
 800d860:	e005      	b.n	800d86e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f8b5 	bl	800d9d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f8c6 	bl	800d9fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d020      	beq.n	800d8c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f003 0308 	and.w	r3, r3, #8
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01b      	beq.n	800d8c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f06f 0208 	mvn.w	r2, #8
 800d890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2204      	movs	r2, #4
 800d896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	f003 0303 	and.w	r3, r3, #3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f89d 	bl	800d9e6 <HAL_TIM_IC_CaptureCallback>
 800d8ac:	e005      	b.n	800d8ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f88f 	bl	800d9d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f8a0 	bl	800d9fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f003 0310 	and.w	r3, r3, #16
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d020      	beq.n	800d90c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f003 0310 	and.w	r3, r3, #16
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d01b      	beq.n	800d90c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f06f 0210 	mvn.w	r2, #16
 800d8dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2208      	movs	r2, #8
 800d8e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f877 	bl	800d9e6 <HAL_TIM_IC_CaptureCallback>
 800d8f8:	e005      	b.n	800d906 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f869 	bl	800d9d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f87a 	bl	800d9fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00c      	beq.n	800d930 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d007      	beq.n	800d930 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f06f 0201 	mvn.w	r2, #1
 800d928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7f7 fc9e 	bl	800526c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d936:	2b00      	cmp	r3, #0
 800d938:	d104      	bne.n	800d944 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00c      	beq.n	800d95e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f90d 	bl	800db78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00c      	beq.n	800d982 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d007      	beq.n	800d982 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 f905 	bl	800db8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00c      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d992:	2b00      	cmp	r3, #0
 800d994:	d007      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f834 	bl	800da0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	f003 0320 	and.w	r3, r3, #32
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00c      	beq.n	800d9ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f003 0320 	and.w	r3, r3, #32
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d007      	beq.n	800d9ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f06f 0220 	mvn.w	r2, #32
 800d9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f8cd 	bl	800db64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	b083      	sub	sp, #12
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d9da:	bf00      	nop
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9e6:	b480      	push	{r7}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9ee:	bf00      	nop
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b083      	sub	sp, #12
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da02:	bf00      	nop
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
	...

0800da24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a43      	ldr	r2, [pc, #268]	@ (800db44 <TIM_Base_SetConfig+0x120>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d013      	beq.n	800da64 <TIM_Base_SetConfig+0x40>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da42:	d00f      	beq.n	800da64 <TIM_Base_SetConfig+0x40>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a40      	ldr	r2, [pc, #256]	@ (800db48 <TIM_Base_SetConfig+0x124>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d00b      	beq.n	800da64 <TIM_Base_SetConfig+0x40>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a3f      	ldr	r2, [pc, #252]	@ (800db4c <TIM_Base_SetConfig+0x128>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d007      	beq.n	800da64 <TIM_Base_SetConfig+0x40>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a3e      	ldr	r2, [pc, #248]	@ (800db50 <TIM_Base_SetConfig+0x12c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d003      	beq.n	800da64 <TIM_Base_SetConfig+0x40>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a3d      	ldr	r2, [pc, #244]	@ (800db54 <TIM_Base_SetConfig+0x130>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d108      	bne.n	800da76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4313      	orrs	r3, r2
 800da74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4a32      	ldr	r2, [pc, #200]	@ (800db44 <TIM_Base_SetConfig+0x120>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d01f      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da84:	d01b      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a2f      	ldr	r2, [pc, #188]	@ (800db48 <TIM_Base_SetConfig+0x124>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d017      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a2e      	ldr	r2, [pc, #184]	@ (800db4c <TIM_Base_SetConfig+0x128>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d013      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a2d      	ldr	r2, [pc, #180]	@ (800db50 <TIM_Base_SetConfig+0x12c>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d00f      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a2c      	ldr	r2, [pc, #176]	@ (800db54 <TIM_Base_SetConfig+0x130>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d00b      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a2b      	ldr	r2, [pc, #172]	@ (800db58 <TIM_Base_SetConfig+0x134>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d007      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a2a      	ldr	r2, [pc, #168]	@ (800db5c <TIM_Base_SetConfig+0x138>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d003      	beq.n	800dabe <TIM_Base_SetConfig+0x9a>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a29      	ldr	r2, [pc, #164]	@ (800db60 <TIM_Base_SetConfig+0x13c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d108      	bne.n	800dad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	4313      	orrs	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a14      	ldr	r2, [pc, #80]	@ (800db44 <TIM_Base_SetConfig+0x120>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d00f      	beq.n	800db16 <TIM_Base_SetConfig+0xf2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a16      	ldr	r2, [pc, #88]	@ (800db54 <TIM_Base_SetConfig+0x130>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d00b      	beq.n	800db16 <TIM_Base_SetConfig+0xf2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a15      	ldr	r2, [pc, #84]	@ (800db58 <TIM_Base_SetConfig+0x134>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d007      	beq.n	800db16 <TIM_Base_SetConfig+0xf2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a14      	ldr	r2, [pc, #80]	@ (800db5c <TIM_Base_SetConfig+0x138>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d003      	beq.n	800db16 <TIM_Base_SetConfig+0xf2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a13      	ldr	r2, [pc, #76]	@ (800db60 <TIM_Base_SetConfig+0x13c>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d103      	bne.n	800db1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	691a      	ldr	r2, [r3, #16]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f043 0204 	orr.w	r2, r3, #4
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	601a      	str	r2, [r3, #0]
}
 800db36:	bf00      	nop
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	40010000 	.word	0x40010000
 800db48:	40000400 	.word	0x40000400
 800db4c:	40000800 	.word	0x40000800
 800db50:	40000c00 	.word	0x40000c00
 800db54:	40010400 	.word	0x40010400
 800db58:	40014000 	.word	0x40014000
 800db5c:	40014400 	.word	0x40014400
 800db60:	40014800 	.word	0x40014800

0800db64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e042      	b.n	800dc38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d106      	bne.n	800dbca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7f7 fcc7 	bl	8005558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2224      	movs	r2, #36	@ 0x24
 800dbce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f022 0201 	bic.w	r2, r2, #1
 800dbe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f001 fab0 	bl	800f150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fd45 	bl	800e680 <UART_SetConfig>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d101      	bne.n	800dc00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e01b      	b.n	800dc38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	685a      	ldr	r2, [r3, #4]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dc0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	689a      	ldr	r2, [r3, #8]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dc1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f042 0201 	orr.w	r2, r2, #1
 800dc2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f001 fb2f 	bl	800f294 <UART_CheckIdleState>
 800dc36:	4603      	mov	r3, r0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	@ 0x28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	d167      	bne.n	800dd28 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <HAL_UART_Transmit_DMA+0x24>
 800dc5e:	88fb      	ldrh	r3, [r7, #6]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d101      	bne.n	800dc68 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	e060      	b.n	800dd2a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	88fa      	ldrh	r2, [r7, #6]
 800dc72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	88fa      	ldrh	r2, [r7, #6]
 800dc7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2221      	movs	r2, #33	@ 0x21
 800dc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d028      	beq.n	800dce8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc9a:	4a26      	ldr	r2, [pc, #152]	@ (800dd34 <HAL_UART_Transmit_DMA+0xf4>)
 800dc9c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dca2:	4a25      	ldr	r2, [pc, #148]	@ (800dd38 <HAL_UART_Transmit_DMA+0xf8>)
 800dca4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dcaa:	4a24      	ldr	r2, [pc, #144]	@ (800dd3c <HAL_UART_Transmit_DMA+0xfc>)
 800dcac:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3328      	adds	r3, #40	@ 0x28
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	88fb      	ldrh	r3, [r7, #6]
 800dcca:	f7f8 ff75 	bl	8006bb8 <HAL_DMA_Start_IT>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d009      	beq.n	800dce8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2210      	movs	r2, #16
 800dcd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2220      	movs	r2, #32
 800dce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	e020      	b.n	800dd2a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2240      	movs	r2, #64	@ 0x40
 800dcee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	e853 3f00 	ldrex	r3, [r3]
 800dcfe:	613b      	str	r3, [r7, #16]
   return(result);
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd06:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd10:	623a      	str	r2, [r7, #32]
 800dd12:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd14:	69f9      	ldr	r1, [r7, #28]
 800dd16:	6a3a      	ldr	r2, [r7, #32]
 800dd18:	e841 2300 	strex	r3, r2, [r1]
 800dd1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e5      	bne.n	800dcf0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	e000      	b.n	800dd2a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800dd28:	2302      	movs	r3, #2
  }
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3728      	adds	r7, #40	@ 0x28
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	0800f761 	.word	0x0800f761
 800dd38:	0800f7f7 	.word	0x0800f7f7
 800dd3c:	0800f979 	.word	0x0800f979

0800dd40 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b09a      	sub	sp, #104	@ 0x68
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd50:	e853 3f00 	ldrex	r3, [r3]
 800dd54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dd56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd5c:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	461a      	mov	r2, r3
 800dd64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd66:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dd6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd6e:	e841 2300 	strex	r3, r2, [r1]
 800dd72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dd74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1e6      	bne.n	800dd48 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3308      	adds	r3, #8
 800dd80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd84:	e853 3f00 	ldrex	r3, [r3]
 800dd88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd8c:	4b46      	ldr	r3, [pc, #280]	@ (800dea8 <HAL_UART_AbortReceive+0x168>)
 800dd8e:	4013      	ands	r3, r2
 800dd90:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3308      	adds	r3, #8
 800dd98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd9a:	643a      	str	r2, [r7, #64]	@ 0x40
 800dd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dda0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dda2:	e841 2300 	strex	r3, r2, [r1]
 800dda6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1e5      	bne.n	800dd7a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d118      	bne.n	800dde8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	e853 3f00 	ldrex	r3, [r3]
 800ddc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	f023 0310 	bic.w	r3, r3, #16
 800ddca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dddc:	e841 2300 	strex	r3, r2, [r1]
 800dde0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1e6      	bne.n	800ddb6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddf2:	2b40      	cmp	r3, #64	@ 0x40
 800ddf4:	d13b      	bne.n	800de6e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	e853 3f00 	ldrex	r3, [r3]
 800de04:	60bb      	str	r3, [r7, #8]
   return(result);
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3308      	adds	r3, #8
 800de14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de16:	61ba      	str	r2, [r7, #24]
 800de18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6979      	ldr	r1, [r7, #20]
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	613b      	str	r3, [r7, #16]
   return(result);
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e5      	bne.n	800ddf6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de30:	2b00      	cmp	r3, #0
 800de32:	d01c      	beq.n	800de6e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de3a:	2200      	movs	r2, #0
 800de3c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de44:	4618      	mov	r0, r3
 800de46:	f7f9 f921 	bl	800708c <HAL_DMA_Abort>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00e      	beq.n	800de6e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de56:	4618      	mov	r0, r3
 800de58:	f7fa fda6 	bl	80089a8 <HAL_DMA_GetError>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d105      	bne.n	800de6e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2210      	movs	r2, #16
 800de66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e017      	b.n	800de9e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	220f      	movs	r2, #15
 800de7c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	699a      	ldr	r2, [r3, #24]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f042 0208 	orr.w	r2, r2, #8
 800de8c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2220      	movs	r2, #32
 800de92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3768      	adds	r7, #104	@ 0x68
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	effffffe 	.word	0xeffffffe

0800deac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b0ba      	sub	sp, #232	@ 0xe8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	69db      	ldr	r3, [r3, #28]
 800deba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ded2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ded6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800deda:	4013      	ands	r3, r2
 800dedc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800dee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d11b      	bne.n	800df20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deec:	f003 0320 	and.w	r3, r3, #32
 800def0:	2b00      	cmp	r3, #0
 800def2:	d015      	beq.n	800df20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800def4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800def8:	f003 0320 	and.w	r3, r3, #32
 800defc:	2b00      	cmp	r3, #0
 800defe:	d105      	bne.n	800df0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d009      	beq.n	800df20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 8393 	beq.w	800e63c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	4798      	blx	r3
      }
      return;
 800df1e:	e38d      	b.n	800e63c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8123 	beq.w	800e170 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800df2e:	4b8d      	ldr	r3, [pc, #564]	@ (800e164 <HAL_UART_IRQHandler+0x2b8>)
 800df30:	4013      	ands	r3, r2
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800df3a:	4b8b      	ldr	r3, [pc, #556]	@ (800e168 <HAL_UART_IRQHandler+0x2bc>)
 800df3c:	4013      	ands	r3, r2
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 8116 	beq.w	800e170 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df48:	f003 0301 	and.w	r3, r3, #1
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d011      	beq.n	800df74 <HAL_UART_IRQHandler+0xc8>
 800df50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00b      	beq.n	800df74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2201      	movs	r2, #1
 800df62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df6a:	f043 0201 	orr.w	r2, r3, #1
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df78:	f003 0302 	and.w	r3, r3, #2
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d011      	beq.n	800dfa4 <HAL_UART_IRQHandler+0xf8>
 800df80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df84:	f003 0301 	and.w	r3, r3, #1
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2202      	movs	r2, #2
 800df92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df9a:	f043 0204 	orr.w	r2, r3, #4
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfa8:	f003 0304 	and.w	r3, r3, #4
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d011      	beq.n	800dfd4 <HAL_UART_IRQHandler+0x128>
 800dfb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00b      	beq.n	800dfd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2204      	movs	r2, #4
 800dfc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfca:	f043 0202 	orr.w	r2, r3, #2
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dfd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfd8:	f003 0308 	and.w	r3, r3, #8
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d017      	beq.n	800e010 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dfe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfe4:	f003 0320 	and.w	r3, r3, #32
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d105      	bne.n	800dff8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dfec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800dff0:	4b5c      	ldr	r3, [pc, #368]	@ (800e164 <HAL_UART_IRQHandler+0x2b8>)
 800dff2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2208      	movs	r2, #8
 800dffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e006:	f043 0208 	orr.w	r2, r3, #8
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d012      	beq.n	800e042 <HAL_UART_IRQHandler+0x196>
 800e01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e020:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00c      	beq.n	800e042 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e038:	f043 0220 	orr.w	r2, r3, #32
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 82f9 	beq.w	800e640 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e052:	f003 0320 	and.w	r3, r3, #32
 800e056:	2b00      	cmp	r3, #0
 800e058:	d013      	beq.n	800e082 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e05a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e05e:	f003 0320 	and.w	r3, r3, #32
 800e062:	2b00      	cmp	r3, #0
 800e064:	d105      	bne.n	800e072 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e06a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d007      	beq.n	800e082 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e088:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e096:	2b40      	cmp	r3, #64	@ 0x40
 800e098:	d005      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e09a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e09e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d054      	beq.n	800e150 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f001 faf4 	bl	800f694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b6:	2b40      	cmp	r3, #64	@ 0x40
 800e0b8:	d146      	bne.n	800e148 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0c8:	e853 3f00 	ldrex	r3, [r3]
 800e0cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3308      	adds	r3, #8
 800e0e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e0e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e0ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e0f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e0f6:	e841 2300 	strex	r3, r2, [r1]
 800e0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e0fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1d9      	bne.n	800e0ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d017      	beq.n	800e140 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e116:	4a15      	ldr	r2, [pc, #84]	@ (800e16c <HAL_UART_IRQHandler+0x2c0>)
 800e118:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e120:	4618      	mov	r0, r3
 800e122:	f7f9 fad1 	bl	80076c8 <HAL_DMA_Abort_IT>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d019      	beq.n	800e160 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e13a:	4610      	mov	r0, r2
 800e13c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e13e:	e00f      	b.n	800e160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7f2 ff55 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e146:	e00b      	b.n	800e160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7f2 ff51 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e14e:	e007      	b.n	800e160 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7f2 ff4d 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e15e:	e26f      	b.n	800e640 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e160:	bf00      	nop
    return;
 800e162:	e26d      	b.n	800e640 <HAL_UART_IRQHandler+0x794>
 800e164:	10000001 	.word	0x10000001
 800e168:	04000120 	.word	0x04000120
 800e16c:	0800f9f9 	.word	0x0800f9f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e174:	2b01      	cmp	r3, #1
 800e176:	f040 8203 	bne.w	800e580 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e17e:	f003 0310 	and.w	r3, r3, #16
 800e182:	2b00      	cmp	r3, #0
 800e184:	f000 81fc 	beq.w	800e580 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 81f5 	beq.w	800e580 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2210      	movs	r2, #16
 800e19c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1a8:	2b40      	cmp	r3, #64	@ 0x40
 800e1aa:	f040 816d 	bne.w	800e488 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4aa4      	ldr	r2, [pc, #656]	@ (800e448 <HAL_UART_IRQHandler+0x59c>)
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d068      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4aa1      	ldr	r2, [pc, #644]	@ (800e44c <HAL_UART_IRQHandler+0x5a0>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d061      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4a9f      	ldr	r2, [pc, #636]	@ (800e450 <HAL_UART_IRQHandler+0x5a4>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d05a      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a9c      	ldr	r2, [pc, #624]	@ (800e454 <HAL_UART_IRQHandler+0x5a8>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d053      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a9a      	ldr	r2, [pc, #616]	@ (800e458 <HAL_UART_IRQHandler+0x5ac>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d04c      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a97      	ldr	r2, [pc, #604]	@ (800e45c <HAL_UART_IRQHandler+0x5b0>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d045      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a95      	ldr	r2, [pc, #596]	@ (800e460 <HAL_UART_IRQHandler+0x5b4>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d03e      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a92      	ldr	r2, [pc, #584]	@ (800e464 <HAL_UART_IRQHandler+0x5b8>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d037      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a90      	ldr	r2, [pc, #576]	@ (800e468 <HAL_UART_IRQHandler+0x5bc>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d030      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a8d      	ldr	r2, [pc, #564]	@ (800e46c <HAL_UART_IRQHandler+0x5c0>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d029      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a8b      	ldr	r2, [pc, #556]	@ (800e470 <HAL_UART_IRQHandler+0x5c4>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d022      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a88      	ldr	r2, [pc, #544]	@ (800e474 <HAL_UART_IRQHandler+0x5c8>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d01b      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4a86      	ldr	r2, [pc, #536]	@ (800e478 <HAL_UART_IRQHandler+0x5cc>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d014      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a83      	ldr	r2, [pc, #524]	@ (800e47c <HAL_UART_IRQHandler+0x5d0>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d00d      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a81      	ldr	r2, [pc, #516]	@ (800e480 <HAL_UART_IRQHandler+0x5d4>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d006      	beq.n	800e28e <HAL_UART_IRQHandler+0x3e2>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a7e      	ldr	r2, [pc, #504]	@ (800e484 <HAL_UART_IRQHandler+0x5d8>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d106      	bne.n	800e29c <HAL_UART_IRQHandler+0x3f0>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	e005      	b.n	800e2a8 <HAL_UART_IRQHandler+0x3fc>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e2ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 80ad 	beq.w	800e410 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e2bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	f080 80a5 	bcs.w	800e410 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e2cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2dc:	f000 8087 	beq.w	800e3ee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e2ec:	e853 3f00 	ldrex	r3, [r3]
 800e2f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e2f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e2f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	461a      	mov	r2, r3
 800e306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e30a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e30e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e312:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e316:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e31a:	e841 2300 	strex	r3, r2, [r1]
 800e31e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1da      	bne.n	800e2e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	3308      	adds	r3, #8
 800e330:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e334:	e853 3f00 	ldrex	r3, [r3]
 800e338:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e33a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e33c:	f023 0301 	bic.w	r3, r3, #1
 800e340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3308      	adds	r3, #8
 800e34a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e34e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e352:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e354:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e1      	bne.n	800e32a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3308      	adds	r3, #8
 800e36c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e370:	e853 3f00 	ldrex	r3, [r3]
 800e374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e37c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3308      	adds	r3, #8
 800e386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e38a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e38c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e390:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e392:	e841 2300 	strex	r3, r2, [r1]
 800e396:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1e3      	bne.n	800e366 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b4:	e853 3f00 	ldrex	r3, [r3]
 800e3b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e3ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3bc:	f023 0310 	bic.w	r3, r3, #16
 800e3c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3d6:	e841 2300 	strex	r3, r2, [r1]
 800e3da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1e4      	bne.n	800e3ac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7f8 fe4f 	bl	800708c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2202      	movs	r2, #2
 800e3f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e400:	b29b      	uxth	r3, r3
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	b29b      	uxth	r3, r3
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7f2 fdb9 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e40e:	e119      	b.n	800e644 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e41a:	429a      	cmp	r2, r3
 800e41c:	f040 8112 	bne.w	800e644 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e42c:	f040 810a 	bne.w	800e644 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7f2 fd9e 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
      return;
 800e444:	e0fe      	b.n	800e644 <HAL_UART_IRQHandler+0x798>
 800e446:	bf00      	nop
 800e448:	40020010 	.word	0x40020010
 800e44c:	40020028 	.word	0x40020028
 800e450:	40020040 	.word	0x40020040
 800e454:	40020058 	.word	0x40020058
 800e458:	40020070 	.word	0x40020070
 800e45c:	40020088 	.word	0x40020088
 800e460:	400200a0 	.word	0x400200a0
 800e464:	400200b8 	.word	0x400200b8
 800e468:	40020410 	.word	0x40020410
 800e46c:	40020428 	.word	0x40020428
 800e470:	40020440 	.word	0x40020440
 800e474:	40020458 	.word	0x40020458
 800e478:	40020470 	.word	0x40020470
 800e47c:	40020488 	.word	0x40020488
 800e480:	400204a0 	.word	0x400204a0
 800e484:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e494:	b29b      	uxth	r3, r3
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 80cf 	beq.w	800e648 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e4aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f000 80ca 	beq.w	800e648 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4bc:	e853 3f00 	ldrex	r3, [r3]
 800e4c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e4c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e4      	bne.n	800e4b4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f4:	e853 3f00 	ldrex	r3, [r3]
 800e4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e4fa:	6a3a      	ldr	r2, [r7, #32]
 800e4fc:	4b55      	ldr	r3, [pc, #340]	@ (800e654 <HAL_UART_IRQHandler+0x7a8>)
 800e4fe:	4013      	ands	r3, r2
 800e500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3308      	adds	r3, #8
 800e50a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e50e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e3      	bne.n	800e4ea <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2220      	movs	r2, #32
 800e526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	e853 3f00 	ldrex	r3, [r3]
 800e542:	60fb      	str	r3, [r7, #12]
   return(result);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f023 0310 	bic.w	r3, r3, #16
 800e54a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e558:	61fb      	str	r3, [r7, #28]
 800e55a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	69b9      	ldr	r1, [r7, #24]
 800e55e:	69fa      	ldr	r2, [r7, #28]
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	617b      	str	r3, [r7, #20]
   return(result);
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e4      	bne.n	800e536 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2202      	movs	r2, #2
 800e570:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7f2 fd01 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e57e:	e063      	b.n	800e648 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00e      	beq.n	800e5aa <HAL_UART_IRQHandler+0x6fe>
 800e58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e594:	2b00      	cmp	r3, #0
 800e596:	d008      	beq.n	800e5aa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e5a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 fa65 	bl	800fa72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e5a8:	e051      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d014      	beq.n	800e5e0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d105      	bne.n	800e5ce <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d008      	beq.n	800e5e0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d03a      	beq.n	800e64c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	4798      	blx	r3
    }
    return;
 800e5de:	e035      	b.n	800e64c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d009      	beq.n	800e600 <HAL_UART_IRQHandler+0x754>
 800e5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d003      	beq.n	800e600 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 fa0f 	bl	800fa1c <UART_EndTransmit_IT>
    return;
 800e5fe:	e026      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d009      	beq.n	800e620 <HAL_UART_IRQHandler+0x774>
 800e60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e610:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f001 fa3e 	bl	800fa9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e61e:	e016      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d010      	beq.n	800e64e <HAL_UART_IRQHandler+0x7a2>
 800e62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e630:	2b00      	cmp	r3, #0
 800e632:	da0c      	bge.n	800e64e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f001 fa26 	bl	800fa86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e63a:	e008      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e63c:	bf00      	nop
 800e63e:	e006      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
    return;
 800e640:	bf00      	nop
 800e642:	e004      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e644:	bf00      	nop
 800e646:	e002      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e648:	bf00      	nop
 800e64a:	e000      	b.n	800e64e <HAL_UART_IRQHandler+0x7a2>
    return;
 800e64c:	bf00      	nop
  }
}
 800e64e:	37e8      	adds	r7, #232	@ 0xe8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	effffffe 	.word	0xeffffffe

0800e658 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e684:	b092      	sub	sp, #72	@ 0x48
 800e686:	af00      	add	r7, sp, #0
 800e688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e68a:	2300      	movs	r3, #0
 800e68c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	689a      	ldr	r2, [r3, #8]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	431a      	orrs	r2, r3
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	69db      	ldr	r3, [r3, #28]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	4bbe      	ldr	r3, [pc, #760]	@ (800e9a8 <UART_SetConfig+0x328>)
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	6812      	ldr	r2, [r2, #0]
 800e6b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e6b8:	430b      	orrs	r3, r1
 800e6ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	68da      	ldr	r2, [r3, #12]
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4ab3      	ldr	r2, [pc, #716]	@ (800e9ac <UART_SetConfig+0x32c>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d004      	beq.n	800e6ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689a      	ldr	r2, [r3, #8]
 800e6f2:	4baf      	ldr	r3, [pc, #700]	@ (800e9b0 <UART_SetConfig+0x330>)
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	6812      	ldr	r2, [r2, #0]
 800e6fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e706:	f023 010f 	bic.w	r1, r3, #15
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	430a      	orrs	r2, r1
 800e714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4aa6      	ldr	r2, [pc, #664]	@ (800e9b4 <UART_SetConfig+0x334>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d177      	bne.n	800e810 <UART_SetConfig+0x190>
 800e720:	4ba5      	ldr	r3, [pc, #660]	@ (800e9b8 <UART_SetConfig+0x338>)
 800e722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e724:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e728:	2b28      	cmp	r3, #40	@ 0x28
 800e72a:	d86d      	bhi.n	800e808 <UART_SetConfig+0x188>
 800e72c:	a201      	add	r2, pc, #4	@ (adr r2, 800e734 <UART_SetConfig+0xb4>)
 800e72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e732:	bf00      	nop
 800e734:	0800e7d9 	.word	0x0800e7d9
 800e738:	0800e809 	.word	0x0800e809
 800e73c:	0800e809 	.word	0x0800e809
 800e740:	0800e809 	.word	0x0800e809
 800e744:	0800e809 	.word	0x0800e809
 800e748:	0800e809 	.word	0x0800e809
 800e74c:	0800e809 	.word	0x0800e809
 800e750:	0800e809 	.word	0x0800e809
 800e754:	0800e7e1 	.word	0x0800e7e1
 800e758:	0800e809 	.word	0x0800e809
 800e75c:	0800e809 	.word	0x0800e809
 800e760:	0800e809 	.word	0x0800e809
 800e764:	0800e809 	.word	0x0800e809
 800e768:	0800e809 	.word	0x0800e809
 800e76c:	0800e809 	.word	0x0800e809
 800e770:	0800e809 	.word	0x0800e809
 800e774:	0800e7e9 	.word	0x0800e7e9
 800e778:	0800e809 	.word	0x0800e809
 800e77c:	0800e809 	.word	0x0800e809
 800e780:	0800e809 	.word	0x0800e809
 800e784:	0800e809 	.word	0x0800e809
 800e788:	0800e809 	.word	0x0800e809
 800e78c:	0800e809 	.word	0x0800e809
 800e790:	0800e809 	.word	0x0800e809
 800e794:	0800e7f1 	.word	0x0800e7f1
 800e798:	0800e809 	.word	0x0800e809
 800e79c:	0800e809 	.word	0x0800e809
 800e7a0:	0800e809 	.word	0x0800e809
 800e7a4:	0800e809 	.word	0x0800e809
 800e7a8:	0800e809 	.word	0x0800e809
 800e7ac:	0800e809 	.word	0x0800e809
 800e7b0:	0800e809 	.word	0x0800e809
 800e7b4:	0800e7f9 	.word	0x0800e7f9
 800e7b8:	0800e809 	.word	0x0800e809
 800e7bc:	0800e809 	.word	0x0800e809
 800e7c0:	0800e809 	.word	0x0800e809
 800e7c4:	0800e809 	.word	0x0800e809
 800e7c8:	0800e809 	.word	0x0800e809
 800e7cc:	0800e809 	.word	0x0800e809
 800e7d0:	0800e809 	.word	0x0800e809
 800e7d4:	0800e801 	.word	0x0800e801
 800e7d8:	2301      	movs	r3, #1
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7de:	e222      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e7e0:	2304      	movs	r3, #4
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7e6:	e21e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e7e8:	2308      	movs	r3, #8
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ee:	e21a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e7f0:	2310      	movs	r3, #16
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7f6:	e216      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e7f8:	2320      	movs	r3, #32
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7fe:	e212      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e800:	2340      	movs	r3, #64	@ 0x40
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e806:	e20e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e808:	2380      	movs	r3, #128	@ 0x80
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e80e:	e20a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a69      	ldr	r2, [pc, #420]	@ (800e9bc <UART_SetConfig+0x33c>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d130      	bne.n	800e87c <UART_SetConfig+0x1fc>
 800e81a:	4b67      	ldr	r3, [pc, #412]	@ (800e9b8 <UART_SetConfig+0x338>)
 800e81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	2b05      	cmp	r3, #5
 800e824:	d826      	bhi.n	800e874 <UART_SetConfig+0x1f4>
 800e826:	a201      	add	r2, pc, #4	@ (adr r2, 800e82c <UART_SetConfig+0x1ac>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e845 	.word	0x0800e845
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	0800e855 	.word	0x0800e855
 800e838:	0800e85d 	.word	0x0800e85d
 800e83c:	0800e865 	.word	0x0800e865
 800e840:	0800e86d 	.word	0x0800e86d
 800e844:	2300      	movs	r3, #0
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e84a:	e1ec      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e852:	e1e8      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e85a:	e1e4      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e862:	e1e0      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e86a:	e1dc      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e86c:	2340      	movs	r3, #64	@ 0x40
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e872:	e1d8      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e874:	2380      	movs	r3, #128	@ 0x80
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e87a:	e1d4      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a4f      	ldr	r2, [pc, #316]	@ (800e9c0 <UART_SetConfig+0x340>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d130      	bne.n	800e8e8 <UART_SetConfig+0x268>
 800e886:	4b4c      	ldr	r3, [pc, #304]	@ (800e9b8 <UART_SetConfig+0x338>)
 800e888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e88a:	f003 0307 	and.w	r3, r3, #7
 800e88e:	2b05      	cmp	r3, #5
 800e890:	d826      	bhi.n	800e8e0 <UART_SetConfig+0x260>
 800e892:	a201      	add	r2, pc, #4	@ (adr r2, 800e898 <UART_SetConfig+0x218>)
 800e894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e898:	0800e8b1 	.word	0x0800e8b1
 800e89c:	0800e8b9 	.word	0x0800e8b9
 800e8a0:	0800e8c1 	.word	0x0800e8c1
 800e8a4:	0800e8c9 	.word	0x0800e8c9
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8d9 	.word	0x0800e8d9
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8b6:	e1b6      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8b8:	2304      	movs	r3, #4
 800e8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8be:	e1b2      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8c0:	2308      	movs	r3, #8
 800e8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8c6:	e1ae      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ce:	e1aa      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8d0:	2320      	movs	r3, #32
 800e8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8d6:	e1a6      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8d8:	2340      	movs	r3, #64	@ 0x40
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8de:	e1a2      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8e0:	2380      	movs	r3, #128	@ 0x80
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e6:	e19e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a35      	ldr	r2, [pc, #212]	@ (800e9c4 <UART_SetConfig+0x344>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d130      	bne.n	800e954 <UART_SetConfig+0x2d4>
 800e8f2:	4b31      	ldr	r3, [pc, #196]	@ (800e9b8 <UART_SetConfig+0x338>)
 800e8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f6:	f003 0307 	and.w	r3, r3, #7
 800e8fa:	2b05      	cmp	r3, #5
 800e8fc:	d826      	bhi.n	800e94c <UART_SetConfig+0x2cc>
 800e8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e904 <UART_SetConfig+0x284>)
 800e900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e904:	0800e91d 	.word	0x0800e91d
 800e908:	0800e925 	.word	0x0800e925
 800e90c:	0800e92d 	.word	0x0800e92d
 800e910:	0800e935 	.word	0x0800e935
 800e914:	0800e93d 	.word	0x0800e93d
 800e918:	0800e945 	.word	0x0800e945
 800e91c:	2300      	movs	r3, #0
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e922:	e180      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e924:	2304      	movs	r3, #4
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92a:	e17c      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e92c:	2308      	movs	r3, #8
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e932:	e178      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e934:	2310      	movs	r3, #16
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e93a:	e174      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e93c:	2320      	movs	r3, #32
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e942:	e170      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e944:	2340      	movs	r3, #64	@ 0x40
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94a:	e16c      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e94c:	2380      	movs	r3, #128	@ 0x80
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e952:	e168      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a1b      	ldr	r2, [pc, #108]	@ (800e9c8 <UART_SetConfig+0x348>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d142      	bne.n	800e9e4 <UART_SetConfig+0x364>
 800e95e:	4b16      	ldr	r3, [pc, #88]	@ (800e9b8 <UART_SetConfig+0x338>)
 800e960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e962:	f003 0307 	and.w	r3, r3, #7
 800e966:	2b05      	cmp	r3, #5
 800e968:	d838      	bhi.n	800e9dc <UART_SetConfig+0x35c>
 800e96a:	a201      	add	r2, pc, #4	@ (adr r2, 800e970 <UART_SetConfig+0x2f0>)
 800e96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e970:	0800e989 	.word	0x0800e989
 800e974:	0800e991 	.word	0x0800e991
 800e978:	0800e999 	.word	0x0800e999
 800e97c:	0800e9a1 	.word	0x0800e9a1
 800e980:	0800e9cd 	.word	0x0800e9cd
 800e984:	0800e9d5 	.word	0x0800e9d5
 800e988:	2300      	movs	r3, #0
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98e:	e14a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e990:	2304      	movs	r3, #4
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e996:	e146      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e998:	2308      	movs	r3, #8
 800e99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99e:	e142      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e9a0:	2310      	movs	r3, #16
 800e9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9a6:	e13e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e9a8:	cfff69f3 	.word	0xcfff69f3
 800e9ac:	58000c00 	.word	0x58000c00
 800e9b0:	11fff4ff 	.word	0x11fff4ff
 800e9b4:	40011000 	.word	0x40011000
 800e9b8:	58024400 	.word	0x58024400
 800e9bc:	40004400 	.word	0x40004400
 800e9c0:	40004800 	.word	0x40004800
 800e9c4:	40004c00 	.word	0x40004c00
 800e9c8:	40005000 	.word	0x40005000
 800e9cc:	2320      	movs	r3, #32
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d2:	e128      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e9d4:	2340      	movs	r3, #64	@ 0x40
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9da:	e124      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e9dc:	2380      	movs	r3, #128	@ 0x80
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e2:	e120      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4acb      	ldr	r2, [pc, #812]	@ (800ed18 <UART_SetConfig+0x698>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d176      	bne.n	800eadc <UART_SetConfig+0x45c>
 800e9ee:	4bcb      	ldr	r3, [pc, #812]	@ (800ed1c <UART_SetConfig+0x69c>)
 800e9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e9f6:	2b28      	cmp	r3, #40	@ 0x28
 800e9f8:	d86c      	bhi.n	800ead4 <UART_SetConfig+0x454>
 800e9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800ea00 <UART_SetConfig+0x380>)
 800e9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea00:	0800eaa5 	.word	0x0800eaa5
 800ea04:	0800ead5 	.word	0x0800ead5
 800ea08:	0800ead5 	.word	0x0800ead5
 800ea0c:	0800ead5 	.word	0x0800ead5
 800ea10:	0800ead5 	.word	0x0800ead5
 800ea14:	0800ead5 	.word	0x0800ead5
 800ea18:	0800ead5 	.word	0x0800ead5
 800ea1c:	0800ead5 	.word	0x0800ead5
 800ea20:	0800eaad 	.word	0x0800eaad
 800ea24:	0800ead5 	.word	0x0800ead5
 800ea28:	0800ead5 	.word	0x0800ead5
 800ea2c:	0800ead5 	.word	0x0800ead5
 800ea30:	0800ead5 	.word	0x0800ead5
 800ea34:	0800ead5 	.word	0x0800ead5
 800ea38:	0800ead5 	.word	0x0800ead5
 800ea3c:	0800ead5 	.word	0x0800ead5
 800ea40:	0800eab5 	.word	0x0800eab5
 800ea44:	0800ead5 	.word	0x0800ead5
 800ea48:	0800ead5 	.word	0x0800ead5
 800ea4c:	0800ead5 	.word	0x0800ead5
 800ea50:	0800ead5 	.word	0x0800ead5
 800ea54:	0800ead5 	.word	0x0800ead5
 800ea58:	0800ead5 	.word	0x0800ead5
 800ea5c:	0800ead5 	.word	0x0800ead5
 800ea60:	0800eabd 	.word	0x0800eabd
 800ea64:	0800ead5 	.word	0x0800ead5
 800ea68:	0800ead5 	.word	0x0800ead5
 800ea6c:	0800ead5 	.word	0x0800ead5
 800ea70:	0800ead5 	.word	0x0800ead5
 800ea74:	0800ead5 	.word	0x0800ead5
 800ea78:	0800ead5 	.word	0x0800ead5
 800ea7c:	0800ead5 	.word	0x0800ead5
 800ea80:	0800eac5 	.word	0x0800eac5
 800ea84:	0800ead5 	.word	0x0800ead5
 800ea88:	0800ead5 	.word	0x0800ead5
 800ea8c:	0800ead5 	.word	0x0800ead5
 800ea90:	0800ead5 	.word	0x0800ead5
 800ea94:	0800ead5 	.word	0x0800ead5
 800ea98:	0800ead5 	.word	0x0800ead5
 800ea9c:	0800ead5 	.word	0x0800ead5
 800eaa0:	0800eacd 	.word	0x0800eacd
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaaa:	e0bc      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eaac:	2304      	movs	r3, #4
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab2:	e0b8      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eab4:	2308      	movs	r3, #8
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaba:	e0b4      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eabc:	2310      	movs	r3, #16
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac2:	e0b0      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eac4:	2320      	movs	r3, #32
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaca:	e0ac      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eacc:	2340      	movs	r3, #64	@ 0x40
 800eace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead2:	e0a8      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ead4:	2380      	movs	r3, #128	@ 0x80
 800ead6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eada:	e0a4      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a8f      	ldr	r2, [pc, #572]	@ (800ed20 <UART_SetConfig+0x6a0>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d130      	bne.n	800eb48 <UART_SetConfig+0x4c8>
 800eae6:	4b8d      	ldr	r3, [pc, #564]	@ (800ed1c <UART_SetConfig+0x69c>)
 800eae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaea:	f003 0307 	and.w	r3, r3, #7
 800eaee:	2b05      	cmp	r3, #5
 800eaf0:	d826      	bhi.n	800eb40 <UART_SetConfig+0x4c0>
 800eaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf8 <UART_SetConfig+0x478>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb11 	.word	0x0800eb11
 800eafc:	0800eb19 	.word	0x0800eb19
 800eb00:	0800eb21 	.word	0x0800eb21
 800eb04:	0800eb29 	.word	0x0800eb29
 800eb08:	0800eb31 	.word	0x0800eb31
 800eb0c:	0800eb39 	.word	0x0800eb39
 800eb10:	2300      	movs	r3, #0
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb16:	e086      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb18:	2304      	movs	r3, #4
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1e:	e082      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb20:	2308      	movs	r3, #8
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb26:	e07e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb28:	2310      	movs	r3, #16
 800eb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb2e:	e07a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb30:	2320      	movs	r3, #32
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb36:	e076      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb38:	2340      	movs	r3, #64	@ 0x40
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3e:	e072      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb40:	2380      	movs	r3, #128	@ 0x80
 800eb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb46:	e06e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a75      	ldr	r2, [pc, #468]	@ (800ed24 <UART_SetConfig+0x6a4>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d130      	bne.n	800ebb4 <UART_SetConfig+0x534>
 800eb52:	4b72      	ldr	r3, [pc, #456]	@ (800ed1c <UART_SetConfig+0x69c>)
 800eb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b05      	cmp	r3, #5
 800eb5c:	d826      	bhi.n	800ebac <UART_SetConfig+0x52c>
 800eb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb64 <UART_SetConfig+0x4e4>)
 800eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb64:	0800eb7d 	.word	0x0800eb7d
 800eb68:	0800eb85 	.word	0x0800eb85
 800eb6c:	0800eb8d 	.word	0x0800eb8d
 800eb70:	0800eb95 	.word	0x0800eb95
 800eb74:	0800eb9d 	.word	0x0800eb9d
 800eb78:	0800eba5 	.word	0x0800eba5
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb82:	e050      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb84:	2304      	movs	r3, #4
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8a:	e04c      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb8c:	2308      	movs	r3, #8
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb92:	e048      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb94:	2310      	movs	r3, #16
 800eb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb9a:	e044      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eb9c:	2320      	movs	r3, #32
 800eb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba2:	e040      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800eba4:	2340      	movs	r3, #64	@ 0x40
 800eba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebaa:	e03c      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ebac:	2380      	movs	r3, #128	@ 0x80
 800ebae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb2:	e038      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a5b      	ldr	r2, [pc, #364]	@ (800ed28 <UART_SetConfig+0x6a8>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d130      	bne.n	800ec20 <UART_SetConfig+0x5a0>
 800ebbe:	4b57      	ldr	r3, [pc, #348]	@ (800ed1c <UART_SetConfig+0x69c>)
 800ebc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebc2:	f003 0307 	and.w	r3, r3, #7
 800ebc6:	2b05      	cmp	r3, #5
 800ebc8:	d826      	bhi.n	800ec18 <UART_SetConfig+0x598>
 800ebca:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd0 <UART_SetConfig+0x550>)
 800ebcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd0:	0800ebe9 	.word	0x0800ebe9
 800ebd4:	0800ebf1 	.word	0x0800ebf1
 800ebd8:	0800ebf9 	.word	0x0800ebf9
 800ebdc:	0800ec01 	.word	0x0800ec01
 800ebe0:	0800ec09 	.word	0x0800ec09
 800ebe4:	0800ec11 	.word	0x0800ec11
 800ebe8:	2302      	movs	r3, #2
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebee:	e01a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ebf0:	2304      	movs	r3, #4
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebf6:	e016      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ebf8:	2308      	movs	r3, #8
 800ebfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfe:	e012      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ec00:	2310      	movs	r3, #16
 800ec02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec06:	e00e      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ec08:	2320      	movs	r3, #32
 800ec0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0e:	e00a      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ec10:	2340      	movs	r3, #64	@ 0x40
 800ec12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec16:	e006      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ec18:	2380      	movs	r3, #128	@ 0x80
 800ec1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1e:	e002      	b.n	800ec26 <UART_SetConfig+0x5a6>
 800ec20:	2380      	movs	r3, #128	@ 0x80
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a3f      	ldr	r2, [pc, #252]	@ (800ed28 <UART_SetConfig+0x6a8>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	f040 80f8 	bne.w	800ee22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ec36:	2b20      	cmp	r3, #32
 800ec38:	dc46      	bgt.n	800ecc8 <UART_SetConfig+0x648>
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	f2c0 8082 	blt.w	800ed44 <UART_SetConfig+0x6c4>
 800ec40:	3b02      	subs	r3, #2
 800ec42:	2b1e      	cmp	r3, #30
 800ec44:	d87e      	bhi.n	800ed44 <UART_SetConfig+0x6c4>
 800ec46:	a201      	add	r2, pc, #4	@ (adr r2, 800ec4c <UART_SetConfig+0x5cc>)
 800ec48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4c:	0800eccf 	.word	0x0800eccf
 800ec50:	0800ed45 	.word	0x0800ed45
 800ec54:	0800ecd7 	.word	0x0800ecd7
 800ec58:	0800ed45 	.word	0x0800ed45
 800ec5c:	0800ed45 	.word	0x0800ed45
 800ec60:	0800ed45 	.word	0x0800ed45
 800ec64:	0800ece7 	.word	0x0800ece7
 800ec68:	0800ed45 	.word	0x0800ed45
 800ec6c:	0800ed45 	.word	0x0800ed45
 800ec70:	0800ed45 	.word	0x0800ed45
 800ec74:	0800ed45 	.word	0x0800ed45
 800ec78:	0800ed45 	.word	0x0800ed45
 800ec7c:	0800ed45 	.word	0x0800ed45
 800ec80:	0800ed45 	.word	0x0800ed45
 800ec84:	0800ecf7 	.word	0x0800ecf7
 800ec88:	0800ed45 	.word	0x0800ed45
 800ec8c:	0800ed45 	.word	0x0800ed45
 800ec90:	0800ed45 	.word	0x0800ed45
 800ec94:	0800ed45 	.word	0x0800ed45
 800ec98:	0800ed45 	.word	0x0800ed45
 800ec9c:	0800ed45 	.word	0x0800ed45
 800eca0:	0800ed45 	.word	0x0800ed45
 800eca4:	0800ed45 	.word	0x0800ed45
 800eca8:	0800ed45 	.word	0x0800ed45
 800ecac:	0800ed45 	.word	0x0800ed45
 800ecb0:	0800ed45 	.word	0x0800ed45
 800ecb4:	0800ed45 	.word	0x0800ed45
 800ecb8:	0800ed45 	.word	0x0800ed45
 800ecbc:	0800ed45 	.word	0x0800ed45
 800ecc0:	0800ed45 	.word	0x0800ed45
 800ecc4:	0800ed37 	.word	0x0800ed37
 800ecc8:	2b40      	cmp	r3, #64	@ 0x40
 800ecca:	d037      	beq.n	800ed3c <UART_SetConfig+0x6bc>
 800eccc:	e03a      	b.n	800ed44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ecce:	f7fe f87d 	bl	800cdcc <HAL_RCCEx_GetD3PCLK1Freq>
 800ecd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ecd4:	e03c      	b.n	800ed50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe f88c 	bl	800cdf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ece4:	e034      	b.n	800ed50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ece6:	f107 0318 	add.w	r3, r7, #24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe f9d8 	bl	800d0a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf4:	e02c      	b.n	800ed50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecf6:	4b09      	ldr	r3, [pc, #36]	@ (800ed1c <UART_SetConfig+0x69c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f003 0320 	and.w	r3, r3, #32
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d016      	beq.n	800ed30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed02:	4b06      	ldr	r3, [pc, #24]	@ (800ed1c <UART_SetConfig+0x69c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	08db      	lsrs	r3, r3, #3
 800ed08:	f003 0303 	and.w	r3, r3, #3
 800ed0c:	4a07      	ldr	r2, [pc, #28]	@ (800ed2c <UART_SetConfig+0x6ac>)
 800ed0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed14:	e01c      	b.n	800ed50 <UART_SetConfig+0x6d0>
 800ed16:	bf00      	nop
 800ed18:	40011400 	.word	0x40011400
 800ed1c:	58024400 	.word	0x58024400
 800ed20:	40007800 	.word	0x40007800
 800ed24:	40007c00 	.word	0x40007c00
 800ed28:	58000c00 	.word	0x58000c00
 800ed2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ed30:	4b9d      	ldr	r3, [pc, #628]	@ (800efa8 <UART_SetConfig+0x928>)
 800ed32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed34:	e00c      	b.n	800ed50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed36:	4b9d      	ldr	r3, [pc, #628]	@ (800efac <UART_SetConfig+0x92c>)
 800ed38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed3a:	e009      	b.n	800ed50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed42:	e005      	b.n	800ed50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ed44:	2300      	movs	r3, #0
 800ed46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ed4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 81de 	beq.w	800f114 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed5c:	4a94      	ldr	r2, [pc, #592]	@ (800efb0 <UART_SetConfig+0x930>)
 800ed5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed62:	461a      	mov	r2, r3
 800ed64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	4613      	mov	r3, r2
 800ed72:	005b      	lsls	r3, r3, #1
 800ed74:	4413      	add	r3, r2
 800ed76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d305      	bcc.n	800ed88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d903      	bls.n	800ed90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed8e:	e1c1      	b.n	800f114 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed92:	2200      	movs	r2, #0
 800ed94:	60bb      	str	r3, [r7, #8]
 800ed96:	60fa      	str	r2, [r7, #12]
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed9c:	4a84      	ldr	r2, [pc, #528]	@ (800efb0 <UART_SetConfig+0x930>)
 800ed9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	2200      	movs	r2, #0
 800eda6:	603b      	str	r3, [r7, #0]
 800eda8:	607a      	str	r2, [r7, #4]
 800edaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edb2:	f7f1 fdb7 	bl	8000924 <__aeabi_uldivmod>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4610      	mov	r0, r2
 800edbc:	4619      	mov	r1, r3
 800edbe:	f04f 0200 	mov.w	r2, #0
 800edc2:	f04f 0300 	mov.w	r3, #0
 800edc6:	020b      	lsls	r3, r1, #8
 800edc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edcc:	0202      	lsls	r2, r0, #8
 800edce:	6979      	ldr	r1, [r7, #20]
 800edd0:	6849      	ldr	r1, [r1, #4]
 800edd2:	0849      	lsrs	r1, r1, #1
 800edd4:	2000      	movs	r0, #0
 800edd6:	460c      	mov	r4, r1
 800edd8:	4605      	mov	r5, r0
 800edda:	eb12 0804 	adds.w	r8, r2, r4
 800edde:	eb43 0905 	adc.w	r9, r3, r5
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	469a      	mov	sl, r3
 800edea:	4693      	mov	fp, r2
 800edec:	4652      	mov	r2, sl
 800edee:	465b      	mov	r3, fp
 800edf0:	4640      	mov	r0, r8
 800edf2:	4649      	mov	r1, r9
 800edf4:	f7f1 fd96 	bl	8000924 <__aeabi_uldivmod>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4613      	mov	r3, r2
 800edfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee06:	d308      	bcc.n	800ee1a <UART_SetConfig+0x79a>
 800ee08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee0e:	d204      	bcs.n	800ee1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee16:	60da      	str	r2, [r3, #12]
 800ee18:	e17c      	b.n	800f114 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ee20:	e178      	b.n	800f114 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee2a:	f040 80c5 	bne.w	800efb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ee2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ee32:	2b20      	cmp	r3, #32
 800ee34:	dc48      	bgt.n	800eec8 <UART_SetConfig+0x848>
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	db7b      	blt.n	800ef32 <UART_SetConfig+0x8b2>
 800ee3a:	2b20      	cmp	r3, #32
 800ee3c:	d879      	bhi.n	800ef32 <UART_SetConfig+0x8b2>
 800ee3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee44 <UART_SetConfig+0x7c4>)
 800ee40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee44:	0800eecf 	.word	0x0800eecf
 800ee48:	0800eed7 	.word	0x0800eed7
 800ee4c:	0800ef33 	.word	0x0800ef33
 800ee50:	0800ef33 	.word	0x0800ef33
 800ee54:	0800eedf 	.word	0x0800eedf
 800ee58:	0800ef33 	.word	0x0800ef33
 800ee5c:	0800ef33 	.word	0x0800ef33
 800ee60:	0800ef33 	.word	0x0800ef33
 800ee64:	0800eeef 	.word	0x0800eeef
 800ee68:	0800ef33 	.word	0x0800ef33
 800ee6c:	0800ef33 	.word	0x0800ef33
 800ee70:	0800ef33 	.word	0x0800ef33
 800ee74:	0800ef33 	.word	0x0800ef33
 800ee78:	0800ef33 	.word	0x0800ef33
 800ee7c:	0800ef33 	.word	0x0800ef33
 800ee80:	0800ef33 	.word	0x0800ef33
 800ee84:	0800eeff 	.word	0x0800eeff
 800ee88:	0800ef33 	.word	0x0800ef33
 800ee8c:	0800ef33 	.word	0x0800ef33
 800ee90:	0800ef33 	.word	0x0800ef33
 800ee94:	0800ef33 	.word	0x0800ef33
 800ee98:	0800ef33 	.word	0x0800ef33
 800ee9c:	0800ef33 	.word	0x0800ef33
 800eea0:	0800ef33 	.word	0x0800ef33
 800eea4:	0800ef33 	.word	0x0800ef33
 800eea8:	0800ef33 	.word	0x0800ef33
 800eeac:	0800ef33 	.word	0x0800ef33
 800eeb0:	0800ef33 	.word	0x0800ef33
 800eeb4:	0800ef33 	.word	0x0800ef33
 800eeb8:	0800ef33 	.word	0x0800ef33
 800eebc:	0800ef33 	.word	0x0800ef33
 800eec0:	0800ef33 	.word	0x0800ef33
 800eec4:	0800ef25 	.word	0x0800ef25
 800eec8:	2b40      	cmp	r3, #64	@ 0x40
 800eeca:	d02e      	beq.n	800ef2a <UART_SetConfig+0x8aa>
 800eecc:	e031      	b.n	800ef32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eece:	f7fc fd05 	bl	800b8dc <HAL_RCC_GetPCLK1Freq>
 800eed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eed4:	e033      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eed6:	f7fc fd17 	bl	800b908 <HAL_RCC_GetPCLK2Freq>
 800eeda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eedc:	e02f      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fd ff88 	bl	800cdf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeec:	e027      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eeee:	f107 0318 	add.w	r3, r7, #24
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe f8d4 	bl	800d0a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eefc:	e01f      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eefe:	4b2d      	ldr	r3, [pc, #180]	@ (800efb4 <UART_SetConfig+0x934>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 0320 	and.w	r3, r3, #32
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d009      	beq.n	800ef1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef0a:	4b2a      	ldr	r3, [pc, #168]	@ (800efb4 <UART_SetConfig+0x934>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	08db      	lsrs	r3, r3, #3
 800ef10:	f003 0303 	and.w	r3, r3, #3
 800ef14:	4a24      	ldr	r2, [pc, #144]	@ (800efa8 <UART_SetConfig+0x928>)
 800ef16:	fa22 f303 	lsr.w	r3, r2, r3
 800ef1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef1c:	e00f      	b.n	800ef3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ef1e:	4b22      	ldr	r3, [pc, #136]	@ (800efa8 <UART_SetConfig+0x928>)
 800ef20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef22:	e00c      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef24:	4b21      	ldr	r3, [pc, #132]	@ (800efac <UART_SetConfig+0x92c>)
 800ef26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef28:	e009      	b.n	800ef3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef30:	e005      	b.n	800ef3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ef32:	2300      	movs	r3, #0
 800ef34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ef3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f000 80e7 	beq.w	800f114 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4a:	4a19      	ldr	r2, [pc, #100]	@ (800efb0 <UART_SetConfig+0x930>)
 800ef4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef50:	461a      	mov	r2, r3
 800ef52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef54:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef58:	005a      	lsls	r2, r3, #1
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	085b      	lsrs	r3, r3, #1
 800ef60:	441a      	add	r2, r3
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6e:	2b0f      	cmp	r3, #15
 800ef70:	d916      	bls.n	800efa0 <UART_SetConfig+0x920>
 800ef72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef78:	d212      	bcs.n	800efa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	f023 030f 	bic.w	r3, r3, #15
 800ef82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef86:	085b      	lsrs	r3, r3, #1
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	f003 0307 	and.w	r3, r3, #7
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef92:	4313      	orrs	r3, r2
 800ef94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ef9c:	60da      	str	r2, [r3, #12]
 800ef9e:	e0b9      	b.n	800f114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800efa0:	2301      	movs	r3, #1
 800efa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800efa6:	e0b5      	b.n	800f114 <UART_SetConfig+0xa94>
 800efa8:	03d09000 	.word	0x03d09000
 800efac:	003d0900 	.word	0x003d0900
 800efb0:	08017350 	.word	0x08017350
 800efb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800efb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efbc:	2b20      	cmp	r3, #32
 800efbe:	dc49      	bgt.n	800f054 <UART_SetConfig+0x9d4>
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	db7c      	blt.n	800f0be <UART_SetConfig+0xa3e>
 800efc4:	2b20      	cmp	r3, #32
 800efc6:	d87a      	bhi.n	800f0be <UART_SetConfig+0xa3e>
 800efc8:	a201      	add	r2, pc, #4	@ (adr r2, 800efd0 <UART_SetConfig+0x950>)
 800efca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efce:	bf00      	nop
 800efd0:	0800f05b 	.word	0x0800f05b
 800efd4:	0800f063 	.word	0x0800f063
 800efd8:	0800f0bf 	.word	0x0800f0bf
 800efdc:	0800f0bf 	.word	0x0800f0bf
 800efe0:	0800f06b 	.word	0x0800f06b
 800efe4:	0800f0bf 	.word	0x0800f0bf
 800efe8:	0800f0bf 	.word	0x0800f0bf
 800efec:	0800f0bf 	.word	0x0800f0bf
 800eff0:	0800f07b 	.word	0x0800f07b
 800eff4:	0800f0bf 	.word	0x0800f0bf
 800eff8:	0800f0bf 	.word	0x0800f0bf
 800effc:	0800f0bf 	.word	0x0800f0bf
 800f000:	0800f0bf 	.word	0x0800f0bf
 800f004:	0800f0bf 	.word	0x0800f0bf
 800f008:	0800f0bf 	.word	0x0800f0bf
 800f00c:	0800f0bf 	.word	0x0800f0bf
 800f010:	0800f08b 	.word	0x0800f08b
 800f014:	0800f0bf 	.word	0x0800f0bf
 800f018:	0800f0bf 	.word	0x0800f0bf
 800f01c:	0800f0bf 	.word	0x0800f0bf
 800f020:	0800f0bf 	.word	0x0800f0bf
 800f024:	0800f0bf 	.word	0x0800f0bf
 800f028:	0800f0bf 	.word	0x0800f0bf
 800f02c:	0800f0bf 	.word	0x0800f0bf
 800f030:	0800f0bf 	.word	0x0800f0bf
 800f034:	0800f0bf 	.word	0x0800f0bf
 800f038:	0800f0bf 	.word	0x0800f0bf
 800f03c:	0800f0bf 	.word	0x0800f0bf
 800f040:	0800f0bf 	.word	0x0800f0bf
 800f044:	0800f0bf 	.word	0x0800f0bf
 800f048:	0800f0bf 	.word	0x0800f0bf
 800f04c:	0800f0bf 	.word	0x0800f0bf
 800f050:	0800f0b1 	.word	0x0800f0b1
 800f054:	2b40      	cmp	r3, #64	@ 0x40
 800f056:	d02e      	beq.n	800f0b6 <UART_SetConfig+0xa36>
 800f058:	e031      	b.n	800f0be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f05a:	f7fc fc3f 	bl	800b8dc <HAL_RCC_GetPCLK1Freq>
 800f05e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f060:	e033      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f062:	f7fc fc51 	bl	800b908 <HAL_RCC_GetPCLK2Freq>
 800f066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f068:	e02f      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f06a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd fec2 	bl	800cdf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f078:	e027      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f07a:	f107 0318 	add.w	r3, r7, #24
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe f80e 	bl	800d0a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f088:	e01f      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f08a:	4b2d      	ldr	r3, [pc, #180]	@ (800f140 <UART_SetConfig+0xac0>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f003 0320 	and.w	r3, r3, #32
 800f092:	2b00      	cmp	r3, #0
 800f094:	d009      	beq.n	800f0aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f096:	4b2a      	ldr	r3, [pc, #168]	@ (800f140 <UART_SetConfig+0xac0>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	08db      	lsrs	r3, r3, #3
 800f09c:	f003 0303 	and.w	r3, r3, #3
 800f0a0:	4a28      	ldr	r2, [pc, #160]	@ (800f144 <UART_SetConfig+0xac4>)
 800f0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0a8:	e00f      	b.n	800f0ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f0aa:	4b26      	ldr	r3, [pc, #152]	@ (800f144 <UART_SetConfig+0xac4>)
 800f0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0ae:	e00c      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0b0:	4b25      	ldr	r3, [pc, #148]	@ (800f148 <UART_SetConfig+0xac8>)
 800f0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0b4:	e009      	b.n	800f0ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0bc:	e005      	b.n	800f0ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0c8:	bf00      	nop
    }

    if (pclk != 0U)
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d021      	beq.n	800f114 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800f14c <UART_SetConfig+0xacc>)
 800f0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0de:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	085b      	lsrs	r3, r3, #1
 800f0e8:	441a      	add	r2, r3
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f6:	2b0f      	cmp	r3, #15
 800f0f8:	d909      	bls.n	800f10e <UART_SetConfig+0xa8e>
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f100:	d205      	bcs.n	800f10e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	b29a      	uxth	r2, r3
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	60da      	str	r2, [r3, #12]
 800f10c:	e002      	b.n	800f114 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	2201      	movs	r2, #1
 800f118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	2201      	movs	r2, #1
 800f120:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2200      	movs	r2, #0
 800f128:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	2200      	movs	r2, #0
 800f12e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f130:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f134:	4618      	mov	r0, r3
 800f136:	3748      	adds	r7, #72	@ 0x48
 800f138:	46bd      	mov	sp, r7
 800f13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f13e:	bf00      	nop
 800f140:	58024400 	.word	0x58024400
 800f144:	03d09000 	.word	0x03d09000
 800f148:	003d0900 	.word	0x003d0900
 800f14c:	08017350 	.word	0x08017350

0800f150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f15c:	f003 0308 	and.w	r3, r3, #8
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00a      	beq.n	800f17a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	430a      	orrs	r2, r1
 800f178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f17e:	f003 0301 	and.w	r3, r3, #1
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00a      	beq.n	800f19c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	430a      	orrs	r2, r1
 800f19a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a0:	f003 0302 	and.w	r3, r3, #2
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00a      	beq.n	800f1be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1c2:	f003 0304 	and.w	r3, r3, #4
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00a      	beq.n	800f1e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	430a      	orrs	r2, r1
 800f1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1e4:	f003 0310 	and.w	r3, r3, #16
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00a      	beq.n	800f202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	430a      	orrs	r2, r1
 800f200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f206:	f003 0320 	and.w	r3, r3, #32
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	430a      	orrs	r2, r1
 800f222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d01a      	beq.n	800f266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	430a      	orrs	r2, r1
 800f244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f24a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f24e:	d10a      	bne.n	800f266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	430a      	orrs	r2, r1
 800f264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00a      	beq.n	800f288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	430a      	orrs	r2, r1
 800f286:	605a      	str	r2, [r3, #4]
  }
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b098      	sub	sp, #96	@ 0x60
 800f298:	af02      	add	r7, sp, #8
 800f29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2a4:	f7f6 fde2 	bl	8005e6c <HAL_GetTick>
 800f2a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f003 0308 	and.w	r3, r3, #8
 800f2b4:	2b08      	cmp	r3, #8
 800f2b6:	d12f      	bne.n	800f318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f2bc:	9300      	str	r3, [sp, #0]
 800f2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f88e 	bl	800f3e8 <UART_WaitOnFlagUntilTimeout>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d022      	beq.n	800f318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2da:	e853 3f00 	ldrex	r3, [r3]
 800f2de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2f8:	e841 2300 	strex	r3, r2, [r1]
 800f2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e6      	bne.n	800f2d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2220      	movs	r2, #32
 800f308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f314:	2303      	movs	r3, #3
 800f316:	e063      	b.n	800f3e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f003 0304 	and.w	r3, r3, #4
 800f322:	2b04      	cmp	r3, #4
 800f324:	d149      	bne.n	800f3ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f32e:	2200      	movs	r2, #0
 800f330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f857 	bl	800f3e8 <UART_WaitOnFlagUntilTimeout>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d03c      	beq.n	800f3ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f348:	e853 3f00 	ldrex	r3, [r3]
 800f34c:	623b      	str	r3, [r7, #32]
   return(result);
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1e6      	bne.n	800f340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3308      	adds	r3, #8
 800f378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	e853 3f00 	ldrex	r3, [r3]
 800f380:	60fb      	str	r3, [r7, #12]
   return(result);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f023 0301 	bic.w	r3, r3, #1
 800f388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3308      	adds	r3, #8
 800f390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f392:	61fa      	str	r2, [r7, #28]
 800f394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f396:	69b9      	ldr	r1, [r7, #24]
 800f398:	69fa      	ldr	r2, [r7, #28]
 800f39a:	e841 2300 	strex	r3, r2, [r1]
 800f39e:	617b      	str	r3, [r7, #20]
   return(result);
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e5      	bne.n	800f372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2220      	movs	r2, #32
 800f3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	e012      	b.n	800f3e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2220      	movs	r2, #32
 800f3be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2220      	movs	r2, #32
 800f3c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3758      	adds	r7, #88	@ 0x58
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	603b      	str	r3, [r7, #0]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3f8:	e04f      	b.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f400:	d04b      	beq.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f402:	f7f6 fd33 	bl	8005e6c <HAL_GetTick>
 800f406:	4602      	mov	r2, r0
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	69ba      	ldr	r2, [r7, #24]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d302      	bcc.n	800f418 <UART_WaitOnFlagUntilTimeout+0x30>
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f418:	2303      	movs	r3, #3
 800f41a:	e04e      	b.n	800f4ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f003 0304 	and.w	r3, r3, #4
 800f426:	2b00      	cmp	r3, #0
 800f428:	d037      	beq.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	2b80      	cmp	r3, #128	@ 0x80
 800f42e:	d034      	beq.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	2b40      	cmp	r3, #64	@ 0x40
 800f434:	d031      	beq.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	69db      	ldr	r3, [r3, #28]
 800f43c:	f003 0308 	and.w	r3, r3, #8
 800f440:	2b08      	cmp	r3, #8
 800f442:	d110      	bne.n	800f466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2208      	movs	r2, #8
 800f44a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f000 f921 	bl	800f694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2208      	movs	r2, #8
 800f456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f462:	2301      	movs	r3, #1
 800f464:	e029      	b.n	800f4ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f474:	d111      	bne.n	800f49a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f47e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f000 f907 	bl	800f694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2220      	movs	r2, #32
 800f48a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f496:	2303      	movs	r3, #3
 800f498:	e00f      	b.n	800f4ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	69da      	ldr	r2, [r3, #28]
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	bf0c      	ite	eq
 800f4aa:	2301      	moveq	r3, #1
 800f4ac:	2300      	movne	r3, #0
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d0a0      	beq.n	800f3fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
	...

0800f4c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b096      	sub	sp, #88	@ 0x58
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	88fa      	ldrh	r2, [r7, #6]
 800f4dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2222      	movs	r2, #34	@ 0x22
 800f4ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d02d      	beq.n	800f556 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f500:	4a40      	ldr	r2, [pc, #256]	@ (800f604 <UART_Start_Receive_DMA+0x140>)
 800f502:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f50a:	4a3f      	ldr	r2, [pc, #252]	@ (800f608 <UART_Start_Receive_DMA+0x144>)
 800f50c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f514:	4a3d      	ldr	r2, [pc, #244]	@ (800f60c <UART_Start_Receive_DMA+0x148>)
 800f516:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f51e:	2200      	movs	r2, #0
 800f520:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3324      	adds	r3, #36	@ 0x24
 800f52e:	4619      	mov	r1, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f534:	461a      	mov	r2, r3
 800f536:	88fb      	ldrh	r3, [r7, #6]
 800f538:	f7f7 fb3e 	bl	8006bb8 <HAL_DMA_Start_IT>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d009      	beq.n	800f556 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2210      	movs	r2, #16
 800f546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2220      	movs	r2, #32
 800f54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e051      	b.n	800f5fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	691b      	ldr	r3, [r3, #16]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d018      	beq.n	800f590 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f566:	e853 3f00 	ldrex	r3, [r3]
 800f56a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f572:	657b      	str	r3, [r7, #84]	@ 0x54
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	461a      	mov	r2, r3
 800f57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f57e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f584:	e841 2300 	strex	r3, r2, [r1]
 800f588:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f58a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e6      	bne.n	800f55e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3308      	adds	r3, #8
 800f596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a2:	f043 0301 	orr.w	r3, r3, #1
 800f5a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f5b0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f5b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5b8:	e841 2300 	strex	r3, r2, [r1]
 800f5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1e5      	bne.n	800f590 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	e853 3f00 	ldrex	r3, [r3]
 800f5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f5e4:	623a      	str	r2, [r7, #32]
 800f5e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e8:	69f9      	ldr	r1, [r7, #28]
 800f5ea:	6a3a      	ldr	r2, [r7, #32]
 800f5ec:	e841 2300 	strex	r3, r2, [r1]
 800f5f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1e5      	bne.n	800f5c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3758      	adds	r7, #88	@ 0x58
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	0800f813 	.word	0x0800f813
 800f608:	0800f93b 	.word	0x0800f93b
 800f60c:	0800f979 	.word	0x0800f979

0800f610 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f610:	b480      	push	{r7}
 800f612:	b08f      	sub	sp, #60	@ 0x3c
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	e853 3f00 	ldrex	r3, [r3]
 800f624:	61fb      	str	r3, [r7, #28]
   return(result);
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f638:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f63e:	e841 2300 	strex	r3, r2, [r1]
 800f642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1e6      	bne.n	800f618 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3308      	adds	r3, #8
 800f650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	e853 3f00 	ldrex	r3, [r3]
 800f658:	60bb      	str	r3, [r7, #8]
   return(result);
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f660:	633b      	str	r3, [r7, #48]	@ 0x30
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3308      	adds	r3, #8
 800f668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f66a:	61ba      	str	r2, [r7, #24]
 800f66c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66e:	6979      	ldr	r1, [r7, #20]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	e841 2300 	strex	r3, r2, [r1]
 800f676:	613b      	str	r3, [r7, #16]
   return(result);
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1e5      	bne.n	800f64a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2220      	movs	r2, #32
 800f682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f686:	bf00      	nop
 800f688:	373c      	adds	r7, #60	@ 0x3c
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
	...

0800f694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f694:	b480      	push	{r7}
 800f696:	b095      	sub	sp, #84	@ 0x54
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6a4:	e853 3f00 	ldrex	r3, [r3]
 800f6a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f6c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f6c2:	e841 2300 	strex	r3, r2, [r1]
 800f6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1e6      	bne.n	800f69c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	e853 3f00 	ldrex	r3, [r3]
 800f6dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6de:	69fa      	ldr	r2, [r7, #28]
 800f6e0:	4b1e      	ldr	r3, [pc, #120]	@ (800f75c <UART_EndRxTransfer+0xc8>)
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6f6:	e841 2300 	strex	r3, r2, [r1]
 800f6fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1e5      	bne.n	800f6ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f706:	2b01      	cmp	r3, #1
 800f708:	d118      	bne.n	800f73c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	e853 3f00 	ldrex	r3, [r3]
 800f716:	60bb      	str	r3, [r7, #8]
   return(result);
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	f023 0310 	bic.w	r3, r3, #16
 800f71e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	461a      	mov	r2, r3
 800f726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f728:	61bb      	str	r3, [r7, #24]
 800f72a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72c:	6979      	ldr	r1, [r7, #20]
 800f72e:	69ba      	ldr	r2, [r7, #24]
 800f730:	e841 2300 	strex	r3, r2, [r1]
 800f734:	613b      	str	r3, [r7, #16]
   return(result);
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1e6      	bne.n	800f70a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2220      	movs	r2, #32
 800f740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f750:	bf00      	nop
 800f752:	3754      	adds	r7, #84	@ 0x54
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	effffffe 	.word	0xeffffffe

0800f760 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b090      	sub	sp, #64	@ 0x40
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f76c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f776:	d037      	beq.n	800f7e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77a:	2200      	movs	r2, #0
 800f77c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3308      	adds	r3, #8
 800f786:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f78a:	e853 3f00 	ldrex	r3, [r3]
 800f78e:	623b      	str	r3, [r7, #32]
   return(result);
 800f790:	6a3b      	ldr	r3, [r7, #32]
 800f792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f796:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3308      	adds	r3, #8
 800f79e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800f7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7a8:	e841 2300 	strex	r3, r2, [r1]
 800f7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e5      	bne.n	800f780 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	e853 3f00 	ldrex	r3, [r3]
 800f7c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d6:	69b9      	ldr	r1, [r7, #24]
 800f7d8:	69fa      	ldr	r2, [r7, #28]
 800f7da:	e841 2300 	strex	r3, r2, [r1]
 800f7de:	617b      	str	r3, [r7, #20]
   return(result);
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e6      	bne.n	800f7b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f7e6:	e002      	b.n	800f7ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f7e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f7ea:	f7f1 fc77 	bl	80010dc <HAL_UART_TxCpltCallback>
}
 800f7ee:	bf00      	nop
 800f7f0:	3740      	adds	r7, #64	@ 0x40
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f802:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f7fe ff27 	bl	800e658 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f80a:	bf00      	nop
 800f80c:	3710      	adds	r7, #16
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b09c      	sub	sp, #112	@ 0x70
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	69db      	ldr	r3, [r3, #28]
 800f824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f828:	d071      	beq.n	800f90e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f82c:	2200      	movs	r2, #0
 800f82e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f83a:	e853 3f00 	ldrex	r3, [r3]
 800f83e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f846:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f850:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f852:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f858:	e841 2300 	strex	r3, r2, [r1]
 800f85c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f85e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e6      	bne.n	800f832 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	3308      	adds	r3, #8
 800f86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86e:	e853 3f00 	ldrex	r3, [r3]
 800f872:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f876:	f023 0301 	bic.w	r3, r3, #1
 800f87a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f87c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	3308      	adds	r3, #8
 800f882:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f884:	647a      	str	r2, [r7, #68]	@ 0x44
 800f886:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f88a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f88c:	e841 2300 	strex	r3, r2, [r1]
 800f890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1e5      	bne.n	800f864 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	3308      	adds	r3, #8
 800f89e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a2:	e853 3f00 	ldrex	r3, [r3]
 800f8a6:	623b      	str	r3, [r7, #32]
   return(result);
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800f8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	3308      	adds	r3, #8
 800f8b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f8b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8c0:	e841 2300 	strex	r3, r2, [r1]
 800f8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1e5      	bne.n	800f898 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f8cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8ce:	2220      	movs	r2, #32
 800f8d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d118      	bne.n	800f90e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	e853 3f00 	ldrex	r3, [r3]
 800f8e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f023 0310 	bic.w	r3, r3, #16
 800f8f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8fa:	61fb      	str	r3, [r7, #28]
 800f8fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fe:	69b9      	ldr	r1, [r7, #24]
 800f900:	69fa      	ldr	r2, [r7, #28]
 800f902:	e841 2300 	strex	r3, r2, [r1]
 800f906:	617b      	str	r3, [r7, #20]
   return(result);
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1e6      	bne.n	800f8dc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f910:	2200      	movs	r2, #0
 800f912:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d107      	bne.n	800f92c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f91c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f91e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f922:	4619      	mov	r1, r3
 800f924:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f926:	f7f1 fb2b 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f92a:	e002      	b.n	800f932 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f92c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f92e:	f7f1 fb45 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 800f932:	bf00      	nop
 800f934:	3770      	adds	r7, #112	@ 0x70
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f93a:	b580      	push	{r7, lr}
 800f93c:	b084      	sub	sp, #16
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f946:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2201      	movs	r2, #1
 800f94c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f952:	2b01      	cmp	r3, #1
 800f954:	d109      	bne.n	800f96a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f95c:	085b      	lsrs	r3, r3, #1
 800f95e:	b29b      	uxth	r3, r3
 800f960:	4619      	mov	r1, r3
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f7f1 fb0c 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f968:	e002      	b.n	800f970 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f7fe fe7e 	bl	800e66c <HAL_UART_RxHalfCpltCallback>
}
 800f970:	bf00      	nop
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f984:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f98c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f994:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9a0:	2b80      	cmp	r3, #128	@ 0x80
 800f9a2:	d109      	bne.n	800f9b8 <UART_DMAError+0x40>
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	2b21      	cmp	r3, #33	@ 0x21
 800f9a8:	d106      	bne.n	800f9b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f9b2:	6978      	ldr	r0, [r7, #20]
 800f9b4:	f7ff fe2c 	bl	800f610 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9c2:	2b40      	cmp	r3, #64	@ 0x40
 800f9c4:	d109      	bne.n	800f9da <UART_DMAError+0x62>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b22      	cmp	r3, #34	@ 0x22
 800f9ca:	d106      	bne.n	800f9da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f9d4:	6978      	ldr	r0, [r7, #20]
 800f9d6:	f7ff fe5d 	bl	800f694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e0:	f043 0210 	orr.w	r2, r3, #16
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9ea:	6978      	ldr	r0, [r7, #20]
 800f9ec:	f7f1 fb00 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9f0:	bf00      	nop
 800f9f2:	3718      	adds	r7, #24
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7f1 faee 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa14:	bf00      	nop
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b088      	sub	sp, #32
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	e853 3f00 	ldrex	r3, [r3]
 800fa30:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa38:	61fb      	str	r3, [r7, #28]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	61bb      	str	r3, [r7, #24]
 800fa44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa46:	6979      	ldr	r1, [r7, #20]
 800fa48:	69ba      	ldr	r2, [r7, #24]
 800fa4a:	e841 2300 	strex	r3, r2, [r1]
 800fa4e:	613b      	str	r3, [r7, #16]
   return(result);
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d1e6      	bne.n	800fa24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2220      	movs	r2, #32
 800fa5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f7f1 fb39 	bl	80010dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa6a:	bf00      	nop
 800fa6c:	3720      	adds	r7, #32
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa72:	b480      	push	{r7}
 800fa74:	b083      	sub	sp, #12
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa7a:	bf00      	nop
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr

0800fa86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa86:	b480      	push	{r7}
 800fa88:	b083      	sub	sp, #12
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa8e:	bf00      	nop
 800fa90:	370c      	adds	r7, #12
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b083      	sub	sp, #12
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800faa2:	bf00      	nop
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b084      	sub	sp, #16
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d101      	bne.n	800fac4 <HAL_UARTEx_EnableFifoMode+0x16>
 800fac0:	2302      	movs	r3, #2
 800fac2:	e02b      	b.n	800fb1c <HAL_UARTEx_EnableFifoMode+0x6e>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2201      	movs	r2, #1
 800fac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2224      	movs	r2, #36	@ 0x24
 800fad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f022 0201 	bic.w	r2, r2, #1
 800faea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800faf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800fafa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f8dd 	bl	800fcc4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2220      	movs	r2, #32
 800fb0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d101      	bne.n	800fb3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb38:	2302      	movs	r3, #2
 800fb3a:	e02d      	b.n	800fb98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2224      	movs	r2, #36	@ 0x24
 800fb48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f022 0201 	bic.w	r2, r2, #1
 800fb62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	430a      	orrs	r2, r1
 800fb76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 f8a3 	bl	800fcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2220      	movs	r2, #32
 800fb8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d101      	bne.n	800fbb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	e02d      	b.n	800fc14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2224      	movs	r2, #36	@ 0x24
 800fbc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f022 0201 	bic.w	r2, r2, #1
 800fbde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	683a      	ldr	r2, [r7, #0]
 800fbf0:	430a      	orrs	r2, r1
 800fbf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f865 	bl	800fcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2220      	movs	r2, #32
 800fc06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08c      	sub	sp, #48	@ 0x30
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	4613      	mov	r3, r2
 800fc28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc30:	2b20      	cmp	r3, #32
 800fc32:	d142      	bne.n	800fcba <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800fc3a:	88fb      	ldrh	r3, [r7, #6]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d101      	bne.n	800fc44 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800fc40:	2301      	movs	r3, #1
 800fc42:	e03b      	b.n	800fcbc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2201      	movs	r2, #1
 800fc48:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fc50:	88fb      	ldrh	r3, [r7, #6]
 800fc52:	461a      	mov	r2, r3
 800fc54:	68b9      	ldr	r1, [r7, #8]
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f7ff fc34 	bl	800f4c4 <UART_Start_Receive_DMA>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fc62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d124      	bne.n	800fcb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d11d      	bne.n	800fcae <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2210      	movs	r2, #16
 800fc78:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	e853 3f00 	ldrex	r3, [r3]
 800fc86:	617b      	str	r3, [r7, #20]
   return(result);
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	f043 0310 	orr.w	r3, r3, #16
 800fc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc98:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc9a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9c:	6a39      	ldr	r1, [r7, #32]
 800fc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fca0:	e841 2300 	strex	r3, r2, [r1]
 800fca4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1e6      	bne.n	800fc7a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800fcac:	e002      	b.n	800fcb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800fcb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcb8:	e000      	b.n	800fcbc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800fcba:	2302      	movs	r3, #2
  }
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3730      	adds	r7, #48	@ 0x30
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d108      	bne.n	800fce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fce4:	e031      	b.n	800fd4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fce6:	2310      	movs	r3, #16
 800fce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcea:	2310      	movs	r3, #16
 800fcec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	0e5b      	lsrs	r3, r3, #25
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	f003 0307 	and.w	r3, r3, #7
 800fcfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	0f5b      	lsrs	r3, r3, #29
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	f003 0307 	and.w	r3, r3, #7
 800fd0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd0e:	7bbb      	ldrb	r3, [r7, #14]
 800fd10:	7b3a      	ldrb	r2, [r7, #12]
 800fd12:	4911      	ldr	r1, [pc, #68]	@ (800fd58 <UARTEx_SetNbDataToProcess+0x94>)
 800fd14:	5c8a      	ldrb	r2, [r1, r2]
 800fd16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd1a:	7b3a      	ldrb	r2, [r7, #12]
 800fd1c:	490f      	ldr	r1, [pc, #60]	@ (800fd5c <UARTEx_SetNbDataToProcess+0x98>)
 800fd1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd20:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd2c:	7bfb      	ldrb	r3, [r7, #15]
 800fd2e:	7b7a      	ldrb	r2, [r7, #13]
 800fd30:	4909      	ldr	r1, [pc, #36]	@ (800fd58 <UARTEx_SetNbDataToProcess+0x94>)
 800fd32:	5c8a      	ldrb	r2, [r1, r2]
 800fd34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd38:	7b7a      	ldrb	r2, [r7, #13]
 800fd3a:	4908      	ldr	r1, [pc, #32]	@ (800fd5c <UARTEx_SetNbDataToProcess+0x98>)
 800fd3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fd4a:	bf00      	nop
 800fd4c:	3714      	adds	r7, #20
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	08017368 	.word	0x08017368
 800fd5c:	08017370 	.word	0x08017370

0800fd60 <__NVIC_SetPriority>:
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	4603      	mov	r3, r0
 800fd68:	6039      	str	r1, [r7, #0]
 800fd6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fd6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	db0a      	blt.n	800fd8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	490c      	ldr	r1, [pc, #48]	@ (800fdac <__NVIC_SetPriority+0x4c>)
 800fd7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fd7e:	0112      	lsls	r2, r2, #4
 800fd80:	b2d2      	uxtb	r2, r2
 800fd82:	440b      	add	r3, r1
 800fd84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fd88:	e00a      	b.n	800fda0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	4908      	ldr	r1, [pc, #32]	@ (800fdb0 <__NVIC_SetPriority+0x50>)
 800fd90:	88fb      	ldrh	r3, [r7, #6]
 800fd92:	f003 030f 	and.w	r3, r3, #15
 800fd96:	3b04      	subs	r3, #4
 800fd98:	0112      	lsls	r2, r2, #4
 800fd9a:	b2d2      	uxtb	r2, r2
 800fd9c:	440b      	add	r3, r1
 800fd9e:	761a      	strb	r2, [r3, #24]
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	e000e100 	.word	0xe000e100
 800fdb0:	e000ed00 	.word	0xe000ed00

0800fdb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fdb8:	4b05      	ldr	r3, [pc, #20]	@ (800fdd0 <SysTick_Handler+0x1c>)
 800fdba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fdbc:	f001 fdb0 	bl	8011920 <xTaskGetSchedulerState>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d001      	beq.n	800fdca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fdc6:	f002 fba7 	bl	8012518 <xPortSysTickHandler>
  }
}
 800fdca:	bf00      	nop
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	e000e010 	.word	0xe000e010

0800fdd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fdd8:	2100      	movs	r1, #0
 800fdda:	f06f 0004 	mvn.w	r0, #4
 800fdde:	f7ff ffbf 	bl	800fd60 <__NVIC_SetPriority>
#endif
}
 800fde2:	bf00      	nop
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdee:	f3ef 8305 	mrs	r3, IPSR
 800fdf2:	603b      	str	r3, [r7, #0]
  return(result);
 800fdf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d003      	beq.n	800fe02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fdfa:	f06f 0305 	mvn.w	r3, #5
 800fdfe:	607b      	str	r3, [r7, #4]
 800fe00:	e00c      	b.n	800fe1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fe02:	4b0a      	ldr	r3, [pc, #40]	@ (800fe2c <osKernelInitialize+0x44>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d105      	bne.n	800fe16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fe0a:	4b08      	ldr	r3, [pc, #32]	@ (800fe2c <osKernelInitialize+0x44>)
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	607b      	str	r3, [r7, #4]
 800fe14:	e002      	b.n	800fe1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fe16:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fe1c:	687b      	ldr	r3, [r7, #4]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	240029d8 	.word	0x240029d8

0800fe30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe36:	f3ef 8305 	mrs	r3, IPSR
 800fe3a:	603b      	str	r3, [r7, #0]
  return(result);
 800fe3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800fe42:	f06f 0305 	mvn.w	r3, #5
 800fe46:	607b      	str	r3, [r7, #4]
 800fe48:	e010      	b.n	800fe6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fe4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fe78 <osKernelStart+0x48>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d109      	bne.n	800fe66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fe52:	f7ff ffbf 	bl	800fdd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fe56:	4b08      	ldr	r3, [pc, #32]	@ (800fe78 <osKernelStart+0x48>)
 800fe58:	2202      	movs	r2, #2
 800fe5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fe5c:	f001 f8fc 	bl	8011058 <vTaskStartScheduler>
      stat = osOK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	607b      	str	r3, [r7, #4]
 800fe64:	e002      	b.n	800fe6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fe66:	f04f 33ff 	mov.w	r3, #4294967295
 800fe6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fe6c:	687b      	ldr	r3, [r7, #4]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	240029d8 	.word	0x240029d8

0800fe7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08e      	sub	sp, #56	@ 0x38
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe8c:	f3ef 8305 	mrs	r3, IPSR
 800fe90:	617b      	str	r3, [r7, #20]
  return(result);
 800fe92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d17e      	bne.n	800ff96 <osThreadNew+0x11a>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d07b      	beq.n	800ff96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fe9e:	2380      	movs	r3, #128	@ 0x80
 800fea0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fea2:	2318      	movs	r3, #24
 800fea4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800feaa:	f04f 33ff 	mov.w	r3, #4294967295
 800feae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d045      	beq.n	800ff42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <osThreadNew+0x48>
        name = attr->name;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	699b      	ldr	r3, [r3, #24]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d008      	beq.n	800feea <osThreadNew+0x6e>
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	2b38      	cmp	r3, #56	@ 0x38
 800fedc:	d805      	bhi.n	800feea <osThreadNew+0x6e>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	f003 0301 	and.w	r3, r3, #1
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d001      	beq.n	800feee <osThreadNew+0x72>
        return (NULL);
 800feea:	2300      	movs	r3, #0
 800feec:	e054      	b.n	800ff98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	695b      	ldr	r3, [r3, #20]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d003      	beq.n	800fefe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	695b      	ldr	r3, [r3, #20]
 800fefa:	089b      	lsrs	r3, r3, #2
 800fefc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00e      	beq.n	800ff24 <osThreadNew+0xa8>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ff0c:	d90a      	bls.n	800ff24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d006      	beq.n	800ff24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	695b      	ldr	r3, [r3, #20]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <osThreadNew+0xa8>
        mem = 1;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	61bb      	str	r3, [r7, #24]
 800ff22:	e010      	b.n	800ff46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d10c      	bne.n	800ff46 <osThreadNew+0xca>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d108      	bne.n	800ff46 <osThreadNew+0xca>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d104      	bne.n	800ff46 <osThreadNew+0xca>
          mem = 0;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	61bb      	str	r3, [r7, #24]
 800ff40:	e001      	b.n	800ff46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d110      	bne.n	800ff6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff54:	9202      	str	r2, [sp, #8]
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	6a3a      	ldr	r2, [r7, #32]
 800ff60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 fe3a 	bl	8010bdc <xTaskCreateStatic>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	613b      	str	r3, [r7, #16]
 800ff6c:	e013      	b.n	800ff96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d110      	bne.n	800ff96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	f107 0310 	add.w	r3, r7, #16
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 fe88 	bl	8010c9c <xTaskCreate>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d001      	beq.n	800ff96 <osThreadNew+0x11a>
            hTask = NULL;
 800ff92:	2300      	movs	r3, #0
 800ff94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ff96:	693b      	ldr	r3, [r7, #16]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3728      	adds	r7, #40	@ 0x28
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4a07      	ldr	r2, [pc, #28]	@ (800ffcc <vApplicationGetIdleTaskMemory+0x2c>)
 800ffb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	4a06      	ldr	r2, [pc, #24]	@ (800ffd0 <vApplicationGetIdleTaskMemory+0x30>)
 800ffb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2280      	movs	r2, #128	@ 0x80
 800ffbc:	601a      	str	r2, [r3, #0]
}
 800ffbe:	bf00      	nop
 800ffc0:	3714      	adds	r7, #20
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	240029dc 	.word	0x240029dc
 800ffd0:	24002a84 	.word	0x24002a84

0800ffd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ffd4:	b480      	push	{r7}
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	4a07      	ldr	r2, [pc, #28]	@ (8010000 <vApplicationGetTimerTaskMemory+0x2c>)
 800ffe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	4a06      	ldr	r2, [pc, #24]	@ (8010004 <vApplicationGetTimerTaskMemory+0x30>)
 800ffea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fff2:	601a      	str	r2, [r3, #0]
}
 800fff4:	bf00      	nop
 800fff6:	3714      	adds	r7, #20
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr
 8010000:	24002c84 	.word	0x24002c84
 8010004:	24002d2c 	.word	0x24002d2c

08010008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f103 0208 	add.w	r2, r3, #8
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f04f 32ff 	mov.w	r2, #4294967295
 8010020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f103 0208 	add.w	r2, r3, #8
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f103 0208 	add.w	r2, r3, #8
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801003c:	bf00      	nop
 801003e:	370c      	adds	r7, #12
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010056:	bf00      	nop
 8010058:	370c      	adds	r7, #12
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr

08010062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010062:	b480      	push	{r7}
 8010064:	b085      	sub	sp, #20
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	689a      	ldr	r2, [r3, #8]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	1c5a      	adds	r2, r3, #1
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	601a      	str	r2, [r3, #0]
}
 801009e:	bf00      	nop
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100aa:	b480      	push	{r7}
 80100ac:	b085      	sub	sp, #20
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c0:	d103      	bne.n	80100ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	e00c      	b.n	80100e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	3308      	adds	r3, #8
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e002      	b.n	80100d8 <vListInsert+0x2e>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d2f6      	bcs.n	80100d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	685a      	ldr	r2, [r3, #4]
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	683a      	ldr	r2, [r7, #0]
 80100f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	683a      	ldr	r2, [r7, #0]
 80100fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	601a      	str	r2, [r3, #0]
}
 8010110:	bf00      	nop
 8010112:	3714      	adds	r7, #20
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	6892      	ldr	r2, [r2, #8]
 8010132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	6852      	ldr	r2, [r2, #4]
 801013c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	429a      	cmp	r2, r3
 8010146:	d103      	bne.n	8010150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	689a      	ldr	r2, [r3, #8]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	1e5a      	subs	r2, r3, #1
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3714      	adds	r7, #20
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10b      	bne.n	801019c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010196:	bf00      	nop
 8010198:	bf00      	nop
 801019a:	e7fd      	b.n	8010198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801019c:	f002 f92c 	bl	80123f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681a      	ldr	r2, [r3, #0]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101a8:	68f9      	ldr	r1, [r7, #12]
 80101aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80101ac:	fb01 f303 	mul.w	r3, r1, r3
 80101b0:	441a      	add	r2, r3
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2200      	movs	r2, #0
 80101ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101cc:	3b01      	subs	r3, #1
 80101ce:	68f9      	ldr	r1, [r7, #12]
 80101d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80101d2:	fb01 f303 	mul.w	r3, r1, r3
 80101d6:	441a      	add	r2, r3
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	22ff      	movs	r2, #255	@ 0xff
 80101e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	22ff      	movs	r2, #255	@ 0xff
 80101e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d114      	bne.n	801021c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	691b      	ldr	r3, [r3, #16]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d01a      	beq.n	8010230 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3310      	adds	r3, #16
 80101fe:	4618      	mov	r0, r3
 8010200:	f001 f9c8 	bl	8011594 <xTaskRemoveFromEventList>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d012      	beq.n	8010230 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801020a:	4b0d      	ldr	r3, [pc, #52]	@ (8010240 <xQueueGenericReset+0xd0>)
 801020c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	f3bf 8f4f 	dsb	sy
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	e009      	b.n	8010230 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	3310      	adds	r3, #16
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff fef1 	bl	8010008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	3324      	adds	r3, #36	@ 0x24
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff feec 	bl	8010008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010230:	f002 f914 	bl	801245c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010234:	2301      	movs	r3, #1
}
 8010236:	4618      	mov	r0, r3
 8010238:	3710      	adds	r7, #16
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	e000ed04 	.word	0xe000ed04

08010244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08e      	sub	sp, #56	@ 0x38
 8010248:	af02      	add	r7, sp, #8
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d10b      	bne.n	8010270 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025c:	f383 8811 	msr	BASEPRI, r3
 8010260:	f3bf 8f6f 	isb	sy
 8010264:	f3bf 8f4f 	dsb	sy
 8010268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801026a:	bf00      	nop
 801026c:	bf00      	nop
 801026e:	e7fd      	b.n	801026c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10b      	bne.n	801028e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010288:	bf00      	nop
 801028a:	bf00      	nop
 801028c:	e7fd      	b.n	801028a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <xQueueGenericCreateStatic+0x56>
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <xQueueGenericCreateStatic+0x5a>
 801029a:	2301      	movs	r3, #1
 801029c:	e000      	b.n	80102a0 <xQueueGenericCreateStatic+0x5c>
 801029e:	2300      	movs	r3, #0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10b      	bne.n	80102bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80102a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	623b      	str	r3, [r7, #32]
}
 80102b6:	bf00      	nop
 80102b8:	bf00      	nop
 80102ba:	e7fd      	b.n	80102b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d102      	bne.n	80102c8 <xQueueGenericCreateStatic+0x84>
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d101      	bne.n	80102cc <xQueueGenericCreateStatic+0x88>
 80102c8:	2301      	movs	r3, #1
 80102ca:	e000      	b.n	80102ce <xQueueGenericCreateStatic+0x8a>
 80102cc:	2300      	movs	r3, #0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10b      	bne.n	80102ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	61fb      	str	r3, [r7, #28]
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop
 80102e8:	e7fd      	b.n	80102e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80102ea:	2350      	movs	r3, #80	@ 0x50
 80102ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	2b50      	cmp	r3, #80	@ 0x50
 80102f2:	d00b      	beq.n	801030c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80102f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	61bb      	str	r3, [r7, #24]
}
 8010306:	bf00      	nop
 8010308:	bf00      	nop
 801030a:	e7fd      	b.n	8010308 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801030c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00d      	beq.n	8010334 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031a:	2201      	movs	r2, #1
 801031c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010320:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	4613      	mov	r3, r2
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	68b9      	ldr	r1, [r7, #8]
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f000 f840 	bl	80103b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010336:	4618      	mov	r0, r3
 8010338:	3730      	adds	r7, #48	@ 0x30
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801033e:	b580      	push	{r7, lr}
 8010340:	b08a      	sub	sp, #40	@ 0x28
 8010342:	af02      	add	r7, sp, #8
 8010344:	60f8      	str	r0, [r7, #12]
 8010346:	60b9      	str	r1, [r7, #8]
 8010348:	4613      	mov	r3, r2
 801034a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10b      	bne.n	801036a <xQueueGenericCreate+0x2c>
	__asm volatile
 8010352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010356:	f383 8811 	msr	BASEPRI, r3
 801035a:	f3bf 8f6f 	isb	sy
 801035e:	f3bf 8f4f 	dsb	sy
 8010362:	613b      	str	r3, [r7, #16]
}
 8010364:	bf00      	nop
 8010366:	bf00      	nop
 8010368:	e7fd      	b.n	8010366 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	fb02 f303 	mul.w	r3, r2, r3
 8010372:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	3350      	adds	r3, #80	@ 0x50
 8010378:	4618      	mov	r0, r3
 801037a:	f002 f95f 	bl	801263c <pvPortMalloc>
 801037e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d011      	beq.n	80103aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010386:	69bb      	ldr	r3, [r7, #24]
 8010388:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	3350      	adds	r3, #80	@ 0x50
 801038e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	2200      	movs	r2, #0
 8010394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010398:	79fa      	ldrb	r2, [r7, #7]
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	4613      	mov	r3, r2
 80103a0:	697a      	ldr	r2, [r7, #20]
 80103a2:	68b9      	ldr	r1, [r7, #8]
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f000 f805 	bl	80103b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103aa:	69bb      	ldr	r3, [r7, #24]
	}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3720      	adds	r7, #32
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d103      	bne.n	80103d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	69ba      	ldr	r2, [r7, #24]
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	e002      	b.n	80103d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	68ba      	ldr	r2, [r7, #8]
 80103e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80103e2:	2101      	movs	r1, #1
 80103e4:	69b8      	ldr	r0, [r7, #24]
 80103e6:	f7ff fec3 	bl	8010170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	78fa      	ldrb	r2, [r7, #3]
 80103ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80103f2:	bf00      	nop
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08e      	sub	sp, #56	@ 0x38
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801040a:	2300      	movs	r3, #0
 801040c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010414:	2b00      	cmp	r3, #0
 8010416:	d10b      	bne.n	8010430 <xQueueGenericSend+0x34>
	__asm volatile
 8010418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801041c:	f383 8811 	msr	BASEPRI, r3
 8010420:	f3bf 8f6f 	isb	sy
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801042a:	bf00      	nop
 801042c:	bf00      	nop
 801042e:	e7fd      	b.n	801042c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d103      	bne.n	801043e <xQueueGenericSend+0x42>
 8010436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <xQueueGenericSend+0x46>
 801043e:	2301      	movs	r3, #1
 8010440:	e000      	b.n	8010444 <xQueueGenericSend+0x48>
 8010442:	2300      	movs	r3, #0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10b      	bne.n	8010460 <xQueueGenericSend+0x64>
	__asm volatile
 8010448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801044c:	f383 8811 	msr	BASEPRI, r3
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	f3bf 8f4f 	dsb	sy
 8010458:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801045a:	bf00      	nop
 801045c:	bf00      	nop
 801045e:	e7fd      	b.n	801045c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	2b02      	cmp	r3, #2
 8010464:	d103      	bne.n	801046e <xQueueGenericSend+0x72>
 8010466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801046a:	2b01      	cmp	r3, #1
 801046c:	d101      	bne.n	8010472 <xQueueGenericSend+0x76>
 801046e:	2301      	movs	r3, #1
 8010470:	e000      	b.n	8010474 <xQueueGenericSend+0x78>
 8010472:	2300      	movs	r3, #0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10b      	bne.n	8010490 <xQueueGenericSend+0x94>
	__asm volatile
 8010478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	623b      	str	r3, [r7, #32]
}
 801048a:	bf00      	nop
 801048c:	bf00      	nop
 801048e:	e7fd      	b.n	801048c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010490:	f001 fa46 	bl	8011920 <xTaskGetSchedulerState>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d102      	bne.n	80104a0 <xQueueGenericSend+0xa4>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <xQueueGenericSend+0xa8>
 80104a0:	2301      	movs	r3, #1
 80104a2:	e000      	b.n	80104a6 <xQueueGenericSend+0xaa>
 80104a4:	2300      	movs	r3, #0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10b      	bne.n	80104c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80104aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ae:	f383 8811 	msr	BASEPRI, r3
 80104b2:	f3bf 8f6f 	isb	sy
 80104b6:	f3bf 8f4f 	dsb	sy
 80104ba:	61fb      	str	r3, [r7, #28]
}
 80104bc:	bf00      	nop
 80104be:	bf00      	nop
 80104c0:	e7fd      	b.n	80104be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104c2:	f001 ff99 	bl	80123f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80104c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d302      	bcc.n	80104d8 <xQueueGenericSend+0xdc>
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d129      	bne.n	801052c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	68b9      	ldr	r1, [r7, #8]
 80104dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80104de:	f000 fa0f 	bl	8010900 <prvCopyDataToQueue>
 80104e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d010      	beq.n	801050e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ee:	3324      	adds	r3, #36	@ 0x24
 80104f0:	4618      	mov	r0, r3
 80104f2:	f001 f84f 	bl	8011594 <xTaskRemoveFromEventList>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d013      	beq.n	8010524 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80104fc:	4b3f      	ldr	r3, [pc, #252]	@ (80105fc <xQueueGenericSend+0x200>)
 80104fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010502:	601a      	str	r2, [r3, #0]
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	e00a      	b.n	8010524 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801050e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010510:	2b00      	cmp	r3, #0
 8010512:	d007      	beq.n	8010524 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010514:	4b39      	ldr	r3, [pc, #228]	@ (80105fc <xQueueGenericSend+0x200>)
 8010516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801051a:	601a      	str	r2, [r3, #0]
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010524:	f001 ff9a 	bl	801245c <vPortExitCritical>
				return pdPASS;
 8010528:	2301      	movs	r3, #1
 801052a:	e063      	b.n	80105f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d103      	bne.n	801053a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010532:	f001 ff93 	bl	801245c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010536:	2300      	movs	r3, #0
 8010538:	e05c      	b.n	80105f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801053a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801053c:	2b00      	cmp	r3, #0
 801053e:	d106      	bne.n	801054e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010540:	f107 0314 	add.w	r3, r7, #20
 8010544:	4618      	mov	r0, r3
 8010546:	f001 f889 	bl	801165c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801054a:	2301      	movs	r3, #1
 801054c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801054e:	f001 ff85 	bl	801245c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010552:	f000 fdf1 	bl	8011138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010556:	f001 ff4f 	bl	80123f8 <vPortEnterCritical>
 801055a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801055c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010560:	b25b      	sxtb	r3, r3
 8010562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010566:	d103      	bne.n	8010570 <xQueueGenericSend+0x174>
 8010568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056a:	2200      	movs	r2, #0
 801056c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010576:	b25b      	sxtb	r3, r3
 8010578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057c:	d103      	bne.n	8010586 <xQueueGenericSend+0x18a>
 801057e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010580:	2200      	movs	r2, #0
 8010582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010586:	f001 ff69 	bl	801245c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801058a:	1d3a      	adds	r2, r7, #4
 801058c:	f107 0314 	add.w	r3, r7, #20
 8010590:	4611      	mov	r1, r2
 8010592:	4618      	mov	r0, r3
 8010594:	f001 f878 	bl	8011688 <xTaskCheckForTimeOut>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d124      	bne.n	80105e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801059e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105a0:	f000 faa6 	bl	8010af0 <prvIsQueueFull>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d018      	beq.n	80105dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80105aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ac:	3310      	adds	r3, #16
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	4611      	mov	r1, r2
 80105b2:	4618      	mov	r0, r3
 80105b4:	f000 ff9c 	bl	80114f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80105b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105ba:	f000 fa31 	bl	8010a20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80105be:	f000 fdc9 	bl	8011154 <xTaskResumeAll>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f47f af7c 	bne.w	80104c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80105ca:	4b0c      	ldr	r3, [pc, #48]	@ (80105fc <xQueueGenericSend+0x200>)
 80105cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105d0:	601a      	str	r2, [r3, #0]
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	e772      	b.n	80104c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80105dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105de:	f000 fa1f 	bl	8010a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105e2:	f000 fdb7 	bl	8011154 <xTaskResumeAll>
 80105e6:	e76c      	b.n	80104c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80105e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105ea:	f000 fa19 	bl	8010a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105ee:	f000 fdb1 	bl	8011154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80105f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3738      	adds	r7, #56	@ 0x38
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	e000ed04 	.word	0xe000ed04

08010600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b090      	sub	sp, #64	@ 0x40
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10b      	bne.n	8010630 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801061c:	f383 8811 	msr	BASEPRI, r3
 8010620:	f3bf 8f6f 	isb	sy
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801062a:	bf00      	nop
 801062c:	bf00      	nop
 801062e:	e7fd      	b.n	801062c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d103      	bne.n	801063e <xQueueGenericSendFromISR+0x3e>
 8010636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <xQueueGenericSendFromISR+0x42>
 801063e:	2301      	movs	r3, #1
 8010640:	e000      	b.n	8010644 <xQueueGenericSendFromISR+0x44>
 8010642:	2300      	movs	r3, #0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d10b      	bne.n	8010660 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064c:	f383 8811 	msr	BASEPRI, r3
 8010650:	f3bf 8f6f 	isb	sy
 8010654:	f3bf 8f4f 	dsb	sy
 8010658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801065a:	bf00      	nop
 801065c:	bf00      	nop
 801065e:	e7fd      	b.n	801065c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b02      	cmp	r3, #2
 8010664:	d103      	bne.n	801066e <xQueueGenericSendFromISR+0x6e>
 8010666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801066a:	2b01      	cmp	r3, #1
 801066c:	d101      	bne.n	8010672 <xQueueGenericSendFromISR+0x72>
 801066e:	2301      	movs	r3, #1
 8010670:	e000      	b.n	8010674 <xQueueGenericSendFromISR+0x74>
 8010672:	2300      	movs	r3, #0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10b      	bne.n	8010690 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	623b      	str	r3, [r7, #32]
}
 801068a:	bf00      	nop
 801068c:	bf00      	nop
 801068e:	e7fd      	b.n	801068c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010690:	f001 ff92 	bl	80125b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010694:	f3ef 8211 	mrs	r2, BASEPRI
 8010698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069c:	f383 8811 	msr	BASEPRI, r3
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	61fa      	str	r2, [r7, #28]
 80106aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80106ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d302      	bcc.n	80106c2 <xQueueGenericSendFromISR+0xc2>
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d12f      	bne.n	8010722 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	68b9      	ldr	r1, [r7, #8]
 80106d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80106d8:	f000 f912 	bl	8010900 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80106e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e4:	d112      	bne.n	801070c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d016      	beq.n	801071c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f0:	3324      	adds	r3, #36	@ 0x24
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 ff4e 	bl	8011594 <xTaskRemoveFromEventList>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00e      	beq.n	801071c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00b      	beq.n	801071c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	e007      	b.n	801071c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801070c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010710:	3301      	adds	r3, #1
 8010712:	b2db      	uxtb	r3, r3
 8010714:	b25a      	sxtb	r2, r3
 8010716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801071c:	2301      	movs	r3, #1
 801071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010720:	e001      	b.n	8010726 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010722:	2300      	movs	r3, #0
 8010724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010728:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010730:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010734:	4618      	mov	r0, r3
 8010736:	3740      	adds	r7, #64	@ 0x40
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08c      	sub	sp, #48	@ 0x30
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010748:	2300      	movs	r3, #0
 801074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10b      	bne.n	801076e <xQueueReceive+0x32>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	623b      	str	r3, [r7, #32]
}
 8010768:	bf00      	nop
 801076a:	bf00      	nop
 801076c:	e7fd      	b.n	801076a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d103      	bne.n	801077c <xQueueReceive+0x40>
 8010774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010778:	2b00      	cmp	r3, #0
 801077a:	d101      	bne.n	8010780 <xQueueReceive+0x44>
 801077c:	2301      	movs	r3, #1
 801077e:	e000      	b.n	8010782 <xQueueReceive+0x46>
 8010780:	2300      	movs	r3, #0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d10b      	bne.n	801079e <xQueueReceive+0x62>
	__asm volatile
 8010786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801078a:	f383 8811 	msr	BASEPRI, r3
 801078e:	f3bf 8f6f 	isb	sy
 8010792:	f3bf 8f4f 	dsb	sy
 8010796:	61fb      	str	r3, [r7, #28]
}
 8010798:	bf00      	nop
 801079a:	bf00      	nop
 801079c:	e7fd      	b.n	801079a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801079e:	f001 f8bf 	bl	8011920 <xTaskGetSchedulerState>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d102      	bne.n	80107ae <xQueueReceive+0x72>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <xQueueReceive+0x76>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e000      	b.n	80107b4 <xQueueReceive+0x78>
 80107b2:	2300      	movs	r3, #0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10b      	bne.n	80107d0 <xQueueReceive+0x94>
	__asm volatile
 80107b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	61bb      	str	r3, [r7, #24]
}
 80107ca:	bf00      	nop
 80107cc:	bf00      	nop
 80107ce:	e7fd      	b.n	80107cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107d0:	f001 fe12 	bl	80123f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01f      	beq.n	8010820 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107e0:	68b9      	ldr	r1, [r7, #8]
 80107e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107e4:	f000 f8f6 	bl	80109d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ea:	1e5a      	subs	r2, r3, #1
 80107ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00f      	beq.n	8010818 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fa:	3310      	adds	r3, #16
 80107fc:	4618      	mov	r0, r3
 80107fe:	f000 fec9 	bl	8011594 <xTaskRemoveFromEventList>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d007      	beq.n	8010818 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010808:	4b3c      	ldr	r3, [pc, #240]	@ (80108fc <xQueueReceive+0x1c0>)
 801080a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010818:	f001 fe20 	bl	801245c <vPortExitCritical>
				return pdPASS;
 801081c:	2301      	movs	r3, #1
 801081e:	e069      	b.n	80108f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d103      	bne.n	801082e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010826:	f001 fe19 	bl	801245c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801082a:	2300      	movs	r3, #0
 801082c:	e062      	b.n	80108f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801082e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d106      	bne.n	8010842 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010834:	f107 0310 	add.w	r3, r7, #16
 8010838:	4618      	mov	r0, r3
 801083a:	f000 ff0f 	bl	801165c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801083e:	2301      	movs	r3, #1
 8010840:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010842:	f001 fe0b 	bl	801245c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010846:	f000 fc77 	bl	8011138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801084a:	f001 fdd5 	bl	80123f8 <vPortEnterCritical>
 801084e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010854:	b25b      	sxtb	r3, r3
 8010856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085a:	d103      	bne.n	8010864 <xQueueReceive+0x128>
 801085c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085e:	2200      	movs	r2, #0
 8010860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010866:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801086a:	b25b      	sxtb	r3, r3
 801086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010870:	d103      	bne.n	801087a <xQueueReceive+0x13e>
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	2200      	movs	r2, #0
 8010876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801087a:	f001 fdef 	bl	801245c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801087e:	1d3a      	adds	r2, r7, #4
 8010880:	f107 0310 	add.w	r3, r7, #16
 8010884:	4611      	mov	r1, r2
 8010886:	4618      	mov	r0, r3
 8010888:	f000 fefe 	bl	8011688 <xTaskCheckForTimeOut>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d123      	bne.n	80108da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010894:	f000 f916 	bl	8010ac4 <prvIsQueueEmpty>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d017      	beq.n	80108ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801089e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108a0:	3324      	adds	r3, #36	@ 0x24
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fe22 	bl	80114f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108ae:	f000 f8b7 	bl	8010a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108b2:	f000 fc4f 	bl	8011154 <xTaskResumeAll>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d189      	bne.n	80107d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80108bc:	4b0f      	ldr	r3, [pc, #60]	@ (80108fc <xQueueReceive+0x1c0>)
 80108be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	f3bf 8f6f 	isb	sy
 80108cc:	e780      	b.n	80107d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80108ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108d0:	f000 f8a6 	bl	8010a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108d4:	f000 fc3e 	bl	8011154 <xTaskResumeAll>
 80108d8:	e77a      	b.n	80107d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108dc:	f000 f8a0 	bl	8010a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108e0:	f000 fc38 	bl	8011154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108e6:	f000 f8ed 	bl	8010ac4 <prvIsQueueEmpty>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f43f af6f 	beq.w	80107d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3730      	adds	r7, #48	@ 0x30
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	e000ed04 	.word	0xe000ed04

08010900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b086      	sub	sp, #24
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801090c:	2300      	movs	r3, #0
 801090e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801091a:	2b00      	cmp	r3, #0
 801091c:	d10d      	bne.n	801093a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d14d      	bne.n	80109c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	4618      	mov	r0, r3
 801092c:	f001 f816 	bl	801195c <xTaskPriorityDisinherit>
 8010930:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	609a      	str	r2, [r3, #8]
 8010938:	e043      	b.n	80109c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d119      	bne.n	8010974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6858      	ldr	r0, [r3, #4]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010948:	461a      	mov	r2, r3
 801094a:	68b9      	ldr	r1, [r7, #8]
 801094c:	f003 fecb 	bl	80146e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	685a      	ldr	r2, [r3, #4]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010958:	441a      	add	r2, r3
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	429a      	cmp	r2, r3
 8010968:	d32b      	bcc.n	80109c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	605a      	str	r2, [r3, #4]
 8010972:	e026      	b.n	80109c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68d8      	ldr	r0, [r3, #12]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801097c:	461a      	mov	r2, r3
 801097e:	68b9      	ldr	r1, [r7, #8]
 8010980:	f003 feb1 	bl	80146e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801098c:	425b      	negs	r3, r3
 801098e:	441a      	add	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	68da      	ldr	r2, [r3, #12]
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	429a      	cmp	r2, r3
 801099e:	d207      	bcs.n	80109b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	689a      	ldr	r2, [r3, #8]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109a8:	425b      	negs	r3, r3
 80109aa:	441a      	add	r2, r3
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b02      	cmp	r3, #2
 80109b4:	d105      	bne.n	80109c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	3b01      	subs	r3, #1
 80109c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80109ca:	697b      	ldr	r3, [r7, #20]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3718      	adds	r7, #24
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d018      	beq.n	8010a18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68da      	ldr	r2, [r3, #12]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109ee:	441a      	add	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68da      	ldr	r2, [r3, #12]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d303      	bcc.n	8010a08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	68d9      	ldr	r1, [r3, #12]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a10:	461a      	mov	r2, r3
 8010a12:	6838      	ldr	r0, [r7, #0]
 8010a14:	f003 fe67 	bl	80146e6 <memcpy>
	}
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a28:	f001 fce6 	bl	80123f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010a32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a34:	e011      	b.n	8010a5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d012      	beq.n	8010a64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	3324      	adds	r3, #36	@ 0x24
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 fda6 	bl	8011594 <xTaskRemoveFromEventList>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d001      	beq.n	8010a52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a4e:	f000 fe7f 	bl	8011750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a52:	7bfb      	ldrb	r3, [r7, #15]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	dce9      	bgt.n	8010a36 <prvUnlockQueue+0x16>
 8010a62:	e000      	b.n	8010a66 <prvUnlockQueue+0x46>
					break;
 8010a64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	22ff      	movs	r2, #255	@ 0xff
 8010a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010a6e:	f001 fcf5 	bl	801245c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a72:	f001 fcc1 	bl	80123f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010a7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a7e:	e011      	b.n	8010aa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d012      	beq.n	8010aae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	3310      	adds	r3, #16
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f000 fd81 	bl	8011594 <xTaskRemoveFromEventList>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a98:	f000 fe5a 	bl	8011750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a9c:	7bbb      	ldrb	r3, [r7, #14]
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	dce9      	bgt.n	8010a80 <prvUnlockQueue+0x60>
 8010aac:	e000      	b.n	8010ab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010aae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	22ff      	movs	r2, #255	@ 0xff
 8010ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010ab8:	f001 fcd0 	bl	801245c <vPortExitCritical>
}
 8010abc:	bf00      	nop
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010acc:	f001 fc94 	bl	80123f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d102      	bne.n	8010ade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	60fb      	str	r3, [r7, #12]
 8010adc:	e001      	b.n	8010ae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ae2:	f001 fcbb 	bl	801245c <vPortExitCritical>

	return xReturn;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3710      	adds	r7, #16
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010af8:	f001 fc7e 	bl	80123f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d102      	bne.n	8010b0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	60fb      	str	r3, [r7, #12]
 8010b0c:	e001      	b.n	8010b12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b12:	f001 fca3 	bl	801245c <vPortExitCritical>

	return xReturn;
 8010b16:	68fb      	ldr	r3, [r7, #12]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b20:	b480      	push	{r7}
 8010b22:	b085      	sub	sp, #20
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	60fb      	str	r3, [r7, #12]
 8010b2e:	e014      	b.n	8010b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b30:	4a0f      	ldr	r2, [pc, #60]	@ (8010b70 <vQueueAddToRegistry+0x50>)
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10b      	bne.n	8010b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b3c:	490c      	ldr	r1, [pc, #48]	@ (8010b70 <vQueueAddToRegistry+0x50>)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	683a      	ldr	r2, [r7, #0]
 8010b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b46:	4a0a      	ldr	r2, [pc, #40]	@ (8010b70 <vQueueAddToRegistry+0x50>)
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	4413      	add	r3, r2
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b52:	e006      	b.n	8010b62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	3301      	adds	r3, #1
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b07      	cmp	r3, #7
 8010b5e:	d9e7      	bls.n	8010b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b60:	bf00      	nop
 8010b62:	bf00      	nop
 8010b64:	3714      	adds	r7, #20
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	2400312c 	.word	0x2400312c

08010b74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010b84:	f001 fc38 	bl	80123f8 <vPortEnterCritical>
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b8e:	b25b      	sxtb	r3, r3
 8010b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b94:	d103      	bne.n	8010b9e <vQueueWaitForMessageRestricted+0x2a>
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ba4:	b25b      	sxtb	r3, r3
 8010ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010baa:	d103      	bne.n	8010bb4 <vQueueWaitForMessageRestricted+0x40>
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010bb4:	f001 fc52 	bl	801245c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d106      	bne.n	8010bce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	3324      	adds	r3, #36	@ 0x24
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	68b9      	ldr	r1, [r7, #8]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f000 fcb7 	bl	801153c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010bce:	6978      	ldr	r0, [r7, #20]
 8010bd0:	f7ff ff26 	bl	8010a20 <prvUnlockQueue>
	}
 8010bd4:	bf00      	nop
 8010bd6:	3718      	adds	r7, #24
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b08e      	sub	sp, #56	@ 0x38
 8010be0:	af04      	add	r7, sp, #16
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d10b      	bne.n	8010c08 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	623b      	str	r3, [r7, #32]
}
 8010c02:	bf00      	nop
 8010c04:	bf00      	nop
 8010c06:	e7fd      	b.n	8010c04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d10b      	bne.n	8010c26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	61fb      	str	r3, [r7, #28]
}
 8010c20:	bf00      	nop
 8010c22:	bf00      	nop
 8010c24:	e7fd      	b.n	8010c22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c26:	23a8      	movs	r3, #168	@ 0xa8
 8010c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2ba8      	cmp	r3, #168	@ 0xa8
 8010c2e:	d00b      	beq.n	8010c48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	61bb      	str	r3, [r7, #24]
}
 8010c42:	bf00      	nop
 8010c44:	bf00      	nop
 8010c46:	e7fd      	b.n	8010c44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d01e      	beq.n	8010c8e <xTaskCreateStatic+0xb2>
 8010c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d01b      	beq.n	8010c8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c62:	2202      	movs	r2, #2
 8010c64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c68:	2300      	movs	r3, #0
 8010c6a:	9303      	str	r3, [sp, #12]
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c6e:	9302      	str	r3, [sp, #8]
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	9301      	str	r3, [sp, #4]
 8010c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	68b9      	ldr	r1, [r7, #8]
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f000 f851 	bl	8010d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c88:	f000 f8f6 	bl	8010e78 <prvAddNewTaskToReadyList>
 8010c8c:	e001      	b.n	8010c92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010c92:	697b      	ldr	r3, [r7, #20]
	}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3728      	adds	r7, #40	@ 0x28
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b08c      	sub	sp, #48	@ 0x30
 8010ca0:	af04      	add	r7, sp, #16
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	603b      	str	r3, [r7, #0]
 8010ca8:	4613      	mov	r3, r2
 8010caa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010cac:	88fb      	ldrh	r3, [r7, #6]
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f001 fcc3 	bl	801263c <pvPortMalloc>
 8010cb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d00e      	beq.n	8010cdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010cbe:	20a8      	movs	r0, #168	@ 0xa8
 8010cc0:	f001 fcbc 	bl	801263c <pvPortMalloc>
 8010cc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010cc6:	69fb      	ldr	r3, [r7, #28]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d003      	beq.n	8010cd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8010cd2:	e005      	b.n	8010ce0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010cd4:	6978      	ldr	r0, [r7, #20]
 8010cd6:	f001 fd7f 	bl	80127d8 <vPortFree>
 8010cda:	e001      	b.n	8010ce0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d017      	beq.n	8010d16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010cee:	88fa      	ldrh	r2, [r7, #6]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9303      	str	r3, [sp, #12]
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	9302      	str	r3, [sp, #8]
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	68b9      	ldr	r1, [r7, #8]
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f000 f80f 	bl	8010d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d0a:	69f8      	ldr	r0, [r7, #28]
 8010d0c:	f000 f8b4 	bl	8010e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d10:	2301      	movs	r3, #1
 8010d12:	61bb      	str	r3, [r7, #24]
 8010d14:	e002      	b.n	8010d1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d16:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d1c:	69bb      	ldr	r3, [r7, #24]
	}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3720      	adds	r7, #32
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
	...

08010d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
 8010d34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	461a      	mov	r2, r3
 8010d40:	21a5      	movs	r1, #165	@ 0xa5
 8010d42:	f003 fbbe 	bl	80144c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d4a:	6879      	ldr	r1, [r7, #4]
 8010d4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010d50:	440b      	add	r3, r1
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	f023 0307 	bic.w	r3, r3, #7
 8010d5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	f003 0307 	and.w	r3, r3, #7
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00b      	beq.n	8010d82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	617b      	str	r3, [r7, #20]
}
 8010d7c:	bf00      	nop
 8010d7e:	bf00      	nop
 8010d80:	e7fd      	b.n	8010d7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d01f      	beq.n	8010dc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d88:	2300      	movs	r3, #0
 8010d8a:	61fb      	str	r3, [r7, #28]
 8010d8c:	e012      	b.n	8010db4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	4413      	add	r3, r2
 8010d94:	7819      	ldrb	r1, [r3, #0]
 8010d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d98:	69fb      	ldr	r3, [r7, #28]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	3334      	adds	r3, #52	@ 0x34
 8010d9e:	460a      	mov	r2, r1
 8010da0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	4413      	add	r3, r2
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d006      	beq.n	8010dbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	3301      	adds	r3, #1
 8010db2:	61fb      	str	r3, [r7, #28]
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	2b0f      	cmp	r3, #15
 8010db8:	d9e9      	bls.n	8010d8e <prvInitialiseNewTask+0x66>
 8010dba:	e000      	b.n	8010dbe <prvInitialiseNewTask+0x96>
			{
				break;
 8010dbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010dc6:	e003      	b.n	8010dd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd2:	2b37      	cmp	r3, #55	@ 0x37
 8010dd4:	d901      	bls.n	8010dda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010dd6:	2337      	movs	r3, #55	@ 0x37
 8010dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010de4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de8:	2200      	movs	r2, #0
 8010dea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dee:	3304      	adds	r3, #4
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff f929 	bl	8010048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df8:	3318      	adds	r3, #24
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7ff f924 	bl	8010048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e28:	3354      	adds	r3, #84	@ 0x54
 8010e2a:	224c      	movs	r2, #76	@ 0x4c
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f003 fb47 	bl	80144c2 <memset>
 8010e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e36:	4a0d      	ldr	r2, [pc, #52]	@ (8010e6c <prvInitialiseNewTask+0x144>)
 8010e38:	659a      	str	r2, [r3, #88]	@ 0x58
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8010e70 <prvInitialiseNewTask+0x148>)
 8010e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e42:	4a0c      	ldr	r2, [pc, #48]	@ (8010e74 <prvInitialiseNewTask+0x14c>)
 8010e44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	68f9      	ldr	r1, [r7, #12]
 8010e4a:	69b8      	ldr	r0, [r7, #24]
 8010e4c:	f001 f9a4 	bl	8012198 <pxPortInitialiseStack>
 8010e50:	4602      	mov	r2, r0
 8010e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e62:	bf00      	nop
 8010e64:	3720      	adds	r7, #32
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	240073c0 	.word	0x240073c0
 8010e70:	24007428 	.word	0x24007428
 8010e74:	24007490 	.word	0x24007490

08010e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010e80:	f001 faba 	bl	80123f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010e84:	4b2d      	ldr	r3, [pc, #180]	@ (8010f3c <prvAddNewTaskToReadyList+0xc4>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8010f3c <prvAddNewTaskToReadyList+0xc4>)
 8010e8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8010f40 <prvAddNewTaskToReadyList+0xc8>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d109      	bne.n	8010eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010e96:	4a2a      	ldr	r2, [pc, #168]	@ (8010f40 <prvAddNewTaskToReadyList+0xc8>)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010e9c:	4b27      	ldr	r3, [pc, #156]	@ (8010f3c <prvAddNewTaskToReadyList+0xc4>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b01      	cmp	r3, #1
 8010ea2:	d110      	bne.n	8010ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ea4:	f000 fc78 	bl	8011798 <prvInitialiseTaskLists>
 8010ea8:	e00d      	b.n	8010ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010eaa:	4b26      	ldr	r3, [pc, #152]	@ (8010f44 <prvAddNewTaskToReadyList+0xcc>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d109      	bne.n	8010ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010eb2:	4b23      	ldr	r3, [pc, #140]	@ (8010f40 <prvAddNewTaskToReadyList+0xc8>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d802      	bhi.n	8010ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8010f40 <prvAddNewTaskToReadyList+0xc8>)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ec6:	4b20      	ldr	r3, [pc, #128]	@ (8010f48 <prvAddNewTaskToReadyList+0xd0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8010f48 <prvAddNewTaskToReadyList+0xd0>)
 8010ece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8010f48 <prvAddNewTaskToReadyList+0xd0>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010edc:	4b1b      	ldr	r3, [pc, #108]	@ (8010f4c <prvAddNewTaskToReadyList+0xd4>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d903      	bls.n	8010eec <prvAddNewTaskToReadyList+0x74>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee8:	4a18      	ldr	r2, [pc, #96]	@ (8010f4c <prvAddNewTaskToReadyList+0xd4>)
 8010eea:	6013      	str	r3, [r2, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	4a15      	ldr	r2, [pc, #84]	@ (8010f50 <prvAddNewTaskToReadyList+0xd8>)
 8010efa:	441a      	add	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	3304      	adds	r3, #4
 8010f00:	4619      	mov	r1, r3
 8010f02:	4610      	mov	r0, r2
 8010f04:	f7ff f8ad 	bl	8010062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f08:	f001 faa8 	bl	801245c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <prvAddNewTaskToReadyList+0xcc>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00e      	beq.n	8010f32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f14:	4b0a      	ldr	r3, [pc, #40]	@ (8010f40 <prvAddNewTaskToReadyList+0xc8>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d207      	bcs.n	8010f32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f22:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <prvAddNewTaskToReadyList+0xdc>)
 8010f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	f3bf 8f4f 	dsb	sy
 8010f2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f32:	bf00      	nop
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	24003640 	.word	0x24003640
 8010f40:	2400316c 	.word	0x2400316c
 8010f44:	2400364c 	.word	0x2400364c
 8010f48:	2400365c 	.word	0x2400365c
 8010f4c:	24003648 	.word	0x24003648
 8010f50:	24003170 	.word	0x24003170
 8010f54:	e000ed04 	.word	0xe000ed04

08010f58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b08a      	sub	sp, #40	@ 0x28
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010f62:	2300      	movs	r3, #0
 8010f64:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d10b      	bne.n	8010f84 <vTaskDelayUntil+0x2c>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	617b      	str	r3, [r7, #20]
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	e7fd      	b.n	8010f80 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10b      	bne.n	8010fa2 <vTaskDelayUntil+0x4a>
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	613b      	str	r3, [r7, #16]
}
 8010f9c:	bf00      	nop
 8010f9e:	bf00      	nop
 8010fa0:	e7fd      	b.n	8010f9e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8010fa2:	4b2a      	ldr	r3, [pc, #168]	@ (801104c <vTaskDelayUntil+0xf4>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00b      	beq.n	8010fc2 <vTaskDelayUntil+0x6a>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fae:	f383 8811 	msr	BASEPRI, r3
 8010fb2:	f3bf 8f6f 	isb	sy
 8010fb6:	f3bf 8f4f 	dsb	sy
 8010fba:	60fb      	str	r3, [r7, #12]
}
 8010fbc:	bf00      	nop
 8010fbe:	bf00      	nop
 8010fc0:	e7fd      	b.n	8010fbe <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010fc2:	f000 f8b9 	bl	8011138 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010fc6:	4b22      	ldr	r3, [pc, #136]	@ (8011050 <vTaskDelayUntil+0xf8>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	683a      	ldr	r2, [r7, #0]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6a3a      	ldr	r2, [r7, #32]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d20b      	bcs.n	8010ff8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	69fa      	ldr	r2, [r7, #28]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d211      	bcs.n	801100e <vTaskDelayUntil+0xb6>
 8010fea:	69fa      	ldr	r2, [r7, #28]
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d90d      	bls.n	801100e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ff6:	e00a      	b.n	801100e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d303      	bcc.n	801100a <vTaskDelayUntil+0xb2>
 8011002:	69fa      	ldr	r2, [r7, #28]
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	429a      	cmp	r2, r3
 8011008:	d901      	bls.n	801100e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801100a:	2301      	movs	r3, #1
 801100c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	69fa      	ldr	r2, [r7, #28]
 8011012:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011016:	2b00      	cmp	r3, #0
 8011018:	d006      	beq.n	8011028 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801101a:	69fa      	ldr	r2, [r7, #28]
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	2100      	movs	r1, #0
 8011022:	4618      	mov	r0, r3
 8011024:	f000 fd0a 	bl	8011a3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011028:	f000 f894 	bl	8011154 <xTaskResumeAll>
 801102c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d107      	bne.n	8011044 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8011034:	4b07      	ldr	r3, [pc, #28]	@ (8011054 <vTaskDelayUntil+0xfc>)
 8011036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801103a:	601a      	str	r2, [r3, #0]
 801103c:	f3bf 8f4f 	dsb	sy
 8011040:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011044:	bf00      	nop
 8011046:	3728      	adds	r7, #40	@ 0x28
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	24003668 	.word	0x24003668
 8011050:	24003644 	.word	0x24003644
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	@ 0x28
 801105c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801105e:	2300      	movs	r3, #0
 8011060:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011062:	2300      	movs	r3, #0
 8011064:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011066:	463a      	mov	r2, r7
 8011068:	1d39      	adds	r1, r7, #4
 801106a:	f107 0308 	add.w	r3, r7, #8
 801106e:	4618      	mov	r0, r3
 8011070:	f7fe ff96 	bl	800ffa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	9202      	str	r2, [sp, #8]
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	2300      	movs	r3, #0
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	2300      	movs	r3, #0
 8011084:	460a      	mov	r2, r1
 8011086:	4924      	ldr	r1, [pc, #144]	@ (8011118 <vTaskStartScheduler+0xc0>)
 8011088:	4824      	ldr	r0, [pc, #144]	@ (801111c <vTaskStartScheduler+0xc4>)
 801108a:	f7ff fda7 	bl	8010bdc <xTaskCreateStatic>
 801108e:	4603      	mov	r3, r0
 8011090:	4a23      	ldr	r2, [pc, #140]	@ (8011120 <vTaskStartScheduler+0xc8>)
 8011092:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011094:	4b22      	ldr	r3, [pc, #136]	@ (8011120 <vTaskStartScheduler+0xc8>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d002      	beq.n	80110a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801109c:	2301      	movs	r3, #1
 801109e:	617b      	str	r3, [r7, #20]
 80110a0:	e001      	b.n	80110a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110a2:	2300      	movs	r3, #0
 80110a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d102      	bne.n	80110b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80110ac:	f000 fd1a 	bl	8011ae4 <xTimerCreateTimerTask>
 80110b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d11b      	bne.n	80110f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80110b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	613b      	str	r3, [r7, #16]
}
 80110ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110cc:	4b15      	ldr	r3, [pc, #84]	@ (8011124 <vTaskStartScheduler+0xcc>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	3354      	adds	r3, #84	@ 0x54
 80110d2:	4a15      	ldr	r2, [pc, #84]	@ (8011128 <vTaskStartScheduler+0xd0>)
 80110d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80110d6:	4b15      	ldr	r3, [pc, #84]	@ (801112c <vTaskStartScheduler+0xd4>)
 80110d8:	f04f 32ff 	mov.w	r2, #4294967295
 80110dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80110de:	4b14      	ldr	r3, [pc, #80]	@ (8011130 <vTaskStartScheduler+0xd8>)
 80110e0:	2201      	movs	r2, #1
 80110e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110e4:	4b13      	ldr	r3, [pc, #76]	@ (8011134 <vTaskStartScheduler+0xdc>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110ea:	f001 f8e1 	bl	80122b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110ee:	e00f      	b.n	8011110 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f6:	d10b      	bne.n	8011110 <vTaskStartScheduler+0xb8>
	__asm volatile
 80110f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fc:	f383 8811 	msr	BASEPRI, r3
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	60fb      	str	r3, [r7, #12]
}
 801110a:	bf00      	nop
 801110c:	bf00      	nop
 801110e:	e7fd      	b.n	801110c <vTaskStartScheduler+0xb4>
}
 8011110:	bf00      	nop
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	080172bc 	.word	0x080172bc
 801111c:	08011769 	.word	0x08011769
 8011120:	24003664 	.word	0x24003664
 8011124:	2400316c 	.word	0x2400316c
 8011128:	240001f8 	.word	0x240001f8
 801112c:	24003660 	.word	0x24003660
 8011130:	2400364c 	.word	0x2400364c
 8011134:	24003644 	.word	0x24003644

08011138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011138:	b480      	push	{r7}
 801113a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801113c:	4b04      	ldr	r3, [pc, #16]	@ (8011150 <vTaskSuspendAll+0x18>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	3301      	adds	r3, #1
 8011142:	4a03      	ldr	r2, [pc, #12]	@ (8011150 <vTaskSuspendAll+0x18>)
 8011144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011146:	bf00      	nop
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr
 8011150:	24003668 	.word	0x24003668

08011154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801115a:	2300      	movs	r3, #0
 801115c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801115e:	2300      	movs	r3, #0
 8011160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011162:	4b42      	ldr	r3, [pc, #264]	@ (801126c <xTaskResumeAll+0x118>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10b      	bne.n	8011182 <xTaskResumeAll+0x2e>
	__asm volatile
 801116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801116e:	f383 8811 	msr	BASEPRI, r3
 8011172:	f3bf 8f6f 	isb	sy
 8011176:	f3bf 8f4f 	dsb	sy
 801117a:	603b      	str	r3, [r7, #0]
}
 801117c:	bf00      	nop
 801117e:	bf00      	nop
 8011180:	e7fd      	b.n	801117e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011182:	f001 f939 	bl	80123f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011186:	4b39      	ldr	r3, [pc, #228]	@ (801126c <xTaskResumeAll+0x118>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3b01      	subs	r3, #1
 801118c:	4a37      	ldr	r2, [pc, #220]	@ (801126c <xTaskResumeAll+0x118>)
 801118e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011190:	4b36      	ldr	r3, [pc, #216]	@ (801126c <xTaskResumeAll+0x118>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d162      	bne.n	801125e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011198:	4b35      	ldr	r3, [pc, #212]	@ (8011270 <xTaskResumeAll+0x11c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d05e      	beq.n	801125e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111a0:	e02f      	b.n	8011202 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111a2:	4b34      	ldr	r3, [pc, #208]	@ (8011274 <xTaskResumeAll+0x120>)
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	3318      	adds	r3, #24
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fe ffb4 	bl	801011c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3304      	adds	r3, #4
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fe ffaf 	bl	801011c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111c2:	4b2d      	ldr	r3, [pc, #180]	@ (8011278 <xTaskResumeAll+0x124>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d903      	bls.n	80111d2 <xTaskResumeAll+0x7e>
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111ce:	4a2a      	ldr	r2, [pc, #168]	@ (8011278 <xTaskResumeAll+0x124>)
 80111d0:	6013      	str	r3, [r2, #0]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111d6:	4613      	mov	r3, r2
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4a27      	ldr	r2, [pc, #156]	@ (801127c <xTaskResumeAll+0x128>)
 80111e0:	441a      	add	r2, r3
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	3304      	adds	r3, #4
 80111e6:	4619      	mov	r1, r3
 80111e8:	4610      	mov	r0, r2
 80111ea:	f7fe ff3a 	bl	8010062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111f2:	4b23      	ldr	r3, [pc, #140]	@ (8011280 <xTaskResumeAll+0x12c>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d302      	bcc.n	8011202 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80111fc:	4b21      	ldr	r3, [pc, #132]	@ (8011284 <xTaskResumeAll+0x130>)
 80111fe:	2201      	movs	r2, #1
 8011200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011202:	4b1c      	ldr	r3, [pc, #112]	@ (8011274 <xTaskResumeAll+0x120>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1cb      	bne.n	80111a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011210:	f000 fb66 	bl	80118e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011214:	4b1c      	ldr	r3, [pc, #112]	@ (8011288 <xTaskResumeAll+0x134>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d010      	beq.n	8011242 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011220:	f000 f846 	bl	80112b0 <xTaskIncrementTick>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801122a:	4b16      	ldr	r3, [pc, #88]	@ (8011284 <xTaskResumeAll+0x130>)
 801122c:	2201      	movs	r2, #1
 801122e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3b01      	subs	r3, #1
 8011234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1f1      	bne.n	8011220 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801123c:	4b12      	ldr	r3, [pc, #72]	@ (8011288 <xTaskResumeAll+0x134>)
 801123e:	2200      	movs	r2, #0
 8011240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011242:	4b10      	ldr	r3, [pc, #64]	@ (8011284 <xTaskResumeAll+0x130>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d009      	beq.n	801125e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801124a:	2301      	movs	r3, #1
 801124c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801124e:	4b0f      	ldr	r3, [pc, #60]	@ (801128c <xTaskResumeAll+0x138>)
 8011250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011254:	601a      	str	r2, [r3, #0]
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801125e:	f001 f8fd 	bl	801245c <vPortExitCritical>

	return xAlreadyYielded;
 8011262:	68bb      	ldr	r3, [r7, #8]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	24003668 	.word	0x24003668
 8011270:	24003640 	.word	0x24003640
 8011274:	24003600 	.word	0x24003600
 8011278:	24003648 	.word	0x24003648
 801127c:	24003170 	.word	0x24003170
 8011280:	2400316c 	.word	0x2400316c
 8011284:	24003654 	.word	0x24003654
 8011288:	24003650 	.word	0x24003650
 801128c:	e000ed04 	.word	0xe000ed04

08011290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011296:	4b05      	ldr	r3, [pc, #20]	@ (80112ac <xTaskGetTickCount+0x1c>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801129c:	687b      	ldr	r3, [r7, #4]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	370c      	adds	r7, #12
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	24003644 	.word	0x24003644

080112b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112b6:	2300      	movs	r3, #0
 80112b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112ba:	4b4f      	ldr	r3, [pc, #316]	@ (80113f8 <xTaskIncrementTick+0x148>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f040 8090 	bne.w	80113e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112c4:	4b4d      	ldr	r3, [pc, #308]	@ (80113fc <xTaskIncrementTick+0x14c>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	3301      	adds	r3, #1
 80112ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112cc:	4a4b      	ldr	r2, [pc, #300]	@ (80113fc <xTaskIncrementTick+0x14c>)
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d121      	bne.n	801131c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80112d8:	4b49      	ldr	r3, [pc, #292]	@ (8011400 <xTaskIncrementTick+0x150>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00b      	beq.n	80112fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80112e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112e6:	f383 8811 	msr	BASEPRI, r3
 80112ea:	f3bf 8f6f 	isb	sy
 80112ee:	f3bf 8f4f 	dsb	sy
 80112f2:	603b      	str	r3, [r7, #0]
}
 80112f4:	bf00      	nop
 80112f6:	bf00      	nop
 80112f8:	e7fd      	b.n	80112f6 <xTaskIncrementTick+0x46>
 80112fa:	4b41      	ldr	r3, [pc, #260]	@ (8011400 <xTaskIncrementTick+0x150>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	4b40      	ldr	r3, [pc, #256]	@ (8011404 <xTaskIncrementTick+0x154>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a3e      	ldr	r2, [pc, #248]	@ (8011400 <xTaskIncrementTick+0x150>)
 8011306:	6013      	str	r3, [r2, #0]
 8011308:	4a3e      	ldr	r2, [pc, #248]	@ (8011404 <xTaskIncrementTick+0x154>)
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6013      	str	r3, [r2, #0]
 801130e:	4b3e      	ldr	r3, [pc, #248]	@ (8011408 <xTaskIncrementTick+0x158>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3301      	adds	r3, #1
 8011314:	4a3c      	ldr	r2, [pc, #240]	@ (8011408 <xTaskIncrementTick+0x158>)
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	f000 fae2 	bl	80118e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801131c:	4b3b      	ldr	r3, [pc, #236]	@ (801140c <xTaskIncrementTick+0x15c>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	429a      	cmp	r2, r3
 8011324:	d349      	bcc.n	80113ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011326:	4b36      	ldr	r3, [pc, #216]	@ (8011400 <xTaskIncrementTick+0x150>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d104      	bne.n	801133a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011330:	4b36      	ldr	r3, [pc, #216]	@ (801140c <xTaskIncrementTick+0x15c>)
 8011332:	f04f 32ff 	mov.w	r2, #4294967295
 8011336:	601a      	str	r2, [r3, #0]
					break;
 8011338:	e03f      	b.n	80113ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801133a:	4b31      	ldr	r3, [pc, #196]	@ (8011400 <xTaskIncrementTick+0x150>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801134a:	693a      	ldr	r2, [r7, #16]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	429a      	cmp	r2, r3
 8011350:	d203      	bcs.n	801135a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011352:	4a2e      	ldr	r2, [pc, #184]	@ (801140c <xTaskIncrementTick+0x15c>)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011358:	e02f      	b.n	80113ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	3304      	adds	r3, #4
 801135e:	4618      	mov	r0, r3
 8011360:	f7fe fedc 	bl	801011c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	d004      	beq.n	8011376 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	3318      	adds	r3, #24
 8011370:	4618      	mov	r0, r3
 8011372:	f7fe fed3 	bl	801011c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137a:	4b25      	ldr	r3, [pc, #148]	@ (8011410 <xTaskIncrementTick+0x160>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	429a      	cmp	r2, r3
 8011380:	d903      	bls.n	801138a <xTaskIncrementTick+0xda>
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011386:	4a22      	ldr	r2, [pc, #136]	@ (8011410 <xTaskIncrementTick+0x160>)
 8011388:	6013      	str	r3, [r2, #0]
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801138e:	4613      	mov	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4a1f      	ldr	r2, [pc, #124]	@ (8011414 <xTaskIncrementTick+0x164>)
 8011398:	441a      	add	r2, r3
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	3304      	adds	r3, #4
 801139e:	4619      	mov	r1, r3
 80113a0:	4610      	mov	r0, r2
 80113a2:	f7fe fe5e 	bl	8010062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113aa:	4b1b      	ldr	r3, [pc, #108]	@ (8011418 <xTaskIncrementTick+0x168>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d3b8      	bcc.n	8011326 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80113b4:	2301      	movs	r3, #1
 80113b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113b8:	e7b5      	b.n	8011326 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113ba:	4b17      	ldr	r3, [pc, #92]	@ (8011418 <xTaskIncrementTick+0x168>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113c0:	4914      	ldr	r1, [pc, #80]	@ (8011414 <xTaskIncrementTick+0x164>)
 80113c2:	4613      	mov	r3, r2
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	4413      	add	r3, r2
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	440b      	add	r3, r1
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d901      	bls.n	80113d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80113d2:	2301      	movs	r3, #1
 80113d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113d6:	4b11      	ldr	r3, [pc, #68]	@ (801141c <xTaskIncrementTick+0x16c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d007      	beq.n	80113ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80113de:	2301      	movs	r3, #1
 80113e0:	617b      	str	r3, [r7, #20]
 80113e2:	e004      	b.n	80113ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011420 <xTaskIncrementTick+0x170>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	3301      	adds	r3, #1
 80113ea:	4a0d      	ldr	r2, [pc, #52]	@ (8011420 <xTaskIncrementTick+0x170>)
 80113ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113ee:	697b      	ldr	r3, [r7, #20]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	24003668 	.word	0x24003668
 80113fc:	24003644 	.word	0x24003644
 8011400:	240035f8 	.word	0x240035f8
 8011404:	240035fc 	.word	0x240035fc
 8011408:	24003658 	.word	0x24003658
 801140c:	24003660 	.word	0x24003660
 8011410:	24003648 	.word	0x24003648
 8011414:	24003170 	.word	0x24003170
 8011418:	2400316c 	.word	0x2400316c
 801141c:	24003654 	.word	0x24003654
 8011420:	24003650 	.word	0x24003650

08011424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801142a:	4b2b      	ldr	r3, [pc, #172]	@ (80114d8 <vTaskSwitchContext+0xb4>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d003      	beq.n	801143a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011432:	4b2a      	ldr	r3, [pc, #168]	@ (80114dc <vTaskSwitchContext+0xb8>)
 8011434:	2201      	movs	r2, #1
 8011436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011438:	e047      	b.n	80114ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801143a:	4b28      	ldr	r3, [pc, #160]	@ (80114dc <vTaskSwitchContext+0xb8>)
 801143c:	2200      	movs	r2, #0
 801143e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011440:	4b27      	ldr	r3, [pc, #156]	@ (80114e0 <vTaskSwitchContext+0xbc>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	60fb      	str	r3, [r7, #12]
 8011446:	e011      	b.n	801146c <vTaskSwitchContext+0x48>
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d10b      	bne.n	8011466 <vTaskSwitchContext+0x42>
	__asm volatile
 801144e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	607b      	str	r3, [r7, #4]
}
 8011460:	bf00      	nop
 8011462:	bf00      	nop
 8011464:	e7fd      	b.n	8011462 <vTaskSwitchContext+0x3e>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	3b01      	subs	r3, #1
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	491d      	ldr	r1, [pc, #116]	@ (80114e4 <vTaskSwitchContext+0xc0>)
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	4613      	mov	r3, r2
 8011472:	009b      	lsls	r3, r3, #2
 8011474:	4413      	add	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	440b      	add	r3, r1
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d0e3      	beq.n	8011448 <vTaskSwitchContext+0x24>
 8011480:	68fa      	ldr	r2, [r7, #12]
 8011482:	4613      	mov	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	4413      	add	r3, r2
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4a16      	ldr	r2, [pc, #88]	@ (80114e4 <vTaskSwitchContext+0xc0>)
 801148c:	4413      	add	r3, r2
 801148e:	60bb      	str	r3, [r7, #8]
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	685a      	ldr	r2, [r3, #4]
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	605a      	str	r2, [r3, #4]
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	685a      	ldr	r2, [r3, #4]
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	3308      	adds	r3, #8
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d104      	bne.n	80114b0 <vTaskSwitchContext+0x8c>
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	605a      	str	r2, [r3, #4]
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	4a0c      	ldr	r2, [pc, #48]	@ (80114e8 <vTaskSwitchContext+0xc4>)
 80114b8:	6013      	str	r3, [r2, #0]
 80114ba:	4a09      	ldr	r2, [pc, #36]	@ (80114e0 <vTaskSwitchContext+0xbc>)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114c0:	4b09      	ldr	r3, [pc, #36]	@ (80114e8 <vTaskSwitchContext+0xc4>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3354      	adds	r3, #84	@ 0x54
 80114c6:	4a09      	ldr	r2, [pc, #36]	@ (80114ec <vTaskSwitchContext+0xc8>)
 80114c8:	6013      	str	r3, [r2, #0]
}
 80114ca:	bf00      	nop
 80114cc:	3714      	adds	r7, #20
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	24003668 	.word	0x24003668
 80114dc:	24003654 	.word	0x24003654
 80114e0:	24003648 	.word	0x24003648
 80114e4:	24003170 	.word	0x24003170
 80114e8:	2400316c 	.word	0x2400316c
 80114ec:	240001f8 	.word	0x240001f8

080114f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10b      	bne.n	8011518 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	60fb      	str	r3, [r7, #12]
}
 8011512:	bf00      	nop
 8011514:	bf00      	nop
 8011516:	e7fd      	b.n	8011514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011518:	4b07      	ldr	r3, [pc, #28]	@ (8011538 <vTaskPlaceOnEventList+0x48>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	3318      	adds	r3, #24
 801151e:	4619      	mov	r1, r3
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7fe fdc2 	bl	80100aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011526:	2101      	movs	r1, #1
 8011528:	6838      	ldr	r0, [r7, #0]
 801152a:	f000 fa87 	bl	8011a3c <prvAddCurrentTaskToDelayedList>
}
 801152e:	bf00      	nop
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	2400316c 	.word	0x2400316c

0801153c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10b      	bne.n	8011566 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	617b      	str	r3, [r7, #20]
}
 8011560:	bf00      	nop
 8011562:	bf00      	nop
 8011564:	e7fd      	b.n	8011562 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011566:	4b0a      	ldr	r3, [pc, #40]	@ (8011590 <vTaskPlaceOnEventListRestricted+0x54>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3318      	adds	r3, #24
 801156c:	4619      	mov	r1, r3
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7fe fd77 	bl	8010062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801157a:	f04f 33ff 	mov.w	r3, #4294967295
 801157e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011580:	6879      	ldr	r1, [r7, #4]
 8011582:	68b8      	ldr	r0, [r7, #8]
 8011584:	f000 fa5a 	bl	8011a3c <prvAddCurrentTaskToDelayedList>
	}
 8011588:	bf00      	nop
 801158a:	3718      	adds	r7, #24
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	2400316c 	.word	0x2400316c

08011594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10b      	bne.n	80115c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80115aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	60fb      	str	r3, [r7, #12]
}
 80115bc:	bf00      	nop
 80115be:	bf00      	nop
 80115c0:	e7fd      	b.n	80115be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	3318      	adds	r3, #24
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe fda8 	bl	801011c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115cc:	4b1d      	ldr	r3, [pc, #116]	@ (8011644 <xTaskRemoveFromEventList+0xb0>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d11d      	bne.n	8011610 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	3304      	adds	r3, #4
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fe fd9f 	bl	801011c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115e2:	4b19      	ldr	r3, [pc, #100]	@ (8011648 <xTaskRemoveFromEventList+0xb4>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d903      	bls.n	80115f2 <xTaskRemoveFromEventList+0x5e>
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ee:	4a16      	ldr	r2, [pc, #88]	@ (8011648 <xTaskRemoveFromEventList+0xb4>)
 80115f0:	6013      	str	r3, [r2, #0]
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115f6:	4613      	mov	r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	4413      	add	r3, r2
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	4a13      	ldr	r2, [pc, #76]	@ (801164c <xTaskRemoveFromEventList+0xb8>)
 8011600:	441a      	add	r2, r3
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	3304      	adds	r3, #4
 8011606:	4619      	mov	r1, r3
 8011608:	4610      	mov	r0, r2
 801160a:	f7fe fd2a 	bl	8010062 <vListInsertEnd>
 801160e:	e005      	b.n	801161c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	3318      	adds	r3, #24
 8011614:	4619      	mov	r1, r3
 8011616:	480e      	ldr	r0, [pc, #56]	@ (8011650 <xTaskRemoveFromEventList+0xbc>)
 8011618:	f7fe fd23 	bl	8010062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011620:	4b0c      	ldr	r3, [pc, #48]	@ (8011654 <xTaskRemoveFromEventList+0xc0>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011626:	429a      	cmp	r2, r3
 8011628:	d905      	bls.n	8011636 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801162a:	2301      	movs	r3, #1
 801162c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801162e:	4b0a      	ldr	r3, [pc, #40]	@ (8011658 <xTaskRemoveFromEventList+0xc4>)
 8011630:	2201      	movs	r2, #1
 8011632:	601a      	str	r2, [r3, #0]
 8011634:	e001      	b.n	801163a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011636:	2300      	movs	r3, #0
 8011638:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801163a:	697b      	ldr	r3, [r7, #20]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3718      	adds	r7, #24
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	24003668 	.word	0x24003668
 8011648:	24003648 	.word	0x24003648
 801164c:	24003170 	.word	0x24003170
 8011650:	24003600 	.word	0x24003600
 8011654:	2400316c 	.word	0x2400316c
 8011658:	24003654 	.word	0x24003654

0801165c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011664:	4b06      	ldr	r3, [pc, #24]	@ (8011680 <vTaskInternalSetTimeOutState+0x24>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801166c:	4b05      	ldr	r3, [pc, #20]	@ (8011684 <vTaskInternalSetTimeOutState+0x28>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	605a      	str	r2, [r3, #4]
}
 8011674:	bf00      	nop
 8011676:	370c      	adds	r7, #12
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr
 8011680:	24003658 	.word	0x24003658
 8011684:	24003644 	.word	0x24003644

08011688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b088      	sub	sp, #32
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
 8011690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d10b      	bne.n	80116b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	613b      	str	r3, [r7, #16]
}
 80116aa:	bf00      	nop
 80116ac:	bf00      	nop
 80116ae:	e7fd      	b.n	80116ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10b      	bne.n	80116ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80116b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	60fb      	str	r3, [r7, #12]
}
 80116c8:	bf00      	nop
 80116ca:	bf00      	nop
 80116cc:	e7fd      	b.n	80116ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80116ce:	f000 fe93 	bl	80123f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116d2:	4b1d      	ldr	r3, [pc, #116]	@ (8011748 <xTaskCheckForTimeOut+0xc0>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	69ba      	ldr	r2, [r7, #24]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ea:	d102      	bne.n	80116f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116ec:	2300      	movs	r3, #0
 80116ee:	61fb      	str	r3, [r7, #28]
 80116f0:	e023      	b.n	801173a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	4b15      	ldr	r3, [pc, #84]	@ (801174c <xTaskCheckForTimeOut+0xc4>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d007      	beq.n	801170e <xTaskCheckForTimeOut+0x86>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	69ba      	ldr	r2, [r7, #24]
 8011704:	429a      	cmp	r2, r3
 8011706:	d302      	bcc.n	801170e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011708:	2301      	movs	r3, #1
 801170a:	61fb      	str	r3, [r7, #28]
 801170c:	e015      	b.n	801173a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	429a      	cmp	r2, r3
 8011716:	d20b      	bcs.n	8011730 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	1ad2      	subs	r2, r2, r3
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff ff99 	bl	801165c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801172a:	2300      	movs	r3, #0
 801172c:	61fb      	str	r3, [r7, #28]
 801172e:	e004      	b.n	801173a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011736:	2301      	movs	r3, #1
 8011738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801173a:	f000 fe8f 	bl	801245c <vPortExitCritical>

	return xReturn;
 801173e:	69fb      	ldr	r3, [r7, #28]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3720      	adds	r7, #32
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	24003644 	.word	0x24003644
 801174c:	24003658 	.word	0x24003658

08011750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011754:	4b03      	ldr	r3, [pc, #12]	@ (8011764 <vTaskMissedYield+0x14>)
 8011756:	2201      	movs	r2, #1
 8011758:	601a      	str	r2, [r3, #0]
}
 801175a:	bf00      	nop
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr
 8011764:	24003654 	.word	0x24003654

08011768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011770:	f000 f852 	bl	8011818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011774:	4b06      	ldr	r3, [pc, #24]	@ (8011790 <prvIdleTask+0x28>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b01      	cmp	r3, #1
 801177a:	d9f9      	bls.n	8011770 <prvIdleTask+0x8>
			{
				taskYIELD();
 801177c:	4b05      	ldr	r3, [pc, #20]	@ (8011794 <prvIdleTask+0x2c>)
 801177e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801178c:	e7f0      	b.n	8011770 <prvIdleTask+0x8>
 801178e:	bf00      	nop
 8011790:	24003170 	.word	0x24003170
 8011794:	e000ed04 	.word	0xe000ed04

08011798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801179e:	2300      	movs	r3, #0
 80117a0:	607b      	str	r3, [r7, #4]
 80117a2:	e00c      	b.n	80117be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	4613      	mov	r3, r2
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4413      	add	r3, r2
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	4a12      	ldr	r2, [pc, #72]	@ (80117f8 <prvInitialiseTaskLists+0x60>)
 80117b0:	4413      	add	r3, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fe fc28 	bl	8010008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3301      	adds	r3, #1
 80117bc:	607b      	str	r3, [r7, #4]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b37      	cmp	r3, #55	@ 0x37
 80117c2:	d9ef      	bls.n	80117a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117c4:	480d      	ldr	r0, [pc, #52]	@ (80117fc <prvInitialiseTaskLists+0x64>)
 80117c6:	f7fe fc1f 	bl	8010008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117ca:	480d      	ldr	r0, [pc, #52]	@ (8011800 <prvInitialiseTaskLists+0x68>)
 80117cc:	f7fe fc1c 	bl	8010008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117d0:	480c      	ldr	r0, [pc, #48]	@ (8011804 <prvInitialiseTaskLists+0x6c>)
 80117d2:	f7fe fc19 	bl	8010008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117d6:	480c      	ldr	r0, [pc, #48]	@ (8011808 <prvInitialiseTaskLists+0x70>)
 80117d8:	f7fe fc16 	bl	8010008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117dc:	480b      	ldr	r0, [pc, #44]	@ (801180c <prvInitialiseTaskLists+0x74>)
 80117de:	f7fe fc13 	bl	8010008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011810 <prvInitialiseTaskLists+0x78>)
 80117e4:	4a05      	ldr	r2, [pc, #20]	@ (80117fc <prvInitialiseTaskLists+0x64>)
 80117e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011814 <prvInitialiseTaskLists+0x7c>)
 80117ea:	4a05      	ldr	r2, [pc, #20]	@ (8011800 <prvInitialiseTaskLists+0x68>)
 80117ec:	601a      	str	r2, [r3, #0]
}
 80117ee:	bf00      	nop
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	24003170 	.word	0x24003170
 80117fc:	240035d0 	.word	0x240035d0
 8011800:	240035e4 	.word	0x240035e4
 8011804:	24003600 	.word	0x24003600
 8011808:	24003614 	.word	0x24003614
 801180c:	2400362c 	.word	0x2400362c
 8011810:	240035f8 	.word	0x240035f8
 8011814:	240035fc 	.word	0x240035fc

08011818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801181e:	e019      	b.n	8011854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011820:	f000 fdea 	bl	80123f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011824:	4b10      	ldr	r3, [pc, #64]	@ (8011868 <prvCheckTasksWaitingTermination+0x50>)
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	3304      	adds	r3, #4
 8011830:	4618      	mov	r0, r3
 8011832:	f7fe fc73 	bl	801011c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011836:	4b0d      	ldr	r3, [pc, #52]	@ (801186c <prvCheckTasksWaitingTermination+0x54>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	3b01      	subs	r3, #1
 801183c:	4a0b      	ldr	r2, [pc, #44]	@ (801186c <prvCheckTasksWaitingTermination+0x54>)
 801183e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011840:	4b0b      	ldr	r3, [pc, #44]	@ (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3b01      	subs	r3, #1
 8011846:	4a0a      	ldr	r2, [pc, #40]	@ (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801184a:	f000 fe07 	bl	801245c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f810 	bl	8011874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011854:	4b06      	ldr	r3, [pc, #24]	@ (8011870 <prvCheckTasksWaitingTermination+0x58>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d1e1      	bne.n	8011820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801185c:	bf00      	nop
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	24003614 	.word	0x24003614
 801186c:	24003640 	.word	0x24003640
 8011870:	24003628 	.word	0x24003628

08011874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3354      	adds	r3, #84	@ 0x54
 8011880:	4618      	mov	r0, r3
 8011882:	f002 fe6f 	bl	8014564 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801188c:	2b00      	cmp	r3, #0
 801188e:	d108      	bne.n	80118a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011894:	4618      	mov	r0, r3
 8011896:	f000 ff9f 	bl	80127d8 <vPortFree>
				vPortFree( pxTCB );
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 ff9c 	bl	80127d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118a0:	e019      	b.n	80118d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d103      	bne.n	80118b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 ff93 	bl	80127d8 <vPortFree>
	}
 80118b2:	e010      	b.n	80118d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80118ba:	2b02      	cmp	r3, #2
 80118bc:	d00b      	beq.n	80118d6 <prvDeleteTCB+0x62>
	__asm volatile
 80118be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	60fb      	str	r3, [r7, #12]
}
 80118d0:	bf00      	nop
 80118d2:	bf00      	nop
 80118d4:	e7fd      	b.n	80118d2 <prvDeleteTCB+0x5e>
	}
 80118d6:	bf00      	nop
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
	...

080118e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118e6:	4b0c      	ldr	r3, [pc, #48]	@ (8011918 <prvResetNextTaskUnblockTime+0x38>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d104      	bne.n	80118fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118f0:	4b0a      	ldr	r3, [pc, #40]	@ (801191c <prvResetNextTaskUnblockTime+0x3c>)
 80118f2:	f04f 32ff 	mov.w	r2, #4294967295
 80118f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118f8:	e008      	b.n	801190c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118fa:	4b07      	ldr	r3, [pc, #28]	@ (8011918 <prvResetNextTaskUnblockTime+0x38>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	4a04      	ldr	r2, [pc, #16]	@ (801191c <prvResetNextTaskUnblockTime+0x3c>)
 801190a:	6013      	str	r3, [r2, #0]
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr
 8011918:	240035f8 	.word	0x240035f8
 801191c:	24003660 	.word	0x24003660

08011920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011926:	4b0b      	ldr	r3, [pc, #44]	@ (8011954 <xTaskGetSchedulerState+0x34>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d102      	bne.n	8011934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801192e:	2301      	movs	r3, #1
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	e008      	b.n	8011946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011934:	4b08      	ldr	r3, [pc, #32]	@ (8011958 <xTaskGetSchedulerState+0x38>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d102      	bne.n	8011942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801193c:	2302      	movs	r3, #2
 801193e:	607b      	str	r3, [r7, #4]
 8011940:	e001      	b.n	8011946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011942:	2300      	movs	r3, #0
 8011944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011946:	687b      	ldr	r3, [r7, #4]
	}
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	2400364c 	.word	0x2400364c
 8011958:	24003668 	.word	0x24003668

0801195c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801195c:	b580      	push	{r7, lr}
 801195e:	b086      	sub	sp, #24
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011968:	2300      	movs	r3, #0
 801196a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d058      	beq.n	8011a24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011972:	4b2f      	ldr	r3, [pc, #188]	@ (8011a30 <xTaskPriorityDisinherit+0xd4>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	693a      	ldr	r2, [r7, #16]
 8011978:	429a      	cmp	r2, r3
 801197a:	d00b      	beq.n	8011994 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801197c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011980:	f383 8811 	msr	BASEPRI, r3
 8011984:	f3bf 8f6f 	isb	sy
 8011988:	f3bf 8f4f 	dsb	sy
 801198c:	60fb      	str	r3, [r7, #12]
}
 801198e:	bf00      	nop
 8011990:	bf00      	nop
 8011992:	e7fd      	b.n	8011990 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011998:	2b00      	cmp	r3, #0
 801199a:	d10b      	bne.n	80119b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801199c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119a0:	f383 8811 	msr	BASEPRI, r3
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	f3bf 8f4f 	dsb	sy
 80119ac:	60bb      	str	r3, [r7, #8]
}
 80119ae:	bf00      	nop
 80119b0:	bf00      	nop
 80119b2:	e7fd      	b.n	80119b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119b8:	1e5a      	subs	r2, r3, #1
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d02c      	beq.n	8011a24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d128      	bne.n	8011a24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	3304      	adds	r3, #4
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fe fba0 	bl	801011c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <xTaskPriorityDisinherit+0xd8>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d903      	bls.n	8011a04 <xTaskPriorityDisinherit+0xa8>
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a00:	4a0c      	ldr	r2, [pc, #48]	@ (8011a34 <xTaskPriorityDisinherit+0xd8>)
 8011a02:	6013      	str	r3, [r2, #0]
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a08:	4613      	mov	r3, r2
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	4413      	add	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4a09      	ldr	r2, [pc, #36]	@ (8011a38 <xTaskPriorityDisinherit+0xdc>)
 8011a12:	441a      	add	r2, r3
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4610      	mov	r0, r2
 8011a1c:	f7fe fb21 	bl	8010062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a20:	2301      	movs	r3, #1
 8011a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a24:	697b      	ldr	r3, [r7, #20]
	}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	2400316c 	.word	0x2400316c
 8011a34:	24003648 	.word	0x24003648
 8011a38:	24003170 	.word	0x24003170

08011a3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011a46:	4b21      	ldr	r3, [pc, #132]	@ (8011acc <prvAddCurrentTaskToDelayedList+0x90>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a4c:	4b20      	ldr	r3, [pc, #128]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	3304      	adds	r3, #4
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fe fb62 	bl	801011c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5e:	d10a      	bne.n	8011a76 <prvAddCurrentTaskToDelayedList+0x3a>
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d007      	beq.n	8011a76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a66:	4b1a      	ldr	r3, [pc, #104]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	4819      	ldr	r0, [pc, #100]	@ (8011ad4 <prvAddCurrentTaskToDelayedList+0x98>)
 8011a70:	f7fe faf7 	bl	8010062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a74:	e026      	b.n	8011ac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a7e:	4b14      	ldr	r3, [pc, #80]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a86:	68ba      	ldr	r2, [r7, #8]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d209      	bcs.n	8011aa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a8e:	4b12      	ldr	r3, [pc, #72]	@ (8011ad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	4b0f      	ldr	r3, [pc, #60]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3304      	adds	r3, #4
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	f7fe fb05 	bl	80100aa <vListInsert>
}
 8011aa0:	e010      	b.n	8011ac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8011adc <prvAddCurrentTaskToDelayedList+0xa0>)
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3304      	adds	r3, #4
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7fe fafb 	bl	80100aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d202      	bcs.n	8011ac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011abe:	4a08      	ldr	r2, [pc, #32]	@ (8011ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	6013      	str	r3, [r2, #0]
}
 8011ac4:	bf00      	nop
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	24003644 	.word	0x24003644
 8011ad0:	2400316c 	.word	0x2400316c
 8011ad4:	2400362c 	.word	0x2400362c
 8011ad8:	240035fc 	.word	0x240035fc
 8011adc:	240035f8 	.word	0x240035f8
 8011ae0:	24003660 	.word	0x24003660

08011ae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08a      	sub	sp, #40	@ 0x28
 8011ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011aea:	2300      	movs	r3, #0
 8011aec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011aee:	f000 fb13 	bl	8012118 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011af2:	4b1d      	ldr	r3, [pc, #116]	@ (8011b68 <xTimerCreateTimerTask+0x84>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d021      	beq.n	8011b3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011b02:	1d3a      	adds	r2, r7, #4
 8011b04:	f107 0108 	add.w	r1, r7, #8
 8011b08:	f107 030c 	add.w	r3, r7, #12
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe fa61 	bl	800ffd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011b12:	6879      	ldr	r1, [r7, #4]
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	9202      	str	r2, [sp, #8]
 8011b1a:	9301      	str	r3, [sp, #4]
 8011b1c:	2302      	movs	r3, #2
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	2300      	movs	r3, #0
 8011b22:	460a      	mov	r2, r1
 8011b24:	4911      	ldr	r1, [pc, #68]	@ (8011b6c <xTimerCreateTimerTask+0x88>)
 8011b26:	4812      	ldr	r0, [pc, #72]	@ (8011b70 <xTimerCreateTimerTask+0x8c>)
 8011b28:	f7ff f858 	bl	8010bdc <xTaskCreateStatic>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	4a11      	ldr	r2, [pc, #68]	@ (8011b74 <xTimerCreateTimerTask+0x90>)
 8011b30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011b32:	4b10      	ldr	r3, [pc, #64]	@ (8011b74 <xTimerCreateTimerTask+0x90>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10b      	bne.n	8011b5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b48:	f383 8811 	msr	BASEPRI, r3
 8011b4c:	f3bf 8f6f 	isb	sy
 8011b50:	f3bf 8f4f 	dsb	sy
 8011b54:	613b      	str	r3, [r7, #16]
}
 8011b56:	bf00      	nop
 8011b58:	bf00      	nop
 8011b5a:	e7fd      	b.n	8011b58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011b5c:	697b      	ldr	r3, [r7, #20]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3718      	adds	r7, #24
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	2400369c 	.word	0x2400369c
 8011b6c:	080172c4 	.word	0x080172c4
 8011b70:	08011cb1 	.word	0x08011cb1
 8011b74:	240036a0 	.word	0x240036a0

08011b78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b08a      	sub	sp, #40	@ 0x28
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
 8011b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b86:	2300      	movs	r3, #0
 8011b88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10b      	bne.n	8011ba8 <xTimerGenericCommand+0x30>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b94:	f383 8811 	msr	BASEPRI, r3
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	623b      	str	r3, [r7, #32]
}
 8011ba2:	bf00      	nop
 8011ba4:	bf00      	nop
 8011ba6:	e7fd      	b.n	8011ba4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011ba8:	4b19      	ldr	r3, [pc, #100]	@ (8011c10 <xTimerGenericCommand+0x98>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d02a      	beq.n	8011c06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2b05      	cmp	r3, #5
 8011bc0:	dc18      	bgt.n	8011bf4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011bc2:	f7ff fead 	bl	8011920 <xTaskGetSchedulerState>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b02      	cmp	r3, #2
 8011bca:	d109      	bne.n	8011be0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011bcc:	4b10      	ldr	r3, [pc, #64]	@ (8011c10 <xTimerGenericCommand+0x98>)
 8011bce:	6818      	ldr	r0, [r3, #0]
 8011bd0:	f107 0110 	add.w	r1, r7, #16
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bd8:	f7fe fc10 	bl	80103fc <xQueueGenericSend>
 8011bdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8011bde:	e012      	b.n	8011c06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011be0:	4b0b      	ldr	r3, [pc, #44]	@ (8011c10 <xTimerGenericCommand+0x98>)
 8011be2:	6818      	ldr	r0, [r3, #0]
 8011be4:	f107 0110 	add.w	r1, r7, #16
 8011be8:	2300      	movs	r3, #0
 8011bea:	2200      	movs	r2, #0
 8011bec:	f7fe fc06 	bl	80103fc <xQueueGenericSend>
 8011bf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8011bf2:	e008      	b.n	8011c06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011bf4:	4b06      	ldr	r3, [pc, #24]	@ (8011c10 <xTimerGenericCommand+0x98>)
 8011bf6:	6818      	ldr	r0, [r3, #0]
 8011bf8:	f107 0110 	add.w	r1, r7, #16
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	683a      	ldr	r2, [r7, #0]
 8011c00:	f7fe fcfe 	bl	8010600 <xQueueGenericSendFromISR>
 8011c04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3728      	adds	r7, #40	@ 0x28
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	2400369c 	.word	0x2400369c

08011c14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b088      	sub	sp, #32
 8011c18:	af02      	add	r7, sp, #8
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c1e:	4b23      	ldr	r3, [pc, #140]	@ (8011cac <prvProcessExpiredTimer+0x98>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fe fa75 	bl	801011c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c38:	f003 0304 	and.w	r3, r3, #4
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d023      	beq.n	8011c88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	699a      	ldr	r2, [r3, #24]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	18d1      	adds	r1, r2, r3
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	683a      	ldr	r2, [r7, #0]
 8011c4c:	6978      	ldr	r0, [r7, #20]
 8011c4e:	f000 f8d5 	bl	8011dfc <prvInsertTimerInActiveList>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d020      	beq.n	8011c9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c58:	2300      	movs	r3, #0
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	2100      	movs	r1, #0
 8011c62:	6978      	ldr	r0, [r7, #20]
 8011c64:	f7ff ff88 	bl	8011b78 <xTimerGenericCommand>
 8011c68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d114      	bne.n	8011c9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	60fb      	str	r3, [r7, #12]
}
 8011c82:	bf00      	nop
 8011c84:	bf00      	nop
 8011c86:	e7fd      	b.n	8011c84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c8e:	f023 0301 	bic.w	r3, r3, #1
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	6a1b      	ldr	r3, [r3, #32]
 8011c9e:	6978      	ldr	r0, [r7, #20]
 8011ca0:	4798      	blx	r3
}
 8011ca2:	bf00      	nop
 8011ca4:	3718      	adds	r7, #24
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	24003694 	.word	0x24003694

08011cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cb8:	f107 0308 	add.w	r3, r7, #8
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f000 f859 	bl	8011d74 <prvGetNextExpireTime>
 8011cc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f000 f805 	bl	8011cd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011cce:	f000 f8d7 	bl	8011e80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cd2:	bf00      	nop
 8011cd4:	e7f0      	b.n	8011cb8 <prvTimerTask+0x8>
	...

08011cd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011ce2:	f7ff fa29 	bl	8011138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ce6:	f107 0308 	add.w	r3, r7, #8
 8011cea:	4618      	mov	r0, r3
 8011cec:	f000 f866 	bl	8011dbc <prvSampleTimeNow>
 8011cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d130      	bne.n	8011d5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d10a      	bne.n	8011d14 <prvProcessTimerOrBlockTask+0x3c>
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d806      	bhi.n	8011d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011d06:	f7ff fa25 	bl	8011154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011d0a:	68f9      	ldr	r1, [r7, #12]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff ff81 	bl	8011c14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011d12:	e024      	b.n	8011d5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d008      	beq.n	8011d2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011d1a:	4b13      	ldr	r3, [pc, #76]	@ (8011d68 <prvProcessTimerOrBlockTask+0x90>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d101      	bne.n	8011d28 <prvProcessTimerOrBlockTask+0x50>
 8011d24:	2301      	movs	r3, #1
 8011d26:	e000      	b.n	8011d2a <prvProcessTimerOrBlockTask+0x52>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8011d6c <prvProcessTimerOrBlockTask+0x94>)
 8011d2e:	6818      	ldr	r0, [r3, #0]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	683a      	ldr	r2, [r7, #0]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	f7fe ff1b 	bl	8010b74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011d3e:	f7ff fa09 	bl	8011154 <xTaskResumeAll>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d10a      	bne.n	8011d5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011d48:	4b09      	ldr	r3, [pc, #36]	@ (8011d70 <prvProcessTimerOrBlockTask+0x98>)
 8011d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d4e:	601a      	str	r2, [r3, #0]
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	f3bf 8f6f 	isb	sy
}
 8011d58:	e001      	b.n	8011d5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d5a:	f7ff f9fb 	bl	8011154 <xTaskResumeAll>
}
 8011d5e:	bf00      	nop
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	24003698 	.word	0x24003698
 8011d6c:	2400369c 	.word	0x2400369c
 8011d70:	e000ed04 	.word	0xe000ed04

08011d74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d74:	b480      	push	{r7}
 8011d76:	b085      	sub	sp, #20
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8011db8 <prvGetNextExpireTime+0x44>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d101      	bne.n	8011d8a <prvGetNextExpireTime+0x16>
 8011d86:	2201      	movs	r2, #1
 8011d88:	e000      	b.n	8011d8c <prvGetNextExpireTime+0x18>
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d105      	bne.n	8011da4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d98:	4b07      	ldr	r3, [pc, #28]	@ (8011db8 <prvGetNextExpireTime+0x44>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
 8011da2:	e001      	b.n	8011da8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011da8:	68fb      	ldr	r3, [r7, #12]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	24003694 	.word	0x24003694

08011dbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011dc4:	f7ff fa64 	bl	8011290 <xTaskGetTickCount>
 8011dc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011dca:	4b0b      	ldr	r3, [pc, #44]	@ (8011df8 <prvSampleTimeNow+0x3c>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68fa      	ldr	r2, [r7, #12]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d205      	bcs.n	8011de0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011dd4:	f000 f93a 	bl	801204c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	e002      	b.n	8011de6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011de6:	4a04      	ldr	r2, [pc, #16]	@ (8011df8 <prvSampleTimeNow+0x3c>)
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011dec:	68fb      	ldr	r3, [r7, #12]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	240036a4 	.word	0x240036a4

08011dfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011e1a:	68ba      	ldr	r2, [r7, #8]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d812      	bhi.n	8011e48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	1ad2      	subs	r2, r2, r3
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	699b      	ldr	r3, [r3, #24]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d302      	bcc.n	8011e36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011e30:	2301      	movs	r3, #1
 8011e32:	617b      	str	r3, [r7, #20]
 8011e34:	e01b      	b.n	8011e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e36:	4b10      	ldr	r3, [pc, #64]	@ (8011e78 <prvInsertTimerInActiveList+0x7c>)
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4610      	mov	r0, r2
 8011e42:	f7fe f932 	bl	80100aa <vListInsert>
 8011e46:	e012      	b.n	8011e6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d206      	bcs.n	8011e5e <prvInsertTimerInActiveList+0x62>
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d302      	bcc.n	8011e5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	617b      	str	r3, [r7, #20]
 8011e5c:	e007      	b.n	8011e6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e5e:	4b07      	ldr	r3, [pc, #28]	@ (8011e7c <prvInsertTimerInActiveList+0x80>)
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	3304      	adds	r3, #4
 8011e66:	4619      	mov	r1, r3
 8011e68:	4610      	mov	r0, r2
 8011e6a:	f7fe f91e 	bl	80100aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e6e:	697b      	ldr	r3, [r7, #20]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3718      	adds	r7, #24
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	24003698 	.word	0x24003698
 8011e7c:	24003694 	.word	0x24003694

08011e80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b08e      	sub	sp, #56	@ 0x38
 8011e84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e86:	e0ce      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	da19      	bge.n	8011ec2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e8e:	1d3b      	adds	r3, r7, #4
 8011e90:	3304      	adds	r3, #4
 8011e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10b      	bne.n	8011eb2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9e:	f383 8811 	msr	BASEPRI, r3
 8011ea2:	f3bf 8f6f 	isb	sy
 8011ea6:	f3bf 8f4f 	dsb	sy
 8011eaa:	61fb      	str	r3, [r7, #28]
}
 8011eac:	bf00      	nop
 8011eae:	bf00      	nop
 8011eb0:	e7fd      	b.n	8011eae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011eb8:	6850      	ldr	r0, [r2, #4]
 8011eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ebc:	6892      	ldr	r2, [r2, #8]
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f2c0 80ae 	blt.w	8012026 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed0:	695b      	ldr	r3, [r3, #20]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d004      	beq.n	8011ee0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed8:	3304      	adds	r3, #4
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fe f91e 	bl	801011c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ee0:	463b      	mov	r3, r7
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ff ff6a 	bl	8011dbc <prvSampleTimeNow>
 8011ee8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b09      	cmp	r3, #9
 8011eee:	f200 8097 	bhi.w	8012020 <prvProcessReceivedCommands+0x1a0>
 8011ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ef8 <prvProcessReceivedCommands+0x78>)
 8011ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef8:	08011f21 	.word	0x08011f21
 8011efc:	08011f21 	.word	0x08011f21
 8011f00:	08011f21 	.word	0x08011f21
 8011f04:	08011f97 	.word	0x08011f97
 8011f08:	08011fab 	.word	0x08011fab
 8011f0c:	08011ff7 	.word	0x08011ff7
 8011f10:	08011f21 	.word	0x08011f21
 8011f14:	08011f21 	.word	0x08011f21
 8011f18:	08011f97 	.word	0x08011f97
 8011f1c:	08011fab 	.word	0x08011fab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f26:	f043 0301 	orr.w	r3, r3, #1
 8011f2a:	b2da      	uxtb	r2, r3
 8011f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011f32:	68ba      	ldr	r2, [r7, #8]
 8011f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f36:	699b      	ldr	r3, [r3, #24]
 8011f38:	18d1      	adds	r1, r2, r3
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f40:	f7ff ff5c 	bl	8011dfc <prvInsertTimerInActiveList>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d06c      	beq.n	8012024 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4c:	6a1b      	ldr	r3, [r3, #32]
 8011f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f58:	f003 0304 	and.w	r3, r3, #4
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d061      	beq.n	8012024 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f64:	699b      	ldr	r3, [r3, #24]
 8011f66:	441a      	add	r2, r3
 8011f68:	2300      	movs	r3, #0
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	2100      	movs	r1, #0
 8011f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f72:	f7ff fe01 	bl	8011b78 <xTimerGenericCommand>
 8011f76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f78:	6a3b      	ldr	r3, [r7, #32]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d152      	bne.n	8012024 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	61bb      	str	r3, [r7, #24]
}
 8011f90:	bf00      	nop
 8011f92:	bf00      	nop
 8011f94:	e7fd      	b.n	8011f92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f9c:	f023 0301 	bic.w	r3, r3, #1
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011fa8:	e03d      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fb0:	f043 0301 	orr.w	r3, r3, #1
 8011fb4:	b2da      	uxtb	r2, r3
 8011fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc4:	699b      	ldr	r3, [r3, #24]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10b      	bne.n	8011fe2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fce:	f383 8811 	msr	BASEPRI, r3
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	f3bf 8f4f 	dsb	sy
 8011fda:	617b      	str	r3, [r7, #20]
}
 8011fdc:	bf00      	nop
 8011fde:	bf00      	nop
 8011fe0:	e7fd      	b.n	8011fde <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe4:	699a      	ldr	r2, [r3, #24]
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe8:	18d1      	adds	r1, r2, r3
 8011fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ff0:	f7ff ff04 	bl	8011dfc <prvInsertTimerInActiveList>
					break;
 8011ff4:	e017      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ffc:	f003 0302 	and.w	r3, r3, #2
 8012000:	2b00      	cmp	r3, #0
 8012002:	d103      	bne.n	801200c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012006:	f000 fbe7 	bl	80127d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801200a:	e00c      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012012:	f023 0301 	bic.w	r3, r3, #1
 8012016:	b2da      	uxtb	r2, r3
 8012018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801201a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801201e:	e002      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012020:	bf00      	nop
 8012022:	e000      	b.n	8012026 <prvProcessReceivedCommands+0x1a6>
					break;
 8012024:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012026:	4b08      	ldr	r3, [pc, #32]	@ (8012048 <prvProcessReceivedCommands+0x1c8>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	1d39      	adds	r1, r7, #4
 801202c:	2200      	movs	r2, #0
 801202e:	4618      	mov	r0, r3
 8012030:	f7fe fb84 	bl	801073c <xQueueReceive>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	f47f af26 	bne.w	8011e88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801203c:	bf00      	nop
 801203e:	bf00      	nop
 8012040:	3730      	adds	r7, #48	@ 0x30
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	2400369c 	.word	0x2400369c

0801204c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012052:	e049      	b.n	80120e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012054:	4b2e      	ldr	r3, [pc, #184]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801205e:	4b2c      	ldr	r3, [pc, #176]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	3304      	adds	r3, #4
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe f855 	bl	801011c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	6a1b      	ldr	r3, [r3, #32]
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012080:	f003 0304 	and.w	r3, r3, #4
 8012084:	2b00      	cmp	r3, #0
 8012086:	d02f      	beq.n	80120e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	699b      	ldr	r3, [r3, #24]
 801208c:	693a      	ldr	r2, [r7, #16]
 801208e:	4413      	add	r3, r2
 8012090:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012092:	68ba      	ldr	r2, [r7, #8]
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	429a      	cmp	r2, r3
 8012098:	d90e      	bls.n	80120b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	68ba      	ldr	r2, [r7, #8]
 801209e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120a6:	4b1a      	ldr	r3, [pc, #104]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	3304      	adds	r3, #4
 80120ae:	4619      	mov	r1, r3
 80120b0:	4610      	mov	r0, r2
 80120b2:	f7fd fffa 	bl	80100aa <vListInsert>
 80120b6:	e017      	b.n	80120e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80120b8:	2300      	movs	r3, #0
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	2300      	movs	r3, #0
 80120be:	693a      	ldr	r2, [r7, #16]
 80120c0:	2100      	movs	r1, #0
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f7ff fd58 	bl	8011b78 <xTimerGenericCommand>
 80120c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10b      	bne.n	80120e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80120d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	603b      	str	r3, [r7, #0]
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	e7fd      	b.n	80120e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120e8:	4b09      	ldr	r3, [pc, #36]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1b0      	bne.n	8012054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80120f2:	4b07      	ldr	r3, [pc, #28]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80120f8:	4b06      	ldr	r3, [pc, #24]	@ (8012114 <prvSwitchTimerLists+0xc8>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a04      	ldr	r2, [pc, #16]	@ (8012110 <prvSwitchTimerLists+0xc4>)
 80120fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012100:	4a04      	ldr	r2, [pc, #16]	@ (8012114 <prvSwitchTimerLists+0xc8>)
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	6013      	str	r3, [r2, #0]
}
 8012106:	bf00      	nop
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	24003694 	.word	0x24003694
 8012114:	24003698 	.word	0x24003698

08012118 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801211e:	f000 f96b 	bl	80123f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012122:	4b15      	ldr	r3, [pc, #84]	@ (8012178 <prvCheckForValidListAndQueue+0x60>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d120      	bne.n	801216c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801212a:	4814      	ldr	r0, [pc, #80]	@ (801217c <prvCheckForValidListAndQueue+0x64>)
 801212c:	f7fd ff6c 	bl	8010008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012130:	4813      	ldr	r0, [pc, #76]	@ (8012180 <prvCheckForValidListAndQueue+0x68>)
 8012132:	f7fd ff69 	bl	8010008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012136:	4b13      	ldr	r3, [pc, #76]	@ (8012184 <prvCheckForValidListAndQueue+0x6c>)
 8012138:	4a10      	ldr	r2, [pc, #64]	@ (801217c <prvCheckForValidListAndQueue+0x64>)
 801213a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801213c:	4b12      	ldr	r3, [pc, #72]	@ (8012188 <prvCheckForValidListAndQueue+0x70>)
 801213e:	4a10      	ldr	r2, [pc, #64]	@ (8012180 <prvCheckForValidListAndQueue+0x68>)
 8012140:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012142:	2300      	movs	r3, #0
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	4b11      	ldr	r3, [pc, #68]	@ (801218c <prvCheckForValidListAndQueue+0x74>)
 8012148:	4a11      	ldr	r2, [pc, #68]	@ (8012190 <prvCheckForValidListAndQueue+0x78>)
 801214a:	2110      	movs	r1, #16
 801214c:	200a      	movs	r0, #10
 801214e:	f7fe f879 	bl	8010244 <xQueueGenericCreateStatic>
 8012152:	4603      	mov	r3, r0
 8012154:	4a08      	ldr	r2, [pc, #32]	@ (8012178 <prvCheckForValidListAndQueue+0x60>)
 8012156:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012158:	4b07      	ldr	r3, [pc, #28]	@ (8012178 <prvCheckForValidListAndQueue+0x60>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d005      	beq.n	801216c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012160:	4b05      	ldr	r3, [pc, #20]	@ (8012178 <prvCheckForValidListAndQueue+0x60>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	490b      	ldr	r1, [pc, #44]	@ (8012194 <prvCheckForValidListAndQueue+0x7c>)
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe fcda 	bl	8010b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801216c:	f000 f976 	bl	801245c <vPortExitCritical>
}
 8012170:	bf00      	nop
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	2400369c 	.word	0x2400369c
 801217c:	2400366c 	.word	0x2400366c
 8012180:	24003680 	.word	0x24003680
 8012184:	24003694 	.word	0x24003694
 8012188:	24003698 	.word	0x24003698
 801218c:	24003748 	.word	0x24003748
 8012190:	240036a8 	.word	0x240036a8
 8012194:	080172cc 	.word	0x080172cc

08012198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012198:	b480      	push	{r7}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	3b04      	subs	r3, #4
 80121a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80121b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3b04      	subs	r3, #4
 80121b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	f023 0201 	bic.w	r2, r3, #1
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3b04      	subs	r3, #4
 80121c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121c8:	4a0c      	ldr	r2, [pc, #48]	@ (80121fc <pxPortInitialiseStack+0x64>)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3b14      	subs	r3, #20
 80121d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3b04      	subs	r3, #4
 80121de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f06f 0202 	mvn.w	r2, #2
 80121e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	3b20      	subs	r3, #32
 80121ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121ee:	68fb      	ldr	r3, [r7, #12]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3714      	adds	r7, #20
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr
 80121fc:	08012201 	.word	0x08012201

08012200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012200:	b480      	push	{r7}
 8012202:	b085      	sub	sp, #20
 8012204:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012206:	2300      	movs	r3, #0
 8012208:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801220a:	4b13      	ldr	r3, [pc, #76]	@ (8012258 <prvTaskExitError+0x58>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012212:	d00b      	beq.n	801222c <prvTaskExitError+0x2c>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	60fb      	str	r3, [r7, #12]
}
 8012226:	bf00      	nop
 8012228:	bf00      	nop
 801222a:	e7fd      	b.n	8012228 <prvTaskExitError+0x28>
	__asm volatile
 801222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012230:	f383 8811 	msr	BASEPRI, r3
 8012234:	f3bf 8f6f 	isb	sy
 8012238:	f3bf 8f4f 	dsb	sy
 801223c:	60bb      	str	r3, [r7, #8]
}
 801223e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012240:	bf00      	nop
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d0fc      	beq.n	8012242 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012248:	bf00      	nop
 801224a:	bf00      	nop
 801224c:	3714      	adds	r7, #20
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr
 8012256:	bf00      	nop
 8012258:	2400007c 	.word	0x2400007c
 801225c:	00000000 	.word	0x00000000

08012260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012260:	4b07      	ldr	r3, [pc, #28]	@ (8012280 <pxCurrentTCBConst2>)
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	6808      	ldr	r0, [r1, #0]
 8012266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226a:	f380 8809 	msr	PSP, r0
 801226e:	f3bf 8f6f 	isb	sy
 8012272:	f04f 0000 	mov.w	r0, #0
 8012276:	f380 8811 	msr	BASEPRI, r0
 801227a:	4770      	bx	lr
 801227c:	f3af 8000 	nop.w

08012280 <pxCurrentTCBConst2>:
 8012280:	2400316c 	.word	0x2400316c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012284:	bf00      	nop
 8012286:	bf00      	nop

08012288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012288:	4808      	ldr	r0, [pc, #32]	@ (80122ac <prvPortStartFirstTask+0x24>)
 801228a:	6800      	ldr	r0, [r0, #0]
 801228c:	6800      	ldr	r0, [r0, #0]
 801228e:	f380 8808 	msr	MSP, r0
 8012292:	f04f 0000 	mov.w	r0, #0
 8012296:	f380 8814 	msr	CONTROL, r0
 801229a:	b662      	cpsie	i
 801229c:	b661      	cpsie	f
 801229e:	f3bf 8f4f 	dsb	sy
 80122a2:	f3bf 8f6f 	isb	sy
 80122a6:	df00      	svc	0
 80122a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122aa:	bf00      	nop
 80122ac:	e000ed08 	.word	0xe000ed08

080122b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b086      	sub	sp, #24
 80122b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122b6:	4b47      	ldr	r3, [pc, #284]	@ (80123d4 <xPortStartScheduler+0x124>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4a47      	ldr	r2, [pc, #284]	@ (80123d8 <xPortStartScheduler+0x128>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d10b      	bne.n	80122d8 <xPortStartScheduler+0x28>
	__asm volatile
 80122c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	60fb      	str	r3, [r7, #12]
}
 80122d2:	bf00      	nop
 80122d4:	bf00      	nop
 80122d6:	e7fd      	b.n	80122d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122d8:	4b3e      	ldr	r3, [pc, #248]	@ (80123d4 <xPortStartScheduler+0x124>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a3f      	ldr	r2, [pc, #252]	@ (80123dc <xPortStartScheduler+0x12c>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d10b      	bne.n	80122fa <xPortStartScheduler+0x4a>
	__asm volatile
 80122e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e6:	f383 8811 	msr	BASEPRI, r3
 80122ea:	f3bf 8f6f 	isb	sy
 80122ee:	f3bf 8f4f 	dsb	sy
 80122f2:	613b      	str	r3, [r7, #16]
}
 80122f4:	bf00      	nop
 80122f6:	bf00      	nop
 80122f8:	e7fd      	b.n	80122f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80122fa:	4b39      	ldr	r3, [pc, #228]	@ (80123e0 <xPortStartScheduler+0x130>)
 80122fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	b2db      	uxtb	r3, r3
 8012304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	22ff      	movs	r2, #255	@ 0xff
 801230a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	b2db      	uxtb	r3, r3
 8012312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012314:	78fb      	ldrb	r3, [r7, #3]
 8012316:	b2db      	uxtb	r3, r3
 8012318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801231c:	b2da      	uxtb	r2, r3
 801231e:	4b31      	ldr	r3, [pc, #196]	@ (80123e4 <xPortStartScheduler+0x134>)
 8012320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012322:	4b31      	ldr	r3, [pc, #196]	@ (80123e8 <xPortStartScheduler+0x138>)
 8012324:	2207      	movs	r2, #7
 8012326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012328:	e009      	b.n	801233e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801232a:	4b2f      	ldr	r3, [pc, #188]	@ (80123e8 <xPortStartScheduler+0x138>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	3b01      	subs	r3, #1
 8012330:	4a2d      	ldr	r2, [pc, #180]	@ (80123e8 <xPortStartScheduler+0x138>)
 8012332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	b2db      	uxtb	r3, r3
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	b2db      	uxtb	r3, r3
 801233c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801233e:	78fb      	ldrb	r3, [r7, #3]
 8012340:	b2db      	uxtb	r3, r3
 8012342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012346:	2b80      	cmp	r3, #128	@ 0x80
 8012348:	d0ef      	beq.n	801232a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801234a:	4b27      	ldr	r3, [pc, #156]	@ (80123e8 <xPortStartScheduler+0x138>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	f1c3 0307 	rsb	r3, r3, #7
 8012352:	2b04      	cmp	r3, #4
 8012354:	d00b      	beq.n	801236e <xPortStartScheduler+0xbe>
	__asm volatile
 8012356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801235a:	f383 8811 	msr	BASEPRI, r3
 801235e:	f3bf 8f6f 	isb	sy
 8012362:	f3bf 8f4f 	dsb	sy
 8012366:	60bb      	str	r3, [r7, #8]
}
 8012368:	bf00      	nop
 801236a:	bf00      	nop
 801236c:	e7fd      	b.n	801236a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801236e:	4b1e      	ldr	r3, [pc, #120]	@ (80123e8 <xPortStartScheduler+0x138>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	021b      	lsls	r3, r3, #8
 8012374:	4a1c      	ldr	r2, [pc, #112]	@ (80123e8 <xPortStartScheduler+0x138>)
 8012376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012378:	4b1b      	ldr	r3, [pc, #108]	@ (80123e8 <xPortStartScheduler+0x138>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012380:	4a19      	ldr	r2, [pc, #100]	@ (80123e8 <xPortStartScheduler+0x138>)
 8012382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	b2da      	uxtb	r2, r3
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801238c:	4b17      	ldr	r3, [pc, #92]	@ (80123ec <xPortStartScheduler+0x13c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a16      	ldr	r2, [pc, #88]	@ (80123ec <xPortStartScheduler+0x13c>)
 8012392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012398:	4b14      	ldr	r3, [pc, #80]	@ (80123ec <xPortStartScheduler+0x13c>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	4a13      	ldr	r2, [pc, #76]	@ (80123ec <xPortStartScheduler+0x13c>)
 801239e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80123a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80123a4:	f000 f8da 	bl	801255c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80123a8:	4b11      	ldr	r3, [pc, #68]	@ (80123f0 <xPortStartScheduler+0x140>)
 80123aa:	2200      	movs	r2, #0
 80123ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80123ae:	f000 f8f9 	bl	80125a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123b2:	4b10      	ldr	r3, [pc, #64]	@ (80123f4 <xPortStartScheduler+0x144>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a0f      	ldr	r2, [pc, #60]	@ (80123f4 <xPortStartScheduler+0x144>)
 80123b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80123bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123be:	f7ff ff63 	bl	8012288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123c2:	f7ff f82f 	bl	8011424 <vTaskSwitchContext>
	prvTaskExitError();
 80123c6:	f7ff ff1b 	bl	8012200 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3718      	adds	r7, #24
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	e000ed00 	.word	0xe000ed00
 80123d8:	410fc271 	.word	0x410fc271
 80123dc:	410fc270 	.word	0x410fc270
 80123e0:	e000e400 	.word	0xe000e400
 80123e4:	24003798 	.word	0x24003798
 80123e8:	2400379c 	.word	0x2400379c
 80123ec:	e000ed20 	.word	0xe000ed20
 80123f0:	2400007c 	.word	0x2400007c
 80123f4:	e000ef34 	.word	0xe000ef34

080123f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
	__asm volatile
 80123fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012402:	f383 8811 	msr	BASEPRI, r3
 8012406:	f3bf 8f6f 	isb	sy
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	607b      	str	r3, [r7, #4]
}
 8012410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012412:	4b10      	ldr	r3, [pc, #64]	@ (8012454 <vPortEnterCritical+0x5c>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3301      	adds	r3, #1
 8012418:	4a0e      	ldr	r2, [pc, #56]	@ (8012454 <vPortEnterCritical+0x5c>)
 801241a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801241c:	4b0d      	ldr	r3, [pc, #52]	@ (8012454 <vPortEnterCritical+0x5c>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b01      	cmp	r3, #1
 8012422:	d110      	bne.n	8012446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012424:	4b0c      	ldr	r3, [pc, #48]	@ (8012458 <vPortEnterCritical+0x60>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	b2db      	uxtb	r3, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00b      	beq.n	8012446 <vPortEnterCritical+0x4e>
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	603b      	str	r3, [r7, #0]
}
 8012440:	bf00      	nop
 8012442:	bf00      	nop
 8012444:	e7fd      	b.n	8012442 <vPortEnterCritical+0x4a>
	}
}
 8012446:	bf00      	nop
 8012448:	370c      	adds	r7, #12
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	2400007c 	.word	0x2400007c
 8012458:	e000ed04 	.word	0xe000ed04

0801245c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801245c:	b480      	push	{r7}
 801245e:	b083      	sub	sp, #12
 8012460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012462:	4b12      	ldr	r3, [pc, #72]	@ (80124ac <vPortExitCritical+0x50>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10b      	bne.n	8012482 <vPortExitCritical+0x26>
	__asm volatile
 801246a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246e:	f383 8811 	msr	BASEPRI, r3
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	607b      	str	r3, [r7, #4]
}
 801247c:	bf00      	nop
 801247e:	bf00      	nop
 8012480:	e7fd      	b.n	801247e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012482:	4b0a      	ldr	r3, [pc, #40]	@ (80124ac <vPortExitCritical+0x50>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	3b01      	subs	r3, #1
 8012488:	4a08      	ldr	r2, [pc, #32]	@ (80124ac <vPortExitCritical+0x50>)
 801248a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801248c:	4b07      	ldr	r3, [pc, #28]	@ (80124ac <vPortExitCritical+0x50>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d105      	bne.n	80124a0 <vPortExitCritical+0x44>
 8012494:	2300      	movs	r3, #0
 8012496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	f383 8811 	msr	BASEPRI, r3
}
 801249e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr
 80124ac:	2400007c 	.word	0x2400007c

080124b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124b0:	f3ef 8009 	mrs	r0, PSP
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	4b15      	ldr	r3, [pc, #84]	@ (8012510 <pxCurrentTCBConst>)
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	f01e 0f10 	tst.w	lr, #16
 80124c0:	bf08      	it	eq
 80124c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ca:	6010      	str	r0, [r2, #0]
 80124cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80124d4:	f380 8811 	msr	BASEPRI, r0
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	f7fe ffa0 	bl	8011424 <vTaskSwitchContext>
 80124e4:	f04f 0000 	mov.w	r0, #0
 80124e8:	f380 8811 	msr	BASEPRI, r0
 80124ec:	bc09      	pop	{r0, r3}
 80124ee:	6819      	ldr	r1, [r3, #0]
 80124f0:	6808      	ldr	r0, [r1, #0]
 80124f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f6:	f01e 0f10 	tst.w	lr, #16
 80124fa:	bf08      	it	eq
 80124fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012500:	f380 8809 	msr	PSP, r0
 8012504:	f3bf 8f6f 	isb	sy
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop
 801250c:	f3af 8000 	nop.w

08012510 <pxCurrentTCBConst>:
 8012510:	2400316c 	.word	0x2400316c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012514:	bf00      	nop
 8012516:	bf00      	nop

08012518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
	__asm volatile
 801251e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012522:	f383 8811 	msr	BASEPRI, r3
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	607b      	str	r3, [r7, #4]
}
 8012530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012532:	f7fe febd 	bl	80112b0 <xTaskIncrementTick>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d003      	beq.n	8012544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801253c:	4b06      	ldr	r3, [pc, #24]	@ (8012558 <xPortSysTickHandler+0x40>)
 801253e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012542:	601a      	str	r2, [r3, #0]
 8012544:	2300      	movs	r3, #0
 8012546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	f383 8811 	msr	BASEPRI, r3
}
 801254e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012550:	bf00      	nop
 8012552:	3708      	adds	r7, #8
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	e000ed04 	.word	0xe000ed04

0801255c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801255c:	b480      	push	{r7}
 801255e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012560:	4b0b      	ldr	r3, [pc, #44]	@ (8012590 <vPortSetupTimerInterrupt+0x34>)
 8012562:	2200      	movs	r2, #0
 8012564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012566:	4b0b      	ldr	r3, [pc, #44]	@ (8012594 <vPortSetupTimerInterrupt+0x38>)
 8012568:	2200      	movs	r2, #0
 801256a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801256c:	4b0a      	ldr	r3, [pc, #40]	@ (8012598 <vPortSetupTimerInterrupt+0x3c>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a0a      	ldr	r2, [pc, #40]	@ (801259c <vPortSetupTimerInterrupt+0x40>)
 8012572:	fba2 2303 	umull	r2, r3, r2, r3
 8012576:	095b      	lsrs	r3, r3, #5
 8012578:	4a09      	ldr	r2, [pc, #36]	@ (80125a0 <vPortSetupTimerInterrupt+0x44>)
 801257a:	3b01      	subs	r3, #1
 801257c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801257e:	4b04      	ldr	r3, [pc, #16]	@ (8012590 <vPortSetupTimerInterrupt+0x34>)
 8012580:	2207      	movs	r2, #7
 8012582:	601a      	str	r2, [r3, #0]
}
 8012584:	bf00      	nop
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	e000e010 	.word	0xe000e010
 8012594:	e000e018 	.word	0xe000e018
 8012598:	24000054 	.word	0x24000054
 801259c:	10624dd3 	.word	0x10624dd3
 80125a0:	e000e014 	.word	0xe000e014

080125a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80125a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80125b4 <vPortEnableVFP+0x10>
 80125a8:	6801      	ldr	r1, [r0, #0]
 80125aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80125ae:	6001      	str	r1, [r0, #0]
 80125b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80125b2:	bf00      	nop
 80125b4:	e000ed88 	.word	0xe000ed88

080125b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125be:	f3ef 8305 	mrs	r3, IPSR
 80125c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b0f      	cmp	r3, #15
 80125c8:	d915      	bls.n	80125f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125ca:	4a18      	ldr	r2, [pc, #96]	@ (801262c <vPortValidateInterruptPriority+0x74>)
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	4413      	add	r3, r2
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125d4:	4b16      	ldr	r3, [pc, #88]	@ (8012630 <vPortValidateInterruptPriority+0x78>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	7afa      	ldrb	r2, [r7, #11]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d20b      	bcs.n	80125f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80125de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125e2:	f383 8811 	msr	BASEPRI, r3
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	f3bf 8f4f 	dsb	sy
 80125ee:	607b      	str	r3, [r7, #4]
}
 80125f0:	bf00      	nop
 80125f2:	bf00      	nop
 80125f4:	e7fd      	b.n	80125f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012634 <vPortValidateInterruptPriority+0x7c>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80125fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012638 <vPortValidateInterruptPriority+0x80>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	429a      	cmp	r2, r3
 8012604:	d90b      	bls.n	801261e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801260a:	f383 8811 	msr	BASEPRI, r3
 801260e:	f3bf 8f6f 	isb	sy
 8012612:	f3bf 8f4f 	dsb	sy
 8012616:	603b      	str	r3, [r7, #0]
}
 8012618:	bf00      	nop
 801261a:	bf00      	nop
 801261c:	e7fd      	b.n	801261a <vPortValidateInterruptPriority+0x62>
	}
 801261e:	bf00      	nop
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	e000e3f0 	.word	0xe000e3f0
 8012630:	24003798 	.word	0x24003798
 8012634:	e000ed0c 	.word	0xe000ed0c
 8012638:	2400379c 	.word	0x2400379c

0801263c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	@ 0x28
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012644:	2300      	movs	r3, #0
 8012646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012648:	f7fe fd76 	bl	8011138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801264c:	4b5c      	ldr	r3, [pc, #368]	@ (80127c0 <pvPortMalloc+0x184>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d101      	bne.n	8012658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012654:	f000 f924 	bl	80128a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012658:	4b5a      	ldr	r3, [pc, #360]	@ (80127c4 <pvPortMalloc+0x188>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4013      	ands	r3, r2
 8012660:	2b00      	cmp	r3, #0
 8012662:	f040 8095 	bne.w	8012790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d01e      	beq.n	80126aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801266c:	2208      	movs	r2, #8
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4413      	add	r3, r2
 8012672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f003 0307 	and.w	r3, r3, #7
 801267a:	2b00      	cmp	r3, #0
 801267c:	d015      	beq.n	80126aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f023 0307 	bic.w	r3, r3, #7
 8012684:	3308      	adds	r3, #8
 8012686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f003 0307 	and.w	r3, r3, #7
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00b      	beq.n	80126aa <pvPortMalloc+0x6e>
	__asm volatile
 8012692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012696:	f383 8811 	msr	BASEPRI, r3
 801269a:	f3bf 8f6f 	isb	sy
 801269e:	f3bf 8f4f 	dsb	sy
 80126a2:	617b      	str	r3, [r7, #20]
}
 80126a4:	bf00      	nop
 80126a6:	bf00      	nop
 80126a8:	e7fd      	b.n	80126a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d06f      	beq.n	8012790 <pvPortMalloc+0x154>
 80126b0:	4b45      	ldr	r3, [pc, #276]	@ (80127c8 <pvPortMalloc+0x18c>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d86a      	bhi.n	8012790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126ba:	4b44      	ldr	r3, [pc, #272]	@ (80127cc <pvPortMalloc+0x190>)
 80126bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126be:	4b43      	ldr	r3, [pc, #268]	@ (80127cc <pvPortMalloc+0x190>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126c4:	e004      	b.n	80126d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80126c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d903      	bls.n	80126e2 <pvPortMalloc+0xa6>
 80126da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d1f1      	bne.n	80126c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126e2:	4b37      	ldr	r3, [pc, #220]	@ (80127c0 <pvPortMalloc+0x184>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d051      	beq.n	8012790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2208      	movs	r2, #8
 80126f2:	4413      	add	r3, r2
 80126f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012700:	685a      	ldr	r2, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	1ad2      	subs	r2, r2, r3
 8012706:	2308      	movs	r3, #8
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	429a      	cmp	r2, r3
 801270c:	d920      	bls.n	8012750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801270e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4413      	add	r3, r2
 8012714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	f003 0307 	and.w	r3, r3, #7
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00b      	beq.n	8012738 <pvPortMalloc+0xfc>
	__asm volatile
 8012720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	613b      	str	r3, [r7, #16]
}
 8012732:	bf00      	nop
 8012734:	bf00      	nop
 8012736:	e7fd      	b.n	8012734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273a:	685a      	ldr	r2, [r3, #4]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	1ad2      	subs	r2, r2, r3
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801274a:	69b8      	ldr	r0, [r7, #24]
 801274c:	f000 f90a 	bl	8012964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012750:	4b1d      	ldr	r3, [pc, #116]	@ (80127c8 <pvPortMalloc+0x18c>)
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	4a1b      	ldr	r2, [pc, #108]	@ (80127c8 <pvPortMalloc+0x18c>)
 801275c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801275e:	4b1a      	ldr	r3, [pc, #104]	@ (80127c8 <pvPortMalloc+0x18c>)
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	4b1b      	ldr	r3, [pc, #108]	@ (80127d0 <pvPortMalloc+0x194>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d203      	bcs.n	8012772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801276a:	4b17      	ldr	r3, [pc, #92]	@ (80127c8 <pvPortMalloc+0x18c>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	4a18      	ldr	r2, [pc, #96]	@ (80127d0 <pvPortMalloc+0x194>)
 8012770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	4b13      	ldr	r3, [pc, #76]	@ (80127c4 <pvPortMalloc+0x188>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	431a      	orrs	r2, r3
 801277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012786:	4b13      	ldr	r3, [pc, #76]	@ (80127d4 <pvPortMalloc+0x198>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	3301      	adds	r3, #1
 801278c:	4a11      	ldr	r2, [pc, #68]	@ (80127d4 <pvPortMalloc+0x198>)
 801278e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012790:	f7fe fce0 	bl	8011154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	f003 0307 	and.w	r3, r3, #7
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00b      	beq.n	80127b6 <pvPortMalloc+0x17a>
	__asm volatile
 801279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	60fb      	str	r3, [r7, #12]
}
 80127b0:	bf00      	nop
 80127b2:	bf00      	nop
 80127b4:	e7fd      	b.n	80127b2 <pvPortMalloc+0x176>
	return pvReturn;
 80127b6:	69fb      	ldr	r3, [r7, #28]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3728      	adds	r7, #40	@ 0x28
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}
 80127c0:	240073a8 	.word	0x240073a8
 80127c4:	240073bc 	.word	0x240073bc
 80127c8:	240073ac 	.word	0x240073ac
 80127cc:	240073a0 	.word	0x240073a0
 80127d0:	240073b0 	.word	0x240073b0
 80127d4:	240073b4 	.word	0x240073b4

080127d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b086      	sub	sp, #24
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d04f      	beq.n	801288a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127ea:	2308      	movs	r3, #8
 80127ec:	425b      	negs	r3, r3
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	4413      	add	r3, r2
 80127f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	685a      	ldr	r2, [r3, #4]
 80127fc:	4b25      	ldr	r3, [pc, #148]	@ (8012894 <vPortFree+0xbc>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4013      	ands	r3, r2
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10b      	bne.n	801281e <vPortFree+0x46>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	60fb      	str	r3, [r7, #12]
}
 8012818:	bf00      	nop
 801281a:	bf00      	nop
 801281c:	e7fd      	b.n	801281a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d00b      	beq.n	801283e <vPortFree+0x66>
	__asm volatile
 8012826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801282a:	f383 8811 	msr	BASEPRI, r3
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f3bf 8f4f 	dsb	sy
 8012836:	60bb      	str	r3, [r7, #8]
}
 8012838:	bf00      	nop
 801283a:	bf00      	nop
 801283c:	e7fd      	b.n	801283a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	685a      	ldr	r2, [r3, #4]
 8012842:	4b14      	ldr	r3, [pc, #80]	@ (8012894 <vPortFree+0xbc>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4013      	ands	r3, r2
 8012848:	2b00      	cmp	r3, #0
 801284a:	d01e      	beq.n	801288a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d11a      	bne.n	801288a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	685a      	ldr	r2, [r3, #4]
 8012858:	4b0e      	ldr	r3, [pc, #56]	@ (8012894 <vPortFree+0xbc>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	43db      	mvns	r3, r3
 801285e:	401a      	ands	r2, r3
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012864:	f7fe fc68 	bl	8011138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	685a      	ldr	r2, [r3, #4]
 801286c:	4b0a      	ldr	r3, [pc, #40]	@ (8012898 <vPortFree+0xc0>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	4413      	add	r3, r2
 8012872:	4a09      	ldr	r2, [pc, #36]	@ (8012898 <vPortFree+0xc0>)
 8012874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012876:	6938      	ldr	r0, [r7, #16]
 8012878:	f000 f874 	bl	8012964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801287c:	4b07      	ldr	r3, [pc, #28]	@ (801289c <vPortFree+0xc4>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	3301      	adds	r3, #1
 8012882:	4a06      	ldr	r2, [pc, #24]	@ (801289c <vPortFree+0xc4>)
 8012884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012886:	f7fe fc65 	bl	8011154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801288a:	bf00      	nop
 801288c:	3718      	adds	r7, #24
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	240073bc 	.word	0x240073bc
 8012898:	240073ac 	.word	0x240073ac
 801289c:	240073b8 	.word	0x240073b8

080128a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80128a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80128aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80128ac:	4b27      	ldr	r3, [pc, #156]	@ (801294c <prvHeapInit+0xac>)
 80128ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f003 0307 	and.w	r3, r3, #7
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00c      	beq.n	80128d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	3307      	adds	r3, #7
 80128be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f023 0307 	bic.w	r3, r3, #7
 80128c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80128c8:	68ba      	ldr	r2, [r7, #8]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	4a1f      	ldr	r2, [pc, #124]	@ (801294c <prvHeapInit+0xac>)
 80128d0:	4413      	add	r3, r2
 80128d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128d8:	4a1d      	ldr	r2, [pc, #116]	@ (8012950 <prvHeapInit+0xb0>)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128de:	4b1c      	ldr	r3, [pc, #112]	@ (8012950 <prvHeapInit+0xb0>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	68ba      	ldr	r2, [r7, #8]
 80128e8:	4413      	add	r3, r2
 80128ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128ec:	2208      	movs	r2, #8
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	1a9b      	subs	r3, r3, r2
 80128f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f023 0307 	bic.w	r3, r3, #7
 80128fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	4a15      	ldr	r2, [pc, #84]	@ (8012954 <prvHeapInit+0xb4>)
 8012900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012902:	4b14      	ldr	r3, [pc, #80]	@ (8012954 <prvHeapInit+0xb4>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2200      	movs	r2, #0
 8012908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801290a:	4b12      	ldr	r3, [pc, #72]	@ (8012954 <prvHeapInit+0xb4>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2200      	movs	r2, #0
 8012910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	1ad2      	subs	r2, r2, r3
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012920:	4b0c      	ldr	r3, [pc, #48]	@ (8012954 <prvHeapInit+0xb4>)
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	4a0a      	ldr	r2, [pc, #40]	@ (8012958 <prvHeapInit+0xb8>)
 801292e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	4a09      	ldr	r2, [pc, #36]	@ (801295c <prvHeapInit+0xbc>)
 8012936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012938:	4b09      	ldr	r3, [pc, #36]	@ (8012960 <prvHeapInit+0xc0>)
 801293a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801293e:	601a      	str	r2, [r3, #0]
}
 8012940:	bf00      	nop
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr
 801294c:	240037a0 	.word	0x240037a0
 8012950:	240073a0 	.word	0x240073a0
 8012954:	240073a8 	.word	0x240073a8
 8012958:	240073b0 	.word	0x240073b0
 801295c:	240073ac 	.word	0x240073ac
 8012960:	240073bc 	.word	0x240073bc

08012964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801296c:	4b28      	ldr	r3, [pc, #160]	@ (8012a10 <prvInsertBlockIntoFreeList+0xac>)
 801296e:	60fb      	str	r3, [r7, #12]
 8012970:	e002      	b.n	8012978 <prvInsertBlockIntoFreeList+0x14>
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	60fb      	str	r3, [r7, #12]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	687a      	ldr	r2, [r7, #4]
 801297e:	429a      	cmp	r2, r3
 8012980:	d8f7      	bhi.n	8012972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	68ba      	ldr	r2, [r7, #8]
 801298c:	4413      	add	r3, r2
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	429a      	cmp	r2, r3
 8012992:	d108      	bne.n	80129a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	685a      	ldr	r2, [r3, #4]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	441a      	add	r2, r3
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	68ba      	ldr	r2, [r7, #8]
 80129b0:	441a      	add	r2, r3
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d118      	bne.n	80129ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	4b15      	ldr	r3, [pc, #84]	@ (8012a14 <prvInsertBlockIntoFreeList+0xb0>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d00d      	beq.n	80129e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	685a      	ldr	r2, [r3, #4]
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	441a      	add	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	601a      	str	r2, [r3, #0]
 80129e0:	e008      	b.n	80129f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129e2:	4b0c      	ldr	r3, [pc, #48]	@ (8012a14 <prvInsertBlockIntoFreeList+0xb0>)
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	e003      	b.n	80129f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129f4:	68fa      	ldr	r2, [r7, #12]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d002      	beq.n	8012a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a02:	bf00      	nop
 8012a04:	3714      	adds	r7, #20
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	240073a0 	.word	0x240073a0
 8012a14:	240073a8 	.word	0x240073a8

08012a18 <arm_mat_trans_f32>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	8802      	ldrh	r2, [r0, #0]
 8012a1e:	b085      	sub	sp, #20
 8012a20:	884b      	ldrh	r3, [r1, #2]
 8012a22:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012a26:	4293      	cmp	r3, r2
 8012a28:	8844      	ldrh	r4, [r0, #2]
 8012a2a:	6848      	ldr	r0, [r1, #4]
 8012a2c:	d14e      	bne.n	8012acc <arm_mat_trans_f32+0xb4>
 8012a2e:	f8b1 8000 	ldrh.w	r8, [r1]
 8012a32:	45a0      	cmp	r8, r4
 8012a34:	d14a      	bne.n	8012acc <arm_mat_trans_f32+0xb4>
 8012a36:	ea4f 0998 	mov.w	r9, r8, lsr #2
 8012a3a:	f008 0803 	and.w	r8, r8, #3
 8012a3e:	009c      	lsls	r4, r3, #2
 8012a40:	4684      	mov	ip, r0
 8012a42:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8012a46:	fb09 f204 	mul.w	r2, r9, r4
 8012a4a:	011d      	lsls	r5, r3, #4
 8012a4c:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8012a50:	eb00 0a04 	add.w	sl, r0, r4
 8012a54:	0092      	lsls	r2, r2, #2
 8012a56:	9103      	str	r1, [sp, #12]
 8012a58:	00db      	lsls	r3, r3, #3
 8012a5a:	9202      	str	r2, [sp, #8]
 8012a5c:	9301      	str	r3, [sp, #4]
 8012a5e:	4663      	mov	r3, ip
 8012a60:	f1b9 0f00 	cmp.w	r9, #0
 8012a64:	d01d      	beq.n	8012aa2 <arm_mat_trans_f32+0x8a>
 8012a66:	9901      	ldr	r1, [sp, #4]
 8012a68:	f10e 0210 	add.w	r2, lr, #16
 8012a6c:	4648      	mov	r0, r9
 8012a6e:	4461      	add	r1, ip
 8012a70:	ed52 7a04 	vldr	s15, [r2, #-16]
 8012a74:	191f      	adds	r7, r3, r4
 8012a76:	190e      	adds	r6, r1, r4
 8012a78:	3801      	subs	r0, #1
 8012a7a:	edc3 7a00 	vstr	s15, [r3]
 8012a7e:	f102 0210 	add.w	r2, r2, #16
 8012a82:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 8012a86:	442b      	add	r3, r5
 8012a88:	edc7 7a00 	vstr	s15, [r7]
 8012a8c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8012a90:	600f      	str	r7, [r1, #0]
 8012a92:	4429      	add	r1, r5
 8012a94:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8012a98:	6037      	str	r7, [r6, #0]
 8012a9a:	d1e9      	bne.n	8012a70 <arm_mat_trans_f32+0x58>
 8012a9c:	9b02      	ldr	r3, [sp, #8]
 8012a9e:	44de      	add	lr, fp
 8012aa0:	4463      	add	r3, ip
 8012aa2:	f1b8 0f00 	cmp.w	r8, #0
 8012aa6:	d009      	beq.n	8012abc <arm_mat_trans_f32+0xa4>
 8012aa8:	4642      	mov	r2, r8
 8012aaa:	4671      	mov	r1, lr
 8012aac:	f851 0b04 	ldr.w	r0, [r1], #4
 8012ab0:	3a01      	subs	r2, #1
 8012ab2:	6018      	str	r0, [r3, #0]
 8012ab4:	4423      	add	r3, r4
 8012ab6:	d1f9      	bne.n	8012aac <arm_mat_trans_f32+0x94>
 8012ab8:	9b03      	ldr	r3, [sp, #12]
 8012aba:	449e      	add	lr, r3
 8012abc:	f10c 0c04 	add.w	ip, ip, #4
 8012ac0:	45d4      	cmp	ip, sl
 8012ac2:	d1cc      	bne.n	8012a5e <arm_mat_trans_f32+0x46>
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	b005      	add	sp, #20
 8012ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012acc:	f06f 0002 	mvn.w	r0, #2
 8012ad0:	e7f9      	b.n	8012ac6 <arm_mat_trans_f32+0xae>
 8012ad2:	bf00      	nop

08012ad4 <arm_mat_mult_f32>:
 8012ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad8:	8845      	ldrh	r5, [r0, #2]
 8012ada:	b08b      	sub	sp, #44	@ 0x2c
 8012adc:	880b      	ldrh	r3, [r1, #0]
 8012ade:	8806      	ldrh	r6, [r0, #0]
 8012ae0:	42ab      	cmp	r3, r5
 8012ae2:	9109      	str	r1, [sp, #36]	@ 0x24
 8012ae4:	6847      	ldr	r7, [r0, #4]
 8012ae6:	9604      	str	r6, [sp, #16]
 8012ae8:	6848      	ldr	r0, [r1, #4]
 8012aea:	6854      	ldr	r4, [r2, #4]
 8012aec:	8849      	ldrh	r1, [r1, #2]
 8012aee:	f040 808d 	bne.w	8012c0c <arm_mat_mult_f32+0x138>
 8012af2:	8815      	ldrh	r5, [r2, #0]
 8012af4:	42b5      	cmp	r5, r6
 8012af6:	f040 8089 	bne.w	8012c0c <arm_mat_mult_f32+0x138>
 8012afa:	8852      	ldrh	r2, [r2, #2]
 8012afc:	428a      	cmp	r2, r1
 8012afe:	f040 8085 	bne.w	8012c0c <arm_mat_mult_f32+0x138>
 8012b02:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8012b06:	1d01      	adds	r1, r0, #4
 8012b08:	0116      	lsls	r6, r2, #4
 8012b0a:	f003 0903 	and.w	r9, r3, #3
 8012b0e:	9108      	str	r1, [sp, #32]
 8012b10:	0095      	lsls	r5, r2, #2
 8012b12:	fb06 f108 	mul.w	r1, r6, r8
 8012b16:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	f107 0b10 	add.w	fp, r7, #16
 8012b20:	9103      	str	r1, [sp, #12]
 8012b22:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8012b26:	00d2      	lsls	r2, r2, #3
 8012b28:	eb04 0a05 	add.w	sl, r4, r5
 8012b2c:	9101      	str	r1, [sp, #4]
 8012b2e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8012b32:	9202      	str	r2, [sp, #8]
 8012b34:	9107      	str	r1, [sp, #28]
 8012b36:	9306      	str	r3, [sp, #24]
 8012b38:	f1ab 0310 	sub.w	r3, fp, #16
 8012b3c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012b40:	9305      	str	r3, [sp, #20]
 8012b42:	9b07      	ldr	r3, [sp, #28]
 8012b44:	eb03 0c0a 	add.w	ip, r3, sl
 8012b48:	f1b8 0f00 	cmp.w	r8, #0
 8012b4c:	d056      	beq.n	8012bfc <arm_mat_mult_f32+0x128>
 8012b4e:	9b02      	ldr	r3, [sp, #8]
 8012b50:	4644      	mov	r4, r8
 8012b52:	4602      	mov	r2, r0
 8012b54:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8012c18 <arm_mat_mult_f32+0x144>
 8012b58:	18c1      	adds	r1, r0, r3
 8012b5a:	465b      	mov	r3, fp
 8012b5c:	edd2 6a00 	vldr	s13, [r2]
 8012b60:	1957      	adds	r7, r2, r5
 8012b62:	ed13 7a04 	vldr	s14, [r3, #-16]
 8012b66:	3c01      	subs	r4, #1
 8012b68:	ed53 5a03 	vldr	s11, [r3, #-12]
 8012b6c:	4432      	add	r2, r6
 8012b6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012b72:	ed97 6a00 	vldr	s12, [r7]
 8012b76:	ed53 6a02 	vldr	s13, [r3, #-8]
 8012b7a:	eb01 0705 	add.w	r7, r1, r5
 8012b7e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012b82:	ed91 5a00 	vldr	s10, [r1]
 8012b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b8a:	edd7 5a00 	vldr	s11, [r7]
 8012b8e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8012b92:	ed53 6a01 	vldr	s13, [r3, #-4]
 8012b96:	4431      	add	r1, r6
 8012b98:	f103 0310 	add.w	r3, r3, #16
 8012b9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012ba0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bac:	d1d6      	bne.n	8012b5c <arm_mat_mult_f32+0x88>
 8012bae:	9b03      	ldr	r3, [sp, #12]
 8012bb0:	9a01      	ldr	r2, [sp, #4]
 8012bb2:	4418      	add	r0, r3
 8012bb4:	f1b9 0f00 	cmp.w	r9, #0
 8012bb8:	d00b      	beq.n	8012bd2 <arm_mat_mult_f32+0xfe>
 8012bba:	464b      	mov	r3, r9
 8012bbc:	edd0 6a00 	vldr	s13, [r0]
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	ecb2 7a01 	vldmia	r2!, {s14}
 8012bc6:	4428      	add	r0, r5
 8012bc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012bd0:	d1f4      	bne.n	8012bbc <arm_mat_mult_f32+0xe8>
 8012bd2:	ecec 7a01 	vstmia	ip!, {s15}
 8012bd6:	45d4      	cmp	ip, sl
 8012bd8:	4670      	mov	r0, lr
 8012bda:	f10e 0e04 	add.w	lr, lr, #4
 8012bde:	d1b3      	bne.n	8012b48 <arm_mat_mult_f32+0x74>
 8012be0:	9a01      	ldr	r2, [sp, #4]
 8012be2:	44aa      	add	sl, r5
 8012be4:	9b06      	ldr	r3, [sp, #24]
 8012be6:	4611      	mov	r1, r2
 8012be8:	449b      	add	fp, r3
 8012bea:	4419      	add	r1, r3
 8012bec:	9b04      	ldr	r3, [sp, #16]
 8012bee:	3b01      	subs	r3, #1
 8012bf0:	9101      	str	r1, [sp, #4]
 8012bf2:	9304      	str	r3, [sp, #16]
 8012bf4:	d006      	beq.n	8012c04 <arm_mat_mult_f32+0x130>
 8012bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bf8:	6858      	ldr	r0, [r3, #4]
 8012bfa:	e79d      	b.n	8012b38 <arm_mat_mult_f32+0x64>
 8012bfc:	9a05      	ldr	r2, [sp, #20]
 8012bfe:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8012c18 <arm_mat_mult_f32+0x144>
 8012c02:	e7d7      	b.n	8012bb4 <arm_mat_mult_f32+0xe0>
 8012c04:	4618      	mov	r0, r3
 8012c06:	b00b      	add	sp, #44	@ 0x2c
 8012c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0c:	f06f 0002 	mvn.w	r0, #2
 8012c10:	b00b      	add	sp, #44	@ 0x2c
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c16:	bf00      	nop
 8012c18:	00000000 	.word	0x00000000

08012c1c <arm_mat_inverse_f32>:
 8012c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c20:	8843      	ldrh	r3, [r0, #2]
 8012c22:	b087      	sub	sp, #28
 8012c24:	8804      	ldrh	r4, [r0, #0]
 8012c26:	684d      	ldr	r5, [r1, #4]
 8012c28:	429c      	cmp	r4, r3
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012c30:	9503      	str	r5, [sp, #12]
 8012c32:	f040 80e2 	bne.w	8012dfa <arm_mat_inverse_f32+0x1de>
 8012c36:	880b      	ldrh	r3, [r1, #0]
 8012c38:	884a      	ldrh	r2, [r1, #2]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	f040 80dd 	bne.w	8012dfa <arm_mat_inverse_f32+0x1de>
 8012c40:	429c      	cmp	r4, r3
 8012c42:	f040 80da 	bne.w	8012dfa <arm_mat_inverse_f32+0x1de>
 8012c46:	9005      	str	r0, [sp, #20]
 8012c48:	b1fc      	cbz	r4, 8012c8a <arm_mat_inverse_f32+0x6e>
 8012c4a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8012c4e:	1e66      	subs	r6, r4, #1
 8012c50:	f845 bb04 	str.w	fp, [r5], #4
 8012c54:	d019      	beq.n	8012c8a <arm_mat_inverse_f32+0x6e>
 8012c56:	2701      	movs	r7, #1
 8012c58:	00b2      	lsls	r2, r6, #2
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8012c60:	2100      	movs	r1, #0
 8012c62:	eb05 0a02 	add.w	sl, r5, r2
 8012c66:	f001 fc2c 	bl	80144c2 <memset>
 8012c6a:	4642      	mov	r2, r8
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	eb0a 0508 	add.w	r5, sl, r8
 8012c72:	4650      	mov	r0, sl
 8012c74:	2f00      	cmp	r7, #0
 8012c76:	f000 80c5 	beq.w	8012e04 <arm_mat_inverse_f32+0x1e8>
 8012c7a:	f001 fc22 	bl	80144c2 <memset>
 8012c7e:	3e01      	subs	r6, #1
 8012c80:	f107 0701 	add.w	r7, r7, #1
 8012c84:	f845 bb04 	str.w	fp, [r5], #4
 8012c88:	d1e6      	bne.n	8012c58 <arm_mat_inverse_f32+0x3c>
 8012c8a:	9b01      	ldr	r3, [sp, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 80af 	beq.w	8012df0 <arm_mat_inverse_f32+0x1d4>
 8012c92:	009d      	lsls	r5, r3, #2
 8012c94:	46cc      	mov	ip, r9
 8012c96:	469e      	mov	lr, r3
 8012c98:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012c9c:	eb0c 0305 	add.w	r3, ip, r5
 8012ca0:	462f      	mov	r7, r5
 8012ca2:	2600      	movs	r6, #0
 8012ca4:	9302      	str	r3, [sp, #8]
 8012ca6:	1d2b      	adds	r3, r5, #4
 8012ca8:	9304      	str	r3, [sp, #16]
 8012caa:	9b02      	ldr	r3, [sp, #8]
 8012cac:	42b4      	cmp	r4, r6
 8012cae:	eddc 6a00 	vldr	s13, [ip]
 8012cb2:	eba3 0b07 	sub.w	fp, r3, r7
 8012cb6:	f000 809b 	beq.w	8012df0 <arm_mat_inverse_f32+0x1d4>
 8012cba:	4632      	mov	r2, r6
 8012cbc:	4663      	mov	r3, ip
 8012cbe:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012e14 <arm_mat_inverse_f32+0x1f8>
 8012cc2:	e009      	b.n	8012cd8 <arm_mat_inverse_f32+0xbc>
 8012cc4:	eef4 7a47 	vcmp.f32	s15, s14
 8012cc8:	3201      	adds	r2, #1
 8012cca:	442b      	add	r3, r5
 8012ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd0:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8012cd4:	42a2      	cmp	r2, r4
 8012cd6:	d012      	beq.n	8012cfe <arm_mat_inverse_f32+0xe2>
 8012cd8:	edd3 7a00 	vldr	s15, [r3]
 8012cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ce0:	eeb1 6a67 	vneg.f32	s12, s15
 8012ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce8:	dcec      	bgt.n	8012cc4 <arm_mat_inverse_f32+0xa8>
 8012cea:	eeb4 6a47 	vcmp.f32	s12, s14
 8012cee:	3201      	adds	r2, #1
 8012cf0:	442b      	add	r3, r5
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	fe36 7a07 	vselgt.f32	s14, s12, s14
 8012cfa:	42a2      	cmp	r2, r4
 8012cfc:	d1ec      	bne.n	8012cd8 <arm_mat_inverse_f32+0xbc>
 8012cfe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d06:	d073      	beq.n	8012df0 <arm_mat_inverse_f32+0x1d4>
 8012d08:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d10:	d06e      	beq.n	8012df0 <arm_mat_inverse_f32+0x1d4>
 8012d12:	4672      	mov	r2, lr
 8012d14:	4663      	mov	r3, ip
 8012d16:	ed93 7a00 	vldr	s14, [r3]
 8012d1a:	3a01      	subs	r2, #1
 8012d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012d20:	ece3 7a01 	vstmia	r3!, {s15}
 8012d24:	d1f7      	bne.n	8012d16 <arm_mat_inverse_f32+0xfa>
 8012d26:	9901      	ldr	r1, [sp, #4]
 8012d28:	464b      	mov	r3, r9
 8012d2a:	ed93 7a00 	vldr	s14, [r3]
 8012d2e:	3901      	subs	r1, #1
 8012d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012d34:	ece3 7a01 	vstmia	r3!, {s15}
 8012d38:	d1f7      	bne.n	8012d2a <arm_mat_inverse_f32+0x10e>
 8012d3a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8012d3e:	9803      	ldr	r0, [sp, #12]
 8012d40:	42b1      	cmp	r1, r6
 8012d42:	d038      	beq.n	8012db6 <arm_mat_inverse_f32+0x19a>
 8012d44:	eddb 6a00 	vldr	s13, [fp]
 8012d48:	465a      	mov	r2, fp
 8012d4a:	4673      	mov	r3, lr
 8012d4c:	46e2      	mov	sl, ip
 8012d4e:	ecba 7a01 	vldmia	sl!, {s14}
 8012d52:	3b01      	subs	r3, #1
 8012d54:	edd2 7a00 	vldr	s15, [r2]
 8012d58:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d60:	ece2 7a01 	vstmia	r2!, {s15}
 8012d64:	d1f3      	bne.n	8012d4e <arm_mat_inverse_f32+0x132>
 8012d66:	44bb      	add	fp, r7
 8012d68:	4602      	mov	r2, r0
 8012d6a:	9b01      	ldr	r3, [sp, #4]
 8012d6c:	46ca      	mov	sl, r9
 8012d6e:	ecba 7a01 	vldmia	sl!, {s14}
 8012d72:	3b01      	subs	r3, #1
 8012d74:	edd2 7a00 	vldr	s15, [r2]
 8012d78:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012d7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d80:	ece2 7a01 	vstmia	r2!, {s15}
 8012d84:	d1f3      	bne.n	8012d6e <arm_mat_inverse_f32+0x152>
 8012d86:	4428      	add	r0, r5
 8012d88:	3101      	adds	r1, #1
 8012d8a:	44c3      	add	fp, r8
 8012d8c:	428c      	cmp	r4, r1
 8012d8e:	d1d7      	bne.n	8012d40 <arm_mat_inverse_f32+0x124>
 8012d90:	9b04      	ldr	r3, [sp, #16]
 8012d92:	f1be 0e01 	subs.w	lr, lr, #1
 8012d96:	f106 0601 	add.w	r6, r6, #1
 8012d9a:	f1a7 0704 	sub.w	r7, r7, #4
 8012d9e:	449c      	add	ip, r3
 8012da0:	44a9      	add	r9, r5
 8012da2:	d182      	bne.n	8012caa <arm_mat_inverse_f32+0x8e>
 8012da4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dac:	d006      	beq.n	8012dbc <arm_mat_inverse_f32+0x1a0>
 8012dae:	2000      	movs	r0, #0
 8012db0:	b007      	add	sp, #28
 8012db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db6:	44bb      	add	fp, r7
 8012db8:	4428      	add	r0, r5
 8012dba:	e7e5      	b.n	8012d88 <arm_mat_inverse_f32+0x16c>
 8012dbc:	9b05      	ldr	r3, [sp, #20]
 8012dbe:	9a01      	ldr	r2, [sp, #4]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	fb02 f204 	mul.w	r2, r2, r4
 8012dc6:	edd3 7a00 	vldr	s15, [r3]
 8012dca:	4614      	mov	r4, r2
 8012dcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd4:	d1eb      	bne.n	8012dae <arm_mat_inverse_f32+0x192>
 8012dd6:	3304      	adds	r3, #4
 8012dd8:	e006      	b.n	8012de8 <arm_mat_inverse_f32+0x1cc>
 8012dda:	ecf3 7a01 	vldmia	r3!, {s15}
 8012dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de6:	d1e2      	bne.n	8012dae <arm_mat_inverse_f32+0x192>
 8012de8:	f10e 0e01 	add.w	lr, lr, #1
 8012dec:	4574      	cmp	r4, lr
 8012dee:	d1f4      	bne.n	8012dda <arm_mat_inverse_f32+0x1be>
 8012df0:	f06f 0004 	mvn.w	r0, #4
 8012df4:	b007      	add	sp, #28
 8012df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfa:	f06f 0002 	mvn.w	r0, #2
 8012dfe:	b007      	add	sp, #28
 8012e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e04:	4655      	mov	r5, sl
 8012e06:	3e01      	subs	r6, #1
 8012e08:	f845 bb04 	str.w	fp, [r5], #4
 8012e0c:	f47f af23 	bne.w	8012c56 <arm_mat_inverse_f32+0x3a>
 8012e10:	e73b      	b.n	8012c8a <arm_mat_inverse_f32+0x6e>
 8012e12:	bf00      	nop
 8012e14:	00000000 	.word	0x00000000

08012e18 <arm_mat_init_f32>:
 8012e18:	8001      	strh	r1, [r0, #0]
 8012e1a:	8042      	strh	r2, [r0, #2]
 8012e1c:	6043      	str	r3, [r0, #4]
 8012e1e:	4770      	bx	lr

08012e20 <sulp>:
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	4604      	mov	r4, r0
 8012e24:	460d      	mov	r5, r1
 8012e26:	4616      	mov	r6, r2
 8012e28:	ec45 4b10 	vmov	d0, r4, r5
 8012e2c:	f003 fa1a 	bl	8016264 <__ulp>
 8012e30:	b17e      	cbz	r6, 8012e52 <sulp+0x32>
 8012e32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012e36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dd09      	ble.n	8012e52 <sulp+0x32>
 8012e3e:	051b      	lsls	r3, r3, #20
 8012e40:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012e44:	2000      	movs	r0, #0
 8012e46:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012e4a:	ec41 0b17 	vmov	d7, r0, r1
 8012e4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012e52:	bd70      	pop	{r4, r5, r6, pc}
 8012e54:	0000      	movs	r0, r0
	...

08012e58 <_strtod_l>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	ed2d 8b0a 	vpush	{d8-d12}
 8012e60:	b097      	sub	sp, #92	@ 0x5c
 8012e62:	4688      	mov	r8, r1
 8012e64:	920e      	str	r2, [sp, #56]	@ 0x38
 8012e66:	2200      	movs	r2, #0
 8012e68:	9212      	str	r2, [sp, #72]	@ 0x48
 8012e6a:	9005      	str	r0, [sp, #20]
 8012e6c:	f04f 0a00 	mov.w	sl, #0
 8012e70:	f04f 0b00 	mov.w	fp, #0
 8012e74:	460a      	mov	r2, r1
 8012e76:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e78:	7811      	ldrb	r1, [r2, #0]
 8012e7a:	292b      	cmp	r1, #43	@ 0x2b
 8012e7c:	d04c      	beq.n	8012f18 <_strtod_l+0xc0>
 8012e7e:	d839      	bhi.n	8012ef4 <_strtod_l+0x9c>
 8012e80:	290d      	cmp	r1, #13
 8012e82:	d833      	bhi.n	8012eec <_strtod_l+0x94>
 8012e84:	2908      	cmp	r1, #8
 8012e86:	d833      	bhi.n	8012ef0 <_strtod_l+0x98>
 8012e88:	2900      	cmp	r1, #0
 8012e8a:	d03c      	beq.n	8012f06 <_strtod_l+0xae>
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	9208      	str	r2, [sp, #32]
 8012e90:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012e92:	782a      	ldrb	r2, [r5, #0]
 8012e94:	2a30      	cmp	r2, #48	@ 0x30
 8012e96:	f040 80b7 	bne.w	8013008 <_strtod_l+0x1b0>
 8012e9a:	786a      	ldrb	r2, [r5, #1]
 8012e9c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012ea0:	2a58      	cmp	r2, #88	@ 0x58
 8012ea2:	d170      	bne.n	8012f86 <_strtod_l+0x12e>
 8012ea4:	9302      	str	r3, [sp, #8]
 8012ea6:	9b08      	ldr	r3, [sp, #32]
 8012ea8:	9301      	str	r3, [sp, #4]
 8012eaa:	ab12      	add	r3, sp, #72	@ 0x48
 8012eac:	9300      	str	r3, [sp, #0]
 8012eae:	4a90      	ldr	r2, [pc, #576]	@ (80130f0 <_strtod_l+0x298>)
 8012eb0:	9805      	ldr	r0, [sp, #20]
 8012eb2:	ab13      	add	r3, sp, #76	@ 0x4c
 8012eb4:	a911      	add	r1, sp, #68	@ 0x44
 8012eb6:	f002 facf 	bl	8015458 <__gethex>
 8012eba:	f010 060f 	ands.w	r6, r0, #15
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	d005      	beq.n	8012ece <_strtod_l+0x76>
 8012ec2:	2e06      	cmp	r6, #6
 8012ec4:	d12a      	bne.n	8012f1c <_strtod_l+0xc4>
 8012ec6:	3501      	adds	r5, #1
 8012ec8:	2300      	movs	r3, #0
 8012eca:	9511      	str	r5, [sp, #68]	@ 0x44
 8012ecc:	9308      	str	r3, [sp, #32]
 8012ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f040 8537 	bne.w	8013944 <_strtod_l+0xaec>
 8012ed6:	9b08      	ldr	r3, [sp, #32]
 8012ed8:	ec4b ab10 	vmov	d0, sl, fp
 8012edc:	b1cb      	cbz	r3, 8012f12 <_strtod_l+0xba>
 8012ede:	eeb1 0b40 	vneg.f64	d0, d0
 8012ee2:	b017      	add	sp, #92	@ 0x5c
 8012ee4:	ecbd 8b0a 	vpop	{d8-d12}
 8012ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eec:	2920      	cmp	r1, #32
 8012eee:	d1cd      	bne.n	8012e8c <_strtod_l+0x34>
 8012ef0:	3201      	adds	r2, #1
 8012ef2:	e7c0      	b.n	8012e76 <_strtod_l+0x1e>
 8012ef4:	292d      	cmp	r1, #45	@ 0x2d
 8012ef6:	d1c9      	bne.n	8012e8c <_strtod_l+0x34>
 8012ef8:	2101      	movs	r1, #1
 8012efa:	9108      	str	r1, [sp, #32]
 8012efc:	1c51      	adds	r1, r2, #1
 8012efe:	9111      	str	r1, [sp, #68]	@ 0x44
 8012f00:	7852      	ldrb	r2, [r2, #1]
 8012f02:	2a00      	cmp	r2, #0
 8012f04:	d1c4      	bne.n	8012e90 <_strtod_l+0x38>
 8012f06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f08:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f040 8517 	bne.w	8013940 <_strtod_l+0xae8>
 8012f12:	ec4b ab10 	vmov	d0, sl, fp
 8012f16:	e7e4      	b.n	8012ee2 <_strtod_l+0x8a>
 8012f18:	2100      	movs	r1, #0
 8012f1a:	e7ee      	b.n	8012efa <_strtod_l+0xa2>
 8012f1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012f1e:	b13a      	cbz	r2, 8012f30 <_strtod_l+0xd8>
 8012f20:	2135      	movs	r1, #53	@ 0x35
 8012f22:	a814      	add	r0, sp, #80	@ 0x50
 8012f24:	f003 fa95 	bl	8016452 <__copybits>
 8012f28:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012f2a:	9805      	ldr	r0, [sp, #20]
 8012f2c:	f002 fe6e 	bl	8015c0c <_Bfree>
 8012f30:	1e73      	subs	r3, r6, #1
 8012f32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012f34:	2b04      	cmp	r3, #4
 8012f36:	d806      	bhi.n	8012f46 <_strtod_l+0xee>
 8012f38:	e8df f003 	tbb	[pc, r3]
 8012f3c:	201d0314 	.word	0x201d0314
 8012f40:	14          	.byte	0x14
 8012f41:	00          	.byte	0x00
 8012f42:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012f46:	05e3      	lsls	r3, r4, #23
 8012f48:	bf48      	it	mi
 8012f4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012f52:	0d1b      	lsrs	r3, r3, #20
 8012f54:	051b      	lsls	r3, r3, #20
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d1b9      	bne.n	8012ece <_strtod_l+0x76>
 8012f5a:	f001 fb97 	bl	801468c <__errno>
 8012f5e:	2322      	movs	r3, #34	@ 0x22
 8012f60:	6003      	str	r3, [r0, #0]
 8012f62:	e7b4      	b.n	8012ece <_strtod_l+0x76>
 8012f64:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012f68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012f6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012f70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012f74:	e7e7      	b.n	8012f46 <_strtod_l+0xee>
 8012f76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80130f8 <_strtod_l+0x2a0>
 8012f7a:	e7e4      	b.n	8012f46 <_strtod_l+0xee>
 8012f7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012f80:	f04f 3aff 	mov.w	sl, #4294967295
 8012f84:	e7df      	b.n	8012f46 <_strtod_l+0xee>
 8012f86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012f88:	1c5a      	adds	r2, r3, #1
 8012f8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8012f8c:	785b      	ldrb	r3, [r3, #1]
 8012f8e:	2b30      	cmp	r3, #48	@ 0x30
 8012f90:	d0f9      	beq.n	8012f86 <_strtod_l+0x12e>
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d09b      	beq.n	8012ece <_strtod_l+0x76>
 8012f96:	2301      	movs	r3, #1
 8012f98:	9307      	str	r3, [sp, #28]
 8012f9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	9306      	str	r3, [sp, #24]
 8012fa2:	4699      	mov	r9, r3
 8012fa4:	461d      	mov	r5, r3
 8012fa6:	220a      	movs	r2, #10
 8012fa8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012faa:	7804      	ldrb	r4, [r0, #0]
 8012fac:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012fb0:	b2d9      	uxtb	r1, r3
 8012fb2:	2909      	cmp	r1, #9
 8012fb4:	d92a      	bls.n	801300c <_strtod_l+0x1b4>
 8012fb6:	494f      	ldr	r1, [pc, #316]	@ (80130f4 <_strtod_l+0x29c>)
 8012fb8:	2201      	movs	r2, #1
 8012fba:	f001 fa97 	bl	80144ec <strncmp>
 8012fbe:	b398      	cbz	r0, 8013028 <_strtod_l+0x1d0>
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	462b      	mov	r3, r5
 8012fc6:	4607      	mov	r7, r0
 8012fc8:	4601      	mov	r1, r0
 8012fca:	2a65      	cmp	r2, #101	@ 0x65
 8012fcc:	d001      	beq.n	8012fd2 <_strtod_l+0x17a>
 8012fce:	2a45      	cmp	r2, #69	@ 0x45
 8012fd0:	d118      	bne.n	8013004 <_strtod_l+0x1ac>
 8012fd2:	b91b      	cbnz	r3, 8012fdc <_strtod_l+0x184>
 8012fd4:	9b07      	ldr	r3, [sp, #28]
 8012fd6:	4303      	orrs	r3, r0
 8012fd8:	d095      	beq.n	8012f06 <_strtod_l+0xae>
 8012fda:	2300      	movs	r3, #0
 8012fdc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012fe0:	f108 0201 	add.w	r2, r8, #1
 8012fe4:	9211      	str	r2, [sp, #68]	@ 0x44
 8012fe6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012fea:	2a2b      	cmp	r2, #43	@ 0x2b
 8012fec:	d074      	beq.n	80130d8 <_strtod_l+0x280>
 8012fee:	2a2d      	cmp	r2, #45	@ 0x2d
 8012ff0:	d07a      	beq.n	80130e8 <_strtod_l+0x290>
 8012ff2:	f04f 0e00 	mov.w	lr, #0
 8012ff6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012ffa:	2c09      	cmp	r4, #9
 8012ffc:	f240 8082 	bls.w	8013104 <_strtod_l+0x2ac>
 8013000:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013004:	2400      	movs	r4, #0
 8013006:	e09d      	b.n	8013144 <_strtod_l+0x2ec>
 8013008:	2300      	movs	r3, #0
 801300a:	e7c5      	b.n	8012f98 <_strtod_l+0x140>
 801300c:	2d08      	cmp	r5, #8
 801300e:	bfc8      	it	gt
 8013010:	9906      	ldrgt	r1, [sp, #24]
 8013012:	f100 0001 	add.w	r0, r0, #1
 8013016:	bfca      	itet	gt
 8013018:	fb02 3301 	mlagt	r3, r2, r1, r3
 801301c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013020:	9306      	strgt	r3, [sp, #24]
 8013022:	3501      	adds	r5, #1
 8013024:	9011      	str	r0, [sp, #68]	@ 0x44
 8013026:	e7bf      	b.n	8012fa8 <_strtod_l+0x150>
 8013028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801302a:	1c5a      	adds	r2, r3, #1
 801302c:	9211      	str	r2, [sp, #68]	@ 0x44
 801302e:	785a      	ldrb	r2, [r3, #1]
 8013030:	b3bd      	cbz	r5, 80130a2 <_strtod_l+0x24a>
 8013032:	4607      	mov	r7, r0
 8013034:	462b      	mov	r3, r5
 8013036:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801303a:	2909      	cmp	r1, #9
 801303c:	d912      	bls.n	8013064 <_strtod_l+0x20c>
 801303e:	2101      	movs	r1, #1
 8013040:	e7c3      	b.n	8012fca <_strtod_l+0x172>
 8013042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013044:	1c5a      	adds	r2, r3, #1
 8013046:	9211      	str	r2, [sp, #68]	@ 0x44
 8013048:	785a      	ldrb	r2, [r3, #1]
 801304a:	3001      	adds	r0, #1
 801304c:	2a30      	cmp	r2, #48	@ 0x30
 801304e:	d0f8      	beq.n	8013042 <_strtod_l+0x1ea>
 8013050:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013054:	2b08      	cmp	r3, #8
 8013056:	f200 847a 	bhi.w	801394e <_strtod_l+0xaf6>
 801305a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801305c:	930a      	str	r3, [sp, #40]	@ 0x28
 801305e:	4607      	mov	r7, r0
 8013060:	2000      	movs	r0, #0
 8013062:	4603      	mov	r3, r0
 8013064:	3a30      	subs	r2, #48	@ 0x30
 8013066:	f100 0101 	add.w	r1, r0, #1
 801306a:	d014      	beq.n	8013096 <_strtod_l+0x23e>
 801306c:	440f      	add	r7, r1
 801306e:	469c      	mov	ip, r3
 8013070:	f04f 0e0a 	mov.w	lr, #10
 8013074:	f10c 0401 	add.w	r4, ip, #1
 8013078:	1ae6      	subs	r6, r4, r3
 801307a:	42b1      	cmp	r1, r6
 801307c:	dc13      	bgt.n	80130a6 <_strtod_l+0x24e>
 801307e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013082:	1819      	adds	r1, r3, r0
 8013084:	2908      	cmp	r1, #8
 8013086:	f103 0301 	add.w	r3, r3, #1
 801308a:	4403      	add	r3, r0
 801308c:	dc19      	bgt.n	80130c2 <_strtod_l+0x26a>
 801308e:	210a      	movs	r1, #10
 8013090:	fb01 2909 	mla	r9, r1, r9, r2
 8013094:	2100      	movs	r1, #0
 8013096:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013098:	1c50      	adds	r0, r2, #1
 801309a:	9011      	str	r0, [sp, #68]	@ 0x44
 801309c:	7852      	ldrb	r2, [r2, #1]
 801309e:	4608      	mov	r0, r1
 80130a0:	e7c9      	b.n	8013036 <_strtod_l+0x1de>
 80130a2:	4628      	mov	r0, r5
 80130a4:	e7d2      	b.n	801304c <_strtod_l+0x1f4>
 80130a6:	f1bc 0f08 	cmp.w	ip, #8
 80130aa:	dc03      	bgt.n	80130b4 <_strtod_l+0x25c>
 80130ac:	fb0e f909 	mul.w	r9, lr, r9
 80130b0:	46a4      	mov	ip, r4
 80130b2:	e7df      	b.n	8013074 <_strtod_l+0x21c>
 80130b4:	2c10      	cmp	r4, #16
 80130b6:	bfde      	ittt	le
 80130b8:	9e06      	ldrle	r6, [sp, #24]
 80130ba:	fb0e f606 	mulle.w	r6, lr, r6
 80130be:	9606      	strle	r6, [sp, #24]
 80130c0:	e7f6      	b.n	80130b0 <_strtod_l+0x258>
 80130c2:	290f      	cmp	r1, #15
 80130c4:	bfdf      	itttt	le
 80130c6:	9806      	ldrle	r0, [sp, #24]
 80130c8:	210a      	movle	r1, #10
 80130ca:	fb01 2200 	mlale	r2, r1, r0, r2
 80130ce:	9206      	strle	r2, [sp, #24]
 80130d0:	e7e0      	b.n	8013094 <_strtod_l+0x23c>
 80130d2:	2700      	movs	r7, #0
 80130d4:	2101      	movs	r1, #1
 80130d6:	e77d      	b.n	8012fd4 <_strtod_l+0x17c>
 80130d8:	f04f 0e00 	mov.w	lr, #0
 80130dc:	f108 0202 	add.w	r2, r8, #2
 80130e0:	9211      	str	r2, [sp, #68]	@ 0x44
 80130e2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80130e6:	e786      	b.n	8012ff6 <_strtod_l+0x19e>
 80130e8:	f04f 0e01 	mov.w	lr, #1
 80130ec:	e7f6      	b.n	80130dc <_strtod_l+0x284>
 80130ee:	bf00      	nop
 80130f0:	08017560 	.word	0x08017560
 80130f4:	08017378 	.word	0x08017378
 80130f8:	7ff00000 	.word	0x7ff00000
 80130fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80130fe:	1c54      	adds	r4, r2, #1
 8013100:	9411      	str	r4, [sp, #68]	@ 0x44
 8013102:	7852      	ldrb	r2, [r2, #1]
 8013104:	2a30      	cmp	r2, #48	@ 0x30
 8013106:	d0f9      	beq.n	80130fc <_strtod_l+0x2a4>
 8013108:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801310c:	2c08      	cmp	r4, #8
 801310e:	f63f af79 	bhi.w	8013004 <_strtod_l+0x1ac>
 8013112:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013116:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013118:	9209      	str	r2, [sp, #36]	@ 0x24
 801311a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801311c:	1c54      	adds	r4, r2, #1
 801311e:	9411      	str	r4, [sp, #68]	@ 0x44
 8013120:	7852      	ldrb	r2, [r2, #1]
 8013122:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013126:	2e09      	cmp	r6, #9
 8013128:	d937      	bls.n	801319a <_strtod_l+0x342>
 801312a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801312c:	1ba4      	subs	r4, r4, r6
 801312e:	2c08      	cmp	r4, #8
 8013130:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013134:	dc02      	bgt.n	801313c <_strtod_l+0x2e4>
 8013136:	4564      	cmp	r4, ip
 8013138:	bfa8      	it	ge
 801313a:	4664      	movge	r4, ip
 801313c:	f1be 0f00 	cmp.w	lr, #0
 8013140:	d000      	beq.n	8013144 <_strtod_l+0x2ec>
 8013142:	4264      	negs	r4, r4
 8013144:	2b00      	cmp	r3, #0
 8013146:	d14d      	bne.n	80131e4 <_strtod_l+0x38c>
 8013148:	9b07      	ldr	r3, [sp, #28]
 801314a:	4318      	orrs	r0, r3
 801314c:	f47f aebf 	bne.w	8012ece <_strtod_l+0x76>
 8013150:	2900      	cmp	r1, #0
 8013152:	f47f aed8 	bne.w	8012f06 <_strtod_l+0xae>
 8013156:	2a69      	cmp	r2, #105	@ 0x69
 8013158:	d027      	beq.n	80131aa <_strtod_l+0x352>
 801315a:	dc24      	bgt.n	80131a6 <_strtod_l+0x34e>
 801315c:	2a49      	cmp	r2, #73	@ 0x49
 801315e:	d024      	beq.n	80131aa <_strtod_l+0x352>
 8013160:	2a4e      	cmp	r2, #78	@ 0x4e
 8013162:	f47f aed0 	bne.w	8012f06 <_strtod_l+0xae>
 8013166:	4997      	ldr	r1, [pc, #604]	@ (80133c4 <_strtod_l+0x56c>)
 8013168:	a811      	add	r0, sp, #68	@ 0x44
 801316a:	f002 fb97 	bl	801589c <__match>
 801316e:	2800      	cmp	r0, #0
 8013170:	f43f aec9 	beq.w	8012f06 <_strtod_l+0xae>
 8013174:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b28      	cmp	r3, #40	@ 0x28
 801317a:	d12d      	bne.n	80131d8 <_strtod_l+0x380>
 801317c:	4992      	ldr	r1, [pc, #584]	@ (80133c8 <_strtod_l+0x570>)
 801317e:	aa14      	add	r2, sp, #80	@ 0x50
 8013180:	a811      	add	r0, sp, #68	@ 0x44
 8013182:	f002 fb9f 	bl	80158c4 <__hexnan>
 8013186:	2805      	cmp	r0, #5
 8013188:	d126      	bne.n	80131d8 <_strtod_l+0x380>
 801318a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801318c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013190:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013194:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013198:	e699      	b.n	8012ece <_strtod_l+0x76>
 801319a:	240a      	movs	r4, #10
 801319c:	fb04 2c0c 	mla	ip, r4, ip, r2
 80131a0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80131a4:	e7b9      	b.n	801311a <_strtod_l+0x2c2>
 80131a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80131a8:	e7db      	b.n	8013162 <_strtod_l+0x30a>
 80131aa:	4988      	ldr	r1, [pc, #544]	@ (80133cc <_strtod_l+0x574>)
 80131ac:	a811      	add	r0, sp, #68	@ 0x44
 80131ae:	f002 fb75 	bl	801589c <__match>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	f43f aea7 	beq.w	8012f06 <_strtod_l+0xae>
 80131b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80131ba:	4985      	ldr	r1, [pc, #532]	@ (80133d0 <_strtod_l+0x578>)
 80131bc:	3b01      	subs	r3, #1
 80131be:	a811      	add	r0, sp, #68	@ 0x44
 80131c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80131c2:	f002 fb6b 	bl	801589c <__match>
 80131c6:	b910      	cbnz	r0, 80131ce <_strtod_l+0x376>
 80131c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80131ca:	3301      	adds	r3, #1
 80131cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80131ce:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80133e4 <_strtod_l+0x58c>
 80131d2:	f04f 0a00 	mov.w	sl, #0
 80131d6:	e67a      	b.n	8012ece <_strtod_l+0x76>
 80131d8:	487e      	ldr	r0, [pc, #504]	@ (80133d4 <_strtod_l+0x57c>)
 80131da:	f001 fa95 	bl	8014708 <nan>
 80131de:	ec5b ab10 	vmov	sl, fp, d0
 80131e2:	e674      	b.n	8012ece <_strtod_l+0x76>
 80131e4:	ee07 9a90 	vmov	s15, r9
 80131e8:	1be2      	subs	r2, r4, r7
 80131ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80131ee:	2d00      	cmp	r5, #0
 80131f0:	bf08      	it	eq
 80131f2:	461d      	moveq	r5, r3
 80131f4:	2b10      	cmp	r3, #16
 80131f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80131f8:	461a      	mov	r2, r3
 80131fa:	bfa8      	it	ge
 80131fc:	2210      	movge	r2, #16
 80131fe:	2b09      	cmp	r3, #9
 8013200:	ec5b ab17 	vmov	sl, fp, d7
 8013204:	dc15      	bgt.n	8013232 <_strtod_l+0x3da>
 8013206:	1be1      	subs	r1, r4, r7
 8013208:	2900      	cmp	r1, #0
 801320a:	f43f ae60 	beq.w	8012ece <_strtod_l+0x76>
 801320e:	eba4 0107 	sub.w	r1, r4, r7
 8013212:	dd72      	ble.n	80132fa <_strtod_l+0x4a2>
 8013214:	2916      	cmp	r1, #22
 8013216:	dc59      	bgt.n	80132cc <_strtod_l+0x474>
 8013218:	4b6f      	ldr	r3, [pc, #444]	@ (80133d8 <_strtod_l+0x580>)
 801321a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801321c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013220:	ed93 7b00 	vldr	d7, [r3]
 8013224:	ec4b ab16 	vmov	d6, sl, fp
 8013228:	ee27 7b06 	vmul.f64	d7, d7, d6
 801322c:	ec5b ab17 	vmov	sl, fp, d7
 8013230:	e64d      	b.n	8012ece <_strtod_l+0x76>
 8013232:	4969      	ldr	r1, [pc, #420]	@ (80133d8 <_strtod_l+0x580>)
 8013234:	eddd 6a06 	vldr	s13, [sp, #24]
 8013238:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801323c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013240:	2b0f      	cmp	r3, #15
 8013242:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013246:	eea7 6b05 	vfma.f64	d6, d7, d5
 801324a:	ec5b ab16 	vmov	sl, fp, d6
 801324e:	ddda      	ble.n	8013206 <_strtod_l+0x3ae>
 8013250:	1a9a      	subs	r2, r3, r2
 8013252:	1be1      	subs	r1, r4, r7
 8013254:	440a      	add	r2, r1
 8013256:	2a00      	cmp	r2, #0
 8013258:	f340 8094 	ble.w	8013384 <_strtod_l+0x52c>
 801325c:	f012 000f 	ands.w	r0, r2, #15
 8013260:	d00a      	beq.n	8013278 <_strtod_l+0x420>
 8013262:	495d      	ldr	r1, [pc, #372]	@ (80133d8 <_strtod_l+0x580>)
 8013264:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013268:	ed91 7b00 	vldr	d7, [r1]
 801326c:	ec4b ab16 	vmov	d6, sl, fp
 8013270:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013274:	ec5b ab17 	vmov	sl, fp, d7
 8013278:	f032 020f 	bics.w	r2, r2, #15
 801327c:	d073      	beq.n	8013366 <_strtod_l+0x50e>
 801327e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013282:	dd47      	ble.n	8013314 <_strtod_l+0x4bc>
 8013284:	2400      	movs	r4, #0
 8013286:	4625      	mov	r5, r4
 8013288:	9407      	str	r4, [sp, #28]
 801328a:	4626      	mov	r6, r4
 801328c:	9a05      	ldr	r2, [sp, #20]
 801328e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80133e4 <_strtod_l+0x58c>
 8013292:	2322      	movs	r3, #34	@ 0x22
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	f04f 0a00 	mov.w	sl, #0
 801329a:	9b07      	ldr	r3, [sp, #28]
 801329c:	2b00      	cmp	r3, #0
 801329e:	f43f ae16 	beq.w	8012ece <_strtod_l+0x76>
 80132a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80132a4:	9805      	ldr	r0, [sp, #20]
 80132a6:	f002 fcb1 	bl	8015c0c <_Bfree>
 80132aa:	9805      	ldr	r0, [sp, #20]
 80132ac:	4631      	mov	r1, r6
 80132ae:	f002 fcad 	bl	8015c0c <_Bfree>
 80132b2:	9805      	ldr	r0, [sp, #20]
 80132b4:	4629      	mov	r1, r5
 80132b6:	f002 fca9 	bl	8015c0c <_Bfree>
 80132ba:	9907      	ldr	r1, [sp, #28]
 80132bc:	9805      	ldr	r0, [sp, #20]
 80132be:	f002 fca5 	bl	8015c0c <_Bfree>
 80132c2:	9805      	ldr	r0, [sp, #20]
 80132c4:	4621      	mov	r1, r4
 80132c6:	f002 fca1 	bl	8015c0c <_Bfree>
 80132ca:	e600      	b.n	8012ece <_strtod_l+0x76>
 80132cc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80132d0:	1be0      	subs	r0, r4, r7
 80132d2:	4281      	cmp	r1, r0
 80132d4:	dbbc      	blt.n	8013250 <_strtod_l+0x3f8>
 80132d6:	4a40      	ldr	r2, [pc, #256]	@ (80133d8 <_strtod_l+0x580>)
 80132d8:	f1c3 030f 	rsb	r3, r3, #15
 80132dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80132e0:	ed91 7b00 	vldr	d7, [r1]
 80132e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80132e6:	ec4b ab16 	vmov	d6, sl, fp
 80132ea:	1acb      	subs	r3, r1, r3
 80132ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80132f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132f4:	ed92 6b00 	vldr	d6, [r2]
 80132f8:	e796      	b.n	8013228 <_strtod_l+0x3d0>
 80132fa:	3116      	adds	r1, #22
 80132fc:	dba8      	blt.n	8013250 <_strtod_l+0x3f8>
 80132fe:	4b36      	ldr	r3, [pc, #216]	@ (80133d8 <_strtod_l+0x580>)
 8013300:	1b3c      	subs	r4, r7, r4
 8013302:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013306:	ed94 7b00 	vldr	d7, [r4]
 801330a:	ec4b ab16 	vmov	d6, sl, fp
 801330e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013312:	e78b      	b.n	801322c <_strtod_l+0x3d4>
 8013314:	2000      	movs	r0, #0
 8013316:	ec4b ab17 	vmov	d7, sl, fp
 801331a:	4e30      	ldr	r6, [pc, #192]	@ (80133dc <_strtod_l+0x584>)
 801331c:	1112      	asrs	r2, r2, #4
 801331e:	4601      	mov	r1, r0
 8013320:	2a01      	cmp	r2, #1
 8013322:	dc23      	bgt.n	801336c <_strtod_l+0x514>
 8013324:	b108      	cbz	r0, 801332a <_strtod_l+0x4d2>
 8013326:	ec5b ab17 	vmov	sl, fp, d7
 801332a:	4a2c      	ldr	r2, [pc, #176]	@ (80133dc <_strtod_l+0x584>)
 801332c:	482c      	ldr	r0, [pc, #176]	@ (80133e0 <_strtod_l+0x588>)
 801332e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013332:	ed92 7b00 	vldr	d7, [r2]
 8013336:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801333a:	ec4b ab16 	vmov	d6, sl, fp
 801333e:	4a29      	ldr	r2, [pc, #164]	@ (80133e4 <_strtod_l+0x58c>)
 8013340:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013344:	ee17 1a90 	vmov	r1, s15
 8013348:	400a      	ands	r2, r1
 801334a:	4282      	cmp	r2, r0
 801334c:	ec5b ab17 	vmov	sl, fp, d7
 8013350:	d898      	bhi.n	8013284 <_strtod_l+0x42c>
 8013352:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013356:	4282      	cmp	r2, r0
 8013358:	bf86      	itte	hi
 801335a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80133e8 <_strtod_l+0x590>
 801335e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013362:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013366:	2200      	movs	r2, #0
 8013368:	9206      	str	r2, [sp, #24]
 801336a:	e076      	b.n	801345a <_strtod_l+0x602>
 801336c:	f012 0f01 	tst.w	r2, #1
 8013370:	d004      	beq.n	801337c <_strtod_l+0x524>
 8013372:	ed96 6b00 	vldr	d6, [r6]
 8013376:	2001      	movs	r0, #1
 8013378:	ee27 7b06 	vmul.f64	d7, d7, d6
 801337c:	3101      	adds	r1, #1
 801337e:	1052      	asrs	r2, r2, #1
 8013380:	3608      	adds	r6, #8
 8013382:	e7cd      	b.n	8013320 <_strtod_l+0x4c8>
 8013384:	d0ef      	beq.n	8013366 <_strtod_l+0x50e>
 8013386:	4252      	negs	r2, r2
 8013388:	f012 000f 	ands.w	r0, r2, #15
 801338c:	d00a      	beq.n	80133a4 <_strtod_l+0x54c>
 801338e:	4912      	ldr	r1, [pc, #72]	@ (80133d8 <_strtod_l+0x580>)
 8013390:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013394:	ed91 7b00 	vldr	d7, [r1]
 8013398:	ec4b ab16 	vmov	d6, sl, fp
 801339c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80133a0:	ec5b ab17 	vmov	sl, fp, d7
 80133a4:	1112      	asrs	r2, r2, #4
 80133a6:	d0de      	beq.n	8013366 <_strtod_l+0x50e>
 80133a8:	2a1f      	cmp	r2, #31
 80133aa:	dd1f      	ble.n	80133ec <_strtod_l+0x594>
 80133ac:	2400      	movs	r4, #0
 80133ae:	4625      	mov	r5, r4
 80133b0:	9407      	str	r4, [sp, #28]
 80133b2:	4626      	mov	r6, r4
 80133b4:	9a05      	ldr	r2, [sp, #20]
 80133b6:	2322      	movs	r3, #34	@ 0x22
 80133b8:	f04f 0a00 	mov.w	sl, #0
 80133bc:	f04f 0b00 	mov.w	fp, #0
 80133c0:	6013      	str	r3, [r2, #0]
 80133c2:	e76a      	b.n	801329a <_strtod_l+0x442>
 80133c4:	08017387 	.word	0x08017387
 80133c8:	0801754c 	.word	0x0801754c
 80133cc:	0801737f 	.word	0x0801737f
 80133d0:	080173b9 	.word	0x080173b9
 80133d4:	08017548 	.word	0x08017548
 80133d8:	080175d8 	.word	0x080175d8
 80133dc:	080175b0 	.word	0x080175b0
 80133e0:	7ca00000 	.word	0x7ca00000
 80133e4:	7ff00000 	.word	0x7ff00000
 80133e8:	7fefffff 	.word	0x7fefffff
 80133ec:	f012 0110 	ands.w	r1, r2, #16
 80133f0:	bf18      	it	ne
 80133f2:	216a      	movne	r1, #106	@ 0x6a
 80133f4:	9106      	str	r1, [sp, #24]
 80133f6:	ec4b ab17 	vmov	d7, sl, fp
 80133fa:	49af      	ldr	r1, [pc, #700]	@ (80136b8 <_strtod_l+0x860>)
 80133fc:	2000      	movs	r0, #0
 80133fe:	07d6      	lsls	r6, r2, #31
 8013400:	d504      	bpl.n	801340c <_strtod_l+0x5b4>
 8013402:	ed91 6b00 	vldr	d6, [r1]
 8013406:	2001      	movs	r0, #1
 8013408:	ee27 7b06 	vmul.f64	d7, d7, d6
 801340c:	1052      	asrs	r2, r2, #1
 801340e:	f101 0108 	add.w	r1, r1, #8
 8013412:	d1f4      	bne.n	80133fe <_strtod_l+0x5a6>
 8013414:	b108      	cbz	r0, 801341a <_strtod_l+0x5c2>
 8013416:	ec5b ab17 	vmov	sl, fp, d7
 801341a:	9a06      	ldr	r2, [sp, #24]
 801341c:	b1b2      	cbz	r2, 801344c <_strtod_l+0x5f4>
 801341e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013422:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013426:	2a00      	cmp	r2, #0
 8013428:	4658      	mov	r0, fp
 801342a:	dd0f      	ble.n	801344c <_strtod_l+0x5f4>
 801342c:	2a1f      	cmp	r2, #31
 801342e:	dd55      	ble.n	80134dc <_strtod_l+0x684>
 8013430:	2a34      	cmp	r2, #52	@ 0x34
 8013432:	bfde      	ittt	le
 8013434:	f04f 32ff 	movle.w	r2, #4294967295
 8013438:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801343c:	408a      	lslle	r2, r1
 801343e:	f04f 0a00 	mov.w	sl, #0
 8013442:	bfcc      	ite	gt
 8013444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013448:	ea02 0b00 	andle.w	fp, r2, r0
 801344c:	ec4b ab17 	vmov	d7, sl, fp
 8013450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013458:	d0a8      	beq.n	80133ac <_strtod_l+0x554>
 801345a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801345c:	9805      	ldr	r0, [sp, #20]
 801345e:	f8cd 9000 	str.w	r9, [sp]
 8013462:	462a      	mov	r2, r5
 8013464:	f002 fc3a 	bl	8015cdc <__s2b>
 8013468:	9007      	str	r0, [sp, #28]
 801346a:	2800      	cmp	r0, #0
 801346c:	f43f af0a 	beq.w	8013284 <_strtod_l+0x42c>
 8013470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013472:	1b3f      	subs	r7, r7, r4
 8013474:	2b00      	cmp	r3, #0
 8013476:	bfb4      	ite	lt
 8013478:	463b      	movlt	r3, r7
 801347a:	2300      	movge	r3, #0
 801347c:	930a      	str	r3, [sp, #40]	@ 0x28
 801347e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013480:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80136a8 <_strtod_l+0x850>
 8013484:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013488:	2400      	movs	r4, #0
 801348a:	930d      	str	r3, [sp, #52]	@ 0x34
 801348c:	4625      	mov	r5, r4
 801348e:	9b07      	ldr	r3, [sp, #28]
 8013490:	9805      	ldr	r0, [sp, #20]
 8013492:	6859      	ldr	r1, [r3, #4]
 8013494:	f002 fb7a 	bl	8015b8c <_Balloc>
 8013498:	4606      	mov	r6, r0
 801349a:	2800      	cmp	r0, #0
 801349c:	f43f aef6 	beq.w	801328c <_strtod_l+0x434>
 80134a0:	9b07      	ldr	r3, [sp, #28]
 80134a2:	691a      	ldr	r2, [r3, #16]
 80134a4:	ec4b ab19 	vmov	d9, sl, fp
 80134a8:	3202      	adds	r2, #2
 80134aa:	f103 010c 	add.w	r1, r3, #12
 80134ae:	0092      	lsls	r2, r2, #2
 80134b0:	300c      	adds	r0, #12
 80134b2:	f001 f918 	bl	80146e6 <memcpy>
 80134b6:	eeb0 0b49 	vmov.f64	d0, d9
 80134ba:	9805      	ldr	r0, [sp, #20]
 80134bc:	aa14      	add	r2, sp, #80	@ 0x50
 80134be:	a913      	add	r1, sp, #76	@ 0x4c
 80134c0:	f002 ff40 	bl	8016344 <__d2b>
 80134c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80134c6:	2800      	cmp	r0, #0
 80134c8:	f43f aee0 	beq.w	801328c <_strtod_l+0x434>
 80134cc:	9805      	ldr	r0, [sp, #20]
 80134ce:	2101      	movs	r1, #1
 80134d0:	f002 fc9a 	bl	8015e08 <__i2b>
 80134d4:	4605      	mov	r5, r0
 80134d6:	b940      	cbnz	r0, 80134ea <_strtod_l+0x692>
 80134d8:	2500      	movs	r5, #0
 80134da:	e6d7      	b.n	801328c <_strtod_l+0x434>
 80134dc:	f04f 31ff 	mov.w	r1, #4294967295
 80134e0:	fa01 f202 	lsl.w	r2, r1, r2
 80134e4:	ea02 0a0a 	and.w	sl, r2, sl
 80134e8:	e7b0      	b.n	801344c <_strtod_l+0x5f4>
 80134ea:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80134ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80134ee:	2f00      	cmp	r7, #0
 80134f0:	bfab      	itete	ge
 80134f2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80134f4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80134f6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80134fa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80134fe:	bfac      	ite	ge
 8013500:	eb07 0903 	addge.w	r9, r7, r3
 8013504:	eba3 0807 	sublt.w	r8, r3, r7
 8013508:	9b06      	ldr	r3, [sp, #24]
 801350a:	1aff      	subs	r7, r7, r3
 801350c:	4417      	add	r7, r2
 801350e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013512:	4a6a      	ldr	r2, [pc, #424]	@ (80136bc <_strtod_l+0x864>)
 8013514:	3f01      	subs	r7, #1
 8013516:	4297      	cmp	r7, r2
 8013518:	da51      	bge.n	80135be <_strtod_l+0x766>
 801351a:	1bd1      	subs	r1, r2, r7
 801351c:	291f      	cmp	r1, #31
 801351e:	eba3 0301 	sub.w	r3, r3, r1
 8013522:	f04f 0201 	mov.w	r2, #1
 8013526:	dc3e      	bgt.n	80135a6 <_strtod_l+0x74e>
 8013528:	408a      	lsls	r2, r1
 801352a:	920c      	str	r2, [sp, #48]	@ 0x30
 801352c:	2200      	movs	r2, #0
 801352e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013530:	eb09 0703 	add.w	r7, r9, r3
 8013534:	4498      	add	r8, r3
 8013536:	9b06      	ldr	r3, [sp, #24]
 8013538:	45b9      	cmp	r9, r7
 801353a:	4498      	add	r8, r3
 801353c:	464b      	mov	r3, r9
 801353e:	bfa8      	it	ge
 8013540:	463b      	movge	r3, r7
 8013542:	4543      	cmp	r3, r8
 8013544:	bfa8      	it	ge
 8013546:	4643      	movge	r3, r8
 8013548:	2b00      	cmp	r3, #0
 801354a:	bfc2      	ittt	gt
 801354c:	1aff      	subgt	r7, r7, r3
 801354e:	eba8 0803 	subgt.w	r8, r8, r3
 8013552:	eba9 0903 	subgt.w	r9, r9, r3
 8013556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013558:	2b00      	cmp	r3, #0
 801355a:	dd16      	ble.n	801358a <_strtod_l+0x732>
 801355c:	4629      	mov	r1, r5
 801355e:	9805      	ldr	r0, [sp, #20]
 8013560:	461a      	mov	r2, r3
 8013562:	f002 fd09 	bl	8015f78 <__pow5mult>
 8013566:	4605      	mov	r5, r0
 8013568:	2800      	cmp	r0, #0
 801356a:	d0b5      	beq.n	80134d8 <_strtod_l+0x680>
 801356c:	4601      	mov	r1, r0
 801356e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013570:	9805      	ldr	r0, [sp, #20]
 8013572:	f002 fc5f 	bl	8015e34 <__multiply>
 8013576:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013578:	2800      	cmp	r0, #0
 801357a:	f43f ae87 	beq.w	801328c <_strtod_l+0x434>
 801357e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013580:	9805      	ldr	r0, [sp, #20]
 8013582:	f002 fb43 	bl	8015c0c <_Bfree>
 8013586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013588:	9312      	str	r3, [sp, #72]	@ 0x48
 801358a:	2f00      	cmp	r7, #0
 801358c:	dc1b      	bgt.n	80135c6 <_strtod_l+0x76e>
 801358e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013590:	2b00      	cmp	r3, #0
 8013592:	dd21      	ble.n	80135d8 <_strtod_l+0x780>
 8013594:	4631      	mov	r1, r6
 8013596:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013598:	9805      	ldr	r0, [sp, #20]
 801359a:	f002 fced 	bl	8015f78 <__pow5mult>
 801359e:	4606      	mov	r6, r0
 80135a0:	b9d0      	cbnz	r0, 80135d8 <_strtod_l+0x780>
 80135a2:	2600      	movs	r6, #0
 80135a4:	e672      	b.n	801328c <_strtod_l+0x434>
 80135a6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80135aa:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80135ae:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80135b2:	37e2      	adds	r7, #226	@ 0xe2
 80135b4:	fa02 f107 	lsl.w	r1, r2, r7
 80135b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80135ba:	920c      	str	r2, [sp, #48]	@ 0x30
 80135bc:	e7b8      	b.n	8013530 <_strtod_l+0x6d8>
 80135be:	2200      	movs	r2, #0
 80135c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80135c2:	2201      	movs	r2, #1
 80135c4:	e7f9      	b.n	80135ba <_strtod_l+0x762>
 80135c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80135c8:	9805      	ldr	r0, [sp, #20]
 80135ca:	463a      	mov	r2, r7
 80135cc:	f002 fd2e 	bl	801602c <__lshift>
 80135d0:	9012      	str	r0, [sp, #72]	@ 0x48
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d1db      	bne.n	801358e <_strtod_l+0x736>
 80135d6:	e659      	b.n	801328c <_strtod_l+0x434>
 80135d8:	f1b8 0f00 	cmp.w	r8, #0
 80135dc:	dd07      	ble.n	80135ee <_strtod_l+0x796>
 80135de:	4631      	mov	r1, r6
 80135e0:	9805      	ldr	r0, [sp, #20]
 80135e2:	4642      	mov	r2, r8
 80135e4:	f002 fd22 	bl	801602c <__lshift>
 80135e8:	4606      	mov	r6, r0
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d0d9      	beq.n	80135a2 <_strtod_l+0x74a>
 80135ee:	f1b9 0f00 	cmp.w	r9, #0
 80135f2:	dd08      	ble.n	8013606 <_strtod_l+0x7ae>
 80135f4:	4629      	mov	r1, r5
 80135f6:	9805      	ldr	r0, [sp, #20]
 80135f8:	464a      	mov	r2, r9
 80135fa:	f002 fd17 	bl	801602c <__lshift>
 80135fe:	4605      	mov	r5, r0
 8013600:	2800      	cmp	r0, #0
 8013602:	f43f ae43 	beq.w	801328c <_strtod_l+0x434>
 8013606:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013608:	9805      	ldr	r0, [sp, #20]
 801360a:	4632      	mov	r2, r6
 801360c:	f002 fd96 	bl	801613c <__mdiff>
 8013610:	4604      	mov	r4, r0
 8013612:	2800      	cmp	r0, #0
 8013614:	f43f ae3a 	beq.w	801328c <_strtod_l+0x434>
 8013618:	2300      	movs	r3, #0
 801361a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801361e:	60c3      	str	r3, [r0, #12]
 8013620:	4629      	mov	r1, r5
 8013622:	f002 fd6f 	bl	8016104 <__mcmp>
 8013626:	2800      	cmp	r0, #0
 8013628:	da4c      	bge.n	80136c4 <_strtod_l+0x86c>
 801362a:	ea58 080a 	orrs.w	r8, r8, sl
 801362e:	d172      	bne.n	8013716 <_strtod_l+0x8be>
 8013630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013634:	2b00      	cmp	r3, #0
 8013636:	d16e      	bne.n	8013716 <_strtod_l+0x8be>
 8013638:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801363c:	0d1b      	lsrs	r3, r3, #20
 801363e:	051b      	lsls	r3, r3, #20
 8013640:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013644:	d967      	bls.n	8013716 <_strtod_l+0x8be>
 8013646:	6963      	ldr	r3, [r4, #20]
 8013648:	b913      	cbnz	r3, 8013650 <_strtod_l+0x7f8>
 801364a:	6923      	ldr	r3, [r4, #16]
 801364c:	2b01      	cmp	r3, #1
 801364e:	dd62      	ble.n	8013716 <_strtod_l+0x8be>
 8013650:	4621      	mov	r1, r4
 8013652:	2201      	movs	r2, #1
 8013654:	9805      	ldr	r0, [sp, #20]
 8013656:	f002 fce9 	bl	801602c <__lshift>
 801365a:	4629      	mov	r1, r5
 801365c:	4604      	mov	r4, r0
 801365e:	f002 fd51 	bl	8016104 <__mcmp>
 8013662:	2800      	cmp	r0, #0
 8013664:	dd57      	ble.n	8013716 <_strtod_l+0x8be>
 8013666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801366a:	9a06      	ldr	r2, [sp, #24]
 801366c:	0d1b      	lsrs	r3, r3, #20
 801366e:	051b      	lsls	r3, r3, #20
 8013670:	2a00      	cmp	r2, #0
 8013672:	d06e      	beq.n	8013752 <_strtod_l+0x8fa>
 8013674:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013678:	d86b      	bhi.n	8013752 <_strtod_l+0x8fa>
 801367a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801367e:	f67f ae99 	bls.w	80133b4 <_strtod_l+0x55c>
 8013682:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80136b0 <_strtod_l+0x858>
 8013686:	ec4b ab16 	vmov	d6, sl, fp
 801368a:	4b0d      	ldr	r3, [pc, #52]	@ (80136c0 <_strtod_l+0x868>)
 801368c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013690:	ee17 2a90 	vmov	r2, s15
 8013694:	4013      	ands	r3, r2
 8013696:	ec5b ab17 	vmov	sl, fp, d7
 801369a:	2b00      	cmp	r3, #0
 801369c:	f47f ae01 	bne.w	80132a2 <_strtod_l+0x44a>
 80136a0:	9a05      	ldr	r2, [sp, #20]
 80136a2:	2322      	movs	r3, #34	@ 0x22
 80136a4:	6013      	str	r3, [r2, #0]
 80136a6:	e5fc      	b.n	80132a2 <_strtod_l+0x44a>
 80136a8:	ffc00000 	.word	0xffc00000
 80136ac:	41dfffff 	.word	0x41dfffff
 80136b0:	00000000 	.word	0x00000000
 80136b4:	39500000 	.word	0x39500000
 80136b8:	08017578 	.word	0x08017578
 80136bc:	fffffc02 	.word	0xfffffc02
 80136c0:	7ff00000 	.word	0x7ff00000
 80136c4:	46d9      	mov	r9, fp
 80136c6:	d15d      	bne.n	8013784 <_strtod_l+0x92c>
 80136c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80136cc:	f1b8 0f00 	cmp.w	r8, #0
 80136d0:	d02a      	beq.n	8013728 <_strtod_l+0x8d0>
 80136d2:	4aa9      	ldr	r2, [pc, #676]	@ (8013978 <_strtod_l+0xb20>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d12a      	bne.n	801372e <_strtod_l+0x8d6>
 80136d8:	9b06      	ldr	r3, [sp, #24]
 80136da:	4652      	mov	r2, sl
 80136dc:	b1fb      	cbz	r3, 801371e <_strtod_l+0x8c6>
 80136de:	4ba7      	ldr	r3, [pc, #668]	@ (801397c <_strtod_l+0xb24>)
 80136e0:	ea0b 0303 	and.w	r3, fp, r3
 80136e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80136e8:	f04f 31ff 	mov.w	r1, #4294967295
 80136ec:	d81a      	bhi.n	8013724 <_strtod_l+0x8cc>
 80136ee:	0d1b      	lsrs	r3, r3, #20
 80136f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80136f4:	fa01 f303 	lsl.w	r3, r1, r3
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d118      	bne.n	801372e <_strtod_l+0x8d6>
 80136fc:	4ba0      	ldr	r3, [pc, #640]	@ (8013980 <_strtod_l+0xb28>)
 80136fe:	4599      	cmp	r9, r3
 8013700:	d102      	bne.n	8013708 <_strtod_l+0x8b0>
 8013702:	3201      	adds	r2, #1
 8013704:	f43f adc2 	beq.w	801328c <_strtod_l+0x434>
 8013708:	4b9c      	ldr	r3, [pc, #624]	@ (801397c <_strtod_l+0xb24>)
 801370a:	ea09 0303 	and.w	r3, r9, r3
 801370e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013712:	f04f 0a00 	mov.w	sl, #0
 8013716:	9b06      	ldr	r3, [sp, #24]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1b2      	bne.n	8013682 <_strtod_l+0x82a>
 801371c:	e5c1      	b.n	80132a2 <_strtod_l+0x44a>
 801371e:	f04f 33ff 	mov.w	r3, #4294967295
 8013722:	e7e9      	b.n	80136f8 <_strtod_l+0x8a0>
 8013724:	460b      	mov	r3, r1
 8013726:	e7e7      	b.n	80136f8 <_strtod_l+0x8a0>
 8013728:	ea53 030a 	orrs.w	r3, r3, sl
 801372c:	d09b      	beq.n	8013666 <_strtod_l+0x80e>
 801372e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013730:	b1c3      	cbz	r3, 8013764 <_strtod_l+0x90c>
 8013732:	ea13 0f09 	tst.w	r3, r9
 8013736:	d0ee      	beq.n	8013716 <_strtod_l+0x8be>
 8013738:	9a06      	ldr	r2, [sp, #24]
 801373a:	4650      	mov	r0, sl
 801373c:	4659      	mov	r1, fp
 801373e:	f1b8 0f00 	cmp.w	r8, #0
 8013742:	d013      	beq.n	801376c <_strtod_l+0x914>
 8013744:	f7ff fb6c 	bl	8012e20 <sulp>
 8013748:	ee39 7b00 	vadd.f64	d7, d9, d0
 801374c:	ec5b ab17 	vmov	sl, fp, d7
 8013750:	e7e1      	b.n	8013716 <_strtod_l+0x8be>
 8013752:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013756:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801375a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801375e:	f04f 3aff 	mov.w	sl, #4294967295
 8013762:	e7d8      	b.n	8013716 <_strtod_l+0x8be>
 8013764:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013766:	ea13 0f0a 	tst.w	r3, sl
 801376a:	e7e4      	b.n	8013736 <_strtod_l+0x8de>
 801376c:	f7ff fb58 	bl	8012e20 <sulp>
 8013770:	ee39 0b40 	vsub.f64	d0, d9, d0
 8013774:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377c:	ec5b ab10 	vmov	sl, fp, d0
 8013780:	d1c9      	bne.n	8013716 <_strtod_l+0x8be>
 8013782:	e617      	b.n	80133b4 <_strtod_l+0x55c>
 8013784:	4629      	mov	r1, r5
 8013786:	4620      	mov	r0, r4
 8013788:	f002 fe34 	bl	80163f4 <__ratio>
 801378c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013790:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	d85d      	bhi.n	8013856 <_strtod_l+0x9fe>
 801379a:	f1b8 0f00 	cmp.w	r8, #0
 801379e:	d164      	bne.n	801386a <_strtod_l+0xa12>
 80137a0:	f1ba 0f00 	cmp.w	sl, #0
 80137a4:	d14b      	bne.n	801383e <_strtod_l+0x9e6>
 80137a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d160      	bne.n	8013874 <_strtod_l+0xa1c>
 80137b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80137b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137be:	d401      	bmi.n	80137c4 <_strtod_l+0x96c>
 80137c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80137c4:	eeb1 ab48 	vneg.f64	d10, d8
 80137c8:	486c      	ldr	r0, [pc, #432]	@ (801397c <_strtod_l+0xb24>)
 80137ca:	496e      	ldr	r1, [pc, #440]	@ (8013984 <_strtod_l+0xb2c>)
 80137cc:	ea09 0700 	and.w	r7, r9, r0
 80137d0:	428f      	cmp	r7, r1
 80137d2:	ec53 2b1a 	vmov	r2, r3, d10
 80137d6:	d17d      	bne.n	80138d4 <_strtod_l+0xa7c>
 80137d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80137dc:	ec4b ab1c 	vmov	d12, sl, fp
 80137e0:	eeb0 0b4c 	vmov.f64	d0, d12
 80137e4:	f002 fd3e 	bl	8016264 <__ulp>
 80137e8:	4864      	ldr	r0, [pc, #400]	@ (801397c <_strtod_l+0xb24>)
 80137ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80137ee:	ee1c 3a90 	vmov	r3, s25
 80137f2:	4a65      	ldr	r2, [pc, #404]	@ (8013988 <_strtod_l+0xb30>)
 80137f4:	ea03 0100 	and.w	r1, r3, r0
 80137f8:	4291      	cmp	r1, r2
 80137fa:	ec5b ab1c 	vmov	sl, fp, d12
 80137fe:	d93c      	bls.n	801387a <_strtod_l+0xa22>
 8013800:	ee19 2a90 	vmov	r2, s19
 8013804:	4b5e      	ldr	r3, [pc, #376]	@ (8013980 <_strtod_l+0xb28>)
 8013806:	429a      	cmp	r2, r3
 8013808:	d104      	bne.n	8013814 <_strtod_l+0x9bc>
 801380a:	ee19 3a10 	vmov	r3, s18
 801380e:	3301      	adds	r3, #1
 8013810:	f43f ad3c 	beq.w	801328c <_strtod_l+0x434>
 8013814:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8013980 <_strtod_l+0xb28>
 8013818:	f04f 3aff 	mov.w	sl, #4294967295
 801381c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801381e:	9805      	ldr	r0, [sp, #20]
 8013820:	f002 f9f4 	bl	8015c0c <_Bfree>
 8013824:	9805      	ldr	r0, [sp, #20]
 8013826:	4631      	mov	r1, r6
 8013828:	f002 f9f0 	bl	8015c0c <_Bfree>
 801382c:	9805      	ldr	r0, [sp, #20]
 801382e:	4629      	mov	r1, r5
 8013830:	f002 f9ec 	bl	8015c0c <_Bfree>
 8013834:	9805      	ldr	r0, [sp, #20]
 8013836:	4621      	mov	r1, r4
 8013838:	f002 f9e8 	bl	8015c0c <_Bfree>
 801383c:	e627      	b.n	801348e <_strtod_l+0x636>
 801383e:	f1ba 0f01 	cmp.w	sl, #1
 8013842:	d103      	bne.n	801384c <_strtod_l+0x9f4>
 8013844:	f1bb 0f00 	cmp.w	fp, #0
 8013848:	f43f adb4 	beq.w	80133b4 <_strtod_l+0x55c>
 801384c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013850:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8013854:	e7b8      	b.n	80137c8 <_strtod_l+0x970>
 8013856:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801385a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801385e:	f1b8 0f00 	cmp.w	r8, #0
 8013862:	d0af      	beq.n	80137c4 <_strtod_l+0x96c>
 8013864:	eeb0 ab48 	vmov.f64	d10, d8
 8013868:	e7ae      	b.n	80137c8 <_strtod_l+0x970>
 801386a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801386e:	eeb0 8b4a 	vmov.f64	d8, d10
 8013872:	e7a9      	b.n	80137c8 <_strtod_l+0x970>
 8013874:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8013878:	e7a6      	b.n	80137c8 <_strtod_l+0x970>
 801387a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801387e:	9b06      	ldr	r3, [sp, #24]
 8013880:	46d9      	mov	r9, fp
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1ca      	bne.n	801381c <_strtod_l+0x9c4>
 8013886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801388a:	0d1b      	lsrs	r3, r3, #20
 801388c:	051b      	lsls	r3, r3, #20
 801388e:	429f      	cmp	r7, r3
 8013890:	d1c4      	bne.n	801381c <_strtod_l+0x9c4>
 8013892:	ec51 0b18 	vmov	r0, r1, d8
 8013896:	f7ed f85d 	bl	8000954 <__aeabi_d2lz>
 801389a:	f7ec ff07 	bl	80006ac <__aeabi_l2d>
 801389e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80138a2:	ec41 0b17 	vmov	d7, r0, r1
 80138a6:	ea49 090a 	orr.w	r9, r9, sl
 80138aa:	ea59 0908 	orrs.w	r9, r9, r8
 80138ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80138b2:	d03c      	beq.n	801392e <_strtod_l+0xad6>
 80138b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013960 <_strtod_l+0xb08>
 80138b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	f53f acef 	bmi.w	80132a2 <_strtod_l+0x44a>
 80138c4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8013968 <_strtod_l+0xb10>
 80138c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80138cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138d0:	dda4      	ble.n	801381c <_strtod_l+0x9c4>
 80138d2:	e4e6      	b.n	80132a2 <_strtod_l+0x44a>
 80138d4:	9906      	ldr	r1, [sp, #24]
 80138d6:	b1e1      	cbz	r1, 8013912 <_strtod_l+0xaba>
 80138d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80138dc:	d819      	bhi.n	8013912 <_strtod_l+0xaba>
 80138de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80138e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e6:	d811      	bhi.n	801390c <_strtod_l+0xab4>
 80138e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80138ec:	ee18 3a10 	vmov	r3, s16
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	bf38      	it	cc
 80138f4:	2301      	movcc	r3, #1
 80138f6:	ee08 3a10 	vmov	s16, r3
 80138fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80138fe:	f1b8 0f00 	cmp.w	r8, #0
 8013902:	d111      	bne.n	8013928 <_strtod_l+0xad0>
 8013904:	eeb1 7b48 	vneg.f64	d7, d8
 8013908:	ec53 2b17 	vmov	r2, r3, d7
 801390c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013910:	1bcb      	subs	r3, r1, r7
 8013912:	eeb0 0b49 	vmov.f64	d0, d9
 8013916:	ec43 2b1a 	vmov	d10, r2, r3
 801391a:	f002 fca3 	bl	8016264 <__ulp>
 801391e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8013922:	ec5b ab19 	vmov	sl, fp, d9
 8013926:	e7aa      	b.n	801387e <_strtod_l+0xa26>
 8013928:	eeb0 7b48 	vmov.f64	d7, d8
 801392c:	e7ec      	b.n	8013908 <_strtod_l+0xab0>
 801392e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013970 <_strtod_l+0xb18>
 8013932:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801393a:	f57f af6f 	bpl.w	801381c <_strtod_l+0x9c4>
 801393e:	e4b0      	b.n	80132a2 <_strtod_l+0x44a>
 8013940:	2300      	movs	r3, #0
 8013942:	9308      	str	r3, [sp, #32]
 8013944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013946:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013948:	6013      	str	r3, [r2, #0]
 801394a:	f7ff bac4 	b.w	8012ed6 <_strtod_l+0x7e>
 801394e:	2a65      	cmp	r2, #101	@ 0x65
 8013950:	f43f abbf 	beq.w	80130d2 <_strtod_l+0x27a>
 8013954:	2a45      	cmp	r2, #69	@ 0x45
 8013956:	f43f abbc 	beq.w	80130d2 <_strtod_l+0x27a>
 801395a:	2101      	movs	r1, #1
 801395c:	f7ff bbf4 	b.w	8013148 <_strtod_l+0x2f0>
 8013960:	94a03595 	.word	0x94a03595
 8013964:	3fdfffff 	.word	0x3fdfffff
 8013968:	35afe535 	.word	0x35afe535
 801396c:	3fe00000 	.word	0x3fe00000
 8013970:	94a03595 	.word	0x94a03595
 8013974:	3fcfffff 	.word	0x3fcfffff
 8013978:	000fffff 	.word	0x000fffff
 801397c:	7ff00000 	.word	0x7ff00000
 8013980:	7fefffff 	.word	0x7fefffff
 8013984:	7fe00000 	.word	0x7fe00000
 8013988:	7c9fffff 	.word	0x7c9fffff
 801398c:	00000000 	.word	0x00000000

08013990 <strtof>:
 8013990:	b510      	push	{r4, lr}
 8013992:	4c21      	ldr	r4, [pc, #132]	@ (8013a18 <strtof+0x88>)
 8013994:	4b21      	ldr	r3, [pc, #132]	@ (8013a1c <strtof+0x8c>)
 8013996:	460a      	mov	r2, r1
 8013998:	4601      	mov	r1, r0
 801399a:	6820      	ldr	r0, [r4, #0]
 801399c:	f7ff fa5c 	bl	8012e58 <_strtod_l>
 80139a0:	eeb4 0b40 	vcmp.f64	d0, d0
 80139a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a8:	eeb0 7b40 	vmov.f64	d7, d0
 80139ac:	d70d      	bvc.n	80139ca <strtof+0x3a>
 80139ae:	ee17 3a90 	vmov	r3, s15
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	481a      	ldr	r0, [pc, #104]	@ (8013a20 <strtof+0x90>)
 80139b6:	da04      	bge.n	80139c2 <strtof+0x32>
 80139b8:	f000 feae 	bl	8014718 <nanf>
 80139bc:	eeb1 0a40 	vneg.f32	s0, s0
 80139c0:	bd10      	pop	{r4, pc}
 80139c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139c6:	f000 bea7 	b.w	8014718 <nanf>
 80139ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80139ce:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8013a24 <strtof+0x94>
 80139d2:	eeb0 6ac0 	vabs.f32	s12, s0
 80139d6:	eeb4 6a66 	vcmp.f32	s12, s13
 80139da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139de:	dd08      	ble.n	80139f2 <strtof+0x62>
 80139e0:	eeb0 6bc7 	vabs.f64	d6, d7
 80139e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8013a10 <strtof+0x80>
 80139e8:	eeb4 6b45 	vcmp.f64	d6, d5
 80139ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f0:	dd0a      	ble.n	8013a08 <strtof+0x78>
 80139f2:	ee10 3a10 	vmov	r3, s0
 80139f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80139fa:	d1e1      	bne.n	80139c0 <strtof+0x30>
 80139fc:	ee17 2a90 	vmov	r2, s15
 8013a00:	4b09      	ldr	r3, [pc, #36]	@ (8013a28 <strtof+0x98>)
 8013a02:	4013      	ands	r3, r2
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d0db      	beq.n	80139c0 <strtof+0x30>
 8013a08:	6823      	ldr	r3, [r4, #0]
 8013a0a:	2222      	movs	r2, #34	@ 0x22
 8013a0c:	601a      	str	r2, [r3, #0]
 8013a0e:	e7d7      	b.n	80139c0 <strtof+0x30>
 8013a10:	ffffffff 	.word	0xffffffff
 8013a14:	7fefffff 	.word	0x7fefffff
 8013a18:	240001f8 	.word	0x240001f8
 8013a1c:	2400008c 	.word	0x2400008c
 8013a20:	08017548 	.word	0x08017548
 8013a24:	7f7fffff 	.word	0x7f7fffff
 8013a28:	7ff00000 	.word	0x7ff00000

08013a2c <__cvt>:
 8013a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a2e:	ed2d 8b02 	vpush	{d8}
 8013a32:	eeb0 8b40 	vmov.f64	d8, d0
 8013a36:	b085      	sub	sp, #20
 8013a38:	4617      	mov	r7, r2
 8013a3a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013a3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a3e:	ee18 2a90 	vmov	r2, s17
 8013a42:	f025 0520 	bic.w	r5, r5, #32
 8013a46:	2a00      	cmp	r2, #0
 8013a48:	bfb6      	itet	lt
 8013a4a:	222d      	movlt	r2, #45	@ 0x2d
 8013a4c:	2200      	movge	r2, #0
 8013a4e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013a52:	2d46      	cmp	r5, #70	@ 0x46
 8013a54:	460c      	mov	r4, r1
 8013a56:	701a      	strb	r2, [r3, #0]
 8013a58:	d004      	beq.n	8013a64 <__cvt+0x38>
 8013a5a:	2d45      	cmp	r5, #69	@ 0x45
 8013a5c:	d100      	bne.n	8013a60 <__cvt+0x34>
 8013a5e:	3401      	adds	r4, #1
 8013a60:	2102      	movs	r1, #2
 8013a62:	e000      	b.n	8013a66 <__cvt+0x3a>
 8013a64:	2103      	movs	r1, #3
 8013a66:	ab03      	add	r3, sp, #12
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	ab02      	add	r3, sp, #8
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	4622      	mov	r2, r4
 8013a70:	4633      	mov	r3, r6
 8013a72:	eeb0 0b48 	vmov.f64	d0, d8
 8013a76:	f000 fedf 	bl	8014838 <_dtoa_r>
 8013a7a:	2d47      	cmp	r5, #71	@ 0x47
 8013a7c:	d114      	bne.n	8013aa8 <__cvt+0x7c>
 8013a7e:	07fb      	lsls	r3, r7, #31
 8013a80:	d50a      	bpl.n	8013a98 <__cvt+0x6c>
 8013a82:	1902      	adds	r2, r0, r4
 8013a84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8c:	bf08      	it	eq
 8013a8e:	9203      	streq	r2, [sp, #12]
 8013a90:	2130      	movs	r1, #48	@ 0x30
 8013a92:	9b03      	ldr	r3, [sp, #12]
 8013a94:	4293      	cmp	r3, r2
 8013a96:	d319      	bcc.n	8013acc <__cvt+0xa0>
 8013a98:	9b03      	ldr	r3, [sp, #12]
 8013a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a9c:	1a1b      	subs	r3, r3, r0
 8013a9e:	6013      	str	r3, [r2, #0]
 8013aa0:	b005      	add	sp, #20
 8013aa2:	ecbd 8b02 	vpop	{d8}
 8013aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa8:	2d46      	cmp	r5, #70	@ 0x46
 8013aaa:	eb00 0204 	add.w	r2, r0, r4
 8013aae:	d1e9      	bne.n	8013a84 <__cvt+0x58>
 8013ab0:	7803      	ldrb	r3, [r0, #0]
 8013ab2:	2b30      	cmp	r3, #48	@ 0x30
 8013ab4:	d107      	bne.n	8013ac6 <__cvt+0x9a>
 8013ab6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abe:	bf1c      	itt	ne
 8013ac0:	f1c4 0401 	rsbne	r4, r4, #1
 8013ac4:	6034      	strne	r4, [r6, #0]
 8013ac6:	6833      	ldr	r3, [r6, #0]
 8013ac8:	441a      	add	r2, r3
 8013aca:	e7db      	b.n	8013a84 <__cvt+0x58>
 8013acc:	1c5c      	adds	r4, r3, #1
 8013ace:	9403      	str	r4, [sp, #12]
 8013ad0:	7019      	strb	r1, [r3, #0]
 8013ad2:	e7de      	b.n	8013a92 <__cvt+0x66>

08013ad4 <__exponent>:
 8013ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ad6:	2900      	cmp	r1, #0
 8013ad8:	bfba      	itte	lt
 8013ada:	4249      	neglt	r1, r1
 8013adc:	232d      	movlt	r3, #45	@ 0x2d
 8013ade:	232b      	movge	r3, #43	@ 0x2b
 8013ae0:	2909      	cmp	r1, #9
 8013ae2:	7002      	strb	r2, [r0, #0]
 8013ae4:	7043      	strb	r3, [r0, #1]
 8013ae6:	dd29      	ble.n	8013b3c <__exponent+0x68>
 8013ae8:	f10d 0307 	add.w	r3, sp, #7
 8013aec:	461d      	mov	r5, r3
 8013aee:	270a      	movs	r7, #10
 8013af0:	461a      	mov	r2, r3
 8013af2:	fbb1 f6f7 	udiv	r6, r1, r7
 8013af6:	fb07 1416 	mls	r4, r7, r6, r1
 8013afa:	3430      	adds	r4, #48	@ 0x30
 8013afc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013b00:	460c      	mov	r4, r1
 8013b02:	2c63      	cmp	r4, #99	@ 0x63
 8013b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8013b08:	4631      	mov	r1, r6
 8013b0a:	dcf1      	bgt.n	8013af0 <__exponent+0x1c>
 8013b0c:	3130      	adds	r1, #48	@ 0x30
 8013b0e:	1e94      	subs	r4, r2, #2
 8013b10:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013b14:	1c41      	adds	r1, r0, #1
 8013b16:	4623      	mov	r3, r4
 8013b18:	42ab      	cmp	r3, r5
 8013b1a:	d30a      	bcc.n	8013b32 <__exponent+0x5e>
 8013b1c:	f10d 0309 	add.w	r3, sp, #9
 8013b20:	1a9b      	subs	r3, r3, r2
 8013b22:	42ac      	cmp	r4, r5
 8013b24:	bf88      	it	hi
 8013b26:	2300      	movhi	r3, #0
 8013b28:	3302      	adds	r3, #2
 8013b2a:	4403      	add	r3, r0
 8013b2c:	1a18      	subs	r0, r3, r0
 8013b2e:	b003      	add	sp, #12
 8013b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b32:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013b36:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013b3a:	e7ed      	b.n	8013b18 <__exponent+0x44>
 8013b3c:	2330      	movs	r3, #48	@ 0x30
 8013b3e:	3130      	adds	r1, #48	@ 0x30
 8013b40:	7083      	strb	r3, [r0, #2]
 8013b42:	70c1      	strb	r1, [r0, #3]
 8013b44:	1d03      	adds	r3, r0, #4
 8013b46:	e7f1      	b.n	8013b2c <__exponent+0x58>

08013b48 <_printf_float>:
 8013b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4c:	b08d      	sub	sp, #52	@ 0x34
 8013b4e:	460c      	mov	r4, r1
 8013b50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013b54:	4616      	mov	r6, r2
 8013b56:	461f      	mov	r7, r3
 8013b58:	4605      	mov	r5, r0
 8013b5a:	f000 fcef 	bl	801453c <_localeconv_r>
 8013b5e:	f8d0 b000 	ldr.w	fp, [r0]
 8013b62:	4658      	mov	r0, fp
 8013b64:	f7ec fc0c 	bl	8000380 <strlen>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8013b70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013b74:	6822      	ldr	r2, [r4, #0]
 8013b76:	9005      	str	r0, [sp, #20]
 8013b78:	3307      	adds	r3, #7
 8013b7a:	f023 0307 	bic.w	r3, r3, #7
 8013b7e:	f103 0108 	add.w	r1, r3, #8
 8013b82:	f8c8 1000 	str.w	r1, [r8]
 8013b86:	ed93 0b00 	vldr	d0, [r3]
 8013b8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013de8 <_printf_float+0x2a0>
 8013b8e:	eeb0 7bc0 	vabs.f64	d7, d0
 8013b92:	eeb4 7b46 	vcmp.f64	d7, d6
 8013b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b9a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8013b9e:	dd24      	ble.n	8013bea <_printf_float+0xa2>
 8013ba0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba8:	d502      	bpl.n	8013bb0 <_printf_float+0x68>
 8013baa:	232d      	movs	r3, #45	@ 0x2d
 8013bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bb0:	498f      	ldr	r1, [pc, #572]	@ (8013df0 <_printf_float+0x2a8>)
 8013bb2:	4b90      	ldr	r3, [pc, #576]	@ (8013df4 <_printf_float+0x2ac>)
 8013bb4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013bb8:	bf8c      	ite	hi
 8013bba:	4688      	movhi	r8, r1
 8013bbc:	4698      	movls	r8, r3
 8013bbe:	f022 0204 	bic.w	r2, r2, #4
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	6123      	str	r3, [r4, #16]
 8013bc6:	6022      	str	r2, [r4, #0]
 8013bc8:	f04f 0a00 	mov.w	sl, #0
 8013bcc:	9700      	str	r7, [sp, #0]
 8013bce:	4633      	mov	r3, r6
 8013bd0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013bd2:	4621      	mov	r1, r4
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f000 f9d1 	bl	8013f7c <_printf_common>
 8013bda:	3001      	adds	r0, #1
 8013bdc:	f040 8089 	bne.w	8013cf2 <_printf_float+0x1aa>
 8013be0:	f04f 30ff 	mov.w	r0, #4294967295
 8013be4:	b00d      	add	sp, #52	@ 0x34
 8013be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bea:	eeb4 0b40 	vcmp.f64	d0, d0
 8013bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf2:	d709      	bvc.n	8013c08 <_printf_float+0xc0>
 8013bf4:	ee10 3a90 	vmov	r3, s1
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	bfbc      	itt	lt
 8013bfc:	232d      	movlt	r3, #45	@ 0x2d
 8013bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013c02:	497d      	ldr	r1, [pc, #500]	@ (8013df8 <_printf_float+0x2b0>)
 8013c04:	4b7d      	ldr	r3, [pc, #500]	@ (8013dfc <_printf_float+0x2b4>)
 8013c06:	e7d5      	b.n	8013bb4 <_printf_float+0x6c>
 8013c08:	6863      	ldr	r3, [r4, #4]
 8013c0a:	1c59      	adds	r1, r3, #1
 8013c0c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013c10:	d139      	bne.n	8013c86 <_printf_float+0x13e>
 8013c12:	2306      	movs	r3, #6
 8013c14:	6063      	str	r3, [r4, #4]
 8013c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	6022      	str	r2, [r4, #0]
 8013c1e:	9303      	str	r3, [sp, #12]
 8013c20:	ab0a      	add	r3, sp, #40	@ 0x28
 8013c22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013c26:	ab09      	add	r3, sp, #36	@ 0x24
 8013c28:	9300      	str	r3, [sp, #0]
 8013c2a:	6861      	ldr	r1, [r4, #4]
 8013c2c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013c30:	4628      	mov	r0, r5
 8013c32:	f7ff fefb 	bl	8013a2c <__cvt>
 8013c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013c3c:	4680      	mov	r8, r0
 8013c3e:	d129      	bne.n	8013c94 <_printf_float+0x14c>
 8013c40:	1cc8      	adds	r0, r1, #3
 8013c42:	db02      	blt.n	8013c4a <_printf_float+0x102>
 8013c44:	6863      	ldr	r3, [r4, #4]
 8013c46:	4299      	cmp	r1, r3
 8013c48:	dd41      	ble.n	8013cce <_printf_float+0x186>
 8013c4a:	f1a9 0902 	sub.w	r9, r9, #2
 8013c4e:	fa5f f989 	uxtb.w	r9, r9
 8013c52:	3901      	subs	r1, #1
 8013c54:	464a      	mov	r2, r9
 8013c56:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013c5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c5c:	f7ff ff3a 	bl	8013ad4 <__exponent>
 8013c60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013c62:	1813      	adds	r3, r2, r0
 8013c64:	2a01      	cmp	r2, #1
 8013c66:	4682      	mov	sl, r0
 8013c68:	6123      	str	r3, [r4, #16]
 8013c6a:	dc02      	bgt.n	8013c72 <_printf_float+0x12a>
 8013c6c:	6822      	ldr	r2, [r4, #0]
 8013c6e:	07d2      	lsls	r2, r2, #31
 8013c70:	d501      	bpl.n	8013c76 <_printf_float+0x12e>
 8013c72:	3301      	adds	r3, #1
 8013c74:	6123      	str	r3, [r4, #16]
 8013c76:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d0a6      	beq.n	8013bcc <_printf_float+0x84>
 8013c7e:	232d      	movs	r3, #45	@ 0x2d
 8013c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c84:	e7a2      	b.n	8013bcc <_printf_float+0x84>
 8013c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013c8a:	d1c4      	bne.n	8013c16 <_printf_float+0xce>
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d1c2      	bne.n	8013c16 <_printf_float+0xce>
 8013c90:	2301      	movs	r3, #1
 8013c92:	e7bf      	b.n	8013c14 <_printf_float+0xcc>
 8013c94:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013c98:	d9db      	bls.n	8013c52 <_printf_float+0x10a>
 8013c9a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8013c9e:	d118      	bne.n	8013cd2 <_printf_float+0x18a>
 8013ca0:	2900      	cmp	r1, #0
 8013ca2:	6863      	ldr	r3, [r4, #4]
 8013ca4:	dd0b      	ble.n	8013cbe <_printf_float+0x176>
 8013ca6:	6121      	str	r1, [r4, #16]
 8013ca8:	b913      	cbnz	r3, 8013cb0 <_printf_float+0x168>
 8013caa:	6822      	ldr	r2, [r4, #0]
 8013cac:	07d0      	lsls	r0, r2, #31
 8013cae:	d502      	bpl.n	8013cb6 <_printf_float+0x16e>
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	440b      	add	r3, r1
 8013cb4:	6123      	str	r3, [r4, #16]
 8013cb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013cb8:	f04f 0a00 	mov.w	sl, #0
 8013cbc:	e7db      	b.n	8013c76 <_printf_float+0x12e>
 8013cbe:	b913      	cbnz	r3, 8013cc6 <_printf_float+0x17e>
 8013cc0:	6822      	ldr	r2, [r4, #0]
 8013cc2:	07d2      	lsls	r2, r2, #31
 8013cc4:	d501      	bpl.n	8013cca <_printf_float+0x182>
 8013cc6:	3302      	adds	r3, #2
 8013cc8:	e7f4      	b.n	8013cb4 <_printf_float+0x16c>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e7f2      	b.n	8013cb4 <_printf_float+0x16c>
 8013cce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cd4:	4299      	cmp	r1, r3
 8013cd6:	db05      	blt.n	8013ce4 <_printf_float+0x19c>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	6121      	str	r1, [r4, #16]
 8013cdc:	07d8      	lsls	r0, r3, #31
 8013cde:	d5ea      	bpl.n	8013cb6 <_printf_float+0x16e>
 8013ce0:	1c4b      	adds	r3, r1, #1
 8013ce2:	e7e7      	b.n	8013cb4 <_printf_float+0x16c>
 8013ce4:	2900      	cmp	r1, #0
 8013ce6:	bfd4      	ite	le
 8013ce8:	f1c1 0202 	rsble	r2, r1, #2
 8013cec:	2201      	movgt	r2, #1
 8013cee:	4413      	add	r3, r2
 8013cf0:	e7e0      	b.n	8013cb4 <_printf_float+0x16c>
 8013cf2:	6823      	ldr	r3, [r4, #0]
 8013cf4:	055a      	lsls	r2, r3, #21
 8013cf6:	d407      	bmi.n	8013d08 <_printf_float+0x1c0>
 8013cf8:	6923      	ldr	r3, [r4, #16]
 8013cfa:	4642      	mov	r2, r8
 8013cfc:	4631      	mov	r1, r6
 8013cfe:	4628      	mov	r0, r5
 8013d00:	47b8      	blx	r7
 8013d02:	3001      	adds	r0, #1
 8013d04:	d12a      	bne.n	8013d5c <_printf_float+0x214>
 8013d06:	e76b      	b.n	8013be0 <_printf_float+0x98>
 8013d08:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013d0c:	f240 80e0 	bls.w	8013ed0 <_printf_float+0x388>
 8013d10:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013d14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1c:	d133      	bne.n	8013d86 <_printf_float+0x23e>
 8013d1e:	4a38      	ldr	r2, [pc, #224]	@ (8013e00 <_printf_float+0x2b8>)
 8013d20:	2301      	movs	r3, #1
 8013d22:	4631      	mov	r1, r6
 8013d24:	4628      	mov	r0, r5
 8013d26:	47b8      	blx	r7
 8013d28:	3001      	adds	r0, #1
 8013d2a:	f43f af59 	beq.w	8013be0 <_printf_float+0x98>
 8013d2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013d32:	4543      	cmp	r3, r8
 8013d34:	db02      	blt.n	8013d3c <_printf_float+0x1f4>
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	07d8      	lsls	r0, r3, #31
 8013d3a:	d50f      	bpl.n	8013d5c <_printf_float+0x214>
 8013d3c:	9b05      	ldr	r3, [sp, #20]
 8013d3e:	465a      	mov	r2, fp
 8013d40:	4631      	mov	r1, r6
 8013d42:	4628      	mov	r0, r5
 8013d44:	47b8      	blx	r7
 8013d46:	3001      	adds	r0, #1
 8013d48:	f43f af4a 	beq.w	8013be0 <_printf_float+0x98>
 8013d4c:	f04f 0900 	mov.w	r9, #0
 8013d50:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d54:	f104 0a1a 	add.w	sl, r4, #26
 8013d58:	45c8      	cmp	r8, r9
 8013d5a:	dc09      	bgt.n	8013d70 <_printf_float+0x228>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	079b      	lsls	r3, r3, #30
 8013d60:	f100 8107 	bmi.w	8013f72 <_printf_float+0x42a>
 8013d64:	68e0      	ldr	r0, [r4, #12]
 8013d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d68:	4298      	cmp	r0, r3
 8013d6a:	bfb8      	it	lt
 8013d6c:	4618      	movlt	r0, r3
 8013d6e:	e739      	b.n	8013be4 <_printf_float+0x9c>
 8013d70:	2301      	movs	r3, #1
 8013d72:	4652      	mov	r2, sl
 8013d74:	4631      	mov	r1, r6
 8013d76:	4628      	mov	r0, r5
 8013d78:	47b8      	blx	r7
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	f43f af30 	beq.w	8013be0 <_printf_float+0x98>
 8013d80:	f109 0901 	add.w	r9, r9, #1
 8013d84:	e7e8      	b.n	8013d58 <_printf_float+0x210>
 8013d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	dc3b      	bgt.n	8013e04 <_printf_float+0x2bc>
 8013d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8013e00 <_printf_float+0x2b8>)
 8013d8e:	2301      	movs	r3, #1
 8013d90:	4631      	mov	r1, r6
 8013d92:	4628      	mov	r0, r5
 8013d94:	47b8      	blx	r7
 8013d96:	3001      	adds	r0, #1
 8013d98:	f43f af22 	beq.w	8013be0 <_printf_float+0x98>
 8013d9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013da0:	ea59 0303 	orrs.w	r3, r9, r3
 8013da4:	d102      	bne.n	8013dac <_printf_float+0x264>
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	07d9      	lsls	r1, r3, #31
 8013daa:	d5d7      	bpl.n	8013d5c <_printf_float+0x214>
 8013dac:	9b05      	ldr	r3, [sp, #20]
 8013dae:	465a      	mov	r2, fp
 8013db0:	4631      	mov	r1, r6
 8013db2:	4628      	mov	r0, r5
 8013db4:	47b8      	blx	r7
 8013db6:	3001      	adds	r0, #1
 8013db8:	f43f af12 	beq.w	8013be0 <_printf_float+0x98>
 8013dbc:	f04f 0a00 	mov.w	sl, #0
 8013dc0:	f104 0b1a 	add.w	fp, r4, #26
 8013dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dc6:	425b      	negs	r3, r3
 8013dc8:	4553      	cmp	r3, sl
 8013dca:	dc01      	bgt.n	8013dd0 <_printf_float+0x288>
 8013dcc:	464b      	mov	r3, r9
 8013dce:	e794      	b.n	8013cfa <_printf_float+0x1b2>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	465a      	mov	r2, fp
 8013dd4:	4631      	mov	r1, r6
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	47b8      	blx	r7
 8013dda:	3001      	adds	r0, #1
 8013ddc:	f43f af00 	beq.w	8013be0 <_printf_float+0x98>
 8013de0:	f10a 0a01 	add.w	sl, sl, #1
 8013de4:	e7ee      	b.n	8013dc4 <_printf_float+0x27c>
 8013de6:	bf00      	nop
 8013de8:	ffffffff 	.word	0xffffffff
 8013dec:	7fefffff 	.word	0x7fefffff
 8013df0:	0801737e 	.word	0x0801737e
 8013df4:	0801737a 	.word	0x0801737a
 8013df8:	08017386 	.word	0x08017386
 8013dfc:	08017382 	.word	0x08017382
 8013e00:	0801738a 	.word	0x0801738a
 8013e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013e0a:	4553      	cmp	r3, sl
 8013e0c:	bfa8      	it	ge
 8013e0e:	4653      	movge	r3, sl
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	4699      	mov	r9, r3
 8013e14:	dc37      	bgt.n	8013e86 <_printf_float+0x33e>
 8013e16:	2300      	movs	r3, #0
 8013e18:	9307      	str	r3, [sp, #28]
 8013e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e1e:	f104 021a 	add.w	r2, r4, #26
 8013e22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e24:	9907      	ldr	r1, [sp, #28]
 8013e26:	9306      	str	r3, [sp, #24]
 8013e28:	eba3 0309 	sub.w	r3, r3, r9
 8013e2c:	428b      	cmp	r3, r1
 8013e2e:	dc31      	bgt.n	8013e94 <_printf_float+0x34c>
 8013e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e32:	459a      	cmp	sl, r3
 8013e34:	dc3b      	bgt.n	8013eae <_printf_float+0x366>
 8013e36:	6823      	ldr	r3, [r4, #0]
 8013e38:	07da      	lsls	r2, r3, #31
 8013e3a:	d438      	bmi.n	8013eae <_printf_float+0x366>
 8013e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e3e:	ebaa 0903 	sub.w	r9, sl, r3
 8013e42:	9b06      	ldr	r3, [sp, #24]
 8013e44:	ebaa 0303 	sub.w	r3, sl, r3
 8013e48:	4599      	cmp	r9, r3
 8013e4a:	bfa8      	it	ge
 8013e4c:	4699      	movge	r9, r3
 8013e4e:	f1b9 0f00 	cmp.w	r9, #0
 8013e52:	dc34      	bgt.n	8013ebe <_printf_float+0x376>
 8013e54:	f04f 0800 	mov.w	r8, #0
 8013e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e5c:	f104 0b1a 	add.w	fp, r4, #26
 8013e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e62:	ebaa 0303 	sub.w	r3, sl, r3
 8013e66:	eba3 0309 	sub.w	r3, r3, r9
 8013e6a:	4543      	cmp	r3, r8
 8013e6c:	f77f af76 	ble.w	8013d5c <_printf_float+0x214>
 8013e70:	2301      	movs	r3, #1
 8013e72:	465a      	mov	r2, fp
 8013e74:	4631      	mov	r1, r6
 8013e76:	4628      	mov	r0, r5
 8013e78:	47b8      	blx	r7
 8013e7a:	3001      	adds	r0, #1
 8013e7c:	f43f aeb0 	beq.w	8013be0 <_printf_float+0x98>
 8013e80:	f108 0801 	add.w	r8, r8, #1
 8013e84:	e7ec      	b.n	8013e60 <_printf_float+0x318>
 8013e86:	4642      	mov	r2, r8
 8013e88:	4631      	mov	r1, r6
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	47b8      	blx	r7
 8013e8e:	3001      	adds	r0, #1
 8013e90:	d1c1      	bne.n	8013e16 <_printf_float+0x2ce>
 8013e92:	e6a5      	b.n	8013be0 <_printf_float+0x98>
 8013e94:	2301      	movs	r3, #1
 8013e96:	4631      	mov	r1, r6
 8013e98:	4628      	mov	r0, r5
 8013e9a:	9206      	str	r2, [sp, #24]
 8013e9c:	47b8      	blx	r7
 8013e9e:	3001      	adds	r0, #1
 8013ea0:	f43f ae9e 	beq.w	8013be0 <_printf_float+0x98>
 8013ea4:	9b07      	ldr	r3, [sp, #28]
 8013ea6:	9a06      	ldr	r2, [sp, #24]
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	9307      	str	r3, [sp, #28]
 8013eac:	e7b9      	b.n	8013e22 <_printf_float+0x2da>
 8013eae:	9b05      	ldr	r3, [sp, #20]
 8013eb0:	465a      	mov	r2, fp
 8013eb2:	4631      	mov	r1, r6
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	47b8      	blx	r7
 8013eb8:	3001      	adds	r0, #1
 8013eba:	d1bf      	bne.n	8013e3c <_printf_float+0x2f4>
 8013ebc:	e690      	b.n	8013be0 <_printf_float+0x98>
 8013ebe:	9a06      	ldr	r2, [sp, #24]
 8013ec0:	464b      	mov	r3, r9
 8013ec2:	4442      	add	r2, r8
 8013ec4:	4631      	mov	r1, r6
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	47b8      	blx	r7
 8013eca:	3001      	adds	r0, #1
 8013ecc:	d1c2      	bne.n	8013e54 <_printf_float+0x30c>
 8013ece:	e687      	b.n	8013be0 <_printf_float+0x98>
 8013ed0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013ed4:	f1b9 0f01 	cmp.w	r9, #1
 8013ed8:	dc01      	bgt.n	8013ede <_printf_float+0x396>
 8013eda:	07db      	lsls	r3, r3, #31
 8013edc:	d536      	bpl.n	8013f4c <_printf_float+0x404>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	4642      	mov	r2, r8
 8013ee2:	4631      	mov	r1, r6
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	47b8      	blx	r7
 8013ee8:	3001      	adds	r0, #1
 8013eea:	f43f ae79 	beq.w	8013be0 <_printf_float+0x98>
 8013eee:	9b05      	ldr	r3, [sp, #20]
 8013ef0:	465a      	mov	r2, fp
 8013ef2:	4631      	mov	r1, r6
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	47b8      	blx	r7
 8013ef8:	3001      	adds	r0, #1
 8013efa:	f43f ae71 	beq.w	8013be0 <_printf_float+0x98>
 8013efe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013f02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f0e:	d018      	beq.n	8013f42 <_printf_float+0x3fa>
 8013f10:	464b      	mov	r3, r9
 8013f12:	f108 0201 	add.w	r2, r8, #1
 8013f16:	4631      	mov	r1, r6
 8013f18:	4628      	mov	r0, r5
 8013f1a:	47b8      	blx	r7
 8013f1c:	3001      	adds	r0, #1
 8013f1e:	d10c      	bne.n	8013f3a <_printf_float+0x3f2>
 8013f20:	e65e      	b.n	8013be0 <_printf_float+0x98>
 8013f22:	2301      	movs	r3, #1
 8013f24:	465a      	mov	r2, fp
 8013f26:	4631      	mov	r1, r6
 8013f28:	4628      	mov	r0, r5
 8013f2a:	47b8      	blx	r7
 8013f2c:	3001      	adds	r0, #1
 8013f2e:	f43f ae57 	beq.w	8013be0 <_printf_float+0x98>
 8013f32:	f108 0801 	add.w	r8, r8, #1
 8013f36:	45c8      	cmp	r8, r9
 8013f38:	dbf3      	blt.n	8013f22 <_printf_float+0x3da>
 8013f3a:	4653      	mov	r3, sl
 8013f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013f40:	e6dc      	b.n	8013cfc <_printf_float+0x1b4>
 8013f42:	f04f 0800 	mov.w	r8, #0
 8013f46:	f104 0b1a 	add.w	fp, r4, #26
 8013f4a:	e7f4      	b.n	8013f36 <_printf_float+0x3ee>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	4642      	mov	r2, r8
 8013f50:	e7e1      	b.n	8013f16 <_printf_float+0x3ce>
 8013f52:	2301      	movs	r3, #1
 8013f54:	464a      	mov	r2, r9
 8013f56:	4631      	mov	r1, r6
 8013f58:	4628      	mov	r0, r5
 8013f5a:	47b8      	blx	r7
 8013f5c:	3001      	adds	r0, #1
 8013f5e:	f43f ae3f 	beq.w	8013be0 <_printf_float+0x98>
 8013f62:	f108 0801 	add.w	r8, r8, #1
 8013f66:	68e3      	ldr	r3, [r4, #12]
 8013f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013f6a:	1a5b      	subs	r3, r3, r1
 8013f6c:	4543      	cmp	r3, r8
 8013f6e:	dcf0      	bgt.n	8013f52 <_printf_float+0x40a>
 8013f70:	e6f8      	b.n	8013d64 <_printf_float+0x21c>
 8013f72:	f04f 0800 	mov.w	r8, #0
 8013f76:	f104 0919 	add.w	r9, r4, #25
 8013f7a:	e7f4      	b.n	8013f66 <_printf_float+0x41e>

08013f7c <_printf_common>:
 8013f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f80:	4616      	mov	r6, r2
 8013f82:	4698      	mov	r8, r3
 8013f84:	688a      	ldr	r2, [r1, #8]
 8013f86:	690b      	ldr	r3, [r1, #16]
 8013f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	bfb8      	it	lt
 8013f90:	4613      	movlt	r3, r2
 8013f92:	6033      	str	r3, [r6, #0]
 8013f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013f98:	4607      	mov	r7, r0
 8013f9a:	460c      	mov	r4, r1
 8013f9c:	b10a      	cbz	r2, 8013fa2 <_printf_common+0x26>
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	6033      	str	r3, [r6, #0]
 8013fa2:	6823      	ldr	r3, [r4, #0]
 8013fa4:	0699      	lsls	r1, r3, #26
 8013fa6:	bf42      	ittt	mi
 8013fa8:	6833      	ldrmi	r3, [r6, #0]
 8013faa:	3302      	addmi	r3, #2
 8013fac:	6033      	strmi	r3, [r6, #0]
 8013fae:	6825      	ldr	r5, [r4, #0]
 8013fb0:	f015 0506 	ands.w	r5, r5, #6
 8013fb4:	d106      	bne.n	8013fc4 <_printf_common+0x48>
 8013fb6:	f104 0a19 	add.w	sl, r4, #25
 8013fba:	68e3      	ldr	r3, [r4, #12]
 8013fbc:	6832      	ldr	r2, [r6, #0]
 8013fbe:	1a9b      	subs	r3, r3, r2
 8013fc0:	42ab      	cmp	r3, r5
 8013fc2:	dc26      	bgt.n	8014012 <_printf_common+0x96>
 8013fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013fc8:	6822      	ldr	r2, [r4, #0]
 8013fca:	3b00      	subs	r3, #0
 8013fcc:	bf18      	it	ne
 8013fce:	2301      	movne	r3, #1
 8013fd0:	0692      	lsls	r2, r2, #26
 8013fd2:	d42b      	bmi.n	801402c <_printf_common+0xb0>
 8013fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013fd8:	4641      	mov	r1, r8
 8013fda:	4638      	mov	r0, r7
 8013fdc:	47c8      	blx	r9
 8013fde:	3001      	adds	r0, #1
 8013fe0:	d01e      	beq.n	8014020 <_printf_common+0xa4>
 8013fe2:	6823      	ldr	r3, [r4, #0]
 8013fe4:	6922      	ldr	r2, [r4, #16]
 8013fe6:	f003 0306 	and.w	r3, r3, #6
 8013fea:	2b04      	cmp	r3, #4
 8013fec:	bf02      	ittt	eq
 8013fee:	68e5      	ldreq	r5, [r4, #12]
 8013ff0:	6833      	ldreq	r3, [r6, #0]
 8013ff2:	1aed      	subeq	r5, r5, r3
 8013ff4:	68a3      	ldr	r3, [r4, #8]
 8013ff6:	bf0c      	ite	eq
 8013ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ffc:	2500      	movne	r5, #0
 8013ffe:	4293      	cmp	r3, r2
 8014000:	bfc4      	itt	gt
 8014002:	1a9b      	subgt	r3, r3, r2
 8014004:	18ed      	addgt	r5, r5, r3
 8014006:	2600      	movs	r6, #0
 8014008:	341a      	adds	r4, #26
 801400a:	42b5      	cmp	r5, r6
 801400c:	d11a      	bne.n	8014044 <_printf_common+0xc8>
 801400e:	2000      	movs	r0, #0
 8014010:	e008      	b.n	8014024 <_printf_common+0xa8>
 8014012:	2301      	movs	r3, #1
 8014014:	4652      	mov	r2, sl
 8014016:	4641      	mov	r1, r8
 8014018:	4638      	mov	r0, r7
 801401a:	47c8      	blx	r9
 801401c:	3001      	adds	r0, #1
 801401e:	d103      	bne.n	8014028 <_printf_common+0xac>
 8014020:	f04f 30ff 	mov.w	r0, #4294967295
 8014024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014028:	3501      	adds	r5, #1
 801402a:	e7c6      	b.n	8013fba <_printf_common+0x3e>
 801402c:	18e1      	adds	r1, r4, r3
 801402e:	1c5a      	adds	r2, r3, #1
 8014030:	2030      	movs	r0, #48	@ 0x30
 8014032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014036:	4422      	add	r2, r4
 8014038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801403c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014040:	3302      	adds	r3, #2
 8014042:	e7c7      	b.n	8013fd4 <_printf_common+0x58>
 8014044:	2301      	movs	r3, #1
 8014046:	4622      	mov	r2, r4
 8014048:	4641      	mov	r1, r8
 801404a:	4638      	mov	r0, r7
 801404c:	47c8      	blx	r9
 801404e:	3001      	adds	r0, #1
 8014050:	d0e6      	beq.n	8014020 <_printf_common+0xa4>
 8014052:	3601      	adds	r6, #1
 8014054:	e7d9      	b.n	801400a <_printf_common+0x8e>
	...

08014058 <_printf_i>:
 8014058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801405c:	7e0f      	ldrb	r7, [r1, #24]
 801405e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014060:	2f78      	cmp	r7, #120	@ 0x78
 8014062:	4691      	mov	r9, r2
 8014064:	4680      	mov	r8, r0
 8014066:	460c      	mov	r4, r1
 8014068:	469a      	mov	sl, r3
 801406a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801406e:	d807      	bhi.n	8014080 <_printf_i+0x28>
 8014070:	2f62      	cmp	r7, #98	@ 0x62
 8014072:	d80a      	bhi.n	801408a <_printf_i+0x32>
 8014074:	2f00      	cmp	r7, #0
 8014076:	f000 80d1 	beq.w	801421c <_printf_i+0x1c4>
 801407a:	2f58      	cmp	r7, #88	@ 0x58
 801407c:	f000 80b8 	beq.w	80141f0 <_printf_i+0x198>
 8014080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014088:	e03a      	b.n	8014100 <_printf_i+0xa8>
 801408a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801408e:	2b15      	cmp	r3, #21
 8014090:	d8f6      	bhi.n	8014080 <_printf_i+0x28>
 8014092:	a101      	add	r1, pc, #4	@ (adr r1, 8014098 <_printf_i+0x40>)
 8014094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014098:	080140f1 	.word	0x080140f1
 801409c:	08014105 	.word	0x08014105
 80140a0:	08014081 	.word	0x08014081
 80140a4:	08014081 	.word	0x08014081
 80140a8:	08014081 	.word	0x08014081
 80140ac:	08014081 	.word	0x08014081
 80140b0:	08014105 	.word	0x08014105
 80140b4:	08014081 	.word	0x08014081
 80140b8:	08014081 	.word	0x08014081
 80140bc:	08014081 	.word	0x08014081
 80140c0:	08014081 	.word	0x08014081
 80140c4:	08014203 	.word	0x08014203
 80140c8:	0801412f 	.word	0x0801412f
 80140cc:	080141bd 	.word	0x080141bd
 80140d0:	08014081 	.word	0x08014081
 80140d4:	08014081 	.word	0x08014081
 80140d8:	08014225 	.word	0x08014225
 80140dc:	08014081 	.word	0x08014081
 80140e0:	0801412f 	.word	0x0801412f
 80140e4:	08014081 	.word	0x08014081
 80140e8:	08014081 	.word	0x08014081
 80140ec:	080141c5 	.word	0x080141c5
 80140f0:	6833      	ldr	r3, [r6, #0]
 80140f2:	1d1a      	adds	r2, r3, #4
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	6032      	str	r2, [r6, #0]
 80140f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80140fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014100:	2301      	movs	r3, #1
 8014102:	e09c      	b.n	801423e <_printf_i+0x1e6>
 8014104:	6833      	ldr	r3, [r6, #0]
 8014106:	6820      	ldr	r0, [r4, #0]
 8014108:	1d19      	adds	r1, r3, #4
 801410a:	6031      	str	r1, [r6, #0]
 801410c:	0606      	lsls	r6, r0, #24
 801410e:	d501      	bpl.n	8014114 <_printf_i+0xbc>
 8014110:	681d      	ldr	r5, [r3, #0]
 8014112:	e003      	b.n	801411c <_printf_i+0xc4>
 8014114:	0645      	lsls	r5, r0, #25
 8014116:	d5fb      	bpl.n	8014110 <_printf_i+0xb8>
 8014118:	f9b3 5000 	ldrsh.w	r5, [r3]
 801411c:	2d00      	cmp	r5, #0
 801411e:	da03      	bge.n	8014128 <_printf_i+0xd0>
 8014120:	232d      	movs	r3, #45	@ 0x2d
 8014122:	426d      	negs	r5, r5
 8014124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014128:	4858      	ldr	r0, [pc, #352]	@ (801428c <_printf_i+0x234>)
 801412a:	230a      	movs	r3, #10
 801412c:	e011      	b.n	8014152 <_printf_i+0xfa>
 801412e:	6821      	ldr	r1, [r4, #0]
 8014130:	6833      	ldr	r3, [r6, #0]
 8014132:	0608      	lsls	r0, r1, #24
 8014134:	f853 5b04 	ldr.w	r5, [r3], #4
 8014138:	d402      	bmi.n	8014140 <_printf_i+0xe8>
 801413a:	0649      	lsls	r1, r1, #25
 801413c:	bf48      	it	mi
 801413e:	b2ad      	uxthmi	r5, r5
 8014140:	2f6f      	cmp	r7, #111	@ 0x6f
 8014142:	4852      	ldr	r0, [pc, #328]	@ (801428c <_printf_i+0x234>)
 8014144:	6033      	str	r3, [r6, #0]
 8014146:	bf14      	ite	ne
 8014148:	230a      	movne	r3, #10
 801414a:	2308      	moveq	r3, #8
 801414c:	2100      	movs	r1, #0
 801414e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014152:	6866      	ldr	r6, [r4, #4]
 8014154:	60a6      	str	r6, [r4, #8]
 8014156:	2e00      	cmp	r6, #0
 8014158:	db05      	blt.n	8014166 <_printf_i+0x10e>
 801415a:	6821      	ldr	r1, [r4, #0]
 801415c:	432e      	orrs	r6, r5
 801415e:	f021 0104 	bic.w	r1, r1, #4
 8014162:	6021      	str	r1, [r4, #0]
 8014164:	d04b      	beq.n	80141fe <_printf_i+0x1a6>
 8014166:	4616      	mov	r6, r2
 8014168:	fbb5 f1f3 	udiv	r1, r5, r3
 801416c:	fb03 5711 	mls	r7, r3, r1, r5
 8014170:	5dc7      	ldrb	r7, [r0, r7]
 8014172:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014176:	462f      	mov	r7, r5
 8014178:	42bb      	cmp	r3, r7
 801417a:	460d      	mov	r5, r1
 801417c:	d9f4      	bls.n	8014168 <_printf_i+0x110>
 801417e:	2b08      	cmp	r3, #8
 8014180:	d10b      	bne.n	801419a <_printf_i+0x142>
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	07df      	lsls	r7, r3, #31
 8014186:	d508      	bpl.n	801419a <_printf_i+0x142>
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	6861      	ldr	r1, [r4, #4]
 801418c:	4299      	cmp	r1, r3
 801418e:	bfde      	ittt	le
 8014190:	2330      	movle	r3, #48	@ 0x30
 8014192:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014196:	f106 36ff 	addle.w	r6, r6, #4294967295
 801419a:	1b92      	subs	r2, r2, r6
 801419c:	6122      	str	r2, [r4, #16]
 801419e:	f8cd a000 	str.w	sl, [sp]
 80141a2:	464b      	mov	r3, r9
 80141a4:	aa03      	add	r2, sp, #12
 80141a6:	4621      	mov	r1, r4
 80141a8:	4640      	mov	r0, r8
 80141aa:	f7ff fee7 	bl	8013f7c <_printf_common>
 80141ae:	3001      	adds	r0, #1
 80141b0:	d14a      	bne.n	8014248 <_printf_i+0x1f0>
 80141b2:	f04f 30ff 	mov.w	r0, #4294967295
 80141b6:	b004      	add	sp, #16
 80141b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141bc:	6823      	ldr	r3, [r4, #0]
 80141be:	f043 0320 	orr.w	r3, r3, #32
 80141c2:	6023      	str	r3, [r4, #0]
 80141c4:	4832      	ldr	r0, [pc, #200]	@ (8014290 <_printf_i+0x238>)
 80141c6:	2778      	movs	r7, #120	@ 0x78
 80141c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80141cc:	6823      	ldr	r3, [r4, #0]
 80141ce:	6831      	ldr	r1, [r6, #0]
 80141d0:	061f      	lsls	r7, r3, #24
 80141d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80141d6:	d402      	bmi.n	80141de <_printf_i+0x186>
 80141d8:	065f      	lsls	r7, r3, #25
 80141da:	bf48      	it	mi
 80141dc:	b2ad      	uxthmi	r5, r5
 80141de:	6031      	str	r1, [r6, #0]
 80141e0:	07d9      	lsls	r1, r3, #31
 80141e2:	bf44      	itt	mi
 80141e4:	f043 0320 	orrmi.w	r3, r3, #32
 80141e8:	6023      	strmi	r3, [r4, #0]
 80141ea:	b11d      	cbz	r5, 80141f4 <_printf_i+0x19c>
 80141ec:	2310      	movs	r3, #16
 80141ee:	e7ad      	b.n	801414c <_printf_i+0xf4>
 80141f0:	4826      	ldr	r0, [pc, #152]	@ (801428c <_printf_i+0x234>)
 80141f2:	e7e9      	b.n	80141c8 <_printf_i+0x170>
 80141f4:	6823      	ldr	r3, [r4, #0]
 80141f6:	f023 0320 	bic.w	r3, r3, #32
 80141fa:	6023      	str	r3, [r4, #0]
 80141fc:	e7f6      	b.n	80141ec <_printf_i+0x194>
 80141fe:	4616      	mov	r6, r2
 8014200:	e7bd      	b.n	801417e <_printf_i+0x126>
 8014202:	6833      	ldr	r3, [r6, #0]
 8014204:	6825      	ldr	r5, [r4, #0]
 8014206:	6961      	ldr	r1, [r4, #20]
 8014208:	1d18      	adds	r0, r3, #4
 801420a:	6030      	str	r0, [r6, #0]
 801420c:	062e      	lsls	r6, r5, #24
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	d501      	bpl.n	8014216 <_printf_i+0x1be>
 8014212:	6019      	str	r1, [r3, #0]
 8014214:	e002      	b.n	801421c <_printf_i+0x1c4>
 8014216:	0668      	lsls	r0, r5, #25
 8014218:	d5fb      	bpl.n	8014212 <_printf_i+0x1ba>
 801421a:	8019      	strh	r1, [r3, #0]
 801421c:	2300      	movs	r3, #0
 801421e:	6123      	str	r3, [r4, #16]
 8014220:	4616      	mov	r6, r2
 8014222:	e7bc      	b.n	801419e <_printf_i+0x146>
 8014224:	6833      	ldr	r3, [r6, #0]
 8014226:	1d1a      	adds	r2, r3, #4
 8014228:	6032      	str	r2, [r6, #0]
 801422a:	681e      	ldr	r6, [r3, #0]
 801422c:	6862      	ldr	r2, [r4, #4]
 801422e:	2100      	movs	r1, #0
 8014230:	4630      	mov	r0, r6
 8014232:	f7ec f855 	bl	80002e0 <memchr>
 8014236:	b108      	cbz	r0, 801423c <_printf_i+0x1e4>
 8014238:	1b80      	subs	r0, r0, r6
 801423a:	6060      	str	r0, [r4, #4]
 801423c:	6863      	ldr	r3, [r4, #4]
 801423e:	6123      	str	r3, [r4, #16]
 8014240:	2300      	movs	r3, #0
 8014242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014246:	e7aa      	b.n	801419e <_printf_i+0x146>
 8014248:	6923      	ldr	r3, [r4, #16]
 801424a:	4632      	mov	r2, r6
 801424c:	4649      	mov	r1, r9
 801424e:	4640      	mov	r0, r8
 8014250:	47d0      	blx	sl
 8014252:	3001      	adds	r0, #1
 8014254:	d0ad      	beq.n	80141b2 <_printf_i+0x15a>
 8014256:	6823      	ldr	r3, [r4, #0]
 8014258:	079b      	lsls	r3, r3, #30
 801425a:	d413      	bmi.n	8014284 <_printf_i+0x22c>
 801425c:	68e0      	ldr	r0, [r4, #12]
 801425e:	9b03      	ldr	r3, [sp, #12]
 8014260:	4298      	cmp	r0, r3
 8014262:	bfb8      	it	lt
 8014264:	4618      	movlt	r0, r3
 8014266:	e7a6      	b.n	80141b6 <_printf_i+0x15e>
 8014268:	2301      	movs	r3, #1
 801426a:	4632      	mov	r2, r6
 801426c:	4649      	mov	r1, r9
 801426e:	4640      	mov	r0, r8
 8014270:	47d0      	blx	sl
 8014272:	3001      	adds	r0, #1
 8014274:	d09d      	beq.n	80141b2 <_printf_i+0x15a>
 8014276:	3501      	adds	r5, #1
 8014278:	68e3      	ldr	r3, [r4, #12]
 801427a:	9903      	ldr	r1, [sp, #12]
 801427c:	1a5b      	subs	r3, r3, r1
 801427e:	42ab      	cmp	r3, r5
 8014280:	dcf2      	bgt.n	8014268 <_printf_i+0x210>
 8014282:	e7eb      	b.n	801425c <_printf_i+0x204>
 8014284:	2500      	movs	r5, #0
 8014286:	f104 0619 	add.w	r6, r4, #25
 801428a:	e7f5      	b.n	8014278 <_printf_i+0x220>
 801428c:	0801738c 	.word	0x0801738c
 8014290:	0801739d 	.word	0x0801739d

08014294 <std>:
 8014294:	2300      	movs	r3, #0
 8014296:	b510      	push	{r4, lr}
 8014298:	4604      	mov	r4, r0
 801429a:	e9c0 3300 	strd	r3, r3, [r0]
 801429e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142a2:	6083      	str	r3, [r0, #8]
 80142a4:	8181      	strh	r1, [r0, #12]
 80142a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80142a8:	81c2      	strh	r2, [r0, #14]
 80142aa:	6183      	str	r3, [r0, #24]
 80142ac:	4619      	mov	r1, r3
 80142ae:	2208      	movs	r2, #8
 80142b0:	305c      	adds	r0, #92	@ 0x5c
 80142b2:	f000 f906 	bl	80144c2 <memset>
 80142b6:	4b0d      	ldr	r3, [pc, #52]	@ (80142ec <std+0x58>)
 80142b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80142ba:	4b0d      	ldr	r3, [pc, #52]	@ (80142f0 <std+0x5c>)
 80142bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80142be:	4b0d      	ldr	r3, [pc, #52]	@ (80142f4 <std+0x60>)
 80142c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80142c2:	4b0d      	ldr	r3, [pc, #52]	@ (80142f8 <std+0x64>)
 80142c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80142c6:	4b0d      	ldr	r3, [pc, #52]	@ (80142fc <std+0x68>)
 80142c8:	6224      	str	r4, [r4, #32]
 80142ca:	429c      	cmp	r4, r3
 80142cc:	d006      	beq.n	80142dc <std+0x48>
 80142ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80142d2:	4294      	cmp	r4, r2
 80142d4:	d002      	beq.n	80142dc <std+0x48>
 80142d6:	33d0      	adds	r3, #208	@ 0xd0
 80142d8:	429c      	cmp	r4, r3
 80142da:	d105      	bne.n	80142e8 <std+0x54>
 80142dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80142e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142e4:	f000 b9fc 	b.w	80146e0 <__retarget_lock_init_recursive>
 80142e8:	bd10      	pop	{r4, pc}
 80142ea:	bf00      	nop
 80142ec:	0801443d 	.word	0x0801443d
 80142f0:	0801445f 	.word	0x0801445f
 80142f4:	08014497 	.word	0x08014497
 80142f8:	080144bb 	.word	0x080144bb
 80142fc:	240073c0 	.word	0x240073c0

08014300 <stdio_exit_handler>:
 8014300:	4a02      	ldr	r2, [pc, #8]	@ (801430c <stdio_exit_handler+0xc>)
 8014302:	4903      	ldr	r1, [pc, #12]	@ (8014310 <stdio_exit_handler+0x10>)
 8014304:	4803      	ldr	r0, [pc, #12]	@ (8014314 <stdio_exit_handler+0x14>)
 8014306:	f000 b869 	b.w	80143dc <_fwalk_sglue>
 801430a:	bf00      	nop
 801430c:	24000080 	.word	0x24000080
 8014310:	08016881 	.word	0x08016881
 8014314:	240001fc 	.word	0x240001fc

08014318 <cleanup_stdio>:
 8014318:	6841      	ldr	r1, [r0, #4]
 801431a:	4b0c      	ldr	r3, [pc, #48]	@ (801434c <cleanup_stdio+0x34>)
 801431c:	4299      	cmp	r1, r3
 801431e:	b510      	push	{r4, lr}
 8014320:	4604      	mov	r4, r0
 8014322:	d001      	beq.n	8014328 <cleanup_stdio+0x10>
 8014324:	f002 faac 	bl	8016880 <_fflush_r>
 8014328:	68a1      	ldr	r1, [r4, #8]
 801432a:	4b09      	ldr	r3, [pc, #36]	@ (8014350 <cleanup_stdio+0x38>)
 801432c:	4299      	cmp	r1, r3
 801432e:	d002      	beq.n	8014336 <cleanup_stdio+0x1e>
 8014330:	4620      	mov	r0, r4
 8014332:	f002 faa5 	bl	8016880 <_fflush_r>
 8014336:	68e1      	ldr	r1, [r4, #12]
 8014338:	4b06      	ldr	r3, [pc, #24]	@ (8014354 <cleanup_stdio+0x3c>)
 801433a:	4299      	cmp	r1, r3
 801433c:	d004      	beq.n	8014348 <cleanup_stdio+0x30>
 801433e:	4620      	mov	r0, r4
 8014340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014344:	f002 ba9c 	b.w	8016880 <_fflush_r>
 8014348:	bd10      	pop	{r4, pc}
 801434a:	bf00      	nop
 801434c:	240073c0 	.word	0x240073c0
 8014350:	24007428 	.word	0x24007428
 8014354:	24007490 	.word	0x24007490

08014358 <global_stdio_init.part.0>:
 8014358:	b510      	push	{r4, lr}
 801435a:	4b0b      	ldr	r3, [pc, #44]	@ (8014388 <global_stdio_init.part.0+0x30>)
 801435c:	4c0b      	ldr	r4, [pc, #44]	@ (801438c <global_stdio_init.part.0+0x34>)
 801435e:	4a0c      	ldr	r2, [pc, #48]	@ (8014390 <global_stdio_init.part.0+0x38>)
 8014360:	601a      	str	r2, [r3, #0]
 8014362:	4620      	mov	r0, r4
 8014364:	2200      	movs	r2, #0
 8014366:	2104      	movs	r1, #4
 8014368:	f7ff ff94 	bl	8014294 <std>
 801436c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014370:	2201      	movs	r2, #1
 8014372:	2109      	movs	r1, #9
 8014374:	f7ff ff8e 	bl	8014294 <std>
 8014378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801437c:	2202      	movs	r2, #2
 801437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014382:	2112      	movs	r1, #18
 8014384:	f7ff bf86 	b.w	8014294 <std>
 8014388:	240074f8 	.word	0x240074f8
 801438c:	240073c0 	.word	0x240073c0
 8014390:	08014301 	.word	0x08014301

08014394 <__sfp_lock_acquire>:
 8014394:	4801      	ldr	r0, [pc, #4]	@ (801439c <__sfp_lock_acquire+0x8>)
 8014396:	f000 b9a4 	b.w	80146e2 <__retarget_lock_acquire_recursive>
 801439a:	bf00      	nop
 801439c:	24007501 	.word	0x24007501

080143a0 <__sfp_lock_release>:
 80143a0:	4801      	ldr	r0, [pc, #4]	@ (80143a8 <__sfp_lock_release+0x8>)
 80143a2:	f000 b99f 	b.w	80146e4 <__retarget_lock_release_recursive>
 80143a6:	bf00      	nop
 80143a8:	24007501 	.word	0x24007501

080143ac <__sinit>:
 80143ac:	b510      	push	{r4, lr}
 80143ae:	4604      	mov	r4, r0
 80143b0:	f7ff fff0 	bl	8014394 <__sfp_lock_acquire>
 80143b4:	6a23      	ldr	r3, [r4, #32]
 80143b6:	b11b      	cbz	r3, 80143c0 <__sinit+0x14>
 80143b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143bc:	f7ff bff0 	b.w	80143a0 <__sfp_lock_release>
 80143c0:	4b04      	ldr	r3, [pc, #16]	@ (80143d4 <__sinit+0x28>)
 80143c2:	6223      	str	r3, [r4, #32]
 80143c4:	4b04      	ldr	r3, [pc, #16]	@ (80143d8 <__sinit+0x2c>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1f5      	bne.n	80143b8 <__sinit+0xc>
 80143cc:	f7ff ffc4 	bl	8014358 <global_stdio_init.part.0>
 80143d0:	e7f2      	b.n	80143b8 <__sinit+0xc>
 80143d2:	bf00      	nop
 80143d4:	08014319 	.word	0x08014319
 80143d8:	240074f8 	.word	0x240074f8

080143dc <_fwalk_sglue>:
 80143dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143e0:	4607      	mov	r7, r0
 80143e2:	4688      	mov	r8, r1
 80143e4:	4614      	mov	r4, r2
 80143e6:	2600      	movs	r6, #0
 80143e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80143ec:	f1b9 0901 	subs.w	r9, r9, #1
 80143f0:	d505      	bpl.n	80143fe <_fwalk_sglue+0x22>
 80143f2:	6824      	ldr	r4, [r4, #0]
 80143f4:	2c00      	cmp	r4, #0
 80143f6:	d1f7      	bne.n	80143e8 <_fwalk_sglue+0xc>
 80143f8:	4630      	mov	r0, r6
 80143fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143fe:	89ab      	ldrh	r3, [r5, #12]
 8014400:	2b01      	cmp	r3, #1
 8014402:	d907      	bls.n	8014414 <_fwalk_sglue+0x38>
 8014404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014408:	3301      	adds	r3, #1
 801440a:	d003      	beq.n	8014414 <_fwalk_sglue+0x38>
 801440c:	4629      	mov	r1, r5
 801440e:	4638      	mov	r0, r7
 8014410:	47c0      	blx	r8
 8014412:	4306      	orrs	r6, r0
 8014414:	3568      	adds	r5, #104	@ 0x68
 8014416:	e7e9      	b.n	80143ec <_fwalk_sglue+0x10>

08014418 <iprintf>:
 8014418:	b40f      	push	{r0, r1, r2, r3}
 801441a:	b507      	push	{r0, r1, r2, lr}
 801441c:	4906      	ldr	r1, [pc, #24]	@ (8014438 <iprintf+0x20>)
 801441e:	ab04      	add	r3, sp, #16
 8014420:	6808      	ldr	r0, [r1, #0]
 8014422:	f853 2b04 	ldr.w	r2, [r3], #4
 8014426:	6881      	ldr	r1, [r0, #8]
 8014428:	9301      	str	r3, [sp, #4]
 801442a:	f002 f88d 	bl	8016548 <_vfiprintf_r>
 801442e:	b003      	add	sp, #12
 8014430:	f85d eb04 	ldr.w	lr, [sp], #4
 8014434:	b004      	add	sp, #16
 8014436:	4770      	bx	lr
 8014438:	240001f8 	.word	0x240001f8

0801443c <__sread>:
 801443c:	b510      	push	{r4, lr}
 801443e:	460c      	mov	r4, r1
 8014440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014444:	f000 f8fe 	bl	8014644 <_read_r>
 8014448:	2800      	cmp	r0, #0
 801444a:	bfab      	itete	ge
 801444c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801444e:	89a3      	ldrhlt	r3, [r4, #12]
 8014450:	181b      	addge	r3, r3, r0
 8014452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014456:	bfac      	ite	ge
 8014458:	6563      	strge	r3, [r4, #84]	@ 0x54
 801445a:	81a3      	strhlt	r3, [r4, #12]
 801445c:	bd10      	pop	{r4, pc}

0801445e <__swrite>:
 801445e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014462:	461f      	mov	r7, r3
 8014464:	898b      	ldrh	r3, [r1, #12]
 8014466:	05db      	lsls	r3, r3, #23
 8014468:	4605      	mov	r5, r0
 801446a:	460c      	mov	r4, r1
 801446c:	4616      	mov	r6, r2
 801446e:	d505      	bpl.n	801447c <__swrite+0x1e>
 8014470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014474:	2302      	movs	r3, #2
 8014476:	2200      	movs	r2, #0
 8014478:	f000 f8d2 	bl	8014620 <_lseek_r>
 801447c:	89a3      	ldrh	r3, [r4, #12]
 801447e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014486:	81a3      	strh	r3, [r4, #12]
 8014488:	4632      	mov	r2, r6
 801448a:	463b      	mov	r3, r7
 801448c:	4628      	mov	r0, r5
 801448e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014492:	f000 b8e9 	b.w	8014668 <_write_r>

08014496 <__sseek>:
 8014496:	b510      	push	{r4, lr}
 8014498:	460c      	mov	r4, r1
 801449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801449e:	f000 f8bf 	bl	8014620 <_lseek_r>
 80144a2:	1c43      	adds	r3, r0, #1
 80144a4:	89a3      	ldrh	r3, [r4, #12]
 80144a6:	bf15      	itete	ne
 80144a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80144aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80144ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80144b2:	81a3      	strheq	r3, [r4, #12]
 80144b4:	bf18      	it	ne
 80144b6:	81a3      	strhne	r3, [r4, #12]
 80144b8:	bd10      	pop	{r4, pc}

080144ba <__sclose>:
 80144ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144be:	f000 b841 	b.w	8014544 <_close_r>

080144c2 <memset>:
 80144c2:	4402      	add	r2, r0
 80144c4:	4603      	mov	r3, r0
 80144c6:	4293      	cmp	r3, r2
 80144c8:	d100      	bne.n	80144cc <memset+0xa>
 80144ca:	4770      	bx	lr
 80144cc:	f803 1b01 	strb.w	r1, [r3], #1
 80144d0:	e7f9      	b.n	80144c6 <memset+0x4>

080144d2 <strchr>:
 80144d2:	b2c9      	uxtb	r1, r1
 80144d4:	4603      	mov	r3, r0
 80144d6:	4618      	mov	r0, r3
 80144d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144dc:	b112      	cbz	r2, 80144e4 <strchr+0x12>
 80144de:	428a      	cmp	r2, r1
 80144e0:	d1f9      	bne.n	80144d6 <strchr+0x4>
 80144e2:	4770      	bx	lr
 80144e4:	2900      	cmp	r1, #0
 80144e6:	bf18      	it	ne
 80144e8:	2000      	movne	r0, #0
 80144ea:	4770      	bx	lr

080144ec <strncmp>:
 80144ec:	b510      	push	{r4, lr}
 80144ee:	b16a      	cbz	r2, 801450c <strncmp+0x20>
 80144f0:	3901      	subs	r1, #1
 80144f2:	1884      	adds	r4, r0, r2
 80144f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d103      	bne.n	8014508 <strncmp+0x1c>
 8014500:	42a0      	cmp	r0, r4
 8014502:	d001      	beq.n	8014508 <strncmp+0x1c>
 8014504:	2a00      	cmp	r2, #0
 8014506:	d1f5      	bne.n	80144f4 <strncmp+0x8>
 8014508:	1ad0      	subs	r0, r2, r3
 801450a:	bd10      	pop	{r4, pc}
 801450c:	4610      	mov	r0, r2
 801450e:	e7fc      	b.n	801450a <strncmp+0x1e>

08014510 <strrchr>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8014516:	4603      	mov	r3, r0
 8014518:	d10e      	bne.n	8014538 <strrchr+0x28>
 801451a:	4621      	mov	r1, r4
 801451c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014520:	f7ff bfd7 	b.w	80144d2 <strchr>
 8014524:	1c43      	adds	r3, r0, #1
 8014526:	4605      	mov	r5, r0
 8014528:	4621      	mov	r1, r4
 801452a:	4618      	mov	r0, r3
 801452c:	f7ff ffd1 	bl	80144d2 <strchr>
 8014530:	2800      	cmp	r0, #0
 8014532:	d1f7      	bne.n	8014524 <strrchr+0x14>
 8014534:	4628      	mov	r0, r5
 8014536:	bd38      	pop	{r3, r4, r5, pc}
 8014538:	2500      	movs	r5, #0
 801453a:	e7f5      	b.n	8014528 <strrchr+0x18>

0801453c <_localeconv_r>:
 801453c:	4800      	ldr	r0, [pc, #0]	@ (8014540 <_localeconv_r+0x4>)
 801453e:	4770      	bx	lr
 8014540:	2400017c 	.word	0x2400017c

08014544 <_close_r>:
 8014544:	b538      	push	{r3, r4, r5, lr}
 8014546:	4d06      	ldr	r5, [pc, #24]	@ (8014560 <_close_r+0x1c>)
 8014548:	2300      	movs	r3, #0
 801454a:	4604      	mov	r4, r0
 801454c:	4608      	mov	r0, r1
 801454e:	602b      	str	r3, [r5, #0]
 8014550:	f7f1 f9eb 	bl	800592a <_close>
 8014554:	1c43      	adds	r3, r0, #1
 8014556:	d102      	bne.n	801455e <_close_r+0x1a>
 8014558:	682b      	ldr	r3, [r5, #0]
 801455a:	b103      	cbz	r3, 801455e <_close_r+0x1a>
 801455c:	6023      	str	r3, [r4, #0]
 801455e:	bd38      	pop	{r3, r4, r5, pc}
 8014560:	240074fc 	.word	0x240074fc

08014564 <_reclaim_reent>:
 8014564:	4b2d      	ldr	r3, [pc, #180]	@ (801461c <_reclaim_reent+0xb8>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	4283      	cmp	r3, r0
 801456a:	b570      	push	{r4, r5, r6, lr}
 801456c:	4604      	mov	r4, r0
 801456e:	d053      	beq.n	8014618 <_reclaim_reent+0xb4>
 8014570:	69c3      	ldr	r3, [r0, #28]
 8014572:	b31b      	cbz	r3, 80145bc <_reclaim_reent+0x58>
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	b163      	cbz	r3, 8014592 <_reclaim_reent+0x2e>
 8014578:	2500      	movs	r5, #0
 801457a:	69e3      	ldr	r3, [r4, #28]
 801457c:	68db      	ldr	r3, [r3, #12]
 801457e:	5959      	ldr	r1, [r3, r5]
 8014580:	b9b1      	cbnz	r1, 80145b0 <_reclaim_reent+0x4c>
 8014582:	3504      	adds	r5, #4
 8014584:	2d80      	cmp	r5, #128	@ 0x80
 8014586:	d1f8      	bne.n	801457a <_reclaim_reent+0x16>
 8014588:	69e3      	ldr	r3, [r4, #28]
 801458a:	4620      	mov	r0, r4
 801458c:	68d9      	ldr	r1, [r3, #12]
 801458e:	f000 feb1 	bl	80152f4 <_free_r>
 8014592:	69e3      	ldr	r3, [r4, #28]
 8014594:	6819      	ldr	r1, [r3, #0]
 8014596:	b111      	cbz	r1, 801459e <_reclaim_reent+0x3a>
 8014598:	4620      	mov	r0, r4
 801459a:	f000 feab 	bl	80152f4 <_free_r>
 801459e:	69e3      	ldr	r3, [r4, #28]
 80145a0:	689d      	ldr	r5, [r3, #8]
 80145a2:	b15d      	cbz	r5, 80145bc <_reclaim_reent+0x58>
 80145a4:	4629      	mov	r1, r5
 80145a6:	4620      	mov	r0, r4
 80145a8:	682d      	ldr	r5, [r5, #0]
 80145aa:	f000 fea3 	bl	80152f4 <_free_r>
 80145ae:	e7f8      	b.n	80145a2 <_reclaim_reent+0x3e>
 80145b0:	680e      	ldr	r6, [r1, #0]
 80145b2:	4620      	mov	r0, r4
 80145b4:	f000 fe9e 	bl	80152f4 <_free_r>
 80145b8:	4631      	mov	r1, r6
 80145ba:	e7e1      	b.n	8014580 <_reclaim_reent+0x1c>
 80145bc:	6961      	ldr	r1, [r4, #20]
 80145be:	b111      	cbz	r1, 80145c6 <_reclaim_reent+0x62>
 80145c0:	4620      	mov	r0, r4
 80145c2:	f000 fe97 	bl	80152f4 <_free_r>
 80145c6:	69e1      	ldr	r1, [r4, #28]
 80145c8:	b111      	cbz	r1, 80145d0 <_reclaim_reent+0x6c>
 80145ca:	4620      	mov	r0, r4
 80145cc:	f000 fe92 	bl	80152f4 <_free_r>
 80145d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80145d2:	b111      	cbz	r1, 80145da <_reclaim_reent+0x76>
 80145d4:	4620      	mov	r0, r4
 80145d6:	f000 fe8d 	bl	80152f4 <_free_r>
 80145da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145dc:	b111      	cbz	r1, 80145e4 <_reclaim_reent+0x80>
 80145de:	4620      	mov	r0, r4
 80145e0:	f000 fe88 	bl	80152f4 <_free_r>
 80145e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80145e6:	b111      	cbz	r1, 80145ee <_reclaim_reent+0x8a>
 80145e8:	4620      	mov	r0, r4
 80145ea:	f000 fe83 	bl	80152f4 <_free_r>
 80145ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80145f0:	b111      	cbz	r1, 80145f8 <_reclaim_reent+0x94>
 80145f2:	4620      	mov	r0, r4
 80145f4:	f000 fe7e 	bl	80152f4 <_free_r>
 80145f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80145fa:	b111      	cbz	r1, 8014602 <_reclaim_reent+0x9e>
 80145fc:	4620      	mov	r0, r4
 80145fe:	f000 fe79 	bl	80152f4 <_free_r>
 8014602:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014604:	b111      	cbz	r1, 801460c <_reclaim_reent+0xa8>
 8014606:	4620      	mov	r0, r4
 8014608:	f000 fe74 	bl	80152f4 <_free_r>
 801460c:	6a23      	ldr	r3, [r4, #32]
 801460e:	b11b      	cbz	r3, 8014618 <_reclaim_reent+0xb4>
 8014610:	4620      	mov	r0, r4
 8014612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014616:	4718      	bx	r3
 8014618:	bd70      	pop	{r4, r5, r6, pc}
 801461a:	bf00      	nop
 801461c:	240001f8 	.word	0x240001f8

08014620 <_lseek_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	4d07      	ldr	r5, [pc, #28]	@ (8014640 <_lseek_r+0x20>)
 8014624:	4604      	mov	r4, r0
 8014626:	4608      	mov	r0, r1
 8014628:	4611      	mov	r1, r2
 801462a:	2200      	movs	r2, #0
 801462c:	602a      	str	r2, [r5, #0]
 801462e:	461a      	mov	r2, r3
 8014630:	f7f1 f9a2 	bl	8005978 <_lseek>
 8014634:	1c43      	adds	r3, r0, #1
 8014636:	d102      	bne.n	801463e <_lseek_r+0x1e>
 8014638:	682b      	ldr	r3, [r5, #0]
 801463a:	b103      	cbz	r3, 801463e <_lseek_r+0x1e>
 801463c:	6023      	str	r3, [r4, #0]
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	240074fc 	.word	0x240074fc

08014644 <_read_r>:
 8014644:	b538      	push	{r3, r4, r5, lr}
 8014646:	4d07      	ldr	r5, [pc, #28]	@ (8014664 <_read_r+0x20>)
 8014648:	4604      	mov	r4, r0
 801464a:	4608      	mov	r0, r1
 801464c:	4611      	mov	r1, r2
 801464e:	2200      	movs	r2, #0
 8014650:	602a      	str	r2, [r5, #0]
 8014652:	461a      	mov	r2, r3
 8014654:	f7f1 f94c 	bl	80058f0 <_read>
 8014658:	1c43      	adds	r3, r0, #1
 801465a:	d102      	bne.n	8014662 <_read_r+0x1e>
 801465c:	682b      	ldr	r3, [r5, #0]
 801465e:	b103      	cbz	r3, 8014662 <_read_r+0x1e>
 8014660:	6023      	str	r3, [r4, #0]
 8014662:	bd38      	pop	{r3, r4, r5, pc}
 8014664:	240074fc 	.word	0x240074fc

08014668 <_write_r>:
 8014668:	b538      	push	{r3, r4, r5, lr}
 801466a:	4d07      	ldr	r5, [pc, #28]	@ (8014688 <_write_r+0x20>)
 801466c:	4604      	mov	r4, r0
 801466e:	4608      	mov	r0, r1
 8014670:	4611      	mov	r1, r2
 8014672:	2200      	movs	r2, #0
 8014674:	602a      	str	r2, [r5, #0]
 8014676:	461a      	mov	r2, r3
 8014678:	f7ec fdd0 	bl	800121c <_write>
 801467c:	1c43      	adds	r3, r0, #1
 801467e:	d102      	bne.n	8014686 <_write_r+0x1e>
 8014680:	682b      	ldr	r3, [r5, #0]
 8014682:	b103      	cbz	r3, 8014686 <_write_r+0x1e>
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	bd38      	pop	{r3, r4, r5, pc}
 8014688:	240074fc 	.word	0x240074fc

0801468c <__errno>:
 801468c:	4b01      	ldr	r3, [pc, #4]	@ (8014694 <__errno+0x8>)
 801468e:	6818      	ldr	r0, [r3, #0]
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	240001f8 	.word	0x240001f8

08014698 <__libc_init_array>:
 8014698:	b570      	push	{r4, r5, r6, lr}
 801469a:	4d0d      	ldr	r5, [pc, #52]	@ (80146d0 <__libc_init_array+0x38>)
 801469c:	4c0d      	ldr	r4, [pc, #52]	@ (80146d4 <__libc_init_array+0x3c>)
 801469e:	1b64      	subs	r4, r4, r5
 80146a0:	10a4      	asrs	r4, r4, #2
 80146a2:	2600      	movs	r6, #0
 80146a4:	42a6      	cmp	r6, r4
 80146a6:	d109      	bne.n	80146bc <__libc_init_array+0x24>
 80146a8:	4d0b      	ldr	r5, [pc, #44]	@ (80146d8 <__libc_init_array+0x40>)
 80146aa:	4c0c      	ldr	r4, [pc, #48]	@ (80146dc <__libc_init_array+0x44>)
 80146ac:	f002 fd0e 	bl	80170cc <_init>
 80146b0:	1b64      	subs	r4, r4, r5
 80146b2:	10a4      	asrs	r4, r4, #2
 80146b4:	2600      	movs	r6, #0
 80146b6:	42a6      	cmp	r6, r4
 80146b8:	d105      	bne.n	80146c6 <__libc_init_array+0x2e>
 80146ba:	bd70      	pop	{r4, r5, r6, pc}
 80146bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80146c0:	4798      	blx	r3
 80146c2:	3601      	adds	r6, #1
 80146c4:	e7ee      	b.n	80146a4 <__libc_init_array+0xc>
 80146c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80146ca:	4798      	blx	r3
 80146cc:	3601      	adds	r6, #1
 80146ce:	e7f2      	b.n	80146b6 <__libc_init_array+0x1e>
 80146d0:	080178f0 	.word	0x080178f0
 80146d4:	080178f0 	.word	0x080178f0
 80146d8:	080178f0 	.word	0x080178f0
 80146dc:	080178f4 	.word	0x080178f4

080146e0 <__retarget_lock_init_recursive>:
 80146e0:	4770      	bx	lr

080146e2 <__retarget_lock_acquire_recursive>:
 80146e2:	4770      	bx	lr

080146e4 <__retarget_lock_release_recursive>:
 80146e4:	4770      	bx	lr

080146e6 <memcpy>:
 80146e6:	440a      	add	r2, r1
 80146e8:	4291      	cmp	r1, r2
 80146ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80146ee:	d100      	bne.n	80146f2 <memcpy+0xc>
 80146f0:	4770      	bx	lr
 80146f2:	b510      	push	{r4, lr}
 80146f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146fc:	4291      	cmp	r1, r2
 80146fe:	d1f9      	bne.n	80146f4 <memcpy+0xe>
 8014700:	bd10      	pop	{r4, pc}
 8014702:	0000      	movs	r0, r0
 8014704:	0000      	movs	r0, r0
	...

08014708 <nan>:
 8014708:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014710 <nan+0x8>
 801470c:	4770      	bx	lr
 801470e:	bf00      	nop
 8014710:	00000000 	.word	0x00000000
 8014714:	7ff80000 	.word	0x7ff80000

08014718 <nanf>:
 8014718:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014720 <nanf+0x8>
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop
 8014720:	7fc00000 	.word	0x7fc00000

08014724 <quorem>:
 8014724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014728:	6903      	ldr	r3, [r0, #16]
 801472a:	690c      	ldr	r4, [r1, #16]
 801472c:	42a3      	cmp	r3, r4
 801472e:	4607      	mov	r7, r0
 8014730:	db7e      	blt.n	8014830 <quorem+0x10c>
 8014732:	3c01      	subs	r4, #1
 8014734:	f101 0814 	add.w	r8, r1, #20
 8014738:	00a3      	lsls	r3, r4, #2
 801473a:	f100 0514 	add.w	r5, r0, #20
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014744:	9301      	str	r3, [sp, #4]
 8014746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801474a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801474e:	3301      	adds	r3, #1
 8014750:	429a      	cmp	r2, r3
 8014752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014756:	fbb2 f6f3 	udiv	r6, r2, r3
 801475a:	d32e      	bcc.n	80147ba <quorem+0x96>
 801475c:	f04f 0a00 	mov.w	sl, #0
 8014760:	46c4      	mov	ip, r8
 8014762:	46ae      	mov	lr, r5
 8014764:	46d3      	mov	fp, sl
 8014766:	f85c 3b04 	ldr.w	r3, [ip], #4
 801476a:	b298      	uxth	r0, r3
 801476c:	fb06 a000 	mla	r0, r6, r0, sl
 8014770:	0c02      	lsrs	r2, r0, #16
 8014772:	0c1b      	lsrs	r3, r3, #16
 8014774:	fb06 2303 	mla	r3, r6, r3, r2
 8014778:	f8de 2000 	ldr.w	r2, [lr]
 801477c:	b280      	uxth	r0, r0
 801477e:	b292      	uxth	r2, r2
 8014780:	1a12      	subs	r2, r2, r0
 8014782:	445a      	add	r2, fp
 8014784:	f8de 0000 	ldr.w	r0, [lr]
 8014788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801478c:	b29b      	uxth	r3, r3
 801478e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014792:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014796:	b292      	uxth	r2, r2
 8014798:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801479c:	45e1      	cmp	r9, ip
 801479e:	f84e 2b04 	str.w	r2, [lr], #4
 80147a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80147a6:	d2de      	bcs.n	8014766 <quorem+0x42>
 80147a8:	9b00      	ldr	r3, [sp, #0]
 80147aa:	58eb      	ldr	r3, [r5, r3]
 80147ac:	b92b      	cbnz	r3, 80147ba <quorem+0x96>
 80147ae:	9b01      	ldr	r3, [sp, #4]
 80147b0:	3b04      	subs	r3, #4
 80147b2:	429d      	cmp	r5, r3
 80147b4:	461a      	mov	r2, r3
 80147b6:	d32f      	bcc.n	8014818 <quorem+0xf4>
 80147b8:	613c      	str	r4, [r7, #16]
 80147ba:	4638      	mov	r0, r7
 80147bc:	f001 fca2 	bl	8016104 <__mcmp>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	db25      	blt.n	8014810 <quorem+0xec>
 80147c4:	4629      	mov	r1, r5
 80147c6:	2000      	movs	r0, #0
 80147c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80147cc:	f8d1 c000 	ldr.w	ip, [r1]
 80147d0:	fa1f fe82 	uxth.w	lr, r2
 80147d4:	fa1f f38c 	uxth.w	r3, ip
 80147d8:	eba3 030e 	sub.w	r3, r3, lr
 80147dc:	4403      	add	r3, r0
 80147de:	0c12      	lsrs	r2, r2, #16
 80147e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80147e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147ee:	45c1      	cmp	r9, r8
 80147f0:	f841 3b04 	str.w	r3, [r1], #4
 80147f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80147f8:	d2e6      	bcs.n	80147c8 <quorem+0xa4>
 80147fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014802:	b922      	cbnz	r2, 801480e <quorem+0xea>
 8014804:	3b04      	subs	r3, #4
 8014806:	429d      	cmp	r5, r3
 8014808:	461a      	mov	r2, r3
 801480a:	d30b      	bcc.n	8014824 <quorem+0x100>
 801480c:	613c      	str	r4, [r7, #16]
 801480e:	3601      	adds	r6, #1
 8014810:	4630      	mov	r0, r6
 8014812:	b003      	add	sp, #12
 8014814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014818:	6812      	ldr	r2, [r2, #0]
 801481a:	3b04      	subs	r3, #4
 801481c:	2a00      	cmp	r2, #0
 801481e:	d1cb      	bne.n	80147b8 <quorem+0x94>
 8014820:	3c01      	subs	r4, #1
 8014822:	e7c6      	b.n	80147b2 <quorem+0x8e>
 8014824:	6812      	ldr	r2, [r2, #0]
 8014826:	3b04      	subs	r3, #4
 8014828:	2a00      	cmp	r2, #0
 801482a:	d1ef      	bne.n	801480c <quorem+0xe8>
 801482c:	3c01      	subs	r4, #1
 801482e:	e7ea      	b.n	8014806 <quorem+0xe2>
 8014830:	2000      	movs	r0, #0
 8014832:	e7ee      	b.n	8014812 <quorem+0xee>
 8014834:	0000      	movs	r0, r0
	...

08014838 <_dtoa_r>:
 8014838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483c:	ed2d 8b02 	vpush	{d8}
 8014840:	69c7      	ldr	r7, [r0, #28]
 8014842:	b091      	sub	sp, #68	@ 0x44
 8014844:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014848:	ec55 4b10 	vmov	r4, r5, d0
 801484c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801484e:	9107      	str	r1, [sp, #28]
 8014850:	4681      	mov	r9, r0
 8014852:	9209      	str	r2, [sp, #36]	@ 0x24
 8014854:	930d      	str	r3, [sp, #52]	@ 0x34
 8014856:	b97f      	cbnz	r7, 8014878 <_dtoa_r+0x40>
 8014858:	2010      	movs	r0, #16
 801485a:	f001 f8cf 	bl	80159fc <malloc>
 801485e:	4602      	mov	r2, r0
 8014860:	f8c9 001c 	str.w	r0, [r9, #28]
 8014864:	b920      	cbnz	r0, 8014870 <_dtoa_r+0x38>
 8014866:	4ba0      	ldr	r3, [pc, #640]	@ (8014ae8 <_dtoa_r+0x2b0>)
 8014868:	21ef      	movs	r1, #239	@ 0xef
 801486a:	48a0      	ldr	r0, [pc, #640]	@ (8014aec <_dtoa_r+0x2b4>)
 801486c:	f002 f8d4 	bl	8016a18 <__assert_func>
 8014870:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014874:	6007      	str	r7, [r0, #0]
 8014876:	60c7      	str	r7, [r0, #12]
 8014878:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801487c:	6819      	ldr	r1, [r3, #0]
 801487e:	b159      	cbz	r1, 8014898 <_dtoa_r+0x60>
 8014880:	685a      	ldr	r2, [r3, #4]
 8014882:	604a      	str	r2, [r1, #4]
 8014884:	2301      	movs	r3, #1
 8014886:	4093      	lsls	r3, r2
 8014888:	608b      	str	r3, [r1, #8]
 801488a:	4648      	mov	r0, r9
 801488c:	f001 f9be 	bl	8015c0c <_Bfree>
 8014890:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014894:	2200      	movs	r2, #0
 8014896:	601a      	str	r2, [r3, #0]
 8014898:	1e2b      	subs	r3, r5, #0
 801489a:	bfbb      	ittet	lt
 801489c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80148a0:	9303      	strlt	r3, [sp, #12]
 80148a2:	2300      	movge	r3, #0
 80148a4:	2201      	movlt	r2, #1
 80148a6:	bfac      	ite	ge
 80148a8:	6033      	strge	r3, [r6, #0]
 80148aa:	6032      	strlt	r2, [r6, #0]
 80148ac:	4b90      	ldr	r3, [pc, #576]	@ (8014af0 <_dtoa_r+0x2b8>)
 80148ae:	9e03      	ldr	r6, [sp, #12]
 80148b0:	43b3      	bics	r3, r6
 80148b2:	d110      	bne.n	80148d6 <_dtoa_r+0x9e>
 80148b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80148b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80148ba:	6013      	str	r3, [r2, #0]
 80148bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80148c0:	4323      	orrs	r3, r4
 80148c2:	f000 84e6 	beq.w	8015292 <_dtoa_r+0xa5a>
 80148c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80148c8:	4f8a      	ldr	r7, [pc, #552]	@ (8014af4 <_dtoa_r+0x2bc>)
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	f000 84e8 	beq.w	80152a0 <_dtoa_r+0xa68>
 80148d0:	1cfb      	adds	r3, r7, #3
 80148d2:	f000 bce3 	b.w	801529c <_dtoa_r+0xa64>
 80148d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80148da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80148de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e2:	d10a      	bne.n	80148fa <_dtoa_r+0xc2>
 80148e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80148e6:	2301      	movs	r3, #1
 80148e8:	6013      	str	r3, [r2, #0]
 80148ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80148ec:	b113      	cbz	r3, 80148f4 <_dtoa_r+0xbc>
 80148ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80148f0:	4b81      	ldr	r3, [pc, #516]	@ (8014af8 <_dtoa_r+0x2c0>)
 80148f2:	6013      	str	r3, [r2, #0]
 80148f4:	4f81      	ldr	r7, [pc, #516]	@ (8014afc <_dtoa_r+0x2c4>)
 80148f6:	f000 bcd3 	b.w	80152a0 <_dtoa_r+0xa68>
 80148fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80148fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80148fe:	4648      	mov	r0, r9
 8014900:	eeb0 0b48 	vmov.f64	d0, d8
 8014904:	f001 fd1e 	bl	8016344 <__d2b>
 8014908:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801490c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801490e:	9001      	str	r0, [sp, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d045      	beq.n	80149a0 <_dtoa_r+0x168>
 8014914:	eeb0 7b48 	vmov.f64	d7, d8
 8014918:	ee18 1a90 	vmov	r1, s17
 801491c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014920:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014924:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014928:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801492c:	2500      	movs	r5, #0
 801492e:	ee07 1a90 	vmov	s15, r1
 8014932:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014936:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014ad0 <_dtoa_r+0x298>
 801493a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801493e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014ad8 <_dtoa_r+0x2a0>
 8014942:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014946:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8014ae0 <_dtoa_r+0x2a8>
 801494a:	ee07 3a90 	vmov	s15, r3
 801494e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014952:	eeb0 7b46 	vmov.f64	d7, d6
 8014956:	eea4 7b05 	vfma.f64	d7, d4, d5
 801495a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801495e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014966:	ee16 8a90 	vmov	r8, s13
 801496a:	d508      	bpl.n	801497e <_dtoa_r+0x146>
 801496c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014970:	eeb4 6b47 	vcmp.f64	d6, d7
 8014974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014978:	bf18      	it	ne
 801497a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801497e:	f1b8 0f16 	cmp.w	r8, #22
 8014982:	d82b      	bhi.n	80149dc <_dtoa_r+0x1a4>
 8014984:	495e      	ldr	r1, [pc, #376]	@ (8014b00 <_dtoa_r+0x2c8>)
 8014986:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801498a:	ed91 7b00 	vldr	d7, [r1]
 801498e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014996:	d501      	bpl.n	801499c <_dtoa_r+0x164>
 8014998:	f108 38ff 	add.w	r8, r8, #4294967295
 801499c:	2100      	movs	r1, #0
 801499e:	e01e      	b.n	80149de <_dtoa_r+0x1a6>
 80149a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80149a2:	4413      	add	r3, r2
 80149a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80149a8:	2920      	cmp	r1, #32
 80149aa:	bfc1      	itttt	gt
 80149ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80149b0:	408e      	lslgt	r6, r1
 80149b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80149b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80149ba:	bfd6      	itet	le
 80149bc:	f1c1 0120 	rsble	r1, r1, #32
 80149c0:	4331      	orrgt	r1, r6
 80149c2:	fa04 f101 	lslle.w	r1, r4, r1
 80149c6:	ee07 1a90 	vmov	s15, r1
 80149ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80149ce:	3b01      	subs	r3, #1
 80149d0:	ee17 1a90 	vmov	r1, s15
 80149d4:	2501      	movs	r5, #1
 80149d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80149da:	e7a8      	b.n	801492e <_dtoa_r+0xf6>
 80149dc:	2101      	movs	r1, #1
 80149de:	1ad2      	subs	r2, r2, r3
 80149e0:	1e53      	subs	r3, r2, #1
 80149e2:	9306      	str	r3, [sp, #24]
 80149e4:	bf45      	ittet	mi
 80149e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80149ea:	9304      	strmi	r3, [sp, #16]
 80149ec:	2300      	movpl	r3, #0
 80149ee:	2300      	movmi	r3, #0
 80149f0:	bf4c      	ite	mi
 80149f2:	9306      	strmi	r3, [sp, #24]
 80149f4:	9304      	strpl	r3, [sp, #16]
 80149f6:	f1b8 0f00 	cmp.w	r8, #0
 80149fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80149fc:	db18      	blt.n	8014a30 <_dtoa_r+0x1f8>
 80149fe:	9b06      	ldr	r3, [sp, #24]
 8014a00:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014a04:	4443      	add	r3, r8
 8014a06:	9306      	str	r3, [sp, #24]
 8014a08:	2300      	movs	r3, #0
 8014a0a:	9a07      	ldr	r2, [sp, #28]
 8014a0c:	2a09      	cmp	r2, #9
 8014a0e:	d845      	bhi.n	8014a9c <_dtoa_r+0x264>
 8014a10:	2a05      	cmp	r2, #5
 8014a12:	bfc4      	itt	gt
 8014a14:	3a04      	subgt	r2, #4
 8014a16:	9207      	strgt	r2, [sp, #28]
 8014a18:	9a07      	ldr	r2, [sp, #28]
 8014a1a:	f1a2 0202 	sub.w	r2, r2, #2
 8014a1e:	bfcc      	ite	gt
 8014a20:	2400      	movgt	r4, #0
 8014a22:	2401      	movle	r4, #1
 8014a24:	2a03      	cmp	r2, #3
 8014a26:	d844      	bhi.n	8014ab2 <_dtoa_r+0x27a>
 8014a28:	e8df f002 	tbb	[pc, r2]
 8014a2c:	0b173634 	.word	0x0b173634
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	2200      	movs	r2, #0
 8014a34:	eba3 0308 	sub.w	r3, r3, r8
 8014a38:	9304      	str	r3, [sp, #16]
 8014a3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8014a3c:	f1c8 0300 	rsb	r3, r8, #0
 8014a40:	e7e3      	b.n	8014a0a <_dtoa_r+0x1d2>
 8014a42:	2201      	movs	r2, #1
 8014a44:	9208      	str	r2, [sp, #32]
 8014a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a48:	eb08 0b02 	add.w	fp, r8, r2
 8014a4c:	f10b 0a01 	add.w	sl, fp, #1
 8014a50:	4652      	mov	r2, sl
 8014a52:	2a01      	cmp	r2, #1
 8014a54:	bfb8      	it	lt
 8014a56:	2201      	movlt	r2, #1
 8014a58:	e006      	b.n	8014a68 <_dtoa_r+0x230>
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	9208      	str	r2, [sp, #32]
 8014a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a60:	2a00      	cmp	r2, #0
 8014a62:	dd29      	ble.n	8014ab8 <_dtoa_r+0x280>
 8014a64:	4693      	mov	fp, r2
 8014a66:	4692      	mov	sl, r2
 8014a68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8014a6c:	2100      	movs	r1, #0
 8014a6e:	2004      	movs	r0, #4
 8014a70:	f100 0614 	add.w	r6, r0, #20
 8014a74:	4296      	cmp	r6, r2
 8014a76:	d926      	bls.n	8014ac6 <_dtoa_r+0x28e>
 8014a78:	6079      	str	r1, [r7, #4]
 8014a7a:	4648      	mov	r0, r9
 8014a7c:	9305      	str	r3, [sp, #20]
 8014a7e:	f001 f885 	bl	8015b8c <_Balloc>
 8014a82:	9b05      	ldr	r3, [sp, #20]
 8014a84:	4607      	mov	r7, r0
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d13e      	bne.n	8014b08 <_dtoa_r+0x2d0>
 8014a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8014b04 <_dtoa_r+0x2cc>)
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014a92:	e6ea      	b.n	801486a <_dtoa_r+0x32>
 8014a94:	2200      	movs	r2, #0
 8014a96:	e7e1      	b.n	8014a5c <_dtoa_r+0x224>
 8014a98:	2200      	movs	r2, #0
 8014a9a:	e7d3      	b.n	8014a44 <_dtoa_r+0x20c>
 8014a9c:	2401      	movs	r4, #1
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014aa4:	f04f 3bff 	mov.w	fp, #4294967295
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	46da      	mov	sl, fp
 8014aac:	2212      	movs	r2, #18
 8014aae:	9109      	str	r1, [sp, #36]	@ 0x24
 8014ab0:	e7da      	b.n	8014a68 <_dtoa_r+0x230>
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	9208      	str	r2, [sp, #32]
 8014ab6:	e7f5      	b.n	8014aa4 <_dtoa_r+0x26c>
 8014ab8:	f04f 0b01 	mov.w	fp, #1
 8014abc:	46da      	mov	sl, fp
 8014abe:	465a      	mov	r2, fp
 8014ac0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014ac4:	e7d0      	b.n	8014a68 <_dtoa_r+0x230>
 8014ac6:	3101      	adds	r1, #1
 8014ac8:	0040      	lsls	r0, r0, #1
 8014aca:	e7d1      	b.n	8014a70 <_dtoa_r+0x238>
 8014acc:	f3af 8000 	nop.w
 8014ad0:	636f4361 	.word	0x636f4361
 8014ad4:	3fd287a7 	.word	0x3fd287a7
 8014ad8:	8b60c8b3 	.word	0x8b60c8b3
 8014adc:	3fc68a28 	.word	0x3fc68a28
 8014ae0:	509f79fb 	.word	0x509f79fb
 8014ae4:	3fd34413 	.word	0x3fd34413
 8014ae8:	080173c3 	.word	0x080173c3
 8014aec:	080173da 	.word	0x080173da
 8014af0:	7ff00000 	.word	0x7ff00000
 8014af4:	080173bf 	.word	0x080173bf
 8014af8:	0801738b 	.word	0x0801738b
 8014afc:	0801738a 	.word	0x0801738a
 8014b00:	080175d8 	.word	0x080175d8
 8014b04:	08017432 	.word	0x08017432
 8014b08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8014b0c:	f1ba 0f0e 	cmp.w	sl, #14
 8014b10:	6010      	str	r0, [r2, #0]
 8014b12:	d86e      	bhi.n	8014bf2 <_dtoa_r+0x3ba>
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	d06c      	beq.n	8014bf2 <_dtoa_r+0x3ba>
 8014b18:	f1b8 0f00 	cmp.w	r8, #0
 8014b1c:	f340 80b4 	ble.w	8014c88 <_dtoa_r+0x450>
 8014b20:	4ac8      	ldr	r2, [pc, #800]	@ (8014e44 <_dtoa_r+0x60c>)
 8014b22:	f008 010f 	and.w	r1, r8, #15
 8014b26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014b2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8014b2e:	ed92 7b00 	vldr	d7, [r2]
 8014b32:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014b36:	f000 809b 	beq.w	8014c70 <_dtoa_r+0x438>
 8014b3a:	4ac3      	ldr	r2, [pc, #780]	@ (8014e48 <_dtoa_r+0x610>)
 8014b3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014b40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014b44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014b48:	f001 010f 	and.w	r1, r1, #15
 8014b4c:	2203      	movs	r2, #3
 8014b4e:	48be      	ldr	r0, [pc, #760]	@ (8014e48 <_dtoa_r+0x610>)
 8014b50:	2900      	cmp	r1, #0
 8014b52:	f040 808f 	bne.w	8014c74 <_dtoa_r+0x43c>
 8014b56:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014b5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014b5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b68:	2900      	cmp	r1, #0
 8014b6a:	f000 80b3 	beq.w	8014cd4 <_dtoa_r+0x49c>
 8014b6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014b72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7a:	f140 80ab 	bpl.w	8014cd4 <_dtoa_r+0x49c>
 8014b7e:	f1ba 0f00 	cmp.w	sl, #0
 8014b82:	f000 80a7 	beq.w	8014cd4 <_dtoa_r+0x49c>
 8014b86:	f1bb 0f00 	cmp.w	fp, #0
 8014b8a:	dd30      	ble.n	8014bee <_dtoa_r+0x3b6>
 8014b8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014b90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b98:	f108 31ff 	add.w	r1, r8, #4294967295
 8014b9c:	9105      	str	r1, [sp, #20]
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	465c      	mov	r4, fp
 8014ba2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ba6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8014baa:	ee07 2a90 	vmov	s15, r2
 8014bae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014bb2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014bb6:	ee15 2a90 	vmov	r2, s11
 8014bba:	ec51 0b15 	vmov	r0, r1, d5
 8014bbe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014bc2:	2c00      	cmp	r4, #0
 8014bc4:	f040 808a 	bne.w	8014cdc <_dtoa_r+0x4a4>
 8014bc8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014bcc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014bd0:	ec41 0b17 	vmov	d7, r0, r1
 8014bd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bdc:	f300 826a 	bgt.w	80150b4 <_dtoa_r+0x87c>
 8014be0:	eeb1 7b47 	vneg.f64	d7, d7
 8014be4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bec:	d423      	bmi.n	8014c36 <_dtoa_r+0x3fe>
 8014bee:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014bf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014bf4:	2a00      	cmp	r2, #0
 8014bf6:	f2c0 8129 	blt.w	8014e4c <_dtoa_r+0x614>
 8014bfa:	f1b8 0f0e 	cmp.w	r8, #14
 8014bfe:	f300 8125 	bgt.w	8014e4c <_dtoa_r+0x614>
 8014c02:	4b90      	ldr	r3, [pc, #576]	@ (8014e44 <_dtoa_r+0x60c>)
 8014c04:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014c08:	ed93 6b00 	vldr	d6, [r3]
 8014c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	f280 80c8 	bge.w	8014da4 <_dtoa_r+0x56c>
 8014c14:	f1ba 0f00 	cmp.w	sl, #0
 8014c18:	f300 80c4 	bgt.w	8014da4 <_dtoa_r+0x56c>
 8014c1c:	d10b      	bne.n	8014c36 <_dtoa_r+0x3fe>
 8014c1e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014c22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014c26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c32:	f2c0 823c 	blt.w	80150ae <_dtoa_r+0x876>
 8014c36:	2400      	movs	r4, #0
 8014c38:	4625      	mov	r5, r4
 8014c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c3c:	43db      	mvns	r3, r3
 8014c3e:	9305      	str	r3, [sp, #20]
 8014c40:	463e      	mov	r6, r7
 8014c42:	f04f 0800 	mov.w	r8, #0
 8014c46:	4621      	mov	r1, r4
 8014c48:	4648      	mov	r0, r9
 8014c4a:	f000 ffdf 	bl	8015c0c <_Bfree>
 8014c4e:	2d00      	cmp	r5, #0
 8014c50:	f000 80a2 	beq.w	8014d98 <_dtoa_r+0x560>
 8014c54:	f1b8 0f00 	cmp.w	r8, #0
 8014c58:	d005      	beq.n	8014c66 <_dtoa_r+0x42e>
 8014c5a:	45a8      	cmp	r8, r5
 8014c5c:	d003      	beq.n	8014c66 <_dtoa_r+0x42e>
 8014c5e:	4641      	mov	r1, r8
 8014c60:	4648      	mov	r0, r9
 8014c62:	f000 ffd3 	bl	8015c0c <_Bfree>
 8014c66:	4629      	mov	r1, r5
 8014c68:	4648      	mov	r0, r9
 8014c6a:	f000 ffcf 	bl	8015c0c <_Bfree>
 8014c6e:	e093      	b.n	8014d98 <_dtoa_r+0x560>
 8014c70:	2202      	movs	r2, #2
 8014c72:	e76c      	b.n	8014b4e <_dtoa_r+0x316>
 8014c74:	07cc      	lsls	r4, r1, #31
 8014c76:	d504      	bpl.n	8014c82 <_dtoa_r+0x44a>
 8014c78:	ed90 6b00 	vldr	d6, [r0]
 8014c7c:	3201      	adds	r2, #1
 8014c7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c82:	1049      	asrs	r1, r1, #1
 8014c84:	3008      	adds	r0, #8
 8014c86:	e763      	b.n	8014b50 <_dtoa_r+0x318>
 8014c88:	d022      	beq.n	8014cd0 <_dtoa_r+0x498>
 8014c8a:	f1c8 0100 	rsb	r1, r8, #0
 8014c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8014e44 <_dtoa_r+0x60c>)
 8014c90:	f001 000f 	and.w	r0, r1, #15
 8014c94:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014c98:	ed92 7b00 	vldr	d7, [r2]
 8014c9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014ca0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ca4:	4868      	ldr	r0, [pc, #416]	@ (8014e48 <_dtoa_r+0x610>)
 8014ca6:	1109      	asrs	r1, r1, #4
 8014ca8:	2400      	movs	r4, #0
 8014caa:	2202      	movs	r2, #2
 8014cac:	b929      	cbnz	r1, 8014cba <_dtoa_r+0x482>
 8014cae:	2c00      	cmp	r4, #0
 8014cb0:	f43f af57 	beq.w	8014b62 <_dtoa_r+0x32a>
 8014cb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cb8:	e753      	b.n	8014b62 <_dtoa_r+0x32a>
 8014cba:	07ce      	lsls	r6, r1, #31
 8014cbc:	d505      	bpl.n	8014cca <_dtoa_r+0x492>
 8014cbe:	ed90 6b00 	vldr	d6, [r0]
 8014cc2:	3201      	adds	r2, #1
 8014cc4:	2401      	movs	r4, #1
 8014cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014cca:	1049      	asrs	r1, r1, #1
 8014ccc:	3008      	adds	r0, #8
 8014cce:	e7ed      	b.n	8014cac <_dtoa_r+0x474>
 8014cd0:	2202      	movs	r2, #2
 8014cd2:	e746      	b.n	8014b62 <_dtoa_r+0x32a>
 8014cd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8014cd8:	4654      	mov	r4, sl
 8014cda:	e762      	b.n	8014ba2 <_dtoa_r+0x36a>
 8014cdc:	4a59      	ldr	r2, [pc, #356]	@ (8014e44 <_dtoa_r+0x60c>)
 8014cde:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014ce2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014ce6:	9a08      	ldr	r2, [sp, #32]
 8014ce8:	ec41 0b17 	vmov	d7, r0, r1
 8014cec:	443c      	add	r4, r7
 8014cee:	b34a      	cbz	r2, 8014d44 <_dtoa_r+0x50c>
 8014cf0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014cf4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014cf8:	463e      	mov	r6, r7
 8014cfa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014cfe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014d02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014d06:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014d0a:	ee14 2a90 	vmov	r2, s9
 8014d0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014d12:	3230      	adds	r2, #48	@ 0x30
 8014d14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014d18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d20:	f806 2b01 	strb.w	r2, [r6], #1
 8014d24:	d438      	bmi.n	8014d98 <_dtoa_r+0x560>
 8014d26:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014d2a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d32:	d46e      	bmi.n	8014e12 <_dtoa_r+0x5da>
 8014d34:	42a6      	cmp	r6, r4
 8014d36:	f43f af5a 	beq.w	8014bee <_dtoa_r+0x3b6>
 8014d3a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014d3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014d42:	e7e0      	b.n	8014d06 <_dtoa_r+0x4ce>
 8014d44:	4621      	mov	r1, r4
 8014d46:	463e      	mov	r6, r7
 8014d48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014d4c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014d50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014d54:	ee14 2a90 	vmov	r2, s9
 8014d58:	3230      	adds	r2, #48	@ 0x30
 8014d5a:	f806 2b01 	strb.w	r2, [r6], #1
 8014d5e:	42a6      	cmp	r6, r4
 8014d60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014d64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014d68:	d119      	bne.n	8014d9e <_dtoa_r+0x566>
 8014d6a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8014d6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014d72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7a:	dc4a      	bgt.n	8014e12 <_dtoa_r+0x5da>
 8014d7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014d80:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d88:	f57f af31 	bpl.w	8014bee <_dtoa_r+0x3b6>
 8014d8c:	460e      	mov	r6, r1
 8014d8e:	3901      	subs	r1, #1
 8014d90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014d94:	2b30      	cmp	r3, #48	@ 0x30
 8014d96:	d0f9      	beq.n	8014d8c <_dtoa_r+0x554>
 8014d98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014d9c:	e027      	b.n	8014dee <_dtoa_r+0x5b6>
 8014d9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014da2:	e7d5      	b.n	8014d50 <_dtoa_r+0x518>
 8014da4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014da8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014dac:	463e      	mov	r6, r7
 8014dae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014db2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014db6:	ee15 3a10 	vmov	r3, s10
 8014dba:	3330      	adds	r3, #48	@ 0x30
 8014dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8014dc0:	1bf3      	subs	r3, r6, r7
 8014dc2:	459a      	cmp	sl, r3
 8014dc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014dc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014dcc:	d132      	bne.n	8014e34 <_dtoa_r+0x5fc>
 8014dce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014dd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dda:	dc18      	bgt.n	8014e0e <_dtoa_r+0x5d6>
 8014ddc:	eeb4 7b46 	vcmp.f64	d7, d6
 8014de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de4:	d103      	bne.n	8014dee <_dtoa_r+0x5b6>
 8014de6:	ee15 3a10 	vmov	r3, s10
 8014dea:	07db      	lsls	r3, r3, #31
 8014dec:	d40f      	bmi.n	8014e0e <_dtoa_r+0x5d6>
 8014dee:	9901      	ldr	r1, [sp, #4]
 8014df0:	4648      	mov	r0, r9
 8014df2:	f000 ff0b 	bl	8015c0c <_Bfree>
 8014df6:	2300      	movs	r3, #0
 8014df8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014dfa:	7033      	strb	r3, [r6, #0]
 8014dfc:	f108 0301 	add.w	r3, r8, #1
 8014e00:	6013      	str	r3, [r2, #0]
 8014e02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f000 824b 	beq.w	80152a0 <_dtoa_r+0xa68>
 8014e0a:	601e      	str	r6, [r3, #0]
 8014e0c:	e248      	b.n	80152a0 <_dtoa_r+0xa68>
 8014e0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8014e12:	4633      	mov	r3, r6
 8014e14:	461e      	mov	r6, r3
 8014e16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e1a:	2a39      	cmp	r2, #57	@ 0x39
 8014e1c:	d106      	bne.n	8014e2c <_dtoa_r+0x5f4>
 8014e1e:	429f      	cmp	r7, r3
 8014e20:	d1f8      	bne.n	8014e14 <_dtoa_r+0x5dc>
 8014e22:	9a05      	ldr	r2, [sp, #20]
 8014e24:	3201      	adds	r2, #1
 8014e26:	9205      	str	r2, [sp, #20]
 8014e28:	2230      	movs	r2, #48	@ 0x30
 8014e2a:	703a      	strb	r2, [r7, #0]
 8014e2c:	781a      	ldrb	r2, [r3, #0]
 8014e2e:	3201      	adds	r2, #1
 8014e30:	701a      	strb	r2, [r3, #0]
 8014e32:	e7b1      	b.n	8014d98 <_dtoa_r+0x560>
 8014e34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014e38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e40:	d1b5      	bne.n	8014dae <_dtoa_r+0x576>
 8014e42:	e7d4      	b.n	8014dee <_dtoa_r+0x5b6>
 8014e44:	080175d8 	.word	0x080175d8
 8014e48:	080175b0 	.word	0x080175b0
 8014e4c:	9908      	ldr	r1, [sp, #32]
 8014e4e:	2900      	cmp	r1, #0
 8014e50:	f000 80e9 	beq.w	8015026 <_dtoa_r+0x7ee>
 8014e54:	9907      	ldr	r1, [sp, #28]
 8014e56:	2901      	cmp	r1, #1
 8014e58:	f300 80cb 	bgt.w	8014ff2 <_dtoa_r+0x7ba>
 8014e5c:	2d00      	cmp	r5, #0
 8014e5e:	f000 80c4 	beq.w	8014fea <_dtoa_r+0x7b2>
 8014e62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014e66:	9e04      	ldr	r6, [sp, #16]
 8014e68:	461c      	mov	r4, r3
 8014e6a:	9305      	str	r3, [sp, #20]
 8014e6c:	9b04      	ldr	r3, [sp, #16]
 8014e6e:	4413      	add	r3, r2
 8014e70:	9304      	str	r3, [sp, #16]
 8014e72:	9b06      	ldr	r3, [sp, #24]
 8014e74:	2101      	movs	r1, #1
 8014e76:	4413      	add	r3, r2
 8014e78:	4648      	mov	r0, r9
 8014e7a:	9306      	str	r3, [sp, #24]
 8014e7c:	f000 ffc4 	bl	8015e08 <__i2b>
 8014e80:	9b05      	ldr	r3, [sp, #20]
 8014e82:	4605      	mov	r5, r0
 8014e84:	b166      	cbz	r6, 8014ea0 <_dtoa_r+0x668>
 8014e86:	9a06      	ldr	r2, [sp, #24]
 8014e88:	2a00      	cmp	r2, #0
 8014e8a:	dd09      	ble.n	8014ea0 <_dtoa_r+0x668>
 8014e8c:	42b2      	cmp	r2, r6
 8014e8e:	9904      	ldr	r1, [sp, #16]
 8014e90:	bfa8      	it	ge
 8014e92:	4632      	movge	r2, r6
 8014e94:	1a89      	subs	r1, r1, r2
 8014e96:	9104      	str	r1, [sp, #16]
 8014e98:	9906      	ldr	r1, [sp, #24]
 8014e9a:	1ab6      	subs	r6, r6, r2
 8014e9c:	1a8a      	subs	r2, r1, r2
 8014e9e:	9206      	str	r2, [sp, #24]
 8014ea0:	b30b      	cbz	r3, 8014ee6 <_dtoa_r+0x6ae>
 8014ea2:	9a08      	ldr	r2, [sp, #32]
 8014ea4:	2a00      	cmp	r2, #0
 8014ea6:	f000 80c5 	beq.w	8015034 <_dtoa_r+0x7fc>
 8014eaa:	2c00      	cmp	r4, #0
 8014eac:	f000 80bf 	beq.w	801502e <_dtoa_r+0x7f6>
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	4622      	mov	r2, r4
 8014eb4:	4648      	mov	r0, r9
 8014eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014eb8:	f001 f85e 	bl	8015f78 <__pow5mult>
 8014ebc:	9a01      	ldr	r2, [sp, #4]
 8014ebe:	4601      	mov	r1, r0
 8014ec0:	4605      	mov	r5, r0
 8014ec2:	4648      	mov	r0, r9
 8014ec4:	f000 ffb6 	bl	8015e34 <__multiply>
 8014ec8:	9901      	ldr	r1, [sp, #4]
 8014eca:	9005      	str	r0, [sp, #20]
 8014ecc:	4648      	mov	r0, r9
 8014ece:	f000 fe9d 	bl	8015c0c <_Bfree>
 8014ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ed4:	1b1b      	subs	r3, r3, r4
 8014ed6:	f000 80b0 	beq.w	801503a <_dtoa_r+0x802>
 8014eda:	9905      	ldr	r1, [sp, #20]
 8014edc:	461a      	mov	r2, r3
 8014ede:	4648      	mov	r0, r9
 8014ee0:	f001 f84a 	bl	8015f78 <__pow5mult>
 8014ee4:	9001      	str	r0, [sp, #4]
 8014ee6:	2101      	movs	r1, #1
 8014ee8:	4648      	mov	r0, r9
 8014eea:	f000 ff8d 	bl	8015e08 <__i2b>
 8014eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	f000 81da 	beq.w	80152ac <_dtoa_r+0xa74>
 8014ef8:	461a      	mov	r2, r3
 8014efa:	4601      	mov	r1, r0
 8014efc:	4648      	mov	r0, r9
 8014efe:	f001 f83b 	bl	8015f78 <__pow5mult>
 8014f02:	9b07      	ldr	r3, [sp, #28]
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	4604      	mov	r4, r0
 8014f08:	f300 80a0 	bgt.w	801504c <_dtoa_r+0x814>
 8014f0c:	9b02      	ldr	r3, [sp, #8]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f040 8096 	bne.w	8015040 <_dtoa_r+0x808>
 8014f14:	9b03      	ldr	r3, [sp, #12]
 8014f16:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014f1a:	2a00      	cmp	r2, #0
 8014f1c:	f040 8092 	bne.w	8015044 <_dtoa_r+0x80c>
 8014f20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014f24:	0d12      	lsrs	r2, r2, #20
 8014f26:	0512      	lsls	r2, r2, #20
 8014f28:	2a00      	cmp	r2, #0
 8014f2a:	f000 808d 	beq.w	8015048 <_dtoa_r+0x810>
 8014f2e:	9b04      	ldr	r3, [sp, #16]
 8014f30:	3301      	adds	r3, #1
 8014f32:	9304      	str	r3, [sp, #16]
 8014f34:	9b06      	ldr	r3, [sp, #24]
 8014f36:	3301      	adds	r3, #1
 8014f38:	9306      	str	r3, [sp, #24]
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f000 81b9 	beq.w	80152b8 <_dtoa_r+0xa80>
 8014f46:	6922      	ldr	r2, [r4, #16]
 8014f48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014f4c:	6910      	ldr	r0, [r2, #16]
 8014f4e:	f000 ff0f 	bl	8015d70 <__hi0bits>
 8014f52:	f1c0 0020 	rsb	r0, r0, #32
 8014f56:	9b06      	ldr	r3, [sp, #24]
 8014f58:	4418      	add	r0, r3
 8014f5a:	f010 001f 	ands.w	r0, r0, #31
 8014f5e:	f000 8081 	beq.w	8015064 <_dtoa_r+0x82c>
 8014f62:	f1c0 0220 	rsb	r2, r0, #32
 8014f66:	2a04      	cmp	r2, #4
 8014f68:	dd73      	ble.n	8015052 <_dtoa_r+0x81a>
 8014f6a:	9b04      	ldr	r3, [sp, #16]
 8014f6c:	f1c0 001c 	rsb	r0, r0, #28
 8014f70:	4403      	add	r3, r0
 8014f72:	9304      	str	r3, [sp, #16]
 8014f74:	9b06      	ldr	r3, [sp, #24]
 8014f76:	4406      	add	r6, r0
 8014f78:	4403      	add	r3, r0
 8014f7a:	9306      	str	r3, [sp, #24]
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	dd05      	ble.n	8014f8e <_dtoa_r+0x756>
 8014f82:	9901      	ldr	r1, [sp, #4]
 8014f84:	461a      	mov	r2, r3
 8014f86:	4648      	mov	r0, r9
 8014f88:	f001 f850 	bl	801602c <__lshift>
 8014f8c:	9001      	str	r0, [sp, #4]
 8014f8e:	9b06      	ldr	r3, [sp, #24]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	dd05      	ble.n	8014fa0 <_dtoa_r+0x768>
 8014f94:	4621      	mov	r1, r4
 8014f96:	461a      	mov	r2, r3
 8014f98:	4648      	mov	r0, r9
 8014f9a:	f001 f847 	bl	801602c <__lshift>
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d060      	beq.n	8015068 <_dtoa_r+0x830>
 8014fa6:	9801      	ldr	r0, [sp, #4]
 8014fa8:	4621      	mov	r1, r4
 8014faa:	f001 f8ab 	bl	8016104 <__mcmp>
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	da5a      	bge.n	8015068 <_dtoa_r+0x830>
 8014fb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8014fb6:	9305      	str	r3, [sp, #20]
 8014fb8:	9901      	ldr	r1, [sp, #4]
 8014fba:	2300      	movs	r3, #0
 8014fbc:	220a      	movs	r2, #10
 8014fbe:	4648      	mov	r0, r9
 8014fc0:	f000 fe46 	bl	8015c50 <__multadd>
 8014fc4:	9b08      	ldr	r3, [sp, #32]
 8014fc6:	9001      	str	r0, [sp, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f000 8177 	beq.w	80152bc <_dtoa_r+0xa84>
 8014fce:	4629      	mov	r1, r5
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	220a      	movs	r2, #10
 8014fd4:	4648      	mov	r0, r9
 8014fd6:	f000 fe3b 	bl	8015c50 <__multadd>
 8014fda:	f1bb 0f00 	cmp.w	fp, #0
 8014fde:	4605      	mov	r5, r0
 8014fe0:	dc6e      	bgt.n	80150c0 <_dtoa_r+0x888>
 8014fe2:	9b07      	ldr	r3, [sp, #28]
 8014fe4:	2b02      	cmp	r3, #2
 8014fe6:	dc48      	bgt.n	801507a <_dtoa_r+0x842>
 8014fe8:	e06a      	b.n	80150c0 <_dtoa_r+0x888>
 8014fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014fec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014ff0:	e739      	b.n	8014e66 <_dtoa_r+0x62e>
 8014ff2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014ff6:	42a3      	cmp	r3, r4
 8014ff8:	db07      	blt.n	801500a <_dtoa_r+0x7d2>
 8014ffa:	f1ba 0f00 	cmp.w	sl, #0
 8014ffe:	eba3 0404 	sub.w	r4, r3, r4
 8015002:	db0b      	blt.n	801501c <_dtoa_r+0x7e4>
 8015004:	9e04      	ldr	r6, [sp, #16]
 8015006:	4652      	mov	r2, sl
 8015008:	e72f      	b.n	8014e6a <_dtoa_r+0x632>
 801500a:	1ae2      	subs	r2, r4, r3
 801500c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801500e:	9e04      	ldr	r6, [sp, #16]
 8015010:	4413      	add	r3, r2
 8015012:	930a      	str	r3, [sp, #40]	@ 0x28
 8015014:	4652      	mov	r2, sl
 8015016:	4623      	mov	r3, r4
 8015018:	2400      	movs	r4, #0
 801501a:	e726      	b.n	8014e6a <_dtoa_r+0x632>
 801501c:	9a04      	ldr	r2, [sp, #16]
 801501e:	eba2 060a 	sub.w	r6, r2, sl
 8015022:	2200      	movs	r2, #0
 8015024:	e721      	b.n	8014e6a <_dtoa_r+0x632>
 8015026:	9e04      	ldr	r6, [sp, #16]
 8015028:	9d08      	ldr	r5, [sp, #32]
 801502a:	461c      	mov	r4, r3
 801502c:	e72a      	b.n	8014e84 <_dtoa_r+0x64c>
 801502e:	9a01      	ldr	r2, [sp, #4]
 8015030:	9205      	str	r2, [sp, #20]
 8015032:	e752      	b.n	8014eda <_dtoa_r+0x6a2>
 8015034:	9901      	ldr	r1, [sp, #4]
 8015036:	461a      	mov	r2, r3
 8015038:	e751      	b.n	8014ede <_dtoa_r+0x6a6>
 801503a:	9b05      	ldr	r3, [sp, #20]
 801503c:	9301      	str	r3, [sp, #4]
 801503e:	e752      	b.n	8014ee6 <_dtoa_r+0x6ae>
 8015040:	2300      	movs	r3, #0
 8015042:	e77b      	b.n	8014f3c <_dtoa_r+0x704>
 8015044:	9b02      	ldr	r3, [sp, #8]
 8015046:	e779      	b.n	8014f3c <_dtoa_r+0x704>
 8015048:	920b      	str	r2, [sp, #44]	@ 0x2c
 801504a:	e778      	b.n	8014f3e <_dtoa_r+0x706>
 801504c:	2300      	movs	r3, #0
 801504e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015050:	e779      	b.n	8014f46 <_dtoa_r+0x70e>
 8015052:	d093      	beq.n	8014f7c <_dtoa_r+0x744>
 8015054:	9b04      	ldr	r3, [sp, #16]
 8015056:	321c      	adds	r2, #28
 8015058:	4413      	add	r3, r2
 801505a:	9304      	str	r3, [sp, #16]
 801505c:	9b06      	ldr	r3, [sp, #24]
 801505e:	4416      	add	r6, r2
 8015060:	4413      	add	r3, r2
 8015062:	e78a      	b.n	8014f7a <_dtoa_r+0x742>
 8015064:	4602      	mov	r2, r0
 8015066:	e7f5      	b.n	8015054 <_dtoa_r+0x81c>
 8015068:	f1ba 0f00 	cmp.w	sl, #0
 801506c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015070:	46d3      	mov	fp, sl
 8015072:	dc21      	bgt.n	80150b8 <_dtoa_r+0x880>
 8015074:	9b07      	ldr	r3, [sp, #28]
 8015076:	2b02      	cmp	r3, #2
 8015078:	dd1e      	ble.n	80150b8 <_dtoa_r+0x880>
 801507a:	f1bb 0f00 	cmp.w	fp, #0
 801507e:	f47f addc 	bne.w	8014c3a <_dtoa_r+0x402>
 8015082:	4621      	mov	r1, r4
 8015084:	465b      	mov	r3, fp
 8015086:	2205      	movs	r2, #5
 8015088:	4648      	mov	r0, r9
 801508a:	f000 fde1 	bl	8015c50 <__multadd>
 801508e:	4601      	mov	r1, r0
 8015090:	4604      	mov	r4, r0
 8015092:	9801      	ldr	r0, [sp, #4]
 8015094:	f001 f836 	bl	8016104 <__mcmp>
 8015098:	2800      	cmp	r0, #0
 801509a:	f77f adce 	ble.w	8014c3a <_dtoa_r+0x402>
 801509e:	463e      	mov	r6, r7
 80150a0:	2331      	movs	r3, #49	@ 0x31
 80150a2:	f806 3b01 	strb.w	r3, [r6], #1
 80150a6:	9b05      	ldr	r3, [sp, #20]
 80150a8:	3301      	adds	r3, #1
 80150aa:	9305      	str	r3, [sp, #20]
 80150ac:	e5c9      	b.n	8014c42 <_dtoa_r+0x40a>
 80150ae:	f8cd 8014 	str.w	r8, [sp, #20]
 80150b2:	4654      	mov	r4, sl
 80150b4:	4625      	mov	r5, r4
 80150b6:	e7f2      	b.n	801509e <_dtoa_r+0x866>
 80150b8:	9b08      	ldr	r3, [sp, #32]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	f000 8102 	beq.w	80152c4 <_dtoa_r+0xa8c>
 80150c0:	2e00      	cmp	r6, #0
 80150c2:	dd05      	ble.n	80150d0 <_dtoa_r+0x898>
 80150c4:	4629      	mov	r1, r5
 80150c6:	4632      	mov	r2, r6
 80150c8:	4648      	mov	r0, r9
 80150ca:	f000 ffaf 	bl	801602c <__lshift>
 80150ce:	4605      	mov	r5, r0
 80150d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d058      	beq.n	8015188 <_dtoa_r+0x950>
 80150d6:	6869      	ldr	r1, [r5, #4]
 80150d8:	4648      	mov	r0, r9
 80150da:	f000 fd57 	bl	8015b8c <_Balloc>
 80150de:	4606      	mov	r6, r0
 80150e0:	b928      	cbnz	r0, 80150ee <_dtoa_r+0x8b6>
 80150e2:	4b82      	ldr	r3, [pc, #520]	@ (80152ec <_dtoa_r+0xab4>)
 80150e4:	4602      	mov	r2, r0
 80150e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80150ea:	f7ff bbbe 	b.w	801486a <_dtoa_r+0x32>
 80150ee:	692a      	ldr	r2, [r5, #16]
 80150f0:	3202      	adds	r2, #2
 80150f2:	0092      	lsls	r2, r2, #2
 80150f4:	f105 010c 	add.w	r1, r5, #12
 80150f8:	300c      	adds	r0, #12
 80150fa:	f7ff faf4 	bl	80146e6 <memcpy>
 80150fe:	2201      	movs	r2, #1
 8015100:	4631      	mov	r1, r6
 8015102:	4648      	mov	r0, r9
 8015104:	f000 ff92 	bl	801602c <__lshift>
 8015108:	1c7b      	adds	r3, r7, #1
 801510a:	9304      	str	r3, [sp, #16]
 801510c:	eb07 030b 	add.w	r3, r7, fp
 8015110:	9309      	str	r3, [sp, #36]	@ 0x24
 8015112:	9b02      	ldr	r3, [sp, #8]
 8015114:	f003 0301 	and.w	r3, r3, #1
 8015118:	46a8      	mov	r8, r5
 801511a:	9308      	str	r3, [sp, #32]
 801511c:	4605      	mov	r5, r0
 801511e:	9b04      	ldr	r3, [sp, #16]
 8015120:	9801      	ldr	r0, [sp, #4]
 8015122:	4621      	mov	r1, r4
 8015124:	f103 3bff 	add.w	fp, r3, #4294967295
 8015128:	f7ff fafc 	bl	8014724 <quorem>
 801512c:	4641      	mov	r1, r8
 801512e:	9002      	str	r0, [sp, #8]
 8015130:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015134:	9801      	ldr	r0, [sp, #4]
 8015136:	f000 ffe5 	bl	8016104 <__mcmp>
 801513a:	462a      	mov	r2, r5
 801513c:	9006      	str	r0, [sp, #24]
 801513e:	4621      	mov	r1, r4
 8015140:	4648      	mov	r0, r9
 8015142:	f000 fffb 	bl	801613c <__mdiff>
 8015146:	68c2      	ldr	r2, [r0, #12]
 8015148:	4606      	mov	r6, r0
 801514a:	b9fa      	cbnz	r2, 801518c <_dtoa_r+0x954>
 801514c:	4601      	mov	r1, r0
 801514e:	9801      	ldr	r0, [sp, #4]
 8015150:	f000 ffd8 	bl	8016104 <__mcmp>
 8015154:	4602      	mov	r2, r0
 8015156:	4631      	mov	r1, r6
 8015158:	4648      	mov	r0, r9
 801515a:	920a      	str	r2, [sp, #40]	@ 0x28
 801515c:	f000 fd56 	bl	8015c0c <_Bfree>
 8015160:	9b07      	ldr	r3, [sp, #28]
 8015162:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015164:	9e04      	ldr	r6, [sp, #16]
 8015166:	ea42 0103 	orr.w	r1, r2, r3
 801516a:	9b08      	ldr	r3, [sp, #32]
 801516c:	4319      	orrs	r1, r3
 801516e:	d10f      	bne.n	8015190 <_dtoa_r+0x958>
 8015170:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015174:	d028      	beq.n	80151c8 <_dtoa_r+0x990>
 8015176:	9b06      	ldr	r3, [sp, #24]
 8015178:	2b00      	cmp	r3, #0
 801517a:	dd02      	ble.n	8015182 <_dtoa_r+0x94a>
 801517c:	9b02      	ldr	r3, [sp, #8]
 801517e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015182:	f88b a000 	strb.w	sl, [fp]
 8015186:	e55e      	b.n	8014c46 <_dtoa_r+0x40e>
 8015188:	4628      	mov	r0, r5
 801518a:	e7bd      	b.n	8015108 <_dtoa_r+0x8d0>
 801518c:	2201      	movs	r2, #1
 801518e:	e7e2      	b.n	8015156 <_dtoa_r+0x91e>
 8015190:	9b06      	ldr	r3, [sp, #24]
 8015192:	2b00      	cmp	r3, #0
 8015194:	db04      	blt.n	80151a0 <_dtoa_r+0x968>
 8015196:	9907      	ldr	r1, [sp, #28]
 8015198:	430b      	orrs	r3, r1
 801519a:	9908      	ldr	r1, [sp, #32]
 801519c:	430b      	orrs	r3, r1
 801519e:	d120      	bne.n	80151e2 <_dtoa_r+0x9aa>
 80151a0:	2a00      	cmp	r2, #0
 80151a2:	ddee      	ble.n	8015182 <_dtoa_r+0x94a>
 80151a4:	9901      	ldr	r1, [sp, #4]
 80151a6:	2201      	movs	r2, #1
 80151a8:	4648      	mov	r0, r9
 80151aa:	f000 ff3f 	bl	801602c <__lshift>
 80151ae:	4621      	mov	r1, r4
 80151b0:	9001      	str	r0, [sp, #4]
 80151b2:	f000 ffa7 	bl	8016104 <__mcmp>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	dc03      	bgt.n	80151c2 <_dtoa_r+0x98a>
 80151ba:	d1e2      	bne.n	8015182 <_dtoa_r+0x94a>
 80151bc:	f01a 0f01 	tst.w	sl, #1
 80151c0:	d0df      	beq.n	8015182 <_dtoa_r+0x94a>
 80151c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80151c6:	d1d9      	bne.n	801517c <_dtoa_r+0x944>
 80151c8:	2339      	movs	r3, #57	@ 0x39
 80151ca:	f88b 3000 	strb.w	r3, [fp]
 80151ce:	4633      	mov	r3, r6
 80151d0:	461e      	mov	r6, r3
 80151d2:	3b01      	subs	r3, #1
 80151d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80151d8:	2a39      	cmp	r2, #57	@ 0x39
 80151da:	d052      	beq.n	8015282 <_dtoa_r+0xa4a>
 80151dc:	3201      	adds	r2, #1
 80151de:	701a      	strb	r2, [r3, #0]
 80151e0:	e531      	b.n	8014c46 <_dtoa_r+0x40e>
 80151e2:	2a00      	cmp	r2, #0
 80151e4:	dd07      	ble.n	80151f6 <_dtoa_r+0x9be>
 80151e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80151ea:	d0ed      	beq.n	80151c8 <_dtoa_r+0x990>
 80151ec:	f10a 0301 	add.w	r3, sl, #1
 80151f0:	f88b 3000 	strb.w	r3, [fp]
 80151f4:	e527      	b.n	8014c46 <_dtoa_r+0x40e>
 80151f6:	9b04      	ldr	r3, [sp, #16]
 80151f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151fa:	f803 ac01 	strb.w	sl, [r3, #-1]
 80151fe:	4293      	cmp	r3, r2
 8015200:	d029      	beq.n	8015256 <_dtoa_r+0xa1e>
 8015202:	9901      	ldr	r1, [sp, #4]
 8015204:	2300      	movs	r3, #0
 8015206:	220a      	movs	r2, #10
 8015208:	4648      	mov	r0, r9
 801520a:	f000 fd21 	bl	8015c50 <__multadd>
 801520e:	45a8      	cmp	r8, r5
 8015210:	9001      	str	r0, [sp, #4]
 8015212:	f04f 0300 	mov.w	r3, #0
 8015216:	f04f 020a 	mov.w	r2, #10
 801521a:	4641      	mov	r1, r8
 801521c:	4648      	mov	r0, r9
 801521e:	d107      	bne.n	8015230 <_dtoa_r+0x9f8>
 8015220:	f000 fd16 	bl	8015c50 <__multadd>
 8015224:	4680      	mov	r8, r0
 8015226:	4605      	mov	r5, r0
 8015228:	9b04      	ldr	r3, [sp, #16]
 801522a:	3301      	adds	r3, #1
 801522c:	9304      	str	r3, [sp, #16]
 801522e:	e776      	b.n	801511e <_dtoa_r+0x8e6>
 8015230:	f000 fd0e 	bl	8015c50 <__multadd>
 8015234:	4629      	mov	r1, r5
 8015236:	4680      	mov	r8, r0
 8015238:	2300      	movs	r3, #0
 801523a:	220a      	movs	r2, #10
 801523c:	4648      	mov	r0, r9
 801523e:	f000 fd07 	bl	8015c50 <__multadd>
 8015242:	4605      	mov	r5, r0
 8015244:	e7f0      	b.n	8015228 <_dtoa_r+0x9f0>
 8015246:	f1bb 0f00 	cmp.w	fp, #0
 801524a:	bfcc      	ite	gt
 801524c:	465e      	movgt	r6, fp
 801524e:	2601      	movle	r6, #1
 8015250:	443e      	add	r6, r7
 8015252:	f04f 0800 	mov.w	r8, #0
 8015256:	9901      	ldr	r1, [sp, #4]
 8015258:	2201      	movs	r2, #1
 801525a:	4648      	mov	r0, r9
 801525c:	f000 fee6 	bl	801602c <__lshift>
 8015260:	4621      	mov	r1, r4
 8015262:	9001      	str	r0, [sp, #4]
 8015264:	f000 ff4e 	bl	8016104 <__mcmp>
 8015268:	2800      	cmp	r0, #0
 801526a:	dcb0      	bgt.n	80151ce <_dtoa_r+0x996>
 801526c:	d102      	bne.n	8015274 <_dtoa_r+0xa3c>
 801526e:	f01a 0f01 	tst.w	sl, #1
 8015272:	d1ac      	bne.n	80151ce <_dtoa_r+0x996>
 8015274:	4633      	mov	r3, r6
 8015276:	461e      	mov	r6, r3
 8015278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801527c:	2a30      	cmp	r2, #48	@ 0x30
 801527e:	d0fa      	beq.n	8015276 <_dtoa_r+0xa3e>
 8015280:	e4e1      	b.n	8014c46 <_dtoa_r+0x40e>
 8015282:	429f      	cmp	r7, r3
 8015284:	d1a4      	bne.n	80151d0 <_dtoa_r+0x998>
 8015286:	9b05      	ldr	r3, [sp, #20]
 8015288:	3301      	adds	r3, #1
 801528a:	9305      	str	r3, [sp, #20]
 801528c:	2331      	movs	r3, #49	@ 0x31
 801528e:	703b      	strb	r3, [r7, #0]
 8015290:	e4d9      	b.n	8014c46 <_dtoa_r+0x40e>
 8015292:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015294:	4f16      	ldr	r7, [pc, #88]	@ (80152f0 <_dtoa_r+0xab8>)
 8015296:	b11b      	cbz	r3, 80152a0 <_dtoa_r+0xa68>
 8015298:	f107 0308 	add.w	r3, r7, #8
 801529c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801529e:	6013      	str	r3, [r2, #0]
 80152a0:	4638      	mov	r0, r7
 80152a2:	b011      	add	sp, #68	@ 0x44
 80152a4:	ecbd 8b02 	vpop	{d8}
 80152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ac:	9b07      	ldr	r3, [sp, #28]
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	f77f ae2c 	ble.w	8014f0c <_dtoa_r+0x6d4>
 80152b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80152b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80152b8:	2001      	movs	r0, #1
 80152ba:	e64c      	b.n	8014f56 <_dtoa_r+0x71e>
 80152bc:	f1bb 0f00 	cmp.w	fp, #0
 80152c0:	f77f aed8 	ble.w	8015074 <_dtoa_r+0x83c>
 80152c4:	463e      	mov	r6, r7
 80152c6:	9801      	ldr	r0, [sp, #4]
 80152c8:	4621      	mov	r1, r4
 80152ca:	f7ff fa2b 	bl	8014724 <quorem>
 80152ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80152d2:	f806 ab01 	strb.w	sl, [r6], #1
 80152d6:	1bf2      	subs	r2, r6, r7
 80152d8:	4593      	cmp	fp, r2
 80152da:	ddb4      	ble.n	8015246 <_dtoa_r+0xa0e>
 80152dc:	9901      	ldr	r1, [sp, #4]
 80152de:	2300      	movs	r3, #0
 80152e0:	220a      	movs	r2, #10
 80152e2:	4648      	mov	r0, r9
 80152e4:	f000 fcb4 	bl	8015c50 <__multadd>
 80152e8:	9001      	str	r0, [sp, #4]
 80152ea:	e7ec      	b.n	80152c6 <_dtoa_r+0xa8e>
 80152ec:	08017432 	.word	0x08017432
 80152f0:	080173b6 	.word	0x080173b6

080152f4 <_free_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4605      	mov	r5, r0
 80152f8:	2900      	cmp	r1, #0
 80152fa:	d041      	beq.n	8015380 <_free_r+0x8c>
 80152fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015300:	1f0c      	subs	r4, r1, #4
 8015302:	2b00      	cmp	r3, #0
 8015304:	bfb8      	it	lt
 8015306:	18e4      	addlt	r4, r4, r3
 8015308:	f000 fc34 	bl	8015b74 <__malloc_lock>
 801530c:	4a1d      	ldr	r2, [pc, #116]	@ (8015384 <_free_r+0x90>)
 801530e:	6813      	ldr	r3, [r2, #0]
 8015310:	b933      	cbnz	r3, 8015320 <_free_r+0x2c>
 8015312:	6063      	str	r3, [r4, #4]
 8015314:	6014      	str	r4, [r2, #0]
 8015316:	4628      	mov	r0, r5
 8015318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801531c:	f000 bc30 	b.w	8015b80 <__malloc_unlock>
 8015320:	42a3      	cmp	r3, r4
 8015322:	d908      	bls.n	8015336 <_free_r+0x42>
 8015324:	6820      	ldr	r0, [r4, #0]
 8015326:	1821      	adds	r1, r4, r0
 8015328:	428b      	cmp	r3, r1
 801532a:	bf01      	itttt	eq
 801532c:	6819      	ldreq	r1, [r3, #0]
 801532e:	685b      	ldreq	r3, [r3, #4]
 8015330:	1809      	addeq	r1, r1, r0
 8015332:	6021      	streq	r1, [r4, #0]
 8015334:	e7ed      	b.n	8015312 <_free_r+0x1e>
 8015336:	461a      	mov	r2, r3
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	b10b      	cbz	r3, 8015340 <_free_r+0x4c>
 801533c:	42a3      	cmp	r3, r4
 801533e:	d9fa      	bls.n	8015336 <_free_r+0x42>
 8015340:	6811      	ldr	r1, [r2, #0]
 8015342:	1850      	adds	r0, r2, r1
 8015344:	42a0      	cmp	r0, r4
 8015346:	d10b      	bne.n	8015360 <_free_r+0x6c>
 8015348:	6820      	ldr	r0, [r4, #0]
 801534a:	4401      	add	r1, r0
 801534c:	1850      	adds	r0, r2, r1
 801534e:	4283      	cmp	r3, r0
 8015350:	6011      	str	r1, [r2, #0]
 8015352:	d1e0      	bne.n	8015316 <_free_r+0x22>
 8015354:	6818      	ldr	r0, [r3, #0]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	6053      	str	r3, [r2, #4]
 801535a:	4408      	add	r0, r1
 801535c:	6010      	str	r0, [r2, #0]
 801535e:	e7da      	b.n	8015316 <_free_r+0x22>
 8015360:	d902      	bls.n	8015368 <_free_r+0x74>
 8015362:	230c      	movs	r3, #12
 8015364:	602b      	str	r3, [r5, #0]
 8015366:	e7d6      	b.n	8015316 <_free_r+0x22>
 8015368:	6820      	ldr	r0, [r4, #0]
 801536a:	1821      	adds	r1, r4, r0
 801536c:	428b      	cmp	r3, r1
 801536e:	bf04      	itt	eq
 8015370:	6819      	ldreq	r1, [r3, #0]
 8015372:	685b      	ldreq	r3, [r3, #4]
 8015374:	6063      	str	r3, [r4, #4]
 8015376:	bf04      	itt	eq
 8015378:	1809      	addeq	r1, r1, r0
 801537a:	6021      	streq	r1, [r4, #0]
 801537c:	6054      	str	r4, [r2, #4]
 801537e:	e7ca      	b.n	8015316 <_free_r+0x22>
 8015380:	bd38      	pop	{r3, r4, r5, pc}
 8015382:	bf00      	nop
 8015384:	24007508 	.word	0x24007508

08015388 <rshift>:
 8015388:	6903      	ldr	r3, [r0, #16]
 801538a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801538e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015392:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015396:	f100 0414 	add.w	r4, r0, #20
 801539a:	dd45      	ble.n	8015428 <rshift+0xa0>
 801539c:	f011 011f 	ands.w	r1, r1, #31
 80153a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80153a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80153a8:	d10c      	bne.n	80153c4 <rshift+0x3c>
 80153aa:	f100 0710 	add.w	r7, r0, #16
 80153ae:	4629      	mov	r1, r5
 80153b0:	42b1      	cmp	r1, r6
 80153b2:	d334      	bcc.n	801541e <rshift+0x96>
 80153b4:	1a9b      	subs	r3, r3, r2
 80153b6:	009b      	lsls	r3, r3, #2
 80153b8:	1eea      	subs	r2, r5, #3
 80153ba:	4296      	cmp	r6, r2
 80153bc:	bf38      	it	cc
 80153be:	2300      	movcc	r3, #0
 80153c0:	4423      	add	r3, r4
 80153c2:	e015      	b.n	80153f0 <rshift+0x68>
 80153c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80153c8:	f1c1 0820 	rsb	r8, r1, #32
 80153cc:	40cf      	lsrs	r7, r1
 80153ce:	f105 0e04 	add.w	lr, r5, #4
 80153d2:	46a1      	mov	r9, r4
 80153d4:	4576      	cmp	r6, lr
 80153d6:	46f4      	mov	ip, lr
 80153d8:	d815      	bhi.n	8015406 <rshift+0x7e>
 80153da:	1a9a      	subs	r2, r3, r2
 80153dc:	0092      	lsls	r2, r2, #2
 80153de:	3a04      	subs	r2, #4
 80153e0:	3501      	adds	r5, #1
 80153e2:	42ae      	cmp	r6, r5
 80153e4:	bf38      	it	cc
 80153e6:	2200      	movcc	r2, #0
 80153e8:	18a3      	adds	r3, r4, r2
 80153ea:	50a7      	str	r7, [r4, r2]
 80153ec:	b107      	cbz	r7, 80153f0 <rshift+0x68>
 80153ee:	3304      	adds	r3, #4
 80153f0:	1b1a      	subs	r2, r3, r4
 80153f2:	42a3      	cmp	r3, r4
 80153f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80153f8:	bf08      	it	eq
 80153fa:	2300      	moveq	r3, #0
 80153fc:	6102      	str	r2, [r0, #16]
 80153fe:	bf08      	it	eq
 8015400:	6143      	streq	r3, [r0, #20]
 8015402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015406:	f8dc c000 	ldr.w	ip, [ip]
 801540a:	fa0c fc08 	lsl.w	ip, ip, r8
 801540e:	ea4c 0707 	orr.w	r7, ip, r7
 8015412:	f849 7b04 	str.w	r7, [r9], #4
 8015416:	f85e 7b04 	ldr.w	r7, [lr], #4
 801541a:	40cf      	lsrs	r7, r1
 801541c:	e7da      	b.n	80153d4 <rshift+0x4c>
 801541e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015422:	f847 cf04 	str.w	ip, [r7, #4]!
 8015426:	e7c3      	b.n	80153b0 <rshift+0x28>
 8015428:	4623      	mov	r3, r4
 801542a:	e7e1      	b.n	80153f0 <rshift+0x68>

0801542c <__hexdig_fun>:
 801542c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015430:	2b09      	cmp	r3, #9
 8015432:	d802      	bhi.n	801543a <__hexdig_fun+0xe>
 8015434:	3820      	subs	r0, #32
 8015436:	b2c0      	uxtb	r0, r0
 8015438:	4770      	bx	lr
 801543a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801543e:	2b05      	cmp	r3, #5
 8015440:	d801      	bhi.n	8015446 <__hexdig_fun+0x1a>
 8015442:	3847      	subs	r0, #71	@ 0x47
 8015444:	e7f7      	b.n	8015436 <__hexdig_fun+0xa>
 8015446:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801544a:	2b05      	cmp	r3, #5
 801544c:	d801      	bhi.n	8015452 <__hexdig_fun+0x26>
 801544e:	3827      	subs	r0, #39	@ 0x27
 8015450:	e7f1      	b.n	8015436 <__hexdig_fun+0xa>
 8015452:	2000      	movs	r0, #0
 8015454:	4770      	bx	lr
	...

08015458 <__gethex>:
 8015458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545c:	b085      	sub	sp, #20
 801545e:	468a      	mov	sl, r1
 8015460:	9302      	str	r3, [sp, #8]
 8015462:	680b      	ldr	r3, [r1, #0]
 8015464:	9001      	str	r0, [sp, #4]
 8015466:	4690      	mov	r8, r2
 8015468:	1c9c      	adds	r4, r3, #2
 801546a:	46a1      	mov	r9, r4
 801546c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015470:	2830      	cmp	r0, #48	@ 0x30
 8015472:	d0fa      	beq.n	801546a <__gethex+0x12>
 8015474:	eba9 0303 	sub.w	r3, r9, r3
 8015478:	f1a3 0b02 	sub.w	fp, r3, #2
 801547c:	f7ff ffd6 	bl	801542c <__hexdig_fun>
 8015480:	4605      	mov	r5, r0
 8015482:	2800      	cmp	r0, #0
 8015484:	d168      	bne.n	8015558 <__gethex+0x100>
 8015486:	49a0      	ldr	r1, [pc, #640]	@ (8015708 <__gethex+0x2b0>)
 8015488:	2201      	movs	r2, #1
 801548a:	4648      	mov	r0, r9
 801548c:	f7ff f82e 	bl	80144ec <strncmp>
 8015490:	4607      	mov	r7, r0
 8015492:	2800      	cmp	r0, #0
 8015494:	d167      	bne.n	8015566 <__gethex+0x10e>
 8015496:	f899 0001 	ldrb.w	r0, [r9, #1]
 801549a:	4626      	mov	r6, r4
 801549c:	f7ff ffc6 	bl	801542c <__hexdig_fun>
 80154a0:	2800      	cmp	r0, #0
 80154a2:	d062      	beq.n	801556a <__gethex+0x112>
 80154a4:	4623      	mov	r3, r4
 80154a6:	7818      	ldrb	r0, [r3, #0]
 80154a8:	2830      	cmp	r0, #48	@ 0x30
 80154aa:	4699      	mov	r9, r3
 80154ac:	f103 0301 	add.w	r3, r3, #1
 80154b0:	d0f9      	beq.n	80154a6 <__gethex+0x4e>
 80154b2:	f7ff ffbb 	bl	801542c <__hexdig_fun>
 80154b6:	fab0 f580 	clz	r5, r0
 80154ba:	096d      	lsrs	r5, r5, #5
 80154bc:	f04f 0b01 	mov.w	fp, #1
 80154c0:	464a      	mov	r2, r9
 80154c2:	4616      	mov	r6, r2
 80154c4:	3201      	adds	r2, #1
 80154c6:	7830      	ldrb	r0, [r6, #0]
 80154c8:	f7ff ffb0 	bl	801542c <__hexdig_fun>
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d1f8      	bne.n	80154c2 <__gethex+0x6a>
 80154d0:	498d      	ldr	r1, [pc, #564]	@ (8015708 <__gethex+0x2b0>)
 80154d2:	2201      	movs	r2, #1
 80154d4:	4630      	mov	r0, r6
 80154d6:	f7ff f809 	bl	80144ec <strncmp>
 80154da:	2800      	cmp	r0, #0
 80154dc:	d13f      	bne.n	801555e <__gethex+0x106>
 80154de:	b944      	cbnz	r4, 80154f2 <__gethex+0x9a>
 80154e0:	1c74      	adds	r4, r6, #1
 80154e2:	4622      	mov	r2, r4
 80154e4:	4616      	mov	r6, r2
 80154e6:	3201      	adds	r2, #1
 80154e8:	7830      	ldrb	r0, [r6, #0]
 80154ea:	f7ff ff9f 	bl	801542c <__hexdig_fun>
 80154ee:	2800      	cmp	r0, #0
 80154f0:	d1f8      	bne.n	80154e4 <__gethex+0x8c>
 80154f2:	1ba4      	subs	r4, r4, r6
 80154f4:	00a7      	lsls	r7, r4, #2
 80154f6:	7833      	ldrb	r3, [r6, #0]
 80154f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80154fc:	2b50      	cmp	r3, #80	@ 0x50
 80154fe:	d13e      	bne.n	801557e <__gethex+0x126>
 8015500:	7873      	ldrb	r3, [r6, #1]
 8015502:	2b2b      	cmp	r3, #43	@ 0x2b
 8015504:	d033      	beq.n	801556e <__gethex+0x116>
 8015506:	2b2d      	cmp	r3, #45	@ 0x2d
 8015508:	d034      	beq.n	8015574 <__gethex+0x11c>
 801550a:	1c71      	adds	r1, r6, #1
 801550c:	2400      	movs	r4, #0
 801550e:	7808      	ldrb	r0, [r1, #0]
 8015510:	f7ff ff8c 	bl	801542c <__hexdig_fun>
 8015514:	1e43      	subs	r3, r0, #1
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b18      	cmp	r3, #24
 801551a:	d830      	bhi.n	801557e <__gethex+0x126>
 801551c:	f1a0 0210 	sub.w	r2, r0, #16
 8015520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015524:	f7ff ff82 	bl	801542c <__hexdig_fun>
 8015528:	f100 3cff 	add.w	ip, r0, #4294967295
 801552c:	fa5f fc8c 	uxtb.w	ip, ip
 8015530:	f1bc 0f18 	cmp.w	ip, #24
 8015534:	f04f 030a 	mov.w	r3, #10
 8015538:	d91e      	bls.n	8015578 <__gethex+0x120>
 801553a:	b104      	cbz	r4, 801553e <__gethex+0xe6>
 801553c:	4252      	negs	r2, r2
 801553e:	4417      	add	r7, r2
 8015540:	f8ca 1000 	str.w	r1, [sl]
 8015544:	b1ed      	cbz	r5, 8015582 <__gethex+0x12a>
 8015546:	f1bb 0f00 	cmp.w	fp, #0
 801554a:	bf0c      	ite	eq
 801554c:	2506      	moveq	r5, #6
 801554e:	2500      	movne	r5, #0
 8015550:	4628      	mov	r0, r5
 8015552:	b005      	add	sp, #20
 8015554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015558:	2500      	movs	r5, #0
 801555a:	462c      	mov	r4, r5
 801555c:	e7b0      	b.n	80154c0 <__gethex+0x68>
 801555e:	2c00      	cmp	r4, #0
 8015560:	d1c7      	bne.n	80154f2 <__gethex+0x9a>
 8015562:	4627      	mov	r7, r4
 8015564:	e7c7      	b.n	80154f6 <__gethex+0x9e>
 8015566:	464e      	mov	r6, r9
 8015568:	462f      	mov	r7, r5
 801556a:	2501      	movs	r5, #1
 801556c:	e7c3      	b.n	80154f6 <__gethex+0x9e>
 801556e:	2400      	movs	r4, #0
 8015570:	1cb1      	adds	r1, r6, #2
 8015572:	e7cc      	b.n	801550e <__gethex+0xb6>
 8015574:	2401      	movs	r4, #1
 8015576:	e7fb      	b.n	8015570 <__gethex+0x118>
 8015578:	fb03 0002 	mla	r0, r3, r2, r0
 801557c:	e7ce      	b.n	801551c <__gethex+0xc4>
 801557e:	4631      	mov	r1, r6
 8015580:	e7de      	b.n	8015540 <__gethex+0xe8>
 8015582:	eba6 0309 	sub.w	r3, r6, r9
 8015586:	3b01      	subs	r3, #1
 8015588:	4629      	mov	r1, r5
 801558a:	2b07      	cmp	r3, #7
 801558c:	dc0a      	bgt.n	80155a4 <__gethex+0x14c>
 801558e:	9801      	ldr	r0, [sp, #4]
 8015590:	f000 fafc 	bl	8015b8c <_Balloc>
 8015594:	4604      	mov	r4, r0
 8015596:	b940      	cbnz	r0, 80155aa <__gethex+0x152>
 8015598:	4b5c      	ldr	r3, [pc, #368]	@ (801570c <__gethex+0x2b4>)
 801559a:	4602      	mov	r2, r0
 801559c:	21e4      	movs	r1, #228	@ 0xe4
 801559e:	485c      	ldr	r0, [pc, #368]	@ (8015710 <__gethex+0x2b8>)
 80155a0:	f001 fa3a 	bl	8016a18 <__assert_func>
 80155a4:	3101      	adds	r1, #1
 80155a6:	105b      	asrs	r3, r3, #1
 80155a8:	e7ef      	b.n	801558a <__gethex+0x132>
 80155aa:	f100 0a14 	add.w	sl, r0, #20
 80155ae:	2300      	movs	r3, #0
 80155b0:	4655      	mov	r5, sl
 80155b2:	469b      	mov	fp, r3
 80155b4:	45b1      	cmp	r9, r6
 80155b6:	d337      	bcc.n	8015628 <__gethex+0x1d0>
 80155b8:	f845 bb04 	str.w	fp, [r5], #4
 80155bc:	eba5 050a 	sub.w	r5, r5, sl
 80155c0:	10ad      	asrs	r5, r5, #2
 80155c2:	6125      	str	r5, [r4, #16]
 80155c4:	4658      	mov	r0, fp
 80155c6:	f000 fbd3 	bl	8015d70 <__hi0bits>
 80155ca:	016d      	lsls	r5, r5, #5
 80155cc:	f8d8 6000 	ldr.w	r6, [r8]
 80155d0:	1a2d      	subs	r5, r5, r0
 80155d2:	42b5      	cmp	r5, r6
 80155d4:	dd54      	ble.n	8015680 <__gethex+0x228>
 80155d6:	1bad      	subs	r5, r5, r6
 80155d8:	4629      	mov	r1, r5
 80155da:	4620      	mov	r0, r4
 80155dc:	f000 ff5c 	bl	8016498 <__any_on>
 80155e0:	4681      	mov	r9, r0
 80155e2:	b178      	cbz	r0, 8015604 <__gethex+0x1ac>
 80155e4:	1e6b      	subs	r3, r5, #1
 80155e6:	1159      	asrs	r1, r3, #5
 80155e8:	f003 021f 	and.w	r2, r3, #31
 80155ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80155f0:	f04f 0901 	mov.w	r9, #1
 80155f4:	fa09 f202 	lsl.w	r2, r9, r2
 80155f8:	420a      	tst	r2, r1
 80155fa:	d003      	beq.n	8015604 <__gethex+0x1ac>
 80155fc:	454b      	cmp	r3, r9
 80155fe:	dc36      	bgt.n	801566e <__gethex+0x216>
 8015600:	f04f 0902 	mov.w	r9, #2
 8015604:	4629      	mov	r1, r5
 8015606:	4620      	mov	r0, r4
 8015608:	f7ff febe 	bl	8015388 <rshift>
 801560c:	442f      	add	r7, r5
 801560e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015612:	42bb      	cmp	r3, r7
 8015614:	da42      	bge.n	801569c <__gethex+0x244>
 8015616:	9801      	ldr	r0, [sp, #4]
 8015618:	4621      	mov	r1, r4
 801561a:	f000 faf7 	bl	8015c0c <_Bfree>
 801561e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015620:	2300      	movs	r3, #0
 8015622:	6013      	str	r3, [r2, #0]
 8015624:	25a3      	movs	r5, #163	@ 0xa3
 8015626:	e793      	b.n	8015550 <__gethex+0xf8>
 8015628:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801562c:	2a2e      	cmp	r2, #46	@ 0x2e
 801562e:	d012      	beq.n	8015656 <__gethex+0x1fe>
 8015630:	2b20      	cmp	r3, #32
 8015632:	d104      	bne.n	801563e <__gethex+0x1e6>
 8015634:	f845 bb04 	str.w	fp, [r5], #4
 8015638:	f04f 0b00 	mov.w	fp, #0
 801563c:	465b      	mov	r3, fp
 801563e:	7830      	ldrb	r0, [r6, #0]
 8015640:	9303      	str	r3, [sp, #12]
 8015642:	f7ff fef3 	bl	801542c <__hexdig_fun>
 8015646:	9b03      	ldr	r3, [sp, #12]
 8015648:	f000 000f 	and.w	r0, r0, #15
 801564c:	4098      	lsls	r0, r3
 801564e:	ea4b 0b00 	orr.w	fp, fp, r0
 8015652:	3304      	adds	r3, #4
 8015654:	e7ae      	b.n	80155b4 <__gethex+0x15c>
 8015656:	45b1      	cmp	r9, r6
 8015658:	d8ea      	bhi.n	8015630 <__gethex+0x1d8>
 801565a:	492b      	ldr	r1, [pc, #172]	@ (8015708 <__gethex+0x2b0>)
 801565c:	9303      	str	r3, [sp, #12]
 801565e:	2201      	movs	r2, #1
 8015660:	4630      	mov	r0, r6
 8015662:	f7fe ff43 	bl	80144ec <strncmp>
 8015666:	9b03      	ldr	r3, [sp, #12]
 8015668:	2800      	cmp	r0, #0
 801566a:	d1e1      	bne.n	8015630 <__gethex+0x1d8>
 801566c:	e7a2      	b.n	80155b4 <__gethex+0x15c>
 801566e:	1ea9      	subs	r1, r5, #2
 8015670:	4620      	mov	r0, r4
 8015672:	f000 ff11 	bl	8016498 <__any_on>
 8015676:	2800      	cmp	r0, #0
 8015678:	d0c2      	beq.n	8015600 <__gethex+0x1a8>
 801567a:	f04f 0903 	mov.w	r9, #3
 801567e:	e7c1      	b.n	8015604 <__gethex+0x1ac>
 8015680:	da09      	bge.n	8015696 <__gethex+0x23e>
 8015682:	1b75      	subs	r5, r6, r5
 8015684:	4621      	mov	r1, r4
 8015686:	9801      	ldr	r0, [sp, #4]
 8015688:	462a      	mov	r2, r5
 801568a:	f000 fccf 	bl	801602c <__lshift>
 801568e:	1b7f      	subs	r7, r7, r5
 8015690:	4604      	mov	r4, r0
 8015692:	f100 0a14 	add.w	sl, r0, #20
 8015696:	f04f 0900 	mov.w	r9, #0
 801569a:	e7b8      	b.n	801560e <__gethex+0x1b6>
 801569c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80156a0:	42bd      	cmp	r5, r7
 80156a2:	dd6f      	ble.n	8015784 <__gethex+0x32c>
 80156a4:	1bed      	subs	r5, r5, r7
 80156a6:	42ae      	cmp	r6, r5
 80156a8:	dc34      	bgt.n	8015714 <__gethex+0x2bc>
 80156aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156ae:	2b02      	cmp	r3, #2
 80156b0:	d022      	beq.n	80156f8 <__gethex+0x2a0>
 80156b2:	2b03      	cmp	r3, #3
 80156b4:	d024      	beq.n	8015700 <__gethex+0x2a8>
 80156b6:	2b01      	cmp	r3, #1
 80156b8:	d115      	bne.n	80156e6 <__gethex+0x28e>
 80156ba:	42ae      	cmp	r6, r5
 80156bc:	d113      	bne.n	80156e6 <__gethex+0x28e>
 80156be:	2e01      	cmp	r6, #1
 80156c0:	d10b      	bne.n	80156da <__gethex+0x282>
 80156c2:	9a02      	ldr	r2, [sp, #8]
 80156c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80156c8:	6013      	str	r3, [r2, #0]
 80156ca:	2301      	movs	r3, #1
 80156cc:	6123      	str	r3, [r4, #16]
 80156ce:	f8ca 3000 	str.w	r3, [sl]
 80156d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156d4:	2562      	movs	r5, #98	@ 0x62
 80156d6:	601c      	str	r4, [r3, #0]
 80156d8:	e73a      	b.n	8015550 <__gethex+0xf8>
 80156da:	1e71      	subs	r1, r6, #1
 80156dc:	4620      	mov	r0, r4
 80156de:	f000 fedb 	bl	8016498 <__any_on>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	d1ed      	bne.n	80156c2 <__gethex+0x26a>
 80156e6:	9801      	ldr	r0, [sp, #4]
 80156e8:	4621      	mov	r1, r4
 80156ea:	f000 fa8f 	bl	8015c0c <_Bfree>
 80156ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80156f0:	2300      	movs	r3, #0
 80156f2:	6013      	str	r3, [r2, #0]
 80156f4:	2550      	movs	r5, #80	@ 0x50
 80156f6:	e72b      	b.n	8015550 <__gethex+0xf8>
 80156f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d1f3      	bne.n	80156e6 <__gethex+0x28e>
 80156fe:	e7e0      	b.n	80156c2 <__gethex+0x26a>
 8015700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015702:	2b00      	cmp	r3, #0
 8015704:	d1dd      	bne.n	80156c2 <__gethex+0x26a>
 8015706:	e7ee      	b.n	80156e6 <__gethex+0x28e>
 8015708:	08017378 	.word	0x08017378
 801570c:	08017432 	.word	0x08017432
 8015710:	08017443 	.word	0x08017443
 8015714:	1e6f      	subs	r7, r5, #1
 8015716:	f1b9 0f00 	cmp.w	r9, #0
 801571a:	d130      	bne.n	801577e <__gethex+0x326>
 801571c:	b127      	cbz	r7, 8015728 <__gethex+0x2d0>
 801571e:	4639      	mov	r1, r7
 8015720:	4620      	mov	r0, r4
 8015722:	f000 feb9 	bl	8016498 <__any_on>
 8015726:	4681      	mov	r9, r0
 8015728:	117a      	asrs	r2, r7, #5
 801572a:	2301      	movs	r3, #1
 801572c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015730:	f007 071f 	and.w	r7, r7, #31
 8015734:	40bb      	lsls	r3, r7
 8015736:	4213      	tst	r3, r2
 8015738:	4629      	mov	r1, r5
 801573a:	4620      	mov	r0, r4
 801573c:	bf18      	it	ne
 801573e:	f049 0902 	orrne.w	r9, r9, #2
 8015742:	f7ff fe21 	bl	8015388 <rshift>
 8015746:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801574a:	1b76      	subs	r6, r6, r5
 801574c:	2502      	movs	r5, #2
 801574e:	f1b9 0f00 	cmp.w	r9, #0
 8015752:	d047      	beq.n	80157e4 <__gethex+0x38c>
 8015754:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015758:	2b02      	cmp	r3, #2
 801575a:	d015      	beq.n	8015788 <__gethex+0x330>
 801575c:	2b03      	cmp	r3, #3
 801575e:	d017      	beq.n	8015790 <__gethex+0x338>
 8015760:	2b01      	cmp	r3, #1
 8015762:	d109      	bne.n	8015778 <__gethex+0x320>
 8015764:	f019 0f02 	tst.w	r9, #2
 8015768:	d006      	beq.n	8015778 <__gethex+0x320>
 801576a:	f8da 3000 	ldr.w	r3, [sl]
 801576e:	ea49 0903 	orr.w	r9, r9, r3
 8015772:	f019 0f01 	tst.w	r9, #1
 8015776:	d10e      	bne.n	8015796 <__gethex+0x33e>
 8015778:	f045 0510 	orr.w	r5, r5, #16
 801577c:	e032      	b.n	80157e4 <__gethex+0x38c>
 801577e:	f04f 0901 	mov.w	r9, #1
 8015782:	e7d1      	b.n	8015728 <__gethex+0x2d0>
 8015784:	2501      	movs	r5, #1
 8015786:	e7e2      	b.n	801574e <__gethex+0x2f6>
 8015788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801578a:	f1c3 0301 	rsb	r3, r3, #1
 801578e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0f0      	beq.n	8015778 <__gethex+0x320>
 8015796:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801579a:	f104 0314 	add.w	r3, r4, #20
 801579e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80157a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80157a6:	f04f 0c00 	mov.w	ip, #0
 80157aa:	4618      	mov	r0, r3
 80157ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80157b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80157b4:	d01b      	beq.n	80157ee <__gethex+0x396>
 80157b6:	3201      	adds	r2, #1
 80157b8:	6002      	str	r2, [r0, #0]
 80157ba:	2d02      	cmp	r5, #2
 80157bc:	f104 0314 	add.w	r3, r4, #20
 80157c0:	d13c      	bne.n	801583c <__gethex+0x3e4>
 80157c2:	f8d8 2000 	ldr.w	r2, [r8]
 80157c6:	3a01      	subs	r2, #1
 80157c8:	42b2      	cmp	r2, r6
 80157ca:	d109      	bne.n	80157e0 <__gethex+0x388>
 80157cc:	1171      	asrs	r1, r6, #5
 80157ce:	2201      	movs	r2, #1
 80157d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157d4:	f006 061f 	and.w	r6, r6, #31
 80157d8:	fa02 f606 	lsl.w	r6, r2, r6
 80157dc:	421e      	tst	r6, r3
 80157de:	d13a      	bne.n	8015856 <__gethex+0x3fe>
 80157e0:	f045 0520 	orr.w	r5, r5, #32
 80157e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157e6:	601c      	str	r4, [r3, #0]
 80157e8:	9b02      	ldr	r3, [sp, #8]
 80157ea:	601f      	str	r7, [r3, #0]
 80157ec:	e6b0      	b.n	8015550 <__gethex+0xf8>
 80157ee:	4299      	cmp	r1, r3
 80157f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80157f4:	d8d9      	bhi.n	80157aa <__gethex+0x352>
 80157f6:	68a3      	ldr	r3, [r4, #8]
 80157f8:	459b      	cmp	fp, r3
 80157fa:	db17      	blt.n	801582c <__gethex+0x3d4>
 80157fc:	6861      	ldr	r1, [r4, #4]
 80157fe:	9801      	ldr	r0, [sp, #4]
 8015800:	3101      	adds	r1, #1
 8015802:	f000 f9c3 	bl	8015b8c <_Balloc>
 8015806:	4681      	mov	r9, r0
 8015808:	b918      	cbnz	r0, 8015812 <__gethex+0x3ba>
 801580a:	4b1a      	ldr	r3, [pc, #104]	@ (8015874 <__gethex+0x41c>)
 801580c:	4602      	mov	r2, r0
 801580e:	2184      	movs	r1, #132	@ 0x84
 8015810:	e6c5      	b.n	801559e <__gethex+0x146>
 8015812:	6922      	ldr	r2, [r4, #16]
 8015814:	3202      	adds	r2, #2
 8015816:	f104 010c 	add.w	r1, r4, #12
 801581a:	0092      	lsls	r2, r2, #2
 801581c:	300c      	adds	r0, #12
 801581e:	f7fe ff62 	bl	80146e6 <memcpy>
 8015822:	4621      	mov	r1, r4
 8015824:	9801      	ldr	r0, [sp, #4]
 8015826:	f000 f9f1 	bl	8015c0c <_Bfree>
 801582a:	464c      	mov	r4, r9
 801582c:	6923      	ldr	r3, [r4, #16]
 801582e:	1c5a      	adds	r2, r3, #1
 8015830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015834:	6122      	str	r2, [r4, #16]
 8015836:	2201      	movs	r2, #1
 8015838:	615a      	str	r2, [r3, #20]
 801583a:	e7be      	b.n	80157ba <__gethex+0x362>
 801583c:	6922      	ldr	r2, [r4, #16]
 801583e:	455a      	cmp	r2, fp
 8015840:	dd0b      	ble.n	801585a <__gethex+0x402>
 8015842:	2101      	movs	r1, #1
 8015844:	4620      	mov	r0, r4
 8015846:	f7ff fd9f 	bl	8015388 <rshift>
 801584a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801584e:	3701      	adds	r7, #1
 8015850:	42bb      	cmp	r3, r7
 8015852:	f6ff aee0 	blt.w	8015616 <__gethex+0x1be>
 8015856:	2501      	movs	r5, #1
 8015858:	e7c2      	b.n	80157e0 <__gethex+0x388>
 801585a:	f016 061f 	ands.w	r6, r6, #31
 801585e:	d0fa      	beq.n	8015856 <__gethex+0x3fe>
 8015860:	4453      	add	r3, sl
 8015862:	f1c6 0620 	rsb	r6, r6, #32
 8015866:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801586a:	f000 fa81 	bl	8015d70 <__hi0bits>
 801586e:	42b0      	cmp	r0, r6
 8015870:	dbe7      	blt.n	8015842 <__gethex+0x3ea>
 8015872:	e7f0      	b.n	8015856 <__gethex+0x3fe>
 8015874:	08017432 	.word	0x08017432

08015878 <L_shift>:
 8015878:	f1c2 0208 	rsb	r2, r2, #8
 801587c:	0092      	lsls	r2, r2, #2
 801587e:	b570      	push	{r4, r5, r6, lr}
 8015880:	f1c2 0620 	rsb	r6, r2, #32
 8015884:	6843      	ldr	r3, [r0, #4]
 8015886:	6804      	ldr	r4, [r0, #0]
 8015888:	fa03 f506 	lsl.w	r5, r3, r6
 801588c:	432c      	orrs	r4, r5
 801588e:	40d3      	lsrs	r3, r2
 8015890:	6004      	str	r4, [r0, #0]
 8015892:	f840 3f04 	str.w	r3, [r0, #4]!
 8015896:	4288      	cmp	r0, r1
 8015898:	d3f4      	bcc.n	8015884 <L_shift+0xc>
 801589a:	bd70      	pop	{r4, r5, r6, pc}

0801589c <__match>:
 801589c:	b530      	push	{r4, r5, lr}
 801589e:	6803      	ldr	r3, [r0, #0]
 80158a0:	3301      	adds	r3, #1
 80158a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158a6:	b914      	cbnz	r4, 80158ae <__match+0x12>
 80158a8:	6003      	str	r3, [r0, #0]
 80158aa:	2001      	movs	r0, #1
 80158ac:	bd30      	pop	{r4, r5, pc}
 80158ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80158b6:	2d19      	cmp	r5, #25
 80158b8:	bf98      	it	ls
 80158ba:	3220      	addls	r2, #32
 80158bc:	42a2      	cmp	r2, r4
 80158be:	d0f0      	beq.n	80158a2 <__match+0x6>
 80158c0:	2000      	movs	r0, #0
 80158c2:	e7f3      	b.n	80158ac <__match+0x10>

080158c4 <__hexnan>:
 80158c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c8:	680b      	ldr	r3, [r1, #0]
 80158ca:	6801      	ldr	r1, [r0, #0]
 80158cc:	115e      	asrs	r6, r3, #5
 80158ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80158d2:	f013 031f 	ands.w	r3, r3, #31
 80158d6:	b087      	sub	sp, #28
 80158d8:	bf18      	it	ne
 80158da:	3604      	addne	r6, #4
 80158dc:	2500      	movs	r5, #0
 80158de:	1f37      	subs	r7, r6, #4
 80158e0:	4682      	mov	sl, r0
 80158e2:	4690      	mov	r8, r2
 80158e4:	9301      	str	r3, [sp, #4]
 80158e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80158ea:	46b9      	mov	r9, r7
 80158ec:	463c      	mov	r4, r7
 80158ee:	9502      	str	r5, [sp, #8]
 80158f0:	46ab      	mov	fp, r5
 80158f2:	784a      	ldrb	r2, [r1, #1]
 80158f4:	1c4b      	adds	r3, r1, #1
 80158f6:	9303      	str	r3, [sp, #12]
 80158f8:	b342      	cbz	r2, 801594c <__hexnan+0x88>
 80158fa:	4610      	mov	r0, r2
 80158fc:	9105      	str	r1, [sp, #20]
 80158fe:	9204      	str	r2, [sp, #16]
 8015900:	f7ff fd94 	bl	801542c <__hexdig_fun>
 8015904:	2800      	cmp	r0, #0
 8015906:	d151      	bne.n	80159ac <__hexnan+0xe8>
 8015908:	9a04      	ldr	r2, [sp, #16]
 801590a:	9905      	ldr	r1, [sp, #20]
 801590c:	2a20      	cmp	r2, #32
 801590e:	d818      	bhi.n	8015942 <__hexnan+0x7e>
 8015910:	9b02      	ldr	r3, [sp, #8]
 8015912:	459b      	cmp	fp, r3
 8015914:	dd13      	ble.n	801593e <__hexnan+0x7a>
 8015916:	454c      	cmp	r4, r9
 8015918:	d206      	bcs.n	8015928 <__hexnan+0x64>
 801591a:	2d07      	cmp	r5, #7
 801591c:	dc04      	bgt.n	8015928 <__hexnan+0x64>
 801591e:	462a      	mov	r2, r5
 8015920:	4649      	mov	r1, r9
 8015922:	4620      	mov	r0, r4
 8015924:	f7ff ffa8 	bl	8015878 <L_shift>
 8015928:	4544      	cmp	r4, r8
 801592a:	d952      	bls.n	80159d2 <__hexnan+0x10e>
 801592c:	2300      	movs	r3, #0
 801592e:	f1a4 0904 	sub.w	r9, r4, #4
 8015932:	f844 3c04 	str.w	r3, [r4, #-4]
 8015936:	f8cd b008 	str.w	fp, [sp, #8]
 801593a:	464c      	mov	r4, r9
 801593c:	461d      	mov	r5, r3
 801593e:	9903      	ldr	r1, [sp, #12]
 8015940:	e7d7      	b.n	80158f2 <__hexnan+0x2e>
 8015942:	2a29      	cmp	r2, #41	@ 0x29
 8015944:	d157      	bne.n	80159f6 <__hexnan+0x132>
 8015946:	3102      	adds	r1, #2
 8015948:	f8ca 1000 	str.w	r1, [sl]
 801594c:	f1bb 0f00 	cmp.w	fp, #0
 8015950:	d051      	beq.n	80159f6 <__hexnan+0x132>
 8015952:	454c      	cmp	r4, r9
 8015954:	d206      	bcs.n	8015964 <__hexnan+0xa0>
 8015956:	2d07      	cmp	r5, #7
 8015958:	dc04      	bgt.n	8015964 <__hexnan+0xa0>
 801595a:	462a      	mov	r2, r5
 801595c:	4649      	mov	r1, r9
 801595e:	4620      	mov	r0, r4
 8015960:	f7ff ff8a 	bl	8015878 <L_shift>
 8015964:	4544      	cmp	r4, r8
 8015966:	d936      	bls.n	80159d6 <__hexnan+0x112>
 8015968:	f1a8 0204 	sub.w	r2, r8, #4
 801596c:	4623      	mov	r3, r4
 801596e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015972:	f842 1f04 	str.w	r1, [r2, #4]!
 8015976:	429f      	cmp	r7, r3
 8015978:	d2f9      	bcs.n	801596e <__hexnan+0xaa>
 801597a:	1b3b      	subs	r3, r7, r4
 801597c:	f023 0303 	bic.w	r3, r3, #3
 8015980:	3304      	adds	r3, #4
 8015982:	3401      	adds	r4, #1
 8015984:	3e03      	subs	r6, #3
 8015986:	42b4      	cmp	r4, r6
 8015988:	bf88      	it	hi
 801598a:	2304      	movhi	r3, #4
 801598c:	4443      	add	r3, r8
 801598e:	2200      	movs	r2, #0
 8015990:	f843 2b04 	str.w	r2, [r3], #4
 8015994:	429f      	cmp	r7, r3
 8015996:	d2fb      	bcs.n	8015990 <__hexnan+0xcc>
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	b91b      	cbnz	r3, 80159a4 <__hexnan+0xe0>
 801599c:	4547      	cmp	r7, r8
 801599e:	d128      	bne.n	80159f2 <__hexnan+0x12e>
 80159a0:	2301      	movs	r3, #1
 80159a2:	603b      	str	r3, [r7, #0]
 80159a4:	2005      	movs	r0, #5
 80159a6:	b007      	add	sp, #28
 80159a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ac:	3501      	adds	r5, #1
 80159ae:	2d08      	cmp	r5, #8
 80159b0:	f10b 0b01 	add.w	fp, fp, #1
 80159b4:	dd06      	ble.n	80159c4 <__hexnan+0x100>
 80159b6:	4544      	cmp	r4, r8
 80159b8:	d9c1      	bls.n	801593e <__hexnan+0x7a>
 80159ba:	2300      	movs	r3, #0
 80159bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80159c0:	2501      	movs	r5, #1
 80159c2:	3c04      	subs	r4, #4
 80159c4:	6822      	ldr	r2, [r4, #0]
 80159c6:	f000 000f 	and.w	r0, r0, #15
 80159ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80159ce:	6020      	str	r0, [r4, #0]
 80159d0:	e7b5      	b.n	801593e <__hexnan+0x7a>
 80159d2:	2508      	movs	r5, #8
 80159d4:	e7b3      	b.n	801593e <__hexnan+0x7a>
 80159d6:	9b01      	ldr	r3, [sp, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d0dd      	beq.n	8015998 <__hexnan+0xd4>
 80159dc:	f1c3 0320 	rsb	r3, r3, #32
 80159e0:	f04f 32ff 	mov.w	r2, #4294967295
 80159e4:	40da      	lsrs	r2, r3
 80159e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80159ea:	4013      	ands	r3, r2
 80159ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80159f0:	e7d2      	b.n	8015998 <__hexnan+0xd4>
 80159f2:	3f04      	subs	r7, #4
 80159f4:	e7d0      	b.n	8015998 <__hexnan+0xd4>
 80159f6:	2004      	movs	r0, #4
 80159f8:	e7d5      	b.n	80159a6 <__hexnan+0xe2>
	...

080159fc <malloc>:
 80159fc:	4b02      	ldr	r3, [pc, #8]	@ (8015a08 <malloc+0xc>)
 80159fe:	4601      	mov	r1, r0
 8015a00:	6818      	ldr	r0, [r3, #0]
 8015a02:	f000 b825 	b.w	8015a50 <_malloc_r>
 8015a06:	bf00      	nop
 8015a08:	240001f8 	.word	0x240001f8

08015a0c <sbrk_aligned>:
 8015a0c:	b570      	push	{r4, r5, r6, lr}
 8015a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8015a4c <sbrk_aligned+0x40>)
 8015a10:	460c      	mov	r4, r1
 8015a12:	6831      	ldr	r1, [r6, #0]
 8015a14:	4605      	mov	r5, r0
 8015a16:	b911      	cbnz	r1, 8015a1e <sbrk_aligned+0x12>
 8015a18:	f000 ffee 	bl	80169f8 <_sbrk_r>
 8015a1c:	6030      	str	r0, [r6, #0]
 8015a1e:	4621      	mov	r1, r4
 8015a20:	4628      	mov	r0, r5
 8015a22:	f000 ffe9 	bl	80169f8 <_sbrk_r>
 8015a26:	1c43      	adds	r3, r0, #1
 8015a28:	d103      	bne.n	8015a32 <sbrk_aligned+0x26>
 8015a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8015a2e:	4620      	mov	r0, r4
 8015a30:	bd70      	pop	{r4, r5, r6, pc}
 8015a32:	1cc4      	adds	r4, r0, #3
 8015a34:	f024 0403 	bic.w	r4, r4, #3
 8015a38:	42a0      	cmp	r0, r4
 8015a3a:	d0f8      	beq.n	8015a2e <sbrk_aligned+0x22>
 8015a3c:	1a21      	subs	r1, r4, r0
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f000 ffda 	bl	80169f8 <_sbrk_r>
 8015a44:	3001      	adds	r0, #1
 8015a46:	d1f2      	bne.n	8015a2e <sbrk_aligned+0x22>
 8015a48:	e7ef      	b.n	8015a2a <sbrk_aligned+0x1e>
 8015a4a:	bf00      	nop
 8015a4c:	24007504 	.word	0x24007504

08015a50 <_malloc_r>:
 8015a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a54:	1ccd      	adds	r5, r1, #3
 8015a56:	f025 0503 	bic.w	r5, r5, #3
 8015a5a:	3508      	adds	r5, #8
 8015a5c:	2d0c      	cmp	r5, #12
 8015a5e:	bf38      	it	cc
 8015a60:	250c      	movcc	r5, #12
 8015a62:	2d00      	cmp	r5, #0
 8015a64:	4606      	mov	r6, r0
 8015a66:	db01      	blt.n	8015a6c <_malloc_r+0x1c>
 8015a68:	42a9      	cmp	r1, r5
 8015a6a:	d904      	bls.n	8015a76 <_malloc_r+0x26>
 8015a6c:	230c      	movs	r3, #12
 8015a6e:	6033      	str	r3, [r6, #0]
 8015a70:	2000      	movs	r0, #0
 8015a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015b4c <_malloc_r+0xfc>
 8015a7a:	f000 f87b 	bl	8015b74 <__malloc_lock>
 8015a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8015a82:	461c      	mov	r4, r3
 8015a84:	bb44      	cbnz	r4, 8015ad8 <_malloc_r+0x88>
 8015a86:	4629      	mov	r1, r5
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f7ff ffbf 	bl	8015a0c <sbrk_aligned>
 8015a8e:	1c43      	adds	r3, r0, #1
 8015a90:	4604      	mov	r4, r0
 8015a92:	d158      	bne.n	8015b46 <_malloc_r+0xf6>
 8015a94:	f8d8 4000 	ldr.w	r4, [r8]
 8015a98:	4627      	mov	r7, r4
 8015a9a:	2f00      	cmp	r7, #0
 8015a9c:	d143      	bne.n	8015b26 <_malloc_r+0xd6>
 8015a9e:	2c00      	cmp	r4, #0
 8015aa0:	d04b      	beq.n	8015b3a <_malloc_r+0xea>
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	4639      	mov	r1, r7
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	eb04 0903 	add.w	r9, r4, r3
 8015aac:	f000 ffa4 	bl	80169f8 <_sbrk_r>
 8015ab0:	4581      	cmp	r9, r0
 8015ab2:	d142      	bne.n	8015b3a <_malloc_r+0xea>
 8015ab4:	6821      	ldr	r1, [r4, #0]
 8015ab6:	1a6d      	subs	r5, r5, r1
 8015ab8:	4629      	mov	r1, r5
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ff ffa6 	bl	8015a0c <sbrk_aligned>
 8015ac0:	3001      	adds	r0, #1
 8015ac2:	d03a      	beq.n	8015b3a <_malloc_r+0xea>
 8015ac4:	6823      	ldr	r3, [r4, #0]
 8015ac6:	442b      	add	r3, r5
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	f8d8 3000 	ldr.w	r3, [r8]
 8015ace:	685a      	ldr	r2, [r3, #4]
 8015ad0:	bb62      	cbnz	r2, 8015b2c <_malloc_r+0xdc>
 8015ad2:	f8c8 7000 	str.w	r7, [r8]
 8015ad6:	e00f      	b.n	8015af8 <_malloc_r+0xa8>
 8015ad8:	6822      	ldr	r2, [r4, #0]
 8015ada:	1b52      	subs	r2, r2, r5
 8015adc:	d420      	bmi.n	8015b20 <_malloc_r+0xd0>
 8015ade:	2a0b      	cmp	r2, #11
 8015ae0:	d917      	bls.n	8015b12 <_malloc_r+0xc2>
 8015ae2:	1961      	adds	r1, r4, r5
 8015ae4:	42a3      	cmp	r3, r4
 8015ae6:	6025      	str	r5, [r4, #0]
 8015ae8:	bf18      	it	ne
 8015aea:	6059      	strne	r1, [r3, #4]
 8015aec:	6863      	ldr	r3, [r4, #4]
 8015aee:	bf08      	it	eq
 8015af0:	f8c8 1000 	streq.w	r1, [r8]
 8015af4:	5162      	str	r2, [r4, r5]
 8015af6:	604b      	str	r3, [r1, #4]
 8015af8:	4630      	mov	r0, r6
 8015afa:	f000 f841 	bl	8015b80 <__malloc_unlock>
 8015afe:	f104 000b 	add.w	r0, r4, #11
 8015b02:	1d23      	adds	r3, r4, #4
 8015b04:	f020 0007 	bic.w	r0, r0, #7
 8015b08:	1ac2      	subs	r2, r0, r3
 8015b0a:	bf1c      	itt	ne
 8015b0c:	1a1b      	subne	r3, r3, r0
 8015b0e:	50a3      	strne	r3, [r4, r2]
 8015b10:	e7af      	b.n	8015a72 <_malloc_r+0x22>
 8015b12:	6862      	ldr	r2, [r4, #4]
 8015b14:	42a3      	cmp	r3, r4
 8015b16:	bf0c      	ite	eq
 8015b18:	f8c8 2000 	streq.w	r2, [r8]
 8015b1c:	605a      	strne	r2, [r3, #4]
 8015b1e:	e7eb      	b.n	8015af8 <_malloc_r+0xa8>
 8015b20:	4623      	mov	r3, r4
 8015b22:	6864      	ldr	r4, [r4, #4]
 8015b24:	e7ae      	b.n	8015a84 <_malloc_r+0x34>
 8015b26:	463c      	mov	r4, r7
 8015b28:	687f      	ldr	r7, [r7, #4]
 8015b2a:	e7b6      	b.n	8015a9a <_malloc_r+0x4a>
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	42a3      	cmp	r3, r4
 8015b32:	d1fb      	bne.n	8015b2c <_malloc_r+0xdc>
 8015b34:	2300      	movs	r3, #0
 8015b36:	6053      	str	r3, [r2, #4]
 8015b38:	e7de      	b.n	8015af8 <_malloc_r+0xa8>
 8015b3a:	230c      	movs	r3, #12
 8015b3c:	6033      	str	r3, [r6, #0]
 8015b3e:	4630      	mov	r0, r6
 8015b40:	f000 f81e 	bl	8015b80 <__malloc_unlock>
 8015b44:	e794      	b.n	8015a70 <_malloc_r+0x20>
 8015b46:	6005      	str	r5, [r0, #0]
 8015b48:	e7d6      	b.n	8015af8 <_malloc_r+0xa8>
 8015b4a:	bf00      	nop
 8015b4c:	24007508 	.word	0x24007508

08015b50 <__ascii_mbtowc>:
 8015b50:	b082      	sub	sp, #8
 8015b52:	b901      	cbnz	r1, 8015b56 <__ascii_mbtowc+0x6>
 8015b54:	a901      	add	r1, sp, #4
 8015b56:	b142      	cbz	r2, 8015b6a <__ascii_mbtowc+0x1a>
 8015b58:	b14b      	cbz	r3, 8015b6e <__ascii_mbtowc+0x1e>
 8015b5a:	7813      	ldrb	r3, [r2, #0]
 8015b5c:	600b      	str	r3, [r1, #0]
 8015b5e:	7812      	ldrb	r2, [r2, #0]
 8015b60:	1e10      	subs	r0, r2, #0
 8015b62:	bf18      	it	ne
 8015b64:	2001      	movne	r0, #1
 8015b66:	b002      	add	sp, #8
 8015b68:	4770      	bx	lr
 8015b6a:	4610      	mov	r0, r2
 8015b6c:	e7fb      	b.n	8015b66 <__ascii_mbtowc+0x16>
 8015b6e:	f06f 0001 	mvn.w	r0, #1
 8015b72:	e7f8      	b.n	8015b66 <__ascii_mbtowc+0x16>

08015b74 <__malloc_lock>:
 8015b74:	4801      	ldr	r0, [pc, #4]	@ (8015b7c <__malloc_lock+0x8>)
 8015b76:	f7fe bdb4 	b.w	80146e2 <__retarget_lock_acquire_recursive>
 8015b7a:	bf00      	nop
 8015b7c:	24007500 	.word	0x24007500

08015b80 <__malloc_unlock>:
 8015b80:	4801      	ldr	r0, [pc, #4]	@ (8015b88 <__malloc_unlock+0x8>)
 8015b82:	f7fe bdaf 	b.w	80146e4 <__retarget_lock_release_recursive>
 8015b86:	bf00      	nop
 8015b88:	24007500 	.word	0x24007500

08015b8c <_Balloc>:
 8015b8c:	b570      	push	{r4, r5, r6, lr}
 8015b8e:	69c6      	ldr	r6, [r0, #28]
 8015b90:	4604      	mov	r4, r0
 8015b92:	460d      	mov	r5, r1
 8015b94:	b976      	cbnz	r6, 8015bb4 <_Balloc+0x28>
 8015b96:	2010      	movs	r0, #16
 8015b98:	f7ff ff30 	bl	80159fc <malloc>
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	61e0      	str	r0, [r4, #28]
 8015ba0:	b920      	cbnz	r0, 8015bac <_Balloc+0x20>
 8015ba2:	4b18      	ldr	r3, [pc, #96]	@ (8015c04 <_Balloc+0x78>)
 8015ba4:	4818      	ldr	r0, [pc, #96]	@ (8015c08 <_Balloc+0x7c>)
 8015ba6:	216b      	movs	r1, #107	@ 0x6b
 8015ba8:	f000 ff36 	bl	8016a18 <__assert_func>
 8015bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015bb0:	6006      	str	r6, [r0, #0]
 8015bb2:	60c6      	str	r6, [r0, #12]
 8015bb4:	69e6      	ldr	r6, [r4, #28]
 8015bb6:	68f3      	ldr	r3, [r6, #12]
 8015bb8:	b183      	cbz	r3, 8015bdc <_Balloc+0x50>
 8015bba:	69e3      	ldr	r3, [r4, #28]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015bc2:	b9b8      	cbnz	r0, 8015bf4 <_Balloc+0x68>
 8015bc4:	2101      	movs	r1, #1
 8015bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8015bca:	1d72      	adds	r2, r6, #5
 8015bcc:	0092      	lsls	r2, r2, #2
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f000 ff40 	bl	8016a54 <_calloc_r>
 8015bd4:	b160      	cbz	r0, 8015bf0 <_Balloc+0x64>
 8015bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015bda:	e00e      	b.n	8015bfa <_Balloc+0x6e>
 8015bdc:	2221      	movs	r2, #33	@ 0x21
 8015bde:	2104      	movs	r1, #4
 8015be0:	4620      	mov	r0, r4
 8015be2:	f000 ff37 	bl	8016a54 <_calloc_r>
 8015be6:	69e3      	ldr	r3, [r4, #28]
 8015be8:	60f0      	str	r0, [r6, #12]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e4      	bne.n	8015bba <_Balloc+0x2e>
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}
 8015bf4:	6802      	ldr	r2, [r0, #0]
 8015bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015c00:	e7f7      	b.n	8015bf2 <_Balloc+0x66>
 8015c02:	bf00      	nop
 8015c04:	080173c3 	.word	0x080173c3
 8015c08:	080174a3 	.word	0x080174a3

08015c0c <_Bfree>:
 8015c0c:	b570      	push	{r4, r5, r6, lr}
 8015c0e:	69c6      	ldr	r6, [r0, #28]
 8015c10:	4605      	mov	r5, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	b976      	cbnz	r6, 8015c34 <_Bfree+0x28>
 8015c16:	2010      	movs	r0, #16
 8015c18:	f7ff fef0 	bl	80159fc <malloc>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	61e8      	str	r0, [r5, #28]
 8015c20:	b920      	cbnz	r0, 8015c2c <_Bfree+0x20>
 8015c22:	4b09      	ldr	r3, [pc, #36]	@ (8015c48 <_Bfree+0x3c>)
 8015c24:	4809      	ldr	r0, [pc, #36]	@ (8015c4c <_Bfree+0x40>)
 8015c26:	218f      	movs	r1, #143	@ 0x8f
 8015c28:	f000 fef6 	bl	8016a18 <__assert_func>
 8015c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c30:	6006      	str	r6, [r0, #0]
 8015c32:	60c6      	str	r6, [r0, #12]
 8015c34:	b13c      	cbz	r4, 8015c46 <_Bfree+0x3a>
 8015c36:	69eb      	ldr	r3, [r5, #28]
 8015c38:	6862      	ldr	r2, [r4, #4]
 8015c3a:	68db      	ldr	r3, [r3, #12]
 8015c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c40:	6021      	str	r1, [r4, #0]
 8015c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c46:	bd70      	pop	{r4, r5, r6, pc}
 8015c48:	080173c3 	.word	0x080173c3
 8015c4c:	080174a3 	.word	0x080174a3

08015c50 <__multadd>:
 8015c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c54:	690d      	ldr	r5, [r1, #16]
 8015c56:	4607      	mov	r7, r0
 8015c58:	460c      	mov	r4, r1
 8015c5a:	461e      	mov	r6, r3
 8015c5c:	f101 0c14 	add.w	ip, r1, #20
 8015c60:	2000      	movs	r0, #0
 8015c62:	f8dc 3000 	ldr.w	r3, [ip]
 8015c66:	b299      	uxth	r1, r3
 8015c68:	fb02 6101 	mla	r1, r2, r1, r6
 8015c6c:	0c1e      	lsrs	r6, r3, #16
 8015c6e:	0c0b      	lsrs	r3, r1, #16
 8015c70:	fb02 3306 	mla	r3, r2, r6, r3
 8015c74:	b289      	uxth	r1, r1
 8015c76:	3001      	adds	r0, #1
 8015c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015c7c:	4285      	cmp	r5, r0
 8015c7e:	f84c 1b04 	str.w	r1, [ip], #4
 8015c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015c86:	dcec      	bgt.n	8015c62 <__multadd+0x12>
 8015c88:	b30e      	cbz	r6, 8015cce <__multadd+0x7e>
 8015c8a:	68a3      	ldr	r3, [r4, #8]
 8015c8c:	42ab      	cmp	r3, r5
 8015c8e:	dc19      	bgt.n	8015cc4 <__multadd+0x74>
 8015c90:	6861      	ldr	r1, [r4, #4]
 8015c92:	4638      	mov	r0, r7
 8015c94:	3101      	adds	r1, #1
 8015c96:	f7ff ff79 	bl	8015b8c <_Balloc>
 8015c9a:	4680      	mov	r8, r0
 8015c9c:	b928      	cbnz	r0, 8015caa <__multadd+0x5a>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8015cd4 <__multadd+0x84>)
 8015ca2:	480d      	ldr	r0, [pc, #52]	@ (8015cd8 <__multadd+0x88>)
 8015ca4:	21ba      	movs	r1, #186	@ 0xba
 8015ca6:	f000 feb7 	bl	8016a18 <__assert_func>
 8015caa:	6922      	ldr	r2, [r4, #16]
 8015cac:	3202      	adds	r2, #2
 8015cae:	f104 010c 	add.w	r1, r4, #12
 8015cb2:	0092      	lsls	r2, r2, #2
 8015cb4:	300c      	adds	r0, #12
 8015cb6:	f7fe fd16 	bl	80146e6 <memcpy>
 8015cba:	4621      	mov	r1, r4
 8015cbc:	4638      	mov	r0, r7
 8015cbe:	f7ff ffa5 	bl	8015c0c <_Bfree>
 8015cc2:	4644      	mov	r4, r8
 8015cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015cc8:	3501      	adds	r5, #1
 8015cca:	615e      	str	r6, [r3, #20]
 8015ccc:	6125      	str	r5, [r4, #16]
 8015cce:	4620      	mov	r0, r4
 8015cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd4:	08017432 	.word	0x08017432
 8015cd8:	080174a3 	.word	0x080174a3

08015cdc <__s2b>:
 8015cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ce0:	460c      	mov	r4, r1
 8015ce2:	4615      	mov	r5, r2
 8015ce4:	461f      	mov	r7, r3
 8015ce6:	2209      	movs	r2, #9
 8015ce8:	3308      	adds	r3, #8
 8015cea:	4606      	mov	r6, r0
 8015cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	db09      	blt.n	8015d0c <__s2b+0x30>
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f7ff ff47 	bl	8015b8c <_Balloc>
 8015cfe:	b940      	cbnz	r0, 8015d12 <__s2b+0x36>
 8015d00:	4602      	mov	r2, r0
 8015d02:	4b19      	ldr	r3, [pc, #100]	@ (8015d68 <__s2b+0x8c>)
 8015d04:	4819      	ldr	r0, [pc, #100]	@ (8015d6c <__s2b+0x90>)
 8015d06:	21d3      	movs	r1, #211	@ 0xd3
 8015d08:	f000 fe86 	bl	8016a18 <__assert_func>
 8015d0c:	0052      	lsls	r2, r2, #1
 8015d0e:	3101      	adds	r1, #1
 8015d10:	e7f0      	b.n	8015cf4 <__s2b+0x18>
 8015d12:	9b08      	ldr	r3, [sp, #32]
 8015d14:	6143      	str	r3, [r0, #20]
 8015d16:	2d09      	cmp	r5, #9
 8015d18:	f04f 0301 	mov.w	r3, #1
 8015d1c:	6103      	str	r3, [r0, #16]
 8015d1e:	dd16      	ble.n	8015d4e <__s2b+0x72>
 8015d20:	f104 0909 	add.w	r9, r4, #9
 8015d24:	46c8      	mov	r8, r9
 8015d26:	442c      	add	r4, r5
 8015d28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015d2c:	4601      	mov	r1, r0
 8015d2e:	3b30      	subs	r3, #48	@ 0x30
 8015d30:	220a      	movs	r2, #10
 8015d32:	4630      	mov	r0, r6
 8015d34:	f7ff ff8c 	bl	8015c50 <__multadd>
 8015d38:	45a0      	cmp	r8, r4
 8015d3a:	d1f5      	bne.n	8015d28 <__s2b+0x4c>
 8015d3c:	f1a5 0408 	sub.w	r4, r5, #8
 8015d40:	444c      	add	r4, r9
 8015d42:	1b2d      	subs	r5, r5, r4
 8015d44:	1963      	adds	r3, r4, r5
 8015d46:	42bb      	cmp	r3, r7
 8015d48:	db04      	blt.n	8015d54 <__s2b+0x78>
 8015d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d4e:	340a      	adds	r4, #10
 8015d50:	2509      	movs	r5, #9
 8015d52:	e7f6      	b.n	8015d42 <__s2b+0x66>
 8015d54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015d58:	4601      	mov	r1, r0
 8015d5a:	3b30      	subs	r3, #48	@ 0x30
 8015d5c:	220a      	movs	r2, #10
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f7ff ff76 	bl	8015c50 <__multadd>
 8015d64:	e7ee      	b.n	8015d44 <__s2b+0x68>
 8015d66:	bf00      	nop
 8015d68:	08017432 	.word	0x08017432
 8015d6c:	080174a3 	.word	0x080174a3

08015d70 <__hi0bits>:
 8015d70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015d74:	4603      	mov	r3, r0
 8015d76:	bf36      	itet	cc
 8015d78:	0403      	lslcc	r3, r0, #16
 8015d7a:	2000      	movcs	r0, #0
 8015d7c:	2010      	movcc	r0, #16
 8015d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015d82:	bf3c      	itt	cc
 8015d84:	021b      	lslcc	r3, r3, #8
 8015d86:	3008      	addcc	r0, #8
 8015d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015d8c:	bf3c      	itt	cc
 8015d8e:	011b      	lslcc	r3, r3, #4
 8015d90:	3004      	addcc	r0, #4
 8015d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015d96:	bf3c      	itt	cc
 8015d98:	009b      	lslcc	r3, r3, #2
 8015d9a:	3002      	addcc	r0, #2
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	db05      	blt.n	8015dac <__hi0bits+0x3c>
 8015da0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015da4:	f100 0001 	add.w	r0, r0, #1
 8015da8:	bf08      	it	eq
 8015daa:	2020      	moveq	r0, #32
 8015dac:	4770      	bx	lr

08015dae <__lo0bits>:
 8015dae:	6803      	ldr	r3, [r0, #0]
 8015db0:	4602      	mov	r2, r0
 8015db2:	f013 0007 	ands.w	r0, r3, #7
 8015db6:	d00b      	beq.n	8015dd0 <__lo0bits+0x22>
 8015db8:	07d9      	lsls	r1, r3, #31
 8015dba:	d421      	bmi.n	8015e00 <__lo0bits+0x52>
 8015dbc:	0798      	lsls	r0, r3, #30
 8015dbe:	bf49      	itett	mi
 8015dc0:	085b      	lsrmi	r3, r3, #1
 8015dc2:	089b      	lsrpl	r3, r3, #2
 8015dc4:	2001      	movmi	r0, #1
 8015dc6:	6013      	strmi	r3, [r2, #0]
 8015dc8:	bf5c      	itt	pl
 8015dca:	6013      	strpl	r3, [r2, #0]
 8015dcc:	2002      	movpl	r0, #2
 8015dce:	4770      	bx	lr
 8015dd0:	b299      	uxth	r1, r3
 8015dd2:	b909      	cbnz	r1, 8015dd8 <__lo0bits+0x2a>
 8015dd4:	0c1b      	lsrs	r3, r3, #16
 8015dd6:	2010      	movs	r0, #16
 8015dd8:	b2d9      	uxtb	r1, r3
 8015dda:	b909      	cbnz	r1, 8015de0 <__lo0bits+0x32>
 8015ddc:	3008      	adds	r0, #8
 8015dde:	0a1b      	lsrs	r3, r3, #8
 8015de0:	0719      	lsls	r1, r3, #28
 8015de2:	bf04      	itt	eq
 8015de4:	091b      	lsreq	r3, r3, #4
 8015de6:	3004      	addeq	r0, #4
 8015de8:	0799      	lsls	r1, r3, #30
 8015dea:	bf04      	itt	eq
 8015dec:	089b      	lsreq	r3, r3, #2
 8015dee:	3002      	addeq	r0, #2
 8015df0:	07d9      	lsls	r1, r3, #31
 8015df2:	d403      	bmi.n	8015dfc <__lo0bits+0x4e>
 8015df4:	085b      	lsrs	r3, r3, #1
 8015df6:	f100 0001 	add.w	r0, r0, #1
 8015dfa:	d003      	beq.n	8015e04 <__lo0bits+0x56>
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	4770      	bx	lr
 8015e00:	2000      	movs	r0, #0
 8015e02:	4770      	bx	lr
 8015e04:	2020      	movs	r0, #32
 8015e06:	4770      	bx	lr

08015e08 <__i2b>:
 8015e08:	b510      	push	{r4, lr}
 8015e0a:	460c      	mov	r4, r1
 8015e0c:	2101      	movs	r1, #1
 8015e0e:	f7ff febd 	bl	8015b8c <_Balloc>
 8015e12:	4602      	mov	r2, r0
 8015e14:	b928      	cbnz	r0, 8015e22 <__i2b+0x1a>
 8015e16:	4b05      	ldr	r3, [pc, #20]	@ (8015e2c <__i2b+0x24>)
 8015e18:	4805      	ldr	r0, [pc, #20]	@ (8015e30 <__i2b+0x28>)
 8015e1a:	f240 1145 	movw	r1, #325	@ 0x145
 8015e1e:	f000 fdfb 	bl	8016a18 <__assert_func>
 8015e22:	2301      	movs	r3, #1
 8015e24:	6144      	str	r4, [r0, #20]
 8015e26:	6103      	str	r3, [r0, #16]
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	bf00      	nop
 8015e2c:	08017432 	.word	0x08017432
 8015e30:	080174a3 	.word	0x080174a3

08015e34 <__multiply>:
 8015e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e38:	4617      	mov	r7, r2
 8015e3a:	690a      	ldr	r2, [r1, #16]
 8015e3c:	693b      	ldr	r3, [r7, #16]
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	bfa8      	it	ge
 8015e42:	463b      	movge	r3, r7
 8015e44:	4689      	mov	r9, r1
 8015e46:	bfa4      	itt	ge
 8015e48:	460f      	movge	r7, r1
 8015e4a:	4699      	movge	r9, r3
 8015e4c:	693d      	ldr	r5, [r7, #16]
 8015e4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	6879      	ldr	r1, [r7, #4]
 8015e56:	eb05 060a 	add.w	r6, r5, sl
 8015e5a:	42b3      	cmp	r3, r6
 8015e5c:	b085      	sub	sp, #20
 8015e5e:	bfb8      	it	lt
 8015e60:	3101      	addlt	r1, #1
 8015e62:	f7ff fe93 	bl	8015b8c <_Balloc>
 8015e66:	b930      	cbnz	r0, 8015e76 <__multiply+0x42>
 8015e68:	4602      	mov	r2, r0
 8015e6a:	4b41      	ldr	r3, [pc, #260]	@ (8015f70 <__multiply+0x13c>)
 8015e6c:	4841      	ldr	r0, [pc, #260]	@ (8015f74 <__multiply+0x140>)
 8015e6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015e72:	f000 fdd1 	bl	8016a18 <__assert_func>
 8015e76:	f100 0414 	add.w	r4, r0, #20
 8015e7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015e7e:	4623      	mov	r3, r4
 8015e80:	2200      	movs	r2, #0
 8015e82:	4573      	cmp	r3, lr
 8015e84:	d320      	bcc.n	8015ec8 <__multiply+0x94>
 8015e86:	f107 0814 	add.w	r8, r7, #20
 8015e8a:	f109 0114 	add.w	r1, r9, #20
 8015e8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015e92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015e96:	9302      	str	r3, [sp, #8]
 8015e98:	1beb      	subs	r3, r5, r7
 8015e9a:	3b15      	subs	r3, #21
 8015e9c:	f023 0303 	bic.w	r3, r3, #3
 8015ea0:	3304      	adds	r3, #4
 8015ea2:	3715      	adds	r7, #21
 8015ea4:	42bd      	cmp	r5, r7
 8015ea6:	bf38      	it	cc
 8015ea8:	2304      	movcc	r3, #4
 8015eaa:	9301      	str	r3, [sp, #4]
 8015eac:	9b02      	ldr	r3, [sp, #8]
 8015eae:	9103      	str	r1, [sp, #12]
 8015eb0:	428b      	cmp	r3, r1
 8015eb2:	d80c      	bhi.n	8015ece <__multiply+0x9a>
 8015eb4:	2e00      	cmp	r6, #0
 8015eb6:	dd03      	ble.n	8015ec0 <__multiply+0x8c>
 8015eb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d055      	beq.n	8015f6c <__multiply+0x138>
 8015ec0:	6106      	str	r6, [r0, #16]
 8015ec2:	b005      	add	sp, #20
 8015ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec8:	f843 2b04 	str.w	r2, [r3], #4
 8015ecc:	e7d9      	b.n	8015e82 <__multiply+0x4e>
 8015ece:	f8b1 a000 	ldrh.w	sl, [r1]
 8015ed2:	f1ba 0f00 	cmp.w	sl, #0
 8015ed6:	d01f      	beq.n	8015f18 <__multiply+0xe4>
 8015ed8:	46c4      	mov	ip, r8
 8015eda:	46a1      	mov	r9, r4
 8015edc:	2700      	movs	r7, #0
 8015ede:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015ee2:	f8d9 3000 	ldr.w	r3, [r9]
 8015ee6:	fa1f fb82 	uxth.w	fp, r2
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	fb0a 330b 	mla	r3, sl, fp, r3
 8015ef0:	443b      	add	r3, r7
 8015ef2:	f8d9 7000 	ldr.w	r7, [r9]
 8015ef6:	0c12      	lsrs	r2, r2, #16
 8015ef8:	0c3f      	lsrs	r7, r7, #16
 8015efa:	fb0a 7202 	mla	r2, sl, r2, r7
 8015efe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f08:	4565      	cmp	r5, ip
 8015f0a:	f849 3b04 	str.w	r3, [r9], #4
 8015f0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015f12:	d8e4      	bhi.n	8015ede <__multiply+0xaa>
 8015f14:	9b01      	ldr	r3, [sp, #4]
 8015f16:	50e7      	str	r7, [r4, r3]
 8015f18:	9b03      	ldr	r3, [sp, #12]
 8015f1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015f1e:	3104      	adds	r1, #4
 8015f20:	f1b9 0f00 	cmp.w	r9, #0
 8015f24:	d020      	beq.n	8015f68 <__multiply+0x134>
 8015f26:	6823      	ldr	r3, [r4, #0]
 8015f28:	4647      	mov	r7, r8
 8015f2a:	46a4      	mov	ip, r4
 8015f2c:	f04f 0a00 	mov.w	sl, #0
 8015f30:	f8b7 b000 	ldrh.w	fp, [r7]
 8015f34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015f38:	fb09 220b 	mla	r2, r9, fp, r2
 8015f3c:	4452      	add	r2, sl
 8015f3e:	b29b      	uxth	r3, r3
 8015f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f44:	f84c 3b04 	str.w	r3, [ip], #4
 8015f48:	f857 3b04 	ldr.w	r3, [r7], #4
 8015f4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015f50:	f8bc 3000 	ldrh.w	r3, [ip]
 8015f54:	fb09 330a 	mla	r3, r9, sl, r3
 8015f58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015f5c:	42bd      	cmp	r5, r7
 8015f5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015f62:	d8e5      	bhi.n	8015f30 <__multiply+0xfc>
 8015f64:	9a01      	ldr	r2, [sp, #4]
 8015f66:	50a3      	str	r3, [r4, r2]
 8015f68:	3404      	adds	r4, #4
 8015f6a:	e79f      	b.n	8015eac <__multiply+0x78>
 8015f6c:	3e01      	subs	r6, #1
 8015f6e:	e7a1      	b.n	8015eb4 <__multiply+0x80>
 8015f70:	08017432 	.word	0x08017432
 8015f74:	080174a3 	.word	0x080174a3

08015f78 <__pow5mult>:
 8015f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f7c:	4615      	mov	r5, r2
 8015f7e:	f012 0203 	ands.w	r2, r2, #3
 8015f82:	4607      	mov	r7, r0
 8015f84:	460e      	mov	r6, r1
 8015f86:	d007      	beq.n	8015f98 <__pow5mult+0x20>
 8015f88:	4c25      	ldr	r4, [pc, #148]	@ (8016020 <__pow5mult+0xa8>)
 8015f8a:	3a01      	subs	r2, #1
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f92:	f7ff fe5d 	bl	8015c50 <__multadd>
 8015f96:	4606      	mov	r6, r0
 8015f98:	10ad      	asrs	r5, r5, #2
 8015f9a:	d03d      	beq.n	8016018 <__pow5mult+0xa0>
 8015f9c:	69fc      	ldr	r4, [r7, #28]
 8015f9e:	b97c      	cbnz	r4, 8015fc0 <__pow5mult+0x48>
 8015fa0:	2010      	movs	r0, #16
 8015fa2:	f7ff fd2b 	bl	80159fc <malloc>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	61f8      	str	r0, [r7, #28]
 8015faa:	b928      	cbnz	r0, 8015fb8 <__pow5mult+0x40>
 8015fac:	4b1d      	ldr	r3, [pc, #116]	@ (8016024 <__pow5mult+0xac>)
 8015fae:	481e      	ldr	r0, [pc, #120]	@ (8016028 <__pow5mult+0xb0>)
 8015fb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015fb4:	f000 fd30 	bl	8016a18 <__assert_func>
 8015fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015fbc:	6004      	str	r4, [r0, #0]
 8015fbe:	60c4      	str	r4, [r0, #12]
 8015fc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015fc8:	b94c      	cbnz	r4, 8015fde <__pow5mult+0x66>
 8015fca:	f240 2171 	movw	r1, #625	@ 0x271
 8015fce:	4638      	mov	r0, r7
 8015fd0:	f7ff ff1a 	bl	8015e08 <__i2b>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8015fda:	4604      	mov	r4, r0
 8015fdc:	6003      	str	r3, [r0, #0]
 8015fde:	f04f 0900 	mov.w	r9, #0
 8015fe2:	07eb      	lsls	r3, r5, #31
 8015fe4:	d50a      	bpl.n	8015ffc <__pow5mult+0x84>
 8015fe6:	4631      	mov	r1, r6
 8015fe8:	4622      	mov	r2, r4
 8015fea:	4638      	mov	r0, r7
 8015fec:	f7ff ff22 	bl	8015e34 <__multiply>
 8015ff0:	4631      	mov	r1, r6
 8015ff2:	4680      	mov	r8, r0
 8015ff4:	4638      	mov	r0, r7
 8015ff6:	f7ff fe09 	bl	8015c0c <_Bfree>
 8015ffa:	4646      	mov	r6, r8
 8015ffc:	106d      	asrs	r5, r5, #1
 8015ffe:	d00b      	beq.n	8016018 <__pow5mult+0xa0>
 8016000:	6820      	ldr	r0, [r4, #0]
 8016002:	b938      	cbnz	r0, 8016014 <__pow5mult+0x9c>
 8016004:	4622      	mov	r2, r4
 8016006:	4621      	mov	r1, r4
 8016008:	4638      	mov	r0, r7
 801600a:	f7ff ff13 	bl	8015e34 <__multiply>
 801600e:	6020      	str	r0, [r4, #0]
 8016010:	f8c0 9000 	str.w	r9, [r0]
 8016014:	4604      	mov	r4, r0
 8016016:	e7e4      	b.n	8015fe2 <__pow5mult+0x6a>
 8016018:	4630      	mov	r0, r6
 801601a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801601e:	bf00      	nop
 8016020:	080175a0 	.word	0x080175a0
 8016024:	080173c3 	.word	0x080173c3
 8016028:	080174a3 	.word	0x080174a3

0801602c <__lshift>:
 801602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016030:	460c      	mov	r4, r1
 8016032:	6849      	ldr	r1, [r1, #4]
 8016034:	6923      	ldr	r3, [r4, #16]
 8016036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801603a:	68a3      	ldr	r3, [r4, #8]
 801603c:	4607      	mov	r7, r0
 801603e:	4691      	mov	r9, r2
 8016040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016044:	f108 0601 	add.w	r6, r8, #1
 8016048:	42b3      	cmp	r3, r6
 801604a:	db0b      	blt.n	8016064 <__lshift+0x38>
 801604c:	4638      	mov	r0, r7
 801604e:	f7ff fd9d 	bl	8015b8c <_Balloc>
 8016052:	4605      	mov	r5, r0
 8016054:	b948      	cbnz	r0, 801606a <__lshift+0x3e>
 8016056:	4602      	mov	r2, r0
 8016058:	4b28      	ldr	r3, [pc, #160]	@ (80160fc <__lshift+0xd0>)
 801605a:	4829      	ldr	r0, [pc, #164]	@ (8016100 <__lshift+0xd4>)
 801605c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016060:	f000 fcda 	bl	8016a18 <__assert_func>
 8016064:	3101      	adds	r1, #1
 8016066:	005b      	lsls	r3, r3, #1
 8016068:	e7ee      	b.n	8016048 <__lshift+0x1c>
 801606a:	2300      	movs	r3, #0
 801606c:	f100 0114 	add.w	r1, r0, #20
 8016070:	f100 0210 	add.w	r2, r0, #16
 8016074:	4618      	mov	r0, r3
 8016076:	4553      	cmp	r3, sl
 8016078:	db33      	blt.n	80160e2 <__lshift+0xb6>
 801607a:	6920      	ldr	r0, [r4, #16]
 801607c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016080:	f104 0314 	add.w	r3, r4, #20
 8016084:	f019 091f 	ands.w	r9, r9, #31
 8016088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801608c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016090:	d02b      	beq.n	80160ea <__lshift+0xbe>
 8016092:	f1c9 0e20 	rsb	lr, r9, #32
 8016096:	468a      	mov	sl, r1
 8016098:	2200      	movs	r2, #0
 801609a:	6818      	ldr	r0, [r3, #0]
 801609c:	fa00 f009 	lsl.w	r0, r0, r9
 80160a0:	4310      	orrs	r0, r2
 80160a2:	f84a 0b04 	str.w	r0, [sl], #4
 80160a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80160aa:	459c      	cmp	ip, r3
 80160ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80160b0:	d8f3      	bhi.n	801609a <__lshift+0x6e>
 80160b2:	ebac 0304 	sub.w	r3, ip, r4
 80160b6:	3b15      	subs	r3, #21
 80160b8:	f023 0303 	bic.w	r3, r3, #3
 80160bc:	3304      	adds	r3, #4
 80160be:	f104 0015 	add.w	r0, r4, #21
 80160c2:	4560      	cmp	r0, ip
 80160c4:	bf88      	it	hi
 80160c6:	2304      	movhi	r3, #4
 80160c8:	50ca      	str	r2, [r1, r3]
 80160ca:	b10a      	cbz	r2, 80160d0 <__lshift+0xa4>
 80160cc:	f108 0602 	add.w	r6, r8, #2
 80160d0:	3e01      	subs	r6, #1
 80160d2:	4638      	mov	r0, r7
 80160d4:	612e      	str	r6, [r5, #16]
 80160d6:	4621      	mov	r1, r4
 80160d8:	f7ff fd98 	bl	8015c0c <_Bfree>
 80160dc:	4628      	mov	r0, r5
 80160de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80160e6:	3301      	adds	r3, #1
 80160e8:	e7c5      	b.n	8016076 <__lshift+0x4a>
 80160ea:	3904      	subs	r1, #4
 80160ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80160f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80160f4:	459c      	cmp	ip, r3
 80160f6:	d8f9      	bhi.n	80160ec <__lshift+0xc0>
 80160f8:	e7ea      	b.n	80160d0 <__lshift+0xa4>
 80160fa:	bf00      	nop
 80160fc:	08017432 	.word	0x08017432
 8016100:	080174a3 	.word	0x080174a3

08016104 <__mcmp>:
 8016104:	690a      	ldr	r2, [r1, #16]
 8016106:	4603      	mov	r3, r0
 8016108:	6900      	ldr	r0, [r0, #16]
 801610a:	1a80      	subs	r0, r0, r2
 801610c:	b530      	push	{r4, r5, lr}
 801610e:	d10e      	bne.n	801612e <__mcmp+0x2a>
 8016110:	3314      	adds	r3, #20
 8016112:	3114      	adds	r1, #20
 8016114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801611c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016124:	4295      	cmp	r5, r2
 8016126:	d003      	beq.n	8016130 <__mcmp+0x2c>
 8016128:	d205      	bcs.n	8016136 <__mcmp+0x32>
 801612a:	f04f 30ff 	mov.w	r0, #4294967295
 801612e:	bd30      	pop	{r4, r5, pc}
 8016130:	42a3      	cmp	r3, r4
 8016132:	d3f3      	bcc.n	801611c <__mcmp+0x18>
 8016134:	e7fb      	b.n	801612e <__mcmp+0x2a>
 8016136:	2001      	movs	r0, #1
 8016138:	e7f9      	b.n	801612e <__mcmp+0x2a>
	...

0801613c <__mdiff>:
 801613c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016140:	4689      	mov	r9, r1
 8016142:	4606      	mov	r6, r0
 8016144:	4611      	mov	r1, r2
 8016146:	4648      	mov	r0, r9
 8016148:	4614      	mov	r4, r2
 801614a:	f7ff ffdb 	bl	8016104 <__mcmp>
 801614e:	1e05      	subs	r5, r0, #0
 8016150:	d112      	bne.n	8016178 <__mdiff+0x3c>
 8016152:	4629      	mov	r1, r5
 8016154:	4630      	mov	r0, r6
 8016156:	f7ff fd19 	bl	8015b8c <_Balloc>
 801615a:	4602      	mov	r2, r0
 801615c:	b928      	cbnz	r0, 801616a <__mdiff+0x2e>
 801615e:	4b3f      	ldr	r3, [pc, #252]	@ (801625c <__mdiff+0x120>)
 8016160:	f240 2137 	movw	r1, #567	@ 0x237
 8016164:	483e      	ldr	r0, [pc, #248]	@ (8016260 <__mdiff+0x124>)
 8016166:	f000 fc57 	bl	8016a18 <__assert_func>
 801616a:	2301      	movs	r3, #1
 801616c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016170:	4610      	mov	r0, r2
 8016172:	b003      	add	sp, #12
 8016174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016178:	bfbc      	itt	lt
 801617a:	464b      	movlt	r3, r9
 801617c:	46a1      	movlt	r9, r4
 801617e:	4630      	mov	r0, r6
 8016180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016184:	bfba      	itte	lt
 8016186:	461c      	movlt	r4, r3
 8016188:	2501      	movlt	r5, #1
 801618a:	2500      	movge	r5, #0
 801618c:	f7ff fcfe 	bl	8015b8c <_Balloc>
 8016190:	4602      	mov	r2, r0
 8016192:	b918      	cbnz	r0, 801619c <__mdiff+0x60>
 8016194:	4b31      	ldr	r3, [pc, #196]	@ (801625c <__mdiff+0x120>)
 8016196:	f240 2145 	movw	r1, #581	@ 0x245
 801619a:	e7e3      	b.n	8016164 <__mdiff+0x28>
 801619c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80161a0:	6926      	ldr	r6, [r4, #16]
 80161a2:	60c5      	str	r5, [r0, #12]
 80161a4:	f109 0310 	add.w	r3, r9, #16
 80161a8:	f109 0514 	add.w	r5, r9, #20
 80161ac:	f104 0e14 	add.w	lr, r4, #20
 80161b0:	f100 0b14 	add.w	fp, r0, #20
 80161b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80161b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80161bc:	9301      	str	r3, [sp, #4]
 80161be:	46d9      	mov	r9, fp
 80161c0:	f04f 0c00 	mov.w	ip, #0
 80161c4:	9b01      	ldr	r3, [sp, #4]
 80161c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80161ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80161ce:	9301      	str	r3, [sp, #4]
 80161d0:	fa1f f38a 	uxth.w	r3, sl
 80161d4:	4619      	mov	r1, r3
 80161d6:	b283      	uxth	r3, r0
 80161d8:	1acb      	subs	r3, r1, r3
 80161da:	0c00      	lsrs	r0, r0, #16
 80161dc:	4463      	add	r3, ip
 80161de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80161e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80161ec:	4576      	cmp	r6, lr
 80161ee:	f849 3b04 	str.w	r3, [r9], #4
 80161f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80161f6:	d8e5      	bhi.n	80161c4 <__mdiff+0x88>
 80161f8:	1b33      	subs	r3, r6, r4
 80161fa:	3b15      	subs	r3, #21
 80161fc:	f023 0303 	bic.w	r3, r3, #3
 8016200:	3415      	adds	r4, #21
 8016202:	3304      	adds	r3, #4
 8016204:	42a6      	cmp	r6, r4
 8016206:	bf38      	it	cc
 8016208:	2304      	movcc	r3, #4
 801620a:	441d      	add	r5, r3
 801620c:	445b      	add	r3, fp
 801620e:	461e      	mov	r6, r3
 8016210:	462c      	mov	r4, r5
 8016212:	4544      	cmp	r4, r8
 8016214:	d30e      	bcc.n	8016234 <__mdiff+0xf8>
 8016216:	f108 0103 	add.w	r1, r8, #3
 801621a:	1b49      	subs	r1, r1, r5
 801621c:	f021 0103 	bic.w	r1, r1, #3
 8016220:	3d03      	subs	r5, #3
 8016222:	45a8      	cmp	r8, r5
 8016224:	bf38      	it	cc
 8016226:	2100      	movcc	r1, #0
 8016228:	440b      	add	r3, r1
 801622a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801622e:	b191      	cbz	r1, 8016256 <__mdiff+0x11a>
 8016230:	6117      	str	r7, [r2, #16]
 8016232:	e79d      	b.n	8016170 <__mdiff+0x34>
 8016234:	f854 1b04 	ldr.w	r1, [r4], #4
 8016238:	46e6      	mov	lr, ip
 801623a:	0c08      	lsrs	r0, r1, #16
 801623c:	fa1c fc81 	uxtah	ip, ip, r1
 8016240:	4471      	add	r1, lr
 8016242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016246:	b289      	uxth	r1, r1
 8016248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801624c:	f846 1b04 	str.w	r1, [r6], #4
 8016250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016254:	e7dd      	b.n	8016212 <__mdiff+0xd6>
 8016256:	3f01      	subs	r7, #1
 8016258:	e7e7      	b.n	801622a <__mdiff+0xee>
 801625a:	bf00      	nop
 801625c:	08017432 	.word	0x08017432
 8016260:	080174a3 	.word	0x080174a3

08016264 <__ulp>:
 8016264:	b082      	sub	sp, #8
 8016266:	ed8d 0b00 	vstr	d0, [sp]
 801626a:	9a01      	ldr	r2, [sp, #4]
 801626c:	4b0f      	ldr	r3, [pc, #60]	@ (80162ac <__ulp+0x48>)
 801626e:	4013      	ands	r3, r2
 8016270:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016274:	2b00      	cmp	r3, #0
 8016276:	dc08      	bgt.n	801628a <__ulp+0x26>
 8016278:	425b      	negs	r3, r3
 801627a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801627e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016282:	da04      	bge.n	801628e <__ulp+0x2a>
 8016284:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016288:	4113      	asrs	r3, r2
 801628a:	2200      	movs	r2, #0
 801628c:	e008      	b.n	80162a0 <__ulp+0x3c>
 801628e:	f1a2 0314 	sub.w	r3, r2, #20
 8016292:	2b1e      	cmp	r3, #30
 8016294:	bfda      	itte	le
 8016296:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801629a:	40da      	lsrle	r2, r3
 801629c:	2201      	movgt	r2, #1
 801629e:	2300      	movs	r3, #0
 80162a0:	4619      	mov	r1, r3
 80162a2:	4610      	mov	r0, r2
 80162a4:	ec41 0b10 	vmov	d0, r0, r1
 80162a8:	b002      	add	sp, #8
 80162aa:	4770      	bx	lr
 80162ac:	7ff00000 	.word	0x7ff00000

080162b0 <__b2d>:
 80162b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b4:	6906      	ldr	r6, [r0, #16]
 80162b6:	f100 0814 	add.w	r8, r0, #20
 80162ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80162be:	1f37      	subs	r7, r6, #4
 80162c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80162c4:	4610      	mov	r0, r2
 80162c6:	f7ff fd53 	bl	8015d70 <__hi0bits>
 80162ca:	f1c0 0320 	rsb	r3, r0, #32
 80162ce:	280a      	cmp	r0, #10
 80162d0:	600b      	str	r3, [r1, #0]
 80162d2:	491b      	ldr	r1, [pc, #108]	@ (8016340 <__b2d+0x90>)
 80162d4:	dc15      	bgt.n	8016302 <__b2d+0x52>
 80162d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80162da:	fa22 f30c 	lsr.w	r3, r2, ip
 80162de:	45b8      	cmp	r8, r7
 80162e0:	ea43 0501 	orr.w	r5, r3, r1
 80162e4:	bf34      	ite	cc
 80162e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80162ea:	2300      	movcs	r3, #0
 80162ec:	3015      	adds	r0, #21
 80162ee:	fa02 f000 	lsl.w	r0, r2, r0
 80162f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80162f6:	4303      	orrs	r3, r0
 80162f8:	461c      	mov	r4, r3
 80162fa:	ec45 4b10 	vmov	d0, r4, r5
 80162fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016302:	45b8      	cmp	r8, r7
 8016304:	bf3a      	itte	cc
 8016306:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801630a:	f1a6 0708 	subcc.w	r7, r6, #8
 801630e:	2300      	movcs	r3, #0
 8016310:	380b      	subs	r0, #11
 8016312:	d012      	beq.n	801633a <__b2d+0x8a>
 8016314:	f1c0 0120 	rsb	r1, r0, #32
 8016318:	fa23 f401 	lsr.w	r4, r3, r1
 801631c:	4082      	lsls	r2, r0
 801631e:	4322      	orrs	r2, r4
 8016320:	4547      	cmp	r7, r8
 8016322:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016326:	bf8c      	ite	hi
 8016328:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801632c:	2200      	movls	r2, #0
 801632e:	4083      	lsls	r3, r0
 8016330:	40ca      	lsrs	r2, r1
 8016332:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016336:	4313      	orrs	r3, r2
 8016338:	e7de      	b.n	80162f8 <__b2d+0x48>
 801633a:	ea42 0501 	orr.w	r5, r2, r1
 801633e:	e7db      	b.n	80162f8 <__b2d+0x48>
 8016340:	3ff00000 	.word	0x3ff00000

08016344 <__d2b>:
 8016344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016348:	460f      	mov	r7, r1
 801634a:	2101      	movs	r1, #1
 801634c:	ec59 8b10 	vmov	r8, r9, d0
 8016350:	4616      	mov	r6, r2
 8016352:	f7ff fc1b 	bl	8015b8c <_Balloc>
 8016356:	4604      	mov	r4, r0
 8016358:	b930      	cbnz	r0, 8016368 <__d2b+0x24>
 801635a:	4602      	mov	r2, r0
 801635c:	4b23      	ldr	r3, [pc, #140]	@ (80163ec <__d2b+0xa8>)
 801635e:	4824      	ldr	r0, [pc, #144]	@ (80163f0 <__d2b+0xac>)
 8016360:	f240 310f 	movw	r1, #783	@ 0x30f
 8016364:	f000 fb58 	bl	8016a18 <__assert_func>
 8016368:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801636c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016370:	b10d      	cbz	r5, 8016376 <__d2b+0x32>
 8016372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016376:	9301      	str	r3, [sp, #4]
 8016378:	f1b8 0300 	subs.w	r3, r8, #0
 801637c:	d023      	beq.n	80163c6 <__d2b+0x82>
 801637e:	4668      	mov	r0, sp
 8016380:	9300      	str	r3, [sp, #0]
 8016382:	f7ff fd14 	bl	8015dae <__lo0bits>
 8016386:	e9dd 1200 	ldrd	r1, r2, [sp]
 801638a:	b1d0      	cbz	r0, 80163c2 <__d2b+0x7e>
 801638c:	f1c0 0320 	rsb	r3, r0, #32
 8016390:	fa02 f303 	lsl.w	r3, r2, r3
 8016394:	430b      	orrs	r3, r1
 8016396:	40c2      	lsrs	r2, r0
 8016398:	6163      	str	r3, [r4, #20]
 801639a:	9201      	str	r2, [sp, #4]
 801639c:	9b01      	ldr	r3, [sp, #4]
 801639e:	61a3      	str	r3, [r4, #24]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	bf0c      	ite	eq
 80163a4:	2201      	moveq	r2, #1
 80163a6:	2202      	movne	r2, #2
 80163a8:	6122      	str	r2, [r4, #16]
 80163aa:	b1a5      	cbz	r5, 80163d6 <__d2b+0x92>
 80163ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80163b0:	4405      	add	r5, r0
 80163b2:	603d      	str	r5, [r7, #0]
 80163b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80163b8:	6030      	str	r0, [r6, #0]
 80163ba:	4620      	mov	r0, r4
 80163bc:	b003      	add	sp, #12
 80163be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163c2:	6161      	str	r1, [r4, #20]
 80163c4:	e7ea      	b.n	801639c <__d2b+0x58>
 80163c6:	a801      	add	r0, sp, #4
 80163c8:	f7ff fcf1 	bl	8015dae <__lo0bits>
 80163cc:	9b01      	ldr	r3, [sp, #4]
 80163ce:	6163      	str	r3, [r4, #20]
 80163d0:	3020      	adds	r0, #32
 80163d2:	2201      	movs	r2, #1
 80163d4:	e7e8      	b.n	80163a8 <__d2b+0x64>
 80163d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80163da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80163de:	6038      	str	r0, [r7, #0]
 80163e0:	6918      	ldr	r0, [r3, #16]
 80163e2:	f7ff fcc5 	bl	8015d70 <__hi0bits>
 80163e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80163ea:	e7e5      	b.n	80163b8 <__d2b+0x74>
 80163ec:	08017432 	.word	0x08017432
 80163f0:	080174a3 	.word	0x080174a3

080163f4 <__ratio>:
 80163f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	4688      	mov	r8, r1
 80163fa:	4669      	mov	r1, sp
 80163fc:	4681      	mov	r9, r0
 80163fe:	f7ff ff57 	bl	80162b0 <__b2d>
 8016402:	a901      	add	r1, sp, #4
 8016404:	4640      	mov	r0, r8
 8016406:	ec55 4b10 	vmov	r4, r5, d0
 801640a:	f7ff ff51 	bl	80162b0 <__b2d>
 801640e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016412:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016416:	1ad2      	subs	r2, r2, r3
 8016418:	e9dd 3100 	ldrd	r3, r1, [sp]
 801641c:	1a5b      	subs	r3, r3, r1
 801641e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016422:	ec57 6b10 	vmov	r6, r7, d0
 8016426:	2b00      	cmp	r3, #0
 8016428:	bfd6      	itet	le
 801642a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801642e:	462a      	movgt	r2, r5
 8016430:	463a      	movle	r2, r7
 8016432:	46ab      	mov	fp, r5
 8016434:	46a2      	mov	sl, r4
 8016436:	bfce      	itee	gt
 8016438:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801643c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016440:	ee00 3a90 	vmovle	s1, r3
 8016444:	ec4b ab17 	vmov	d7, sl, fp
 8016448:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801644c:	b003      	add	sp, #12
 801644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016452 <__copybits>:
 8016452:	3901      	subs	r1, #1
 8016454:	b570      	push	{r4, r5, r6, lr}
 8016456:	1149      	asrs	r1, r1, #5
 8016458:	6914      	ldr	r4, [r2, #16]
 801645a:	3101      	adds	r1, #1
 801645c:	f102 0314 	add.w	r3, r2, #20
 8016460:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016464:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016468:	1f05      	subs	r5, r0, #4
 801646a:	42a3      	cmp	r3, r4
 801646c:	d30c      	bcc.n	8016488 <__copybits+0x36>
 801646e:	1aa3      	subs	r3, r4, r2
 8016470:	3b11      	subs	r3, #17
 8016472:	f023 0303 	bic.w	r3, r3, #3
 8016476:	3211      	adds	r2, #17
 8016478:	42a2      	cmp	r2, r4
 801647a:	bf88      	it	hi
 801647c:	2300      	movhi	r3, #0
 801647e:	4418      	add	r0, r3
 8016480:	2300      	movs	r3, #0
 8016482:	4288      	cmp	r0, r1
 8016484:	d305      	bcc.n	8016492 <__copybits+0x40>
 8016486:	bd70      	pop	{r4, r5, r6, pc}
 8016488:	f853 6b04 	ldr.w	r6, [r3], #4
 801648c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016490:	e7eb      	b.n	801646a <__copybits+0x18>
 8016492:	f840 3b04 	str.w	r3, [r0], #4
 8016496:	e7f4      	b.n	8016482 <__copybits+0x30>

08016498 <__any_on>:
 8016498:	f100 0214 	add.w	r2, r0, #20
 801649c:	6900      	ldr	r0, [r0, #16]
 801649e:	114b      	asrs	r3, r1, #5
 80164a0:	4298      	cmp	r0, r3
 80164a2:	b510      	push	{r4, lr}
 80164a4:	db11      	blt.n	80164ca <__any_on+0x32>
 80164a6:	dd0a      	ble.n	80164be <__any_on+0x26>
 80164a8:	f011 011f 	ands.w	r1, r1, #31
 80164ac:	d007      	beq.n	80164be <__any_on+0x26>
 80164ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80164b2:	fa24 f001 	lsr.w	r0, r4, r1
 80164b6:	fa00 f101 	lsl.w	r1, r0, r1
 80164ba:	428c      	cmp	r4, r1
 80164bc:	d10b      	bne.n	80164d6 <__any_on+0x3e>
 80164be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80164c2:	4293      	cmp	r3, r2
 80164c4:	d803      	bhi.n	80164ce <__any_on+0x36>
 80164c6:	2000      	movs	r0, #0
 80164c8:	bd10      	pop	{r4, pc}
 80164ca:	4603      	mov	r3, r0
 80164cc:	e7f7      	b.n	80164be <__any_on+0x26>
 80164ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80164d2:	2900      	cmp	r1, #0
 80164d4:	d0f5      	beq.n	80164c2 <__any_on+0x2a>
 80164d6:	2001      	movs	r0, #1
 80164d8:	e7f6      	b.n	80164c8 <__any_on+0x30>

080164da <__ascii_wctomb>:
 80164da:	4603      	mov	r3, r0
 80164dc:	4608      	mov	r0, r1
 80164de:	b141      	cbz	r1, 80164f2 <__ascii_wctomb+0x18>
 80164e0:	2aff      	cmp	r2, #255	@ 0xff
 80164e2:	d904      	bls.n	80164ee <__ascii_wctomb+0x14>
 80164e4:	228a      	movs	r2, #138	@ 0x8a
 80164e6:	601a      	str	r2, [r3, #0]
 80164e8:	f04f 30ff 	mov.w	r0, #4294967295
 80164ec:	4770      	bx	lr
 80164ee:	700a      	strb	r2, [r1, #0]
 80164f0:	2001      	movs	r0, #1
 80164f2:	4770      	bx	lr

080164f4 <__sfputc_r>:
 80164f4:	6893      	ldr	r3, [r2, #8]
 80164f6:	3b01      	subs	r3, #1
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	b410      	push	{r4}
 80164fc:	6093      	str	r3, [r2, #8]
 80164fe:	da08      	bge.n	8016512 <__sfputc_r+0x1e>
 8016500:	6994      	ldr	r4, [r2, #24]
 8016502:	42a3      	cmp	r3, r4
 8016504:	db01      	blt.n	801650a <__sfputc_r+0x16>
 8016506:	290a      	cmp	r1, #10
 8016508:	d103      	bne.n	8016512 <__sfputc_r+0x1e>
 801650a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801650e:	f000 b9df 	b.w	80168d0 <__swbuf_r>
 8016512:	6813      	ldr	r3, [r2, #0]
 8016514:	1c58      	adds	r0, r3, #1
 8016516:	6010      	str	r0, [r2, #0]
 8016518:	7019      	strb	r1, [r3, #0]
 801651a:	4608      	mov	r0, r1
 801651c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016520:	4770      	bx	lr

08016522 <__sfputs_r>:
 8016522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016524:	4606      	mov	r6, r0
 8016526:	460f      	mov	r7, r1
 8016528:	4614      	mov	r4, r2
 801652a:	18d5      	adds	r5, r2, r3
 801652c:	42ac      	cmp	r4, r5
 801652e:	d101      	bne.n	8016534 <__sfputs_r+0x12>
 8016530:	2000      	movs	r0, #0
 8016532:	e007      	b.n	8016544 <__sfputs_r+0x22>
 8016534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016538:	463a      	mov	r2, r7
 801653a:	4630      	mov	r0, r6
 801653c:	f7ff ffda 	bl	80164f4 <__sfputc_r>
 8016540:	1c43      	adds	r3, r0, #1
 8016542:	d1f3      	bne.n	801652c <__sfputs_r+0xa>
 8016544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016548 <_vfiprintf_r>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	460d      	mov	r5, r1
 801654e:	b09d      	sub	sp, #116	@ 0x74
 8016550:	4614      	mov	r4, r2
 8016552:	4698      	mov	r8, r3
 8016554:	4606      	mov	r6, r0
 8016556:	b118      	cbz	r0, 8016560 <_vfiprintf_r+0x18>
 8016558:	6a03      	ldr	r3, [r0, #32]
 801655a:	b90b      	cbnz	r3, 8016560 <_vfiprintf_r+0x18>
 801655c:	f7fd ff26 	bl	80143ac <__sinit>
 8016560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016562:	07d9      	lsls	r1, r3, #31
 8016564:	d405      	bmi.n	8016572 <_vfiprintf_r+0x2a>
 8016566:	89ab      	ldrh	r3, [r5, #12]
 8016568:	059a      	lsls	r2, r3, #22
 801656a:	d402      	bmi.n	8016572 <_vfiprintf_r+0x2a>
 801656c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801656e:	f7fe f8b8 	bl	80146e2 <__retarget_lock_acquire_recursive>
 8016572:	89ab      	ldrh	r3, [r5, #12]
 8016574:	071b      	lsls	r3, r3, #28
 8016576:	d501      	bpl.n	801657c <_vfiprintf_r+0x34>
 8016578:	692b      	ldr	r3, [r5, #16]
 801657a:	b99b      	cbnz	r3, 80165a4 <_vfiprintf_r+0x5c>
 801657c:	4629      	mov	r1, r5
 801657e:	4630      	mov	r0, r6
 8016580:	f000 f9e4 	bl	801694c <__swsetup_r>
 8016584:	b170      	cbz	r0, 80165a4 <_vfiprintf_r+0x5c>
 8016586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016588:	07dc      	lsls	r4, r3, #31
 801658a:	d504      	bpl.n	8016596 <_vfiprintf_r+0x4e>
 801658c:	f04f 30ff 	mov.w	r0, #4294967295
 8016590:	b01d      	add	sp, #116	@ 0x74
 8016592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016596:	89ab      	ldrh	r3, [r5, #12]
 8016598:	0598      	lsls	r0, r3, #22
 801659a:	d4f7      	bmi.n	801658c <_vfiprintf_r+0x44>
 801659c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801659e:	f7fe f8a1 	bl	80146e4 <__retarget_lock_release_recursive>
 80165a2:	e7f3      	b.n	801658c <_vfiprintf_r+0x44>
 80165a4:	2300      	movs	r3, #0
 80165a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80165a8:	2320      	movs	r3, #32
 80165aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80165ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80165b2:	2330      	movs	r3, #48	@ 0x30
 80165b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016764 <_vfiprintf_r+0x21c>
 80165b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165bc:	f04f 0901 	mov.w	r9, #1
 80165c0:	4623      	mov	r3, r4
 80165c2:	469a      	mov	sl, r3
 80165c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165c8:	b10a      	cbz	r2, 80165ce <_vfiprintf_r+0x86>
 80165ca:	2a25      	cmp	r2, #37	@ 0x25
 80165cc:	d1f9      	bne.n	80165c2 <_vfiprintf_r+0x7a>
 80165ce:	ebba 0b04 	subs.w	fp, sl, r4
 80165d2:	d00b      	beq.n	80165ec <_vfiprintf_r+0xa4>
 80165d4:	465b      	mov	r3, fp
 80165d6:	4622      	mov	r2, r4
 80165d8:	4629      	mov	r1, r5
 80165da:	4630      	mov	r0, r6
 80165dc:	f7ff ffa1 	bl	8016522 <__sfputs_r>
 80165e0:	3001      	adds	r0, #1
 80165e2:	f000 80a7 	beq.w	8016734 <_vfiprintf_r+0x1ec>
 80165e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165e8:	445a      	add	r2, fp
 80165ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80165ec:	f89a 3000 	ldrb.w	r3, [sl]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	f000 809f 	beq.w	8016734 <_vfiprintf_r+0x1ec>
 80165f6:	2300      	movs	r3, #0
 80165f8:	f04f 32ff 	mov.w	r2, #4294967295
 80165fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016600:	f10a 0a01 	add.w	sl, sl, #1
 8016604:	9304      	str	r3, [sp, #16]
 8016606:	9307      	str	r3, [sp, #28]
 8016608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801660c:	931a      	str	r3, [sp, #104]	@ 0x68
 801660e:	4654      	mov	r4, sl
 8016610:	2205      	movs	r2, #5
 8016612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016616:	4853      	ldr	r0, [pc, #332]	@ (8016764 <_vfiprintf_r+0x21c>)
 8016618:	f7e9 fe62 	bl	80002e0 <memchr>
 801661c:	9a04      	ldr	r2, [sp, #16]
 801661e:	b9d8      	cbnz	r0, 8016658 <_vfiprintf_r+0x110>
 8016620:	06d1      	lsls	r1, r2, #27
 8016622:	bf44      	itt	mi
 8016624:	2320      	movmi	r3, #32
 8016626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801662a:	0713      	lsls	r3, r2, #28
 801662c:	bf44      	itt	mi
 801662e:	232b      	movmi	r3, #43	@ 0x2b
 8016630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016634:	f89a 3000 	ldrb.w	r3, [sl]
 8016638:	2b2a      	cmp	r3, #42	@ 0x2a
 801663a:	d015      	beq.n	8016668 <_vfiprintf_r+0x120>
 801663c:	9a07      	ldr	r2, [sp, #28]
 801663e:	4654      	mov	r4, sl
 8016640:	2000      	movs	r0, #0
 8016642:	f04f 0c0a 	mov.w	ip, #10
 8016646:	4621      	mov	r1, r4
 8016648:	f811 3b01 	ldrb.w	r3, [r1], #1
 801664c:	3b30      	subs	r3, #48	@ 0x30
 801664e:	2b09      	cmp	r3, #9
 8016650:	d94b      	bls.n	80166ea <_vfiprintf_r+0x1a2>
 8016652:	b1b0      	cbz	r0, 8016682 <_vfiprintf_r+0x13a>
 8016654:	9207      	str	r2, [sp, #28]
 8016656:	e014      	b.n	8016682 <_vfiprintf_r+0x13a>
 8016658:	eba0 0308 	sub.w	r3, r0, r8
 801665c:	fa09 f303 	lsl.w	r3, r9, r3
 8016660:	4313      	orrs	r3, r2
 8016662:	9304      	str	r3, [sp, #16]
 8016664:	46a2      	mov	sl, r4
 8016666:	e7d2      	b.n	801660e <_vfiprintf_r+0xc6>
 8016668:	9b03      	ldr	r3, [sp, #12]
 801666a:	1d19      	adds	r1, r3, #4
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	9103      	str	r1, [sp, #12]
 8016670:	2b00      	cmp	r3, #0
 8016672:	bfbb      	ittet	lt
 8016674:	425b      	neglt	r3, r3
 8016676:	f042 0202 	orrlt.w	r2, r2, #2
 801667a:	9307      	strge	r3, [sp, #28]
 801667c:	9307      	strlt	r3, [sp, #28]
 801667e:	bfb8      	it	lt
 8016680:	9204      	strlt	r2, [sp, #16]
 8016682:	7823      	ldrb	r3, [r4, #0]
 8016684:	2b2e      	cmp	r3, #46	@ 0x2e
 8016686:	d10a      	bne.n	801669e <_vfiprintf_r+0x156>
 8016688:	7863      	ldrb	r3, [r4, #1]
 801668a:	2b2a      	cmp	r3, #42	@ 0x2a
 801668c:	d132      	bne.n	80166f4 <_vfiprintf_r+0x1ac>
 801668e:	9b03      	ldr	r3, [sp, #12]
 8016690:	1d1a      	adds	r2, r3, #4
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	9203      	str	r2, [sp, #12]
 8016696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801669a:	3402      	adds	r4, #2
 801669c:	9305      	str	r3, [sp, #20]
 801669e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016774 <_vfiprintf_r+0x22c>
 80166a2:	7821      	ldrb	r1, [r4, #0]
 80166a4:	2203      	movs	r2, #3
 80166a6:	4650      	mov	r0, sl
 80166a8:	f7e9 fe1a 	bl	80002e0 <memchr>
 80166ac:	b138      	cbz	r0, 80166be <_vfiprintf_r+0x176>
 80166ae:	9b04      	ldr	r3, [sp, #16]
 80166b0:	eba0 000a 	sub.w	r0, r0, sl
 80166b4:	2240      	movs	r2, #64	@ 0x40
 80166b6:	4082      	lsls	r2, r0
 80166b8:	4313      	orrs	r3, r2
 80166ba:	3401      	adds	r4, #1
 80166bc:	9304      	str	r3, [sp, #16]
 80166be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166c2:	4829      	ldr	r0, [pc, #164]	@ (8016768 <_vfiprintf_r+0x220>)
 80166c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80166c8:	2206      	movs	r2, #6
 80166ca:	f7e9 fe09 	bl	80002e0 <memchr>
 80166ce:	2800      	cmp	r0, #0
 80166d0:	d03f      	beq.n	8016752 <_vfiprintf_r+0x20a>
 80166d2:	4b26      	ldr	r3, [pc, #152]	@ (801676c <_vfiprintf_r+0x224>)
 80166d4:	bb1b      	cbnz	r3, 801671e <_vfiprintf_r+0x1d6>
 80166d6:	9b03      	ldr	r3, [sp, #12]
 80166d8:	3307      	adds	r3, #7
 80166da:	f023 0307 	bic.w	r3, r3, #7
 80166de:	3308      	adds	r3, #8
 80166e0:	9303      	str	r3, [sp, #12]
 80166e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166e4:	443b      	add	r3, r7
 80166e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80166e8:	e76a      	b.n	80165c0 <_vfiprintf_r+0x78>
 80166ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80166ee:	460c      	mov	r4, r1
 80166f0:	2001      	movs	r0, #1
 80166f2:	e7a8      	b.n	8016646 <_vfiprintf_r+0xfe>
 80166f4:	2300      	movs	r3, #0
 80166f6:	3401      	adds	r4, #1
 80166f8:	9305      	str	r3, [sp, #20]
 80166fa:	4619      	mov	r1, r3
 80166fc:	f04f 0c0a 	mov.w	ip, #10
 8016700:	4620      	mov	r0, r4
 8016702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016706:	3a30      	subs	r2, #48	@ 0x30
 8016708:	2a09      	cmp	r2, #9
 801670a:	d903      	bls.n	8016714 <_vfiprintf_r+0x1cc>
 801670c:	2b00      	cmp	r3, #0
 801670e:	d0c6      	beq.n	801669e <_vfiprintf_r+0x156>
 8016710:	9105      	str	r1, [sp, #20]
 8016712:	e7c4      	b.n	801669e <_vfiprintf_r+0x156>
 8016714:	fb0c 2101 	mla	r1, ip, r1, r2
 8016718:	4604      	mov	r4, r0
 801671a:	2301      	movs	r3, #1
 801671c:	e7f0      	b.n	8016700 <_vfiprintf_r+0x1b8>
 801671e:	ab03      	add	r3, sp, #12
 8016720:	9300      	str	r3, [sp, #0]
 8016722:	462a      	mov	r2, r5
 8016724:	4b12      	ldr	r3, [pc, #72]	@ (8016770 <_vfiprintf_r+0x228>)
 8016726:	a904      	add	r1, sp, #16
 8016728:	4630      	mov	r0, r6
 801672a:	f7fd fa0d 	bl	8013b48 <_printf_float>
 801672e:	4607      	mov	r7, r0
 8016730:	1c78      	adds	r0, r7, #1
 8016732:	d1d6      	bne.n	80166e2 <_vfiprintf_r+0x19a>
 8016734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016736:	07d9      	lsls	r1, r3, #31
 8016738:	d405      	bmi.n	8016746 <_vfiprintf_r+0x1fe>
 801673a:	89ab      	ldrh	r3, [r5, #12]
 801673c:	059a      	lsls	r2, r3, #22
 801673e:	d402      	bmi.n	8016746 <_vfiprintf_r+0x1fe>
 8016740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016742:	f7fd ffcf 	bl	80146e4 <__retarget_lock_release_recursive>
 8016746:	89ab      	ldrh	r3, [r5, #12]
 8016748:	065b      	lsls	r3, r3, #25
 801674a:	f53f af1f 	bmi.w	801658c <_vfiprintf_r+0x44>
 801674e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016750:	e71e      	b.n	8016590 <_vfiprintf_r+0x48>
 8016752:	ab03      	add	r3, sp, #12
 8016754:	9300      	str	r3, [sp, #0]
 8016756:	462a      	mov	r2, r5
 8016758:	4b05      	ldr	r3, [pc, #20]	@ (8016770 <_vfiprintf_r+0x228>)
 801675a:	a904      	add	r1, sp, #16
 801675c:	4630      	mov	r0, r6
 801675e:	f7fd fc7b 	bl	8014058 <_printf_i>
 8016762:	e7e4      	b.n	801672e <_vfiprintf_r+0x1e6>
 8016764:	080174fc 	.word	0x080174fc
 8016768:	08017506 	.word	0x08017506
 801676c:	08013b49 	.word	0x08013b49
 8016770:	08016523 	.word	0x08016523
 8016774:	08017502 	.word	0x08017502

08016778 <__sflush_r>:
 8016778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016780:	0716      	lsls	r6, r2, #28
 8016782:	4605      	mov	r5, r0
 8016784:	460c      	mov	r4, r1
 8016786:	d454      	bmi.n	8016832 <__sflush_r+0xba>
 8016788:	684b      	ldr	r3, [r1, #4]
 801678a:	2b00      	cmp	r3, #0
 801678c:	dc02      	bgt.n	8016794 <__sflush_r+0x1c>
 801678e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016790:	2b00      	cmp	r3, #0
 8016792:	dd48      	ble.n	8016826 <__sflush_r+0xae>
 8016794:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016796:	2e00      	cmp	r6, #0
 8016798:	d045      	beq.n	8016826 <__sflush_r+0xae>
 801679a:	2300      	movs	r3, #0
 801679c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80167a0:	682f      	ldr	r7, [r5, #0]
 80167a2:	6a21      	ldr	r1, [r4, #32]
 80167a4:	602b      	str	r3, [r5, #0]
 80167a6:	d030      	beq.n	801680a <__sflush_r+0x92>
 80167a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80167aa:	89a3      	ldrh	r3, [r4, #12]
 80167ac:	0759      	lsls	r1, r3, #29
 80167ae:	d505      	bpl.n	80167bc <__sflush_r+0x44>
 80167b0:	6863      	ldr	r3, [r4, #4]
 80167b2:	1ad2      	subs	r2, r2, r3
 80167b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80167b6:	b10b      	cbz	r3, 80167bc <__sflush_r+0x44>
 80167b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80167ba:	1ad2      	subs	r2, r2, r3
 80167bc:	2300      	movs	r3, #0
 80167be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80167c0:	6a21      	ldr	r1, [r4, #32]
 80167c2:	4628      	mov	r0, r5
 80167c4:	47b0      	blx	r6
 80167c6:	1c43      	adds	r3, r0, #1
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	d106      	bne.n	80167da <__sflush_r+0x62>
 80167cc:	6829      	ldr	r1, [r5, #0]
 80167ce:	291d      	cmp	r1, #29
 80167d0:	d82b      	bhi.n	801682a <__sflush_r+0xb2>
 80167d2:	4a2a      	ldr	r2, [pc, #168]	@ (801687c <__sflush_r+0x104>)
 80167d4:	40ca      	lsrs	r2, r1
 80167d6:	07d6      	lsls	r6, r2, #31
 80167d8:	d527      	bpl.n	801682a <__sflush_r+0xb2>
 80167da:	2200      	movs	r2, #0
 80167dc:	6062      	str	r2, [r4, #4]
 80167de:	04d9      	lsls	r1, r3, #19
 80167e0:	6922      	ldr	r2, [r4, #16]
 80167e2:	6022      	str	r2, [r4, #0]
 80167e4:	d504      	bpl.n	80167f0 <__sflush_r+0x78>
 80167e6:	1c42      	adds	r2, r0, #1
 80167e8:	d101      	bne.n	80167ee <__sflush_r+0x76>
 80167ea:	682b      	ldr	r3, [r5, #0]
 80167ec:	b903      	cbnz	r3, 80167f0 <__sflush_r+0x78>
 80167ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80167f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167f2:	602f      	str	r7, [r5, #0]
 80167f4:	b1b9      	cbz	r1, 8016826 <__sflush_r+0xae>
 80167f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167fa:	4299      	cmp	r1, r3
 80167fc:	d002      	beq.n	8016804 <__sflush_r+0x8c>
 80167fe:	4628      	mov	r0, r5
 8016800:	f7fe fd78 	bl	80152f4 <_free_r>
 8016804:	2300      	movs	r3, #0
 8016806:	6363      	str	r3, [r4, #52]	@ 0x34
 8016808:	e00d      	b.n	8016826 <__sflush_r+0xae>
 801680a:	2301      	movs	r3, #1
 801680c:	4628      	mov	r0, r5
 801680e:	47b0      	blx	r6
 8016810:	4602      	mov	r2, r0
 8016812:	1c50      	adds	r0, r2, #1
 8016814:	d1c9      	bne.n	80167aa <__sflush_r+0x32>
 8016816:	682b      	ldr	r3, [r5, #0]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d0c6      	beq.n	80167aa <__sflush_r+0x32>
 801681c:	2b1d      	cmp	r3, #29
 801681e:	d001      	beq.n	8016824 <__sflush_r+0xac>
 8016820:	2b16      	cmp	r3, #22
 8016822:	d11e      	bne.n	8016862 <__sflush_r+0xea>
 8016824:	602f      	str	r7, [r5, #0]
 8016826:	2000      	movs	r0, #0
 8016828:	e022      	b.n	8016870 <__sflush_r+0xf8>
 801682a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801682e:	b21b      	sxth	r3, r3
 8016830:	e01b      	b.n	801686a <__sflush_r+0xf2>
 8016832:	690f      	ldr	r7, [r1, #16]
 8016834:	2f00      	cmp	r7, #0
 8016836:	d0f6      	beq.n	8016826 <__sflush_r+0xae>
 8016838:	0793      	lsls	r3, r2, #30
 801683a:	680e      	ldr	r6, [r1, #0]
 801683c:	bf08      	it	eq
 801683e:	694b      	ldreq	r3, [r1, #20]
 8016840:	600f      	str	r7, [r1, #0]
 8016842:	bf18      	it	ne
 8016844:	2300      	movne	r3, #0
 8016846:	eba6 0807 	sub.w	r8, r6, r7
 801684a:	608b      	str	r3, [r1, #8]
 801684c:	f1b8 0f00 	cmp.w	r8, #0
 8016850:	dde9      	ble.n	8016826 <__sflush_r+0xae>
 8016852:	6a21      	ldr	r1, [r4, #32]
 8016854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016856:	4643      	mov	r3, r8
 8016858:	463a      	mov	r2, r7
 801685a:	4628      	mov	r0, r5
 801685c:	47b0      	blx	r6
 801685e:	2800      	cmp	r0, #0
 8016860:	dc08      	bgt.n	8016874 <__sflush_r+0xfc>
 8016862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801686a:	81a3      	strh	r3, [r4, #12]
 801686c:	f04f 30ff 	mov.w	r0, #4294967295
 8016870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016874:	4407      	add	r7, r0
 8016876:	eba8 0800 	sub.w	r8, r8, r0
 801687a:	e7e7      	b.n	801684c <__sflush_r+0xd4>
 801687c:	20400001 	.word	0x20400001

08016880 <_fflush_r>:
 8016880:	b538      	push	{r3, r4, r5, lr}
 8016882:	690b      	ldr	r3, [r1, #16]
 8016884:	4605      	mov	r5, r0
 8016886:	460c      	mov	r4, r1
 8016888:	b913      	cbnz	r3, 8016890 <_fflush_r+0x10>
 801688a:	2500      	movs	r5, #0
 801688c:	4628      	mov	r0, r5
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	b118      	cbz	r0, 801689a <_fflush_r+0x1a>
 8016892:	6a03      	ldr	r3, [r0, #32]
 8016894:	b90b      	cbnz	r3, 801689a <_fflush_r+0x1a>
 8016896:	f7fd fd89 	bl	80143ac <__sinit>
 801689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d0f3      	beq.n	801688a <_fflush_r+0xa>
 80168a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80168a4:	07d0      	lsls	r0, r2, #31
 80168a6:	d404      	bmi.n	80168b2 <_fflush_r+0x32>
 80168a8:	0599      	lsls	r1, r3, #22
 80168aa:	d402      	bmi.n	80168b2 <_fflush_r+0x32>
 80168ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168ae:	f7fd ff18 	bl	80146e2 <__retarget_lock_acquire_recursive>
 80168b2:	4628      	mov	r0, r5
 80168b4:	4621      	mov	r1, r4
 80168b6:	f7ff ff5f 	bl	8016778 <__sflush_r>
 80168ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80168bc:	07da      	lsls	r2, r3, #31
 80168be:	4605      	mov	r5, r0
 80168c0:	d4e4      	bmi.n	801688c <_fflush_r+0xc>
 80168c2:	89a3      	ldrh	r3, [r4, #12]
 80168c4:	059b      	lsls	r3, r3, #22
 80168c6:	d4e1      	bmi.n	801688c <_fflush_r+0xc>
 80168c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80168ca:	f7fd ff0b 	bl	80146e4 <__retarget_lock_release_recursive>
 80168ce:	e7dd      	b.n	801688c <_fflush_r+0xc>

080168d0 <__swbuf_r>:
 80168d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d2:	460e      	mov	r6, r1
 80168d4:	4614      	mov	r4, r2
 80168d6:	4605      	mov	r5, r0
 80168d8:	b118      	cbz	r0, 80168e2 <__swbuf_r+0x12>
 80168da:	6a03      	ldr	r3, [r0, #32]
 80168dc:	b90b      	cbnz	r3, 80168e2 <__swbuf_r+0x12>
 80168de:	f7fd fd65 	bl	80143ac <__sinit>
 80168e2:	69a3      	ldr	r3, [r4, #24]
 80168e4:	60a3      	str	r3, [r4, #8]
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	071a      	lsls	r2, r3, #28
 80168ea:	d501      	bpl.n	80168f0 <__swbuf_r+0x20>
 80168ec:	6923      	ldr	r3, [r4, #16]
 80168ee:	b943      	cbnz	r3, 8016902 <__swbuf_r+0x32>
 80168f0:	4621      	mov	r1, r4
 80168f2:	4628      	mov	r0, r5
 80168f4:	f000 f82a 	bl	801694c <__swsetup_r>
 80168f8:	b118      	cbz	r0, 8016902 <__swbuf_r+0x32>
 80168fa:	f04f 37ff 	mov.w	r7, #4294967295
 80168fe:	4638      	mov	r0, r7
 8016900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	6922      	ldr	r2, [r4, #16]
 8016906:	1a98      	subs	r0, r3, r2
 8016908:	6963      	ldr	r3, [r4, #20]
 801690a:	b2f6      	uxtb	r6, r6
 801690c:	4283      	cmp	r3, r0
 801690e:	4637      	mov	r7, r6
 8016910:	dc05      	bgt.n	801691e <__swbuf_r+0x4e>
 8016912:	4621      	mov	r1, r4
 8016914:	4628      	mov	r0, r5
 8016916:	f7ff ffb3 	bl	8016880 <_fflush_r>
 801691a:	2800      	cmp	r0, #0
 801691c:	d1ed      	bne.n	80168fa <__swbuf_r+0x2a>
 801691e:	68a3      	ldr	r3, [r4, #8]
 8016920:	3b01      	subs	r3, #1
 8016922:	60a3      	str	r3, [r4, #8]
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	1c5a      	adds	r2, r3, #1
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	701e      	strb	r6, [r3, #0]
 801692c:	6962      	ldr	r2, [r4, #20]
 801692e:	1c43      	adds	r3, r0, #1
 8016930:	429a      	cmp	r2, r3
 8016932:	d004      	beq.n	801693e <__swbuf_r+0x6e>
 8016934:	89a3      	ldrh	r3, [r4, #12]
 8016936:	07db      	lsls	r3, r3, #31
 8016938:	d5e1      	bpl.n	80168fe <__swbuf_r+0x2e>
 801693a:	2e0a      	cmp	r6, #10
 801693c:	d1df      	bne.n	80168fe <__swbuf_r+0x2e>
 801693e:	4621      	mov	r1, r4
 8016940:	4628      	mov	r0, r5
 8016942:	f7ff ff9d 	bl	8016880 <_fflush_r>
 8016946:	2800      	cmp	r0, #0
 8016948:	d0d9      	beq.n	80168fe <__swbuf_r+0x2e>
 801694a:	e7d6      	b.n	80168fa <__swbuf_r+0x2a>

0801694c <__swsetup_r>:
 801694c:	b538      	push	{r3, r4, r5, lr}
 801694e:	4b29      	ldr	r3, [pc, #164]	@ (80169f4 <__swsetup_r+0xa8>)
 8016950:	4605      	mov	r5, r0
 8016952:	6818      	ldr	r0, [r3, #0]
 8016954:	460c      	mov	r4, r1
 8016956:	b118      	cbz	r0, 8016960 <__swsetup_r+0x14>
 8016958:	6a03      	ldr	r3, [r0, #32]
 801695a:	b90b      	cbnz	r3, 8016960 <__swsetup_r+0x14>
 801695c:	f7fd fd26 	bl	80143ac <__sinit>
 8016960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016964:	0719      	lsls	r1, r3, #28
 8016966:	d422      	bmi.n	80169ae <__swsetup_r+0x62>
 8016968:	06da      	lsls	r2, r3, #27
 801696a:	d407      	bmi.n	801697c <__swsetup_r+0x30>
 801696c:	2209      	movs	r2, #9
 801696e:	602a      	str	r2, [r5, #0]
 8016970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016974:	81a3      	strh	r3, [r4, #12]
 8016976:	f04f 30ff 	mov.w	r0, #4294967295
 801697a:	e033      	b.n	80169e4 <__swsetup_r+0x98>
 801697c:	0758      	lsls	r0, r3, #29
 801697e:	d512      	bpl.n	80169a6 <__swsetup_r+0x5a>
 8016980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016982:	b141      	cbz	r1, 8016996 <__swsetup_r+0x4a>
 8016984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016988:	4299      	cmp	r1, r3
 801698a:	d002      	beq.n	8016992 <__swsetup_r+0x46>
 801698c:	4628      	mov	r0, r5
 801698e:	f7fe fcb1 	bl	80152f4 <_free_r>
 8016992:	2300      	movs	r3, #0
 8016994:	6363      	str	r3, [r4, #52]	@ 0x34
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	2300      	movs	r3, #0
 80169a0:	6063      	str	r3, [r4, #4]
 80169a2:	6923      	ldr	r3, [r4, #16]
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	f043 0308 	orr.w	r3, r3, #8
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	6923      	ldr	r3, [r4, #16]
 80169b0:	b94b      	cbnz	r3, 80169c6 <__swsetup_r+0x7a>
 80169b2:	89a3      	ldrh	r3, [r4, #12]
 80169b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80169b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80169bc:	d003      	beq.n	80169c6 <__swsetup_r+0x7a>
 80169be:	4621      	mov	r1, r4
 80169c0:	4628      	mov	r0, r5
 80169c2:	f000 f893 	bl	8016aec <__smakebuf_r>
 80169c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ca:	f013 0201 	ands.w	r2, r3, #1
 80169ce:	d00a      	beq.n	80169e6 <__swsetup_r+0x9a>
 80169d0:	2200      	movs	r2, #0
 80169d2:	60a2      	str	r2, [r4, #8]
 80169d4:	6962      	ldr	r2, [r4, #20]
 80169d6:	4252      	negs	r2, r2
 80169d8:	61a2      	str	r2, [r4, #24]
 80169da:	6922      	ldr	r2, [r4, #16]
 80169dc:	b942      	cbnz	r2, 80169f0 <__swsetup_r+0xa4>
 80169de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80169e2:	d1c5      	bne.n	8016970 <__swsetup_r+0x24>
 80169e4:	bd38      	pop	{r3, r4, r5, pc}
 80169e6:	0799      	lsls	r1, r3, #30
 80169e8:	bf58      	it	pl
 80169ea:	6962      	ldrpl	r2, [r4, #20]
 80169ec:	60a2      	str	r2, [r4, #8]
 80169ee:	e7f4      	b.n	80169da <__swsetup_r+0x8e>
 80169f0:	2000      	movs	r0, #0
 80169f2:	e7f7      	b.n	80169e4 <__swsetup_r+0x98>
 80169f4:	240001f8 	.word	0x240001f8

080169f8 <_sbrk_r>:
 80169f8:	b538      	push	{r3, r4, r5, lr}
 80169fa:	4d06      	ldr	r5, [pc, #24]	@ (8016a14 <_sbrk_r+0x1c>)
 80169fc:	2300      	movs	r3, #0
 80169fe:	4604      	mov	r4, r0
 8016a00:	4608      	mov	r0, r1
 8016a02:	602b      	str	r3, [r5, #0]
 8016a04:	f7ee ffc6 	bl	8005994 <_sbrk>
 8016a08:	1c43      	adds	r3, r0, #1
 8016a0a:	d102      	bne.n	8016a12 <_sbrk_r+0x1a>
 8016a0c:	682b      	ldr	r3, [r5, #0]
 8016a0e:	b103      	cbz	r3, 8016a12 <_sbrk_r+0x1a>
 8016a10:	6023      	str	r3, [r4, #0]
 8016a12:	bd38      	pop	{r3, r4, r5, pc}
 8016a14:	240074fc 	.word	0x240074fc

08016a18 <__assert_func>:
 8016a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a1a:	4614      	mov	r4, r2
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	4b09      	ldr	r3, [pc, #36]	@ (8016a44 <__assert_func+0x2c>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	4605      	mov	r5, r0
 8016a24:	68d8      	ldr	r0, [r3, #12]
 8016a26:	b14c      	cbz	r4, 8016a3c <__assert_func+0x24>
 8016a28:	4b07      	ldr	r3, [pc, #28]	@ (8016a48 <__assert_func+0x30>)
 8016a2a:	9100      	str	r1, [sp, #0]
 8016a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a30:	4906      	ldr	r1, [pc, #24]	@ (8016a4c <__assert_func+0x34>)
 8016a32:	462b      	mov	r3, r5
 8016a34:	f000 f822 	bl	8016a7c <fiprintf>
 8016a38:	f000 f8b6 	bl	8016ba8 <abort>
 8016a3c:	4b04      	ldr	r3, [pc, #16]	@ (8016a50 <__assert_func+0x38>)
 8016a3e:	461c      	mov	r4, r3
 8016a40:	e7f3      	b.n	8016a2a <__assert_func+0x12>
 8016a42:	bf00      	nop
 8016a44:	240001f8 	.word	0x240001f8
 8016a48:	0801750d 	.word	0x0801750d
 8016a4c:	0801751a 	.word	0x0801751a
 8016a50:	08017548 	.word	0x08017548

08016a54 <_calloc_r>:
 8016a54:	b570      	push	{r4, r5, r6, lr}
 8016a56:	fba1 5402 	umull	r5, r4, r1, r2
 8016a5a:	b934      	cbnz	r4, 8016a6a <_calloc_r+0x16>
 8016a5c:	4629      	mov	r1, r5
 8016a5e:	f7fe fff7 	bl	8015a50 <_malloc_r>
 8016a62:	4606      	mov	r6, r0
 8016a64:	b928      	cbnz	r0, 8016a72 <_calloc_r+0x1e>
 8016a66:	4630      	mov	r0, r6
 8016a68:	bd70      	pop	{r4, r5, r6, pc}
 8016a6a:	220c      	movs	r2, #12
 8016a6c:	6002      	str	r2, [r0, #0]
 8016a6e:	2600      	movs	r6, #0
 8016a70:	e7f9      	b.n	8016a66 <_calloc_r+0x12>
 8016a72:	462a      	mov	r2, r5
 8016a74:	4621      	mov	r1, r4
 8016a76:	f7fd fd24 	bl	80144c2 <memset>
 8016a7a:	e7f4      	b.n	8016a66 <_calloc_r+0x12>

08016a7c <fiprintf>:
 8016a7c:	b40e      	push	{r1, r2, r3}
 8016a7e:	b503      	push	{r0, r1, lr}
 8016a80:	4601      	mov	r1, r0
 8016a82:	ab03      	add	r3, sp, #12
 8016a84:	4805      	ldr	r0, [pc, #20]	@ (8016a9c <fiprintf+0x20>)
 8016a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a8a:	6800      	ldr	r0, [r0, #0]
 8016a8c:	9301      	str	r3, [sp, #4]
 8016a8e:	f7ff fd5b 	bl	8016548 <_vfiprintf_r>
 8016a92:	b002      	add	sp, #8
 8016a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a98:	b003      	add	sp, #12
 8016a9a:	4770      	bx	lr
 8016a9c:	240001f8 	.word	0x240001f8

08016aa0 <__swhatbuf_r>:
 8016aa0:	b570      	push	{r4, r5, r6, lr}
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aa8:	2900      	cmp	r1, #0
 8016aaa:	b096      	sub	sp, #88	@ 0x58
 8016aac:	4615      	mov	r5, r2
 8016aae:	461e      	mov	r6, r3
 8016ab0:	da0d      	bge.n	8016ace <__swhatbuf_r+0x2e>
 8016ab2:	89a3      	ldrh	r3, [r4, #12]
 8016ab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016ab8:	f04f 0100 	mov.w	r1, #0
 8016abc:	bf14      	ite	ne
 8016abe:	2340      	movne	r3, #64	@ 0x40
 8016ac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016ac4:	2000      	movs	r0, #0
 8016ac6:	6031      	str	r1, [r6, #0]
 8016ac8:	602b      	str	r3, [r5, #0]
 8016aca:	b016      	add	sp, #88	@ 0x58
 8016acc:	bd70      	pop	{r4, r5, r6, pc}
 8016ace:	466a      	mov	r2, sp
 8016ad0:	f000 f848 	bl	8016b64 <_fstat_r>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	dbec      	blt.n	8016ab2 <__swhatbuf_r+0x12>
 8016ad8:	9901      	ldr	r1, [sp, #4]
 8016ada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016ade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ae2:	4259      	negs	r1, r3
 8016ae4:	4159      	adcs	r1, r3
 8016ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016aea:	e7eb      	b.n	8016ac4 <__swhatbuf_r+0x24>

08016aec <__smakebuf_r>:
 8016aec:	898b      	ldrh	r3, [r1, #12]
 8016aee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016af0:	079d      	lsls	r5, r3, #30
 8016af2:	4606      	mov	r6, r0
 8016af4:	460c      	mov	r4, r1
 8016af6:	d507      	bpl.n	8016b08 <__smakebuf_r+0x1c>
 8016af8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016afc:	6023      	str	r3, [r4, #0]
 8016afe:	6123      	str	r3, [r4, #16]
 8016b00:	2301      	movs	r3, #1
 8016b02:	6163      	str	r3, [r4, #20]
 8016b04:	b003      	add	sp, #12
 8016b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b08:	ab01      	add	r3, sp, #4
 8016b0a:	466a      	mov	r2, sp
 8016b0c:	f7ff ffc8 	bl	8016aa0 <__swhatbuf_r>
 8016b10:	9f00      	ldr	r7, [sp, #0]
 8016b12:	4605      	mov	r5, r0
 8016b14:	4639      	mov	r1, r7
 8016b16:	4630      	mov	r0, r6
 8016b18:	f7fe ff9a 	bl	8015a50 <_malloc_r>
 8016b1c:	b948      	cbnz	r0, 8016b32 <__smakebuf_r+0x46>
 8016b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b22:	059a      	lsls	r2, r3, #22
 8016b24:	d4ee      	bmi.n	8016b04 <__smakebuf_r+0x18>
 8016b26:	f023 0303 	bic.w	r3, r3, #3
 8016b2a:	f043 0302 	orr.w	r3, r3, #2
 8016b2e:	81a3      	strh	r3, [r4, #12]
 8016b30:	e7e2      	b.n	8016af8 <__smakebuf_r+0xc>
 8016b32:	89a3      	ldrh	r3, [r4, #12]
 8016b34:	6020      	str	r0, [r4, #0]
 8016b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b3a:	81a3      	strh	r3, [r4, #12]
 8016b3c:	9b01      	ldr	r3, [sp, #4]
 8016b3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016b42:	b15b      	cbz	r3, 8016b5c <__smakebuf_r+0x70>
 8016b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b48:	4630      	mov	r0, r6
 8016b4a:	f000 f81d 	bl	8016b88 <_isatty_r>
 8016b4e:	b128      	cbz	r0, 8016b5c <__smakebuf_r+0x70>
 8016b50:	89a3      	ldrh	r3, [r4, #12]
 8016b52:	f023 0303 	bic.w	r3, r3, #3
 8016b56:	f043 0301 	orr.w	r3, r3, #1
 8016b5a:	81a3      	strh	r3, [r4, #12]
 8016b5c:	89a3      	ldrh	r3, [r4, #12]
 8016b5e:	431d      	orrs	r5, r3
 8016b60:	81a5      	strh	r5, [r4, #12]
 8016b62:	e7cf      	b.n	8016b04 <__smakebuf_r+0x18>

08016b64 <_fstat_r>:
 8016b64:	b538      	push	{r3, r4, r5, lr}
 8016b66:	4d07      	ldr	r5, [pc, #28]	@ (8016b84 <_fstat_r+0x20>)
 8016b68:	2300      	movs	r3, #0
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	4608      	mov	r0, r1
 8016b6e:	4611      	mov	r1, r2
 8016b70:	602b      	str	r3, [r5, #0]
 8016b72:	f7ee fee6 	bl	8005942 <_fstat>
 8016b76:	1c43      	adds	r3, r0, #1
 8016b78:	d102      	bne.n	8016b80 <_fstat_r+0x1c>
 8016b7a:	682b      	ldr	r3, [r5, #0]
 8016b7c:	b103      	cbz	r3, 8016b80 <_fstat_r+0x1c>
 8016b7e:	6023      	str	r3, [r4, #0]
 8016b80:	bd38      	pop	{r3, r4, r5, pc}
 8016b82:	bf00      	nop
 8016b84:	240074fc 	.word	0x240074fc

08016b88 <_isatty_r>:
 8016b88:	b538      	push	{r3, r4, r5, lr}
 8016b8a:	4d06      	ldr	r5, [pc, #24]	@ (8016ba4 <_isatty_r+0x1c>)
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	4604      	mov	r4, r0
 8016b90:	4608      	mov	r0, r1
 8016b92:	602b      	str	r3, [r5, #0]
 8016b94:	f7ee fee5 	bl	8005962 <_isatty>
 8016b98:	1c43      	adds	r3, r0, #1
 8016b9a:	d102      	bne.n	8016ba2 <_isatty_r+0x1a>
 8016b9c:	682b      	ldr	r3, [r5, #0]
 8016b9e:	b103      	cbz	r3, 8016ba2 <_isatty_r+0x1a>
 8016ba0:	6023      	str	r3, [r4, #0]
 8016ba2:	bd38      	pop	{r3, r4, r5, pc}
 8016ba4:	240074fc 	.word	0x240074fc

08016ba8 <abort>:
 8016ba8:	b508      	push	{r3, lr}
 8016baa:	2006      	movs	r0, #6
 8016bac:	f000 f82c 	bl	8016c08 <raise>
 8016bb0:	2001      	movs	r0, #1
 8016bb2:	f7ee fe92 	bl	80058da <_exit>

08016bb6 <_raise_r>:
 8016bb6:	291f      	cmp	r1, #31
 8016bb8:	b538      	push	{r3, r4, r5, lr}
 8016bba:	4605      	mov	r5, r0
 8016bbc:	460c      	mov	r4, r1
 8016bbe:	d904      	bls.n	8016bca <_raise_r+0x14>
 8016bc0:	2316      	movs	r3, #22
 8016bc2:	6003      	str	r3, [r0, #0]
 8016bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc8:	bd38      	pop	{r3, r4, r5, pc}
 8016bca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016bcc:	b112      	cbz	r2, 8016bd4 <_raise_r+0x1e>
 8016bce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016bd2:	b94b      	cbnz	r3, 8016be8 <_raise_r+0x32>
 8016bd4:	4628      	mov	r0, r5
 8016bd6:	f000 f831 	bl	8016c3c <_getpid_r>
 8016bda:	4622      	mov	r2, r4
 8016bdc:	4601      	mov	r1, r0
 8016bde:	4628      	mov	r0, r5
 8016be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016be4:	f000 b818 	b.w	8016c18 <_kill_r>
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d00a      	beq.n	8016c02 <_raise_r+0x4c>
 8016bec:	1c59      	adds	r1, r3, #1
 8016bee:	d103      	bne.n	8016bf8 <_raise_r+0x42>
 8016bf0:	2316      	movs	r3, #22
 8016bf2:	6003      	str	r3, [r0, #0]
 8016bf4:	2001      	movs	r0, #1
 8016bf6:	e7e7      	b.n	8016bc8 <_raise_r+0x12>
 8016bf8:	2100      	movs	r1, #0
 8016bfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016bfe:	4620      	mov	r0, r4
 8016c00:	4798      	blx	r3
 8016c02:	2000      	movs	r0, #0
 8016c04:	e7e0      	b.n	8016bc8 <_raise_r+0x12>
	...

08016c08 <raise>:
 8016c08:	4b02      	ldr	r3, [pc, #8]	@ (8016c14 <raise+0xc>)
 8016c0a:	4601      	mov	r1, r0
 8016c0c:	6818      	ldr	r0, [r3, #0]
 8016c0e:	f7ff bfd2 	b.w	8016bb6 <_raise_r>
 8016c12:	bf00      	nop
 8016c14:	240001f8 	.word	0x240001f8

08016c18 <_kill_r>:
 8016c18:	b538      	push	{r3, r4, r5, lr}
 8016c1a:	4d07      	ldr	r5, [pc, #28]	@ (8016c38 <_kill_r+0x20>)
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	4604      	mov	r4, r0
 8016c20:	4608      	mov	r0, r1
 8016c22:	4611      	mov	r1, r2
 8016c24:	602b      	str	r3, [r5, #0]
 8016c26:	f7ee fe48 	bl	80058ba <_kill>
 8016c2a:	1c43      	adds	r3, r0, #1
 8016c2c:	d102      	bne.n	8016c34 <_kill_r+0x1c>
 8016c2e:	682b      	ldr	r3, [r5, #0]
 8016c30:	b103      	cbz	r3, 8016c34 <_kill_r+0x1c>
 8016c32:	6023      	str	r3, [r4, #0]
 8016c34:	bd38      	pop	{r3, r4, r5, pc}
 8016c36:	bf00      	nop
 8016c38:	240074fc 	.word	0x240074fc

08016c3c <_getpid_r>:
 8016c3c:	f7ee be35 	b.w	80058aa <_getpid>

08016c40 <fmax>:
 8016c40:	b508      	push	{r3, lr}
 8016c42:	ed2d 8b04 	vpush	{d8-d9}
 8016c46:	eeb0 8b40 	vmov.f64	d8, d0
 8016c4a:	eeb0 9b41 	vmov.f64	d9, d1
 8016c4e:	f000 f831 	bl	8016cb4 <__fpclassifyd>
 8016c52:	b930      	cbnz	r0, 8016c62 <fmax+0x22>
 8016c54:	eeb0 8b49 	vmov.f64	d8, d9
 8016c58:	eeb0 0b48 	vmov.f64	d0, d8
 8016c5c:	ecbd 8b04 	vpop	{d8-d9}
 8016c60:	bd08      	pop	{r3, pc}
 8016c62:	eeb0 0b49 	vmov.f64	d0, d9
 8016c66:	f000 f825 	bl	8016cb4 <__fpclassifyd>
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d0f4      	beq.n	8016c58 <fmax+0x18>
 8016c6e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8016c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c76:	dded      	ble.n	8016c54 <fmax+0x14>
 8016c78:	e7ee      	b.n	8016c58 <fmax+0x18>

08016c7a <fmin>:
 8016c7a:	b508      	push	{r3, lr}
 8016c7c:	ed2d 8b04 	vpush	{d8-d9}
 8016c80:	eeb0 8b40 	vmov.f64	d8, d0
 8016c84:	eeb0 9b41 	vmov.f64	d9, d1
 8016c88:	f000 f814 	bl	8016cb4 <__fpclassifyd>
 8016c8c:	b930      	cbnz	r0, 8016c9c <fmin+0x22>
 8016c8e:	eeb0 8b49 	vmov.f64	d8, d9
 8016c92:	eeb0 0b48 	vmov.f64	d0, d8
 8016c96:	ecbd 8b04 	vpop	{d8-d9}
 8016c9a:	bd08      	pop	{r3, pc}
 8016c9c:	eeb0 0b49 	vmov.f64	d0, d9
 8016ca0:	f000 f808 	bl	8016cb4 <__fpclassifyd>
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	d0f4      	beq.n	8016c92 <fmin+0x18>
 8016ca8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8016cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb0:	d5ed      	bpl.n	8016c8e <fmin+0x14>
 8016cb2:	e7ee      	b.n	8016c92 <fmin+0x18>

08016cb4 <__fpclassifyd>:
 8016cb4:	ec51 0b10 	vmov	r0, r1, d0
 8016cb8:	460b      	mov	r3, r1
 8016cba:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8016cbe:	b510      	push	{r4, lr}
 8016cc0:	d104      	bne.n	8016ccc <__fpclassifyd+0x18>
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	bf0c      	ite	eq
 8016cc6:	2002      	moveq	r0, #2
 8016cc8:	2003      	movne	r0, #3
 8016cca:	bd10      	pop	{r4, pc}
 8016ccc:	4a09      	ldr	r2, [pc, #36]	@ (8016cf4 <__fpclassifyd+0x40>)
 8016cce:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8016cd2:	4294      	cmp	r4, r2
 8016cd4:	d908      	bls.n	8016ce8 <__fpclassifyd+0x34>
 8016cd6:	4a08      	ldr	r2, [pc, #32]	@ (8016cf8 <__fpclassifyd+0x44>)
 8016cd8:	4213      	tst	r3, r2
 8016cda:	d007      	beq.n	8016cec <__fpclassifyd+0x38>
 8016cdc:	4291      	cmp	r1, r2
 8016cde:	d107      	bne.n	8016cf0 <__fpclassifyd+0x3c>
 8016ce0:	fab0 f080 	clz	r0, r0
 8016ce4:	0940      	lsrs	r0, r0, #5
 8016ce6:	e7f0      	b.n	8016cca <__fpclassifyd+0x16>
 8016ce8:	2004      	movs	r0, #4
 8016cea:	e7ee      	b.n	8016cca <__fpclassifyd+0x16>
 8016cec:	2003      	movs	r0, #3
 8016cee:	e7ec      	b.n	8016cca <__fpclassifyd+0x16>
 8016cf0:	2000      	movs	r0, #0
 8016cf2:	e7ea      	b.n	8016cca <__fpclassifyd+0x16>
 8016cf4:	7fdfffff 	.word	0x7fdfffff
 8016cf8:	7ff00000 	.word	0x7ff00000

08016cfc <fmaxf>:
 8016cfc:	b508      	push	{r3, lr}
 8016cfe:	ed2d 8b02 	vpush	{d8}
 8016d02:	eeb0 8a40 	vmov.f32	s16, s0
 8016d06:	eef0 8a60 	vmov.f32	s17, s1
 8016d0a:	f000 f815 	bl	8016d38 <__fpclassifyf>
 8016d0e:	b930      	cbnz	r0, 8016d1e <fmaxf+0x22>
 8016d10:	eeb0 8a68 	vmov.f32	s16, s17
 8016d14:	eeb0 0a48 	vmov.f32	s0, s16
 8016d18:	ecbd 8b02 	vpop	{d8}
 8016d1c:	bd08      	pop	{r3, pc}
 8016d1e:	eeb0 0a68 	vmov.f32	s0, s17
 8016d22:	f000 f809 	bl	8016d38 <__fpclassifyf>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d0f4      	beq.n	8016d14 <fmaxf+0x18>
 8016d2a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d32:	dded      	ble.n	8016d10 <fmaxf+0x14>
 8016d34:	e7ee      	b.n	8016d14 <fmaxf+0x18>
	...

08016d38 <__fpclassifyf>:
 8016d38:	ee10 3a10 	vmov	r3, s0
 8016d3c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8016d40:	d00d      	beq.n	8016d5e <__fpclassifyf+0x26>
 8016d42:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8016d46:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8016d4a:	d30a      	bcc.n	8016d62 <__fpclassifyf+0x2a>
 8016d4c:	4b07      	ldr	r3, [pc, #28]	@ (8016d6c <__fpclassifyf+0x34>)
 8016d4e:	1e42      	subs	r2, r0, #1
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d908      	bls.n	8016d66 <__fpclassifyf+0x2e>
 8016d54:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8016d58:	4258      	negs	r0, r3
 8016d5a:	4158      	adcs	r0, r3
 8016d5c:	4770      	bx	lr
 8016d5e:	2002      	movs	r0, #2
 8016d60:	4770      	bx	lr
 8016d62:	2004      	movs	r0, #4
 8016d64:	4770      	bx	lr
 8016d66:	2003      	movs	r0, #3
 8016d68:	4770      	bx	lr
 8016d6a:	bf00      	nop
 8016d6c:	007ffffe 	.word	0x007ffffe

08016d70 <sinf_poly>:
 8016d70:	07cb      	lsls	r3, r1, #31
 8016d72:	d412      	bmi.n	8016d9a <sinf_poly+0x2a>
 8016d74:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016d78:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016d7c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016d80:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016d84:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016d88:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016d8c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016d90:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016d94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016d98:	4770      	bx	lr
 8016d9a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016d9e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016da2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016da6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016daa:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016dae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016db2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016db6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016dba:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016dbe:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016dc2:	e7e5      	b.n	8016d90 <sinf_poly+0x20>
 8016dc4:	0000      	movs	r0, r0
	...

08016dc8 <sinf>:
 8016dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016dca:	ee10 4a10 	vmov	r4, s0
 8016dce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016dd2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016dd6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016dda:	eef0 7a40 	vmov.f32	s15, s0
 8016dde:	d218      	bcs.n	8016e12 <sinf+0x4a>
 8016de0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016de4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016de8:	d20a      	bcs.n	8016e00 <sinf+0x38>
 8016dea:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8016dee:	d103      	bne.n	8016df8 <sinf+0x30>
 8016df0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8016df4:	ed8d 1a01 	vstr	s2, [sp, #4]
 8016df8:	eeb0 0a67 	vmov.f32	s0, s15
 8016dfc:	b003      	add	sp, #12
 8016dfe:	bd30      	pop	{r4, r5, pc}
 8016e00:	483b      	ldr	r0, [pc, #236]	@ (8016ef0 <sinf+0x128>)
 8016e02:	eeb0 0b46 	vmov.f64	d0, d6
 8016e06:	2100      	movs	r1, #0
 8016e08:	b003      	add	sp, #12
 8016e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e0e:	f7ff bfaf 	b.w	8016d70 <sinf_poly>
 8016e12:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016e16:	4293      	cmp	r3, r2
 8016e18:	d824      	bhi.n	8016e64 <sinf+0x9c>
 8016e1a:	4b35      	ldr	r3, [pc, #212]	@ (8016ef0 <sinf+0x128>)
 8016e1c:	ed93 7b08 	vldr	d7, [r3, #32]
 8016e20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016e24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016e28:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016e2c:	ee17 1a90 	vmov	r1, s15
 8016e30:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016e34:	1609      	asrs	r1, r1, #24
 8016e36:	ee07 1a90 	vmov	s15, r1
 8016e3a:	f001 0203 	and.w	r2, r1, #3
 8016e3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016e42:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8016e46:	ed92 0b00 	vldr	d0, [r2]
 8016e4a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8016e4e:	f011 0f02 	tst.w	r1, #2
 8016e52:	eea5 6b47 	vfms.f64	d6, d5, d7
 8016e56:	bf08      	it	eq
 8016e58:	4618      	moveq	r0, r3
 8016e5a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016e5e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016e62:	e7d1      	b.n	8016e08 <sinf+0x40>
 8016e64:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016e68:	d237      	bcs.n	8016eda <sinf+0x112>
 8016e6a:	4922      	ldr	r1, [pc, #136]	@ (8016ef4 <sinf+0x12c>)
 8016e6c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8016e70:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8016e74:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016e78:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8016e7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016e80:	6a10      	ldr	r0, [r2, #32]
 8016e82:	6912      	ldr	r2, [r2, #16]
 8016e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016e88:	40ab      	lsls	r3, r5
 8016e8a:	fba0 5003 	umull	r5, r0, r0, r3
 8016e8e:	4359      	muls	r1, r3
 8016e90:	fbe3 0102 	umlal	r0, r1, r3, r2
 8016e94:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8016e98:	0f9d      	lsrs	r5, r3, #30
 8016e9a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016e9e:	1ac9      	subs	r1, r1, r3
 8016ea0:	f7e9 fc04 	bl	80006ac <__aeabi_l2d>
 8016ea4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8016ea8:	4b11      	ldr	r3, [pc, #68]	@ (8016ef0 <sinf+0x128>)
 8016eaa:	f004 0203 	and.w	r2, r4, #3
 8016eae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016eb2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8016ee8 <sinf+0x120>
 8016eb6:	ed92 0b00 	vldr	d0, [r2]
 8016eba:	ec41 0b17 	vmov	d7, r0, r1
 8016ebe:	f014 0f02 	tst.w	r4, #2
 8016ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ec6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016eca:	4629      	mov	r1, r5
 8016ecc:	bf08      	it	eq
 8016ece:	4618      	moveq	r0, r3
 8016ed0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016ed4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ed8:	e796      	b.n	8016e08 <sinf+0x40>
 8016eda:	b003      	add	sp, #12
 8016edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ee0:	f000 b8e4 	b.w	80170ac <__math_invalidf>
 8016ee4:	f3af 8000 	nop.w
 8016ee8:	54442d18 	.word	0x54442d18
 8016eec:	3c1921fb 	.word	0x3c1921fb
 8016ef0:	08017808 	.word	0x08017808
 8016ef4:	080177a4 	.word	0x080177a4

08016ef8 <sinf_poly>:
 8016ef8:	07cb      	lsls	r3, r1, #31
 8016efa:	d412      	bmi.n	8016f22 <sinf_poly+0x2a>
 8016efc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016f00:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016f04:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016f08:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016f0c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016f10:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016f14:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016f18:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016f1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016f20:	4770      	bx	lr
 8016f22:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016f26:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016f2a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016f2e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016f32:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016f36:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016f3a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016f3e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016f42:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016f46:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016f4a:	e7e5      	b.n	8016f18 <sinf_poly+0x20>
 8016f4c:	0000      	movs	r0, r0
	...

08016f50 <cosf>:
 8016f50:	b538      	push	{r3, r4, r5, lr}
 8016f52:	ee10 4a10 	vmov	r4, s0
 8016f56:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016f5a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016f5e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8016f62:	d21f      	bcs.n	8016fa4 <cosf+0x54>
 8016f64:	ee27 7b07 	vmul.f64	d7, d7, d7
 8016f68:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016f6c:	f0c0 8082 	bcc.w	8017074 <cosf+0x124>
 8016f70:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016f74:	4b44      	ldr	r3, [pc, #272]	@ (8017088 <cosf+0x138>)
 8016f76:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8016f7a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8016f7e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8016f82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016f86:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8016f8a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8016f8e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8016f92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016f96:	eea4 0b05 	vfma.f64	d0, d4, d5
 8016f9a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016f9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016fa2:	bd38      	pop	{r3, r4, r5, pc}
 8016fa4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	d829      	bhi.n	8017000 <cosf+0xb0>
 8016fac:	4b36      	ldr	r3, [pc, #216]	@ (8017088 <cosf+0x138>)
 8016fae:	ed93 6b08 	vldr	d6, [r3, #32]
 8016fb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016fb6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8016fba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016fbe:	ee16 1a90 	vmov	r1, s13
 8016fc2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016fc6:	1609      	asrs	r1, r1, #24
 8016fc8:	ee06 1a90 	vmov	s13, r1
 8016fcc:	f001 0203 	and.w	r2, r1, #3
 8016fd0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016fd4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8016fd8:	ed92 0b00 	vldr	d0, [r2]
 8016fdc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8016fe0:	f011 0f02 	tst.w	r1, #2
 8016fe4:	f081 0101 	eor.w	r1, r1, #1
 8016fe8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8016fec:	bf08      	it	eq
 8016fee:	4618      	moveq	r0, r3
 8016ff0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ff8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ffc:	f7ff bf7c 	b.w	8016ef8 <sinf_poly>
 8017000:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8017004:	d232      	bcs.n	801706c <cosf+0x11c>
 8017006:	4921      	ldr	r1, [pc, #132]	@ (801708c <cosf+0x13c>)
 8017008:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801700c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017010:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017014:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8017018:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801701c:	6a10      	ldr	r0, [r2, #32]
 801701e:	6912      	ldr	r2, [r2, #16]
 8017020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017024:	40ab      	lsls	r3, r5
 8017026:	fba0 5003 	umull	r5, r0, r0, r3
 801702a:	4359      	muls	r1, r3
 801702c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017030:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017034:	0f9d      	lsrs	r5, r3, #30
 8017036:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801703a:	1ac9      	subs	r1, r1, r3
 801703c:	f7e9 fb36 	bl	80006ac <__aeabi_l2d>
 8017040:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017044:	4b10      	ldr	r3, [pc, #64]	@ (8017088 <cosf+0x138>)
 8017046:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8017080 <cosf+0x130>
 801704a:	ec41 0b17 	vmov	d7, r0, r1
 801704e:	f004 0203 	and.w	r2, r4, #3
 8017052:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017056:	ed92 0b00 	vldr	d0, [r2]
 801705a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801705e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017062:	f014 0f02 	tst.w	r4, #2
 8017066:	f085 0101 	eor.w	r1, r5, #1
 801706a:	e7bf      	b.n	8016fec <cosf+0x9c>
 801706c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017070:	f000 b81c 	b.w	80170ac <__math_invalidf>
 8017074:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017078:	e793      	b.n	8016fa2 <cosf+0x52>
 801707a:	bf00      	nop
 801707c:	f3af 8000 	nop.w
 8017080:	54442d18 	.word	0x54442d18
 8017084:	3c1921fb 	.word	0x3c1921fb
 8017088:	08017808 	.word	0x08017808
 801708c:	080177a4 	.word	0x080177a4

08017090 <with_errnof>:
 8017090:	b510      	push	{r4, lr}
 8017092:	ed2d 8b02 	vpush	{d8}
 8017096:	eeb0 8a40 	vmov.f32	s16, s0
 801709a:	4604      	mov	r4, r0
 801709c:	f7fd faf6 	bl	801468c <__errno>
 80170a0:	eeb0 0a48 	vmov.f32	s0, s16
 80170a4:	ecbd 8b02 	vpop	{d8}
 80170a8:	6004      	str	r4, [r0, #0]
 80170aa:	bd10      	pop	{r4, pc}

080170ac <__math_invalidf>:
 80170ac:	eef0 7a40 	vmov.f32	s15, s0
 80170b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80170b4:	eef4 7a67 	vcmp.f32	s15, s15
 80170b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80170c0:	d602      	bvs.n	80170c8 <__math_invalidf+0x1c>
 80170c2:	2021      	movs	r0, #33	@ 0x21
 80170c4:	f7ff bfe4 	b.w	8017090 <with_errnof>
 80170c8:	4770      	bx	lr
	...

080170cc <_init>:
 80170cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ce:	bf00      	nop
 80170d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170d2:	bc08      	pop	{r3}
 80170d4:	469e      	mov	lr, r3
 80170d6:	4770      	bx	lr

080170d8 <_fini>:
 80170d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170da:	bf00      	nop
 80170dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170de:	bc08      	pop	{r3}
 80170e0:	469e      	mov	lr, r3
 80170e2:	4770      	bx	lr
