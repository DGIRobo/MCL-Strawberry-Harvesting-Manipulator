
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a44  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08017ce8  08017ce8  00018ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080184e8  080184e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080184f0  080184f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080184f4  080184f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  24000000  080184f8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000073ac  24000234  0801872c  0001a234  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240075e0  0801872c  0001a5e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a234  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d981  00000000  00000000  0001a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005105  00000000  00000000  00047be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f60  00000000  00000000  0004cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001842  00000000  00000000  0004ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000644b  00000000  00000000  0005048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000279f9  00000000  00000000  000568d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f3f5  00000000  00000000  0007e2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001fd6c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009acc  00000000  00000000  001fd77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  00207248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  0020729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  0020833e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000234 	.word	0x24000234
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017ccc 	.word	0x08017ccc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000238 	.word	0x24000238
 80002dc:	08017ccc 	.word	0x08017ccc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <uart3_rb_push_bytes>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
// 링버퍼에 len 바이트 밀어넣기 (꽉 차면 오래된 것부터 드롭)
static void uart3_rb_push_bytes(const uint8_t *src, uint16_t len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  if (len == 0) return;
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d055      	beq.n	8000d82 <uart3_rb_push_bytes+0xbe>

  uint16_t w = uart3_widx;
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	82fb      	strh	r3, [r7, #22]
  uint16_t r = uart3_ridx;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	82bb      	strh	r3, [r7, #20]

  // 남은 공간 계산 (1바이트 비워두는 구조)
  uint16_t free = (r > w) ? (r - w - 1) : (UART3_RBUF_SIZE - (w - r) - 1);
 8000ce2:	8aba      	ldrh	r2, [r7, #20]
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d906      	bls.n	8000cf8 <uart3_rb_push_bytes+0x34>
 8000cea:	8aba      	ldrh	r2, [r7, #20]
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	e006      	b.n	8000d06 <uart3_rb_push_bytes+0x42>
 8000cf8:	8aba      	ldrh	r2, [r7, #20]
 8000cfa:	8afb      	ldrh	r3, [r7, #22]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	827b      	strh	r3, [r7, #18]
  if (len > free) {
 8000d08:	887a      	ldrh	r2, [r7, #2]
 8000d0a:	8a7b      	ldrh	r3, [r7, #18]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d90e      	bls.n	8000d2e <uart3_rb_push_bytes+0x6a>
    uint16_t drop = len - free;
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	823b      	strh	r3, [r7, #16]
    uart3_ridx = (uart3_ridx + drop) & (UART3_RBUF_SIZE - 1);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	8a3b      	ldrh	r3, [r7, #16]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d2c:	801a      	strh	r2, [r3, #0]
  }

  // 연속 구간으로 두 번에 나눠 복사
  uint16_t to_end = UART3_RBUF_SIZE - w;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000d34:	81fb      	strh	r3, [r7, #14]
  uint16_t first  = (len < to_end) ? len : to_end;
 8000d36:	89fa      	ldrh	r2, [r7, #14]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	bf28      	it	cs
 8000d3e:	4613      	movcs	r3, r2
 8000d40:	81bb      	strh	r3, [r7, #12]
  memcpy(&uart3_rbuf[w], src, first);
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d46:	4413      	add	r3, r2
 8000d48:	89ba      	ldrh	r2, [r7, #12]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f014 faca 	bl	80152e6 <memcpy>
  if (len > first) memcpy(&uart3_rbuf[0], src + first, len - first);
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d909      	bls.n	8000d6e <uart3_rb_push_bytes+0xaa>
 8000d5a:	89bb      	ldrh	r3, [r7, #12]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	18d1      	adds	r1, r2, r3
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	89bb      	ldrh	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d6a:	f014 fabc 	bl	80152e6 <memcpy>

  uart3_widx = (w + len) & (UART3_RBUF_SIZE - 1);
 8000d6e:	8afa      	ldrh	r2, [r7, #22]
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	e000      	b.n	8000d84 <uart3_rb_push_bytes+0xc0>
  if (len == 0) return;
 8000d82:	bf00      	nop
}
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	24000ea0 	.word	0x24000ea0
 8000d90:	24000ea2 	.word	0x24000ea2
 8000d94:	240006a0 	.word	0x240006a0

08000d98 <uart3_rx_start_normal>:

// NORMAL 모드 + IDLE 이벤트 기반 재무장 (레지스터 직접접근 X)
static void uart3_rx_start_normal(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  // 1) RX DMA가 CIRC로 잡혀 있다면 HAL로 NORMAL로 재초기화
  if (huart3.hdmarx) {
 8000d9c:	4b65      	ldr	r3, [pc, #404]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <uart3_rx_start_normal+0x172>
    if (huart3.hdmarx->Init.Mode != DMA_NORMAL) {
 8000da8:	4b62      	ldr	r3, [pc, #392]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
      // 안전하게 모두 중단
      HAL_UART_AbortReceive(&huart3);
 8000db4:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000db6:	f00d fdbf 	bl	800e938 <HAL_UART_AbortReceive>
      HAL_DMA_Abort(huart3.hdmarx);
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 ff5f 	bl	8007c84 <HAL_DMA_Abort>

      // DMA를 NORMAL로 재설정
      HAL_DMA_DeInit(huart3.hdmarx);
 8000dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fb39 	bl	8007444 <HAL_DMA_DeInit>
      huart3.hdmarx->Init.Mode = DMA_NORMAL;
 8000dd2:	4b58      	ldr	r3, [pc, #352]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
      if (HAL_DMA_Init(huart3.hdmarx) != HAL_OK) {
 8000ddc:	4b55      	ldr	r3, [pc, #340]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 ffd2 	bl	8006d8c <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
        sta = 3;  // MCU Init 에러 코드 재사용
 8000dee:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
        Error_Handler();
 8000df4:	f005 f848 	bl	8005e88 <Error_Handler>
      }
      // __HAL_LINKDMA(&huart3, hdmarx, *huart3.hdmarx); // 보통 재링크 불필요
    }
    // Half-Transfer IRQ는 사용 안 함
    __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8000df8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <uart3_rx_start_normal+0x1a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d068      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e06:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <uart3_rx_start_normal+0x1a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d061      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e14:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <uart3_rx_start_normal+0x1ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d05a      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a47      	ldr	r2, [pc, #284]	@ (8000f48 <uart3_rx_start_normal+0x1b0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d053      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e30:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a44      	ldr	r2, [pc, #272]	@ (8000f4c <uart3_rx_start_normal+0x1b4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d04c      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	@ (8000f50 <uart3_rx_start_normal+0x1b8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d045      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e4c:	4b39      	ldr	r3, [pc, #228]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <uart3_rx_start_normal+0x1bc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d03e      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <uart3_rx_start_normal+0x1c0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d037      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <uart3_rx_start_normal+0x1c4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d030      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a38      	ldr	r2, [pc, #224]	@ (8000f60 <uart3_rx_start_normal+0x1c8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d029      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e84:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a35      	ldr	r2, [pc, #212]	@ (8000f64 <uart3_rx_start_normal+0x1cc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d022      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <uart3_rx_start_normal+0x1d0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d01b      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a30      	ldr	r2, [pc, #192]	@ (8000f6c <uart3_rx_start_normal+0x1d4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d014      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <uart3_rx_start_normal+0x1d8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <uart3_rx_start_normal+0x1dc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d006      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	@ (8000f78 <uart3_rx_start_normal+0x1e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d10c      	bne.n	8000ef2 <uart3_rx_start_normal+0x15a>
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0208 	bic.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e00b      	b.n	8000f0a <uart3_rx_start_normal+0x172>
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0204 	bic.w	r2, r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
  }

  // 2) IDLE 플래그 정리하고 ToIdle-DMA 재무장
  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2210      	movs	r2, #16
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart3_rx_dma, UART3_RX_DMA_SIZE) != HAL_OK) {
 8000f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f16:	4919      	ldr	r1, [pc, #100]	@ (8000f7c <uart3_rx_start_normal+0x1e4>)
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f1a:	f00f fc7b 	bl	8010814 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <uart3_rx_start_normal+0x196>
    sta = 3;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	601a      	str	r2, [r3, #0]
    Error_Handler();
 8000f2a:	f004 ffad 	bl	8005e88 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000314 	.word	0x24000314
 8000f38:	24002a4c 	.word	0x24002a4c
 8000f3c:	40020010 	.word	0x40020010
 8000f40:	40020028 	.word	0x40020028
 8000f44:	40020040 	.word	0x40020040
 8000f48:	40020058 	.word	0x40020058
 8000f4c:	40020070 	.word	0x40020070
 8000f50:	40020088 	.word	0x40020088
 8000f54:	400200a0 	.word	0x400200a0
 8000f58:	400200b8 	.word	0x400200b8
 8000f5c:	40020410 	.word	0x40020410
 8000f60:	40020428 	.word	0x40020428
 8000f64:	40020440 	.word	0x40020440
 8000f68:	40020458 	.word	0x40020458
 8000f6c:	40020470 	.word	0x40020470
 8000f70:	40020488 	.word	0x40020488
 8000f74:	400204a0 	.word	0x400204a0
 8000f78:	400204b8 	.word	0x400204b8
 8000f7c:	240004a0 	.word	0x240004a0

08000f80 <HAL_UARTEx_RxEventCallback>:

// ToIdle-DMA가 IDLE 또는 버퍼가 다 찼을 때 호출됨 (Size: 수신 바이트 수)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance != USART3) return;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10a      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x2c>

  if (Size) {
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_UARTEx_RxEventCallback+0x26>
    uart3_rb_push_bytes(uart3_rx_dma, Size);
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000fa2:	f7ff fe8f 	bl	8000cc4 <uart3_rb_push_bytes>
  }
  // 다음 수신 다시 무장
  uart3_rx_start_normal();
 8000fa6:	f7ff fef7 	bl	8000d98 <uart3_rx_start_normal>
 8000faa:	e000      	b.n	8000fae <HAL_UARTEx_RxEventCallback+0x2e>
  if (huart->Instance != USART3) return;
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	240004a0 	.word	0x240004a0

08000fbc <HAL_UART_RxCpltCallback>:

// 혹시 HAL이 TC로만 불러줄 수도 있으므로 안전망 콜백도 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x2c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d107      	bne.n	8000fde <HAL_UART_RxCpltCallback+0x22>

  uart3_rb_push_bytes(uart3_rx_dma, UART3_RX_DMA_SIZE);
 8000fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_UART_RxCpltCallback+0x30>)
 8000fd4:	f7ff fe76 	bl	8000cc4 <uart3_rb_push_bytes>
  uart3_rx_start_normal();
 8000fd8:	f7ff fede 	bl	8000d98 <uart3_rx_start_normal>
 8000fdc:	e000      	b.n	8000fe0 <HAL_UART_RxCpltCallback+0x24>
  if (huart->Instance != USART3) return;
 8000fde:	bf00      	nop
}
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	240004a0 	.word	0x240004a0

08000ff0 <HAL_UART_ErrorCallback>:

// 에러 시 플래그 정리하고 즉시 재무장
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_UART_ErrorCallback+0x50>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d119      	bne.n	8001036 <HAL_UART_ErrorCallback+0x46>

  HAL_UART_AbortReceive(huart);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f00d fc98 	bl	800e938 <HAL_UART_AbortReceive>

  __HAL_UART_CLEAR_OREFLAG(huart);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2208      	movs	r2, #8
 800100e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FEFLAG(huart);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_NEFLAG(huart);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2204      	movs	r2, #4
 800101e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_PEFLAG(huart);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2210      	movs	r2, #16
 800102e:	621a      	str	r2, [r3, #32]

  uart3_rx_start_normal();
 8001030:	f7ff feb2 	bl	8000d98 <uart3_rx_start_normal>
 8001034:	e000      	b.n	8001038 <HAL_UART_ErrorCallback+0x48>
  if (huart->Instance != USART3) return;
 8001036:	bf00      	nop
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004800 	.word	0x40004800

08001044 <uart3_kick_tx_dma>:

static void uart3_kick_tx_dma(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  if (uart3_tx_busy) return;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d131      	bne.n	80010b8 <uart3_kick_tx_dma+0x74>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	429a      	cmp	r2, r3
 8001062:	d02b      	beq.n	80010bc <uart3_kick_tx_dma+0x78>

  // 연속 구간 길이 산출 (wrap 안 끊기게 1번 전송)
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	429a      	cmp	r2, r3
 8001072:	d308      	bcc.n	8001086 <uart3_kick_tx_dma+0x42>
               ? (uart3_tx_widx - uart3_tx_ridx)
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	e005      	b.n	8001092 <uart3_kick_tx_dma+0x4e>
               : (UART3_TBUF_SIZE - uart3_tx_ridx);
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 800108c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001090:	b29b      	uxth	r3, r3
 8001092:	80fb      	strh	r3, [r7, #6]

  uart3_tx_last_len = len;
 8001094:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <uart3_kick_tx_dma+0x8c>)
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	8013      	strh	r3, [r2, #0]
  uart3_tx_busy = 1;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]

  // (D-Cache 켠 경우) DMA가 읽을 영역 클린
  // SCB_CleanDCache_by_Addr((uint32_t*)&uart3_tbuf[uart3_tx_ridx], len);

  HAL_UART_Transmit_DMA(&huart3, &uart3_tbuf[uart3_tx_ridx], len);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <uart3_kick_tx_dma+0x90>)
 80010aa:	4413      	add	r3, r2
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <uart3_kick_tx_dma+0x94>)
 80010b2:	f00d fbc1 	bl	800e838 <HAL_UART_Transmit_DMA>
 80010b6:	e002      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_busy) return;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 80010bc:	bf00      	nop
}
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240022ae 	.word	0x240022ae
 80010c8:	240022aa 	.word	0x240022aa
 80010cc:	240022a8 	.word	0x240022a8
 80010d0:	240022ac 	.word	0x240022ac
 80010d4:	240012a8 	.word	0x240012a8
 80010d8:	24000314 	.word	0x24000314

080010dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_UART_TxCpltCallback+0x40>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d112      	bne.n	8001114 <HAL_UART_TxCpltCallback+0x38>

  uart3_tx_ridx = (uart3_tx_ridx + uart3_tx_last_len) & (UART3_TBUF_SIZE - 1);
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_UART_TxCpltCallback+0x48>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 8001106:	801a      	strh	r2, [r3, #0]
  uart3_tx_busy = 0;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_UART_TxCpltCallback+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
  uart3_kick_tx_dma(); // 남은 데이터가 있으면 곧장 다음 덩어리 전송
 800110e:	f7ff ff99 	bl	8001044 <uart3_kick_tx_dma>
 8001112:	e000      	b.n	8001116 <HAL_UART_TxCpltCallback+0x3a>
  if (huart->Instance != USART3) return;
 8001114:	bf00      	nop
}
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004800 	.word	0x40004800
 8001120:	240022aa 	.word	0x240022aa
 8001124:	240022ac 	.word	0x240022ac
 8001128:	240022ae 	.word	0x240022ae

0800112c <uart3_tx_write>:

static size_t uart3_tx_write(const uint8_t *data, size_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  size_t w = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 800113a:	e05d      	b.n	80011f8 <uart3_tx_write+0xcc>
    // 먼저 남은 공간 계산(논크리티컬)
    uint16_t r = uart3_tx_ridx;
 800113c:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <uart3_tx_write+0xe4>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	837b      	strh	r3, [r7, #26]
    uint16_t w0 = uart3_tx_widx;
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <uart3_tx_write+0xe8>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	833b      	strh	r3, [r7, #24]
    uint16_t space = (r > w0) ? (r - w0 - 1) : (UART3_TBUF_SIZE - (w0 - r) - 1);
 8001148:	8b7a      	ldrh	r2, [r7, #26]
 800114a:	8b3b      	ldrh	r3, [r7, #24]
 800114c:	429a      	cmp	r2, r3
 800114e:	d906      	bls.n	800115e <uart3_tx_write+0x32>
 8001150:	8b7a      	ldrh	r2, [r7, #26]
 8001152:	8b3b      	ldrh	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b01      	subs	r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	e006      	b.n	800116c <uart3_tx_write+0x40>
 800115e:	8b7a      	ldrh	r2, [r7, #26]
 8001160:	8b3b      	ldrh	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800116a:	b29b      	uxth	r3, r3
 800116c:	82fb      	strh	r3, [r7, #22]
    if (space == 0) break;
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d046      	beq.n	8001202 <uart3_tx_write+0xd6>

    size_t chunk = (len - w < space) ? (len - w) : space;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	4293      	cmp	r3, r2
 800117e:	bf28      	it	cs
 8001180:	4613      	movcs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
    size_t first = (w0 + chunk <= UART3_TBUF_SIZE) ? chunk : (UART3_TBUF_SIZE - w0);
 8001184:	8b3a      	ldrh	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800118e:	d903      	bls.n	8001198 <uart3_tx_write+0x6c>
 8001190:	8b3b      	ldrh	r3, [r7, #24]
 8001192:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001196:	e000      	b.n	800119a <uart3_tx_write+0x6e>
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60fb      	str	r3, [r7, #12]

    memcpy(&uart3_tbuf[w0], &data[w], first);
 800119c:	8b3b      	ldrh	r3, [r7, #24]
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <uart3_tx_write+0xec>)
 80011a0:	1898      	adds	r0, r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	4413      	add	r3, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4619      	mov	r1, r3
 80011ac:	f014 f89b 	bl	80152e6 <memcpy>
    if (chunk > first) memcpy(&uart3_tbuf[0], &data[w + first], chunk - first);
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d90b      	bls.n	80011d0 <uart3_tx_write+0xa4>
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	18d1      	adds	r1, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	@ (8001218 <uart3_tx_write+0xec>)
 80011cc:	f014 f88b 	bl	80152e6 <memcpy>

    taskENTER_CRITICAL();
 80011d0:	f011 ff12 	bl	8012ff8 <vPortEnterCritical>
    uart3_tx_widx = (w0 + chunk) & (UART3_TBUF_SIZE - 1);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	8b3b      	ldrh	r3, [r7, #24]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <uart3_tx_write+0xe8>)
 80011e6:	801a      	strh	r2, [r3, #0]
    uart3_kick_tx_dma();
 80011e8:	f7ff ff2c 	bl	8001044 <uart3_kick_tx_dma>
    taskEXIT_CRITICAL();
 80011ec:	f011 ff36 	bl	801305c <vPortExitCritical>

    w += chunk;
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d39d      	bcc.n	800113c <uart3_tx_write+0x10>
 8001200:	e000      	b.n	8001204 <uart3_tx_write+0xd8>
    if (space == 0) break;
 8001202:	bf00      	nop
  }
  return w;
 8001204:	69fb      	ldr	r3, [r7, #28]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	240022aa 	.word	0x240022aa
 8001214:	240022a8 	.word	0x240022a8
 8001218:	240012a8 	.word	0x240012a8

0800121c <_write>:

int _write(int file, char *p, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  size_t pos = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800122c:	e01e      	b.n	800126c <_write+0x50>
    size_t n = uart3_tx_write((uint8_t*)p + pos, (size_t)len - pos);
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	18d0      	adds	r0, r2, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff ff76 	bl	800112c <uart3_tx_write>
 8001240:	6138      	str	r0, [r7, #16]
    if (n == 0) {
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <_write+0x48>
      // 버퍼가 가득 → RT 제어를 막지 않게 즉시 양보
      if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 8001248:	f011 f966 	bl	8012518 <xTaskGetSchedulerState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b02      	cmp	r3, #2
 8001250:	d10c      	bne.n	800126c <_write+0x50>
        taskYIELD();      // 또는 vTaskDelay(1) 등
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <_write+0x64>)
 8001254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	e003      	b.n	800126c <_write+0x50>
      } else {
        // 스케줄러 전이면 잠깐 회전
      }
    } else {
      pos += n;
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3dc      	bcc.n	800122e <_write+0x12>
    }
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000ed04 	.word	0xe000ed04

08001284 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <uart3_rb_pop+0x50>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <uart3_rb_pop+0x54>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	429a      	cmp	r2, r3
 800129a:	d101      	bne.n	80012a0 <uart3_rb_pop+0x1c>
 800129c:	2300      	movs	r3, #0
 800129e:	e012      	b.n	80012c6 <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <uart3_rb_pop+0x58>)
 80012aa:	5c9a      	ldrb	r2, [r3, r2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012c2:	801a      	strh	r2, [r3, #0]
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	24000ea2 	.word	0x24000ea2
 80012d8:	24000ea0 	.word	0x24000ea0
 80012dc:	240006a0 	.word	0x240006a0

080012e0 <parse_pc_line_to_floats>:
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
}

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  char *L = strchr(line, '[');
 80012ec:	215b      	movs	r1, #91	@ 0x5b
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f013 feef 	bl	80150d2 <strchr>
 80012f4:	62b8      	str	r0, [r7, #40]	@ 0x28
  char *R = strrchr(line, ']');
 80012f6:	215d      	movs	r1, #93	@ 0x5d
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f013 ff09 	bl	8015110 <strrchr>
 80012fe:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!L || !R || R <= L) return 0;
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <parse_pc_line_to_floats+0x34>
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <parse_pc_line_to_floats+0x34>
 800130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	429a      	cmp	r2, r3
 8001312:	d801      	bhi.n	8001318 <parse_pc_line_to_floats+0x38>
 8001314:	2300      	movs	r3, #0
 8001316:	e097      	b.n	8001448 <parse_pc_line_to_floats+0x168>

  *R = '\0'; ++L;
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001320:	3301      	adds	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28

  int count = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  char *p = L;
 8001328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30

  while (*p && count < maxn) {
 800132c:	e07b      	b.n	8001426 <parse_pc_line_to_floats+0x146>
    // 구분자(,) 전까지 토큰 범위 찾기
    char *q = p;
 800132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*q && *q != ',') ++q;
 8001332:	e002      	b.n	800133a <parse_pc_line_to_floats+0x5a>
 8001334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001336:	3301      	adds	r3, #1
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <parse_pc_line_to_floats+0x72>
 8001342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b2c      	cmp	r3, #44	@ 0x2c
 8001348:	d1f4      	bne.n	8001334 <parse_pc_line_to_floats+0x54>

    // 토큰 문자열 [p, q)
    // 앞뒤 공백 제거
    while (*p == ' ' || *p == '\t') ++p;
 800134a:	e002      	b.n	8001352 <parse_pc_line_to_floats+0x72>
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	3301      	adds	r3, #1
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
 8001352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b20      	cmp	r3, #32
 8001358:	d0f8      	beq.n	800134c <parse_pc_line_to_floats+0x6c>
 800135a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b09      	cmp	r3, #9
 8001360:	d0f4      	beq.n	800134c <parse_pc_line_to_floats+0x6c>
    char *e = q;
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	61bb      	str	r3, [r7, #24]
    while (e > p && (e[-1] == ' ' || e[-1] == '\t')) --e;
 8001366:	e002      	b.n	800136e <parse_pc_line_to_floats+0x8e>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	3b01      	subs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001372:	429a      	cmp	r2, r3
 8001374:	d209      	bcs.n	800138a <parse_pc_line_to_floats+0xaa>
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3b01      	subs	r3, #1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b20      	cmp	r3, #32
 800137e:	d0f3      	beq.n	8001368 <parse_pc_line_to_floats+0x88>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3b01      	subs	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d0ee      	beq.n	8001368 <parse_pc_line_to_floats+0x88>

    if (e > p) { // 빈 토큰이 아니면
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800138e:	429a      	cmp	r2, r3
 8001390:	d242      	bcs.n	8001418 <parse_pc_line_to_floats+0x138>
      errno = 0;
 8001392:	f013 ff7b 	bl	801528c <__errno>
 8001396:	4603      	mov	r3, r0
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
      char tmp = *e; *e = '\0';
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
      char *endptr = NULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
      float v = strtof(p, endptr ? &endptr : &e); // newlib-nano 대응
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <parse_pc_line_to_floats+0xda>
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	e001      	b.n	80013be <parse_pc_line_to_floats+0xde>
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013c2:	f013 f8e5 	bl	8014590 <strtof>
 80013c6:	ed87 0a07 	vstr	s0, [r7, #28]
      if (endptr) {
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d017      	beq.n	8001400 <parse_pc_line_to_floats+0x120>
        while (*endptr == ' ' || *endptr == '\t') ++endptr;
 80013d0:	e002      	b.n	80013d8 <parse_pc_line_to_floats+0xf8>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d0f8      	beq.n	80013d2 <parse_pc_line_to_floats+0xf2>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d0f4      	beq.n	80013d2 <parse_pc_line_to_floats+0xf2>
        if (errno != 0 || *endptr != '\0') return 0; // 유효 숫자 아님 → 실패
 80013e8:	f013 ff50 	bl	801528c <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <parse_pc_line_to_floats+0x11c>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <parse_pc_line_to_floats+0x120>
 80013fc:	2300      	movs	r3, #0
 80013fe:	e023      	b.n	8001448 <parse_pc_line_to_floats+0x168>
      }
      vals[count++] = v;
 8001400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	637a      	str	r2, [r7, #52]	@ 0x34
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	601a      	str	r2, [r3, #0]
      *e = tmp;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001416:	701a      	strb	r2, [r3, #0]
    }
    // 끝 처리
    if (*q == '\0') break;
 8001418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <parse_pc_line_to_floats+0x15a>
    p = q + 1;
 8001420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001422:	3301      	adds	r3, #1
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  while (*p && count < maxn) {
 8001426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <parse_pc_line_to_floats+0x15c>
 800142e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	f6ff af7b 	blt.w	800132e <parse_pc_line_to_floats+0x4e>
 8001438:	e000      	b.n	800143c <parse_pc_line_to_floats+0x15c>
    if (*q == '\0') break;
 800143a:	bf00      	nop
  }

  // 꼭 19개여야 성공
  return (count == PC_MSG_FIELDS) ? count : 0;
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	2b13      	cmp	r3, #19
 8001440:	d101      	bne.n	8001446 <parse_pc_line_to_floats+0x166>
 8001442:	2313      	movs	r3, #19
 8001444:	e000      	b.n	8001448 <parse_pc_line_to_floats+0x168>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8001450:	b480      	push	{r7}
 8001452:	b097      	sub	sp, #92	@ 0x5c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 800145c:	2301      	movs	r3, #1
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001460:	2302      	movs	r3, #2
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001464:	2303      	movs	r3, #3
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 8001468:	2304      	movs	r3, #4
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
 800146c:	2305      	movs	r3, #5
 800146e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001470:	2306      	movs	r3, #6
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001474:	2307      	movs	r3, #7
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001478:	2308      	movs	r3, #8
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 800147c:	2309      	movs	r3, #9
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001480:	230a      	movs	r3, #10
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001484:	230b      	movs	r3, #11
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001488:	230c      	movs	r3, #12
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
 800148c:	230d      	movs	r3, #13
 800148e:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 8001490:	230e      	movs	r3, #14
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	230f      	movs	r3, #15
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	2310      	movs	r3, #16
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	2311      	movs	r3, #17
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	2312      	movs	r3, #18
 80014a2:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80014a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	f240 809e 	bls.w	80015f8 <apply_pc_floats+0x1a8>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	f240 8092 	bls.w	80015f8 <apply_pc_floats+0x1a8>
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	f240 8086 	bls.w	80015f8 <apply_pc_floats+0x1a8>

	// 1) taskTime & 타겟 위치 설정
	taskTime = v[T];
 80014ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <apply_pc_floats+0x1b4>)
 80014f8:	6013      	str	r3, [r2, #0]
	desired_posXYZ[0] = v[tx];
 80014fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001506:	6013      	str	r3, [r2, #0]
	desired_posXYZ[1] = v[ty];
 8001508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a3d      	ldr	r2, [pc, #244]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001514:	6053      	str	r3, [r2, #4]
	desired_posXYZ[2] = v[tz];
 8001516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001522:	6093      	str	r3, [r2, #8]

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 8001524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a37      	ldr	r2, [pc, #220]	@ (800160c <apply_pc_floats+0x1bc>)
 8001530:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8001532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <apply_pc_floats+0x1c0>)
 800153e:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8001540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a32      	ldr	r2, [pc, #200]	@ (8001614 <apply_pc_floats+0x1c4>)
 800154c:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 800154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <apply_pc_floats+0x1c8>)
 800155a:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <apply_pc_floats+0x1cc>)
 8001568:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 800156a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a25      	ldr	r2, [pc, #148]	@ (800160c <apply_pc_floats+0x1bc>)
 8001576:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a23      	ldr	r2, [pc, #140]	@ (8001610 <apply_pc_floats+0x1c0>)
 8001584:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a20      	ldr	r2, [pc, #128]	@ (8001614 <apply_pc_floats+0x1c4>)
 8001592:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <apply_pc_floats+0x1c8>)
 80015a0:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <apply_pc_floats+0x1cc>)
 80015ae:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <apply_pc_floats+0x1bc>)
 80015bc:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <apply_pc_floats+0x1c0>)
 80015ca:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <apply_pc_floats+0x1c4>)
 80015d8:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <apply_pc_floats+0x1c8>)
 80015e6:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <apply_pc_floats+0x1cc>)
 80015f4:	6093      	str	r3, [r2, #8]
 80015f6:	e000      	b.n	80015fa <apply_pc_floats+0x1aa>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80015f8:	bf00      	nop
}
 80015fa:	375c      	adds	r7, #92	@ 0x5c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	24000018 	.word	0x24000018
 8001608:	2400001c 	.word	0x2400001c
 800160c:	240022ec 	.word	0x240022ec
 8001610:	240022f8 	.word	0x240022f8
 8001614:	24002304 	.word	0x24002304
 8001618:	24000034 	.word	0x24000034
 800161c:	24002310 	.word	0x24002310

08001620 <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	@ 0x58
 8001624:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 8001626:	e03b      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 8001628:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800162c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8001630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001634:	2b0d      	cmp	r3, #13
 8001636:	d032      	beq.n	800169e <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8001638:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d11a      	bne.n	8001676 <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d02b      	beq.n	80016a0 <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800164e:	2100      	movs	r1, #0
 8001650:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8001652:	463b      	mov	r3, r7
 8001654:	2213      	movs	r2, #19
 8001656:	4619      	mov	r1, r3
 8001658:	4819      	ldr	r0, [pc, #100]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800165a:	f7ff fe41 	bl	80012e0 <parse_pc_line_to_floats>
 800165e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n >= PC_MSG_FIELDS) {
 8001660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001662:	2b12      	cmp	r3, #18
 8001664:	dd03      	ble.n	800166e <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8001666:	463b      	mov	r3, r7
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fef1 	bl	8001450 <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e014      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800167e:	4293      	cmp	r3, r2
 8001680:	d809      	bhi.n	8001696 <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 800168a:	600a      	str	r2, [r1, #0]
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800168e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001692:	54ca      	strb	r2, [r1, r3]
 8001694:	e004      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e000      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 800169e:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 80016a0:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fded 	bl	8001284 <uart3_rb_pop>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1bb      	bne.n	8001628 <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3758      	adds	r7, #88	@ 0x58
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240012a4 	.word	0x240012a4
 80016c0:	24000ea4 	.word	0x24000ea4

080016c4 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	2400231c 	.word	0x2400231c

080016f4 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8001704:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001708:	f7ff ffdc 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
    }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8001714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001718:	ed2d 8b02 	vpush	{d8}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	ed87 0a03 	vstr	s0, [r7, #12]
 8001724:	edc7 0a02 	vstr	s1, [r7, #8]
 8001728:	ed87 1a01 	vstr	s2, [r7, #4]
 800172c:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 800172e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001732:	edd7 7a02 	vldr	s15, [r7, #8]
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 800173e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001742:	edd7 7a02 	vldr	s15, [r7, #8]
 8001746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d502      	bpl.n	8001756 <float32_t_to_uint+0x42>
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	60f9      	str	r1, [r7, #12]
 8001754:	e00a      	b.n	800176c <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8001756:	ed97 7a03 	vldr	s14, [r7, #12]
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	dd01      	ble.n	800176c <float32_t_to_uint+0x58>
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 800176c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001770:	edd7 7a02 	vldr	s15, [r7, #8]
 8001774:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001778:	f04f 0001 	mov.w	r0, #1
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	683c      	ldr	r4, [r7, #0]
 8001782:	f1a4 0620 	sub.w	r6, r4, #32
 8001786:	f1c4 0520 	rsb	r5, r4, #32
 800178a:	fa01 f304 	lsl.w	r3, r1, r4
 800178e:	fa00 f606 	lsl.w	r6, r0, r6
 8001792:	4333      	orrs	r3, r6
 8001794:	fa20 f505 	lsr.w	r5, r0, r5
 8001798:	432b      	orrs	r3, r5
 800179a:	fa00 f204 	lsl.w	r2, r0, r4
 800179e:	f112 38ff 	adds.w	r8, r2, #4294967295
 80017a2:	f143 39ff 	adc.w	r9, r3, #4294967295
 80017a6:	4640      	mov	r0, r8
 80017a8:	4649      	mov	r1, r9
 80017aa:	f7ff f875 	bl	8000898 <__aeabi_ul2f>
 80017ae:	ee06 0a90 	vmov	s13, r0
 80017b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c2:	ee17 3a90 	vmov	r3, s15
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	ecbd 8b02 	vpop	{d8}
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017d4 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 80017d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d8:	ed2d 8b02 	vpush	{d8}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80017e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	ee07 1a90 	vmov	s15, r1
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	edd7 7a05 	vldr	s15, [r7, #20]
 800180e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001812:	f04f 0001 	mov.w	r0, #1
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	683c      	ldr	r4, [r7, #0]
 800181c:	f1a4 0620 	sub.w	r6, r4, #32
 8001820:	f1c4 0520 	rsb	r5, r4, #32
 8001824:	fa01 f304 	lsl.w	r3, r1, r4
 8001828:	fa00 f606 	lsl.w	r6, r0, r6
 800182c:	4333      	orrs	r3, r6
 800182e:	fa20 f505 	lsr.w	r5, r0, r5
 8001832:	432b      	orrs	r3, r5
 8001834:	fa00 f204 	lsl.w	r2, r0, r4
 8001838:	f112 38ff 	adds.w	r8, r2, #4294967295
 800183c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7ff f828 	bl	8000898 <__aeabi_ul2f>
 8001848:	ee07 0a90 	vmov	s15, r0
 800184c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001850:	edd7 7a04 	vldr	s15, [r7, #16]
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	ecbd 8b02 	vpop	{d8}
 8001864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001868 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8001872:	23ff      	movs	r3, #255	@ 0xff
 8001874:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800187a:	23ff      	movs	r3, #255	@ 0xff
 800187c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 800187e:	23ff      	movs	r3, #255	@ 0xff
 8001880:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001882:	23ff      	movs	r3, #255	@ 0xff
 8001884:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8001886:	23ff      	movs	r3, #255	@ 0xff
 8001888:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800188a:	23ff      	movs	r3, #255	@ 0xff
 800188c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 800188e:	23fe      	movs	r3, #254	@ 0xfe
 8001890:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4a16      	ldr	r2, [pc, #88]	@ (80018f0 <MIT_reset_origin+0x88>)
 8001896:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MIT_reset_origin+0x88>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	461a      	mov	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018d0:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <MIT_reset_origin+0x8c>)
 80018d2:	f008 fcc6 	bl	800a262 <HAL_FDCAN_AddMessageToTxFifoQ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <MIT_reset_origin+0x7e>
		sta = 1;
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MIT_reset_origin+0x90>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80018e2:	f004 fad1 	bl	8005e88 <Error_Handler>
	}
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000250 	.word	0x24000250
 80018f4:	24000274 	.word	0x24000274
 80018f8:	24002a4c 	.word	0x24002a4c

080018fc <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8001906:	23ff      	movs	r3, #255	@ 0xff
 8001908:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800190e:	23ff      	movs	r3, #255	@ 0xff
 8001910:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001916:	23ff      	movs	r3, #255	@ 0xff
 8001918:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 800191a:	23ff      	movs	r3, #255	@ 0xff
 800191c:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8001922:	23fc      	movs	r3, #252	@ 0xfc
 8001924:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800192a:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800193a:	2208      	movs	r2, #8
 800193c:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001958:	2200      	movs	r2, #0
 800195a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	461a      	mov	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001964:	4808      	ldr	r0, [pc, #32]	@ (8001988 <MIT_enter_control_mode+0x8c>)
 8001966:	f008 fc7c 	bl	800a262 <HAL_FDCAN_AddMessageToTxFifoQ>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <MIT_enter_control_mode+0x7e>
		sta = 1;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MIT_enter_control_mode+0x90>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001976:	f004 fa87 	bl	8005e88 <Error_Handler>
	}
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000250 	.word	0x24000250
 8001988:	24000274 	.word	0x24000274
 800198c:	24002a4c 	.word	0x24002a4c

08001990 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 800199a:	23ff      	movs	r3, #255	@ 0xff
 800199c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 800199e:	23ff      	movs	r3, #255	@ 0xff
 80019a0:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 80019a2:	23ff      	movs	r3, #255	@ 0xff
 80019a4:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 80019a6:	23ff      	movs	r3, #255	@ 0xff
 80019a8:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 80019aa:	23ff      	movs	r3, #255	@ 0xff
 80019ac:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 80019ae:	23ff      	movs	r3, #255	@ 0xff
 80019b0:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 80019b2:	23ff      	movs	r3, #255	@ 0xff
 80019b4:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 80019b6:	23fd      	movs	r3, #253	@ 0xfd
 80019b8:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	4a16      	ldr	r2, [pc, #88]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019be:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019ce:	2208      	movs	r2, #8
 80019d0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	461a      	mov	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <MIT_exit_control_mode+0x8c>)
 80019fa:	f008 fc32 	bl	800a262 <HAL_FDCAN_AddMessageToTxFifoQ>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <MIT_exit_control_mode+0x7e>
		sta = 1;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MIT_exit_control_mode+0x90>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001a0a:	f004 fa3d 	bl	8005e88 <Error_Handler>
	}
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000250 	.word	0x24000250
 8001a1c:	24000274 	.word	0x24000274
 8001a20:	24002a4c 	.word	0x24002a4c

08001a24 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3302      	adds	r3, #2
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3305      	adds	r3, #5
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	121b      	asrs	r3, r3, #8
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3306      	adds	r3, #6
 8001a68:	f002 020f 	and.w	r2, r2, #15
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3307      	adds	r3, #7
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	ed87 0a00 	vstr	s0, [r7]
 8001a94:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 8001a96:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <MIT_Mode+0xd8>)
 8001a98:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <MIT_Mode+0xdc>)
 8001a9c:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 8001a9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa6:	edd7 6a00 	vldr	s13, [r7]
 8001aaa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001aae:	eeb0 1b46 	vmov.f64	d1, d6
 8001ab2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab6:	f015 fec3 	bl	8017840 <fmax>
 8001aba:	eeb0 6b40 	vmov.f64	d6, d0
 8001abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ac6:	eeb0 1b47 	vmov.f64	d1, d7
 8001aca:	eeb0 0b46 	vmov.f64	d0, d6
 8001ace:	f015 fed4 	bl	801787a <fmin>
 8001ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ad6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ada:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001ade:	200c      	movs	r0, #12
 8001ae0:	ed97 1a06 	vldr	s2, [r7, #24]
 8001ae4:	edd7 0a07 	vldr	s1, [r7, #28]
 8001ae8:	ed97 0a00 	vldr	s0, [r7]
 8001aec:	f7ff fe12 	bl	8001714 <float32_t_to_uint>
 8001af0:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff91 	bl	8001a24 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b06:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	490a      	ldr	r1, [pc, #40]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b40:	480a      	ldr	r0, [pc, #40]	@ (8001b6c <MIT_Mode+0xe4>)
 8001b42:	f008 fb8e 	bl	800a262 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <MIT_Mode+0xce>
		sta = 1;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <MIT_Mode+0xe8>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001b52:	f004 f999 	bl	8005e88 <Error_Handler>
	}
}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	c1c80000 	.word	0xc1c80000
 8001b64:	41c80000 	.word	0x41c80000
 8001b68:	24000250 	.word	0x24000250
 8001b6c:	24000274 	.word	0x24000274
 8001b70:	24002a4c 	.word	0x24002a4c

08001b74 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b092      	sub	sp, #72	@ 0x48
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d04b      	beq.n	8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001b88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	2140      	movs	r1, #64	@ 0x40
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f008 fbc0 	bl	800a318 <HAL_FDCAN_GetRxMessage>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
            Error_Handler();
 8001ba4:	f004 f970 	bl	8005e88 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001ba8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001bac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb4:	e02b      	b.n	8001c0e <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bba:	2198      	movs	r1, #152	@ 0x98
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11c      	bne.n	8001c08 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 8001bd2:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd6:	2198      	movs	r1, #152	@ 0x98
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3310      	adds	r3, #16
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001be6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001bea:	2300      	movs	r3, #0
 8001bec:	f00f fb04 	bl	80111f8 <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00f      	beq.n	8001c16 <HAL_FDCAN_RxFifo0Callback+0xa2>
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	f3bf 8f6f 	isb	sy
                break;
 8001c06:	e006      	b.n	8001c16 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	ddd0      	ble.n	8001bb6 <HAL_FDCAN_RxFifo0Callback+0x42>
 8001c14:	e000      	b.n	8001c18 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 8001c16:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001c1c:	f009 fc4b 	bl	800b4b6 <HAL_GPIO_TogglePin>
    }
}
 8001c20:	bf00      	nop
 8001c22:	3748      	adds	r7, #72	@ 0x48
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24002a4c 	.word	0x24002a4c
 8001c2c:	2400231c 	.word	0x2400231c
 8001c30:	e000ed04 	.word	0xe000ed04
 8001c34:	58021000 	.word	0x58021000

08001c38 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c42:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c46:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c4a:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001c4e:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001cc8 <tustin_derivative+0x90>
 8001c52:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c56:	edd7 7a00 	vldr	s15, [r7]
 8001c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c66:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001c70:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c80:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ccc <tustin_derivative+0x94>
 8001c84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ccc <tustin_derivative+0x94>
 8001ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb0:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	ee07 3a90 	vmov	s15, r3
}
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40490fd8 	.word	0x40490fd8
 8001ccc:	3b03126f 	.word	0x3b03126f

08001cd0 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	@ 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 8001d2e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d34:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t buf[8], last[8]; int got = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (xQueueReceive(m->canRxQueue, buf, 0) == pdPASS) { memcpy(last, buf, 8); got = 1; }
 8001d3e:	e009      	b.n	8001d54 <motor_encoder_read+0x84>
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	f107 0214 	add.w	r2, r7, #20
 8001d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d50:	2301      	movs	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f107 0114 	add.w	r1, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00f fae8 	bl	8011334 <xQueueReceive>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d0ea      	beq.n	8001d40 <motor_encoder_read+0x70>
	if (got)
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01f      	beq.n	8001db0 <motor_encoder_read+0xe0>
	{
		// CAN 메시지가 이미 수신되었을 시
		unsigned int p_int = ((last[1]<<8)|last[2]);
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	7bba      	ldrb	r2, [r7, #14]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	623b      	str	r3, [r7, #32]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001d80:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f7ff fd25 	bl	80017d4 <uint_to_float32_t>
 8001d8a:	ed87 0a07 	vstr	s0, [r7, #28]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001d8e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001e2c <motor_encoder_read+0x15c>
 8001d92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001dae:	e003      	b.n	8001db8 <motor_encoder_read+0xe8>
	else
	{
//		sta = 2;
//		Error_Handler();
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		m->pos = m->pos_old;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ed93 6a06 	vldr	s12, [r3, #24]
 8001dd0:	eef0 1a46 	vmov.f32	s3, s12
 8001dd4:	eeb0 1a66 	vmov.f32	s2, s13
 8001dd8:	eef0 0a47 	vmov.f32	s1, s14
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	f7ff ff2a 	bl	8001c38 <tustin_derivative>
 8001de4:	eef0 7a40 	vmov.f32	s15, s0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	ed93 6a06 	vldr	s12, [r3, #24]
 8001e06:	eef0 1a46 	vmov.f32	s3, s12
 8001e0a:	eeb0 1a66 	vmov.f32	s2, s13
 8001e0e:	eef0 0a47 	vmov.f32	s1, s14
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f7ff ff0f 	bl	8001c38 <tustin_derivative>
 8001e1a:	eef0 7a40 	vmov.f32	s15, s0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40490fd8 	.word	0x40490fd8

08001e30 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e42:	ed97 7a00 	vldr	s14, [r7]
 8001e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	dd1a      	ble.n	8001eb0 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d400      	bmi.n	8001ec8 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001ec6:	e01a      	b.n	8001efe <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08b      	sub	sp, #44	@ 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f015 fd51 	bl	80179c8 <sinf>
 8001f26:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	f015 fe0a 	bl	8017b50 <cosf>
 8001f3c:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f46:	3304      	adds	r3, #4
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f015 fd3a 	bl	80179c8 <sinf>
 8001f54:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f5e:	3304      	adds	r3, #4
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb0 0a67 	vmov.f32	s0, s15
 8001f68:	f015 fdf2 	bl	8017b50 <cosf>
 8001f6c:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f76:	3308      	adds	r3, #8
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	f015 fd22 	bl	80179c8 <sinf>
 8001f84:	ed87 0a03 	vstr	s0, [r7, #12]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f8e:	3308      	adds	r3, #8
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	f015 fdda 	bl	8017b50 <cosf>
 8001f9c:	ed87 0a02 	vstr	s0, [r7, #8]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa4:	e03a      	b.n	800201c <robot_forward_kinematics_cal+0x110>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
		r->accXYZ_old.pData[i] = r->accXYZ.pData[i];
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 1310 	ldr.w	r1, [r3, #784]	@ 0x310
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	2b02      	cmp	r3, #2
 8002020:	ddc1      	ble.n	8001fa6 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002028:	edd7 7a04 	vldr	s15, [r7, #16]
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002036:	edd7 7a02 	vldr	s15, [r7, #8]
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800205a:	edd7 7a04 	vldr	s15, [r7, #16]
 800205e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002068:	edd7 7a02 	vldr	s15, [r7, #8]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 800207a:	3304      	adds	r3, #4
 800207c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	ed93 7acb 	vldr	s14, [r3, #812]	@ 0x32c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edd3 6acc 	vldr	s13, [r3, #816]	@ 0x330
 8002094:	edd7 7a05 	vldr	s15, [r7, #20]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80020b4:	3308      	adds	r3, #8
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 80020d0:	461a      	mov	r2, r3
 80020d2:	f011 faff 	bl	80136d4 <arm_mat_mult_f32>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <robot_forward_kinematics_cal+0x1da>
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <robot_forward_kinematics_cal+0x250>)
 80020de:	2204      	movs	r2, #4
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f003 fed1 	bl	8005e88 <Error_Handler>
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	e02e      	b.n	800214a <robot_forward_kinematics_cal+0x23e>
		r->accXYZ.pData[i] = tustin_derivative(r->velXYZ.pData[i], r->velXYZ_old.pData[i], r->accXYZ_old.pData[i], 70.0f);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 2310 	ldr.w	r2, [r3, #784]	@ 0x310
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	edd3 6a00 	vldr	s13, [r3]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	18d4      	adds	r4, r2, r3
 8002128:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8002160 <robot_forward_kinematics_cal+0x254>
 800212c:	eeb0 1a66 	vmov.f32	s2, s13
 8002130:	eef0 0a47 	vmov.f32	s1, s14
 8002134:	eeb0 0a67 	vmov.f32	s0, s15
 8002138:	f7ff fd7e 	bl	8001c38 <tustin_derivative>
 800213c:	eef0 7a40 	vmov.f32	s15, s0
 8002140:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	3301      	adds	r3, #1
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2b02      	cmp	r3, #2
 800214e:	ddcd      	ble.n	80020ec <robot_forward_kinematics_cal+0x1e0>
	}
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	372c      	adds	r7, #44	@ 0x2c
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	24002a4c 	.word	0x24002a4c
 8002160:	428c0000 	.word	0x428c0000

08002164 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0f0      	sub	sp, #448	@ 0x1c0
 8002168:	af00      	add	r7, sp, #0
 800216a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800216e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002172:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8002174:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002178:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	f015 fc1d 	bl	80179c8 <sinf>
 800218e:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8002192:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002196:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	f015 fcd2 	bl	8017b50 <cosf>
 80021ac:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80021b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021be:	3304      	adds	r3, #4
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	f015 fbfe 	bl	80179c8 <sinf>
 80021cc:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80021d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021de:	3304      	adds	r3, #4
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eeb0 0a67 	vmov.f32	s0, s15
 80021e8:	f015 fcb2 	bl	8017b50 <cosf>
 80021ec:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 80021f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021fe:	3308      	adds	r3, #8
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	f015 fbde 	bl	80179c8 <sinf>
 800220c:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8002210:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002214:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800221e:	3308      	adds	r3, #8
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	f015 fc92 	bl	8017b50 <cosf>
 800222c:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8002230:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002234:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800223e:	3308      	adds	r3, #8
 8002240:	ed93 7a00 	vldr	s14, [r3]
 8002244:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002248:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002252:	3304      	adds	r3, #4
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	f015 fbb2 	bl	80179c8 <sinf>
 8002264:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8002268:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800226c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002276:	3308      	adds	r3, #8
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002280:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800228a:	3304      	adds	r3, #4
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002294:	eeb0 0a67 	vmov.f32	s0, s15
 8002298:	f015 fc5a 	bl	8017b50 <cosf>
 800229c:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 80022a0:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80022a4:	eeb1 7a67 	vneg.f32	s14, s15
 80022a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	edd3 6acc 	vldr	s13, [r3, #816]	@ 0x330
 80022b6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80022ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	ed93 6acd 	vldr	s12, [r3, #820]	@ 0x334
 80022cc:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80022d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 80022ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80022fc:	eeb1 7a67 	vneg.f32	s14, s15
 8002300:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8002304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002308:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800230c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8002316:	3304      	adds	r3, #4
 8002318:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8002324:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002328:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002332:	eeb1 7a67 	vneg.f32	s14, s15
 8002336:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800233a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002342:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800234c:	3308      	adds	r3, #8
 800234e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800235a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800235e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002368:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002374:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 800237e:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002398:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800239c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 80023b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80023c4:	eeb1 7a67 	vneg.f32	s14, s15
 80023c8:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80023de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80023ec:	3301      	adds	r3, #1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 80023fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002402:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 800240c:	eeb1 7a67 	vneg.f32	s14, s15
 8002410:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002418:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800241c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002426:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800242a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002434:	3302      	adds	r3, #2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 8002446:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800244a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002454:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002458:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 800246c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002470:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800247a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800247e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002488:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800248c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3304      	adds	r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 80024a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 80024b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80024c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80024d2:	3301      	adds	r3, #1
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 80024e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 7253 	add.w	r2, r3, #844	@ 0x34c
 80024f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f011 f888 	bl	8013618 <arm_mat_trans_f32>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <robot_model_param_cal+0x3bc>
 800250e:	4b03      	ldr	r3, [pc, #12]	@ (800251c <robot_model_param_cal+0x3b8>)
 8002510:	2204      	movs	r2, #4
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f003 fcb8 	bl	8005e88 <Error_Handler>
 8002518:	e002      	b.n	8002520 <robot_model_param_cal+0x3bc>
 800251a:	bf00      	nop
 800251c:	24002a4c 	.word	0x24002a4c

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8002520:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002524:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800252e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002532:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002536:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800253a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	edd3 6ad2 	vldr	s13, [r3, #840]	@ 0x348
 8002544:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8002554:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002558:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	ed93 7ace 	vldr	s14, [r3, #824]	@ 0x338
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8002562:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002566:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	edd3 6ac9 	vldr	s13, [r3, #804]	@ 0x324
 8002570:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002574:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	ed93 6ad1 	vldr	s12, [r3, #836]	@ 0x344
 800257e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002582:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002586:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800258a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	ed93 6ad1 	vldr	s12, [r3, #836]	@ 0x344
 8002598:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800259c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 80025a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 80025b6:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80025ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025be:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80025c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80025c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80025d8:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 80025dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 80025ea:	eeb1 7a67 	vneg.f32	s14, s15
 80025ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002604:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800261e:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002622:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002626:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002630:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002638:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800263c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002646:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800264a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002652:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002656:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002660:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002662:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002666:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 800266a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8002678:	eeb1 7a67 	vneg.f32	s14, s15
 800267c:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002688:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800269a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80026a4:	3308      	adds	r3, #8
 80026a6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 80026b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80026c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80026ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 80026e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	ed93 7acf 	vldr	s14, [r3, #828]	@ 0x33c
											+ r->m3 * r->l2 * r->l2;
 80026f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002700:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002704:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 800270e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002712:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002716:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8002724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002728:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002732:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002736:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 8002740:	3301      	adds	r3, #1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 800274a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 800274e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002752:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	ed93 7aca 	vldr	s14, [r3, #808]	@ 0x328
 800275c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002760:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 800276a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002772:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002784:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800278e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002792:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 800279c:	3302      	adds	r3, #2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 80027ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80027bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80027ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 80027e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80027ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80027fc:	3302      	adds	r3, #2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002806:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002810:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002814:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	3304      	adds	r3, #4
 8002822:	440b      	add	r3, r1
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8002828:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800282c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002836:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800283a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 8002844:	3301      	adds	r3, #1
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800284e:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 8002858:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 800285a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800285e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 8002868:	eeb1 7a67 	vneg.f32	s14, s15
 800286c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002870:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800287a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002882:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002898:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028ae:	3304      	adds	r3, #4
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 80028b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 80028c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	ed93 6acc 	vldr	s12, [r3, #816]	@ 0x330
 80028d4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80028d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80028ea:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80028ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	ed93 6acc 	vldr	s12, [r3, #816]	@ 0x330
 8002908:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800290c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002910:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002914:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800291e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002926:	ee36 6a27 	vadd.f32	s12, s12, s15
 800292a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002938:	3304      	adds	r3, #4
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002942:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002946:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002950:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002954:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002958:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800295c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002966:	3308      	adds	r3, #8
 8002968:	ed93 5a00 	vldr	s10, [r3]
 800296c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002970:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800297a:	3304      	adds	r3, #4
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002984:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002988:	ee76 7a27 	vadd.f32	s15, s12, s15
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8002994:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8002998:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800299c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80029a6:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80029aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
							 ) * r->qdot_bi.pData[0];
 80029b8:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80029bc:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 80029c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 80029ce:	eeb1 7a67 	vneg.f32	s14, s15
 80029d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a02:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	edd3 6a00 	vldr	s13, [r3]
 8002a12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a20:	3304      	adds	r3, #4
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a32:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	edd3 6a00 	vldr	s13, [r3]
 8002a42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a50:	3304      	adds	r3, #4
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8002a68:	3304      	adds	r3, #4
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8002a72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	ed93 7aca 	vldr	s14, [r3, #808]	@ 0x328
 8002a80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa4:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ab0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002aba:	3304      	adds	r3, #4
 8002abc:	edd3 6a00 	vldr	s13, [r3]
 8002ac0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ac4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002ace:	3304      	adds	r3, #4
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002adc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002af0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002b04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	ed93 7ac9 	vldr	s14, [r3, #804]	@ 0x324
 8002b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002b32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002d64 <robot_model_param_cal+0xc00>
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b54:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002b5e:	3304      	adds	r3, #4
 8002b60:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b68:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002b6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8002b7a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002d64 <robot_model_param_cal+0xc00>
 8002b7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 8002bb0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bb4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002bbe:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002bd4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 8002be4:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 8002be8:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf0:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002bf4:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002c04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002c12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002d68 <robot_model_param_cal+0xc04>
 8002c28:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c2c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002c3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002d6c <robot_model_param_cal+0xc08>
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	eef0 0a67 	vmov.f32	s1, s15
 8002c58:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5c:	f014 fe4e 	bl	80178fc <fmaxf>
 8002c60:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002c64:	4b42      	ldr	r3, [pc, #264]	@ (8002d70 <robot_model_param_cal+0xc0c>)
 8002c66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 8002c6a:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002c6e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c72:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 8002c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	dc0b      	bgt.n	8002c98 <robot_model_param_cal+0xb34>
 8002c80:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002c84:	eef0 7ae7 	vabs.f32	s15, s15
 8002c88:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8002c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	f340 82aa 	ble.w	80031ec <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	f010 feb8 	bl	8013a18 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 8002ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cac:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	f010 feb0 	bl	8013a18 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 8002cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cbc:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	f010 fea8 	bl	8013a18 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002cc8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ccc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002cd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002ce4:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f010 fcf3 	bl	80136d4 <arm_mat_mult_f32>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <robot_model_param_cal+0xb9a>
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <robot_model_param_cal+0xc10>)
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f003 f8c5 	bl	8005e88 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002cfe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d02:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d12:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d22:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002d2e:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002d32:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d68 <robot_model_param_cal+0xc04>
 8002d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002d78 <robot_model_param_cal+0xc14>
 8002d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4a:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002d4e:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d56:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d60:	e023      	b.n	8002daa <robot_model_param_cal+0xc46>
 8002d62:	bf00      	nop
 8002d64:	411ce80a 	.word	0x411ce80a
 8002d68:	358637bd 	.word	0x358637bd
 8002d6c:	34000000 	.word	0x34000000
 8002d70:	358637bd 	.word	0x358637bd
 8002d74:	24002a4c 	.word	0x24002a4c
 8002d78:	3d4ccccd 	.word	0x3d4ccccd
 8002d7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d80:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002d84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d92:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 8002d96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002daa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	dde4      	ble.n	8002d7c <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 8002db2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002db6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dce:	edc3 7a00 	vstr	s15, [r3]
 8002dd2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dda:	ed93 7a04 	vldr	s14, [r3, #16]
 8002dde:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dee:	edc3 7a04 	vstr	s15, [r3, #16]
 8002df2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002df6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dfe:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e0a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e0e:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e12:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002e16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f010 fcfd 	bl	801381c <arm_mat_inverse_f32>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <robot_model_param_cal+0xcce>
 8002e28:	4b82      	ldr	r3, [pc, #520]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f003 f82b 	bl	8005e88 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f503 7069 	add.w	r0, r3, #932	@ 0x3a4
 8002e40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8002e4e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002e52:	4619      	mov	r1, r3
 8002e54:	f010 fc3e 	bl	80136d4 <arm_mat_mult_f32>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <robot_model_param_cal+0xd04>
 8002e5e:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e60:	2204      	movs	r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f003 f810 	bl	8005e88 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8002e76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f010 fbc6 	bl	8013618 <arm_mat_trans_f32>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <robot_model_param_cal+0xd38>
 8002e92:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e94:	2204      	movs	r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f002 fff6 	bl	8005e88 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 8002e9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002ea0:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	f010 fdb6 	bl	8013a18 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 8002eac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002eb0:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	f010 fdae 	bl	8013a18 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 8002ebc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002ec0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	f010 fda6 	bl	8013a18 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002ecc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002ed0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	f010 fd9e 	bl	8013a18 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002edc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002ee0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	f010 fd96 	bl	8013a18 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002eec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ef0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 8002efa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f010 fc8b 	bl	801381c <arm_mat_inverse_f32>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80b2 	bne.w	8003072 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002f1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002f20:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f24:	4618      	mov	r0, r3
 8002f26:	f010 fbd5 	bl	80136d4 <arm_mat_mult_f32>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <robot_model_param_cal+0xdd6>
 8002f30:	4b40      	ldr	r3, [pc, #256]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002f32:	2204      	movs	r2, #4
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f002 ffa7 	bl	8005e88 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
 8002f48:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002f4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f50:	4618      	mov	r0, r3
 8002f52:	f010 fbbf 	bl	80136d4 <arm_mat_mult_f32>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <robot_model_param_cal+0xe02>
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002f5e:	2204      	movs	r2, #4
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f002 ff91 	bl	8005e88 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002f6c:	e016      	b.n	8002f9c <robot_model_param_cal+0xe38>
 8002f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f72:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002f76:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f84:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002f88:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f96:	3301      	adds	r3, #1
 8002f98:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002f9c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	dde4      	ble.n	8002f6e <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002fac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
 8002fcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd4:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fd8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fe8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff4:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ff8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003008:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800300c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003010:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f010 fc00 	bl	801381c <arm_mat_inverse_f32>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <robot_model_param_cal+0xec8>
 8003022:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <robot_model_param_cal+0xed0>)
 8003024:	2204      	movs	r2, #4
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f002 ff2e 	bl	8005e88 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003032:	e01a      	b.n	800306a <robot_model_param_cal+0xf06>
 8003034:	24002a4c 	.word	0x24002a4c
 8003038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800303c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 8003058:	443a      	add	r2, r7
 800305a:	3ae0      	subs	r2, #224	@ 0xe0
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003064:	3301      	adds	r3, #1
 8003066:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800306a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800306e:	2b08      	cmp	r3, #8
 8003070:	dde2      	ble.n	8003038 <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8003072:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003076:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8003092:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003096:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80030a0:	3304      	adds	r3, #4
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80030a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80030b6:	3308      	adds	r3, #8
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80030be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80030cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80030e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80030f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 8003100:	3301      	adds	r3, #1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800310a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003114:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003118:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003122:	3301      	adds	r3, #1
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 800312c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003130:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800313a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800313e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003148:	3302      	adds	r3, #2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8003154:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003158:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 8003162:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003166:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 800317a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800317e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 8003188:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800318c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3304      	adds	r3, #4
 800319a:	4413      	add	r3, r2
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80031a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80031b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 80031be:	3301      	adds	r3, #1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	441a      	add	r2, r3
 80031c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 80031d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80031e0:	3301      	adds	r3, #1
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	601a      	str	r2, [r3, #0]
	{
 80031ea:	e227      	b.n	800363c <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 80031ec:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80031f0:	eef1 6a67 	vneg.f32	s13, s15
 80031f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003202:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8003206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 800320e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003212:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800321c:	3304      	adds	r3, #4
 800321e:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8003222:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8003226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800322a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 800322e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003232:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800323c:	3308      	adds	r3, #8
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8003244:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8003248:	eeb1 7a67 	vneg.f32	s14, s15
 800324c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8003250:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003254:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003258:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8003262:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800326a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800326e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 8003278:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800327c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 8003292:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8003296:	eeb1 7a67 	vneg.f32	s14, s15
 800329a:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800329e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 80032b0:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80032b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80032c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80032d4:	3301      	adds	r3, #1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032de:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 80032e2:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80032e6:	eef1 6a67 	vneg.f32	s13, s15
 80032ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 80032f8:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80032fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003300:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003304:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 800330e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003312:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 800331c:	3302      	adds	r3, #2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003326:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 800332a:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 800332e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8003332:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003336:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800333a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 8003344:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003350:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 800335a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800335e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8003374:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8003378:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800337c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003380:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003384:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 800338e:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003396:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800339a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80033a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3304      	adds	r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 80033c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 80033ce:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80033d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80033e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 80033fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003400:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003404:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003408:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8003412:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003416:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f010 f8f8 	bl	8013618 <arm_mat_trans_f32>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <robot_model_param_cal+0x12d4>
 800342e:	4b86      	ldr	r3, [pc, #536]	@ (8003648 <robot_model_param_cal+0x14e4>)
 8003430:	2204      	movs	r2, #4
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f002 fd28 	bl	8005e88 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 8003438:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800343c:	2224      	movs	r2, #36	@ 0x24
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f011 fe3e 	bl	80150c2 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 8003446:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800344a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800344e:	2203      	movs	r2, #3
 8003450:	2103      	movs	r1, #3
 8003452:	f010 fae1 	bl	8013a18 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003456:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800345a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 707f 	add.w	r0, r3, #1020	@ 0x3fc
 8003464:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003468:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8003472:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003476:	4619      	mov	r1, r3
 8003478:	f010 f92c 	bl	80136d4 <arm_mat_mult_f32>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <robot_model_param_cal+0x1328>
 8003482:	4b71      	ldr	r3, [pc, #452]	@ (8003648 <robot_model_param_cal+0x14e4>)
 8003484:	2204      	movs	r2, #4
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f002 fcfe 	bl	8005e88 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800348c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003490:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 7074 	add.w	r0, r3, #976	@ 0x3d0
 800349a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800349e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 628a 	add.w	r2, r3, #1104	@ 0x450
 80034a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80034ac:	4619      	mov	r1, r3
 80034ae:	f010 f911 	bl	80136d4 <arm_mat_mult_f32>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <robot_model_param_cal+0x135e>
 80034b8:	4b63      	ldr	r3, [pc, #396]	@ (8003648 <robot_model_param_cal+0x14e4>)
 80034ba:	2204      	movs	r2, #4
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f002 fce3 	bl	8005e88 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80034c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80034d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80034e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80034f0:	3304      	adds	r3, #4
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80034f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8003506:	3308      	adds	r3, #8
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 800350e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003512:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800351c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003520:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8003534:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003538:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003542:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003546:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 8003550:	3301      	adds	r3, #1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800355a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003564:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003568:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003572:	3301      	adds	r3, #1
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 800357c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003580:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800358a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800358e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003598:	3302      	adds	r3, #2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 80035a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80035b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 80035ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80035d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3304      	adds	r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80035f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003600:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003604:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 800360e:	3301      	adds	r3, #1
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	441a      	add	r2, r3
 8003614:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003618:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003622:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003626:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003630:	3301      	adds	r3, #1
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	601a      	str	r2, [r3, #0]
	}
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24002a4c 	.word	0x24002a4c

0800364c <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e0cb      	b.n	80037f2 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3374      	adds	r3, #116	@ 0x74
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2198      	movs	r1, #152	@ 0x98
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	332c      	adds	r3, #44	@ 0x2c
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800367e:	4bae      	ldr	r3, [pc, #696]	@ (8003938 <robot_state_update+0x2ec>)
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3374      	adds	r3, #116	@ 0x74
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	ed93 7a00 	vldr	s14, [r3]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2198      	movs	r1, #152	@ 0x98
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3330      	adds	r3, #48	@ 0x30
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003938 <robot_state_update+0x2ec>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e2:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3374      	adds	r3, #116	@ 0x74
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	ed93 7a00 	vldr	s14, [r3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2198      	movs	r1, #152	@ 0x98
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3334      	adds	r3, #52	@ 0x34
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3374      	adds	r3, #116	@ 0x74
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	ed93 7a00 	vldr	s14, [r3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2198      	movs	r1, #152	@ 0x98
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3338      	adds	r3, #56	@ 0x38
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3374      	adds	r3, #116	@ 0x74
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2198      	movs	r1, #152	@ 0x98
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	333c      	adds	r3, #60	@ 0x3c
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3374      	adds	r3, #116	@ 0x74
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2198      	movs	r1, #152	@ 0x98
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3340      	adds	r3, #64	@ 0x40
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3374      	adds	r3, #116	@ 0x74
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	ed93 7a00 	vldr	s14, [r3]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	2198      	movs	r1, #152	@ 0x98
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f77f af30 	ble.w	800365a <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8003816:	3304      	adds	r3, #4
 8003818:	6852      	ldr	r2, [r2, #4]
 800381a:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003822:	3308      	adds	r3, #8
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800382e:	3304      	adds	r3, #4
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800383a:	3308      	adds	r3, #8
 800383c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003840:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e036      	b.n	80038b8 <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	ed93 7a00 	vldr	s14, [r3]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	337c      	adds	r3, #124	@ 0x7c
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dd05      	ble.n	800387e <robot_state_update+0x232>
 8003872:	4b32      	ldr	r3, [pc, #200]	@ (800393c <robot_state_update+0x2f0>)
 8003874:	2205      	movs	r2, #5
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f002 fb06 	bl	8005e88 <Error_Handler>
 800387c:	e019      	b.n	80038b2 <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	337e      	adds	r3, #126	@ 0x7e
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d504      	bpl.n	80038b2 <robot_state_update+0x266>
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <robot_state_update+0x2f0>)
 80038aa:	2205      	movs	r2, #5
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f002 faeb 	bl	8005e88 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	ddc5      	ble.n	800384a <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fc50 	bl	8002164 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe fb21 	bl	8001f0c <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e02c      	b.n	800392a <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 14fc 	ldr.w	r1, [r3, #1276]	@ 0x4fc
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 1560 	ldr.w	r1, [r3, #1376]	@ 0x560
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3301      	adds	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	ddcf      	ble.n	80038d0 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e03f      	b.n	80039b6 <robot_state_update+0x36a>
 8003936:	bf00      	nop
 8003938:	240022d4 	.word	0x240022d4
 800393c:	24002a4c 	.word	0x24002a4c
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3301      	adds	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	ddc1      	ble.n	8003940 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e01e      	b.n	8003a00 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 1648 	ldr.w	r1, [r3, #1608]	@ 0x648
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 1684 	ldr.w	r1, [r3, #1668]	@ 0x684
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	dddd      	ble.n	80039c2 <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 7074 	add.w	r0, r3, #976	@ 0x3d0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f503 61cb 	add.w	r1, r3, #1624	@ 0x658
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 636c 	addw	r3, r3, #1644	@ 0x66c
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f00f fe5b 	bl	80136d4 <arm_mat_mult_f32>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <robot_state_update+0x3e2>
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <robot_state_update+0x3ec>)
 8003a26:	2204      	movs	r2, #4
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f002 fa2d 	bl	8005e88 <Error_Handler>
}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24002a4c 	.word	0x24002a4c

08003a3c <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e040      	b.n	8003ad2 <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	4413      	add	r3, r2
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3304      	adds	r3, #4
 8003a98:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	4413      	add	r3, r2
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	ddbb      	ble.n	8003a50 <robot_pos_pid_gain_setting+0x14>
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e145      	b.n	8003d88 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003afc:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003dc0 <robot_pos_pid+0x2d8>
 8003b00:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b20:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	ed93 7a00 	vldr	s14, [r3]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6c:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	ed93 7a00 	vldr	s14, [r3]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8003bc6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	edd3 5a00 	vldr	s11, [r3]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	edd3 5a00 	vldr	s11, [r3]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8d3 2684 	ldr.w	r2, [r3, #1668]	@ 0x684
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c72:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c8a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c96:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003c9a:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ca6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	ed93 7a00 	vldr	s14, [r3]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cd6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003cda:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ce6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003cea:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cfa:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d02:	ee35 7b07 	vadd.f64	d7, d5, d7
 8003d06:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8d3 2560 	ldr.w	r2, [r3, #1376]	@ 0x560
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d36:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	ed93 7a00 	vldr	s14, [r3]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	edd3 7a00 	vldr	s15, [r3]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8d3 2574 	ldr.w	r2, [r3, #1396]	@ 0x574
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	f77f aeb6 	ble.w	8003afc <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 7069 	add.w	r0, r3, #932	@ 0x3a4
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 61ae 	add.w	r1, r3, #1392	@ 0x570
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8003da2:	461a      	mov	r2, r3
 8003da4:	f00f fc96 	bl	80136d4 <arm_mat_mult_f32>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <robot_pos_pid+0x2d0>
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <robot_pos_pid+0x2e0>)
 8003db0:	2204      	movs	r2, #4
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f002 f868 	bl	8005e88 <Error_Handler>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40490fd8 	.word	0x40490fd8
 8003dc4:	3b03126f 	.word	0x3b03126f
 8003dc8:	24002a4c 	.word	0x24002a4c

08003dcc <set_trajectory>:
// Trajectory Making Functions ----------------------------------------------------
void set_trajectory(Manipulator *r, Trajectory *traj, float32_t task_time, float32_t *final_pos)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b08d      	sub	sp, #52	@ 0x34
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dda:	603a      	str	r2, [r7, #0]
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	ed93 7a00 	vldr	s14, [r3]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
					 final_pos[1]==traj->final_pos[1] &&
 8003de8:	eeb4 7a67 	vcmp.f32	s14, s15
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d119      	bne.n	8003e26 <set_trajectory+0x5a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	3304      	adds	r3, #4
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003e00:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e08:	d10d      	bne.n	8003e26 <set_trajectory+0x5a>
					 final_pos[2]==traj->final_pos[2]);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	ed93 7a00 	vldr	s14, [r3]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
					 final_pos[1]==traj->final_pos[1] &&
 8003e18:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	d101      	bne.n	8003e26 <set_trajectory+0x5a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <set_trajectory+0x5c>
 8003e26:	2300      	movs	r3, #0
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	bool same_T   = fabsf(task_time - traj->task_time) < 1e-6f;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e46:	eef0 7ae7 	vabs.f32	s15, s15
 8003e4a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003f00 <set_trajectory+0x134>
 8003e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e56:	bf4c      	ite	mi
 8003e58:	2301      	movmi	r3, #1
 8003e5a:	2300      	movpl	r3, #0
 8003e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	float32_t now = (float32_t)ctrl_time_ms/1000.f;
 8003e60:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <set_trajectory+0x138>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e6c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003f08 <set_trajectory+0x13c>
 8003e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	bool still_running = (now - traj->initial_time) < traj->task_time;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e7e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e94:	bf4c      	ite	mi
 8003e96:	2301      	movmi	r3, #1
 8003e98:	2300      	movpl	r3, #0
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if (still_running) return; // 아직 이전 task 수행중이면 무조건 스킵
 8003e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 831c 	bne.w	80044e0 <set_trajectory+0x714>
	else // 이전 task가 완료된 상황일 때,
	{
		if ((same_pos && same_T) || still_running) return; // 같은 목표/시간이 들어온 경우이면 스킵
 8003ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <set_trajectory+0xee>
 8003eb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 8315 	bne.w	80044e4 <set_trajectory+0x718>
 8003eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 8310 	bne.w	80044e4 <set_trajectory+0x718>
		else // 다른 목표 혹은 다른 시간이 들어온 경우이면 trajectory 새로 생성
		{
			traj->task_time = task_time;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	601a      	str	r2, [r3, #0]
			traj->initial_time = (float32_t) ctrl_time_ms / 1000.0f;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <set_trajectory+0x138>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003f08 <set_trajectory+0x13c>
 8003eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	edc3 7a01 	vstr	s15, [r3, #4]
			traj->final_time = traj->initial_time + traj->task_time;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	edc3 7a02 	vstr	s15, [r3, #8]

			for (int i=0; i<NUM_TASK_DEG; ++i)
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efe:	e043      	b.n	8003f88 <set_trajectory+0x1bc>
 8003f00:	358637bd 	.word	0x358637bd
 8003f04:	240022b0 	.word	0x240022b0
 8003f08:	447a0000 	.word	0x447a0000
			{
				traj->initial_pos[i] = r->posXYZ.pData[i];
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1e:	3302      	adds	r3, #2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3304      	adds	r3, #4
 8003f26:	601a      	str	r2, [r3, #0]
				traj->initial_vel[i] = 0.0f;
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	3306      	adds	r3, #6
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
				traj->initial_acc[i] = 0.0f;
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

				traj->final_pos[i] = final_pos[i];
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	330c      	adds	r3, #12
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	601a      	str	r2, [r3, #0]
				traj->final_vel[i] = 0.0f;
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f64:	330e      	adds	r3, #14
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
				traj->final_acc[i] = 0.0f;
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	3312      	adds	r3, #18
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
			for (int i=0; i<NUM_TASK_DEG; ++i)
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	3301      	adds	r3, #1
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	ddbe      	ble.n	8003f0c <set_trajectory+0x140>
			}

			float32_t deltaX = traj->final_pos[0] - traj->initial_pos[0];
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
			traj->xpos_coefficient[0] = traj->initial_pos[0];
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
			traj->xpos_coefficient[1] = traj->initial_vel[0];
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	659a      	str	r2, [r3, #88]	@ 0x58
			traj->xpos_coefficient[2] = 0.5f * traj->initial_acc[0];
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003fb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
			traj->xpos_coefficient[3] = ( 20 * deltaX - 12 * traj->initial_vel[0] * traj->task_time -   3 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 8003fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fca:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003fce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fd8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8003fdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003ff4:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8003ff8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004010:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	edd3 7a00 	vldr	s15, [r3]
 800402e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
			traj->xpos_coefficient[4] = (-15 * deltaX +  8 * traj->initial_vel[0] * traj->task_time + 1.5 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 800403c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004040:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8004044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	edd3 7a06 	vldr	s15, [r3, #24]
 800404e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004052:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004064:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800406e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004072:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 8004076:	ee27 5b05 	vmul.f64	d5, d7, d5
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	edd3 7a00 	vldr	s15, [r3]
 8004080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004084:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	edd3 7a00 	vldr	s15, [r3]
 800408e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004092:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004096:	ee36 5b07 	vadd.f64	d5, d6, d7
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	ed93 7a00 	vldr	s14, [r3]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	edd3 7a00 	vldr	s15, [r3]
 80040ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
			traj->xpos_coefficient[5] = ( 12 * deltaX -  6 * traj->initial_vel[0] * traj->task_time -   1 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 80040d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d4:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80040d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	edd3 7a06 	vldr	s15, [r3, #24]
 80040e2:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80040e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	edd3 7a00 	vldr	s15, [r3]
 800410e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004112:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	edd3 7a00 	vldr	s15, [r3]
 800411c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	edd3 7a00 	vldr	s15, [r3]
 8004126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

			float32_t deltaY = traj->final_pos[1] - traj->initial_pos[1];
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	edd3 7a04 	vldr	s15, [r3, #16]
 800415e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004162:	edc7 7a06 	vstr	s15, [r7, #24]
			traj->ypos_coefficient[0] = traj->initial_pos[1];
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	66da      	str	r2, [r3, #108]	@ 0x6c
			traj->ypos_coefficient[1] = traj->initial_vel[1];
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	671a      	str	r2, [r3, #112]	@ 0x70
			traj->ypos_coefficient[2] = 0.5f * traj->initial_acc[1];
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800417c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
			traj->ypos_coefficient[3] = ( 20 * deltaY - 12 * traj->initial_vel[1] * traj->task_time -   3 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 800418a:	edd7 7a06 	vldr	s15, [r7, #24]
 800418e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004192:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	edd3 7a07 	vldr	s15, [r3, #28]
 800419c:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80041a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80041b8:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80041bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
			traj->ypos_coefficient[4] = (-15 * deltaY +  8 * traj->initial_vel[1] * traj->task_time + 1.5 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 8004200:	edd7 7a06 	vldr	s15, [r7, #24]
 8004204:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8004208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004212:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004216:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004228:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004236:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 800423a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	edd3 7a00 	vldr	s15, [r3]
 8004244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004248:	ee25 5b07 	vmul.f64	d5, d5, d7
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004256:	ee25 7b07 	vmul.f64	d7, d5, d7
 800425a:	ee36 5b07 	vadd.f64	d5, d6, d7
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	ed93 7a00 	vldr	s14, [r3]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	edd3 7a00 	vldr	s15, [r3]
 8004274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004286:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800428a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
			traj->ypos_coefficient[5] = ( 12 * deltaY -  6 * traj->initial_vel[1] * traj->task_time -   1 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 8004294:	edd7 7a06 	vldr	s15, [r7, #24]
 8004298:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800429c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80042a6:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80042aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	edd3 7a00 	vldr	s15, [r3]
 80042d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	edd3 7a00 	vldr	s15, [r3]
 80042e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800430c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80

			float32_t deltaZ = traj->final_pos[2] - traj->initial_pos[2];
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004326:	edc7 7a05 	vstr	s15, [r7, #20]
			traj->zpos_coefficient[0] = traj->initial_pos[2];
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
			traj->zpos_coefficient[1] = traj->initial_vel[2];
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
			traj->zpos_coefficient[2] = 0.5f * traj->initial_acc[2];
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004344:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
			traj->zpos_coefficient[3] = ( 20 * deltaZ - 12 * traj->initial_vel[2] * traj->task_time -   3 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 8004352:	edd7 7a05 	vldr	s15, [r7, #20]
 8004356:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800435a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	edd3 7a08 	vldr	s15, [r3, #32]
 8004364:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8004368:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004380:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004384:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	edd3 7a00 	vldr	s15, [r3]
 8004398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800439c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	edd3 7a00 	vldr	s15, [r3]
 80043a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
			traj->zpos_coefficient[4] = (-15 * deltaZ +  8 * traj->initial_vel[2] * traj->task_time + 1.5 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 80043c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043cc:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80043d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80043da:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80043de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	edd3 7a00 	vldr	s15, [r3]
 80043e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80043fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043fe:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 8004402:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004410:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800441e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004422:	ee36 5b07 	vadd.f64	d5, d6, d7
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	ed93 7a00 	vldr	s14, [r3]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	edd3 7a00 	vldr	s15, [r3]
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800444e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004452:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
			traj->zpos_coefficient[5] = ( 12 * deltaZ -  6 * traj->initial_vel[2] * traj->task_time -   1 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 800445c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004460:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8004464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	edd3 7a08 	vldr	s15, [r3, #32]
 800446e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004472:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	edd3 7a00 	vldr	s15, [r3]
 80044a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	edd3 7a00 	vldr	s15, [r3]
 80044bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	edd3 7a00 	vldr	s15, [r3]
 80044c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
 80044de:	e002      	b.n	80044e6 <set_trajectory+0x71a>
	if (still_running) return; // 아직 이전 task 수행중이면 무조건 스킵
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <set_trajectory+0x71a>
		if ((same_pos && same_T) || still_running) return; // 같은 목표/시간이 들어온 경우이면 스킵
 80044e4:	bf00      	nop
		}
	}
}
 80044e6:	3734      	adds	r7, #52	@ 0x34
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <get_target_point>:

void get_target_point(Trajectory *traj, arm_matrix_instance_f32 pos_ref)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	e883 0006 	stmia.w	r3, {r1, r2}
	float32_t t = ((float32_t) ctrl_time_ms / 1000.0f) - traj->initial_time;
 80044fe:	4ba5      	ldr	r3, [pc, #660]	@ (8004794 <get_target_point+0x2a4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450a:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8004798 <get_target_point+0x2a8>
 800450e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	edd3 7a01 	vldr	s15, [r3, #4]
 8004518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800451c:	edc7 7a04 	vstr	s15, [r7, #16]
	if (t < traj->task_time)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	ed97 7a04 	vldr	s14, [r7, #16]
 800452a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004532:	f140 8114 	bpl.w	800475e <get_target_point+0x26e>
	{
		pos_ref.pData[0] = traj->xpos_coefficient[0] + traj->xpos_coefficient[1] *t + traj->xpos_coefficient[2] *t*t + traj->xpos_coefficient[3] *t*t*t + traj->xpos_coefficient[4] *t*t*t*t + traj->xpos_coefficient[5] *t*t*t*t*t;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8004542:	edd7 7a04 	vldr	s15, [r7, #16]
 8004546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800454a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8004554:	edd7 7a04 	vldr	s15, [r7, #16]
 8004558:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800455c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800456e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004576:	edd7 7a04 	vldr	s15, [r7, #16]
 800457a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800457e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8004590:	edd7 7a04 	vldr	s15, [r7, #16]
 8004594:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004598:	edd7 7a04 	vldr	s15, [r7, #16]
 800459c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80045a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80045ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80045be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045da:	edd7 7a04 	vldr	s15, [r7, #16]
 80045de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e8:	edc3 7a00 	vstr	s15, [r3]
		pos_ref.pData[1] = traj->ypos_coefficient[0] + traj->ypos_coefficient[1] *t + traj->ypos_coefficient[2] *t*t + traj->ypos_coefficient[3] *t*t*t + traj->ypos_coefficient[4] *t*t*t*t + traj->ypos_coefficient[5] *t*t*t*t*t;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 80045f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 800460a:	edd7 7a04 	vldr	s15, [r7, #16]
 800460e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004612:	edd7 7a04 	vldr	s15, [r7, #16]
 8004616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 8004624:	edd7 7a04 	vldr	s15, [r7, #16]
 8004628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800462c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004630:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004634:	edd7 7a04 	vldr	s15, [r7, #16]
 8004638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800463c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 8004646:	edd7 7a04 	vldr	s15, [r7, #16]
 800464a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800464e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004652:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004656:	edd7 7a04 	vldr	s15, [r7, #16]
 800465a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800465e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 8004670:	edd7 7a04 	vldr	s15, [r7, #16]
 8004674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004678:	edd7 7a04 	vldr	s15, [r7, #16]
 800467c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004680:	edd7 7a04 	vldr	s15, [r7, #16]
 8004684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004688:	edd7 7a04 	vldr	s15, [r7, #16]
 800468c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004690:	edd7 7a04 	vldr	s15, [r7, #16]
 8004694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3304      	adds	r3, #4
 800469c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a0:	edc3 7a00 	vstr	s15, [r3]
		pos_ref.pData[2] = traj->zpos_coefficient[0] + traj->zpos_coefficient[1] *t + traj->zpos_coefficient[2] *t*t + traj->zpos_coefficient[3] *t*t*t + traj->zpos_coefficient[4] *t*t*t*t + traj->zpos_coefficient[5] *t*t*t*t*t;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80046b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80046b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 80046c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80046c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80046ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	edd3 6a24 	vldr	s13, [r3, #144]	@ 0x90
 80046dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80046f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	edd3 6a25 	vldr	s13, [r3, #148]	@ 0x94
 80046fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004702:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004706:	edd7 7a04 	vldr	s15, [r7, #16]
 800470a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800470e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004712:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004716:	edd7 7a04 	vldr	s15, [r7, #16]
 800471a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800471e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8004728:	edd7 7a04 	vldr	s15, [r7, #16]
 800472c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004730:	edd7 7a04 	vldr	s15, [r7, #16]
 8004734:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004738:	edd7 7a04 	vldr	s15, [r7, #16]
 800473c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004740:	edd7 7a04 	vldr	s15, [r7, #16]
 8004744:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004748:	edd7 7a04 	vldr	s15, [r7, #16]
 800474c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3308      	adds	r3, #8
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<NUM_TASK_DEG; ++i)
		{
			pos_ref.pData[i] = traj->final_pos[i];
		}
	}
}
 800475c:	e013      	b.n	8004786 <get_target_point+0x296>
		for(int i=0; i<NUM_TASK_DEG; ++i)
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e00d      	b.n	8004780 <get_target_point+0x290>
			pos_ref.pData[i] = traj->final_pos[i];
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	320c      	adds	r2, #12
 8004772:	0092      	lsls	r2, r2, #2
 8004774:	440a      	add	r2, r1
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	601a      	str	r2, [r3, #0]
		for(int i=0; i<NUM_TASK_DEG; ++i)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3301      	adds	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b02      	cmp	r3, #2
 8004784:	ddee      	ble.n	8004764 <get_target_point+0x274>
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	240022b0 	.word	0x240022b0
 8004798:	447a0000 	.word	0x447a0000

0800479c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e060      	b.n	800486a <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	49bd      	ldr	r1, [pc, #756]	@ (8004aa4 <main+0x308>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2098      	movs	r0, #152	@ 0x98
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	440b      	add	r3, r1
 80047b8:	3308      	adds	r3, #8
 80047ba:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 80047bc:	4ab9      	ldr	r2, [pc, #740]	@ (8004aa4 <main+0x308>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2198      	movs	r1, #152	@ 0x98
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	330c      	adds	r3, #12
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 80047ce:	4ab5      	ldr	r2, [pc, #724]	@ (8004aa4 <main+0x308>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2198      	movs	r1, #152	@ 0x98
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	3314      	adds	r3, #20
 80047dc:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80047e0:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 80047e2:	4ab0      	ldr	r2, [pc, #704]	@ (8004aa4 <main+0x308>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2198      	movs	r1, #152	@ 0x98
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	3318      	adds	r3, #24
 80047f0:	4aad      	ldr	r2, [pc, #692]	@ (8004aa8 <main+0x30c>)
 80047f2:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 80047f4:	4aab      	ldr	r2, [pc, #684]	@ (8004aa4 <main+0x308>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2198      	movs	r1, #152	@ 0x98
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	331c      	adds	r3, #28
 8004802:	4aaa      	ldr	r2, [pc, #680]	@ (8004aac <main+0x310>)
 8004804:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 8004806:	2200      	movs	r2, #0
 8004808:	2108      	movs	r1, #8
 800480a:	2008      	movs	r0, #8
 800480c:	f00c fb93 	bl	8010f36 <xQueueGenericCreate>
 8004810:	4602      	mov	r2, r0
 8004812:	49a4      	ldr	r1, [pc, #656]	@ (8004aa4 <main+0x308>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2098      	movs	r0, #152	@ 0x98
 8004818:	fb00 f303 	mul.w	r3, r0, r3
 800481c:	440b      	add	r3, r1
 800481e:	3310      	adds	r3, #16
 8004820:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 8004822:	4aa0      	ldr	r2, [pc, #640]	@ (8004aa4 <main+0x308>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2198      	movs	r1, #152	@ 0x98
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	3310      	adds	r3, #16
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <main+0xa4>
			sta = 3;
 8004836:	4b9e      	ldr	r3, [pc, #632]	@ (8004ab0 <main+0x314>)
 8004838:	2203      	movs	r2, #3
 800483a:	601a      	str	r2, [r3, #0]
			Error_Handler();
 800483c:	f001 fb24 	bl	8005e88 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8004840:	4a98      	ldr	r2, [pc, #608]	@ (8004aa4 <main+0x308>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2198      	movs	r1, #152	@ 0x98
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3394      	adds	r3, #148	@ 0x94
 800484e:	4a99      	ldr	r2, [pc, #612]	@ (8004ab4 <main+0x318>)
 8004850:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 8004852:	4a94      	ldr	r2, [pc, #592]	@ (8004aa4 <main+0x308>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3301      	adds	r3, #1
 8004858:	2198      	movs	r1, #152	@ 0x98
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	4a95      	ldr	r2, [pc, #596]	@ (8004ab8 <main+0x31c>)
 8004862:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3301      	adds	r3, #1
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b02      	cmp	r3, #2
 800486e:	dd9b      	ble.n	80047a8 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8004870:	4b92      	ldr	r3, [pc, #584]	@ (8004abc <main+0x320>)
 8004872:	2201      	movs	r2, #1
 8004874:	2103      	movs	r1, #3
 8004876:	4892      	ldr	r0, [pc, #584]	@ (8004ac0 <main+0x324>)
 8004878:	f00f f8ce 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 800487c:	4b91      	ldr	r3, [pc, #580]	@ (8004ac4 <main+0x328>)
 800487e:	2201      	movs	r2, #1
 8004880:	2103      	movs	r1, #3
 8004882:	4891      	ldr	r0, [pc, #580]	@ (8004ac8 <main+0x32c>)
 8004884:	f00f f8c8 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8004888:	4b90      	ldr	r3, [pc, #576]	@ (8004acc <main+0x330>)
 800488a:	2201      	movs	r2, #1
 800488c:	2103      	movs	r1, #3
 800488e:	4890      	ldr	r0, [pc, #576]	@ (8004ad0 <main+0x334>)
 8004890:	f00f f8c2 	bl	8013a18 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 8004894:	4b83      	ldr	r3, [pc, #524]	@ (8004aa4 <main+0x308>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 800489a:	4b82      	ldr	r3, [pc, #520]	@ (8004aa4 <main+0x308>)
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 80048a0:	4b80      	ldr	r3, [pc, #512]	@ (8004aa4 <main+0x308>)
 80048a2:	4a8c      	ldr	r2, [pc, #560]	@ (8004ad4 <main+0x338>)
 80048a4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 80048a8:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa4 <main+0x308>)
 80048aa:	4a8a      	ldr	r2, [pc, #552]	@ (8004ad4 <main+0x338>)
 80048ac:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80048b0:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa4 <main+0x308>)
 80048b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048b6:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi / 2;
 80048ba:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8004ad8 <main+0x33c>
 80048be:	eeb1 7a67 	vneg.f32	s14, s15
 80048c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80048c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ca:	4b76      	ldr	r3, [pc, #472]	@ (8004aa4 <main+0x308>)
 80048cc:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi / 2;
 80048d0:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8004ad8 <main+0x33c>
 80048d4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80048d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048dc:	4b71      	ldr	r3, [pc, #452]	@ (8004aa4 <main+0x308>)
 80048de:	edc3 7a7c 	vstr	s15, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 80048e2:	4b70      	ldr	r3, [pc, #448]	@ (8004aa4 <main+0x308>)
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 80048ec:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004ad8 <main+0x33c>
 80048f0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004adc <main+0x340>
 80048f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004ae0 <main+0x344>
 80048fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004900:	4b68      	ldr	r3, [pc, #416]	@ (8004aa4 <main+0x308>)
 8004902:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 8004906:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8004ad8 <main+0x33c>
 800490a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004adc <main+0x340>
 800490e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004912:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004ae4 <main+0x348>
 8004916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800491a:	4b62      	ldr	r3, [pc, #392]	@ (8004aa4 <main+0x308>)
 800491c:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8004920:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004ad8 <main+0x33c>
 8004924:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8004adc <main+0x340>
 8004928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004ae8 <main+0x34c>
 8004930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004934:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa4 <main+0x308>)
 8004936:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 800493a:	4b5a      	ldr	r3, [pc, #360]	@ (8004aa4 <main+0x308>)
 800493c:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <main+0x350>)
 800493e:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
	strawberry_robot.l2 = 0.46;
 8004942:	4b58      	ldr	r3, [pc, #352]	@ (8004aa4 <main+0x308>)
 8004944:	4a6a      	ldr	r2, [pc, #424]	@ (8004af0 <main+0x354>)
 8004946:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
	strawberry_robot.l3 = 0.46;
 800494a:	4b56      	ldr	r3, [pc, #344]	@ (8004aa4 <main+0x308>)
 800494c:	4a68      	ldr	r2, [pc, #416]	@ (8004af0 <main+0x354>)
 800494e:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334

	// link mass setting
	strawberry_robot.m1 = 3.82406;
 8004952:	4b54      	ldr	r3, [pc, #336]	@ (8004aa4 <main+0x308>)
 8004954:	4a67      	ldr	r2, [pc, #412]	@ (8004af4 <main+0x358>)
 8004956:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	strawberry_robot.m2 = 0.17634;
 800495a:	4b52      	ldr	r3, [pc, #328]	@ (8004aa4 <main+0x308>)
 800495c:	4a66      	ldr	r2, [pc, #408]	@ (8004af8 <main+0x35c>)
 800495e:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	strawberry_robot.m3 = 1.46067;
 8004962:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <main+0x308>)
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <main+0x360>)
 8004966:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

	// link CoM position setting
	strawberry_robot.d2 = 0.23;
 800496a:	4b4e      	ldr	r3, [pc, #312]	@ (8004aa4 <main+0x308>)
 800496c:	4a64      	ldr	r2, [pc, #400]	@ (8004b00 <main+0x364>)
 800496e:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	strawberry_robot.d3 = 0.18432;
 8004972:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa4 <main+0x308>)
 8004974:	4a63      	ldr	r2, [pc, #396]	@ (8004b04 <main+0x368>)
 8004976:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348

	// link inertia setting
	strawberry_robot.J1 = 0.02450771104;
 800497a:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa4 <main+0x308>)
 800497c:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <main+0x36c>)
 800497e:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
	strawberry_robot.J2 = 0.00811740221;
 8004982:	4b48      	ldr	r3, [pc, #288]	@ (8004aa4 <main+0x308>)
 8004984:	4a61      	ldr	r2, [pc, #388]	@ (8004b0c <main+0x370>)
 8004986:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
	strawberry_robot.J3 = 0.11079467270;
 800498a:	4b46      	ldr	r3, [pc, #280]	@ (8004aa4 <main+0x308>)
 800498c:	4a60      	ldr	r2, [pc, #384]	@ (8004b10 <main+0x374>)
 800498e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8004992:	4b60      	ldr	r3, [pc, #384]	@ (8004b14 <main+0x378>)
 8004994:	2201      	movs	r2, #1
 8004996:	2103      	movs	r1, #3
 8004998:	485f      	ldr	r0, [pc, #380]	@ (8004b18 <main+0x37c>)
 800499a:	f00f f83d 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 800499e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b1c <main+0x380>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	2103      	movs	r1, #3
 80049a4:	485e      	ldr	r0, [pc, #376]	@ (8004b20 <main+0x384>)
 80049a6:	f00f f837 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 80049aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <main+0x388>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	2103      	movs	r1, #3
 80049b0:	485d      	ldr	r0, [pc, #372]	@ (8004b28 <main+0x38c>)
 80049b2:	f00f f831 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80049b6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b2c <main+0x390>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	2103      	movs	r1, #3
 80049bc:	485c      	ldr	r0, [pc, #368]	@ (8004b30 <main+0x394>)
 80049be:	f00f f82b 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 80049c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b34 <main+0x398>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	2103      	movs	r1, #3
 80049c8:	485b      	ldr	r0, [pc, #364]	@ (8004b38 <main+0x39c>)
 80049ca:	f00f f825 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 80049ce:	4b5b      	ldr	r3, [pc, #364]	@ (8004b3c <main+0x3a0>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	2103      	movs	r1, #3
 80049d4:	485a      	ldr	r0, [pc, #360]	@ (8004b40 <main+0x3a4>)
 80049d6:	f00f f81f 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 80049da:	4b5a      	ldr	r3, [pc, #360]	@ (8004b44 <main+0x3a8>)
 80049dc:	2201      	movs	r2, #1
 80049de:	2103      	movs	r1, #3
 80049e0:	4859      	ldr	r0, [pc, #356]	@ (8004b48 <main+0x3ac>)
 80049e2:	f00f f819 	bl	8013a18 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 80049e6:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <main+0x3b0>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	2103      	movs	r1, #3
 80049ec:	4858      	ldr	r0, [pc, #352]	@ (8004b50 <main+0x3b4>)
 80049ee:	f00f f813 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 80049f2:	4b58      	ldr	r3, [pc, #352]	@ (8004b54 <main+0x3b8>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	2103      	movs	r1, #3
 80049f8:	4857      	ldr	r0, [pc, #348]	@ (8004b58 <main+0x3bc>)
 80049fa:	f00f f80d 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 80049fe:	4b57      	ldr	r3, [pc, #348]	@ (8004b5c <main+0x3c0>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	2103      	movs	r1, #3
 8004a04:	4856      	ldr	r0, [pc, #344]	@ (8004b60 <main+0x3c4>)
 8004a06:	f00f f807 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 8004a0a:	4b56      	ldr	r3, [pc, #344]	@ (8004b64 <main+0x3c8>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2103      	movs	r1, #3
 8004a10:	4855      	ldr	r0, [pc, #340]	@ (8004b68 <main+0x3cc>)
 8004a12:	f00f f801 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8004a16:	4b55      	ldr	r3, [pc, #340]	@ (8004b6c <main+0x3d0>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	4854      	ldr	r0, [pc, #336]	@ (8004b70 <main+0x3d4>)
 8004a1e:	f00e fffb 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8004a22:	4b54      	ldr	r3, [pc, #336]	@ (8004b74 <main+0x3d8>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	2103      	movs	r1, #3
 8004a28:	4853      	ldr	r0, [pc, #332]	@ (8004b78 <main+0x3dc>)
 8004a2a:	f00e fff5 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.accXYZ, NUM_TASK_DEG, 1, strawberry_robot.accXYZ_buffer);
 8004a2e:	4b53      	ldr	r3, [pc, #332]	@ (8004b7c <main+0x3e0>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	2103      	movs	r1, #3
 8004a34:	4852      	ldr	r0, [pc, #328]	@ (8004b80 <main+0x3e4>)
 8004a36:	f00e ffef 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.accXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.accXYZ_old_buffer);
 8004a3a:	4b52      	ldr	r3, [pc, #328]	@ (8004b84 <main+0x3e8>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2103      	movs	r1, #3
 8004a40:	4851      	ldr	r0, [pc, #324]	@ (8004b88 <main+0x3ec>)
 8004a42:	f00e ffe9 	bl	8013a18 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 8004a46:	4b51      	ldr	r3, [pc, #324]	@ (8004b8c <main+0x3f0>)
 8004a48:	2203      	movs	r2, #3
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	4850      	ldr	r0, [pc, #320]	@ (8004b90 <main+0x3f4>)
 8004a4e:	f00e ffe3 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 8004a52:	4b50      	ldr	r3, [pc, #320]	@ (8004b94 <main+0x3f8>)
 8004a54:	2203      	movs	r2, #3
 8004a56:	2103      	movs	r1, #3
 8004a58:	484f      	ldr	r0, [pc, #316]	@ (8004b98 <main+0x3fc>)
 8004a5a:	f00e ffdd 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8004a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b9c <main+0x400>)
 8004a60:	2203      	movs	r2, #3
 8004a62:	2103      	movs	r1, #3
 8004a64:	484e      	ldr	r0, [pc, #312]	@ (8004ba0 <main+0x404>)
 8004a66:	f00e ffd7 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8004a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba4 <main+0x408>)
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	2103      	movs	r1, #3
 8004a70:	484d      	ldr	r0, [pc, #308]	@ (8004ba8 <main+0x40c>)
 8004a72:	f00e ffd1 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 8004a76:	4b4d      	ldr	r3, [pc, #308]	@ (8004bac <main+0x410>)
 8004a78:	2203      	movs	r2, #3
 8004a7a:	2103      	movs	r1, #3
 8004a7c:	484c      	ldr	r0, [pc, #304]	@ (8004bb0 <main+0x414>)
 8004a7e:	f00e ffcb 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 8004a82:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb4 <main+0x418>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	2103      	movs	r1, #3
 8004a88:	484b      	ldr	r0, [pc, #300]	@ (8004bb8 <main+0x41c>)
 8004a8a:	f00e ffc5 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 8004a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bbc <main+0x420>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	2103      	movs	r1, #3
 8004a94:	484a      	ldr	r0, [pc, #296]	@ (8004bc0 <main+0x424>)
 8004a96:	f00e ffbf 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc4 <main+0x428>)
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	e092      	b.n	8004bc8 <main+0x42c>
 8004aa2:	bf00      	nop
 8004aa4:	2400231c 	.word	0x2400231c
 8004aa8:	41200000 	.word	0x41200000
 8004aac:	3dfbe76d 	.word	0x3dfbe76d
 8004ab0:	24002a4c 	.word	0x24002a4c
 8004ab4:	40e66666 	.word	0x40e66666
 8004ab8:	c0e66666 	.word	0xc0e66666
 8004abc:	24000000 	.word	0x24000000
 8004ac0:	240022d4 	.word	0x240022d4
 8004ac4:	2400000c 	.word	0x2400000c
 8004ac8:	240022dc 	.word	0x240022dc
 8004acc:	24000028 	.word	0x24000028
 8004ad0:	240022e4 	.word	0x240022e4
 8004ad4:	bf800000 	.word	0xbf800000
 8004ad8:	40490fd8 	.word	0x40490fd8
 8004adc:	43340000 	.word	0x43340000
 8004ae0:	42aa0000 	.word	0x42aa0000
 8004ae4:	c3200000 	.word	0xc3200000
 8004ae8:	c2200000 	.word	0xc2200000
 8004aec:	3e343958 	.word	0x3e343958
 8004af0:	3eeb851f 	.word	0x3eeb851f
 8004af4:	4074bd66 	.word	0x4074bd66
 8004af8:	3e349279 	.word	0x3e349279
 8004afc:	3fbaf73c 	.word	0x3fbaf73c
 8004b00:	3e6b851f 	.word	0x3e6b851f
 8004b04:	3e3cbe62 	.word	0x3e3cbe62
 8004b08:	3cc8c465 	.word	0x3cc8c465
 8004b0c:	3c04feda 	.word	0x3c04feda
 8004b10:	3de2e851 	.word	0x3de2e851
 8004b14:	24002500 	.word	0x24002500
 8004b18:	240024f8 	.word	0x240024f8
 8004b1c:	2400252c 	.word	0x2400252c
 8004b20:	24002524 	.word	0x24002524
 8004b24:	24002540 	.word	0x24002540
 8004b28:	24002538 	.word	0x24002538
 8004b2c:	24002554 	.word	0x24002554
 8004b30:	2400254c 	.word	0x2400254c
 8004b34:	24002568 	.word	0x24002568
 8004b38:	24002560 	.word	0x24002560
 8004b3c:	2400257c 	.word	0x2400257c
 8004b40:	24002574 	.word	0x24002574
 8004b44:	24002590 	.word	0x24002590
 8004b48:	24002588 	.word	0x24002588
 8004b4c:	240025a4 	.word	0x240025a4
 8004b50:	2400259c 	.word	0x2400259c
 8004b54:	240025b8 	.word	0x240025b8
 8004b58:	240025b0 	.word	0x240025b0
 8004b5c:	240025cc 	.word	0x240025cc
 8004b60:	240025c4 	.word	0x240025c4
 8004b64:	240025e0 	.word	0x240025e0
 8004b68:	240025d8 	.word	0x240025d8
 8004b6c:	240025f4 	.word	0x240025f4
 8004b70:	240025ec 	.word	0x240025ec
 8004b74:	24002608 	.word	0x24002608
 8004b78:	24002600 	.word	0x24002600
 8004b7c:	2400261c 	.word	0x2400261c
 8004b80:	24002614 	.word	0x24002614
 8004b84:	24002630 	.word	0x24002630
 8004b88:	24002628 	.word	0x24002628
 8004b8c:	24002670 	.word	0x24002670
 8004b90:	24002668 	.word	0x24002668
 8004b94:	2400269c 	.word	0x2400269c
 8004b98:	24002694 	.word	0x24002694
 8004b9c:	240026c8 	.word	0x240026c8
 8004ba0:	240026c0 	.word	0x240026c0
 8004ba4:	240026f4 	.word	0x240026f4
 8004ba8:	240026ec 	.word	0x240026ec
 8004bac:	24002720 	.word	0x24002720
 8004bb0:	24002718 	.word	0x24002718
 8004bb4:	2400274c 	.word	0x2400274c
 8004bb8:	24002744 	.word	0x24002744
 8004bbc:	24002760 	.word	0x24002760
 8004bc0:	24002758 	.word	0x24002758
 8004bc4:	24002774 	.word	0x24002774
 8004bc8:	485c      	ldr	r0, [pc, #368]	@ (8004d3c <main+0x5a0>)
 8004bca:	f00e ff25 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8004bce:	4b5c      	ldr	r3, [pc, #368]	@ (8004d40 <main+0x5a4>)
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	485b      	ldr	r0, [pc, #364]	@ (8004d44 <main+0x5a8>)
 8004bd6:	f00e ff1f 	bl	8013a18 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 8004bda:	4b5b      	ldr	r3, [pc, #364]	@ (8004d48 <main+0x5ac>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2103      	movs	r1, #3
 8004be0:	485a      	ldr	r0, [pc, #360]	@ (8004d4c <main+0x5b0>)
 8004be2:	f00e ff19 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 8004be6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d50 <main+0x5b4>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	2103      	movs	r1, #3
 8004bec:	4859      	ldr	r0, [pc, #356]	@ (8004d54 <main+0x5b8>)
 8004bee:	f00e ff13 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 8004bf2:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <main+0x5bc>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	4858      	ldr	r0, [pc, #352]	@ (8004d5c <main+0x5c0>)
 8004bfa:	f00e ff0d 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8004bfe:	4b58      	ldr	r3, [pc, #352]	@ (8004d60 <main+0x5c4>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	2103      	movs	r1, #3
 8004c04:	4857      	ldr	r0, [pc, #348]	@ (8004d64 <main+0x5c8>)
 8004c06:	f00e ff07 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8004c0a:	4b57      	ldr	r3, [pc, #348]	@ (8004d68 <main+0x5cc>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	2103      	movs	r1, #3
 8004c10:	4856      	ldr	r0, [pc, #344]	@ (8004d6c <main+0x5d0>)
 8004c12:	f00e ff01 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8004c16:	4b56      	ldr	r3, [pc, #344]	@ (8004d70 <main+0x5d4>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	4855      	ldr	r0, [pc, #340]	@ (8004d74 <main+0x5d8>)
 8004c1e:	f00e fefb 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 8004c22:	4b55      	ldr	r3, [pc, #340]	@ (8004d78 <main+0x5dc>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	2103      	movs	r1, #3
 8004c28:	4854      	ldr	r0, [pc, #336]	@ (8004d7c <main+0x5e0>)
 8004c2a:	f00e fef5 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8004c2e:	4b54      	ldr	r3, [pc, #336]	@ (8004d80 <main+0x5e4>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	2103      	movs	r1, #3
 8004c34:	4853      	ldr	r0, [pc, #332]	@ (8004d84 <main+0x5e8>)
 8004c36:	f00e feef 	bl	8013a18 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8004c3a:	4b53      	ldr	r3, [pc, #332]	@ (8004d88 <main+0x5ec>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	2103      	movs	r1, #3
 8004c40:	4852      	ldr	r0, [pc, #328]	@ (8004d8c <main+0x5f0>)
 8004c42:	f00e fee9 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 8004c46:	4b52      	ldr	r3, [pc, #328]	@ (8004d90 <main+0x5f4>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	4851      	ldr	r0, [pc, #324]	@ (8004d94 <main+0x5f8>)
 8004c4e:	f00e fee3 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 8004c52:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <main+0x5fc>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	2103      	movs	r1, #3
 8004c58:	4850      	ldr	r0, [pc, #320]	@ (8004d9c <main+0x600>)
 8004c5a:	f00e fedd 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8004c5e:	4b50      	ldr	r3, [pc, #320]	@ (8004da0 <main+0x604>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	2103      	movs	r1, #3
 8004c64:	484f      	ldr	r0, [pc, #316]	@ (8004da4 <main+0x608>)
 8004c66:	f00e fed7 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8004c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004da8 <main+0x60c>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2103      	movs	r1, #3
 8004c70:	484e      	ldr	r0, [pc, #312]	@ (8004dac <main+0x610>)
 8004c72:	f00e fed1 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 8004c76:	4b4e      	ldr	r3, [pc, #312]	@ (8004db0 <main+0x614>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	484d      	ldr	r0, [pc, #308]	@ (8004db4 <main+0x618>)
 8004c7e:	f00e fecb 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 8004c82:	4b4d      	ldr	r3, [pc, #308]	@ (8004db8 <main+0x61c>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	2103      	movs	r1, #3
 8004c88:	484c      	ldr	r0, [pc, #304]	@ (8004dbc <main+0x620>)
 8004c8a:	f00e fec5 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 8004c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc0 <main+0x624>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	2103      	movs	r1, #3
 8004c94:	484b      	ldr	r0, [pc, #300]	@ (8004dc4 <main+0x628>)
 8004c96:	f00e febf 	bl	8013a18 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc8 <main+0x62c>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	484a      	ldr	r0, [pc, #296]	@ (8004dcc <main+0x630>)
 8004ca2:	f00e feb9 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd0 <main+0x634>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	2103      	movs	r1, #3
 8004cac:	4849      	ldr	r0, [pc, #292]	@ (8004dd4 <main+0x638>)
 8004cae:	f00e feb3 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 8004cb2:	4b49      	ldr	r3, [pc, #292]	@ (8004dd8 <main+0x63c>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	2103      	movs	r1, #3
 8004cb8:	4848      	ldr	r0, [pc, #288]	@ (8004ddc <main+0x640>)
 8004cba:	f00e fead 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 8004cbe:	4b48      	ldr	r3, [pc, #288]	@ (8004de0 <main+0x644>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	4847      	ldr	r0, [pc, #284]	@ (8004de4 <main+0x648>)
 8004cc6:	f00e fea7 	bl	8013a18 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8004cca:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <main+0x64c>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2103      	movs	r1, #3
 8004cd0:	4846      	ldr	r0, [pc, #280]	@ (8004dec <main+0x650>)
 8004cd2:	f00e fea1 	bl	8013a18 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004cd6:	f001 f899 	bl	8005e0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cda:	f001 fe73 	bl	80069c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cde:	f000 f893 	bl	8004e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ce2:	f000 fa31 	bl	8005148 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ce6:	f000 f9ff 	bl	80050e8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004cea:	f000 f907 	bl	8004efc <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8004cee:	f000 f9ad 	bl	800504c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  uart3_rx_start_normal();
 8004cf2:	f7fc f851 	bl	8000d98 <uart3_rx_start_normal>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004cf6:	f00b fe73 	bl	80109e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8004cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8004df0 <main+0x654>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	483d      	ldr	r0, [pc, #244]	@ (8004df4 <main+0x658>)
 8004d00:	f00b feb8 	bl	8010a74 <osThreadNew>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a3c      	ldr	r2, [pc, #240]	@ (8004df8 <main+0x65c>)
 8004d08:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 8004d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8004dfc <main+0x660>)
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	483c      	ldr	r0, [pc, #240]	@ (8004e00 <main+0x664>)
 8004d10:	f00b feb0 	bl	8010a74 <osThreadNew>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a3b      	ldr	r2, [pc, #236]	@ (8004e04 <main+0x668>)
 8004d18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f001 fd50 	bl	80067c0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004d20:	2001      	movs	r0, #1
 8004d22:	f001 fd4d 	bl	80067c0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004d26:	2002      	movs	r0, #2
 8004d28:	f001 fd4a 	bl	80067c0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f001 fdbc 	bl	80068ac <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8004d34:	f00b fe78 	bl	8010a28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <main+0x59c>
 8004d3c:	2400276c 	.word	0x2400276c
 8004d40:	240027a0 	.word	0x240027a0
 8004d44:	24002798 	.word	0x24002798
 8004d48:	24002808 	.word	0x24002808
 8004d4c:	24002800 	.word	0x24002800
 8004d50:	2400281c 	.word	0x2400281c
 8004d54:	24002814 	.word	0x24002814
 8004d58:	24002830 	.word	0x24002830
 8004d5c:	24002828 	.word	0x24002828
 8004d60:	24002844 	.word	0x24002844
 8004d64:	2400283c 	.word	0x2400283c
 8004d68:	24002858 	.word	0x24002858
 8004d6c:	24002850 	.word	0x24002850
 8004d70:	2400286c 	.word	0x2400286c
 8004d74:	24002864 	.word	0x24002864
 8004d78:	24002880 	.word	0x24002880
 8004d7c:	24002878 	.word	0x24002878
 8004d80:	24002894 	.word	0x24002894
 8004d84:	2400288c 	.word	0x2400288c
 8004d88:	240028b4 	.word	0x240028b4
 8004d8c:	240028ac 	.word	0x240028ac
 8004d90:	240028c8 	.word	0x240028c8
 8004d94:	240028c0 	.word	0x240028c0
 8004d98:	240028dc 	.word	0x240028dc
 8004d9c:	240028d4 	.word	0x240028d4
 8004da0:	240028f0 	.word	0x240028f0
 8004da4:	240028e8 	.word	0x240028e8
 8004da8:	24002904 	.word	0x24002904
 8004dac:	240028fc 	.word	0x240028fc
 8004db0:	24002918 	.word	0x24002918
 8004db4:	24002910 	.word	0x24002910
 8004db8:	2400292c 	.word	0x2400292c
 8004dbc:	24002924 	.word	0x24002924
 8004dc0:	24002940 	.word	0x24002940
 8004dc4:	24002938 	.word	0x24002938
 8004dc8:	24002954 	.word	0x24002954
 8004dcc:	2400294c 	.word	0x2400294c
 8004dd0:	24002968 	.word	0x24002968
 8004dd4:	24002960 	.word	0x24002960
 8004dd8:	2400297c 	.word	0x2400297c
 8004ddc:	24002974 	.word	0x24002974
 8004de0:	24002990 	.word	0x24002990
 8004de4:	24002988 	.word	0x24002988
 8004de8:	240029a4 	.word	0x240029a4
 8004dec:	2400299c 	.word	0x2400299c
 8004df0:	08017ed4 	.word	0x08017ed4
 8004df4:	08005295 	.word	0x08005295
 8004df8:	24000498 	.word	0x24000498
 8004dfc:	08017ef8 	.word	0x08017ef8
 8004e00:	08005add 	.word	0x08005add
 8004e04:	2400049c 	.word	0x2400049c

08004e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b09c      	sub	sp, #112	@ 0x70
 8004e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e12:	224c      	movs	r2, #76	@ 0x4c
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f010 f953 	bl	80150c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	2220      	movs	r2, #32
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f010 f94d 	bl	80150c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004e28:	2002      	movs	r0, #2
 8004e2a:	f006 fb5f 	bl	800b4ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <SystemClock_Config+0xec>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef4 <SystemClock_Config+0xec>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef4 <SystemClock_Config+0xec>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <SystemClock_Config+0xf0>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <SystemClock_Config+0xf0>)
 8004e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e52:	6193      	str	r3, [r2, #24]
 8004e54:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <SystemClock_Config+0xf0>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004e60:	bf00      	nop
 8004e62:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <SystemClock_Config+0xf0>)
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6e:	d1f8      	bne.n	8004e62 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004e86:	2364      	movs	r3, #100	@ 0x64
 8004e88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8004e8e:	2310      	movs	r3, #16
 8004e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e92:	2302      	movs	r3, #2
 8004e94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004e96:	230c      	movs	r3, #12
 8004e98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f006 fb5a 	bl	800b560 <HAL_RCC_OscConfig>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004eb2:	f000 ffe9 	bl	8005e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eb6:	233f      	movs	r3, #63	@ 0x3f
 8004eb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004ec6:	2340      	movs	r3, #64	@ 0x40
 8004ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004eca:	2340      	movs	r3, #64	@ 0x40
 8004ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ed2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004ed4:	2340      	movs	r3, #64	@ 0x40
 8004ed6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004ed8:	1d3b      	adds	r3, r7, #4
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f006 ff99 	bl	800be14 <HAL_RCC_ClockConfig>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004ee8:	f000 ffce 	bl	8005e88 <Error_Handler>
  }
}
 8004eec:	bf00      	nop
 8004eee:	3770      	adds	r7, #112	@ 0x70
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	58000400 	.word	0x58000400
 8004ef8:	58024800 	.word	0x58024800

08004efc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004f02:	4b4e      	ldr	r3, [pc, #312]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f04:	4a4e      	ldr	r2, [pc, #312]	@ (8005040 <MX_FDCAN1_Init+0x144>)
 8004f06:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004f08:	4b4c      	ldr	r3, [pc, #304]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8004f14:	4b49      	ldr	r3, [pc, #292]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004f1a:	4b48      	ldr	r3, [pc, #288]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004f20:	4b46      	ldr	r3, [pc, #280]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004f26:	4b45      	ldr	r3, [pc, #276]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8004f2c:	4b43      	ldr	r3, [pc, #268]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f2e:	2208      	movs	r2, #8
 8004f30:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8004f32:	4b42      	ldr	r3, [pc, #264]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f34:	221f      	movs	r2, #31
 8004f36:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8004f38:	4b40      	ldr	r3, [pc, #256]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8004f44:	4b3d      	ldr	r3, [pc, #244]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f46:	2204      	movs	r2, #4
 8004f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8004f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8004f50:	4b3a      	ldr	r3, [pc, #232]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f52:	2204      	movs	r2, #4
 8004f54:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8004f56:	4b39      	ldr	r3, [pc, #228]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8004f5c:	4b37      	ldr	r3, [pc, #220]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004f62:	4b36      	ldr	r3, [pc, #216]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8004f68:	4b34      	ldr	r3, [pc, #208]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f6a:	2240      	movs	r2, #64	@ 0x40
 8004f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004f6e:	4b33      	ldr	r3, [pc, #204]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f70:	2204      	movs	r2, #4
 8004f72:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8004f74:	4b31      	ldr	r3, [pc, #196]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004f7a:	4b30      	ldr	r3, [pc, #192]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8004f80:	4b2e      	ldr	r3, [pc, #184]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f82:	2204      	movs	r2, #4
 8004f84:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004f86:	4b2d      	ldr	r3, [pc, #180]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f88:	2204      	movs	r2, #4
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f8e:	2210      	movs	r2, #16
 8004f90:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8004f92:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f94:	2210      	movs	r2, #16
 8004f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8004f98:	4b28      	ldr	r3, [pc, #160]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004f9e:	4b27      	ldr	r3, [pc, #156]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004fa4:	4b25      	ldr	r3, [pc, #148]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004faa:	4824      	ldr	r0, [pc, #144]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004fac:	f004 ff50 	bl	8009e50 <HAL_FDCAN_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8004fb6:	f000 ff67 	bl	8005e88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	481f      	ldr	r0, [pc, #124]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004fc0:	f005 fb28 	bl	800a614 <HAL_FDCAN_ActivateNotification>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8004fca:	4b1e      	ldr	r3, [pc, #120]	@ (8005044 <MX_FDCAN1_Init+0x148>)
 8004fcc:	2203      	movs	r2, #3
 8004fce:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004fd0:	f000 ff5a 	bl	8005e88 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8004fd4:	4819      	ldr	r0, [pc, #100]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004fd6:	f005 f919 	bl	800a20c <HAL_FDCAN_Start>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8004fe0:	4b18      	ldr	r3, [pc, #96]	@ (8005044 <MX_FDCAN1_Init+0x148>)
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004fe6:	f000 ff4f 	bl	8005e88 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	e01d      	b.n	800502c <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004ff0:	4812      	ldr	r0, [pc, #72]	@ (800503c <MX_FDCAN1_Init+0x140>)
 8004ff2:	f005 fafd 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d014      	beq.n	8005026 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004ffc:	4a12      	ldr	r2, [pc, #72]	@ (8005048 <MX_FDCAN1_Init+0x14c>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2198      	movs	r1, #152	@ 0x98
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	3308      	adds	r3, #8
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc fcbe 	bl	8001990 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8005014:	4a0c      	ldr	r2, [pc, #48]	@ (8005048 <MX_FDCAN1_Init+0x14c>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2198      	movs	r1, #152	@ 0x98
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	330c      	adds	r3, #12
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3301      	adds	r3, #1
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	ddde      	ble.n	8004ff0 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	24000274 	.word	0x24000274
 8005040:	4000a000 	.word	0x4000a000
 8005044:	24002a4c 	.word	0x24002a4c
 8005048:	2400231c 	.word	0x2400231c

0800504c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005050:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005052:	4a24      	ldr	r2, [pc, #144]	@ (80050e4 <MX_USART3_UART_Init+0x98>)
 8005054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8005056:	4b22      	ldr	r3, [pc, #136]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005058:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800505c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005064:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005066:	2200      	movs	r2, #0
 8005068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800506a:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005072:	220c      	movs	r2, #12
 8005074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800507c:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 800507e:	2200      	movs	r2, #0
 8005080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005084:	2200      	movs	r2, #0
 8005086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005088:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 800508a:	2200      	movs	r2, #0
 800508c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005090:	2200      	movs	r2, #0
 8005092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005094:	4812      	ldr	r0, [pc, #72]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 8005096:	f009 fb7f 	bl	800e798 <HAL_UART_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80050a0:	f000 fef2 	bl	8005e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 80050a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80050a8:	480d      	ldr	r0, [pc, #52]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 80050aa:	f00b fb37 	bl	801071c <HAL_UARTEx_SetTxFifoThreshold>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80050b4:	f000 fee8 	bl	8005e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 80050b8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80050bc:	4808      	ldr	r0, [pc, #32]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 80050be:	f00b fb6b 	bl	8010798 <HAL_UARTEx_SetRxFifoThreshold>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 80050c8:	f000 fede 	bl	8005e88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80050cc:	4804      	ldr	r0, [pc, #16]	@ (80050e0 <MX_USART3_UART_Init+0x94>)
 80050ce:	f00b faea 	bl	80106a6 <HAL_UARTEx_EnableFifoMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 80050d8:	f000 fed6 	bl	8005e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	24000314 	.word	0x24000314
 80050e4:	40004800 	.word	0x40004800

080050e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050ee:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <MX_DMA_Init+0x5c>)
 80050f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050f4:	4a13      	ldr	r2, [pc, #76]	@ (8005144 <MX_DMA_Init+0x5c>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050fe:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <MX_DMA_Init+0x5c>)
 8005100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 8, 0);
 800510c:	2200      	movs	r2, #0
 800510e:	2108      	movs	r1, #8
 8005110:	200b      	movs	r0, #11
 8005112:	f001 fd9b 	bl	8006c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005116:	200b      	movs	r0, #11
 8005118:	f001 fdb2 	bl	8006c80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 8, 0);
 800511c:	2200      	movs	r2, #0
 800511e:	2108      	movs	r1, #8
 8005120:	200c      	movs	r0, #12
 8005122:	f001 fd93 	bl	8006c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005126:	200c      	movs	r0, #12
 8005128:	f001 fdaa 	bl	8006c80 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
 800512c:	2200      	movs	r2, #0
 800512e:	2105      	movs	r1, #5
 8005130:	2066      	movs	r0, #102	@ 0x66
 8005132:	f001 fd8b 	bl	8006c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8005136:	2066      	movs	r0, #102	@ 0x66
 8005138:	f001 fda2 	bl	8006c80 <HAL_NVIC_EnableIRQ>

}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	58024400 	.word	0x58024400

08005148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08c      	sub	sp, #48	@ 0x30
 800514c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800514e:	f107 031c 	add.w	r3, r7, #28
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	609a      	str	r2, [r3, #8]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800515e:	4b49      	ldr	r3, [pc, #292]	@ (8005284 <MX_GPIO_Init+0x13c>)
 8005160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005164:	4a47      	ldr	r2, [pc, #284]	@ (8005284 <MX_GPIO_Init+0x13c>)
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800516e:	4b45      	ldr	r3, [pc, #276]	@ (8005284 <MX_GPIO_Init+0x13c>)
 8005170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800517c:	4b41      	ldr	r3, [pc, #260]	@ (8005284 <MX_GPIO_Init+0x13c>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005182:	4a40      	ldr	r2, [pc, #256]	@ (8005284 <MX_GPIO_Init+0x13c>)
 8005184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800518c:	4b3d      	ldr	r3, [pc, #244]	@ (8005284 <MX_GPIO_Init+0x13c>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800519a:	4b3a      	ldr	r3, [pc, #232]	@ (8005284 <MX_GPIO_Init+0x13c>)
 800519c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a0:	4a38      	ldr	r2, [pc, #224]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051aa:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b8:	4b32      	ldr	r3, [pc, #200]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051be:	4a31      	ldr	r2, [pc, #196]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051dc:	4a29      	ldr	r2, [pc, #164]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051e6:	4b27      	ldr	r3, [pc, #156]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051f4:	4b23      	ldr	r3, [pc, #140]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <MX_GPIO_Init+0x13c>)
 80051fc:	f043 0310 	orr.w	r3, r3, #16
 8005200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005204:	4b1f      	ldr	r3, [pc, #124]	@ (8005284 <MX_GPIO_Init+0x13c>)
 8005206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8005212:	2200      	movs	r2, #0
 8005214:	f244 0101 	movw	r1, #16385	@ 0x4001
 8005218:	481b      	ldr	r0, [pc, #108]	@ (8005288 <MX_GPIO_Init+0x140>)
 800521a:	f006 f933 	bl	800b484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800521e:	2200      	movs	r2, #0
 8005220:	2102      	movs	r1, #2
 8005222:	481a      	ldr	r0, [pc, #104]	@ (800528c <MX_GPIO_Init+0x144>)
 8005224:	f006 f92e 	bl	800b484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800522c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005236:	f107 031c 	add.w	r3, r7, #28
 800523a:	4619      	mov	r1, r3
 800523c:	4814      	ldr	r0, [pc, #80]	@ (8005290 <MX_GPIO_Init+0x148>)
 800523e:	f005 ff71 	bl	800b124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8005242:	f244 0301 	movw	r3, #16385	@ 0x4001
 8005246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005248:	2301      	movs	r3, #1
 800524a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2300      	movs	r3, #0
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005254:	f107 031c 	add.w	r3, r7, #28
 8005258:	4619      	mov	r1, r3
 800525a:	480b      	ldr	r0, [pc, #44]	@ (8005288 <MX_GPIO_Init+0x140>)
 800525c:	f005 ff62 	bl	800b124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005260:	2302      	movs	r3, #2
 8005262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005264:	2301      	movs	r3, #1
 8005266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005270:	f107 031c 	add.w	r3, r7, #28
 8005274:	4619      	mov	r1, r3
 8005276:	4805      	ldr	r0, [pc, #20]	@ (800528c <MX_GPIO_Init+0x144>)
 8005278:	f005 ff54 	bl	800b124 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800527c:	bf00      	nop
 800527e:	3730      	adds	r7, #48	@ 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	58024400 	.word	0x58024400
 8005288:	58020400 	.word	0x58020400
 800528c:	58021000 	.word	0x58021000
 8005290:	58020800 	.word	0x58020800

08005294 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b090      	sub	sp, #64	@ 0x40
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 800529c:	f00c fdf4 	bl	8011e88 <xTaskGetTickCount>
 80052a0:	4603      	mov	r3, r0
 80052a2:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 80052a4:	2301      	movs	r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 80052a8:	f107 0314 	add.w	r3, r7, #20
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f00c fc4e 	bl	8011b50 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 80052b4:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <ControlTask+0x238>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a85      	ldr	r2, [pc, #532]	@ (80054d0 <ControlTask+0x23c>)
 80052ba:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	005a      	lsls	r2, r3, #1
 80052c0:	4b82      	ldr	r3, [pc, #520]	@ (80054cc <ControlTask+0x238>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	4a81      	ldr	r2, [pc, #516]	@ (80054cc <ControlTask+0x238>)
 80052c8:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 80052ca:	2101      	movs	r1, #1
 80052cc:	4881      	ldr	r0, [pc, #516]	@ (80054d4 <ControlTask+0x240>)
 80052ce:	f006 f8f2 	bl	800b4b6 <HAL_GPIO_TogglePin>

		// 6) 여기서 PC로부터 들어온 task space PID Gain값과 Target Trajectory를 반영
		uart3_poll_and_process_lines();
 80052d2:	f7fc f9a5 	bl	8001620 <uart3_poll_and_process_lines>

		// 7) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 80052d6:	4b80      	ldr	r3, [pc, #512]	@ (80054d8 <ControlTask+0x244>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	f040 80ed 	bne.w	80054ba <ControlTask+0x226>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 80052e0:	4b7d      	ldr	r3, [pc, #500]	@ (80054d8 <ControlTask+0x244>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d152      	bne.n	800538e <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 80052e8:	2300      	movs	r3, #0
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ec:	e048      	b.n	8005380 <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 80052ee:	2180      	movs	r1, #128	@ 0x80
 80052f0:	4878      	ldr	r0, [pc, #480]	@ (80054d4 <ControlTask+0x240>)
 80052f2:	f006 f8e0 	bl	800b4b6 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 80052f6:	4a78      	ldr	r2, [pc, #480]	@ (80054d8 <ControlTask+0x244>)
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	2198      	movs	r1, #152	@ 0x98
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	338c      	adds	r3, #140	@ 0x8c
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800530a:	4874      	ldr	r0, [pc, #464]	@ (80054dc <ControlTask+0x248>)
 800530c:	f005 f970 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d016      	beq.n	8005344 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8005316:	4a70      	ldr	r2, [pc, #448]	@ (80054d8 <ControlTask+0x244>)
 8005318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531a:	2198      	movs	r1, #152	@ 0x98
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	3308      	adds	r3, #8
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29a      	uxth	r2, r3
 8005328:	496b      	ldr	r1, [pc, #428]	@ (80054d8 <ControlTask+0x244>)
 800532a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532c:	2098      	movs	r0, #152	@ 0x98
 800532e:	fb00 f303 	mul.w	r3, r0, r3
 8005332:	440b      	add	r3, r1
 8005334:	338c      	adds	r3, #140	@ 0x8c
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	eeb0 0a67 	vmov.f32	s0, s15
 800533e:	4610      	mov	r0, r2
 8005340:	f7fc fba2 	bl	8001a88 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005344:	4865      	ldr	r0, [pc, #404]	@ (80054dc <ControlTask+0x248>)
 8005346:	f005 f953 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d014      	beq.n	800537a <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005350:	4a61      	ldr	r2, [pc, #388]	@ (80054d8 <ControlTask+0x244>)
 8005352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005354:	2198      	movs	r1, #152	@ 0x98
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	4413      	add	r3, r2
 800535c:	3308      	adds	r3, #8
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	4618      	mov	r0, r3
 8005364:	f7fc fb14 	bl	8001990 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 8005368:	4a5b      	ldr	r2, [pc, #364]	@ (80054d8 <ControlTask+0x244>)
 800536a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536c:	2198      	movs	r1, #152	@ 0x98
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	330c      	adds	r3, #12
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	3301      	adds	r3, #1
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005382:	2b02      	cmp	r3, #2
 8005384:	ddb3      	ble.n	80052ee <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 8005386:	4b54      	ldr	r3, [pc, #336]	@ (80054d8 <ControlTask+0x244>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e78c      	b.n	80052a8 <ControlTask+0x14>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 800538e:	2300      	movs	r3, #0
 8005390:	633b      	str	r3, [r7, #48]	@ 0x30
 8005392:	e00e      	b.n	80053b2 <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	2298      	movs	r2, #152	@ 0x98
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	3308      	adds	r3, #8
 800539e:	4a4e      	ldr	r2, [pc, #312]	@ (80054d8 <ControlTask+0x244>)
 80053a0:	4413      	add	r3, r2
 80053a2:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 80054e0 <ControlTask+0x24c>
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fc fc92 	bl	8001cd0 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	3301      	adds	r3, #1
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	dded      	ble.n	8005394 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 80053b8:	4847      	ldr	r0, [pc, #284]	@ (80054d8 <ControlTask+0x244>)
 80053ba:	f7fe f947 	bl	800364c <robot_state_update>
				// 2. 로봇의 reference 업데이트
				set_trajectory(&strawberry_robot, &quintic_traj, taskTime, desired_posXYZ);
 80053be:	4b49      	ldr	r3, [pc, #292]	@ (80054e4 <ControlTask+0x250>)
 80053c0:	edd3 7a00 	vldr	s15, [r3]
 80053c4:	4a48      	ldr	r2, [pc, #288]	@ (80054e8 <ControlTask+0x254>)
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	4948      	ldr	r1, [pc, #288]	@ (80054ec <ControlTask+0x258>)
 80053cc:	4842      	ldr	r0, [pc, #264]	@ (80054d8 <ControlTask+0x244>)
 80053ce:	f7fe fcfd 	bl	8003dcc <set_trajectory>
				get_target_point(&quintic_traj, target_posXYZ);
 80053d2:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <ControlTask+0x25c>)
 80053d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053d8:	4844      	ldr	r0, [pc, #272]	@ (80054ec <ControlTask+0x258>)
 80053da:	f7ff f889 	bl	80044f0 <get_target_point>
				// 3. 로봇의 Control Input 계산
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 80053de:	4b45      	ldr	r3, [pc, #276]	@ (80054f4 <ControlTask+0x260>)
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <ControlTask+0x264>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <ControlTask+0x268>)
 80053e8:	4a45      	ldr	r2, [pc, #276]	@ (8005500 <ControlTask+0x26c>)
 80053ea:	4946      	ldr	r1, [pc, #280]	@ (8005504 <ControlTask+0x270>)
 80053ec:	483a      	ldr	r0, [pc, #232]	@ (80054d8 <ControlTask+0x244>)
 80053ee:	f7fe fb25 	bl	8003a3c <robot_pos_pid_gain_setting>
				// target_posXYZ.pData[1] = homing_posXYZ.pData[1] + 0.2f * sinf(2.0f * pi * 1.0f * ((float32_t)ctrl_time_ms) / 1000.0f); // reference for gain tuning
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 80053f2:	4b3f      	ldr	r3, [pc, #252]	@ (80054f0 <ControlTask+0x25c>)
 80053f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80053f8:	4837      	ldr	r0, [pc, #220]	@ (80054d8 <ControlTask+0x244>)
 80053fa:	f7fe fb75 	bl	8003ae8 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 80053fe:	2300      	movs	r3, #0
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005402:	e056      	b.n	80054b2 <ControlTask+0x21e>
				{
					strawberry_robot.tau_bi.pData[i] = strawberry_robot.tau_bi.pData[i] + strawberry_robot.G_bi.pData[i];
 8005404:	4b34      	ldr	r3, [pc, #208]	@ (80054d8 <ControlTask+0x244>)
 8005406:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	ed93 7a00 	vldr	s14, [r3]
 8005414:	4b30      	ldr	r3, [pc, #192]	@ (80054d8 <ControlTask+0x244>)
 8005416:	f8d3 2440 	ldr.w	r2, [r3, #1088]	@ 0x440
 800541a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <ControlTask+0x244>)
 8005426:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005434:	edc3 7a00 	vstr	s15, [r3]
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	2298      	movs	r2, #152	@ 0x98
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	3308      	adds	r3, #8
 8005442:	4a25      	ldr	r2, [pc, #148]	@ (80054d8 <ControlTask+0x244>)
 8005444:	1899      	adds	r1, r3, r2
 8005446:	4b24      	ldr	r3, [pc, #144]	@ (80054d8 <ControlTask+0x244>)
 8005448:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 800544c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	ed93 7a00 	vldr	s14, [r3]
 8005456:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <ControlTask+0x244>)
 8005458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545a:	3374      	adds	r3, #116	@ 0x74
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	edd3 7a00 	vldr	s15, [r3]
 8005464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005468:	eeb0 0a67 	vmov.f32	s0, s15
 800546c:	4608      	mov	r0, r1
 800546e:	f7fc fcdf 	bl	8001e30 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005472:	481a      	ldr	r0, [pc, #104]	@ (80054dc <ControlTask+0x248>)
 8005474:	f005 f8bc 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <ControlTask+0x218>
						//MIT_Mode(strawberry_robot.motors[i].id, 0.0f); // zero current for debugging
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 800547e:	4a16      	ldr	r2, [pc, #88]	@ (80054d8 <ControlTask+0x244>)
 8005480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005482:	2198      	movs	r1, #152	@ 0x98
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	4413      	add	r3, r2
 800548a:	3308      	adds	r3, #8
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	b29a      	uxth	r2, r3
 8005490:	4911      	ldr	r1, [pc, #68]	@ (80054d8 <ControlTask+0x244>)
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	2098      	movs	r0, #152	@ 0x98
 8005496:	fb00 f303 	mul.w	r3, r0, r3
 800549a:	440b      	add	r3, r1
 800549c:	338c      	adds	r3, #140	@ 0x8c
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fc faee 	bl	8001a88 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	3301      	adds	r3, #1
 80054b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	dda5      	ble.n	8005404 <ControlTask+0x170>
 80054b8:	e6f6      	b.n	80052a8 <ControlTask+0x14>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 80054ba:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <ControlTask+0x244>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	f47f aef2 	bne.w	80052a8 <ControlTask+0x14>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 80054c4:	2300      	movs	r3, #0
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c8:	e1eb      	b.n	80058a2 <ControlTask+0x60e>
 80054ca:	bf00      	nop
 80054cc:	240022b0 	.word	0x240022b0
 80054d0:	240022b4 	.word	0x240022b4
 80054d4:	58020400 	.word	0x58020400
 80054d8:	2400231c 	.word	0x2400231c
 80054dc:	24000274 	.word	0x24000274
 80054e0:	428c0000 	.word	0x428c0000
 80054e4:	24000018 	.word	0x24000018
 80054e8:	2400001c 	.word	0x2400001c
 80054ec:	240029b0 	.word	0x240029b0
 80054f0:	240022e4 	.word	0x240022e4
 80054f4:	24000034 	.word	0x24000034
 80054f8:	24002310 	.word	0x24002310
 80054fc:	240022f8 	.word	0x240022f8
 8005500:	24002304 	.word	0x24002304
 8005504:	240022ec 	.word	0x240022ec
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	48bf      	ldr	r0, [pc, #764]	@ (8005808 <ControlTask+0x574>)
 800550c:	f005 ffd3 	bl	800b4b6 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8005510:	4bbe      	ldr	r3, [pc, #760]	@ (800580c <ControlTask+0x578>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8005516:	4bbe      	ldr	r3, [pc, #760]	@ (8005810 <ControlTask+0x57c>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800551c:	48bd      	ldr	r0, [pc, #756]	@ (8005814 <ControlTask+0x580>)
 800551e:	f005 f867 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8005528:	4abb      	ldr	r2, [pc, #748]	@ (8005818 <ControlTask+0x584>)
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	2198      	movs	r1, #152	@ 0x98
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3308      	adds	r3, #8
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc f994 	bl	8001868 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8005540:	bf00      	nop
 8005542:	4ab5      	ldr	r2, [pc, #724]	@ (8005818 <ControlTask+0x584>)
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2198      	movs	r1, #152	@ 0x98
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	3310      	adds	r3, #16
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f107 010c 	add.w	r1, r7, #12
 8005556:	2200      	movs	r2, #0
 8005558:	4618      	mov	r0, r3
 800555a:	f00b feeb 	bl	8011334 <xQueueReceive>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d0ee      	beq.n	8005542 <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005564:	48ab      	ldr	r0, [pc, #684]	@ (8005814 <ControlTask+0x580>)
 8005566:	f005 f843 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d014      	beq.n	800559a <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8005570:	4aa9      	ldr	r2, [pc, #676]	@ (8005818 <ControlTask+0x584>)
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	2198      	movs	r1, #152	@ 0x98
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	4413      	add	r3, r2
 800557c:	3308      	adds	r3, #8
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	4618      	mov	r0, r3
 8005584:	f7fc f9ba 	bl	80018fc <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8005588:	4aa3      	ldr	r2, [pc, #652]	@ (8005818 <ControlTask+0x584>)
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	2198      	movs	r1, #152	@ 0x98
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	330c      	adds	r3, #12
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 800559a:	4a9f      	ldr	r2, [pc, #636]	@ (8005818 <ControlTask+0x584>)
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	2198      	movs	r1, #152	@ 0x98
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	338c      	adds	r3, #140	@ 0x8c
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 80055ae:	4a9a      	ldr	r2, [pc, #616]	@ (8005818 <ControlTask+0x584>)
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	2198      	movs	r1, #152	@ 0x98
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	3390      	adds	r3, #144	@ 0x90
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 80055c2:	4a95      	ldr	r2, [pc, #596]	@ (8005818 <ControlTask+0x584>)
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	3301      	adds	r3, #1
 80055c8:	2198      	movs	r1, #152	@ 0x98
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 80055d8:	4a8f      	ldr	r2, [pc, #572]	@ (8005818 <ControlTask+0x584>)
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	2198      	movs	r1, #152	@ 0x98
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	332c      	adds	r3, #44	@ 0x2c
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 80055ec:	4a8a      	ldr	r2, [pc, #552]	@ (8005818 <ControlTask+0x584>)
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	2198      	movs	r1, #152	@ 0x98
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	332c      	adds	r3, #44	@ 0x2c
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4986      	ldr	r1, [pc, #536]	@ (8005818 <ControlTask+0x584>)
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	2098      	movs	r0, #152	@ 0x98
 8005602:	fb00 f303 	mul.w	r3, r0, r3
 8005606:	440b      	add	r3, r1
 8005608:	3330      	adds	r3, #48	@ 0x30
 800560a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 800560c:	4a82      	ldr	r2, [pc, #520]	@ (8005818 <ControlTask+0x584>)
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2198      	movs	r1, #152	@ 0x98
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3334      	adds	r3, #52	@ 0x34
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 8005620:	4a7d      	ldr	r2, [pc, #500]	@ (8005818 <ControlTask+0x584>)
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2198      	movs	r1, #152	@ 0x98
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	3334      	adds	r3, #52	@ 0x34
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4979      	ldr	r1, [pc, #484]	@ (8005818 <ControlTask+0x584>)
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	2098      	movs	r0, #152	@ 0x98
 8005636:	fb00 f303 	mul.w	r3, r0, r3
 800563a:	440b      	add	r3, r1
 800563c:	3338      	adds	r3, #56	@ 0x38
 800563e:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 8005640:	4a76      	ldr	r2, [pc, #472]	@ (800581c <ControlTask+0x588>)
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4973      	ldr	r1, [pc, #460]	@ (8005818 <ControlTask+0x584>)
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	2098      	movs	r0, #152	@ 0x98
 8005650:	fb00 f303 	mul.w	r3, r0, r3
 8005654:	440b      	add	r3, r1
 8005656:	3324      	adds	r3, #36	@ 0x24
 8005658:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 800565a:	4a71      	ldr	r2, [pc, #452]	@ (8005820 <ControlTask+0x58c>)
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	496c      	ldr	r1, [pc, #432]	@ (8005818 <ControlTask+0x584>)
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	2098      	movs	r0, #152	@ 0x98
 800566a:	fb00 f303 	mul.w	r3, r0, r3
 800566e:	440b      	add	r3, r1
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 8005674:	4a68      	ldr	r2, [pc, #416]	@ (8005818 <ControlTask+0x584>)
 8005676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005678:	2198      	movs	r1, #152	@ 0x98
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3324      	adds	r3, #36	@ 0x24
 8005682:	ed93 7a00 	vldr	s14, [r3]
 8005686:	4a64      	ldr	r2, [pc, #400]	@ (8005818 <ControlTask+0x584>)
 8005688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568a:	2198      	movs	r1, #152	@ 0x98
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	332c      	adds	r3, #44	@ 0x2c
 8005694:	edd3 7a00 	vldr	s15, [r3]
 8005698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800569c:	4a5e      	ldr	r2, [pc, #376]	@ (8005818 <ControlTask+0x584>)
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	2198      	movs	r1, #152	@ 0x98
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	3344      	adds	r3, #68	@ 0x44
 80056aa:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 80056ae:	4a5a      	ldr	r2, [pc, #360]	@ (8005818 <ControlTask+0x584>)
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2198      	movs	r1, #152	@ 0x98
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	3344      	adds	r3, #68	@ 0x44
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4956      	ldr	r1, [pc, #344]	@ (8005818 <ControlTask+0x584>)
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	2098      	movs	r0, #152	@ 0x98
 80056c4:	fb00 f303 	mul.w	r3, r0, r3
 80056c8:	440b      	add	r3, r1
 80056ca:	3348      	adds	r3, #72	@ 0x48
 80056cc:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 80056ce:	4a52      	ldr	r2, [pc, #328]	@ (8005818 <ControlTask+0x584>)
 80056d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d2:	2198      	movs	r1, #152	@ 0x98
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	334c      	adds	r3, #76	@ 0x4c
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 80056e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005818 <ControlTask+0x584>)
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	2198      	movs	r1, #152	@ 0x98
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	3350      	adds	r3, #80	@ 0x50
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 80056f6:	4a48      	ldr	r2, [pc, #288]	@ (8005818 <ControlTask+0x584>)
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	2198      	movs	r1, #152	@ 0x98
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	4413      	add	r3, r2
 8005702:	3350      	adds	r3, #80	@ 0x50
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4944      	ldr	r1, [pc, #272]	@ (8005818 <ControlTask+0x584>)
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2098      	movs	r0, #152	@ 0x98
 800570c:	fb00 f303 	mul.w	r3, r0, r3
 8005710:	440b      	add	r3, r1
 8005712:	3354      	adds	r3, #84	@ 0x54
 8005714:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8005716:	4a40      	ldr	r2, [pc, #256]	@ (8005818 <ControlTask+0x584>)
 8005718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571a:	2198      	movs	r1, #152	@ 0x98
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	3358      	adds	r3, #88	@ 0x58
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 800572a:	4a3b      	ldr	r2, [pc, #236]	@ (8005818 <ControlTask+0x584>)
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	2198      	movs	r1, #152	@ 0x98
 8005730:	fb01 f303 	mul.w	r3, r1, r3
 8005734:	4413      	add	r3, r2
 8005736:	3358      	adds	r3, #88	@ 0x58
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4937      	ldr	r1, [pc, #220]	@ (8005818 <ControlTask+0x584>)
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2098      	movs	r0, #152	@ 0x98
 8005740:	fb00 f303 	mul.w	r3, r0, r3
 8005744:	440b      	add	r3, r1
 8005746:	335c      	adds	r3, #92	@ 0x5c
 8005748:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 800574a:	4a33      	ldr	r2, [pc, #204]	@ (8005818 <ControlTask+0x584>)
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	2198      	movs	r1, #152	@ 0x98
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	3328      	adds	r3, #40	@ 0x28
 8005758:	ed93 7a00 	vldr	s14, [r3]
 800575c:	4a2e      	ldr	r2, [pc, #184]	@ (8005818 <ControlTask+0x584>)
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	2198      	movs	r1, #152	@ 0x98
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3334      	adds	r3, #52	@ 0x34
 800576a:	edd3 7a00 	vldr	s15, [r3]
 800576e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005772:	4a29      	ldr	r2, [pc, #164]	@ (8005818 <ControlTask+0x584>)
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	2198      	movs	r1, #152	@ 0x98
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	3360      	adds	r3, #96	@ 0x60
 8005780:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 8005784:	4a24      	ldr	r2, [pc, #144]	@ (8005818 <ControlTask+0x584>)
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	2198      	movs	r1, #152	@ 0x98
 800578a:	fb01 f303 	mul.w	r3, r1, r3
 800578e:	4413      	add	r3, r2
 8005790:	3360      	adds	r3, #96	@ 0x60
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4920      	ldr	r1, [pc, #128]	@ (8005818 <ControlTask+0x584>)
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	2098      	movs	r0, #152	@ 0x98
 800579a:	fb00 f303 	mul.w	r3, r0, r3
 800579e:	440b      	add	r3, r1
 80057a0:	3364      	adds	r3, #100	@ 0x64
 80057a2:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 80057a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005818 <ControlTask+0x584>)
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	2198      	movs	r1, #152	@ 0x98
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	3368      	adds	r3, #104	@ 0x68
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <ControlTask+0x584>)
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	2198      	movs	r1, #152	@ 0x98
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	336c      	adds	r3, #108	@ 0x6c
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 80057cc:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <ControlTask+0x584>)
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	2198      	movs	r1, #152	@ 0x98
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	4413      	add	r3, r2
 80057d8:	336c      	adds	r3, #108	@ 0x6c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	490e      	ldr	r1, [pc, #56]	@ (8005818 <ControlTask+0x584>)
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	2098      	movs	r0, #152	@ 0x98
 80057e2:	fb00 f303 	mul.w	r3, r0, r3
 80057e6:	440b      	add	r3, r1
 80057e8:	3370      	adds	r3, #112	@ 0x70
 80057ea:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 80057ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <ControlTask+0x584>)
 80057ee:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <ControlTask+0x584>)
 8005800:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8005804:	e00e      	b.n	8005824 <ControlTask+0x590>
 8005806:	bf00      	nop
 8005808:	58020400 	.word	0x58020400
 800580c:	240022b0 	.word	0x240022b0
 8005810:	240022b4 	.word	0x240022b4
 8005814:	24000274 	.word	0x24000274
 8005818:	2400231c 	.word	0x2400231c
 800581c:	240022bc 	.word	0x240022bc
 8005820:	240022c8 	.word	0x240022c8
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 8005830:	4ba2      	ldr	r3, [pc, #648]	@ (8005abc <ControlTask+0x828>)
 8005832:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 8005842:	4b9e      	ldr	r3, [pc, #632]	@ (8005abc <ControlTask+0x828>)
 8005844:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 8005854:	4b99      	ldr	r3, [pc, #612]	@ (8005abc <ControlTask+0x828>)
 8005856:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 8005866:	4b95      	ldr	r3, [pc, #596]	@ (8005abc <ControlTask+0x828>)
 8005868:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 8005878:	4b90      	ldr	r3, [pc, #576]	@ (8005abc <ControlTask+0x828>)
 800587a:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 800588a:	4b8c      	ldr	r3, [pc, #560]	@ (8005abc <ControlTask+0x828>)
 800588c:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	3301      	adds	r3, #1
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	f77f ae2f 	ble.w	8005508 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80058aa:	2300      	movs	r3, #0
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ae:	e069      	b.n	8005984 <ControlTask+0x6f0>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = homing_posXYZ.pData[i];
 80058b0:	4b83      	ldr	r3, [pc, #524]	@ (8005ac0 <ControlTask+0x82c>)
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	4b80      	ldr	r3, [pc, #512]	@ (8005abc <ControlTask+0x828>)
 80058bc:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 80058ca:	4b7c      	ldr	r3, [pc, #496]	@ (8005abc <ControlTask+0x828>)
 80058cc:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 80058dc:	4b77      	ldr	r3, [pc, #476]	@ (8005abc <ControlTask+0x828>)
 80058de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
					strawberry_robot.accXYZ.pData[i] = 0.0;
 80058ee:	4b73      	ldr	r3, [pc, #460]	@ (8005abc <ControlTask+0x828>)
 80058f0:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 8005900:	4b6e      	ldr	r3, [pc, #440]	@ (8005abc <ControlTask+0x828>)
 8005902:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 8005912:	4b6a      	ldr	r3, [pc, #424]	@ (8005abc <ControlTask+0x828>)
 8005914:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 8005924:	4b65      	ldr	r3, [pc, #404]	@ (8005abc <ControlTask+0x828>)
 8005926:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8005936:	4b61      	ldr	r3, [pc, #388]	@ (8005abc <ControlTask+0x828>)
 8005938:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8005948:	4b5c      	ldr	r3, [pc, #368]	@ (8005abc <ControlTask+0x828>)
 800594a:	f8d3 2574 	ldr.w	r2, [r3, #1396]	@ 0x574
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 800595a:	4b58      	ldr	r3, [pc, #352]	@ (8005abc <ControlTask+0x828>)
 800595c:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 800596c:	4b53      	ldr	r3, [pc, #332]	@ (8005abc <ControlTask+0x828>)
 800596e:	f8d3 2684 	ldr.w	r2, [r3, #1668]	@ 0x684
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	3301      	adds	r3, #1
 8005982:	627b      	str	r3, [r7, #36]	@ 0x24
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	2b02      	cmp	r3, #2
 8005988:	dd92      	ble.n	80058b0 <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 800598a:	2300      	movs	r3, #0
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	e00b      	b.n	80059a8 <ControlTask+0x714>
 8005990:	4b4a      	ldr	r3, [pc, #296]	@ (8005abc <ControlTask+0x828>)
 8005992:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	3301      	adds	r3, #1
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	ddf0      	ble.n	8005990 <ControlTask+0x6fc>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80059ae:	4b43      	ldr	r3, [pc, #268]	@ (8005abc <ControlTask+0x828>)
 80059b0:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059b8:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 80059ba:	4b40      	ldr	r3, [pc, #256]	@ (8005abc <ControlTask+0x828>)
 80059bc:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059c0:	3310      	adds	r3, #16
 80059c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059c6:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 80059c8:	4b3c      	ldr	r3, [pc, #240]	@ (8005abc <ControlTask+0x828>)
 80059ca:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059ce:	3320      	adds	r3, #32
 80059d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059d4:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	e00b      	b.n	80059f4 <ControlTask+0x760>
 80059dc:	4b37      	ldr	r3, [pc, #220]	@ (8005abc <ControlTask+0x828>)
 80059de:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	ddf0      	ble.n	80059dc <ControlTask+0x748>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 80059fa:	4b30      	ldr	r3, [pc, #192]	@ (8005abc <ControlTask+0x828>)
 80059fc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8005a00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a04:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8005a06:	4b2d      	ldr	r3, [pc, #180]	@ (8005abc <ControlTask+0x828>)
 8005a08:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8005a0c:	3310      	adds	r3, #16
 8005a0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a12:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 8005a14:	4b29      	ldr	r3, [pc, #164]	@ (8005abc <ControlTask+0x828>)
 8005a16:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8005a1a:	3320      	adds	r3, #32
 8005a1c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a20:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 8005a22:	4826      	ldr	r0, [pc, #152]	@ (8005abc <ControlTask+0x828>)
 8005a24:	f7fd fe12 	bl	800364c <robot_state_update>
				// 15. 로봇의 Trajectory 파라미터 초기화
				quintic_traj.initial_time = (float32_t) ctrl_time_ms / 1000.0f;
 8005a28:	4b26      	ldr	r3, [pc, #152]	@ (8005ac4 <ControlTask+0x830>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a34:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8005ac8 <ControlTask+0x834>
 8005a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a3c:	4b23      	ldr	r3, [pc, #140]	@ (8005acc <ControlTask+0x838>)
 8005a3e:	edc3 7a01 	vstr	s15, [r3, #4]
				quintic_traj.initial_pos[0] = homing_posXYZ.pData[0];
 8005a42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ac0 <ControlTask+0x82c>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a20      	ldr	r2, [pc, #128]	@ (8005acc <ControlTask+0x838>)
 8005a4a:	60d3      	str	r3, [r2, #12]
				quintic_traj.initial_pos[1] = homing_posXYZ.pData[1];
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <ControlTask+0x82c>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	@ (8005acc <ControlTask+0x838>)
 8005a54:	6113      	str	r3, [r2, #16]
				quintic_traj.initial_pos[2] = homing_posXYZ.pData[2];
 8005a56:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac0 <ControlTask+0x82c>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005acc <ControlTask+0x838>)
 8005a5e:	6153      	str	r3, [r2, #20]
				quintic_traj.initial_vel[0] = 0.0f;
 8005a60:	4b1a      	ldr	r3, [pc, #104]	@ (8005acc <ControlTask+0x838>)
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
				quintic_traj.initial_vel[1] = 0.0f;
 8005a68:	4b18      	ldr	r3, [pc, #96]	@ (8005acc <ControlTask+0x838>)
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	61da      	str	r2, [r3, #28]
				quintic_traj.initial_vel[2] = 0.0f;
 8005a70:	4b16      	ldr	r3, [pc, #88]	@ (8005acc <ControlTask+0x838>)
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	621a      	str	r2, [r3, #32]
				quintic_traj.initial_acc[0] = 0.0f;
 8005a78:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <ControlTask+0x838>)
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	625a      	str	r2, [r3, #36]	@ 0x24
				quintic_traj.initial_acc[1] = 0.0f;
 8005a80:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <ControlTask+0x838>)
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	629a      	str	r2, [r3, #40]	@ 0x28
				quintic_traj.initial_acc[2] = 0.0f;
 8005a88:	4b10      	ldr	r3, [pc, #64]	@ (8005acc <ControlTask+0x838>)
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
				set_trajectory(&strawberry_robot, &quintic_traj, taskTime, homing_posXYZ_buffer);
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <ControlTask+0x83c>)
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad4 <ControlTask+0x840>)
 8005a98:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9c:	490b      	ldr	r1, [pc, #44]	@ (8005acc <ControlTask+0x838>)
 8005a9e:	4807      	ldr	r0, [pc, #28]	@ (8005abc <ControlTask+0x828>)
 8005aa0:	f7fe f994 	bl	8003dcc <set_trajectory>
				get_target_point(&quintic_traj, target_posXYZ);
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <ControlTask+0x844>)
 8005aa6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005aaa:	4808      	ldr	r0, [pc, #32]	@ (8005acc <ControlTask+0x838>)
 8005aac:	f7fe fd20 	bl	80044f0 <get_target_point>
				// 16. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	@ (8005abc <ControlTask+0x828>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8005ab6:	f7ff bbf7 	b.w	80052a8 <ControlTask+0x14>
 8005aba:	bf00      	nop
 8005abc:	2400231c 	.word	0x2400231c
 8005ac0:	240022dc 	.word	0x240022dc
 8005ac4:	240022b0 	.word	0x240022b0
 8005ac8:	447a0000 	.word	0x447a0000
 8005acc:	240029b0 	.word	0x240029b0
 8005ad0:	24000018 	.word	0x24000018
 8005ad4:	2400000c 	.word	0x2400000c
 8005ad8:	240022e4 	.word	0x240022e4

08005adc <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	ed2d 8b10 	vpush	{d8-d15}
 8005ae2:	b0a9      	sub	sp, #164	@ 0xa4
 8005ae4:	af24      	add	r7, sp, #144	@ 0x90
 8005ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8005ae8:	f00c f9ce 	bl	8011e88 <xTaskGetTickCount>
 8005aec:	4603      	mov	r3, r0
 8005aee:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(5);  // 5 ms
 8005af0:	2302      	movs	r3, #2
 8005af2:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 10 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f00c f828 	bl	8011b50 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	005a      	lsls	r2, r3, #1
 8005b04:	4bbc      	ldr	r3, [pc, #752]	@ (8005df8 <DataLoggingTask+0x31c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4413      	add	r3, r2
 8005b0a:	4abb      	ldr	r2, [pc, #748]	@ (8005df8 <DataLoggingTask+0x31c>)
 8005b0c:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 8005b0e:	4bbb      	ldr	r3, [pc, #748]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	f040 80b8 	bne.w	8005c88 <DataLoggingTask+0x1ac>
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8005b18:	4bb9      	ldr	r3, [pc, #740]	@ (8005e00 <DataLoggingTask+0x324>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b24:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8005e04 <DataLoggingTask+0x328>
 8005b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b2c:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8005b30:	4bb2      	ldr	r3, [pc, #712]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4ab1      	ldr	r2, [pc, #708]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b36:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input * strawberry_robot.axis_configuration[0],
 8005b38:	49b0      	ldr	r1, [pc, #704]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b3a:	ed91 7a23 	vldr	s14, [r1, #140]	@ 0x8c
 8005b3e:	49af      	ldr	r1, [pc, #700]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b40:	edd1 7a74 	vldr	s15, [r1, #464]	@ 0x1d0
 8005b44:	ee67 7a27 	vmul.f32	s15, s14, s15
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b4c:	49ab      	ldr	r1, [pc, #684]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b4e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input * strawberry_robot.axis_configuration[1],
 8005b52:	48aa      	ldr	r0, [pc, #680]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b54:	ed90 6a49 	vldr	s12, [r0, #292]	@ 0x124
 8005b58:	48a8      	ldr	r0, [pc, #672]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b5a:	edd0 6a75 	vldr	s13, [r0, #468]	@ 0x1d4
 8005b5e:	ee66 6a26 	vmul.f32	s13, s12, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b62:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005b66:	48a5      	ldr	r0, [pc, #660]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b68:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input * strawberry_robot.axis_configuration[2],
 8005b6c:	4ca3      	ldr	r4, [pc, #652]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b6e:	ed94 5a6f 	vldr	s10, [r4, #444]	@ 0x1bc
 8005b72:	4ca2      	ldr	r4, [pc, #648]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b74:	edd4 5a76 	vldr	s11, [r4, #472]	@ 0x1d8
 8005b78:	ee65 5a25 	vmul.f32	s11, s10, s11
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b7c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b80:	4c9e      	ldr	r4, [pc, #632]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b82:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005b86:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b8a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b8e:	4c9b      	ldr	r4, [pc, #620]	@ (8005dfc <DataLoggingTask+0x320>)
 8005b90:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005b94:	3404      	adds	r4, #4
 8005b96:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b9a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b9e:	4c97      	ldr	r4, [pc, #604]	@ (8005dfc <DataLoggingTask+0x320>)
 8005ba0:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005ba4:	3408      	adds	r4, #8
 8005ba6:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005baa:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005bae:	4c93      	ldr	r4, [pc, #588]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bb0:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005bb4:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bb8:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005bbc:	4c8f      	ldr	r4, [pc, #572]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bbe:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005bc2:	3404      	adds	r4, #4
 8005bc4:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bc8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005bcc:	4c8b      	ldr	r4, [pc, #556]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bce:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005bd2:	3408      	adds	r4, #8
 8005bd4:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bd8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bdc:	4c87      	ldr	r4, [pc, #540]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bde:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005be2:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005be6:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bea:	4c84      	ldr	r4, [pc, #528]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bec:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005bf0:	3404      	adds	r4, #4
 8005bf2:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bf6:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bfa:	4c80      	ldr	r4, [pc, #512]	@ (8005dfc <DataLoggingTask+0x320>)
 8005bfc:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005c00:	3408      	adds	r4, #8
 8005c02:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c06:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005c0a:	4c7c      	ldr	r4, [pc, #496]	@ (8005dfc <DataLoggingTask+0x320>)
 8005c0c:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005c10:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c14:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005c18:	4c78      	ldr	r4, [pc, #480]	@ (8005dfc <DataLoggingTask+0x320>)
 8005c1a:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005c1e:	3404      	adds	r4, #4
 8005c20:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c24:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005c28:	4c74      	ldr	r4, [pc, #464]	@ (8005dfc <DataLoggingTask+0x320>)
 8005c2a:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005c2e:	3408      	adds	r4, #8
 8005c30:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c34:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8005c38:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005c3c:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005c40:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8005c44:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8005c48:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005c4c:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005c50:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8005c54:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8005c58:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005c5c:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005c60:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8005c64:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8005c68:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005c6c:	9008      	str	r0, [sp, #32]
 8005c6e:	ed8d 6b06 	vstr	d6, [sp, #24]
 8005c72:	9104      	str	r1, [sp, #16]
 8005c74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	ec53 2b1f 	vmov	r2, r3, d15
 8005c80:	4861      	ldr	r0, [pc, #388]	@ (8005e08 <DataLoggingTask+0x32c>)
 8005c82:	f00f f9c9 	bl	8015018 <iprintf>
 8005c86:	e735      	b.n	8005af4 <DataLoggingTask+0x18>
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8005c88:	4b5d      	ldr	r3, [pc, #372]	@ (8005e00 <DataLoggingTask+0x324>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c94:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8005e04 <DataLoggingTask+0x328>
 8005c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c9c:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8005ca0:	4b56      	ldr	r3, [pc, #344]	@ (8005dfc <DataLoggingTask+0x320>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a55      	ldr	r2, [pc, #340]	@ (8005dfc <DataLoggingTask+0x320>)
 8005ca6:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input * strawberry_robot.axis_configuration[0],
 8005ca8:	4954      	ldr	r1, [pc, #336]	@ (8005dfc <DataLoggingTask+0x320>)
 8005caa:	ed91 7a23 	vldr	s14, [r1, #140]	@ 0x8c
 8005cae:	4953      	ldr	r1, [pc, #332]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cb0:	edd1 7a74 	vldr	s15, [r1, #464]	@ 0x1d0
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005cbc:	494f      	ldr	r1, [pc, #316]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cbe:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input * strawberry_robot.axis_configuration[1],
 8005cc2:	484e      	ldr	r0, [pc, #312]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cc4:	ed90 6a49 	vldr	s12, [r0, #292]	@ 0x124
 8005cc8:	484c      	ldr	r0, [pc, #304]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cca:	edd0 6a75 	vldr	s13, [r0, #468]	@ 0x1d4
 8005cce:	ee66 6a26 	vmul.f32	s13, s12, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cd2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005cd6:	4849      	ldr	r0, [pc, #292]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cd8:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input * strawberry_robot.axis_configuration[2],
 8005cdc:	4c47      	ldr	r4, [pc, #284]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cde:	ed94 5a6f 	vldr	s10, [r4, #444]	@ 0x1bc
 8005ce2:	4c46      	ldr	r4, [pc, #280]	@ (8005dfc <DataLoggingTask+0x320>)
 8005ce4:	edd4 5a76 	vldr	s11, [r4, #472]	@ 0x1d8
 8005ce8:	ee65 5a25 	vmul.f32	s11, s10, s11
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cec:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005cf0:	4c42      	ldr	r4, [pc, #264]	@ (8005dfc <DataLoggingTask+0x320>)
 8005cf2:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005cf6:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cfa:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005cfe:	4c3f      	ldr	r4, [pc, #252]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d00:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005d04:	3404      	adds	r4, #4
 8005d06:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d0a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005d0e:	4c3b      	ldr	r4, [pc, #236]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d10:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005d14:	3408      	adds	r4, #8
 8005d16:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d1a:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005d1e:	4c37      	ldr	r4, [pc, #220]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d20:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005d24:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d28:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005d2c:	4c33      	ldr	r4, [pc, #204]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d2e:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005d32:	3404      	adds	r4, #4
 8005d34:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d38:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005d3c:	4c2f      	ldr	r4, [pc, #188]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d3e:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005d42:	3408      	adds	r4, #8
 8005d44:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d48:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d4c:	4c2b      	ldr	r4, [pc, #172]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d4e:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d52:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d56:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d5a:	4c28      	ldr	r4, [pc, #160]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d5c:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d60:	3404      	adds	r4, #4
 8005d62:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d66:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d6a:	4c24      	ldr	r4, [pc, #144]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d6c:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d70:	3408      	adds	r4, #8
 8005d72:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d76:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d7a:	4c20      	ldr	r4, [pc, #128]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d7c:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d80:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d84:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d88:	4c1c      	ldr	r4, [pc, #112]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d8a:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d8e:	3404      	adds	r4, #4
 8005d90:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d94:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d98:	4c18      	ldr	r4, [pc, #96]	@ (8005dfc <DataLoggingTask+0x320>)
 8005d9a:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d9e:	3408      	adds	r4, #8
 8005da0:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005da4:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8005da8:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005dac:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005db0:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8005db4:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8005db8:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005dbc:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005dc0:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8005dc4:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8005dc8:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005dcc:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005dd0:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8005dd4:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8005dd8:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005ddc:	9008      	str	r0, [sp, #32]
 8005dde:	ed8d 6b06 	vstr	d6, [sp, #24]
 8005de2:	9104      	str	r1, [sp, #16]
 8005de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005de8:	9201      	str	r2, [sp, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	ec53 2b1f 	vmov	r2, r3, d15
 8005df0:	4805      	ldr	r0, [pc, #20]	@ (8005e08 <DataLoggingTask+0x32c>)
 8005df2:	f00f f911 	bl	8015018 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8005df6:	e67d      	b.n	8005af4 <DataLoggingTask+0x18>
 8005df8:	240022b8 	.word	0x240022b8
 8005dfc:	2400231c 	.word	0x2400231c
 8005e00:	240022b0 	.word	0x240022b0
 8005e04:	447a0000 	.word	0x447a0000
 8005e08:	08017cfc 	.word	0x08017cfc

08005e0c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005e12:	463b      	mov	r3, r7
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005e1e:	f000 ff3d 	bl	8006c9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005e2e:	231f      	movs	r3, #31
 8005e30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005e32:	2387      	movs	r3, #135	@ 0x87
 8005e34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005e42:	2301      	movs	r3, #1
 8005e44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 ff5b 	bl	8006d0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005e56:	2004      	movs	r0, #4
 8005e58:	f000 ff38 	bl	8006ccc <HAL_MPU_Enable>

}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a04      	ldr	r2, [pc, #16]	@ (8005e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8005e76:	f000 fde1 	bl	8006a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40001400 	.word	0x40001400

08005e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8005e8e:	4b52      	ldr	r3, [pc, #328]	@ (8005fd8 <Error_Handler+0x150>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d148      	bne.n	8005f28 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	e03f      	b.n	8005f1c <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8005e9c:	2180      	movs	r1, #128	@ 0x80
 8005e9e:	484f      	ldr	r0, [pc, #316]	@ (8005fdc <Error_Handler+0x154>)
 8005ea0:	f005 fb09 	bl	800b4b6 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8005ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8005fd8 <Error_Handler+0x150>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2198      	movs	r1, #152	@ 0x98
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	4413      	add	r3, r2
 8005eb0:	338c      	adds	r3, #140	@ 0x8c
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005eb8:	4849      	ldr	r0, [pc, #292]	@ (8005fe0 <Error_Handler+0x158>)
 8005eba:	f004 fb99 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8005ec4:	4a44      	ldr	r2, [pc, #272]	@ (8005fd8 <Error_Handler+0x150>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2198      	movs	r1, #152	@ 0x98
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	4940      	ldr	r1, [pc, #256]	@ (8005fd8 <Error_Handler+0x150>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2098      	movs	r0, #152	@ 0x98
 8005edc:	fb00 f303 	mul.w	r3, r0, r3
 8005ee0:	440b      	add	r3, r1
 8005ee2:	338c      	adds	r3, #140	@ 0x8c
 8005ee4:	edd3 7a00 	vldr	s15, [r3]
 8005ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fb fdcb 	bl	8001a88 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005ef2:	483b      	ldr	r0, [pc, #236]	@ (8005fe0 <Error_Handler+0x158>)
 8005ef4:	f004 fb7c 	bl	800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005efe:	4a36      	ldr	r2, [pc, #216]	@ (8005fd8 <Error_Handler+0x150>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2198      	movs	r1, #152	@ 0x98
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	4413      	add	r3, r2
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fb fd3d 	bl	8001990 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	ddbc      	ble.n	8005e9c <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 8005f22:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd8 <Error_Handler+0x150>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8005f28:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d82f      	bhi.n	8005f92 <Error_Handler+0x10a>
 8005f32:	a201      	add	r2, pc, #4	@ (adr r2, 8005f38 <Error_Handler+0xb0>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f5b 	.word	0x08005f5b
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f77 	.word	0x08005f77
 8005f48:	08005f85 	.word	0x08005f85
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 8005f4c:	4b25      	ldr	r3, [pc, #148]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4825      	ldr	r0, [pc, #148]	@ (8005fe8 <Error_Handler+0x160>)
 8005f54:	f00f f860 	bl	8015018 <iprintf>
 8005f58:	e01e      	b.n	8005f98 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 8005f5a:	4b22      	ldr	r3, [pc, #136]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4822      	ldr	r0, [pc, #136]	@ (8005fec <Error_Handler+0x164>)
 8005f62:	f00f f859 	bl	8015018 <iprintf>
 8005f66:	e017      	b.n	8005f98 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8005f68:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4820      	ldr	r0, [pc, #128]	@ (8005ff0 <Error_Handler+0x168>)
 8005f70:	f00f f852 	bl	8015018 <iprintf>
 8005f74:	e010      	b.n	8005f98 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8005f76:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	481d      	ldr	r0, [pc, #116]	@ (8005ff4 <Error_Handler+0x16c>)
 8005f7e:	f00f f84b 	bl	8015018 <iprintf>
 8005f82:	e009      	b.n	8005f98 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8005f84:	4b17      	ldr	r3, [pc, #92]	@ (8005fe4 <Error_Handler+0x15c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	481b      	ldr	r0, [pc, #108]	@ (8005ff8 <Error_Handler+0x170>)
 8005f8c:	f00f f844 	bl	8015018 <iprintf>
 8005f90:	e002      	b.n	8005f98 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8005f92:	481a      	ldr	r0, [pc, #104]	@ (8005ffc <Error_Handler+0x174>)
 8005f94:	f00f f840 	bl	8015018 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8005f98:	2300      	movs	r3, #0
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	e012      	b.n	8005fc4 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8005f9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005fa2:	480e      	ldr	r0, [pc, #56]	@ (8005fdc <Error_Handler+0x154>)
 8005fa4:	f005 fa87 	bl	800b4b6 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8005fa8:	20c8      	movs	r0, #200	@ 0xc8
 8005faa:	f000 fd67 	bl	8006a7c <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8005fae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005fb2:	480a      	ldr	r0, [pc, #40]	@ (8005fdc <Error_Handler+0x154>)
 8005fb4:	f005 fa7f 	bl	800b4b6 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8005fb8:	20c8      	movs	r0, #200	@ 0xc8
 8005fba:	f000 fd5f 	bl	8006a7c <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4b07      	ldr	r3, [pc, #28]	@ (8005fe4 <Error_Handler+0x15c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	dbe7      	blt.n	8005f9e <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8005fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005fd2:	f000 fd53 	bl	8006a7c <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8005fd6:	e7df      	b.n	8005f98 <Error_Handler+0x110>
 8005fd8:	2400231c 	.word	0x2400231c
 8005fdc:	58020400 	.word	0x58020400
 8005fe0:	24000274 	.word	0x24000274
 8005fe4:	24002a4c 	.word	0x24002a4c
 8005fe8:	08017d70 	.word	0x08017d70
 8005fec:	08017d98 	.word	0x08017d98
 8005ff0:	08017dc0 	.word	0x08017dc0
 8005ff4:	08017df4 	.word	0x08017df4
 8005ff8:	08017e28 	.word	0x08017e28
 8005ffc:	08017e5c 	.word	0x08017e5c

08006000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006006:	4b0c      	ldr	r3, [pc, #48]	@ (8006038 <HAL_MspInit+0x38>)
 8006008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <HAL_MspInit+0x38>)
 800600e:	f043 0302 	orr.w	r3, r3, #2
 8006012:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006016:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <HAL_MspInit+0x38>)
 8006018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006024:	2200      	movs	r2, #0
 8006026:	210f      	movs	r1, #15
 8006028:	f06f 0001 	mvn.w	r0, #1
 800602c:	f000 fe0e 	bl	8006c4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58024400 	.word	0x58024400

0800603c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b0ba      	sub	sp, #232	@ 0xe8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006044:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	605a      	str	r2, [r3, #4]
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	22c0      	movs	r2, #192	@ 0xc0
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f00f f830 	bl	80150c2 <memset>
  if(hfdcan->Instance==FDCAN1)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a37      	ldr	r2, [pc, #220]	@ (8006144 <HAL_FDCAN_MspInit+0x108>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d166      	bne.n	800613a <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800606c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8006078:	2301      	movs	r3, #1
 800607a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 800607c:	2364      	movs	r3, #100	@ 0x64
 800607e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006080:	2302      	movs	r3, #2
 8006082:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8006084:	2314      	movs	r3, #20
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006088:	2302      	movs	r3, #2
 800608a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800608c:	23c0      	movs	r3, #192	@ 0xc0
 800608e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006090:	2300      	movs	r3, #0
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8006098:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800609c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	4618      	mov	r0, r3
 80060a6:	f006 fa83 	bl	800c5b0 <HAL_RCCEx_PeriphCLKConfig>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80060b0:	f7ff feea 	bl	8005e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80060b4:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80060ba:	4a23      	ldr	r2, [pc, #140]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80060c4:	4b20      	ldr	r3, [pc, #128]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060da:	f043 0308 	orr.w	r3, r3, #8
 80060de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80060e2:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <HAL_FDCAN_MspInit+0x10c>)
 80060e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f6:	2302      	movs	r3, #2
 80060f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006102:	2302      	movs	r3, #2
 8006104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8006108:	2309      	movs	r3, #9
 800610a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800610e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006112:	4619      	mov	r1, r3
 8006114:	480d      	ldr	r0, [pc, #52]	@ (800614c <HAL_FDCAN_MspInit+0x110>)
 8006116:	f005 f805 	bl	800b124 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 800611a:	2200      	movs	r2, #0
 800611c:	2106      	movs	r1, #6
 800611e:	2013      	movs	r0, #19
 8006120:	f000 fd94 	bl	8006c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006124:	2013      	movs	r0, #19
 8006126:	f000 fdab 	bl	8006c80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 800612a:	2200      	movs	r2, #0
 800612c:	2106      	movs	r1, #6
 800612e:	2015      	movs	r0, #21
 8006130:	f000 fd8c 	bl	8006c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8006134:	2015      	movs	r0, #21
 8006136:	f000 fda3 	bl	8006c80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800613a:	bf00      	nop
 800613c:	37e8      	adds	r7, #232	@ 0xe8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	4000a000 	.word	0x4000a000
 8006148:	58024400 	.word	0x58024400
 800614c:	58020c00 	.word	0x58020c00

08006150 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0ba      	sub	sp, #232	@ 0xe8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006158:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006168:	f107 0310 	add.w	r3, r7, #16
 800616c:	22c0      	movs	r2, #192	@ 0xc0
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f00e ffa6 	bl	80150c2 <memset>
  if(huart->Instance==USART3)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a59      	ldr	r2, [pc, #356]	@ (80062e0 <HAL_UART_MspInit+0x190>)
 800617c:	4293      	cmp	r3, r2
 800617e:	f040 80aa 	bne.w	80062d6 <HAL_UART_MspInit+0x186>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006182:	f04f 0202 	mov.w	r2, #2
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800618e:	2300      	movs	r3, #0
 8006190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006194:	f107 0310 	add.w	r3, r7, #16
 8006198:	4618      	mov	r0, r3
 800619a:	f006 fa09 	bl	800c5b0 <HAL_RCCEx_PeriphCLKConfig>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80061a4:	f7ff fe70 	bl	8005e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80061a8:	4b4e      	ldr	r3, [pc, #312]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061ae:	4a4d      	ldr	r2, [pc, #308]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061b8:	4b4a      	ldr	r3, [pc, #296]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061c6:	4b47      	ldr	r3, [pc, #284]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061cc:	4a45      	ldr	r2, [pc, #276]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061ce:	f043 0308 	orr.w	r3, r3, #8
 80061d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80061d6:	4b43      	ldr	r3, [pc, #268]	@ (80062e4 <HAL_UART_MspInit+0x194>)
 80061d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80061e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80061e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061fe:	2307      	movs	r3, #7
 8006200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006204:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006208:	4619      	mov	r1, r3
 800620a:	4837      	ldr	r0, [pc, #220]	@ (80062e8 <HAL_UART_MspInit+0x198>)
 800620c:	f004 ff8a 	bl	800b124 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8006210:	4b36      	ldr	r3, [pc, #216]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006212:	4a37      	ldr	r2, [pc, #220]	@ (80062f0 <HAL_UART_MspInit+0x1a0>)
 8006214:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006216:	4b35      	ldr	r3, [pc, #212]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006218:	222d      	movs	r2, #45	@ 0x2d
 800621a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800621c:	4b33      	ldr	r3, [pc, #204]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 800621e:	2200      	movs	r2, #0
 8006220:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006222:	4b32      	ldr	r3, [pc, #200]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006224:	2200      	movs	r2, #0
 8006226:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006228:	4b30      	ldr	r3, [pc, #192]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 800622a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800622e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006230:	4b2e      	ldr	r3, [pc, #184]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006232:	2200      	movs	r2, #0
 8006234:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006236:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800623c:	4b2b      	ldr	r3, [pc, #172]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 800623e:	2200      	movs	r2, #0
 8006240:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006242:	4b2a      	ldr	r3, [pc, #168]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006244:	2200      	movs	r2, #0
 8006246:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006248:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 800624a:	2200      	movs	r2, #0
 800624c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800624e:	4827      	ldr	r0, [pc, #156]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006250:	f000 fd9c 	bl	8006d8c <HAL_DMA_Init>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800625a:	f7ff fe15 	bl	8005e88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006266:	4a21      	ldr	r2, [pc, #132]	@ (80062ec <HAL_UART_MspInit+0x19c>)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800626c:	4b21      	ldr	r3, [pc, #132]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 800626e:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <HAL_UART_MspInit+0x1a8>)
 8006270:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006272:	4b20      	ldr	r3, [pc, #128]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 8006274:	222e      	movs	r2, #46	@ 0x2e
 8006276:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006278:	4b1e      	ldr	r3, [pc, #120]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 800627a:	2240      	movs	r2, #64	@ 0x40
 800627c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800627e:	4b1d      	ldr	r3, [pc, #116]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 8006280:	2200      	movs	r2, #0
 8006282:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006284:	4b1b      	ldr	r3, [pc, #108]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 8006286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800628a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800628c:	4b19      	ldr	r3, [pc, #100]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 800628e:	2200      	movs	r2, #0
 8006290:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006292:	4b18      	ldr	r3, [pc, #96]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 8006294:	2200      	movs	r2, #0
 8006296:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006298:	4b16      	ldr	r3, [pc, #88]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 800629a:	2200      	movs	r2, #0
 800629c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800629e:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062a4:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80062aa:	4812      	ldr	r0, [pc, #72]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 80062ac:	f000 fd6e 	bl	8006d8c <HAL_DMA_Init>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80062b6:	f7ff fde7 	bl	8005e88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a0d      	ldr	r2, [pc, #52]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 80062be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80062c0:	4a0c      	ldr	r2, [pc, #48]	@ (80062f4 <HAL_UART_MspInit+0x1a4>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80062c6:	2200      	movs	r2, #0
 80062c8:	2108      	movs	r1, #8
 80062ca:	2027      	movs	r0, #39	@ 0x27
 80062cc:	f000 fcbe 	bl	8006c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80062d0:	2027      	movs	r0, #39	@ 0x27
 80062d2:	f000 fcd5 	bl	8006c80 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80062d6:	bf00      	nop
 80062d8:	37e8      	adds	r7, #232	@ 0xe8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40004800 	.word	0x40004800
 80062e4:	58024400 	.word	0x58024400
 80062e8:	58020c00 	.word	0x58020c00
 80062ec:	240003a8 	.word	0x240003a8
 80062f0:	40020010 	.word	0x40020010
 80062f4:	24000420 	.word	0x24000420
 80062f8:	40020028 	.word	0x40020028

080062fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b090      	sub	sp, #64	@ 0x40
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d827      	bhi.n	800635a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800630a:	2200      	movs	r2, #0
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	2037      	movs	r0, #55	@ 0x37
 8006310:	f000 fc9c 	bl	8006c4c <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006314:	2037      	movs	r0, #55	@ 0x37
 8006316:	f000 fcb3 	bl	8006c80 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800631a:	4a29      	ldr	r2, [pc, #164]	@ (80063c0 <HAL_InitTick+0xc4>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8006320:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <HAL_InitTick+0xc8>)
 8006322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006326:	4a27      	ldr	r2, [pc, #156]	@ (80063c4 <HAL_InitTick+0xc8>)
 8006328:	f043 0320 	orr.w	r3, r3, #32
 800632c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006330:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <HAL_InitTick+0xc8>)
 8006332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800633e:	f107 0210 	add.w	r2, r7, #16
 8006342:	f107 0314 	add.w	r3, r7, #20
 8006346:	4611      	mov	r1, r2
 8006348:	4618      	mov	r0, r3
 800634a:	f006 f8ef 	bl	800c52c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <HAL_InitTick+0x6a>
 8006358:	e001      	b.n	800635e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e02b      	b.n	80063b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800635e:	f006 f8b9 	bl	800c4d4 <HAL_RCC_GetPCLK1Freq>
 8006362:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8006364:	e004      	b.n	8006370 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006366:	f006 f8b5 	bl	800c4d4 <HAL_RCC_GetPCLK1Freq>
 800636a:	4603      	mov	r3, r0
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006372:	4a15      	ldr	r2, [pc, #84]	@ (80063c8 <HAL_InitTick+0xcc>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	0c9b      	lsrs	r3, r3, #18
 800637a:	3b01      	subs	r3, #1
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800637e:	4b13      	ldr	r3, [pc, #76]	@ (80063cc <HAL_InitTick+0xd0>)
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_InitTick+0xd4>)
 8006382:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8006384:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <HAL_InitTick+0xd0>)
 8006386:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800638a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800638c:	4a0f      	ldr	r2, [pc, #60]	@ (80063cc <HAL_InitTick+0xd0>)
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8006392:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <HAL_InitTick+0xd0>)
 8006394:	2200      	movs	r2, #0
 8006396:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006398:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <HAL_InitTick+0xd0>)
 800639a:	2200      	movs	r2, #0
 800639c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800639e:	480b      	ldr	r0, [pc, #44]	@ (80063cc <HAL_InitTick+0xd0>)
 80063a0:	f007 ff32 	bl	800e208 <HAL_TIM_Base_Init>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80063aa:	4808      	ldr	r0, [pc, #32]	@ (80063cc <HAL_InitTick+0xd0>)
 80063ac:	f007 ff8e 	bl	800e2cc <HAL_TIM_Base_Start_IT>
 80063b0:	4603      	mov	r3, r0
 80063b2:	e000      	b.n	80063b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3740      	adds	r7, #64	@ 0x40
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	24000060 	.word	0x24000060
 80063c4:	58024400 	.word	0x58024400
 80063c8:	431bde83 	.word	0x431bde83
 80063cc:	24002a50 	.word	0x24002a50
 80063d0:	40001400 	.word	0x40001400

080063d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <NMI_Handler+0x4>

080063dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <HardFault_Handler+0x4>

080063e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <MemManage_Handler+0x4>

080063ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <BusFault_Handler+0x4>

080063f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <UsageFault_Handler+0x4>

080063fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006400:	bf00      	nop
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006410:	4802      	ldr	r0, [pc, #8]	@ (800641c <DMA1_Stream0_IRQHandler+0x10>)
 8006412:	f002 f99b 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	240003a8 	.word	0x240003a8

08006420 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006424:	4802      	ldr	r0, [pc, #8]	@ (8006430 <DMA1_Stream1_IRQHandler+0x10>)
 8006426:	f002 f991 	bl	800874c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	24000420 	.word	0x24000420

08006434 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8006438:	4802      	ldr	r0, [pc, #8]	@ (8006444 <FDCAN1_IT0_IRQHandler+0x10>)
 800643a:	f004 f965 	bl	800a708 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	24000274 	.word	0x24000274

08006448 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800644c:	4802      	ldr	r0, [pc, #8]	@ (8006458 <FDCAN1_IT1_IRQHandler+0x10>)
 800644e:	f004 f95b 	bl	800a708 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	24000274 	.word	0x24000274

0800645c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006460:	4802      	ldr	r0, [pc, #8]	@ (800646c <USART3_IRQHandler+0x10>)
 8006462:	f008 fb1f 	bl	800eaa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	24000314 	.word	0x24000314

08006470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8006474:	2000      	movs	r0, #0
 8006476:	f000 fa8b 	bl	8006990 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800647a:	bf00      	nop
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006484:	4802      	ldr	r0, [pc, #8]	@ (8006490 <TIM7_IRQHandler+0x10>)
 8006486:	f007 ff99 	bl	800e3bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800648a:	bf00      	nop
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	24002a50 	.word	0x24002a50

08006494 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064a2:	b480      	push	{r7}
 80064a4:	af00      	add	r7, sp, #0
  return 1;
 80064a6:	2301      	movs	r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <_kill>:

int _kill(int pid, int sig)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80064bc:	f00e fee6 	bl	801528c <__errno>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2216      	movs	r2, #22
 80064c4:	601a      	str	r2, [r3, #0]
  return -1;
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <_exit>:

void _exit (int status)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064da:	f04f 31ff 	mov.w	r1, #4294967295
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ffe7 	bl	80064b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80064e4:	bf00      	nop
 80064e6:	e7fd      	b.n	80064e4 <_exit+0x12>

080064e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e00a      	b.n	8006510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80064fa:	f3af 8000 	nop.w
 80064fe:	4601      	mov	r1, r0
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	60ba      	str	r2, [r7, #8]
 8006506:	b2ca      	uxtb	r2, r1
 8006508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	3301      	adds	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	dbf0      	blt.n	80064fa <_read+0x12>
  }

  return len;
 8006518:	687b      	ldr	r3, [r7, #4]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800654a:	605a      	str	r2, [r3, #4]
  return 0;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <_isatty>:

int _isatty(int file)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006562:	2301      	movs	r3, #1
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006594:	4a14      	ldr	r2, [pc, #80]	@ (80065e8 <_sbrk+0x5c>)
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <_sbrk+0x60>)
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065a0:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <_sbrk+0x64>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <_sbrk+0x64>)
 80065aa:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <_sbrk+0x68>)
 80065ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065ae:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <_sbrk+0x64>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d207      	bcs.n	80065cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065bc:	f00e fe66 	bl	801528c <__errno>
 80065c0:	4603      	mov	r3, r0
 80065c2:	220c      	movs	r2, #12
 80065c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e009      	b.n	80065e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065cc:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <_sbrk+0x64>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065d2:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <_sbrk+0x64>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	4a05      	ldr	r2, [pc, #20]	@ (80065f0 <_sbrk+0x64>)
 80065dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	24080000 	.word	0x24080000
 80065ec:	00000400 	.word	0x00000400
 80065f0:	24002a9c 	.word	0x24002a9c
 80065f4:	240075e0 	.word	0x240075e0

080065f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80065fc:	4b43      	ldr	r3, [pc, #268]	@ (800670c <SystemInit+0x114>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	4a42      	ldr	r2, [pc, #264]	@ (800670c <SystemInit+0x114>)
 8006604:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800660c:	4b40      	ldr	r3, [pc, #256]	@ (8006710 <SystemInit+0x118>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	2b06      	cmp	r3, #6
 8006616:	d807      	bhi.n	8006628 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006618:	4b3d      	ldr	r3, [pc, #244]	@ (8006710 <SystemInit+0x118>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f023 030f 	bic.w	r3, r3, #15
 8006620:	4a3b      	ldr	r2, [pc, #236]	@ (8006710 <SystemInit+0x118>)
 8006622:	f043 0307 	orr.w	r3, r3, #7
 8006626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006628:	4b3a      	ldr	r3, [pc, #232]	@ (8006714 <SystemInit+0x11c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a39      	ldr	r2, [pc, #228]	@ (8006714 <SystemInit+0x11c>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006634:	4b37      	ldr	r3, [pc, #220]	@ (8006714 <SystemInit+0x11c>)
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800663a:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <SystemInit+0x11c>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4935      	ldr	r1, [pc, #212]	@ (8006714 <SystemInit+0x11c>)
 8006640:	4b35      	ldr	r3, [pc, #212]	@ (8006718 <SystemInit+0x120>)
 8006642:	4013      	ands	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006646:	4b32      	ldr	r3, [pc, #200]	@ (8006710 <SystemInit+0x118>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006652:	4b2f      	ldr	r3, [pc, #188]	@ (8006710 <SystemInit+0x118>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f023 030f 	bic.w	r3, r3, #15
 800665a:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <SystemInit+0x118>)
 800665c:	f043 0307 	orr.w	r3, r3, #7
 8006660:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006662:	4b2c      	ldr	r3, [pc, #176]	@ (8006714 <SystemInit+0x11c>)
 8006664:	2200      	movs	r2, #0
 8006666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006668:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <SystemInit+0x11c>)
 800666a:	2200      	movs	r2, #0
 800666c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800666e:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <SystemInit+0x11c>)
 8006670:	2200      	movs	r2, #0
 8006672:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006674:	4b27      	ldr	r3, [pc, #156]	@ (8006714 <SystemInit+0x11c>)
 8006676:	4a29      	ldr	r2, [pc, #164]	@ (800671c <SystemInit+0x124>)
 8006678:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800667a:	4b26      	ldr	r3, [pc, #152]	@ (8006714 <SystemInit+0x11c>)
 800667c:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <SystemInit+0x128>)
 800667e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006680:	4b24      	ldr	r3, [pc, #144]	@ (8006714 <SystemInit+0x11c>)
 8006682:	4a28      	ldr	r2, [pc, #160]	@ (8006724 <SystemInit+0x12c>)
 8006684:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006686:	4b23      	ldr	r3, [pc, #140]	@ (8006714 <SystemInit+0x11c>)
 8006688:	2200      	movs	r2, #0
 800668a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800668c:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <SystemInit+0x11c>)
 800668e:	4a25      	ldr	r2, [pc, #148]	@ (8006724 <SystemInit+0x12c>)
 8006690:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006692:	4b20      	ldr	r3, [pc, #128]	@ (8006714 <SystemInit+0x11c>)
 8006694:	2200      	movs	r2, #0
 8006696:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006698:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <SystemInit+0x11c>)
 800669a:	4a22      	ldr	r2, [pc, #136]	@ (8006724 <SystemInit+0x12c>)
 800669c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800669e:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <SystemInit+0x11c>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80066a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <SystemInit+0x11c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <SystemInit+0x11c>)
 80066aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80066b0:	4b18      	ldr	r3, [pc, #96]	@ (8006714 <SystemInit+0x11c>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80066b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006728 <SystemInit+0x130>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b1c      	ldr	r3, [pc, #112]	@ (800672c <SystemInit+0x134>)
 80066bc:	4013      	ands	r3, r2
 80066be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066c2:	d202      	bcs.n	80066ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80066c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006730 <SystemInit+0x138>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80066ca:	4b12      	ldr	r3, [pc, #72]	@ (8006714 <SystemInit+0x11c>)
 80066cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80066d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d113      	bne.n	8006700 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80066d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <SystemInit+0x11c>)
 80066da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80066de:	4a0d      	ldr	r2, [pc, #52]	@ (8006714 <SystemInit+0x11c>)
 80066e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80066e8:	4b12      	ldr	r3, [pc, #72]	@ (8006734 <SystemInit+0x13c>)
 80066ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80066ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <SystemInit+0x11c>)
 80066f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80066f6:	4a07      	ldr	r2, [pc, #28]	@ (8006714 <SystemInit+0x11c>)
 80066f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	e000ed00 	.word	0xe000ed00
 8006710:	52002000 	.word	0x52002000
 8006714:	58024400 	.word	0x58024400
 8006718:	eaf6ed7f 	.word	0xeaf6ed7f
 800671c:	02020200 	.word	0x02020200
 8006720:	01ff0000 	.word	0x01ff0000
 8006724:	01010280 	.word	0x01010280
 8006728:	5c001000 	.word	0x5c001000
 800672c:	ffff0000 	.word	0xffff0000
 8006730:	51008108 	.word	0x51008108
 8006734:	52004000 	.word	0x52004000

08006738 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800673c:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <ExitRun0Mode+0x2c>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a08      	ldr	r2, [pc, #32]	@ (8006764 <ExitRun0Mode+0x2c>)
 8006742:	f043 0302 	orr.w	r3, r3, #2
 8006746:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8006748:	bf00      	nop
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <ExitRun0Mode+0x2c>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f9      	beq.n	800674a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	58024800 	.word	0x58024800

08006768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006768:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80067a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800676c:	f7ff ffe4 	bl	8006738 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006770:	f7ff ff42 	bl	80065f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006774:	480c      	ldr	r0, [pc, #48]	@ (80067a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006776:	490d      	ldr	r1, [pc, #52]	@ (80067ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006778:	4a0d      	ldr	r2, [pc, #52]	@ (80067b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800677a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800677c:	e002      	b.n	8006784 <LoopCopyDataInit>

0800677e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800677e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006782:	3304      	adds	r3, #4

08006784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006788:	d3f9      	bcc.n	800677e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800678a:	4a0a      	ldr	r2, [pc, #40]	@ (80067b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800678c:	4c0a      	ldr	r4, [pc, #40]	@ (80067b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800678e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006790:	e001      	b.n	8006796 <LoopFillZerobss>

08006792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006794:	3204      	adds	r2, #4

08006796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006798:	d3fb      	bcc.n	8006792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800679a:	f00e fd7d 	bl	8015298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800679e:	f7fd fffd 	bl	800479c <main>
  bx  lr
 80067a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80067a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80067a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80067ac:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 80067b0:	080184f8 	.word	0x080184f8
  ldr r2, =_sbss
 80067b4:	24000234 	.word	0x24000234
  ldr r4, =_ebss
 80067b8:	240075e0 	.word	0x240075e0

080067bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067bc:	e7fe      	b.n	80067bc <ADC3_IRQHandler>
	...

080067c0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	@ 0x30
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <BSP_LED_Init+0x28>
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d006      	beq.n	80067e8 <BSP_LED_Init+0x28>
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d003      	beq.n	80067e8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067e0:	f06f 0301 	mvn.w	r3, #1
 80067e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e6:	e055      	b.n	8006894 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80067ee:	4b2c      	ldr	r3, [pc, #176]	@ (80068a0 <BSP_LED_Init+0xe0>)
 80067f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067f4:	4a2a      	ldr	r2, [pc, #168]	@ (80068a0 <BSP_LED_Init+0xe0>)
 80067f6:	f043 0302 	orr.w	r3, r3, #2
 80067fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067fe:	4b28      	ldr	r3, [pc, #160]	@ (80068a0 <BSP_LED_Init+0xe0>)
 8006800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	e021      	b.n	8006852 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10f      	bne.n	8006834 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8006814:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <BSP_LED_Init+0xe0>)
 8006816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800681a:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <BSP_LED_Init+0xe0>)
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006824:	4b1e      	ldr	r3, [pc, #120]	@ (80068a0 <BSP_LED_Init+0xe0>)
 8006826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	e00e      	b.n	8006852 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8006834:	4b1a      	ldr	r3, [pc, #104]	@ (80068a0 <BSP_LED_Init+0xe0>)
 8006836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800683a:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <BSP_LED_Init+0xe0>)
 800683c:	f043 0302 	orr.w	r3, r3, #2
 8006840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006844:	4b16      	ldr	r3, [pc, #88]	@ (80068a0 <BSP_LED_Init+0xe0>)
 8006846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	4a13      	ldr	r2, [pc, #76]	@ (80068a4 <BSP_LED_Init+0xe4>)
 8006856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800685c:	2301      	movs	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8006860:	2300      	movs	r3, #0
 8006862:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006864:	2303      	movs	r3, #3
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	4a0f      	ldr	r2, [pc, #60]	@ (80068a8 <BSP_LED_Init+0xe8>)
 800686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006870:	f107 0218 	add.w	r2, r7, #24
 8006874:	4611      	mov	r1, r2
 8006876:	4618      	mov	r0, r3
 8006878:	f004 fc54 	bl	800b124 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	4a0a      	ldr	r2, [pc, #40]	@ (80068a8 <BSP_LED_Init+0xe8>)
 8006880:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	4a07      	ldr	r2, [pc, #28]	@ (80068a4 <BSP_LED_Init+0xe4>)
 8006888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688c:	2200      	movs	r2, #0
 800688e:	4619      	mov	r1, r3
 8006890:	f004 fdf8 	bl	800b484 <HAL_GPIO_WritePin>
  }

  return ret;
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006896:	4618      	mov	r0, r3
 8006898:	3730      	adds	r7, #48	@ 0x30
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	58024400 	.word	0x58024400
 80068a4:	08017f2c 	.word	0x08017f2c
 80068a8:	24000048 	.word	0x24000048

080068ac <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	460a      	mov	r2, r1
 80068b6:	71fb      	strb	r3, [r7, #7]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80068bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006978 <BSP_PB_Init+0xcc>)
 80068be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <BSP_PB_Init+0xcc>)
 80068c4:	f043 0304 	orr.w	r3, r3, #4
 80068c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006978 <BSP_PB_Init+0xcc>)
 80068ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80068da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80068de:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80068e0:	2302      	movs	r3, #2
 80068e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80068e4:	2302      	movs	r3, #2
 80068e6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80068e8:	79bb      	ldrb	r3, [r7, #6]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	4a21      	ldr	r2, [pc, #132]	@ (800697c <BSP_PB_Init+0xd0>)
 80068f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fa:	f107 020c 	add.w	r2, r7, #12
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f004 fc0f 	bl	800b124 <HAL_GPIO_Init>
 8006906:	e031      	b.n	800696c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006908:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800690c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	4a1a      	ldr	r2, [pc, #104]	@ (800697c <BSP_PB_Init+0xd0>)
 8006912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006916:	f107 020c 	add.w	r2, r7, #12
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f004 fc01 	bl	800b124 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4a16      	ldr	r2, [pc, #88]	@ (8006980 <BSP_PB_Init+0xd4>)
 8006928:	441a      	add	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4915      	ldr	r1, [pc, #84]	@ (8006984 <BSP_PB_Init+0xd8>)
 800692e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f003 fa46 	bl	8009dc6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4a10      	ldr	r2, [pc, #64]	@ (8006980 <BSP_PB_Init+0xd4>)
 8006940:	1898      	adds	r0, r3, r2
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	4a10      	ldr	r2, [pc, #64]	@ (8006988 <BSP_PB_Init+0xdc>)
 8006946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694a:	461a      	mov	r2, r3
 800694c:	2100      	movs	r1, #0
 800694e:	f003 fa1b 	bl	8009d88 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006952:	2028      	movs	r0, #40	@ 0x28
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	4a0d      	ldr	r2, [pc, #52]	@ (800698c <BSP_PB_Init+0xe0>)
 8006958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695c:	2200      	movs	r2, #0
 800695e:	4619      	mov	r1, r3
 8006960:	f000 f974 	bl	8006c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006964:	2328      	movs	r3, #40	@ 0x28
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f98a 	bl	8006c80 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
 800697c:	24000054 	.word	0x24000054
 8006980:	24002aa0 	.word	0x24002aa0
 8006984:	08017f34 	.word	0x08017f34
 8006988:	24000058 	.word	0x24000058
 800698c:	2400005c 	.word	0x2400005c

08006990 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	4a04      	ldr	r2, [pc, #16]	@ (80069b0 <BSP_PB_IRQHandler+0x20>)
 80069a0:	4413      	add	r3, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f003 fa24 	bl	8009df0 <HAL_EXTI_IRQHandler>
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	24002aa0 	.word	0x24002aa0

080069b4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7fa fe9b 	bl	80016f4 <BSP_PB_Callback>
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069ca:	2003      	movs	r0, #3
 80069cc:	f000 f933 	bl	8006c36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069d0:	f005 fbd6 	bl	800c180 <HAL_RCC_GetSysClockFreq>
 80069d4:	4602      	mov	r2, r0
 80069d6:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <HAL_Init+0x68>)
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	4913      	ldr	r1, [pc, #76]	@ (8006a30 <HAL_Init+0x6c>)
 80069e2:	5ccb      	ldrb	r3, [r1, r3]
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ee:	4b0f      	ldr	r3, [pc, #60]	@ (8006a2c <HAL_Init+0x68>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006a30 <HAL_Init+0x6c>)
 80069f8:	5cd3      	ldrb	r3, [r2, r3]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
 8006a04:	4a0b      	ldr	r2, [pc, #44]	@ (8006a34 <HAL_Init+0x70>)
 8006a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a08:	4a0b      	ldr	r2, [pc, #44]	@ (8006a38 <HAL_Init+0x74>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a0e:	200f      	movs	r0, #15
 8006a10:	f7ff fc74 	bl	80062fc <HAL_InitTick>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e002      	b.n	8006a24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006a1e:	f7ff faef 	bl	8006000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	08017f1c 	.word	0x08017f1c
 8006a34:	24000044 	.word	0x24000044
 8006a38:	24000040 	.word	0x24000040

08006a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a40:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_IncTick+0x20>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <HAL_IncTick+0x24>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4a04      	ldr	r2, [pc, #16]	@ (8006a60 <HAL_IncTick+0x24>)
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	24000064 	.word	0x24000064
 8006a60:	24002aa8 	.word	0x24002aa8

08006a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return uwTick;
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <HAL_GetTick+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	24002aa8 	.word	0x24002aa8

08006a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a84:	f7ff ffee 	bl	8006a64 <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d005      	beq.n	8006aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <HAL_Delay+0x44>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006aa2:	bf00      	nop
 8006aa4:	f7ff ffde 	bl	8006a64 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d8f7      	bhi.n	8006aa4 <HAL_Delay+0x28>
  {
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	24000064 	.word	0x24000064

08006ac4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006ac8:	4b03      	ldr	r3, [pc, #12]	@ (8006ad8 <HAL_GetREVID+0x14>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	0c1b      	lsrs	r3, r3, #16
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	5c001000 	.word	0x5c001000

08006adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aec:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <__NVIC_SetPriorityGrouping+0x40>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006af8:	4013      	ands	r3, r2
 8006afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006b04:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <__NVIC_SetPriorityGrouping+0x44>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b0a:	4a04      	ldr	r2, [pc, #16]	@ (8006b1c <__NVIC_SetPriorityGrouping+0x40>)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	60d3      	str	r3, [r2, #12]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	e000ed00 	.word	0xe000ed00
 8006b20:	05fa0000 	.word	0x05fa0000

08006b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b28:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <__NVIC_GetPriorityGrouping+0x18>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	f003 0307 	and.w	r3, r3, #7
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	e000ed00 	.word	0xe000ed00

08006b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db0b      	blt.n	8006b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	f003 021f 	and.w	r2, r3, #31
 8006b58:	4907      	ldr	r1, [pc, #28]	@ (8006b78 <__NVIC_EnableIRQ+0x38>)
 8006b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	2001      	movs	r0, #1
 8006b62:	fa00 f202 	lsl.w	r2, r0, r2
 8006b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	e000e100 	.word	0xe000e100

08006b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	6039      	str	r1, [r7, #0]
 8006b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	db0a      	blt.n	8006ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	490c      	ldr	r1, [pc, #48]	@ (8006bc8 <__NVIC_SetPriority+0x4c>)
 8006b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b9a:	0112      	lsls	r2, r2, #4
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ba4:	e00a      	b.n	8006bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4908      	ldr	r1, [pc, #32]	@ (8006bcc <__NVIC_SetPriority+0x50>)
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	0112      	lsls	r2, r2, #4
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	440b      	add	r3, r1
 8006bba:	761a      	strb	r2, [r3, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000e100 	.word	0xe000e100
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b089      	sub	sp, #36	@ 0x24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f1c3 0307 	rsb	r3, r3, #7
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	bf28      	it	cs
 8006bee:	2304      	movcs	r3, #4
 8006bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d902      	bls.n	8006c00 <NVIC_EncodePriority+0x30>
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3b03      	subs	r3, #3
 8006bfe:	e000      	b.n	8006c02 <NVIC_EncodePriority+0x32>
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c04:	f04f 32ff 	mov.w	r2, #4294967295
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	401a      	ands	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c18:	f04f 31ff 	mov.w	r1, #4294967295
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	43d9      	mvns	r1, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c28:	4313      	orrs	r3, r2
         );
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3724      	adds	r7, #36	@ 0x24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff ff4c 	bl	8006adc <__NVIC_SetPriorityGrouping>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c5a:	f7ff ff63 	bl	8006b24 <__NVIC_GetPriorityGrouping>
 8006c5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	6978      	ldr	r0, [r7, #20]
 8006c66:	f7ff ffb3 	bl	8006bd0 <NVIC_EncodePriority>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff ff82 	bl	8006b7c <__NVIC_SetPriority>
}
 8006c78:	bf00      	nop
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff ff56 	bl	8006b40 <__NVIC_EnableIRQ>
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006ca0:	f3bf 8f5f 	dmb	sy
}
 8006ca4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006ca6:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <HAL_MPU_Disable+0x28>)
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	4a06      	ldr	r2, [pc, #24]	@ (8006cc4 <HAL_MPU_Disable+0x28>)
 8006cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cb0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006cb2:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <HAL_MPU_Disable+0x2c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	605a      	str	r2, [r3, #4]
}
 8006cb8:	bf00      	nop
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	e000ed00 	.word	0xe000ed00
 8006cc8:	e000ed90 	.word	0xe000ed90

08006ccc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006d04 <HAL_MPU_Enable+0x38>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <HAL_MPU_Enable+0x3c>)
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	4a09      	ldr	r2, [pc, #36]	@ (8006d08 <HAL_MPU_Enable+0x3c>)
 8006ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ce8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006cea:	f3bf 8f4f 	dsb	sy
}
 8006cee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cf0:	f3bf 8f6f 	isb	sy
}
 8006cf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	e000ed90 	.word	0xe000ed90
 8006d08:	e000ed00 	.word	0xe000ed00

08006d0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	785a      	ldrb	r2, [r3, #1]
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <HAL_MPU_ConfigRegion+0x7c>)
 8006d1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d88 <HAL_MPU_ConfigRegion+0x7c>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4a19      	ldr	r2, [pc, #100]	@ (8006d88 <HAL_MPU_ConfigRegion+0x7c>)
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006d28:	4a17      	ldr	r2, [pc, #92]	@ (8006d88 <HAL_MPU_ConfigRegion+0x7c>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7b1b      	ldrb	r3, [r3, #12]
 8006d34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7adb      	ldrb	r3, [r3, #11]
 8006d3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7a9b      	ldrb	r3, [r3, #10]
 8006d42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7b5b      	ldrb	r3, [r3, #13]
 8006d4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7b9b      	ldrb	r3, [r3, #14]
 8006d52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7bdb      	ldrb	r3, [r3, #15]
 8006d5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7a5b      	ldrb	r3, [r3, #9]
 8006d62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7a1b      	ldrb	r3, [r3, #8]
 8006d6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	7812      	ldrb	r2, [r2, #0]
 8006d72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d74:	4a04      	ldr	r2, [pc, #16]	@ (8006d88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d78:	6113      	str	r3, [r2, #16]
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	e000ed90 	.word	0xe000ed90

08006d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006d94:	f7ff fe66 	bl	8006a64 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e316      	b.n	80073d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a66      	ldr	r2, [pc, #408]	@ (8006f44 <HAL_DMA_Init+0x1b8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d04a      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a65      	ldr	r2, [pc, #404]	@ (8006f48 <HAL_DMA_Init+0x1bc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d045      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a63      	ldr	r2, [pc, #396]	@ (8006f4c <HAL_DMA_Init+0x1c0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d040      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a62      	ldr	r2, [pc, #392]	@ (8006f50 <HAL_DMA_Init+0x1c4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d03b      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a60      	ldr	r2, [pc, #384]	@ (8006f54 <HAL_DMA_Init+0x1c8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d036      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a5f      	ldr	r2, [pc, #380]	@ (8006f58 <HAL_DMA_Init+0x1cc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d031      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a5d      	ldr	r2, [pc, #372]	@ (8006f5c <HAL_DMA_Init+0x1d0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d02c      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a5c      	ldr	r2, [pc, #368]	@ (8006f60 <HAL_DMA_Init+0x1d4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d027      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a5a      	ldr	r2, [pc, #360]	@ (8006f64 <HAL_DMA_Init+0x1d8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d022      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a59      	ldr	r2, [pc, #356]	@ (8006f68 <HAL_DMA_Init+0x1dc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d01d      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a57      	ldr	r2, [pc, #348]	@ (8006f6c <HAL_DMA_Init+0x1e0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d018      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a56      	ldr	r2, [pc, #344]	@ (8006f70 <HAL_DMA_Init+0x1e4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d013      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a54      	ldr	r2, [pc, #336]	@ (8006f74 <HAL_DMA_Init+0x1e8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a53      	ldr	r2, [pc, #332]	@ (8006f78 <HAL_DMA_Init+0x1ec>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a51      	ldr	r2, [pc, #324]	@ (8006f7c <HAL_DMA_Init+0x1f0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_DMA_Init+0xb8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a50      	ldr	r2, [pc, #320]	@ (8006f80 <HAL_DMA_Init+0x1f4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d101      	bne.n	8006e48 <HAL_DMA_Init+0xbc>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_DMA_Init+0xbe>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 813b 	beq.w	80070c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a37      	ldr	r2, [pc, #220]	@ (8006f44 <HAL_DMA_Init+0x1b8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a36      	ldr	r2, [pc, #216]	@ (8006f48 <HAL_DMA_Init+0x1bc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a34      	ldr	r2, [pc, #208]	@ (8006f4c <HAL_DMA_Init+0x1c0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a33      	ldr	r2, [pc, #204]	@ (8006f50 <HAL_DMA_Init+0x1c4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	@ (8006f54 <HAL_DMA_Init+0x1c8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a30      	ldr	r2, [pc, #192]	@ (8006f58 <HAL_DMA_Init+0x1cc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f5c <HAL_DMA_Init+0x1d0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <HAL_DMA_Init+0x1d4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f64 <HAL_DMA_Init+0x1d8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8006f68 <HAL_DMA_Init+0x1dc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	@ (8006f6c <HAL_DMA_Init+0x1e0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a27      	ldr	r2, [pc, #156]	@ (8006f70 <HAL_DMA_Init+0x1e4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a25      	ldr	r2, [pc, #148]	@ (8006f74 <HAL_DMA_Init+0x1e8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_DMA_Init+0x1ec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	@ (8006f7c <HAL_DMA_Init+0x1f0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_Init+0x174>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <HAL_DMA_Init+0x1f4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <HAL_DMA_Init+0x186>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0201 	bic.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e007      	b.n	8006f22 <HAL_DMA_Init+0x196>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f22:	e02f      	b.n	8006f84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f24:	f7ff fd9e 	bl	8006a64 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d928      	bls.n	8006f84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e246      	b.n	80073d2 <HAL_DMA_Init+0x646>
 8006f44:	40020010 	.word	0x40020010
 8006f48:	40020028 	.word	0x40020028
 8006f4c:	40020040 	.word	0x40020040
 8006f50:	40020058 	.word	0x40020058
 8006f54:	40020070 	.word	0x40020070
 8006f58:	40020088 	.word	0x40020088
 8006f5c:	400200a0 	.word	0x400200a0
 8006f60:	400200b8 	.word	0x400200b8
 8006f64:	40020410 	.word	0x40020410
 8006f68:	40020428 	.word	0x40020428
 8006f6c:	40020440 	.word	0x40020440
 8006f70:	40020458 	.word	0x40020458
 8006f74:	40020470 	.word	0x40020470
 8006f78:	40020488 	.word	0x40020488
 8006f7c:	400204a0 	.word	0x400204a0
 8006f80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1c8      	bne.n	8006f24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4b83      	ldr	r3, [pc, #524]	@ (80071ac <HAL_DMA_Init+0x420>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006faa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d107      	bne.n	8006fe8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006fe8:	4b71      	ldr	r3, [pc, #452]	@ (80071b0 <HAL_DMA_Init+0x424>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b71      	ldr	r3, [pc, #452]	@ (80071b4 <HAL_DMA_Init+0x428>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff4:	d328      	bcc.n	8007048 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b28      	cmp	r3, #40	@ 0x28
 8006ffc:	d903      	bls.n	8007006 <HAL_DMA_Init+0x27a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b2e      	cmp	r3, #46	@ 0x2e
 8007004:	d917      	bls.n	8007036 <HAL_DMA_Init+0x2aa>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b3e      	cmp	r3, #62	@ 0x3e
 800700c:	d903      	bls.n	8007016 <HAL_DMA_Init+0x28a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b42      	cmp	r3, #66	@ 0x42
 8007014:	d90f      	bls.n	8007036 <HAL_DMA_Init+0x2aa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b46      	cmp	r3, #70	@ 0x46
 800701c:	d903      	bls.n	8007026 <HAL_DMA_Init+0x29a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b48      	cmp	r3, #72	@ 0x48
 8007024:	d907      	bls.n	8007036 <HAL_DMA_Init+0x2aa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b4e      	cmp	r3, #78	@ 0x4e
 800702c:	d905      	bls.n	800703a <HAL_DMA_Init+0x2ae>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b52      	cmp	r3, #82	@ 0x52
 8007034:	d801      	bhi.n	800703a <HAL_DMA_Init+0x2ae>
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <HAL_DMA_Init+0x2b0>
 800703a:	2300      	movs	r3, #0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007046:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	2b04      	cmp	r3, #4
 8007070:	d117      	bne.n	80070a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f002 fcf5 	bl	8009a74 <DMA_CheckFifoParam>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2240      	movs	r2, #64	@ 0x40
 8007094:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e197      	b.n	80073d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f002 fc30 	bl	8009910 <DMA_CalcBaseAndBitshift>
 80070b0:	4603      	mov	r3, r0
 80070b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	223f      	movs	r2, #63	@ 0x3f
 80070be:	409a      	lsls	r2, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	e0cd      	b.n	8007262 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a3b      	ldr	r2, [pc, #236]	@ (80071b8 <HAL_DMA_Init+0x42c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a39      	ldr	r2, [pc, #228]	@ (80071bc <HAL_DMA_Init+0x430>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01d      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a38      	ldr	r2, [pc, #224]	@ (80071c0 <HAL_DMA_Init+0x434>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a36      	ldr	r2, [pc, #216]	@ (80071c4 <HAL_DMA_Init+0x438>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a35      	ldr	r2, [pc, #212]	@ (80071c8 <HAL_DMA_Init+0x43c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a33      	ldr	r2, [pc, #204]	@ (80071cc <HAL_DMA_Init+0x440>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a32      	ldr	r2, [pc, #200]	@ (80071d0 <HAL_DMA_Init+0x444>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_DMA_Init+0x38a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a30      	ldr	r2, [pc, #192]	@ (80071d4 <HAL_DMA_Init+0x448>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d101      	bne.n	800711a <HAL_DMA_Init+0x38e>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_DMA_Init+0x390>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8097 	beq.w	8007250 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a24      	ldr	r2, [pc, #144]	@ (80071b8 <HAL_DMA_Init+0x42c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d021      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a22      	ldr	r2, [pc, #136]	@ (80071bc <HAL_DMA_Init+0x430>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01c      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a21      	ldr	r2, [pc, #132]	@ (80071c0 <HAL_DMA_Init+0x434>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d017      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1f      	ldr	r2, [pc, #124]	@ (80071c4 <HAL_DMA_Init+0x438>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d012      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1e      	ldr	r2, [pc, #120]	@ (80071c8 <HAL_DMA_Init+0x43c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00d      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1c      	ldr	r2, [pc, #112]	@ (80071cc <HAL_DMA_Init+0x440>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d008      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <HAL_DMA_Init+0x444>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <HAL_DMA_Init+0x3e4>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a19      	ldr	r2, [pc, #100]	@ (80071d4 <HAL_DMA_Init+0x448>)
 800716e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <HAL_DMA_Init+0x44c>)
 800718c:	4013      	ands	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b40      	cmp	r3, #64	@ 0x40
 8007196:	d021      	beq.n	80071dc <HAL_DMA_Init+0x450>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b80      	cmp	r3, #128	@ 0x80
 800719e:	d102      	bne.n	80071a6 <HAL_DMA_Init+0x41a>
 80071a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071a4:	e01b      	b.n	80071de <HAL_DMA_Init+0x452>
 80071a6:	2300      	movs	r3, #0
 80071a8:	e019      	b.n	80071de <HAL_DMA_Init+0x452>
 80071aa:	bf00      	nop
 80071ac:	fe10803f 	.word	0xfe10803f
 80071b0:	5c001000 	.word	0x5c001000
 80071b4:	ffff0000 	.word	0xffff0000
 80071b8:	58025408 	.word	0x58025408
 80071bc:	5802541c 	.word	0x5802541c
 80071c0:	58025430 	.word	0x58025430
 80071c4:	58025444 	.word	0x58025444
 80071c8:	58025458 	.word	0x58025458
 80071cc:	5802546c 	.word	0x5802546c
 80071d0:	58025480 	.word	0x58025480
 80071d4:	58025494 	.word	0x58025494
 80071d8:	fffe000f 	.word	0xfffe000f
 80071dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68d2      	ldr	r2, [r2, #12]
 80071e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800720c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	4b6e      	ldr	r3, [pc, #440]	@ (80073dc <HAL_DMA_Init+0x650>)
 8007224:	4413      	add	r3, r2
 8007226:	4a6e      	ldr	r2, [pc, #440]	@ (80073e0 <HAL_DMA_Init+0x654>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	009a      	lsls	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f002 fb6b 	bl	8009910 <DMA_CalcBaseAndBitshift>
 800723a:	4603      	mov	r3, r0
 800723c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	2201      	movs	r2, #1
 8007248:	409a      	lsls	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e008      	b.n	8007262 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2240      	movs	r2, #64	@ 0x40
 8007254:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0b7      	b.n	80073d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a5f      	ldr	r2, [pc, #380]	@ (80073e4 <HAL_DMA_Init+0x658>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d072      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a5d      	ldr	r2, [pc, #372]	@ (80073e8 <HAL_DMA_Init+0x65c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d06d      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a5c      	ldr	r2, [pc, #368]	@ (80073ec <HAL_DMA_Init+0x660>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d068      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5a      	ldr	r2, [pc, #360]	@ (80073f0 <HAL_DMA_Init+0x664>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d063      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a59      	ldr	r2, [pc, #356]	@ (80073f4 <HAL_DMA_Init+0x668>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d05e      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a57      	ldr	r2, [pc, #348]	@ (80073f8 <HAL_DMA_Init+0x66c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d059      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a56      	ldr	r2, [pc, #344]	@ (80073fc <HAL_DMA_Init+0x670>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d054      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a54      	ldr	r2, [pc, #336]	@ (8007400 <HAL_DMA_Init+0x674>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d04f      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a53      	ldr	r2, [pc, #332]	@ (8007404 <HAL_DMA_Init+0x678>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d04a      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a51      	ldr	r2, [pc, #324]	@ (8007408 <HAL_DMA_Init+0x67c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d045      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a50      	ldr	r2, [pc, #320]	@ (800740c <HAL_DMA_Init+0x680>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d040      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a4e      	ldr	r2, [pc, #312]	@ (8007410 <HAL_DMA_Init+0x684>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d03b      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4d      	ldr	r2, [pc, #308]	@ (8007414 <HAL_DMA_Init+0x688>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d036      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a4b      	ldr	r2, [pc, #300]	@ (8007418 <HAL_DMA_Init+0x68c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d031      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4a      	ldr	r2, [pc, #296]	@ (800741c <HAL_DMA_Init+0x690>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d02c      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a48      	ldr	r2, [pc, #288]	@ (8007420 <HAL_DMA_Init+0x694>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d027      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a47      	ldr	r2, [pc, #284]	@ (8007424 <HAL_DMA_Init+0x698>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d022      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a45      	ldr	r2, [pc, #276]	@ (8007428 <HAL_DMA_Init+0x69c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01d      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a44      	ldr	r2, [pc, #272]	@ (800742c <HAL_DMA_Init+0x6a0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a42      	ldr	r2, [pc, #264]	@ (8007430 <HAL_DMA_Init+0x6a4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d013      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a41      	ldr	r2, [pc, #260]	@ (8007434 <HAL_DMA_Init+0x6a8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a3f      	ldr	r2, [pc, #252]	@ (8007438 <HAL_DMA_Init+0x6ac>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a3e      	ldr	r2, [pc, #248]	@ (800743c <HAL_DMA_Init+0x6b0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_DMA_Init+0x5c6>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3c      	ldr	r2, [pc, #240]	@ (8007440 <HAL_DMA_Init+0x6b4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d101      	bne.n	8007356 <HAL_DMA_Init+0x5ca>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <HAL_DMA_Init+0x5cc>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d032      	beq.n	80073c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f002 fc05 	bl	8009b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b80      	cmp	r3, #128	@ 0x80
 8007368:	d102      	bne.n	8007370 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007384:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <HAL_DMA_Init+0x624>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b08      	cmp	r3, #8
 8007394:	d80c      	bhi.n	80073b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f002 fc82 	bl	8009ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	e008      	b.n	80073c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	a7fdabf8 	.word	0xa7fdabf8
 80073e0:	cccccccd 	.word	0xcccccccd
 80073e4:	40020010 	.word	0x40020010
 80073e8:	40020028 	.word	0x40020028
 80073ec:	40020040 	.word	0x40020040
 80073f0:	40020058 	.word	0x40020058
 80073f4:	40020070 	.word	0x40020070
 80073f8:	40020088 	.word	0x40020088
 80073fc:	400200a0 	.word	0x400200a0
 8007400:	400200b8 	.word	0x400200b8
 8007404:	40020410 	.word	0x40020410
 8007408:	40020428 	.word	0x40020428
 800740c:	40020440 	.word	0x40020440
 8007410:	40020458 	.word	0x40020458
 8007414:	40020470 	.word	0x40020470
 8007418:	40020488 	.word	0x40020488
 800741c:	400204a0 	.word	0x400204a0
 8007420:	400204b8 	.word	0x400204b8
 8007424:	58025408 	.word	0x58025408
 8007428:	5802541c 	.word	0x5802541c
 800742c:	58025430 	.word	0x58025430
 8007430:	58025444 	.word	0x58025444
 8007434:	58025458 	.word	0x58025458
 8007438:	5802546c 	.word	0x5802546c
 800743c:	58025480 	.word	0x58025480
 8007440:	58025494 	.word	0x58025494

08007444 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e1a8      	b.n	80077a8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a82      	ldr	r2, [pc, #520]	@ (8007664 <HAL_DMA_DeInit+0x220>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d04a      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a80      	ldr	r2, [pc, #512]	@ (8007668 <HAL_DMA_DeInit+0x224>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d045      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a7f      	ldr	r2, [pc, #508]	@ (800766c <HAL_DMA_DeInit+0x228>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d040      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a7d      	ldr	r2, [pc, #500]	@ (8007670 <HAL_DMA_DeInit+0x22c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d03b      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a7c      	ldr	r2, [pc, #496]	@ (8007674 <HAL_DMA_DeInit+0x230>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d036      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a7a      	ldr	r2, [pc, #488]	@ (8007678 <HAL_DMA_DeInit+0x234>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d031      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a79      	ldr	r2, [pc, #484]	@ (800767c <HAL_DMA_DeInit+0x238>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d02c      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a77      	ldr	r2, [pc, #476]	@ (8007680 <HAL_DMA_DeInit+0x23c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d027      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a76      	ldr	r2, [pc, #472]	@ (8007684 <HAL_DMA_DeInit+0x240>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a74      	ldr	r2, [pc, #464]	@ (8007688 <HAL_DMA_DeInit+0x244>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01d      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a73      	ldr	r2, [pc, #460]	@ (800768c <HAL_DMA_DeInit+0x248>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a71      	ldr	r2, [pc, #452]	@ (8007690 <HAL_DMA_DeInit+0x24c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a70      	ldr	r2, [pc, #448]	@ (8007694 <HAL_DMA_DeInit+0x250>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007698 <HAL_DMA_DeInit+0x254>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a6d      	ldr	r2, [pc, #436]	@ (800769c <HAL_DMA_DeInit+0x258>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <HAL_DMA_DeInit+0xb2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a6b      	ldr	r2, [pc, #428]	@ (80076a0 <HAL_DMA_DeInit+0x25c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d108      	bne.n	8007508 <HAL_DMA_DeInit+0xc4>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e007      	b.n	8007518 <HAL_DMA_DeInit+0xd4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a51      	ldr	r2, [pc, #324]	@ (8007664 <HAL_DMA_DeInit+0x220>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d04a      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a50      	ldr	r2, [pc, #320]	@ (8007668 <HAL_DMA_DeInit+0x224>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d045      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a4e      	ldr	r2, [pc, #312]	@ (800766c <HAL_DMA_DeInit+0x228>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d040      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a4d      	ldr	r2, [pc, #308]	@ (8007670 <HAL_DMA_DeInit+0x22c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d03b      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a4b      	ldr	r2, [pc, #300]	@ (8007674 <HAL_DMA_DeInit+0x230>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d036      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a4a      	ldr	r2, [pc, #296]	@ (8007678 <HAL_DMA_DeInit+0x234>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a48      	ldr	r2, [pc, #288]	@ (800767c <HAL_DMA_DeInit+0x238>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d02c      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a47      	ldr	r2, [pc, #284]	@ (8007680 <HAL_DMA_DeInit+0x23c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d027      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a45      	ldr	r2, [pc, #276]	@ (8007684 <HAL_DMA_DeInit+0x240>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a44      	ldr	r2, [pc, #272]	@ (8007688 <HAL_DMA_DeInit+0x244>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a42      	ldr	r2, [pc, #264]	@ (800768c <HAL_DMA_DeInit+0x248>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a41      	ldr	r2, [pc, #260]	@ (8007690 <HAL_DMA_DeInit+0x24c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3f      	ldr	r2, [pc, #252]	@ (8007694 <HAL_DMA_DeInit+0x250>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a3e      	ldr	r2, [pc, #248]	@ (8007698 <HAL_DMA_DeInit+0x254>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a3c      	ldr	r2, [pc, #240]	@ (800769c <HAL_DMA_DeInit+0x258>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_DMA_DeInit+0x174>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a3b      	ldr	r2, [pc, #236]	@ (80076a0 <HAL_DMA_DeInit+0x25c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d101      	bne.n	80075bc <HAL_DMA_DeInit+0x178>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_DMA_DeInit+0x17a>
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d025      	beq.n	800760e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2221      	movs	r2, #33	@ 0x21
 80075f0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 f98c 	bl	8009910 <DMA_CalcBaseAndBitshift>
 80075f8:	4603      	mov	r3, r0
 80075fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	223f      	movs	r2, #63	@ 0x3f
 8007606:	409a      	lsls	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	e081      	b.n	8007712 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a24      	ldr	r2, [pc, #144]	@ (80076a4 <HAL_DMA_DeInit+0x260>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a22      	ldr	r2, [pc, #136]	@ (80076a8 <HAL_DMA_DeInit+0x264>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a21      	ldr	r2, [pc, #132]	@ (80076ac <HAL_DMA_DeInit+0x268>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <HAL_DMA_DeInit+0x26c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1e      	ldr	r2, [pc, #120]	@ (80076b4 <HAL_DMA_DeInit+0x270>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <HAL_DMA_DeInit+0x274>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <HAL_DMA_DeInit+0x278>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_DMA_DeInit+0x21a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a19      	ldr	r2, [pc, #100]	@ (80076c0 <HAL_DMA_DeInit+0x27c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d132      	bne.n	80076c4 <HAL_DMA_DeInit+0x280>
 800765e:	2301      	movs	r3, #1
 8007660:	e031      	b.n	80076c6 <HAL_DMA_DeInit+0x282>
 8007662:	bf00      	nop
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	58025408 	.word	0x58025408
 80076a8:	5802541c 	.word	0x5802541c
 80076ac:	58025430 	.word	0x58025430
 80076b0:	58025444 	.word	0x58025444
 80076b4:	58025458 	.word	0x58025458
 80076b8:	5802546c 	.word	0x5802546c
 80076bc:	58025480 	.word	0x58025480
 80076c0:	58025494 	.word	0x58025494
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d021      	beq.n	800770e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f002 f90c 	bl	8009910 <DMA_CalcBaseAndBitshift>
 80076f8:	4603      	mov	r3, r0
 80076fa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2201      	movs	r2, #1
 8007706:	409a      	lsls	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	e001      	b.n	8007712 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e04a      	b.n	80077a8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f002 fa2a 	bl	8009b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007730:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00f      	beq.n	800775a <HAL_DMA_DeInit+0x316>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b08      	cmp	r3, #8
 8007740:	d80b      	bhi.n	800775a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f002 faac 	bl	8009ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007758:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e226      	b.n	8007c1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_DMA_Start_IT+0x2a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e21f      	b.n	8007c1a <HAL_DMA_Start_IT+0x46a>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	f040 820a 	bne.w	8007c04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a68      	ldr	r2, [pc, #416]	@ (80079a4 <HAL_DMA_Start_IT+0x1f4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d04a      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a66      	ldr	r2, [pc, #408]	@ (80079a8 <HAL_DMA_Start_IT+0x1f8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d045      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a65      	ldr	r2, [pc, #404]	@ (80079ac <HAL_DMA_Start_IT+0x1fc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d040      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a63      	ldr	r2, [pc, #396]	@ (80079b0 <HAL_DMA_Start_IT+0x200>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d03b      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a62      	ldr	r2, [pc, #392]	@ (80079b4 <HAL_DMA_Start_IT+0x204>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d036      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a60      	ldr	r2, [pc, #384]	@ (80079b8 <HAL_DMA_Start_IT+0x208>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d031      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a5f      	ldr	r2, [pc, #380]	@ (80079bc <HAL_DMA_Start_IT+0x20c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d02c      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5d      	ldr	r2, [pc, #372]	@ (80079c0 <HAL_DMA_Start_IT+0x210>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d027      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a5c      	ldr	r2, [pc, #368]	@ (80079c4 <HAL_DMA_Start_IT+0x214>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d022      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5a      	ldr	r2, [pc, #360]	@ (80079c8 <HAL_DMA_Start_IT+0x218>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d01d      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a59      	ldr	r2, [pc, #356]	@ (80079cc <HAL_DMA_Start_IT+0x21c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d018      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a57      	ldr	r2, [pc, #348]	@ (80079d0 <HAL_DMA_Start_IT+0x220>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a56      	ldr	r2, [pc, #344]	@ (80079d4 <HAL_DMA_Start_IT+0x224>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a54      	ldr	r2, [pc, #336]	@ (80079d8 <HAL_DMA_Start_IT+0x228>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a53      	ldr	r2, [pc, #332]	@ (80079dc <HAL_DMA_Start_IT+0x22c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_DMA_Start_IT+0xee>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a51      	ldr	r2, [pc, #324]	@ (80079e0 <HAL_DMA_Start_IT+0x230>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <HAL_DMA_Start_IT+0x100>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e007      	b.n	80078c0 <HAL_DMA_Start_IT+0x110>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f001 fe76 	bl	80095b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a34      	ldr	r2, [pc, #208]	@ (80079a4 <HAL_DMA_Start_IT+0x1f4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d04a      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a33      	ldr	r2, [pc, #204]	@ (80079a8 <HAL_DMA_Start_IT+0x1f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d045      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a31      	ldr	r2, [pc, #196]	@ (80079ac <HAL_DMA_Start_IT+0x1fc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d040      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a30      	ldr	r2, [pc, #192]	@ (80079b0 <HAL_DMA_Start_IT+0x200>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d03b      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a2e      	ldr	r2, [pc, #184]	@ (80079b4 <HAL_DMA_Start_IT+0x204>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d036      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a2d      	ldr	r2, [pc, #180]	@ (80079b8 <HAL_DMA_Start_IT+0x208>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d031      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2b      	ldr	r2, [pc, #172]	@ (80079bc <HAL_DMA_Start_IT+0x20c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d02c      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a2a      	ldr	r2, [pc, #168]	@ (80079c0 <HAL_DMA_Start_IT+0x210>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d027      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a28      	ldr	r2, [pc, #160]	@ (80079c4 <HAL_DMA_Start_IT+0x214>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a27      	ldr	r2, [pc, #156]	@ (80079c8 <HAL_DMA_Start_IT+0x218>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d01d      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a25      	ldr	r2, [pc, #148]	@ (80079cc <HAL_DMA_Start_IT+0x21c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a24      	ldr	r2, [pc, #144]	@ (80079d0 <HAL_DMA_Start_IT+0x220>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a22      	ldr	r2, [pc, #136]	@ (80079d4 <HAL_DMA_Start_IT+0x224>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	@ (80079d8 <HAL_DMA_Start_IT+0x228>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1f      	ldr	r2, [pc, #124]	@ (80079dc <HAL_DMA_Start_IT+0x22c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_DMA_Start_IT+0x1bc>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1e      	ldr	r2, [pc, #120]	@ (80079e0 <HAL_DMA_Start_IT+0x230>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <HAL_DMA_Start_IT+0x1c0>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <HAL_DMA_Start_IT+0x1c2>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d036      	beq.n	80079e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f023 021e 	bic.w	r2, r3, #30
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0216 	orr.w	r2, r2, #22
 8007988:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d03e      	beq.n	8007a10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0208 	orr.w	r2, r2, #8
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e035      	b.n	8007a10 <HAL_DMA_Start_IT+0x260>
 80079a4:	40020010 	.word	0x40020010
 80079a8:	40020028 	.word	0x40020028
 80079ac:	40020040 	.word	0x40020040
 80079b0:	40020058 	.word	0x40020058
 80079b4:	40020070 	.word	0x40020070
 80079b8:	40020088 	.word	0x40020088
 80079bc:	400200a0 	.word	0x400200a0
 80079c0:	400200b8 	.word	0x400200b8
 80079c4:	40020410 	.word	0x40020410
 80079c8:	40020428 	.word	0x40020428
 80079cc:	40020440 	.word	0x40020440
 80079d0:	40020458 	.word	0x40020458
 80079d4:	40020470 	.word	0x40020470
 80079d8:	40020488 	.word	0x40020488
 80079dc:	400204a0 	.word	0x400204a0
 80079e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 020e 	bic.w	r2, r3, #14
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 020a 	orr.w	r2, r2, #10
 80079f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0204 	orr.w	r2, r2, #4
 8007a0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a83      	ldr	r2, [pc, #524]	@ (8007c24 <HAL_DMA_Start_IT+0x474>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d072      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a82      	ldr	r2, [pc, #520]	@ (8007c28 <HAL_DMA_Start_IT+0x478>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d06d      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a80      	ldr	r2, [pc, #512]	@ (8007c2c <HAL_DMA_Start_IT+0x47c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d068      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a7f      	ldr	r2, [pc, #508]	@ (8007c30 <HAL_DMA_Start_IT+0x480>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d063      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7d      	ldr	r2, [pc, #500]	@ (8007c34 <HAL_DMA_Start_IT+0x484>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d05e      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a7c      	ldr	r2, [pc, #496]	@ (8007c38 <HAL_DMA_Start_IT+0x488>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d059      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a7a      	ldr	r2, [pc, #488]	@ (8007c3c <HAL_DMA_Start_IT+0x48c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d054      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a79      	ldr	r2, [pc, #484]	@ (8007c40 <HAL_DMA_Start_IT+0x490>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d04f      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a77      	ldr	r2, [pc, #476]	@ (8007c44 <HAL_DMA_Start_IT+0x494>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d04a      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a76      	ldr	r2, [pc, #472]	@ (8007c48 <HAL_DMA_Start_IT+0x498>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d045      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a74      	ldr	r2, [pc, #464]	@ (8007c4c <HAL_DMA_Start_IT+0x49c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d040      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a73      	ldr	r2, [pc, #460]	@ (8007c50 <HAL_DMA_Start_IT+0x4a0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d03b      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a71      	ldr	r2, [pc, #452]	@ (8007c54 <HAL_DMA_Start_IT+0x4a4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d036      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a70      	ldr	r2, [pc, #448]	@ (8007c58 <HAL_DMA_Start_IT+0x4a8>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d031      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8007c5c <HAL_DMA_Start_IT+0x4ac>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02c      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8007c60 <HAL_DMA_Start_IT+0x4b0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d027      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6b      	ldr	r2, [pc, #428]	@ (8007c64 <HAL_DMA_Start_IT+0x4b4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a6a      	ldr	r2, [pc, #424]	@ (8007c68 <HAL_DMA_Start_IT+0x4b8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01d      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a68      	ldr	r2, [pc, #416]	@ (8007c6c <HAL_DMA_Start_IT+0x4bc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a67      	ldr	r2, [pc, #412]	@ (8007c70 <HAL_DMA_Start_IT+0x4c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a65      	ldr	r2, [pc, #404]	@ (8007c74 <HAL_DMA_Start_IT+0x4c4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a64      	ldr	r2, [pc, #400]	@ (8007c78 <HAL_DMA_Start_IT+0x4c8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a62      	ldr	r2, [pc, #392]	@ (8007c7c <HAL_DMA_Start_IT+0x4cc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <HAL_DMA_Start_IT+0x350>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a61      	ldr	r2, [pc, #388]	@ (8007c80 <HAL_DMA_Start_IT+0x4d0>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d101      	bne.n	8007b04 <HAL_DMA_Start_IT+0x354>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <HAL_DMA_Start_IT+0x356>
 8007b04:	2300      	movs	r3, #0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01a      	beq.n	8007b40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a37      	ldr	r2, [pc, #220]	@ (8007c24 <HAL_DMA_Start_IT+0x474>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d04a      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a36      	ldr	r2, [pc, #216]	@ (8007c28 <HAL_DMA_Start_IT+0x478>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d045      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a34      	ldr	r2, [pc, #208]	@ (8007c2c <HAL_DMA_Start_IT+0x47c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d040      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a33      	ldr	r2, [pc, #204]	@ (8007c30 <HAL_DMA_Start_IT+0x480>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d03b      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a31      	ldr	r2, [pc, #196]	@ (8007c34 <HAL_DMA_Start_IT+0x484>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d036      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a30      	ldr	r2, [pc, #192]	@ (8007c38 <HAL_DMA_Start_IT+0x488>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d031      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2e      	ldr	r2, [pc, #184]	@ (8007c3c <HAL_DMA_Start_IT+0x48c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02c      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c40 <HAL_DMA_Start_IT+0x490>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d027      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	@ (8007c44 <HAL_DMA_Start_IT+0x494>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d022      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c48 <HAL_DMA_Start_IT+0x498>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d01d      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a28      	ldr	r2, [pc, #160]	@ (8007c4c <HAL_DMA_Start_IT+0x49c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a27      	ldr	r2, [pc, #156]	@ (8007c50 <HAL_DMA_Start_IT+0x4a0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a25      	ldr	r2, [pc, #148]	@ (8007c54 <HAL_DMA_Start_IT+0x4a4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a24      	ldr	r2, [pc, #144]	@ (8007c58 <HAL_DMA_Start_IT+0x4a8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	@ (8007c5c <HAL_DMA_Start_IT+0x4ac>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_DMA_Start_IT+0x430>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a21      	ldr	r2, [pc, #132]	@ (8007c60 <HAL_DMA_Start_IT+0x4b0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d108      	bne.n	8007bf2 <HAL_DMA_Start_IT+0x442>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e012      	b.n	8007c18 <HAL_DMA_Start_IT+0x468>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	e009      	b.n	8007c18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40020010 	.word	0x40020010
 8007c28:	40020028 	.word	0x40020028
 8007c2c:	40020040 	.word	0x40020040
 8007c30:	40020058 	.word	0x40020058
 8007c34:	40020070 	.word	0x40020070
 8007c38:	40020088 	.word	0x40020088
 8007c3c:	400200a0 	.word	0x400200a0
 8007c40:	400200b8 	.word	0x400200b8
 8007c44:	40020410 	.word	0x40020410
 8007c48:	40020428 	.word	0x40020428
 8007c4c:	40020440 	.word	0x40020440
 8007c50:	40020458 	.word	0x40020458
 8007c54:	40020470 	.word	0x40020470
 8007c58:	40020488 	.word	0x40020488
 8007c5c:	400204a0 	.word	0x400204a0
 8007c60:	400204b8 	.word	0x400204b8
 8007c64:	58025408 	.word	0x58025408
 8007c68:	5802541c 	.word	0x5802541c
 8007c6c:	58025430 	.word	0x58025430
 8007c70:	58025444 	.word	0x58025444
 8007c74:	58025458 	.word	0x58025458
 8007c78:	5802546c 	.word	0x5802546c
 8007c7c:	58025480 	.word	0x58025480
 8007c80:	58025494 	.word	0x58025494

08007c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007c8c:	f7fe feea 	bl	8006a64 <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e2dc      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d008      	beq.n	8007cba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2280      	movs	r2, #128	@ 0x80
 8007cac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e2cd      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a76      	ldr	r2, [pc, #472]	@ (8007e98 <HAL_DMA_Abort+0x214>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d04a      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a74      	ldr	r2, [pc, #464]	@ (8007e9c <HAL_DMA_Abort+0x218>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d045      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a73      	ldr	r2, [pc, #460]	@ (8007ea0 <HAL_DMA_Abort+0x21c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d040      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a71      	ldr	r2, [pc, #452]	@ (8007ea4 <HAL_DMA_Abort+0x220>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d03b      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a70      	ldr	r2, [pc, #448]	@ (8007ea8 <HAL_DMA_Abort+0x224>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d036      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8007eac <HAL_DMA_Abort+0x228>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d031      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a6d      	ldr	r2, [pc, #436]	@ (8007eb0 <HAL_DMA_Abort+0x22c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d02c      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a6b      	ldr	r2, [pc, #428]	@ (8007eb4 <HAL_DMA_Abort+0x230>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d027      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a6a      	ldr	r2, [pc, #424]	@ (8007eb8 <HAL_DMA_Abort+0x234>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d022      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a68      	ldr	r2, [pc, #416]	@ (8007ebc <HAL_DMA_Abort+0x238>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01d      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a67      	ldr	r2, [pc, #412]	@ (8007ec0 <HAL_DMA_Abort+0x23c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a65      	ldr	r2, [pc, #404]	@ (8007ec4 <HAL_DMA_Abort+0x240>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a64      	ldr	r2, [pc, #400]	@ (8007ec8 <HAL_DMA_Abort+0x244>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00e      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a62      	ldr	r2, [pc, #392]	@ (8007ecc <HAL_DMA_Abort+0x248>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a61      	ldr	r2, [pc, #388]	@ (8007ed0 <HAL_DMA_Abort+0x24c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_DMA_Abort+0xd6>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a5f      	ldr	r2, [pc, #380]	@ (8007ed4 <HAL_DMA_Abort+0x250>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d101      	bne.n	8007d5e <HAL_DMA_Abort+0xda>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_DMA_Abort+0xdc>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 021e 	bic.w	r2, r2, #30
 8007d72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695a      	ldr	r2, [r3, #20]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e00a      	b.n	8007da2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 020e 	bic.w	r2, r2, #14
 8007d9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3c      	ldr	r2, [pc, #240]	@ (8007e98 <HAL_DMA_Abort+0x214>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d072      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3a      	ldr	r2, [pc, #232]	@ (8007e9c <HAL_DMA_Abort+0x218>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d06d      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a39      	ldr	r2, [pc, #228]	@ (8007ea0 <HAL_DMA_Abort+0x21c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d068      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a37      	ldr	r2, [pc, #220]	@ (8007ea4 <HAL_DMA_Abort+0x220>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d063      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a36      	ldr	r2, [pc, #216]	@ (8007ea8 <HAL_DMA_Abort+0x224>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d05e      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a34      	ldr	r2, [pc, #208]	@ (8007eac <HAL_DMA_Abort+0x228>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d059      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a33      	ldr	r2, [pc, #204]	@ (8007eb0 <HAL_DMA_Abort+0x22c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d054      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a31      	ldr	r2, [pc, #196]	@ (8007eb4 <HAL_DMA_Abort+0x230>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d04f      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a30      	ldr	r2, [pc, #192]	@ (8007eb8 <HAL_DMA_Abort+0x234>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d04a      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2e      	ldr	r2, [pc, #184]	@ (8007ebc <HAL_DMA_Abort+0x238>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d045      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec0 <HAL_DMA_Abort+0x23c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d040      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2b      	ldr	r2, [pc, #172]	@ (8007ec4 <HAL_DMA_Abort+0x240>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d03b      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ec8 <HAL_DMA_Abort+0x244>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d036      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a28      	ldr	r2, [pc, #160]	@ (8007ecc <HAL_DMA_Abort+0x248>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d031      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a27      	ldr	r2, [pc, #156]	@ (8007ed0 <HAL_DMA_Abort+0x24c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d02c      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a25      	ldr	r2, [pc, #148]	@ (8007ed4 <HAL_DMA_Abort+0x250>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d027      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a24      	ldr	r2, [pc, #144]	@ (8007ed8 <HAL_DMA_Abort+0x254>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d022      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <HAL_DMA_Abort+0x258>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01d      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	@ (8007ee0 <HAL_DMA_Abort+0x25c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d018      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee4 <HAL_DMA_Abort+0x260>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee8 <HAL_DMA_Abort+0x264>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	@ (8007eec <HAL_DMA_Abort+0x268>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d009      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef0 <HAL_DMA_Abort+0x26c>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_DMA_Abort+0x20e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	@ (8007ef4 <HAL_DMA_Abort+0x270>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d132      	bne.n	8007ef8 <HAL_DMA_Abort+0x274>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e031      	b.n	8007efa <HAL_DMA_Abort+0x276>
 8007e96:	bf00      	nop
 8007e98:	40020010 	.word	0x40020010
 8007e9c:	40020028 	.word	0x40020028
 8007ea0:	40020040 	.word	0x40020040
 8007ea4:	40020058 	.word	0x40020058
 8007ea8:	40020070 	.word	0x40020070
 8007eac:	40020088 	.word	0x40020088
 8007eb0:	400200a0 	.word	0x400200a0
 8007eb4:	400200b8 	.word	0x400200b8
 8007eb8:	40020410 	.word	0x40020410
 8007ebc:	40020428 	.word	0x40020428
 8007ec0:	40020440 	.word	0x40020440
 8007ec4:	40020458 	.word	0x40020458
 8007ec8:	40020470 	.word	0x40020470
 8007ecc:	40020488 	.word	0x40020488
 8007ed0:	400204a0 	.word	0x400204a0
 8007ed4:	400204b8 	.word	0x400204b8
 8007ed8:	58025408 	.word	0x58025408
 8007edc:	5802541c 	.word	0x5802541c
 8007ee0:	58025430 	.word	0x58025430
 8007ee4:	58025444 	.word	0x58025444
 8007ee8:	58025458 	.word	0x58025458
 8007eec:	5802546c 	.word	0x5802546c
 8007ef0:	58025480 	.word	0x58025480
 8007ef4:	58025494 	.word	0x58025494
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a6d      	ldr	r2, [pc, #436]	@ (80080c8 <HAL_DMA_Abort+0x444>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d04a      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80080cc <HAL_DMA_Abort+0x448>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d045      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6a      	ldr	r2, [pc, #424]	@ (80080d0 <HAL_DMA_Abort+0x44c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d040      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a68      	ldr	r2, [pc, #416]	@ (80080d4 <HAL_DMA_Abort+0x450>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d03b      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a67      	ldr	r2, [pc, #412]	@ (80080d8 <HAL_DMA_Abort+0x454>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d036      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a65      	ldr	r2, [pc, #404]	@ (80080dc <HAL_DMA_Abort+0x458>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d031      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a64      	ldr	r2, [pc, #400]	@ (80080e0 <HAL_DMA_Abort+0x45c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d02c      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a62      	ldr	r2, [pc, #392]	@ (80080e4 <HAL_DMA_Abort+0x460>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d027      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a61      	ldr	r2, [pc, #388]	@ (80080e8 <HAL_DMA_Abort+0x464>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d022      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80080ec <HAL_DMA_Abort+0x468>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d01d      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a5e      	ldr	r2, [pc, #376]	@ (80080f0 <HAL_DMA_Abort+0x46c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a5c      	ldr	r2, [pc, #368]	@ (80080f4 <HAL_DMA_Abort+0x470>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80080f8 <HAL_DMA_Abort+0x474>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00e      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a59      	ldr	r2, [pc, #356]	@ (80080fc <HAL_DMA_Abort+0x478>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a58      	ldr	r2, [pc, #352]	@ (8008100 <HAL_DMA_Abort+0x47c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_DMA_Abort+0x32a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a56      	ldr	r2, [pc, #344]	@ (8008104 <HAL_DMA_Abort+0x480>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d108      	bne.n	8007fc0 <HAL_DMA_Abort+0x33c>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e007      	b.n	8007fd0 <HAL_DMA_Abort+0x34c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0201 	bic.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007fd0:	e013      	b.n	8007ffa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fd2:	f7fe fd47 	bl	8006a64 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d90c      	bls.n	8007ffa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2203      	movs	r2, #3
 8007fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e12d      	b.n	8008256 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2f      	ldr	r2, [pc, #188]	@ (80080c8 <HAL_DMA_Abort+0x444>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d04a      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2d      	ldr	r2, [pc, #180]	@ (80080cc <HAL_DMA_Abort+0x448>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d045      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2c      	ldr	r2, [pc, #176]	@ (80080d0 <HAL_DMA_Abort+0x44c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d040      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2a      	ldr	r2, [pc, #168]	@ (80080d4 <HAL_DMA_Abort+0x450>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d03b      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a29      	ldr	r2, [pc, #164]	@ (80080d8 <HAL_DMA_Abort+0x454>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d036      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a27      	ldr	r2, [pc, #156]	@ (80080dc <HAL_DMA_Abort+0x458>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d031      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <HAL_DMA_Abort+0x45c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d02c      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a24      	ldr	r2, [pc, #144]	@ (80080e4 <HAL_DMA_Abort+0x460>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d027      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a23      	ldr	r2, [pc, #140]	@ (80080e8 <HAL_DMA_Abort+0x464>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a21      	ldr	r2, [pc, #132]	@ (80080ec <HAL_DMA_Abort+0x468>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a20      	ldr	r2, [pc, #128]	@ (80080f0 <HAL_DMA_Abort+0x46c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	@ (80080f4 <HAL_DMA_Abort+0x470>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1d      	ldr	r2, [pc, #116]	@ (80080f8 <HAL_DMA_Abort+0x474>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1b      	ldr	r2, [pc, #108]	@ (80080fc <HAL_DMA_Abort+0x478>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1a      	ldr	r2, [pc, #104]	@ (8008100 <HAL_DMA_Abort+0x47c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_DMA_Abort+0x422>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a18      	ldr	r2, [pc, #96]	@ (8008104 <HAL_DMA_Abort+0x480>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <HAL_DMA_Abort+0x426>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <HAL_DMA_Abort+0x428>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02b      	beq.n	8008108 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	223f      	movs	r2, #63	@ 0x3f
 80080c0:	409a      	lsls	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	e02a      	b.n	800811e <HAL_DMA_Abort+0x49a>
 80080c8:	40020010 	.word	0x40020010
 80080cc:	40020028 	.word	0x40020028
 80080d0:	40020040 	.word	0x40020040
 80080d4:	40020058 	.word	0x40020058
 80080d8:	40020070 	.word	0x40020070
 80080dc:	40020088 	.word	0x40020088
 80080e0:	400200a0 	.word	0x400200a0
 80080e4:	400200b8 	.word	0x400200b8
 80080e8:	40020410 	.word	0x40020410
 80080ec:	40020428 	.word	0x40020428
 80080f0:	40020440 	.word	0x40020440
 80080f4:	40020458 	.word	0x40020458
 80080f8:	40020470 	.word	0x40020470
 80080fc:	40020488 	.word	0x40020488
 8008100:	400204a0 	.word	0x400204a0
 8008104:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2201      	movs	r2, #1
 8008118:	409a      	lsls	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4f      	ldr	r2, [pc, #316]	@ (8008260 <HAL_DMA_Abort+0x5dc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d072      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a4d      	ldr	r2, [pc, #308]	@ (8008264 <HAL_DMA_Abort+0x5e0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d06d      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a4c      	ldr	r2, [pc, #304]	@ (8008268 <HAL_DMA_Abort+0x5e4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d068      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a4a      	ldr	r2, [pc, #296]	@ (800826c <HAL_DMA_Abort+0x5e8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d063      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a49      	ldr	r2, [pc, #292]	@ (8008270 <HAL_DMA_Abort+0x5ec>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d05e      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a47      	ldr	r2, [pc, #284]	@ (8008274 <HAL_DMA_Abort+0x5f0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d059      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a46      	ldr	r2, [pc, #280]	@ (8008278 <HAL_DMA_Abort+0x5f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d054      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a44      	ldr	r2, [pc, #272]	@ (800827c <HAL_DMA_Abort+0x5f8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d04f      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a43      	ldr	r2, [pc, #268]	@ (8008280 <HAL_DMA_Abort+0x5fc>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d04a      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a41      	ldr	r2, [pc, #260]	@ (8008284 <HAL_DMA_Abort+0x600>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d045      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a40      	ldr	r2, [pc, #256]	@ (8008288 <HAL_DMA_Abort+0x604>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d040      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a3e      	ldr	r2, [pc, #248]	@ (800828c <HAL_DMA_Abort+0x608>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d03b      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a3d      	ldr	r2, [pc, #244]	@ (8008290 <HAL_DMA_Abort+0x60c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d036      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008294 <HAL_DMA_Abort+0x610>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d031      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	@ (8008298 <HAL_DMA_Abort+0x614>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d02c      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a38      	ldr	r2, [pc, #224]	@ (800829c <HAL_DMA_Abort+0x618>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d027      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a37      	ldr	r2, [pc, #220]	@ (80082a0 <HAL_DMA_Abort+0x61c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a35      	ldr	r2, [pc, #212]	@ (80082a4 <HAL_DMA_Abort+0x620>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a34      	ldr	r2, [pc, #208]	@ (80082a8 <HAL_DMA_Abort+0x624>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a32      	ldr	r2, [pc, #200]	@ (80082ac <HAL_DMA_Abort+0x628>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a31      	ldr	r2, [pc, #196]	@ (80082b0 <HAL_DMA_Abort+0x62c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a2f      	ldr	r2, [pc, #188]	@ (80082b4 <HAL_DMA_Abort+0x630>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a2e      	ldr	r2, [pc, #184]	@ (80082b8 <HAL_DMA_Abort+0x634>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_DMA_Abort+0x58a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a2c      	ldr	r2, [pc, #176]	@ (80082bc <HAL_DMA_Abort+0x638>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d101      	bne.n	8008212 <HAL_DMA_Abort+0x58e>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <HAL_DMA_Abort+0x590>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008220:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00c      	beq.n	8008244 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008238:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008242:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40020010 	.word	0x40020010
 8008264:	40020028 	.word	0x40020028
 8008268:	40020040 	.word	0x40020040
 800826c:	40020058 	.word	0x40020058
 8008270:	40020070 	.word	0x40020070
 8008274:	40020088 	.word	0x40020088
 8008278:	400200a0 	.word	0x400200a0
 800827c:	400200b8 	.word	0x400200b8
 8008280:	40020410 	.word	0x40020410
 8008284:	40020428 	.word	0x40020428
 8008288:	40020440 	.word	0x40020440
 800828c:	40020458 	.word	0x40020458
 8008290:	40020470 	.word	0x40020470
 8008294:	40020488 	.word	0x40020488
 8008298:	400204a0 	.word	0x400204a0
 800829c:	400204b8 	.word	0x400204b8
 80082a0:	58025408 	.word	0x58025408
 80082a4:	5802541c 	.word	0x5802541c
 80082a8:	58025430 	.word	0x58025430
 80082ac:	58025444 	.word	0x58025444
 80082b0:	58025458 	.word	0x58025458
 80082b4:	5802546c 	.word	0x5802546c
 80082b8:	58025480 	.word	0x58025480
 80082bc:	58025494 	.word	0x58025494

080082c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e237      	b.n	8008742 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d004      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2280      	movs	r2, #128	@ 0x80
 80082e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e22c      	b.n	8008742 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a5c      	ldr	r2, [pc, #368]	@ (8008460 <HAL_DMA_Abort_IT+0x1a0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d04a      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008464 <HAL_DMA_Abort_IT+0x1a4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d045      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a59      	ldr	r2, [pc, #356]	@ (8008468 <HAL_DMA_Abort_IT+0x1a8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d040      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a58      	ldr	r2, [pc, #352]	@ (800846c <HAL_DMA_Abort_IT+0x1ac>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d03b      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a56      	ldr	r2, [pc, #344]	@ (8008470 <HAL_DMA_Abort_IT+0x1b0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d036      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a55      	ldr	r2, [pc, #340]	@ (8008474 <HAL_DMA_Abort_IT+0x1b4>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d031      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a53      	ldr	r2, [pc, #332]	@ (8008478 <HAL_DMA_Abort_IT+0x1b8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02c      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a52      	ldr	r2, [pc, #328]	@ (800847c <HAL_DMA_Abort_IT+0x1bc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d027      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a50      	ldr	r2, [pc, #320]	@ (8008480 <HAL_DMA_Abort_IT+0x1c0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d022      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a4f      	ldr	r2, [pc, #316]	@ (8008484 <HAL_DMA_Abort_IT+0x1c4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d01d      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a4d      	ldr	r2, [pc, #308]	@ (8008488 <HAL_DMA_Abort_IT+0x1c8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d018      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a4c      	ldr	r2, [pc, #304]	@ (800848c <HAL_DMA_Abort_IT+0x1cc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a4a      	ldr	r2, [pc, #296]	@ (8008490 <HAL_DMA_Abort_IT+0x1d0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00e      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a49      	ldr	r2, [pc, #292]	@ (8008494 <HAL_DMA_Abort_IT+0x1d4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d009      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a47      	ldr	r2, [pc, #284]	@ (8008498 <HAL_DMA_Abort_IT+0x1d8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <HAL_DMA_Abort_IT+0xc8>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a46      	ldr	r2, [pc, #280]	@ (800849c <HAL_DMA_Abort_IT+0x1dc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d101      	bne.n	800838c <HAL_DMA_Abort_IT+0xcc>
 8008388:	2301      	movs	r3, #1
 800838a:	e000      	b.n	800838e <HAL_DMA_Abort_IT+0xce>
 800838c:	2300      	movs	r3, #0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8086 	beq.w	80084a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2204      	movs	r2, #4
 8008398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2f      	ldr	r2, [pc, #188]	@ (8008460 <HAL_DMA_Abort_IT+0x1a0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d04a      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008464 <HAL_DMA_Abort_IT+0x1a4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d045      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008468 <HAL_DMA_Abort_IT+0x1a8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d040      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2b      	ldr	r2, [pc, #172]	@ (800846c <HAL_DMA_Abort_IT+0x1ac>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d03b      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a29      	ldr	r2, [pc, #164]	@ (8008470 <HAL_DMA_Abort_IT+0x1b0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d036      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a28      	ldr	r2, [pc, #160]	@ (8008474 <HAL_DMA_Abort_IT+0x1b4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d031      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a26      	ldr	r2, [pc, #152]	@ (8008478 <HAL_DMA_Abort_IT+0x1b8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d02c      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a25      	ldr	r2, [pc, #148]	@ (800847c <HAL_DMA_Abort_IT+0x1bc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d027      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a23      	ldr	r2, [pc, #140]	@ (8008480 <HAL_DMA_Abort_IT+0x1c0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d022      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a22      	ldr	r2, [pc, #136]	@ (8008484 <HAL_DMA_Abort_IT+0x1c4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d01d      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a20      	ldr	r2, [pc, #128]	@ (8008488 <HAL_DMA_Abort_IT+0x1c8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1f      	ldr	r2, [pc, #124]	@ (800848c <HAL_DMA_Abort_IT+0x1cc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1d      	ldr	r2, [pc, #116]	@ (8008490 <HAL_DMA_Abort_IT+0x1d0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <HAL_DMA_Abort_IT+0x1d4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1a      	ldr	r2, [pc, #104]	@ (8008498 <HAL_DMA_Abort_IT+0x1d8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <HAL_DMA_Abort_IT+0x17c>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a19      	ldr	r2, [pc, #100]	@ (800849c <HAL_DMA_Abort_IT+0x1dc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d108      	bne.n	800844e <HAL_DMA_Abort_IT+0x18e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e178      	b.n	8008740 <HAL_DMA_Abort_IT+0x480>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e16f      	b.n	8008740 <HAL_DMA_Abort_IT+0x480>
 8008460:	40020010 	.word	0x40020010
 8008464:	40020028 	.word	0x40020028
 8008468:	40020040 	.word	0x40020040
 800846c:	40020058 	.word	0x40020058
 8008470:	40020070 	.word	0x40020070
 8008474:	40020088 	.word	0x40020088
 8008478:	400200a0 	.word	0x400200a0
 800847c:	400200b8 	.word	0x400200b8
 8008480:	40020410 	.word	0x40020410
 8008484:	40020428 	.word	0x40020428
 8008488:	40020440 	.word	0x40020440
 800848c:	40020458 	.word	0x40020458
 8008490:	40020470 	.word	0x40020470
 8008494:	40020488 	.word	0x40020488
 8008498:	400204a0 	.word	0x400204a0
 800849c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 020e 	bic.w	r2, r2, #14
 80084ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a6c      	ldr	r2, [pc, #432]	@ (8008668 <HAL_DMA_Abort_IT+0x3a8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d04a      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a6b      	ldr	r2, [pc, #428]	@ (800866c <HAL_DMA_Abort_IT+0x3ac>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d045      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a69      	ldr	r2, [pc, #420]	@ (8008670 <HAL_DMA_Abort_IT+0x3b0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d040      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a68      	ldr	r2, [pc, #416]	@ (8008674 <HAL_DMA_Abort_IT+0x3b4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d03b      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a66      	ldr	r2, [pc, #408]	@ (8008678 <HAL_DMA_Abort_IT+0x3b8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d036      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a65      	ldr	r2, [pc, #404]	@ (800867c <HAL_DMA_Abort_IT+0x3bc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d031      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a63      	ldr	r2, [pc, #396]	@ (8008680 <HAL_DMA_Abort_IT+0x3c0>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d02c      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a62      	ldr	r2, [pc, #392]	@ (8008684 <HAL_DMA_Abort_IT+0x3c4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d027      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a60      	ldr	r2, [pc, #384]	@ (8008688 <HAL_DMA_Abort_IT+0x3c8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d022      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a5f      	ldr	r2, [pc, #380]	@ (800868c <HAL_DMA_Abort_IT+0x3cc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d01d      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a5d      	ldr	r2, [pc, #372]	@ (8008690 <HAL_DMA_Abort_IT+0x3d0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d018      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a5c      	ldr	r2, [pc, #368]	@ (8008694 <HAL_DMA_Abort_IT+0x3d4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d013      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a5a      	ldr	r2, [pc, #360]	@ (8008698 <HAL_DMA_Abort_IT+0x3d8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00e      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a59      	ldr	r2, [pc, #356]	@ (800869c <HAL_DMA_Abort_IT+0x3dc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d009      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a57      	ldr	r2, [pc, #348]	@ (80086a0 <HAL_DMA_Abort_IT+0x3e0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <HAL_DMA_Abort_IT+0x290>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a56      	ldr	r2, [pc, #344]	@ (80086a4 <HAL_DMA_Abort_IT+0x3e4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d108      	bne.n	8008562 <HAL_DMA_Abort_IT+0x2a2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	e007      	b.n	8008572 <HAL_DMA_Abort_IT+0x2b2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a3c      	ldr	r2, [pc, #240]	@ (8008668 <HAL_DMA_Abort_IT+0x3a8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d072      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a3a      	ldr	r2, [pc, #232]	@ (800866c <HAL_DMA_Abort_IT+0x3ac>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d06d      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a39      	ldr	r2, [pc, #228]	@ (8008670 <HAL_DMA_Abort_IT+0x3b0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d068      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a37      	ldr	r2, [pc, #220]	@ (8008674 <HAL_DMA_Abort_IT+0x3b4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d063      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a36      	ldr	r2, [pc, #216]	@ (8008678 <HAL_DMA_Abort_IT+0x3b8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d05e      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a34      	ldr	r2, [pc, #208]	@ (800867c <HAL_DMA_Abort_IT+0x3bc>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d059      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a33      	ldr	r2, [pc, #204]	@ (8008680 <HAL_DMA_Abort_IT+0x3c0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d054      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a31      	ldr	r2, [pc, #196]	@ (8008684 <HAL_DMA_Abort_IT+0x3c4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d04f      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a30      	ldr	r2, [pc, #192]	@ (8008688 <HAL_DMA_Abort_IT+0x3c8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d04a      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a2e      	ldr	r2, [pc, #184]	@ (800868c <HAL_DMA_Abort_IT+0x3cc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d045      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2d      	ldr	r2, [pc, #180]	@ (8008690 <HAL_DMA_Abort_IT+0x3d0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d040      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008694 <HAL_DMA_Abort_IT+0x3d4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d03b      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <HAL_DMA_Abort_IT+0x3d8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d036      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a28      	ldr	r2, [pc, #160]	@ (800869c <HAL_DMA_Abort_IT+0x3dc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d031      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a27      	ldr	r2, [pc, #156]	@ (80086a0 <HAL_DMA_Abort_IT+0x3e0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d02c      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a25      	ldr	r2, [pc, #148]	@ (80086a4 <HAL_DMA_Abort_IT+0x3e4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d027      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a24      	ldr	r2, [pc, #144]	@ (80086a8 <HAL_DMA_Abort_IT+0x3e8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a22      	ldr	r2, [pc, #136]	@ (80086ac <HAL_DMA_Abort_IT+0x3ec>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a21      	ldr	r2, [pc, #132]	@ (80086b0 <HAL_DMA_Abort_IT+0x3f0>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <HAL_DMA_Abort_IT+0x3f4>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <HAL_DMA_Abort_IT+0x3f8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <HAL_DMA_Abort_IT+0x3fc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <HAL_DMA_Abort_IT+0x400>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_DMA_Abort_IT+0x3a2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <HAL_DMA_Abort_IT+0x404>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d132      	bne.n	80086c8 <HAL_DMA_Abort_IT+0x408>
 8008662:	2301      	movs	r3, #1
 8008664:	e031      	b.n	80086ca <HAL_DMA_Abort_IT+0x40a>
 8008666:	bf00      	nop
 8008668:	40020010 	.word	0x40020010
 800866c:	40020028 	.word	0x40020028
 8008670:	40020040 	.word	0x40020040
 8008674:	40020058 	.word	0x40020058
 8008678:	40020070 	.word	0x40020070
 800867c:	40020088 	.word	0x40020088
 8008680:	400200a0 	.word	0x400200a0
 8008684:	400200b8 	.word	0x400200b8
 8008688:	40020410 	.word	0x40020410
 800868c:	40020428 	.word	0x40020428
 8008690:	40020440 	.word	0x40020440
 8008694:	40020458 	.word	0x40020458
 8008698:	40020470 	.word	0x40020470
 800869c:	40020488 	.word	0x40020488
 80086a0:	400204a0 	.word	0x400204a0
 80086a4:	400204b8 	.word	0x400204b8
 80086a8:	58025408 	.word	0x58025408
 80086ac:	5802541c 	.word	0x5802541c
 80086b0:	58025430 	.word	0x58025430
 80086b4:	58025444 	.word	0x58025444
 80086b8:	58025458 	.word	0x58025458
 80086bc:	5802546c 	.word	0x5802546c
 80086c0:	58025480 	.word	0x58025480
 80086c4:	58025494 	.word	0x58025494
 80086c8:	2300      	movs	r3, #0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d028      	beq.n	8008720 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2201      	movs	r2, #1
 80086ee:	409a      	lsls	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80086fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00c      	beq.n	8008720 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008714:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800871e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	@ 0x28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008758:	4b67      	ldr	r3, [pc, #412]	@ (80088f8 <HAL_DMA_IRQHandler+0x1ac>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a67      	ldr	r2, [pc, #412]	@ (80088fc <HAL_DMA_IRQHandler+0x1b0>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	0a9b      	lsrs	r3, r3, #10
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008770:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a5f      	ldr	r2, [pc, #380]	@ (8008900 <HAL_DMA_IRQHandler+0x1b4>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d04a      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a5d      	ldr	r2, [pc, #372]	@ (8008904 <HAL_DMA_IRQHandler+0x1b8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d045      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a5c      	ldr	r2, [pc, #368]	@ (8008908 <HAL_DMA_IRQHandler+0x1bc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d040      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a5a      	ldr	r2, [pc, #360]	@ (800890c <HAL_DMA_IRQHandler+0x1c0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d03b      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a59      	ldr	r2, [pc, #356]	@ (8008910 <HAL_DMA_IRQHandler+0x1c4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d036      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a57      	ldr	r2, [pc, #348]	@ (8008914 <HAL_DMA_IRQHandler+0x1c8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d031      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a56      	ldr	r2, [pc, #344]	@ (8008918 <HAL_DMA_IRQHandler+0x1cc>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d02c      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a54      	ldr	r2, [pc, #336]	@ (800891c <HAL_DMA_IRQHandler+0x1d0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d027      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a53      	ldr	r2, [pc, #332]	@ (8008920 <HAL_DMA_IRQHandler+0x1d4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d022      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a51      	ldr	r2, [pc, #324]	@ (8008924 <HAL_DMA_IRQHandler+0x1d8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01d      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a50      	ldr	r2, [pc, #320]	@ (8008928 <HAL_DMA_IRQHandler+0x1dc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a4e      	ldr	r2, [pc, #312]	@ (800892c <HAL_DMA_IRQHandler+0x1e0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d013      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a4d      	ldr	r2, [pc, #308]	@ (8008930 <HAL_DMA_IRQHandler+0x1e4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a4b      	ldr	r2, [pc, #300]	@ (8008934 <HAL_DMA_IRQHandler+0x1e8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a4a      	ldr	r2, [pc, #296]	@ (8008938 <HAL_DMA_IRQHandler+0x1ec>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_DMA_IRQHandler+0xd2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a48      	ldr	r2, [pc, #288]	@ (800893c <HAL_DMA_IRQHandler+0x1f0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d101      	bne.n	8008822 <HAL_DMA_IRQHandler+0xd6>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <HAL_DMA_IRQHandler+0xd8>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 842b 	beq.w	8009080 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	2208      	movs	r2, #8
 8008834:	409a      	lsls	r2, r3
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80a2 	beq.w	8008984 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2e      	ldr	r2, [pc, #184]	@ (8008900 <HAL_DMA_IRQHandler+0x1b4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d04a      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2d      	ldr	r2, [pc, #180]	@ (8008904 <HAL_DMA_IRQHandler+0x1b8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d045      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2b      	ldr	r2, [pc, #172]	@ (8008908 <HAL_DMA_IRQHandler+0x1bc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d040      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2a      	ldr	r2, [pc, #168]	@ (800890c <HAL_DMA_IRQHandler+0x1c0>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d03b      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a28      	ldr	r2, [pc, #160]	@ (8008910 <HAL_DMA_IRQHandler+0x1c4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d036      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a27      	ldr	r2, [pc, #156]	@ (8008914 <HAL_DMA_IRQHandler+0x1c8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d031      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a25      	ldr	r2, [pc, #148]	@ (8008918 <HAL_DMA_IRQHandler+0x1cc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d02c      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a24      	ldr	r2, [pc, #144]	@ (800891c <HAL_DMA_IRQHandler+0x1d0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d027      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a22      	ldr	r2, [pc, #136]	@ (8008920 <HAL_DMA_IRQHandler+0x1d4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d022      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a21      	ldr	r2, [pc, #132]	@ (8008924 <HAL_DMA_IRQHandler+0x1d8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d01d      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008928 <HAL_DMA_IRQHandler+0x1dc>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a1e      	ldr	r2, [pc, #120]	@ (800892c <HAL_DMA_IRQHandler+0x1e0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008930 <HAL_DMA_IRQHandler+0x1e4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00e      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <HAL_DMA_IRQHandler+0x1e8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a19      	ldr	r2, [pc, #100]	@ (8008938 <HAL_DMA_IRQHandler+0x1ec>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x194>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a18      	ldr	r2, [pc, #96]	@ (800893c <HAL_DMA_IRQHandler+0x1f0>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d12f      	bne.n	8008940 <HAL_DMA_IRQHandler+0x1f4>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e02e      	b.n	8008954 <HAL_DMA_IRQHandler+0x208>
 80088f6:	bf00      	nop
 80088f8:	24000040 	.word	0x24000040
 80088fc:	1b4e81b5 	.word	0x1b4e81b5
 8008900:	40020010 	.word	0x40020010
 8008904:	40020028 	.word	0x40020028
 8008908:	40020040 	.word	0x40020040
 800890c:	40020058 	.word	0x40020058
 8008910:	40020070 	.word	0x40020070
 8008914:	40020088 	.word	0x40020088
 8008918:	400200a0 	.word	0x400200a0
 800891c:	400200b8 	.word	0x400200b8
 8008920:	40020410 	.word	0x40020410
 8008924:	40020428 	.word	0x40020428
 8008928:	40020440 	.word	0x40020440
 800892c:	40020458 	.word	0x40020458
 8008930:	40020470 	.word	0x40020470
 8008934:	40020488 	.word	0x40020488
 8008938:	400204a0 	.word	0x400204a0
 800893c:	400204b8 	.word	0x400204b8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d015      	beq.n	8008984 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0204 	bic.w	r2, r2, #4
 8008966:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	2208      	movs	r2, #8
 8008972:	409a      	lsls	r2, r3
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008988:	f003 031f 	and.w	r3, r3, #31
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	fa22 f303 	lsr.w	r3, r2, r3
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d06e      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a69      	ldr	r2, [pc, #420]	@ (8008b44 <HAL_DMA_IRQHandler+0x3f8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d04a      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a67      	ldr	r2, [pc, #412]	@ (8008b48 <HAL_DMA_IRQHandler+0x3fc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d045      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a66      	ldr	r2, [pc, #408]	@ (8008b4c <HAL_DMA_IRQHandler+0x400>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d040      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a64      	ldr	r2, [pc, #400]	@ (8008b50 <HAL_DMA_IRQHandler+0x404>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d03b      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a63      	ldr	r2, [pc, #396]	@ (8008b54 <HAL_DMA_IRQHandler+0x408>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d036      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a61      	ldr	r2, [pc, #388]	@ (8008b58 <HAL_DMA_IRQHandler+0x40c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d031      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a60      	ldr	r2, [pc, #384]	@ (8008b5c <HAL_DMA_IRQHandler+0x410>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d02c      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a5e      	ldr	r2, [pc, #376]	@ (8008b60 <HAL_DMA_IRQHandler+0x414>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d027      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5d      	ldr	r2, [pc, #372]	@ (8008b64 <HAL_DMA_IRQHandler+0x418>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d022      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a5b      	ldr	r2, [pc, #364]	@ (8008b68 <HAL_DMA_IRQHandler+0x41c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d01d      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a5a      	ldr	r2, [pc, #360]	@ (8008b6c <HAL_DMA_IRQHandler+0x420>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d018      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a58      	ldr	r2, [pc, #352]	@ (8008b70 <HAL_DMA_IRQHandler+0x424>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a57      	ldr	r2, [pc, #348]	@ (8008b74 <HAL_DMA_IRQHandler+0x428>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00e      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a55      	ldr	r2, [pc, #340]	@ (8008b78 <HAL_DMA_IRQHandler+0x42c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d009      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a54      	ldr	r2, [pc, #336]	@ (8008b7c <HAL_DMA_IRQHandler+0x430>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d004      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x2ee>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a52      	ldr	r2, [pc, #328]	@ (8008b80 <HAL_DMA_IRQHandler+0x434>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d10a      	bne.n	8008a50 <HAL_DMA_IRQHandler+0x304>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	e003      	b.n	8008a58 <HAL_DMA_IRQHandler+0x30c>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00d      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a70:	f043 0202 	orr.w	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	2204      	movs	r2, #4
 8008a82:	409a      	lsls	r2, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 808f 	beq.w	8008bac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a2c      	ldr	r2, [pc, #176]	@ (8008b44 <HAL_DMA_IRQHandler+0x3f8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d04a      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8008b48 <HAL_DMA_IRQHandler+0x3fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d045      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a29      	ldr	r2, [pc, #164]	@ (8008b4c <HAL_DMA_IRQHandler+0x400>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d040      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a27      	ldr	r2, [pc, #156]	@ (8008b50 <HAL_DMA_IRQHandler+0x404>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d03b      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a26      	ldr	r2, [pc, #152]	@ (8008b54 <HAL_DMA_IRQHandler+0x408>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d036      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a24      	ldr	r2, [pc, #144]	@ (8008b58 <HAL_DMA_IRQHandler+0x40c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d031      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a23      	ldr	r2, [pc, #140]	@ (8008b5c <HAL_DMA_IRQHandler+0x410>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d02c      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a21      	ldr	r2, [pc, #132]	@ (8008b60 <HAL_DMA_IRQHandler+0x414>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d027      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a20      	ldr	r2, [pc, #128]	@ (8008b64 <HAL_DMA_IRQHandler+0x418>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d022      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1e      	ldr	r2, [pc, #120]	@ (8008b68 <HAL_DMA_IRQHandler+0x41c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01d      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b6c <HAL_DMA_IRQHandler+0x420>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <HAL_DMA_IRQHandler+0x424>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b74 <HAL_DMA_IRQHandler+0x428>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a18      	ldr	r2, [pc, #96]	@ (8008b78 <HAL_DMA_IRQHandler+0x42c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	@ (8008b7c <HAL_DMA_IRQHandler+0x430>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x3e2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <HAL_DMA_IRQHandler+0x434>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d12a      	bne.n	8008b84 <HAL_DMA_IRQHandler+0x438>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e023      	b.n	8008b8c <HAL_DMA_IRQHandler+0x440>
 8008b44:	40020010 	.word	0x40020010
 8008b48:	40020028 	.word	0x40020028
 8008b4c:	40020040 	.word	0x40020040
 8008b50:	40020058 	.word	0x40020058
 8008b54:	40020070 	.word	0x40020070
 8008b58:	40020088 	.word	0x40020088
 8008b5c:	400200a0 	.word	0x400200a0
 8008b60:	400200b8 	.word	0x400200b8
 8008b64:	40020410 	.word	0x40020410
 8008b68:	40020428 	.word	0x40020428
 8008b6c:	40020440 	.word	0x40020440
 8008b70:	40020458 	.word	0x40020458
 8008b74:	40020470 	.word	0x40020470
 8008b78:	40020488 	.word	0x40020488
 8008b7c:	400204a0 	.word	0x400204a0
 8008b80:	400204b8 	.word	0x400204b8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00d      	beq.n	8008bac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	2204      	movs	r2, #4
 8008b9a:	409a      	lsls	r2, r3
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba4:	f043 0204 	orr.w	r2, r3, #4
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	2210      	movs	r2, #16
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a6 	beq.w	8008d0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a85      	ldr	r2, [pc, #532]	@ (8008ddc <HAL_DMA_IRQHandler+0x690>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d04a      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a83      	ldr	r2, [pc, #524]	@ (8008de0 <HAL_DMA_IRQHandler+0x694>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d045      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a82      	ldr	r2, [pc, #520]	@ (8008de4 <HAL_DMA_IRQHandler+0x698>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d040      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a80      	ldr	r2, [pc, #512]	@ (8008de8 <HAL_DMA_IRQHandler+0x69c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d03b      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a7f      	ldr	r2, [pc, #508]	@ (8008dec <HAL_DMA_IRQHandler+0x6a0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d036      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a7d      	ldr	r2, [pc, #500]	@ (8008df0 <HAL_DMA_IRQHandler+0x6a4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d031      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a7c      	ldr	r2, [pc, #496]	@ (8008df4 <HAL_DMA_IRQHandler+0x6a8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d02c      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a7a      	ldr	r2, [pc, #488]	@ (8008df8 <HAL_DMA_IRQHandler+0x6ac>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d027      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a79      	ldr	r2, [pc, #484]	@ (8008dfc <HAL_DMA_IRQHandler+0x6b0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d022      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a77      	ldr	r2, [pc, #476]	@ (8008e00 <HAL_DMA_IRQHandler+0x6b4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d01d      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a76      	ldr	r2, [pc, #472]	@ (8008e04 <HAL_DMA_IRQHandler+0x6b8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d018      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a74      	ldr	r2, [pc, #464]	@ (8008e08 <HAL_DMA_IRQHandler+0x6bc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d013      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a73      	ldr	r2, [pc, #460]	@ (8008e0c <HAL_DMA_IRQHandler+0x6c0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00e      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a71      	ldr	r2, [pc, #452]	@ (8008e10 <HAL_DMA_IRQHandler+0x6c4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d009      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a70      	ldr	r2, [pc, #448]	@ (8008e14 <HAL_DMA_IRQHandler+0x6c8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d004      	beq.n	8008c62 <HAL_DMA_IRQHandler+0x516>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8008e18 <HAL_DMA_IRQHandler+0x6cc>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d10a      	bne.n	8008c78 <HAL_DMA_IRQHandler+0x52c>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bf14      	ite	ne
 8008c70:	2301      	movne	r3, #1
 8008c72:	2300      	moveq	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	e009      	b.n	8008c8c <HAL_DMA_IRQHandler+0x540>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03e      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	2210      	movs	r2, #16
 8008c9a:	409a      	lsls	r2, r3
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d018      	beq.n	8008ce0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d108      	bne.n	8008cce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d024      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
 8008ccc:	e01f      	b.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01b      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	e016      	b.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0208 	bic.w	r2, r2, #8
 8008cfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	2220      	movs	r2, #32
 8008d18:	409a      	lsls	r2, r3
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8110 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2c      	ldr	r2, [pc, #176]	@ (8008ddc <HAL_DMA_IRQHandler+0x690>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d04a      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2b      	ldr	r2, [pc, #172]	@ (8008de0 <HAL_DMA_IRQHandler+0x694>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d045      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	@ (8008de4 <HAL_DMA_IRQHandler+0x698>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d040      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a28      	ldr	r2, [pc, #160]	@ (8008de8 <HAL_DMA_IRQHandler+0x69c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d03b      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a26      	ldr	r2, [pc, #152]	@ (8008dec <HAL_DMA_IRQHandler+0x6a0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d036      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a25      	ldr	r2, [pc, #148]	@ (8008df0 <HAL_DMA_IRQHandler+0x6a4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d031      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a23      	ldr	r2, [pc, #140]	@ (8008df4 <HAL_DMA_IRQHandler+0x6a8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d02c      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a22      	ldr	r2, [pc, #136]	@ (8008df8 <HAL_DMA_IRQHandler+0x6ac>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d027      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a20      	ldr	r2, [pc, #128]	@ (8008dfc <HAL_DMA_IRQHandler+0x6b0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d022      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1f      	ldr	r2, [pc, #124]	@ (8008e00 <HAL_DMA_IRQHandler+0x6b4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01d      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e04 <HAL_DMA_IRQHandler+0x6b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1c      	ldr	r2, [pc, #112]	@ (8008e08 <HAL_DMA_IRQHandler+0x6bc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e0c <HAL_DMA_IRQHandler+0x6c0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a19      	ldr	r2, [pc, #100]	@ (8008e10 <HAL_DMA_IRQHandler+0x6c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a17      	ldr	r2, [pc, #92]	@ (8008e14 <HAL_DMA_IRQHandler+0x6c8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_DMA_IRQHandler+0x678>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	@ (8008e18 <HAL_DMA_IRQHandler+0x6cc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d12b      	bne.n	8008e1c <HAL_DMA_IRQHandler+0x6d0>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0310 	and.w	r3, r3, #16
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bf14      	ite	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	e02a      	b.n	8008e30 <HAL_DMA_IRQHandler+0x6e4>
 8008dda:	bf00      	nop
 8008ddc:	40020010 	.word	0x40020010
 8008de0:	40020028 	.word	0x40020028
 8008de4:	40020040 	.word	0x40020040
 8008de8:	40020058 	.word	0x40020058
 8008dec:	40020070 	.word	0x40020070
 8008df0:	40020088 	.word	0x40020088
 8008df4:	400200a0 	.word	0x400200a0
 8008df8:	400200b8 	.word	0x400200b8
 8008dfc:	40020410 	.word	0x40020410
 8008e00:	40020428 	.word	0x40020428
 8008e04:	40020440 	.word	0x40020440
 8008e08:	40020458 	.word	0x40020458
 8008e0c:	40020470 	.word	0x40020470
 8008e10:	40020488 	.word	0x40020488
 8008e14:	400204a0 	.word	0x400204a0
 8008e18:	400204b8 	.word	0x400204b8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bf14      	ite	ne
 8008e2a:	2301      	movne	r3, #1
 8008e2c:	2300      	moveq	r3, #0
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8087 	beq.w	8008f44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2220      	movs	r2, #32
 8008e40:	409a      	lsls	r2, r3
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d139      	bne.n	8008ec6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0216 	bic.w	r2, r2, #22
 8008e60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695a      	ldr	r2, [r3, #20]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <HAL_DMA_IRQHandler+0x736>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d007      	beq.n	8008e92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0208 	bic.w	r2, r2, #8
 8008e90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e96:	f003 031f 	and.w	r3, r3, #31
 8008e9a:	223f      	movs	r2, #63	@ 0x3f
 8008e9c:	409a      	lsls	r2, r3
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 834a 	beq.w	8009550 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
          }
          return;
 8008ec4:	e344      	b.n	8009550 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d018      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d02c      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
 8008ef2:	e027      	b.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d023      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
 8008f04:	e01e      	b.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10f      	bne.n	8008f34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0210 	bic.w	r2, r2, #16
 8008f22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8306 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8088 	beq.w	800906c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a7a      	ldr	r2, [pc, #488]	@ (8009154 <HAL_DMA_IRQHandler+0xa08>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d04a      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a79      	ldr	r2, [pc, #484]	@ (8009158 <HAL_DMA_IRQHandler+0xa0c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d045      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a77      	ldr	r2, [pc, #476]	@ (800915c <HAL_DMA_IRQHandler+0xa10>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d040      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a76      	ldr	r2, [pc, #472]	@ (8009160 <HAL_DMA_IRQHandler+0xa14>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d03b      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a74      	ldr	r2, [pc, #464]	@ (8009164 <HAL_DMA_IRQHandler+0xa18>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d036      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a73      	ldr	r2, [pc, #460]	@ (8009168 <HAL_DMA_IRQHandler+0xa1c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d031      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a71      	ldr	r2, [pc, #452]	@ (800916c <HAL_DMA_IRQHandler+0xa20>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d02c      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a70      	ldr	r2, [pc, #448]	@ (8009170 <HAL_DMA_IRQHandler+0xa24>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d027      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8009174 <HAL_DMA_IRQHandler+0xa28>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d022      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a6d      	ldr	r2, [pc, #436]	@ (8009178 <HAL_DMA_IRQHandler+0xa2c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d01d      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a6b      	ldr	r2, [pc, #428]	@ (800917c <HAL_DMA_IRQHandler+0xa30>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d018      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6a      	ldr	r2, [pc, #424]	@ (8009180 <HAL_DMA_IRQHandler+0xa34>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d013      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a68      	ldr	r2, [pc, #416]	@ (8009184 <HAL_DMA_IRQHandler+0xa38>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00e      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a67      	ldr	r2, [pc, #412]	@ (8009188 <HAL_DMA_IRQHandler+0xa3c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d009      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a65      	ldr	r2, [pc, #404]	@ (800918c <HAL_DMA_IRQHandler+0xa40>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <HAL_DMA_IRQHandler+0x8b8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a64      	ldr	r2, [pc, #400]	@ (8009190 <HAL_DMA_IRQHandler+0xa44>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d108      	bne.n	8009016 <HAL_DMA_IRQHandler+0x8ca>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0201 	bic.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e007      	b.n	8009026 <HAL_DMA_IRQHandler+0x8da>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800902e:	429a      	cmp	r2, r3
 8009030:	d307      	bcc.n	8009042 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f2      	bne.n	8009026 <HAL_DMA_IRQHandler+0x8da>
 8009040:	e000      	b.n	8009044 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009042:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2203      	movs	r2, #3
 8009056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800905a:	e003      	b.n	8009064 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8272 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	e26c      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a43      	ldr	r2, [pc, #268]	@ (8009194 <HAL_DMA_IRQHandler+0xa48>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d022      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a42      	ldr	r2, [pc, #264]	@ (8009198 <HAL_DMA_IRQHandler+0xa4c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d01d      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a40      	ldr	r2, [pc, #256]	@ (800919c <HAL_DMA_IRQHandler+0xa50>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d018      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a3f      	ldr	r2, [pc, #252]	@ (80091a0 <HAL_DMA_IRQHandler+0xa54>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a3d      	ldr	r2, [pc, #244]	@ (80091a4 <HAL_DMA_IRQHandler+0xa58>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00e      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a3c      	ldr	r2, [pc, #240]	@ (80091a8 <HAL_DMA_IRQHandler+0xa5c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d009      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a3a      	ldr	r2, [pc, #232]	@ (80091ac <HAL_DMA_IRQHandler+0xa60>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <HAL_DMA_IRQHandler+0x984>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a39      	ldr	r2, [pc, #228]	@ (80091b0 <HAL_DMA_IRQHandler+0xa64>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d101      	bne.n	80090d4 <HAL_DMA_IRQHandler+0x988>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e000      	b.n	80090d6 <HAL_DMA_IRQHandler+0x98a>
 80090d4:	2300      	movs	r3, #0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 823f 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2204      	movs	r2, #4
 80090ee:	409a      	lsls	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80cd 	beq.w	8009294 <HAL_DMA_IRQHandler+0xb48>
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80c7 	beq.w	8009294 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2204      	movs	r2, #4
 8009110:	409a      	lsls	r2, r3
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d049      	beq.n	80091b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8210 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800913c:	e20a      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8206 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009150:	e200      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
 8009152:	bf00      	nop
 8009154:	40020010 	.word	0x40020010
 8009158:	40020028 	.word	0x40020028
 800915c:	40020040 	.word	0x40020040
 8009160:	40020058 	.word	0x40020058
 8009164:	40020070 	.word	0x40020070
 8009168:	40020088 	.word	0x40020088
 800916c:	400200a0 	.word	0x400200a0
 8009170:	400200b8 	.word	0x400200b8
 8009174:	40020410 	.word	0x40020410
 8009178:	40020428 	.word	0x40020428
 800917c:	40020440 	.word	0x40020440
 8009180:	40020458 	.word	0x40020458
 8009184:	40020470 	.word	0x40020470
 8009188:	40020488 	.word	0x40020488
 800918c:	400204a0 	.word	0x400204a0
 8009190:	400204b8 	.word	0x400204b8
 8009194:	58025408 	.word	0x58025408
 8009198:	5802541c 	.word	0x5802541c
 800919c:	58025430 	.word	0x58025430
 80091a0:	58025444 	.word	0x58025444
 80091a4:	58025458 	.word	0x58025458
 80091a8:	5802546c 	.word	0x5802546c
 80091ac:	58025480 	.word	0x58025480
 80091b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d160      	bne.n	8009280 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a7f      	ldr	r2, [pc, #508]	@ (80093c0 <HAL_DMA_IRQHandler+0xc74>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d04a      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7d      	ldr	r2, [pc, #500]	@ (80093c4 <HAL_DMA_IRQHandler+0xc78>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d045      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a7c      	ldr	r2, [pc, #496]	@ (80093c8 <HAL_DMA_IRQHandler+0xc7c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d040      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a7a      	ldr	r2, [pc, #488]	@ (80093cc <HAL_DMA_IRQHandler+0xc80>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d03b      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a79      	ldr	r2, [pc, #484]	@ (80093d0 <HAL_DMA_IRQHandler+0xc84>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d036      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a77      	ldr	r2, [pc, #476]	@ (80093d4 <HAL_DMA_IRQHandler+0xc88>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d031      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a76      	ldr	r2, [pc, #472]	@ (80093d8 <HAL_DMA_IRQHandler+0xc8c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d02c      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a74      	ldr	r2, [pc, #464]	@ (80093dc <HAL_DMA_IRQHandler+0xc90>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d027      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a73      	ldr	r2, [pc, #460]	@ (80093e0 <HAL_DMA_IRQHandler+0xc94>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d022      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a71      	ldr	r2, [pc, #452]	@ (80093e4 <HAL_DMA_IRQHandler+0xc98>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d01d      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a70      	ldr	r2, [pc, #448]	@ (80093e8 <HAL_DMA_IRQHandler+0xc9c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d018      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a6e      	ldr	r2, [pc, #440]	@ (80093ec <HAL_DMA_IRQHandler+0xca0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d013      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a6d      	ldr	r2, [pc, #436]	@ (80093f0 <HAL_DMA_IRQHandler+0xca4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00e      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a6b      	ldr	r2, [pc, #428]	@ (80093f4 <HAL_DMA_IRQHandler+0xca8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a6a      	ldr	r2, [pc, #424]	@ (80093f8 <HAL_DMA_IRQHandler+0xcac>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_DMA_IRQHandler+0xb12>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a68      	ldr	r2, [pc, #416]	@ (80093fc <HAL_DMA_IRQHandler+0xcb0>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d108      	bne.n	8009270 <HAL_DMA_IRQHandler+0xb24>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0208 	bic.w	r2, r2, #8
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e007      	b.n	8009280 <HAL_DMA_IRQHandler+0xb34>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0204 	bic.w	r2, r2, #4
 800927e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8165 	beq.w	8009554 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009292:	e15f      	b.n	8009554 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2202      	movs	r2, #2
 800929e:	409a      	lsls	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 80c5 	beq.w	8009434 <HAL_DMA_IRQHandler+0xce8>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80bf 	beq.w	8009434 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	2202      	movs	r2, #2
 80092c0:	409a      	lsls	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d018      	beq.n	8009302 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 813a 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092ec:	e134      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8130 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009300:	e12a      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	f040 8089 	bne.w	8009420 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a2b      	ldr	r2, [pc, #172]	@ (80093c0 <HAL_DMA_IRQHandler+0xc74>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d04a      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a29      	ldr	r2, [pc, #164]	@ (80093c4 <HAL_DMA_IRQHandler+0xc78>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d045      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a28      	ldr	r2, [pc, #160]	@ (80093c8 <HAL_DMA_IRQHandler+0xc7c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d040      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a26      	ldr	r2, [pc, #152]	@ (80093cc <HAL_DMA_IRQHandler+0xc80>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d03b      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a25      	ldr	r2, [pc, #148]	@ (80093d0 <HAL_DMA_IRQHandler+0xc84>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d036      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a23      	ldr	r2, [pc, #140]	@ (80093d4 <HAL_DMA_IRQHandler+0xc88>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d031      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a22      	ldr	r2, [pc, #136]	@ (80093d8 <HAL_DMA_IRQHandler+0xc8c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d02c      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a20      	ldr	r2, [pc, #128]	@ (80093dc <HAL_DMA_IRQHandler+0xc90>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d027      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1f      	ldr	r2, [pc, #124]	@ (80093e0 <HAL_DMA_IRQHandler+0xc94>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d022      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1d      	ldr	r2, [pc, #116]	@ (80093e4 <HAL_DMA_IRQHandler+0xc98>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d01d      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1c      	ldr	r2, [pc, #112]	@ (80093e8 <HAL_DMA_IRQHandler+0xc9c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d018      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a1a      	ldr	r2, [pc, #104]	@ (80093ec <HAL_DMA_IRQHandler+0xca0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a19      	ldr	r2, [pc, #100]	@ (80093f0 <HAL_DMA_IRQHandler+0xca4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00e      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a17      	ldr	r2, [pc, #92]	@ (80093f4 <HAL_DMA_IRQHandler+0xca8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d009      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a16      	ldr	r2, [pc, #88]	@ (80093f8 <HAL_DMA_IRQHandler+0xcac>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d004      	beq.n	80093ae <HAL_DMA_IRQHandler+0xc62>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a14      	ldr	r2, [pc, #80]	@ (80093fc <HAL_DMA_IRQHandler+0xcb0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d128      	bne.n	8009400 <HAL_DMA_IRQHandler+0xcb4>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0214 	bic.w	r2, r2, #20
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e027      	b.n	8009410 <HAL_DMA_IRQHandler+0xcc4>
 80093c0:	40020010 	.word	0x40020010
 80093c4:	40020028 	.word	0x40020028
 80093c8:	40020040 	.word	0x40020040
 80093cc:	40020058 	.word	0x40020058
 80093d0:	40020070 	.word	0x40020070
 80093d4:	40020088 	.word	0x40020088
 80093d8:	400200a0 	.word	0x400200a0
 80093dc:	400200b8 	.word	0x400200b8
 80093e0:	40020410 	.word	0x40020410
 80093e4:	40020428 	.word	0x40020428
 80093e8:	40020440 	.word	0x40020440
 80093ec:	40020458 	.word	0x40020458
 80093f0:	40020470 	.word	0x40020470
 80093f4:	40020488 	.word	0x40020488
 80093f8:	400204a0 	.word	0x400204a0
 80093fc:	400204b8 	.word	0x400204b8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 020a 	bic.w	r2, r2, #10
 800940e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 8097 	beq.w	8009558 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009432:	e091      	b.n	8009558 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	2208      	movs	r2, #8
 800943e:	409a      	lsls	r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	4013      	ands	r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8088 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8082 	beq.w	800955a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a41      	ldr	r2, [pc, #260]	@ (8009560 <HAL_DMA_IRQHandler+0xe14>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d04a      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a3f      	ldr	r2, [pc, #252]	@ (8009564 <HAL_DMA_IRQHandler+0xe18>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d045      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a3e      	ldr	r2, [pc, #248]	@ (8009568 <HAL_DMA_IRQHandler+0xe1c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d040      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a3c      	ldr	r2, [pc, #240]	@ (800956c <HAL_DMA_IRQHandler+0xe20>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d03b      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a3b      	ldr	r2, [pc, #236]	@ (8009570 <HAL_DMA_IRQHandler+0xe24>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d036      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a39      	ldr	r2, [pc, #228]	@ (8009574 <HAL_DMA_IRQHandler+0xe28>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d031      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a38      	ldr	r2, [pc, #224]	@ (8009578 <HAL_DMA_IRQHandler+0xe2c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d02c      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a36      	ldr	r2, [pc, #216]	@ (800957c <HAL_DMA_IRQHandler+0xe30>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d027      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a35      	ldr	r2, [pc, #212]	@ (8009580 <HAL_DMA_IRQHandler+0xe34>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d022      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a33      	ldr	r2, [pc, #204]	@ (8009584 <HAL_DMA_IRQHandler+0xe38>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d01d      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a32      	ldr	r2, [pc, #200]	@ (8009588 <HAL_DMA_IRQHandler+0xe3c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d018      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a30      	ldr	r2, [pc, #192]	@ (800958c <HAL_DMA_IRQHandler+0xe40>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a2f      	ldr	r2, [pc, #188]	@ (8009590 <HAL_DMA_IRQHandler+0xe44>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a2d      	ldr	r2, [pc, #180]	@ (8009594 <HAL_DMA_IRQHandler+0xe48>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d009      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009598 <HAL_DMA_IRQHandler+0xe4c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d004      	beq.n	80094f6 <HAL_DMA_IRQHandler+0xdaa>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a2a      	ldr	r2, [pc, #168]	@ (800959c <HAL_DMA_IRQHandler+0xe50>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d108      	bne.n	8009508 <HAL_DMA_IRQHandler+0xdbc>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 021c 	bic.w	r2, r2, #28
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e007      	b.n	8009518 <HAL_DMA_IRQHandler+0xdcc>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 020e 	bic.w	r2, r2, #14
 8009516:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2201      	movs	r2, #1
 8009522:	409a      	lsls	r2, r3
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
 800954e:	e004      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009550:	bf00      	nop
 8009552:	e002      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009554:	bf00      	nop
 8009556:	e000      	b.n	800955a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009558:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800955a:	3728      	adds	r7, #40	@ 0x28
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40020010 	.word	0x40020010
 8009564:	40020028 	.word	0x40020028
 8009568:	40020040 	.word	0x40020040
 800956c:	40020058 	.word	0x40020058
 8009570:	40020070 	.word	0x40020070
 8009574:	40020088 	.word	0x40020088
 8009578:	400200a0 	.word	0x400200a0
 800957c:	400200b8 	.word	0x400200b8
 8009580:	40020410 	.word	0x40020410
 8009584:	40020428 	.word	0x40020428
 8009588:	40020440 	.word	0x40020440
 800958c:	40020458 	.word	0x40020458
 8009590:	40020470 	.word	0x40020470
 8009594:	40020488 	.word	0x40020488
 8009598:	400204a0 	.word	0x400204a0
 800959c:	400204b8 	.word	0x400204b8

080095a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a7f      	ldr	r2, [pc, #508]	@ (80097d4 <DMA_SetConfig+0x21c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d072      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a7d      	ldr	r2, [pc, #500]	@ (80097d8 <DMA_SetConfig+0x220>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d06d      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a7c      	ldr	r2, [pc, #496]	@ (80097dc <DMA_SetConfig+0x224>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d068      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a7a      	ldr	r2, [pc, #488]	@ (80097e0 <DMA_SetConfig+0x228>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d063      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a79      	ldr	r2, [pc, #484]	@ (80097e4 <DMA_SetConfig+0x22c>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d05e      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a77      	ldr	r2, [pc, #476]	@ (80097e8 <DMA_SetConfig+0x230>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d059      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a76      	ldr	r2, [pc, #472]	@ (80097ec <DMA_SetConfig+0x234>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d054      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a74      	ldr	r2, [pc, #464]	@ (80097f0 <DMA_SetConfig+0x238>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d04f      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a73      	ldr	r2, [pc, #460]	@ (80097f4 <DMA_SetConfig+0x23c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d04a      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a71      	ldr	r2, [pc, #452]	@ (80097f8 <DMA_SetConfig+0x240>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d045      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a70      	ldr	r2, [pc, #448]	@ (80097fc <DMA_SetConfig+0x244>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d040      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a6e      	ldr	r2, [pc, #440]	@ (8009800 <DMA_SetConfig+0x248>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d03b      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a6d      	ldr	r2, [pc, #436]	@ (8009804 <DMA_SetConfig+0x24c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d036      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6b      	ldr	r2, [pc, #428]	@ (8009808 <DMA_SetConfig+0x250>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d031      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a6a      	ldr	r2, [pc, #424]	@ (800980c <DMA_SetConfig+0x254>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d02c      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a68      	ldr	r2, [pc, #416]	@ (8009810 <DMA_SetConfig+0x258>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d027      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a67      	ldr	r2, [pc, #412]	@ (8009814 <DMA_SetConfig+0x25c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d022      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a65      	ldr	r2, [pc, #404]	@ (8009818 <DMA_SetConfig+0x260>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d01d      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a64      	ldr	r2, [pc, #400]	@ (800981c <DMA_SetConfig+0x264>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d018      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a62      	ldr	r2, [pc, #392]	@ (8009820 <DMA_SetConfig+0x268>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d013      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a61      	ldr	r2, [pc, #388]	@ (8009824 <DMA_SetConfig+0x26c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00e      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a5f      	ldr	r2, [pc, #380]	@ (8009828 <DMA_SetConfig+0x270>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d009      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a5e      	ldr	r2, [pc, #376]	@ (800982c <DMA_SetConfig+0x274>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d004      	beq.n	80096c2 <DMA_SetConfig+0x10a>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a5c      	ldr	r2, [pc, #368]	@ (8009830 <DMA_SetConfig+0x278>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d101      	bne.n	80096c6 <DMA_SetConfig+0x10e>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <DMA_SetConfig+0x110>
 80096c6:	2300      	movs	r3, #0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80096d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a39      	ldr	r2, [pc, #228]	@ (80097d4 <DMA_SetConfig+0x21c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d04a      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a38      	ldr	r2, [pc, #224]	@ (80097d8 <DMA_SetConfig+0x220>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d045      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a36      	ldr	r2, [pc, #216]	@ (80097dc <DMA_SetConfig+0x224>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d040      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a35      	ldr	r2, [pc, #212]	@ (80097e0 <DMA_SetConfig+0x228>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d03b      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a33      	ldr	r2, [pc, #204]	@ (80097e4 <DMA_SetConfig+0x22c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d036      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a32      	ldr	r2, [pc, #200]	@ (80097e8 <DMA_SetConfig+0x230>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d031      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a30      	ldr	r2, [pc, #192]	@ (80097ec <DMA_SetConfig+0x234>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d02c      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a2f      	ldr	r2, [pc, #188]	@ (80097f0 <DMA_SetConfig+0x238>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d027      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2d      	ldr	r2, [pc, #180]	@ (80097f4 <DMA_SetConfig+0x23c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a2c      	ldr	r2, [pc, #176]	@ (80097f8 <DMA_SetConfig+0x240>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d01d      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a2a      	ldr	r2, [pc, #168]	@ (80097fc <DMA_SetConfig+0x244>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a29      	ldr	r2, [pc, #164]	@ (8009800 <DMA_SetConfig+0x248>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a27      	ldr	r2, [pc, #156]	@ (8009804 <DMA_SetConfig+0x24c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a26      	ldr	r2, [pc, #152]	@ (8009808 <DMA_SetConfig+0x250>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a24      	ldr	r2, [pc, #144]	@ (800980c <DMA_SetConfig+0x254>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <DMA_SetConfig+0x1d0>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a23      	ldr	r2, [pc, #140]	@ (8009810 <DMA_SetConfig+0x258>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d101      	bne.n	800978c <DMA_SetConfig+0x1d4>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <DMA_SetConfig+0x1d6>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d059      	beq.n	8009846 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009796:	f003 031f 	and.w	r3, r3, #31
 800979a:	223f      	movs	r2, #63	@ 0x3f
 800979c:	409a      	lsls	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80097b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d138      	bne.n	8009834 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097d2:	e086      	b.n	80098e2 <DMA_SetConfig+0x32a>
 80097d4:	40020010 	.word	0x40020010
 80097d8:	40020028 	.word	0x40020028
 80097dc:	40020040 	.word	0x40020040
 80097e0:	40020058 	.word	0x40020058
 80097e4:	40020070 	.word	0x40020070
 80097e8:	40020088 	.word	0x40020088
 80097ec:	400200a0 	.word	0x400200a0
 80097f0:	400200b8 	.word	0x400200b8
 80097f4:	40020410 	.word	0x40020410
 80097f8:	40020428 	.word	0x40020428
 80097fc:	40020440 	.word	0x40020440
 8009800:	40020458 	.word	0x40020458
 8009804:	40020470 	.word	0x40020470
 8009808:	40020488 	.word	0x40020488
 800980c:	400204a0 	.word	0x400204a0
 8009810:	400204b8 	.word	0x400204b8
 8009814:	58025408 	.word	0x58025408
 8009818:	5802541c 	.word	0x5802541c
 800981c:	58025430 	.word	0x58025430
 8009820:	58025444 	.word	0x58025444
 8009824:	58025458 	.word	0x58025458
 8009828:	5802546c 	.word	0x5802546c
 800982c:	58025480 	.word	0x58025480
 8009830:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	60da      	str	r2, [r3, #12]
}
 8009844:	e04d      	b.n	80098e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a29      	ldr	r2, [pc, #164]	@ (80098f0 <DMA_SetConfig+0x338>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d022      	beq.n	8009896 <DMA_SetConfig+0x2de>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a27      	ldr	r2, [pc, #156]	@ (80098f4 <DMA_SetConfig+0x33c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d01d      	beq.n	8009896 <DMA_SetConfig+0x2de>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a26      	ldr	r2, [pc, #152]	@ (80098f8 <DMA_SetConfig+0x340>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d018      	beq.n	8009896 <DMA_SetConfig+0x2de>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a24      	ldr	r2, [pc, #144]	@ (80098fc <DMA_SetConfig+0x344>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d013      	beq.n	8009896 <DMA_SetConfig+0x2de>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a23      	ldr	r2, [pc, #140]	@ (8009900 <DMA_SetConfig+0x348>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d00e      	beq.n	8009896 <DMA_SetConfig+0x2de>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a21      	ldr	r2, [pc, #132]	@ (8009904 <DMA_SetConfig+0x34c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d009      	beq.n	8009896 <DMA_SetConfig+0x2de>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a20      	ldr	r2, [pc, #128]	@ (8009908 <DMA_SetConfig+0x350>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d004      	beq.n	8009896 <DMA_SetConfig+0x2de>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1e      	ldr	r2, [pc, #120]	@ (800990c <DMA_SetConfig+0x354>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d101      	bne.n	800989a <DMA_SetConfig+0x2e2>
 8009896:	2301      	movs	r3, #1
 8009898:	e000      	b.n	800989c <DMA_SetConfig+0x2e4>
 800989a:	2300      	movs	r3, #0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d020      	beq.n	80098e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	2201      	movs	r2, #1
 80098aa:	409a      	lsls	r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	d108      	bne.n	80098d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	60da      	str	r2, [r3, #12]
}
 80098d0:	e007      	b.n	80098e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	60da      	str	r2, [r3, #12]
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	58025408 	.word	0x58025408
 80098f4:	5802541c 	.word	0x5802541c
 80098f8:	58025430 	.word	0x58025430
 80098fc:	58025444 	.word	0x58025444
 8009900:	58025458 	.word	0x58025458
 8009904:	5802546c 	.word	0x5802546c
 8009908:	58025480 	.word	0x58025480
 800990c:	58025494 	.word	0x58025494

08009910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a42      	ldr	r2, [pc, #264]	@ (8009a28 <DMA_CalcBaseAndBitshift+0x118>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d04a      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a41      	ldr	r2, [pc, #260]	@ (8009a2c <DMA_CalcBaseAndBitshift+0x11c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d045      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a3f      	ldr	r2, [pc, #252]	@ (8009a30 <DMA_CalcBaseAndBitshift+0x120>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d040      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3e      	ldr	r2, [pc, #248]	@ (8009a34 <DMA_CalcBaseAndBitshift+0x124>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d03b      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a3c      	ldr	r2, [pc, #240]	@ (8009a38 <DMA_CalcBaseAndBitshift+0x128>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d036      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a3b      	ldr	r2, [pc, #236]	@ (8009a3c <DMA_CalcBaseAndBitshift+0x12c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d031      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a39      	ldr	r2, [pc, #228]	@ (8009a40 <DMA_CalcBaseAndBitshift+0x130>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d02c      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a38      	ldr	r2, [pc, #224]	@ (8009a44 <DMA_CalcBaseAndBitshift+0x134>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d027      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a36      	ldr	r2, [pc, #216]	@ (8009a48 <DMA_CalcBaseAndBitshift+0x138>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d022      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a35      	ldr	r2, [pc, #212]	@ (8009a4c <DMA_CalcBaseAndBitshift+0x13c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d01d      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a33      	ldr	r2, [pc, #204]	@ (8009a50 <DMA_CalcBaseAndBitshift+0x140>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d018      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a32      	ldr	r2, [pc, #200]	@ (8009a54 <DMA_CalcBaseAndBitshift+0x144>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a30      	ldr	r2, [pc, #192]	@ (8009a58 <DMA_CalcBaseAndBitshift+0x148>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d00e      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a5c <DMA_CalcBaseAndBitshift+0x14c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d009      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009a60 <DMA_CalcBaseAndBitshift+0x150>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d004      	beq.n	80099b8 <DMA_CalcBaseAndBitshift+0xa8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009a64 <DMA_CalcBaseAndBitshift+0x154>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d101      	bne.n	80099bc <DMA_CalcBaseAndBitshift+0xac>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <DMA_CalcBaseAndBitshift+0xae>
 80099bc:	2300      	movs	r3, #0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d024      	beq.n	8009a0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	3b10      	subs	r3, #16
 80099ca:	4a27      	ldr	r2, [pc, #156]	@ (8009a68 <DMA_CalcBaseAndBitshift+0x158>)
 80099cc:	fba2 2303 	umull	r2, r3, r2, r3
 80099d0:	091b      	lsrs	r3, r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	4a24      	ldr	r2, [pc, #144]	@ (8009a6c <DMA_CalcBaseAndBitshift+0x15c>)
 80099dc:	5cd3      	ldrb	r3, [r2, r3]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d908      	bls.n	80099fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a70 <DMA_CalcBaseAndBitshift+0x160>)
 80099f2:	4013      	ands	r3, r2
 80099f4:	1d1a      	adds	r2, r3, #4
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80099fa:	e00d      	b.n	8009a18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <DMA_CalcBaseAndBitshift+0x160>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a0a:	e005      	b.n	8009a18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	40020010 	.word	0x40020010
 8009a2c:	40020028 	.word	0x40020028
 8009a30:	40020040 	.word	0x40020040
 8009a34:	40020058 	.word	0x40020058
 8009a38:	40020070 	.word	0x40020070
 8009a3c:	40020088 	.word	0x40020088
 8009a40:	400200a0 	.word	0x400200a0
 8009a44:	400200b8 	.word	0x400200b8
 8009a48:	40020410 	.word	0x40020410
 8009a4c:	40020428 	.word	0x40020428
 8009a50:	40020440 	.word	0x40020440
 8009a54:	40020458 	.word	0x40020458
 8009a58:	40020470 	.word	0x40020470
 8009a5c:	40020488 	.word	0x40020488
 8009a60:	400204a0 	.word	0x400204a0
 8009a64:	400204b8 	.word	0x400204b8
 8009a68:	aaaaaaab 	.word	0xaaaaaaab
 8009a6c:	08017f38 	.word	0x08017f38
 8009a70:	fffffc00 	.word	0xfffffc00

08009a74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d120      	bne.n	8009aca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d858      	bhi.n	8009b42 <DMA_CheckFifoParam+0xce>
 8009a90:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <DMA_CheckFifoParam+0x24>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009abb 	.word	0x08009abb
 8009aa0:	08009aa9 	.word	0x08009aa9
 8009aa4:	08009b43 	.word	0x08009b43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d048      	beq.n	8009b46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ab8:	e045      	b.n	8009b46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009ac2:	d142      	bne.n	8009b4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ac8:	e03f      	b.n	8009b4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad2:	d123      	bne.n	8009b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d838      	bhi.n	8009b4e <DMA_CheckFifoParam+0xda>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <DMA_CheckFifoParam+0x70>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009afb 	.word	0x08009afb
 8009aec:	08009af5 	.word	0x08009af5
 8009af0:	08009b0d 	.word	0x08009b0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	73fb      	strb	r3, [r7, #15]
        break;
 8009af8:	e030      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d025      	beq.n	8009b52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b0a:	e022      	b.n	8009b52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009b14:	d11f      	bne.n	8009b56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b1a:	e01c      	b.n	8009b56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d902      	bls.n	8009b2a <DMA_CheckFifoParam+0xb6>
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d003      	beq.n	8009b30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b28:	e018      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8009b2e:	e015      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00e      	beq.n	8009b5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	e00b      	b.n	8009b5a <DMA_CheckFifoParam+0xe6>
        break;
 8009b42:	bf00      	nop
 8009b44:	e00a      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        break;
 8009b46:	bf00      	nop
 8009b48:	e008      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        break;
 8009b4a:	bf00      	nop
 8009b4c:	e006      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        break;
 8009b4e:	bf00      	nop
 8009b50:	e004      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        break;
 8009b52:	bf00      	nop
 8009b54:	e002      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
        break;
 8009b56:	bf00      	nop
 8009b58:	e000      	b.n	8009b5c <DMA_CheckFifoParam+0xe8>
    break;
 8009b5a:	bf00      	nop
    }
  }

  return status;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop

08009b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a38      	ldr	r2, [pc, #224]	@ (8009c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d022      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a36      	ldr	r2, [pc, #216]	@ (8009c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d01d      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a35      	ldr	r2, [pc, #212]	@ (8009c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d018      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a33      	ldr	r2, [pc, #204]	@ (8009c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d013      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a32      	ldr	r2, [pc, #200]	@ (8009c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00e      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a30      	ldr	r2, [pc, #192]	@ (8009c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d009      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a2f      	ldr	r2, [pc, #188]	@ (8009c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d004      	beq.n	8009bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d101      	bne.n	8009bce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01a      	beq.n	8009c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	3b08      	subs	r3, #8
 8009bdc:	4a28      	ldr	r2, [pc, #160]	@ (8009c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009bde:	fba2 2303 	umull	r2, r3, r2, r3
 8009be2:	091b      	lsrs	r3, r3, #4
 8009be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4b26      	ldr	r3, [pc, #152]	@ (8009c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a24      	ldr	r2, [pc, #144]	@ (8009c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009bf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	2201      	movs	r2, #1
 8009c02:	409a      	lsls	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c08:	e024      	b.n	8009c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	3b10      	subs	r3, #16
 8009c12:	4a1e      	ldr	r2, [pc, #120]	@ (8009c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c14:	fba2 2303 	umull	r2, r3, r2, r3
 8009c18:	091b      	lsrs	r3, r3, #4
 8009c1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d806      	bhi.n	8009c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4a1b      	ldr	r2, [pc, #108]	@ (8009c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d902      	bls.n	8009c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4b18      	ldr	r3, [pc, #96]	@ (8009c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a16      	ldr	r2, [pc, #88]	@ (8009c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009c44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f003 031f 	and.w	r3, r3, #31
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	409a      	lsls	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c54:	bf00      	nop
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	58025408 	.word	0x58025408
 8009c64:	5802541c 	.word	0x5802541c
 8009c68:	58025430 	.word	0x58025430
 8009c6c:	58025444 	.word	0x58025444
 8009c70:	58025458 	.word	0x58025458
 8009c74:	5802546c 	.word	0x5802546c
 8009c78:	58025480 	.word	0x58025480
 8009c7c:	58025494 	.word	0x58025494
 8009c80:	cccccccd 	.word	0xcccccccd
 8009c84:	16009600 	.word	0x16009600
 8009c88:	58025880 	.word	0x58025880
 8009c8c:	aaaaaaab 	.word	0xaaaaaaab
 8009c90:	400204b8 	.word	0x400204b8
 8009c94:	4002040f 	.word	0x4002040f
 8009c98:	10008200 	.word	0x10008200
 8009c9c:	40020880 	.word	0x40020880

08009ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d04a      	beq.n	8009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d847      	bhi.n	8009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a25      	ldr	r2, [pc, #148]	@ (8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d022      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a24      	ldr	r2, [pc, #144]	@ (8009d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d01d      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a22      	ldr	r2, [pc, #136]	@ (8009d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d018      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a21      	ldr	r2, [pc, #132]	@ (8009d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00e      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d009      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1b      	ldr	r2, [pc, #108]	@ (8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d101      	bne.n	8009d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d10:	2300      	movs	r3, #0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4b17      	ldr	r3, [pc, #92]	@ (8009d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a15      	ldr	r2, [pc, #84]	@ (8009d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d28:	671a      	str	r2, [r3, #112]	@ 0x70
 8009d2a:	e009      	b.n	8009d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4b14      	ldr	r3, [pc, #80]	@ (8009d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a11      	ldr	r2, [pc, #68]	@ (8009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009d3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2201      	movs	r2, #1
 8009d46:	409a      	lsls	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	58025408 	.word	0x58025408
 8009d5c:	5802541c 	.word	0x5802541c
 8009d60:	58025430 	.word	0x58025430
 8009d64:	58025444 	.word	0x58025444
 8009d68:	58025458 	.word	0x58025458
 8009d6c:	5802546c 	.word	0x5802546c
 8009d70:	58025480 	.word	0x58025480
 8009d74:	58025494 	.word	0x58025494
 8009d78:	1600963f 	.word	0x1600963f
 8009d7c:	58025940 	.word	0x58025940
 8009d80:	1000823f 	.word	0x1000823f
 8009d84:	40020940 	.word	0x40020940

08009d88 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	460b      	mov	r3, r1
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e00a      	b.n	8009dba <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
      break;
 8009db0:	e002      	b.n	8009db8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	75fb      	strb	r3, [r7, #23]
      break;
 8009db6:	bf00      	nop
  }

  return status;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e003      	b.n	8009de2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 031f 	and.w	r3, r3, #31
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	011a      	lsls	r2, r3, #4
 8009e18:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <HAL_EXTI_IRQHandler+0x5c>)
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4798      	blx	r3
    }
  }
}
 8009e42:	bf00      	nop
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	58000088 	.word	0x58000088

08009e50 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b098      	sub	sp, #96	@ 0x60
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009e58:	4a84      	ldr	r2, [pc, #528]	@ (800a06c <HAL_FDCAN_Init+0x21c>)
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4611      	mov	r1, r2
 8009e60:	224c      	movs	r2, #76	@ 0x4c
 8009e62:	4618      	mov	r0, r3
 8009e64:	f00b fa3f 	bl	80152e6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e1c6      	b.n	800a200 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a7e      	ldr	r2, [pc, #504]	@ (800a070 <HAL_FDCAN_Init+0x220>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d106      	bne.n	8009e8a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009e84:	461a      	mov	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fc f8cc 	bl	800603c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 0210 	bic.w	r2, r2, #16
 8009eb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009eb4:	f7fc fdd6 	bl	8006a64 <HAL_GetTick>
 8009eb8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009eba:	e014      	b.n	8009ee6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009ebc:	f7fc fdd2 	bl	8006a64 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b0a      	cmp	r3, #10
 8009ec8:	d90d      	bls.n	8009ee6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ed0:	f043 0201 	orr.w	r2, r3, #1
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2203      	movs	r2, #3
 8009ede:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e18c      	b.n	800a200 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d0e3      	beq.n	8009ebc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f042 0201 	orr.w	r2, r2, #1
 8009f02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f04:	f7fc fdae 	bl	8006a64 <HAL_GetTick>
 8009f08:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009f0a:	e014      	b.n	8009f36 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009f0c:	f7fc fdaa 	bl	8006a64 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b0a      	cmp	r3, #10
 8009f18:	d90d      	bls.n	8009f36 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f20:	f043 0201 	orr.w	r2, r3, #1
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e164      	b.n	800a200 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0e3      	beq.n	8009f0c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0202 	orr.w	r2, r2, #2
 8009f52:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	7c1b      	ldrb	r3, [r3, #16]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d108      	bne.n	8009f6e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f6a:	619a      	str	r2, [r3, #24]
 8009f6c:	e007      	b.n	8009f7e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699a      	ldr	r2, [r3, #24]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7c5b      	ldrb	r3, [r3, #17]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d108      	bne.n	8009f98 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699a      	ldr	r2, [r3, #24]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f94:	619a      	str	r2, [r3, #24]
 8009f96:	e007      	b.n	8009fa8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699a      	ldr	r2, [r3, #24]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009fa6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	7c9b      	ldrb	r3, [r3, #18]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d108      	bne.n	8009fc2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	699a      	ldr	r2, [r3, #24]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009fbe:	619a      	str	r2, [r3, #24]
 8009fc0:	e007      	b.n	8009fd2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699a      	ldr	r2, [r3, #24]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009fd0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	699a      	ldr	r2, [r3, #24]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009ff6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691a      	ldr	r2, [r3, #16]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 0210 	bic.w	r2, r2, #16
 800a006:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d108      	bne.n	800a022 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0204 	orr.w	r2, r2, #4
 800a01e:	619a      	str	r2, [r3, #24]
 800a020:	e030      	b.n	800a084 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d02c      	beq.n	800a084 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d020      	beq.n	800a074 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	699a      	ldr	r2, [r3, #24]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a040:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0210 	orr.w	r2, r2, #16
 800a050:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d114      	bne.n	800a084 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0220 	orr.w	r2, r2, #32
 800a068:	619a      	str	r2, [r3, #24]
 800a06a:	e00b      	b.n	800a084 <HAL_FDCAN_Init+0x234>
 800a06c:	08017e70 	.word	0x08017e70
 800a070:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0220 	orr.w	r2, r2, #32
 800a082:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	3b01      	subs	r3, #1
 800a08a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	3b01      	subs	r3, #1
 800a092:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a094:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a09c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a0ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a0ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0b8:	d115      	bne.n	800a0e6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0be:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a0c8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a0d2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a0e2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a0e4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a10c:	4413      	add	r3, r2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d011      	beq.n	800a136 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a11a:	f023 0107 	bic.w	r1, r3, #7
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	3360      	adds	r3, #96	@ 0x60
 800a126:	443b      	add	r3, r7
 800a128:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d011      	beq.n	800a162 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a146:	f023 0107 	bic.w	r1, r3, #7
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	3360      	adds	r3, #96	@ 0x60
 800a152:	443b      	add	r3, r7
 800a154:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a166:	2b00      	cmp	r3, #0
 800a168:	d012      	beq.n	800a190 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a172:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	3360      	adds	r3, #96	@ 0x60
 800a17e:	443b      	add	r3, r7
 800a180:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a184:	011a      	lsls	r2, r3, #4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a194:	2b00      	cmp	r3, #0
 800a196:	d012      	beq.n	800a1be <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a1a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	3360      	adds	r3, #96	@ 0x60
 800a1ac:	443b      	add	r3, r7
 800a1ae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a1b2:	021a      	lsls	r2, r3, #8
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a11      	ldr	r2, [pc, #68]	@ (800a208 <HAL_FDCAN_Init+0x3b8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d107      	bne.n	800a1d8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	689a      	ldr	r2, [r3, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f022 0203 	bic.w	r2, r2, #3
 800a1d6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fd93 	bl	800ad1c <FDCAN_CalcultateRamBlockAddresses>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800a1fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800a200:	4618      	mov	r0, r3
 800a202:	3760      	adds	r7, #96	@ 0x60
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	4000a000 	.word	0x4000a000

0800a20c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d111      	bne.n	800a244 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699a      	ldr	r2, [r3, #24]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0201 	bic.w	r2, r2, #1
 800a236:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	e008      	b.n	800a256 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a24a:	f043 0204 	orr.w	r2, r3, #4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
  }
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	60b9      	str	r1, [r7, #8]
 800a26c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d141      	bne.n	800a2fe <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a282:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d109      	bne.n	800a29e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a290:	f043 0220 	orr.w	r2, r3, #32
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e038      	b.n	800a310 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a2a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e026      	b.n	800a310 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	f003 031f 	and.w	r3, r3, #31
 800a2d0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 fea5 	bl	800b028 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	fa01 f202 	lsl.w	r2, r1, r2
 800a2ea:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	409a      	lsls	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e008      	b.n	800a310 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a304:	f043 0208 	orr.w	r2, r3, #8
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
  }
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a318:	b480      	push	{r7}
 800a31a:	b08b      	sub	sp, #44	@ 0x2c
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a330:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800a332:	7efb      	ldrb	r3, [r7, #27]
 800a334:	2b02      	cmp	r3, #2
 800a336:	f040 8149 	bne.w	800a5cc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b40      	cmp	r3, #64	@ 0x40
 800a33e:	d14c      	bne.n	800a3da <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a348:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d109      	bne.n	800a364 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a356:	f043 0220 	orr.w	r2, r3, #32
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e13c      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a36c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a37a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e12a      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a390:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a398:	d10a      	bne.n	800a3b0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a3a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3aa:	d101      	bne.n	800a3b0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	fb01 f303 	mul.w	r3, r1, r3
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3d8:	e068      	b.n	800a4ac <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b41      	cmp	r3, #65	@ 0x41
 800a3de:	d14c      	bne.n	800a47a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d109      	bne.n	800a404 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3f6:	f043 0220 	orr.w	r2, r3, #32
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e0ec      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a41a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e0da      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a438:	d10a      	bne.n	800a450 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a44a:	d101      	bne.n	800a450 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a44c:	2301      	movs	r3, #1
 800a44e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a458:	0a1b      	lsrs	r3, r3, #8
 800a45a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	fb01 f303 	mul.w	r3, r1, r3
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	627b      	str	r3, [r7, #36]	@ 0x24
 800a478:	e018      	b.n	800a4ac <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	429a      	cmp	r2, r3
 800a482:	d309      	bcc.n	800a498 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a48a:	f043 0220 	orr.w	r2, r3, #32
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e0a2      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	0c9b      	lsrs	r3, r3, #18
 800a4c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e005      	b.n	800a4dc <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	0c1b      	lsrs	r3, r3, #16
 800a50a:	f003 020f 	and.w	r2, r3, #15
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	0e1b      	lsrs	r3, r3, #24
 800a530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	0fda      	lsrs	r2, r3, #31
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	3304      	adds	r3, #4
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a54c:	2300      	movs	r3, #0
 800a54e:	623b      	str	r3, [r7, #32]
 800a550:	e00a      	b.n	800a568 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	441a      	add	r2, r3
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	440b      	add	r3, r1
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	3301      	adds	r3, #1
 800a566:	623b      	str	r3, [r7, #32]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5ec <HAL_FDCAN_GetRxMessage+0x2d4>)
 800a56e:	5cd3      	ldrb	r3, [r2, r3]
 800a570:	461a      	mov	r2, r3
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	4293      	cmp	r3, r2
 800a576:	d3ec      	bcc.n	800a552 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b40      	cmp	r3, #64	@ 0x40
 800a57c:	d105      	bne.n	800a58a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69fa      	ldr	r2, [r7, #28]
 800a584:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800a588:	e01e      	b.n	800a5c8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b41      	cmp	r3, #65	@ 0x41
 800a58e:	d105      	bne.n	800a59c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800a59a:	e015      	b.n	800a5c8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b1f      	cmp	r3, #31
 800a5a0:	d808      	bhi.n	800a5b4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	fa01 f202 	lsl.w	r2, r1, r2
 800a5ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a5b2:	e009      	b.n	800a5c8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f003 021f 	and.w	r2, r3, #31
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2101      	movs	r1, #1
 800a5c0:	fa01 f202 	lsl.w	r2, r1, r2
 800a5c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e008      	b.n	800a5de <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5d2:	f043 0208 	orr.w	r2, r3, #8
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	372c      	adds	r7, #44	@ 0x2c
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	08017f40 	.word	0x08017f40

0800a5f0 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a604:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800a606:	68fb      	ldr	r3, [r7, #12]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a626:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d002      	beq.n	800a634 <HAL_FDCAN_ActivateNotification+0x20>
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2b02      	cmp	r3, #2
 800a632:	d155      	bne.n	800a6e0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d108      	bne.n	800a654 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f042 0201 	orr.w	r2, r2, #1
 800a650:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a652:	e014      	b.n	800a67e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4013      	ands	r3, r2
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	d108      	bne.n	800a676 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0202 	orr.w	r2, r2, #2
 800a672:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a674:	e003      	b.n	800a67e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2203      	movs	r2, #3
 800a67c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	430a      	orrs	r2, r1
 800a698:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a700 <HAL_FDCAN_ActivateNotification+0xec>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a704 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a6d0:	695a      	ldr	r2, [r3, #20]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	0f9b      	lsrs	r3, r3, #30
 800a6d6:	490b      	ldr	r1, [pc, #44]	@ (800a704 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e008      	b.n	800a6f2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6e6:	f043 0202 	orr.w	r2, r3, #2
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
  }
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	3fcfffff 	.word	0x3fcfffff
 800a704:	4000a800 	.word	0x4000a800

0800a708 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b096      	sub	sp, #88	@ 0x58
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800a710:	4b9a      	ldr	r3, [pc, #616]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	079b      	lsls	r3, r3, #30
 800a716:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800a718:	4b98      	ldr	r3, [pc, #608]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	079b      	lsls	r3, r3, #30
 800a71e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a720:	4013      	ands	r3, r2
 800a722:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a72e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a738:	4013      	ands	r3, r2
 800a73a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a742:	f003 030f 	and.w	r3, r3, #15
 800a746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a750:	4013      	ands	r3, r2
 800a752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a75e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a768:	4013      	ands	r3, r2
 800a76a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a772:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800a776:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a780:	4013      	ands	r3, r2
 800a782:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a78a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800a78e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a798:	4013      	ands	r3, r2
 800a79a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800a7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ae:	0a1b      	lsrs	r3, r3, #8
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d010      	beq.n	800a7da <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800a7ce:	4b6b      	ldr	r3, [pc, #428]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fa54 	bl	800ac82 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800a7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7dc:	0a9b      	lsrs	r3, r3, #10
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01d      	beq.n	800a822 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e8:	0a9b      	lsrs	r3, r3, #10
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d017      	beq.n	800a822 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7fa:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a806:	4013      	ands	r3, r2
 800a808:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a812:	651a      	str	r2, [r3, #80]	@ 0x50
 800a814:	4b59      	ldr	r3, [pc, #356]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a816:	2200      	movs	r2, #0
 800a818:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800a81a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa07 	bl	800ac30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800a822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00d      	beq.n	800a844 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a82e:	4b54      	ldr	r3, [pc, #336]	@ (800a980 <HAL_FDCAN_IRQHandler+0x278>)
 800a830:	400b      	ands	r3, r1
 800a832:	6513      	str	r3, [r2, #80]	@ 0x50
 800a834:	4a51      	ldr	r2, [pc, #324]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a838:	0f9b      	lsrs	r3, r3, #30
 800a83a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800a83c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9c0 	bl	800abc4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800a844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00d      	beq.n	800a866 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a850:	4b4b      	ldr	r3, [pc, #300]	@ (800a980 <HAL_FDCAN_IRQHandler+0x278>)
 800a852:	400b      	ands	r3, r1
 800a854:	6513      	str	r3, [r2, #80]	@ 0x50
 800a856:	4a49      	ldr	r2, [pc, #292]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a85a:	0f9b      	lsrs	r3, r3, #30
 800a85c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800a85e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f9ba 	bl	800abda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800a866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a872:	4b43      	ldr	r3, [pc, #268]	@ (800a980 <HAL_FDCAN_IRQHandler+0x278>)
 800a874:	400b      	ands	r3, r1
 800a876:	6513      	str	r3, [r2, #80]	@ 0x50
 800a878:	4a40      	ldr	r2, [pc, #256]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a87c:	0f9b      	lsrs	r3, r3, #30
 800a87e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800a880:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7f7 f976 	bl	8001b74 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800a888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a894:	4b3a      	ldr	r3, [pc, #232]	@ (800a980 <HAL_FDCAN_IRQHandler+0x278>)
 800a896:	400b      	ands	r3, r1
 800a898:	6513      	str	r3, [r2, #80]	@ 0x50
 800a89a:	4a38      	ldr	r2, [pc, #224]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a89c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a89e:	0f9b      	lsrs	r3, r3, #30
 800a8a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800a8a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9a3 	bl	800abf0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800a8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ac:	0adb      	lsrs	r3, r3, #11
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d010      	beq.n	800a8d8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	0adb      	lsrs	r3, r3, #11
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800a8cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f997 	bl	800ac06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8da:	0a5b      	lsrs	r3, r3, #9
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d01d      	beq.n	800a920 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e6:	0a5b      	lsrs	r3, r3, #9
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d017      	beq.n	800a920 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8f8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a904:	4013      	ands	r3, r2
 800a906:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a910:	651a      	str	r2, [r3, #80]	@ 0x50
 800a912:	4b1a      	ldr	r3, [pc, #104]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a914:	2200      	movs	r2, #0
 800a916:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800a918:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f97d 	bl	800ac1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a922:	0cdb      	lsrs	r3, r3, #19
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92e:	0cdb      	lsrs	r3, r3, #19
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00a      	beq.n	800a94e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a940:	651a      	str	r2, [r3, #80]	@ 0x50
 800a942:	4b0e      	ldr	r3, [pc, #56]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a944:	2200      	movs	r2, #0
 800a946:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f97c 	bl	800ac46 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800a94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a950:	0c1b      	lsrs	r3, r3, #16
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800a95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95c:	0c1b      	lsrs	r3, r3, #16
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d010      	beq.n	800a988 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a96e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a970:	4b02      	ldr	r3, [pc, #8]	@ (800a97c <HAL_FDCAN_IRQHandler+0x274>)
 800a972:	2200      	movs	r2, #0
 800a974:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	e004      	b.n	800a984 <HAL_FDCAN_IRQHandler+0x27c>
 800a97a:	bf00      	nop
 800a97c:	4000a800 	.word	0x4000a800
 800a980:	3fcfffff 	.word	0x3fcfffff
 800a984:	f000 f969 	bl	800ac5a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98a:	0c9b      	lsrs	r3, r3, #18
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d010      	beq.n	800a9b6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	0c9b      	lsrs	r3, r3, #18
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a9a8:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9aa:	4b83      	ldr	r3, [pc, #524]	@ (800abb8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f95c 	bl	800ac6e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b8:	0c5b      	lsrs	r3, r3, #17
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d015      	beq.n	800a9ee <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c4:	0c5b      	lsrs	r3, r3, #17
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00f      	beq.n	800a9ee <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a9d6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9d8:	4b77      	ldr	r3, [pc, #476]	@ (800abb8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00d      	beq.n	800aa10 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9fa:	4b70      	ldr	r3, [pc, #448]	@ (800abbc <HAL_FDCAN_IRQHandler+0x4b4>)
 800a9fc:	400b      	ands	r3, r1
 800a9fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa00:	4a6d      	ldr	r2, [pc, #436]	@ (800abb8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800aa02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa04:	0f9b      	lsrs	r3, r3, #30
 800aa06:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800aa08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f94d 	bl	800acaa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800aa10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d011      	beq.n	800aa3a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa1c:	4b67      	ldr	r3, [pc, #412]	@ (800abbc <HAL_FDCAN_IRQHandler+0x4b4>)
 800aa1e:	400b      	ands	r3, r1
 800aa20:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa22:	4a65      	ldr	r2, [pc, #404]	@ (800abb8 <HAL_FDCAN_IRQHandler+0x4b0>)
 800aa24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa26:	0f9b      	lsrs	r3, r3, #30
 800aa28:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800aa30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa32:	431a      	orrs	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a60      	ldr	r2, [pc, #384]	@ (800abc0 <HAL_FDCAN_IRQHandler+0x4b8>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	f040 80ac 	bne.w	800ab9e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80a4 	beq.w	800ab9e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa78:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa82:	4013      	ands	r3, r2
 800aa84:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800aa90:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800aaa8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	6a3a      	ldr	r2, [r7, #32]
 800aab2:	4013      	ands	r3, r2
 800aab4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800aac0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	4013      	ands	r3, r2
 800aacc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800aaec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f8e6 	bl	800acc0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800aaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab00:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800ab02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f8e6 	bl	800acd6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	099b      	lsrs	r3, r3, #6
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01a      	beq.n	800ab4c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	099b      	lsrs	r3, r3, #6
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d014      	beq.n	800ab4c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab28:	0c1b      	lsrs	r3, r3, #16
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab38:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2240      	movs	r2, #64	@ 0x40
 800ab40:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	6939      	ldr	r1, [r7, #16]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f8d0 	bl	800acec <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab58:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800ab5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f8d1 	bl	800ad04 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	6a3a      	ldr	r2, [r7, #32]
 800ab6e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	69fa      	ldr	r2, [r7, #28]
 800ab8c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	431a      	orrs	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f874 	bl	800ac96 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800abae:	bf00      	nop
 800abb0:	3758      	adds	r7, #88	@ 0x58
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	4000a800 	.word	0x4000a800
 800abbc:	3fcfffff 	.word	0x3fcfffff
 800abc0:	4000a000 	.word	0x4000a000

0800abc4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800abce:	bf00      	nop
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800abfa:	bf00      	nop
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800ac0e:	bf00      	nop
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800acca:	bf00      	nop
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800ad0e:	bf00      	nop
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
	...

0800ad1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ad32:	4ba7      	ldr	r3, [pc, #668]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	0091      	lsls	r1, r2, #2
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	6812      	ldr	r2, [r2, #0]
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad54:	041a      	lsls	r2, r3, #16
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	4413      	add	r3, r2
 800ad68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ad72:	4b97      	ldr	r3, [pc, #604]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ad74:	4013      	ands	r3, r2
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	0091      	lsls	r1, r2, #2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6812      	ldr	r2, [r2, #0]
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad8c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	041a      	lsls	r2, r3, #16
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	4413      	add	r3, r2
 800adaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800adb4:	4b86      	ldr	r3, [pc, #536]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	0091      	lsls	r1, r2, #2
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	430b      	orrs	r3, r1
 800adc2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800adce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	041a      	lsls	r2, r3, #16
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	430a      	orrs	r2, r1
 800adde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800adea:	fb02 f303 	mul.w	r3, r2, r3
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	4413      	add	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800adfc:	4b74      	ldr	r3, [pc, #464]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800adfe:	4013      	ands	r3, r2
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	0091      	lsls	r1, r2, #2
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	6812      	ldr	r2, [r2, #0]
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae1e:	041a      	lsls	r2, r3, #16
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ae32:	fb02 f303 	mul.w	r3, r2, r3
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	4413      	add	r3, r2
 800ae3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800ae44:	4b62      	ldr	r3, [pc, #392]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	0091      	lsls	r1, r2, #2
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6812      	ldr	r2, [r2, #0]
 800ae50:	430b      	orrs	r3, r1
 800ae52:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	4413      	add	r3, r2
 800ae66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ae70:	4b57      	ldr	r3, [pc, #348]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	0091      	lsls	r1, r2, #2
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6812      	ldr	r2, [r2, #0]
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae8a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae92:	041a      	lsls	r2, r3, #16
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	4413      	add	r3, r2
 800aea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800aeb2:	4b47      	ldr	r3, [pc, #284]	@ (800afd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	0091      	lsls	r1, r2, #2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	6812      	ldr	r2, [r2, #0]
 800aebe:	430b      	orrs	r3, r1
 800aec0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aecc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aed4:	041a      	lsls	r2, r3, #16
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	430a      	orrs	r2, r1
 800aedc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aee8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aef0:	061a      	lsls	r2, r3, #24
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af00:	4b34      	ldr	r3, [pc, #208]	@ (800afd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800af02:	4413      	add	r3, r2
 800af04:	009a      	lsls	r2, r3, #2
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	441a      	add	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800af3c:	441a      	add	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800af4e:	fb01 f303 	mul.w	r3, r1, r3
 800af52:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800af54:	441a      	add	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800af66:	fb01 f303 	mul.w	r3, r1, r3
 800af6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800af6c:	441a      	add	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	441a      	add	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800af96:	fb01 f303 	mul.w	r3, r1, r3
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	441a      	add	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800afb2:	fb01 f303 	mul.w	r3, r1, r3
 800afb6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800afb8:	441a      	add	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc6:	4a04      	ldr	r2, [pc, #16]	@ (800afd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d915      	bls.n	800aff8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800afcc:	e006      	b.n	800afdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800afce:	bf00      	nop
 800afd0:	ffff0003 	.word	0xffff0003
 800afd4:	10002b00 	.word	0x10002b00
 800afd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800afe2:	f043 0220 	orr.w	r2, r3, #32
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2203      	movs	r2, #3
 800aff0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e010      	b.n	800b01a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e005      	b.n	800b00c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3304      	adds	r3, #4
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	429a      	cmp	r2, r3
 800b016:	d3f3      	bcc.n	800b000 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800b028:	b480      	push	{r7}
 800b02a:	b089      	sub	sp, #36	@ 0x24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10a      	bne.n	800b054 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b046:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b04e:	4313      	orrs	r3, r2
 800b050:	61fb      	str	r3, [r7, #28]
 800b052:	e00a      	b.n	800b06a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b05c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b062:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b068:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b074:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b07a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b080:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b088:	4313      	orrs	r3, r2
 800b08a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	fb01 f303 	mul.w	r3, r1, r3
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e020      	b.n	800b102 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	3303      	adds	r3, #3
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3302      	adds	r3, #2
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	440b      	add	r3, r1
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b0d8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	440b      	add	r3, r1
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b0e6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	440a      	add	r2, r1
 800b0ee:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b0f0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3304      	adds	r3, #4
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	4a06      	ldr	r2, [pc, #24]	@ (800b120 <FDCAN_CopyMessageToRAM+0xf8>)
 800b108:	5cd3      	ldrb	r3, [r2, r3]
 800b10a:	461a      	mov	r2, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	4293      	cmp	r3, r2
 800b110:	d3d6      	bcc.n	800b0c0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	3724      	adds	r7, #36	@ 0x24
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	08017f40 	.word	0x08017f40

0800b124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800b124:	b480      	push	{r7}
 800b126:	b089      	sub	sp, #36	@ 0x24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b132:	4b89      	ldr	r3, [pc, #548]	@ (800b358 <HAL_GPIO_Init+0x234>)
 800b134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b136:	e194      	b.n	800b462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	2101      	movs	r1, #1
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	fa01 f303 	lsl.w	r3, r1, r3
 800b144:	4013      	ands	r3, r2
 800b146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 8186 	beq.w	800b45c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	f003 0303 	and.w	r3, r3, #3
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d005      	beq.n	800b168 <HAL_GPIO_Init+0x44>
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d130      	bne.n	800b1ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	2203      	movs	r2, #3
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	43db      	mvns	r3, r3
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	4013      	ands	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	fa02 f303 	lsl.w	r3, r2, r3
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	4313      	orrs	r3, r2
 800b190:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b19e:	2201      	movs	r2, #1
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a6:	43db      	mvns	r3, r3
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	091b      	lsrs	r3, r3, #4
 800b1b4:	f003 0201 	and.w	r2, r3, #1
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d017      	beq.n	800b206 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e6:	43db      	mvns	r3, r3
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	689a      	ldr	r2, [r3, #8]
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d123      	bne.n	800b25a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	08da      	lsrs	r2, r3, #3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3208      	adds	r2, #8
 800b21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	220f      	movs	r2, #15
 800b22a:	fa02 f303 	lsl.w	r3, r2, r3
 800b22e:	43db      	mvns	r3, r3
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	4013      	ands	r3, r2
 800b234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	fa02 f303 	lsl.w	r3, r2, r3
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	4313      	orrs	r3, r2
 800b24a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	08da      	lsrs	r2, r3, #3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3208      	adds	r2, #8
 800b254:	69b9      	ldr	r1, [r7, #24]
 800b256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	2203      	movs	r2, #3
 800b266:	fa02 f303 	lsl.w	r3, r2, r3
 800b26a:	43db      	mvns	r3, r3
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	4013      	ands	r3, r2
 800b270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f003 0203 	and.w	r2, r3, #3
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	fa02 f303 	lsl.w	r3, r2, r3
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	4313      	orrs	r3, r2
 800b286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 80e0 	beq.w	800b45c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b29c:	4b2f      	ldr	r3, [pc, #188]	@ (800b35c <HAL_GPIO_Init+0x238>)
 800b29e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2a2:	4a2e      	ldr	r2, [pc, #184]	@ (800b35c <HAL_GPIO_Init+0x238>)
 800b2a4:	f043 0302 	orr.w	r3, r3, #2
 800b2a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <HAL_GPIO_Init+0x238>)
 800b2ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2ba:	4a29      	ldr	r2, [pc, #164]	@ (800b360 <HAL_GPIO_Init+0x23c>)
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	089b      	lsrs	r3, r3, #2
 800b2c0:	3302      	adds	r3, #2
 800b2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	220f      	movs	r2, #15
 800b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d6:	43db      	mvns	r3, r3
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a20      	ldr	r2, [pc, #128]	@ (800b364 <HAL_GPIO_Init+0x240>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d052      	beq.n	800b38c <HAL_GPIO_Init+0x268>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b368 <HAL_GPIO_Init+0x244>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d031      	beq.n	800b352 <HAL_GPIO_Init+0x22e>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a1e      	ldr	r2, [pc, #120]	@ (800b36c <HAL_GPIO_Init+0x248>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d02b      	beq.n	800b34e <HAL_GPIO_Init+0x22a>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b370 <HAL_GPIO_Init+0x24c>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d025      	beq.n	800b34a <HAL_GPIO_Init+0x226>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a1c      	ldr	r2, [pc, #112]	@ (800b374 <HAL_GPIO_Init+0x250>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d01f      	beq.n	800b346 <HAL_GPIO_Init+0x222>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a1b      	ldr	r2, [pc, #108]	@ (800b378 <HAL_GPIO_Init+0x254>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d019      	beq.n	800b342 <HAL_GPIO_Init+0x21e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a1a      	ldr	r2, [pc, #104]	@ (800b37c <HAL_GPIO_Init+0x258>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d013      	beq.n	800b33e <HAL_GPIO_Init+0x21a>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a19      	ldr	r2, [pc, #100]	@ (800b380 <HAL_GPIO_Init+0x25c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d00d      	beq.n	800b33a <HAL_GPIO_Init+0x216>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a18      	ldr	r2, [pc, #96]	@ (800b384 <HAL_GPIO_Init+0x260>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d007      	beq.n	800b336 <HAL_GPIO_Init+0x212>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a17      	ldr	r2, [pc, #92]	@ (800b388 <HAL_GPIO_Init+0x264>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d101      	bne.n	800b332 <HAL_GPIO_Init+0x20e>
 800b32e:	2309      	movs	r3, #9
 800b330:	e02d      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b332:	230a      	movs	r3, #10
 800b334:	e02b      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b336:	2308      	movs	r3, #8
 800b338:	e029      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b33a:	2307      	movs	r3, #7
 800b33c:	e027      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b33e:	2306      	movs	r3, #6
 800b340:	e025      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b342:	2305      	movs	r3, #5
 800b344:	e023      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b346:	2304      	movs	r3, #4
 800b348:	e021      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b34a:	2303      	movs	r3, #3
 800b34c:	e01f      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b34e:	2302      	movs	r3, #2
 800b350:	e01d      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b352:	2301      	movs	r3, #1
 800b354:	e01b      	b.n	800b38e <HAL_GPIO_Init+0x26a>
 800b356:	bf00      	nop
 800b358:	58000080 	.word	0x58000080
 800b35c:	58024400 	.word	0x58024400
 800b360:	58000400 	.word	0x58000400
 800b364:	58020000 	.word	0x58020000
 800b368:	58020400 	.word	0x58020400
 800b36c:	58020800 	.word	0x58020800
 800b370:	58020c00 	.word	0x58020c00
 800b374:	58021000 	.word	0x58021000
 800b378:	58021400 	.word	0x58021400
 800b37c:	58021800 	.word	0x58021800
 800b380:	58021c00 	.word	0x58021c00
 800b384:	58022000 	.word	0x58022000
 800b388:	58022400 	.word	0x58022400
 800b38c:	2300      	movs	r3, #0
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	f002 0203 	and.w	r2, r2, #3
 800b394:	0092      	lsls	r2, r2, #2
 800b396:	4093      	lsls	r3, r2
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b39e:	4938      	ldr	r1, [pc, #224]	@ (800b480 <HAL_GPIO_Init+0x35c>)
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	089b      	lsrs	r3, r3, #2
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b3ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	43db      	mvns	r3, r3
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b3d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b3da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	43db      	mvns	r3, r3
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d003      	beq.n	800b400 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b3f8:	69ba      	ldr	r2, [r7, #24]
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	43db      	mvns	r3, r3
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	4013      	ands	r3, r2
 800b416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	43db      	mvns	r3, r3
 800b43c:	69ba      	ldr	r2, [r7, #24]
 800b43e:	4013      	ands	r3, r2
 800b440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b44e:	69ba      	ldr	r2, [r7, #24]
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	4313      	orrs	r3, r2
 800b454:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	69ba      	ldr	r2, [r7, #24]
 800b45a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	3301      	adds	r3, #1
 800b460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f47f ae63 	bne.w	800b138 <HAL_GPIO_Init+0x14>
  }
}
 800b472:	bf00      	nop
 800b474:	bf00      	nop
 800b476:	3724      	adds	r7, #36	@ 0x24
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	58000400 	.word	0x58000400

0800b484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	807b      	strh	r3, [r7, #2]
 800b490:	4613      	mov	r3, r2
 800b492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b494:	787b      	ldrb	r3, [r7, #1]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b49a:	887a      	ldrh	r2, [r7, #2]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b4a0:	e003      	b.n	800b4aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b4a2:	887b      	ldrh	r3, [r7, #2]
 800b4a4:	041a      	lsls	r2, r3, #16
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	619a      	str	r2, [r3, #24]
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b4c8:	887a      	ldrh	r2, [r7, #2]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	041a      	lsls	r2, r3, #16
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	43d9      	mvns	r1, r3
 800b4d4:	887b      	ldrh	r3, [r7, #2]
 800b4d6:	400b      	ands	r3, r1
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	619a      	str	r2, [r3, #24]
}
 800b4de:	bf00      	nop
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b4f4:	4b19      	ldr	r3, [pc, #100]	@ (800b55c <HAL_PWREx_ConfigSupply+0x70>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d00a      	beq.n	800b516 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b500:	4b16      	ldr	r3, [pc, #88]	@ (800b55c <HAL_PWREx_ConfigSupply+0x70>)
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f003 0307 	and.w	r3, r3, #7
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d001      	beq.n	800b512 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e01f      	b.n	800b552 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	e01d      	b.n	800b552 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b516:	4b11      	ldr	r3, [pc, #68]	@ (800b55c <HAL_PWREx_ConfigSupply+0x70>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f023 0207 	bic.w	r2, r3, #7
 800b51e:	490f      	ldr	r1, [pc, #60]	@ (800b55c <HAL_PWREx_ConfigSupply+0x70>)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4313      	orrs	r3, r2
 800b524:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b526:	f7fb fa9d 	bl	8006a64 <HAL_GetTick>
 800b52a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b52c:	e009      	b.n	800b542 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b52e:	f7fb fa99 	bl	8006a64 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b53c:	d901      	bls.n	800b542 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e007      	b.n	800b552 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <HAL_PWREx_ConfigSupply+0x70>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b54a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b54e:	d1ee      	bne.n	800b52e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	58024800 	.word	0x58024800

0800b560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08c      	sub	sp, #48	@ 0x30
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d102      	bne.n	800b574 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	f000 bc48 	b.w	800be04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 8088 	beq.w	800b692 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b582:	4b99      	ldr	r3, [pc, #612]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b58c:	4b96      	ldr	r3, [pc, #600]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b590:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b594:	2b10      	cmp	r3, #16
 800b596:	d007      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x48>
 800b598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59a:	2b18      	cmp	r3, #24
 800b59c:	d111      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x62>
 800b59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d10c      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5a8:	4b8f      	ldr	r3, [pc, #572]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d06d      	beq.n	800b690 <HAL_RCC_OscConfig+0x130>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d169      	bne.n	800b690 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f000 bc21 	b.w	800be04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ca:	d106      	bne.n	800b5da <HAL_RCC_OscConfig+0x7a>
 800b5cc:	4b86      	ldr	r3, [pc, #536]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a85      	ldr	r2, [pc, #532]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e02e      	b.n	800b638 <HAL_RCC_OscConfig+0xd8>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10c      	bne.n	800b5fc <HAL_RCC_OscConfig+0x9c>
 800b5e2:	4b81      	ldr	r3, [pc, #516]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a80      	ldr	r2, [pc, #512]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	4b7e      	ldr	r3, [pc, #504]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a7d      	ldr	r2, [pc, #500]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b5f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	e01d      	b.n	800b638 <HAL_RCC_OscConfig+0xd8>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b604:	d10c      	bne.n	800b620 <HAL_RCC_OscConfig+0xc0>
 800b606:	4b78      	ldr	r3, [pc, #480]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a77      	ldr	r2, [pc, #476]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b60c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	4b75      	ldr	r3, [pc, #468]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a74      	ldr	r2, [pc, #464]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	e00b      	b.n	800b638 <HAL_RCC_OscConfig+0xd8>
 800b620:	4b71      	ldr	r3, [pc, #452]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a70      	ldr	r2, [pc, #448]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	4b6e      	ldr	r3, [pc, #440]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a6d      	ldr	r2, [pc, #436]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d013      	beq.n	800b668 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b640:	f7fb fa10 	bl	8006a64 <HAL_GetTick>
 800b644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b646:	e008      	b.n	800b65a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b648:	f7fb fa0c 	bl	8006a64 <HAL_GetTick>
 800b64c:	4602      	mov	r2, r0
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	2b64      	cmp	r3, #100	@ 0x64
 800b654:	d901      	bls.n	800b65a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e3d4      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b65a:	4b63      	ldr	r3, [pc, #396]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0f0      	beq.n	800b648 <HAL_RCC_OscConfig+0xe8>
 800b666:	e014      	b.n	800b692 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b668:	f7fb f9fc 	bl	8006a64 <HAL_GetTick>
 800b66c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b670:	f7fb f9f8 	bl	8006a64 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b64      	cmp	r3, #100	@ 0x64
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e3c0      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b682:	4b59      	ldr	r3, [pc, #356]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1f0      	bne.n	800b670 <HAL_RCC_OscConfig+0x110>
 800b68e:	e000      	b.n	800b692 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 0302 	and.w	r3, r3, #2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 80ca 	beq.w	800b834 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6a0:	4b51      	ldr	r3, [pc, #324]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b6aa:	4b4f      	ldr	r3, [pc, #316]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d007      	beq.n	800b6c6 <HAL_RCC_OscConfig+0x166>
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	2b18      	cmp	r3, #24
 800b6ba:	d156      	bne.n	800b76a <HAL_RCC_OscConfig+0x20a>
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d151      	bne.n	800b76a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6c6:	4b48      	ldr	r3, [pc, #288]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d005      	beq.n	800b6de <HAL_RCC_OscConfig+0x17e>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e392      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b6de:	4b42      	ldr	r3, [pc, #264]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f023 0219 	bic.w	r2, r3, #25
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	493f      	ldr	r1, [pc, #252]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f0:	f7fb f9b8 	bl	8006a64 <HAL_GetTick>
 800b6f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6f6:	e008      	b.n	800b70a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6f8:	f7fb f9b4 	bl	8006a64 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e37c      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b70a:	4b37      	ldr	r3, [pc, #220]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0304 	and.w	r3, r3, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f0      	beq.n	800b6f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b716:	f7fb f9d5 	bl	8006ac4 <HAL_GetREVID>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b720:	4293      	cmp	r3, r2
 800b722:	d817      	bhi.n	800b754 <HAL_RCC_OscConfig+0x1f4>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	2b40      	cmp	r3, #64	@ 0x40
 800b72a:	d108      	bne.n	800b73e <HAL_RCC_OscConfig+0x1de>
 800b72c:	4b2e      	ldr	r3, [pc, #184]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b734:	4a2c      	ldr	r2, [pc, #176]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b73a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b73c:	e07a      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b73e:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	031b      	lsls	r3, r3, #12
 800b74c:	4926      	ldr	r1, [pc, #152]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b74e:	4313      	orrs	r3, r2
 800b750:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b752:	e06f      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b754:	4b24      	ldr	r3, [pc, #144]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	061b      	lsls	r3, r3, #24
 800b762:	4921      	ldr	r1, [pc, #132]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b764:	4313      	orrs	r3, r2
 800b766:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b768:	e064      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d047      	beq.n	800b802 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b772:	4b1d      	ldr	r3, [pc, #116]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f023 0219 	bic.w	r2, r3, #25
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	491a      	ldr	r1, [pc, #104]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b780:	4313      	orrs	r3, r2
 800b782:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b784:	f7fb f96e 	bl	8006a64 <HAL_GetTick>
 800b788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b78a:	e008      	b.n	800b79e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b78c:	f7fb f96a 	bl	8006a64 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	2b02      	cmp	r3, #2
 800b798:	d901      	bls.n	800b79e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	e332      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b79e:	4b12      	ldr	r3, [pc, #72]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0304 	and.w	r3, r3, #4
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0f0      	beq.n	800b78c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7aa:	f7fb f98b 	bl	8006ac4 <HAL_GetREVID>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d819      	bhi.n	800b7ec <HAL_RCC_OscConfig+0x28c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	2b40      	cmp	r3, #64	@ 0x40
 800b7be:	d108      	bne.n	800b7d2 <HAL_RCC_OscConfig+0x272>
 800b7c0:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b7c8:	4a07      	ldr	r2, [pc, #28]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b7ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7ce:	6053      	str	r3, [r2, #4]
 800b7d0:	e030      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
 800b7d2:	4b05      	ldr	r3, [pc, #20]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	031b      	lsls	r3, r3, #12
 800b7e0:	4901      	ldr	r1, [pc, #4]	@ (800b7e8 <HAL_RCC_OscConfig+0x288>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	604b      	str	r3, [r1, #4]
 800b7e6:	e025      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
 800b7e8:	58024400 	.word	0x58024400
 800b7ec:	4b9a      	ldr	r3, [pc, #616]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	061b      	lsls	r3, r3, #24
 800b7fa:	4997      	ldr	r1, [pc, #604]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	604b      	str	r3, [r1, #4]
 800b800:	e018      	b.n	800b834 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b802:	4b95      	ldr	r3, [pc, #596]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a94      	ldr	r2, [pc, #592]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b808:	f023 0301 	bic.w	r3, r3, #1
 800b80c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b80e:	f7fb f929 	bl	8006a64 <HAL_GetTick>
 800b812:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b814:	e008      	b.n	800b828 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b816:	f7fb f925 	bl	8006a64 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	d901      	bls.n	800b828 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e2ed      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b828:	4b8b      	ldr	r3, [pc, #556]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0304 	and.w	r3, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1f0      	bne.n	800b816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 80a9 	beq.w	800b994 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b842:	4b85      	ldr	r3, [pc, #532]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b84a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b84c:	4b82      	ldr	r3, [pc, #520]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b850:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b08      	cmp	r3, #8
 800b856:	d007      	beq.n	800b868 <HAL_RCC_OscConfig+0x308>
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b18      	cmp	r3, #24
 800b85c:	d13a      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x374>
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f003 0303 	and.w	r3, r3, #3
 800b864:	2b01      	cmp	r3, #1
 800b866:	d135      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b868:	4b7b      	ldr	r3, [pc, #492]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <HAL_RCC_OscConfig+0x320>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	2b80      	cmp	r3, #128	@ 0x80
 800b87a:	d001      	beq.n	800b880 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e2c1      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b880:	f7fb f920 	bl	8006ac4 <HAL_GetREVID>
 800b884:	4603      	mov	r3, r0
 800b886:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d817      	bhi.n	800b8be <HAL_RCC_OscConfig+0x35e>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	2b20      	cmp	r3, #32
 800b894:	d108      	bne.n	800b8a8 <HAL_RCC_OscConfig+0x348>
 800b896:	4b70      	ldr	r3, [pc, #448]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b89e:	4a6e      	ldr	r2, [pc, #440]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8a6:	e075      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8a8:	4b6b      	ldr	r3, [pc, #428]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	069b      	lsls	r3, r3, #26
 800b8b6:	4968      	ldr	r1, [pc, #416]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8bc:	e06a      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8be:	4b66      	ldr	r3, [pc, #408]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	061b      	lsls	r3, r3, #24
 800b8cc:	4962      	ldr	r1, [pc, #392]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b8d2:	e05f      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d042      	beq.n	800b962 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b8dc:	4b5e      	ldr	r3, [pc, #376]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a5d      	ldr	r2, [pc, #372]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e8:	f7fb f8bc 	bl	8006a64 <HAL_GetTick>
 800b8ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b8f0:	f7fb f8b8 	bl	8006a64 <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e280      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b902:	4b55      	ldr	r3, [pc, #340]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0f0      	beq.n	800b8f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b90e:	f7fb f8d9 	bl	8006ac4 <HAL_GetREVID>
 800b912:	4603      	mov	r3, r0
 800b914:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b918:	4293      	cmp	r3, r2
 800b91a:	d817      	bhi.n	800b94c <HAL_RCC_OscConfig+0x3ec>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	2b20      	cmp	r3, #32
 800b922:	d108      	bne.n	800b936 <HAL_RCC_OscConfig+0x3d6>
 800b924:	4b4c      	ldr	r3, [pc, #304]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b92c:	4a4a      	ldr	r2, [pc, #296]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b92e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b932:	6053      	str	r3, [r2, #4]
 800b934:	e02e      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
 800b936:	4b48      	ldr	r3, [pc, #288]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	069b      	lsls	r3, r3, #26
 800b944:	4944      	ldr	r1, [pc, #272]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b946:	4313      	orrs	r3, r2
 800b948:	604b      	str	r3, [r1, #4]
 800b94a:	e023      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
 800b94c:	4b42      	ldr	r3, [pc, #264]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a1b      	ldr	r3, [r3, #32]
 800b958:	061b      	lsls	r3, r3, #24
 800b95a:	493f      	ldr	r1, [pc, #252]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60cb      	str	r3, [r1, #12]
 800b960:	e018      	b.n	800b994 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b962:	4b3d      	ldr	r3, [pc, #244]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a3c      	ldr	r2, [pc, #240]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b96c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b96e:	f7fb f879 	bl	8006a64 <HAL_GetTick>
 800b972:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b974:	e008      	b.n	800b988 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b976:	f7fb f875 	bl	8006a64 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	2b02      	cmp	r3, #2
 800b982:	d901      	bls.n	800b988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e23d      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b988:	4b33      	ldr	r3, [pc, #204]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1f0      	bne.n	800b976 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d036      	beq.n	800ba0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d019      	beq.n	800b9dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9a8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b9aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ac:	4a2a      	ldr	r2, [pc, #168]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9b4:	f7fb f856 	bl	8006a64 <HAL_GetTick>
 800b9b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9ba:	e008      	b.n	800b9ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9bc:	f7fb f852 	bl	8006a64 <HAL_GetTick>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d901      	bls.n	800b9ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e21a      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b9ce:	4b22      	ldr	r3, [pc, #136]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b9d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0f0      	beq.n	800b9bc <HAL_RCC_OscConfig+0x45c>
 800b9da:	e018      	b.n	800ba0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b9de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800b9e2:	f023 0301 	bic.w	r3, r3, #1
 800b9e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9e8:	f7fb f83c 	bl	8006a64 <HAL_GetTick>
 800b9ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9ee:	e008      	b.n	800ba02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9f0:	f7fb f838 	bl	8006a64 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d901      	bls.n	800ba02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e200      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba02:	4b15      	ldr	r3, [pc, #84]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800ba04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f0      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d039      	beq.n	800ba8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01c      	beq.n	800ba5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba22:	4b0d      	ldr	r3, [pc, #52]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a0c      	ldr	r2, [pc, #48]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800ba28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba2e:	f7fb f819 	bl	8006a64 <HAL_GetTick>
 800ba32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba34:	e008      	b.n	800ba48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba36:	f7fb f815 	bl	8006a64 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d901      	bls.n	800ba48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e1dd      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba48:	4b03      	ldr	r3, [pc, #12]	@ (800ba58 <HAL_RCC_OscConfig+0x4f8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d0f0      	beq.n	800ba36 <HAL_RCC_OscConfig+0x4d6>
 800ba54:	e01b      	b.n	800ba8e <HAL_RCC_OscConfig+0x52e>
 800ba56:	bf00      	nop
 800ba58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba5c:	4b9b      	ldr	r3, [pc, #620]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a9a      	ldr	r2, [pc, #616]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800ba62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba68:	f7fa fffc 	bl	8006a64 <HAL_GetTick>
 800ba6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba6e:	e008      	b.n	800ba82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba70:	f7fa fff8 	bl	8006a64 <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d901      	bls.n	800ba82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e1c0      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba82:	4b92      	ldr	r3, [pc, #584]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1f0      	bne.n	800ba70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f000 8081 	beq.w	800bb9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba9c:	4b8c      	ldr	r3, [pc, #560]	@ (800bcd0 <HAL_RCC_OscConfig+0x770>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a8b      	ldr	r2, [pc, #556]	@ (800bcd0 <HAL_RCC_OscConfig+0x770>)
 800baa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800baa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baa8:	f7fa ffdc 	bl	8006a64 <HAL_GetTick>
 800baac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bab0:	f7fa ffd8 	bl	8006a64 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b64      	cmp	r3, #100	@ 0x64
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e1a0      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bac2:	4b83      	ldr	r3, [pc, #524]	@ (800bcd0 <HAL_RCC_OscConfig+0x770>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0f0      	beq.n	800bab0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d106      	bne.n	800bae4 <HAL_RCC_OscConfig+0x584>
 800bad6:	4b7d      	ldr	r3, [pc, #500]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bada:	4a7c      	ldr	r2, [pc, #496]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800badc:	f043 0301 	orr.w	r3, r3, #1
 800bae0:	6713      	str	r3, [r2, #112]	@ 0x70
 800bae2:	e02d      	b.n	800bb40 <HAL_RCC_OscConfig+0x5e0>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10c      	bne.n	800bb06 <HAL_RCC_OscConfig+0x5a6>
 800baec:	4b77      	ldr	r3, [pc, #476]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800baee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baf0:	4a76      	ldr	r2, [pc, #472]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800baf2:	f023 0301 	bic.w	r3, r3, #1
 800baf6:	6713      	str	r3, [r2, #112]	@ 0x70
 800baf8:	4b74      	ldr	r3, [pc, #464]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bafa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bafc:	4a73      	ldr	r2, [pc, #460]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bafe:	f023 0304 	bic.w	r3, r3, #4
 800bb02:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb04:	e01c      	b.n	800bb40 <HAL_RCC_OscConfig+0x5e0>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	d10c      	bne.n	800bb28 <HAL_RCC_OscConfig+0x5c8>
 800bb0e:	4b6f      	ldr	r3, [pc, #444]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb12:	4a6e      	ldr	r2, [pc, #440]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb14:	f043 0304 	orr.w	r3, r3, #4
 800bb18:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb1a:	4b6c      	ldr	r3, [pc, #432]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb1e:	4a6b      	ldr	r2, [pc, #428]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb20:	f043 0301 	orr.w	r3, r3, #1
 800bb24:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb26:	e00b      	b.n	800bb40 <HAL_RCC_OscConfig+0x5e0>
 800bb28:	4b68      	ldr	r3, [pc, #416]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb2c:	4a67      	ldr	r2, [pc, #412]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb2e:	f023 0301 	bic.w	r3, r3, #1
 800bb32:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb34:	4b65      	ldr	r3, [pc, #404]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb38:	4a64      	ldr	r2, [pc, #400]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb3a:	f023 0304 	bic.w	r3, r3, #4
 800bb3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d015      	beq.n	800bb74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb48:	f7fa ff8c 	bl	8006a64 <HAL_GetTick>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb4e:	e00a      	b.n	800bb66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb50:	f7fa ff88 	bl	8006a64 <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d901      	bls.n	800bb66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e14e      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb66:	4b59      	ldr	r3, [pc, #356]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0ee      	beq.n	800bb50 <HAL_RCC_OscConfig+0x5f0>
 800bb72:	e014      	b.n	800bb9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb74:	f7fa ff76 	bl	8006a64 <HAL_GetTick>
 800bb78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb7a:	e00a      	b.n	800bb92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb7c:	f7fa ff72 	bl	8006a64 <HAL_GetTick>
 800bb80:	4602      	mov	r2, r0
 800bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d901      	bls.n	800bb92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e138      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb92:	4b4e      	ldr	r3, [pc, #312]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1ee      	bne.n	800bb7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 812d 	beq.w	800be02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bba8:	4b48      	ldr	r3, [pc, #288]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bbb0:	2b18      	cmp	r3, #24
 800bbb2:	f000 80bd 	beq.w	800bd30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	f040 809e 	bne.w	800bcfc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbc0:	4b42      	ldr	r3, [pc, #264]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a41      	ldr	r2, [pc, #260]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bbc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbcc:	f7fa ff4a 	bl	8006a64 <HAL_GetTick>
 800bbd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbd2:	e008      	b.n	800bbe6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbd4:	f7fa ff46 	bl	8006a64 <HAL_GetTick>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d901      	bls.n	800bbe6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e10e      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbe6:	4b39      	ldr	r3, [pc, #228]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1f0      	bne.n	800bbd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbf2:	4b36      	ldr	r3, [pc, #216]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bbf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbf6:	4b37      	ldr	r3, [pc, #220]	@ (800bcd4 <HAL_RCC_OscConfig+0x774>)
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bc02:	0112      	lsls	r2, r2, #4
 800bc04:	430a      	orrs	r2, r1
 800bc06:	4931      	ldr	r1, [pc, #196]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc10:	3b01      	subs	r3, #1
 800bc12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	025b      	lsls	r3, r3, #9
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	431a      	orrs	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc26:	3b01      	subs	r3, #1
 800bc28:	041b      	lsls	r3, r3, #16
 800bc2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc34:	3b01      	subs	r3, #1
 800bc36:	061b      	lsls	r3, r3, #24
 800bc38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc3c:	4923      	ldr	r1, [pc, #140]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bc42:	4b22      	ldr	r3, [pc, #136]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc46:	4a21      	ldr	r2, [pc, #132]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc48:	f023 0301 	bic.w	r3, r3, #1
 800bc4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc4e:	4b1f      	ldr	r3, [pc, #124]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc52:	4b21      	ldr	r3, [pc, #132]	@ (800bcd8 <HAL_RCC_OscConfig+0x778>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bc5a:	00d2      	lsls	r2, r2, #3
 800bc5c:	491b      	ldr	r1, [pc, #108]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc62:	4b1a      	ldr	r3, [pc, #104]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	f023 020c 	bic.w	r2, r3, #12
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc6e:	4917      	ldr	r1, [pc, #92]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc70:	4313      	orrs	r3, r2
 800bc72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc74:	4b15      	ldr	r3, [pc, #84]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc78:	f023 0202 	bic.w	r2, r3, #2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc80:	4912      	ldr	r1, [pc, #72]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc86:	4b11      	ldr	r3, [pc, #68]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8a:	4a10      	ldr	r2, [pc, #64]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc92:	4b0e      	ldr	r3, [pc, #56]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc96:	4a0d      	ldr	r2, [pc, #52]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bc98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bc9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca2:	4a0a      	ldr	r2, [pc, #40]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bcaa:	4b08      	ldr	r3, [pc, #32]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcae:	4a07      	ldr	r2, [pc, #28]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bcb0:	f043 0301 	orr.w	r3, r3, #1
 800bcb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcb6:	4b05      	ldr	r3, [pc, #20]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a04      	ldr	r2, [pc, #16]	@ (800bccc <HAL_RCC_OscConfig+0x76c>)
 800bcbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bcc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc2:	f7fa fecf 	bl	8006a64 <HAL_GetTick>
 800bcc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcc8:	e011      	b.n	800bcee <HAL_RCC_OscConfig+0x78e>
 800bcca:	bf00      	nop
 800bccc:	58024400 	.word	0x58024400
 800bcd0:	58024800 	.word	0x58024800
 800bcd4:	fffffc0c 	.word	0xfffffc0c
 800bcd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcdc:	f7fa fec2 	bl	8006a64 <HAL_GetTick>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d901      	bls.n	800bcee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e08a      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bcee:	4b47      	ldr	r3, [pc, #284]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0f0      	beq.n	800bcdc <HAL_RCC_OscConfig+0x77c>
 800bcfa:	e082      	b.n	800be02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcfc:	4b43      	ldr	r3, [pc, #268]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a42      	ldr	r2, [pc, #264]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bd02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd08:	f7fa feac 	bl	8006a64 <HAL_GetTick>
 800bd0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd0e:	e008      	b.n	800bd22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd10:	f7fa fea8 	bl	8006a64 <HAL_GetTick>
 800bd14:	4602      	mov	r2, r0
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e070      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bd22:	4b3a      	ldr	r3, [pc, #232]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f0      	bne.n	800bd10 <HAL_RCC_OscConfig+0x7b0>
 800bd2e:	e068      	b.n	800be02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bd30:	4b36      	ldr	r3, [pc, #216]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bd36:	4b35      	ldr	r3, [pc, #212]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bd38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d031      	beq.n	800bda8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f003 0203 	and.w	r2, r3, #3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d12a      	bne.n	800bda8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	091b      	lsrs	r3, r3, #4
 800bd56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d122      	bne.n	800bda8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d11a      	bne.n	800bda8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d111      	bne.n	800bda8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d108      	bne.n	800bda8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	0e1b      	lsrs	r3, r3, #24
 800bd9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d001      	beq.n	800bdac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e02b      	b.n	800be04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bdac:	4b17      	ldr	r3, [pc, #92]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdb0:	08db      	lsrs	r3, r3, #3
 800bdb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d01f      	beq.n	800be02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bdc2:	4b12      	ldr	r3, [pc, #72]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc6:	4a11      	ldr	r2, [pc, #68]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdc8:	f023 0301 	bic.w	r3, r3, #1
 800bdcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bdce:	f7fa fe49 	bl	8006a64 <HAL_GetTick>
 800bdd2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bdd4:	bf00      	nop
 800bdd6:	f7fa fe45 	bl	8006a64 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d0f9      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bde2:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bde4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bde6:	4b0a      	ldr	r3, [pc, #40]	@ (800be10 <HAL_RCC_OscConfig+0x8b0>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bdee:	00d2      	lsls	r2, r2, #3
 800bdf0:	4906      	ldr	r1, [pc, #24]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bdf6:	4b05      	ldr	r3, [pc, #20]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfa:	4a04      	ldr	r2, [pc, #16]	@ (800be0c <HAL_RCC_OscConfig+0x8ac>)
 800bdfc:	f043 0301 	orr.w	r3, r3, #1
 800be00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3730      	adds	r7, #48	@ 0x30
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	58024400 	.word	0x58024400
 800be10:	ffff0007 	.word	0xffff0007

0800be14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e19c      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be28:	4b8a      	ldr	r3, [pc, #552]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 030f 	and.w	r3, r3, #15
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d910      	bls.n	800be58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be36:	4b87      	ldr	r3, [pc, #540]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f023 020f 	bic.w	r2, r3, #15
 800be3e:	4985      	ldr	r1, [pc, #532]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	4313      	orrs	r3, r2
 800be44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be46:	4b83      	ldr	r3, [pc, #524]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	429a      	cmp	r2, r3
 800be52:	d001      	beq.n	800be58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e184      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b00      	cmp	r3, #0
 800be62:	d010      	beq.n	800be86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	691a      	ldr	r2, [r3, #16]
 800be68:	4b7b      	ldr	r3, [pc, #492]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be70:	429a      	cmp	r2, r3
 800be72:	d908      	bls.n	800be86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be74:	4b78      	ldr	r3, [pc, #480]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	4975      	ldr	r1, [pc, #468]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800be82:	4313      	orrs	r3, r2
 800be84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 0308 	and.w	r3, r3, #8
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d010      	beq.n	800beb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	695a      	ldr	r2, [r3, #20]
 800be96:	4b70      	ldr	r3, [pc, #448]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d908      	bls.n	800beb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bea2:	4b6d      	ldr	r3, [pc, #436]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	496a      	ldr	r1, [pc, #424]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0310 	and.w	r3, r3, #16
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d010      	beq.n	800bee2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	4b64      	ldr	r3, [pc, #400]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bec6:	69db      	ldr	r3, [r3, #28]
 800bec8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800becc:	429a      	cmp	r2, r3
 800bece:	d908      	bls.n	800bee2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bed0:	4b61      	ldr	r3, [pc, #388]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	495e      	ldr	r1, [pc, #376]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d010      	beq.n	800bf10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69da      	ldr	r2, [r3, #28]
 800bef2:	4b59      	ldr	r3, [pc, #356]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800befa:	429a      	cmp	r2, r3
 800befc:	d908      	bls.n	800bf10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800befe:	4b56      	ldr	r3, [pc, #344]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	4953      	ldr	r1, [pc, #332]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d010      	beq.n	800bf3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	68da      	ldr	r2, [r3, #12]
 800bf20:	4b4d      	ldr	r3, [pc, #308]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	f003 030f 	and.w	r3, r3, #15
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d908      	bls.n	800bf3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf2c:	4b4a      	ldr	r3, [pc, #296]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	f023 020f 	bic.w	r2, r3, #15
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	4947      	ldr	r1, [pc, #284]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d055      	beq.n	800bff6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bf4a:	4b43      	ldr	r3, [pc, #268]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	4940      	ldr	r1, [pc, #256]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d107      	bne.n	800bf74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf64:	4b3c      	ldr	r3, [pc, #240]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d121      	bne.n	800bfb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e0f6      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d107      	bne.n	800bf8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf7c:	4b36      	ldr	r3, [pc, #216]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d115      	bne.n	800bfb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e0ea      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d107      	bne.n	800bfa4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf94:	4b30      	ldr	r3, [pc, #192]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e0de      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bfa4:	4b2c      	ldr	r3, [pc, #176]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e0d6      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bfb4:	4b28      	ldr	r3, [pc, #160]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	f023 0207 	bic.w	r2, r3, #7
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4925      	ldr	r1, [pc, #148]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc6:	f7fa fd4d 	bl	8006a64 <HAL_GetTick>
 800bfca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfcc:	e00a      	b.n	800bfe4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfce:	f7fa fd49 	bl	8006a64 <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d901      	bls.n	800bfe4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e0be      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfe4:	4b1c      	ldr	r3, [pc, #112]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d1eb      	bne.n	800bfce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d010      	beq.n	800c024 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68da      	ldr	r2, [r3, #12]
 800c006:	4b14      	ldr	r3, [pc, #80]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	f003 030f 	and.w	r3, r3, #15
 800c00e:	429a      	cmp	r2, r3
 800c010:	d208      	bcs.n	800c024 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c012:	4b11      	ldr	r3, [pc, #68]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	f023 020f 	bic.w	r2, r3, #15
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	490e      	ldr	r1, [pc, #56]	@ (800c058 <HAL_RCC_ClockConfig+0x244>)
 800c020:	4313      	orrs	r3, r2
 800c022:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c024:	4b0b      	ldr	r3, [pc, #44]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d214      	bcs.n	800c05c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c032:	4b08      	ldr	r3, [pc, #32]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f023 020f 	bic.w	r2, r3, #15
 800c03a:	4906      	ldr	r1, [pc, #24]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	4313      	orrs	r3, r2
 800c040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c042:	4b04      	ldr	r3, [pc, #16]	@ (800c054 <HAL_RCC_ClockConfig+0x240>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 030f 	and.w	r3, r3, #15
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d005      	beq.n	800c05c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e086      	b.n	800c162 <HAL_RCC_ClockConfig+0x34e>
 800c054:	52002000 	.word	0x52002000
 800c058:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d010      	beq.n	800c08a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691a      	ldr	r2, [r3, #16]
 800c06c:	4b3f      	ldr	r3, [pc, #252]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c074:	429a      	cmp	r2, r3
 800c076:	d208      	bcs.n	800c08a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c078:	4b3c      	ldr	r3, [pc, #240]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	4939      	ldr	r1, [pc, #228]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c086:	4313      	orrs	r3, r2
 800c088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0308 	and.w	r3, r3, #8
 800c092:	2b00      	cmp	r3, #0
 800c094:	d010      	beq.n	800c0b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	695a      	ldr	r2, [r3, #20]
 800c09a:	4b34      	ldr	r3, [pc, #208]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d208      	bcs.n	800c0b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c0a6:	4b31      	ldr	r3, [pc, #196]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	492e      	ldr	r1, [pc, #184]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 0310 	and.w	r3, r3, #16
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d010      	beq.n	800c0e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	699a      	ldr	r2, [r3, #24]
 800c0c8:	4b28      	ldr	r3, [pc, #160]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d208      	bcs.n	800c0e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c0d4:	4b25      	ldr	r3, [pc, #148]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	4922      	ldr	r1, [pc, #136]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d010      	beq.n	800c114 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	69da      	ldr	r2, [r3, #28]
 800c0f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d208      	bcs.n	800c114 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c102:	4b1a      	ldr	r3, [pc, #104]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	4917      	ldr	r1, [pc, #92]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c110:	4313      	orrs	r3, r2
 800c112:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c114:	f000 f834 	bl	800c180 <HAL_RCC_GetSysClockFreq>
 800c118:	4602      	mov	r2, r0
 800c11a:	4b14      	ldr	r3, [pc, #80]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	0a1b      	lsrs	r3, r3, #8
 800c120:	f003 030f 	and.w	r3, r3, #15
 800c124:	4912      	ldr	r1, [pc, #72]	@ (800c170 <HAL_RCC_ClockConfig+0x35c>)
 800c126:	5ccb      	ldrb	r3, [r1, r3]
 800c128:	f003 031f 	and.w	r3, r3, #31
 800c12c:	fa22 f303 	lsr.w	r3, r2, r3
 800c130:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c132:	4b0e      	ldr	r3, [pc, #56]	@ (800c16c <HAL_RCC_ClockConfig+0x358>)
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	4a0d      	ldr	r2, [pc, #52]	@ (800c170 <HAL_RCC_ClockConfig+0x35c>)
 800c13c:	5cd3      	ldrb	r3, [r2, r3]
 800c13e:	f003 031f 	and.w	r3, r3, #31
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	fa22 f303 	lsr.w	r3, r2, r3
 800c148:	4a0a      	ldr	r2, [pc, #40]	@ (800c174 <HAL_RCC_ClockConfig+0x360>)
 800c14a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c14c:	4a0a      	ldr	r2, [pc, #40]	@ (800c178 <HAL_RCC_ClockConfig+0x364>)
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c152:	4b0a      	ldr	r3, [pc, #40]	@ (800c17c <HAL_RCC_ClockConfig+0x368>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7fa f8d0 	bl	80062fc <HAL_InitTick>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c160:	7bfb      	ldrb	r3, [r7, #15]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	58024400 	.word	0x58024400
 800c170:	08017f1c 	.word	0x08017f1c
 800c174:	24000044 	.word	0x24000044
 800c178:	24000040 	.word	0x24000040
 800c17c:	24000060 	.word	0x24000060

0800c180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c180:	b480      	push	{r7}
 800c182:	b089      	sub	sp, #36	@ 0x24
 800c184:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c186:	4bb3      	ldr	r3, [pc, #716]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c18e:	2b18      	cmp	r3, #24
 800c190:	f200 8155 	bhi.w	800c43e <HAL_RCC_GetSysClockFreq+0x2be>
 800c194:	a201      	add	r2, pc, #4	@ (adr r2, 800c19c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19a:	bf00      	nop
 800c19c:	0800c201 	.word	0x0800c201
 800c1a0:	0800c43f 	.word	0x0800c43f
 800c1a4:	0800c43f 	.word	0x0800c43f
 800c1a8:	0800c43f 	.word	0x0800c43f
 800c1ac:	0800c43f 	.word	0x0800c43f
 800c1b0:	0800c43f 	.word	0x0800c43f
 800c1b4:	0800c43f 	.word	0x0800c43f
 800c1b8:	0800c43f 	.word	0x0800c43f
 800c1bc:	0800c227 	.word	0x0800c227
 800c1c0:	0800c43f 	.word	0x0800c43f
 800c1c4:	0800c43f 	.word	0x0800c43f
 800c1c8:	0800c43f 	.word	0x0800c43f
 800c1cc:	0800c43f 	.word	0x0800c43f
 800c1d0:	0800c43f 	.word	0x0800c43f
 800c1d4:	0800c43f 	.word	0x0800c43f
 800c1d8:	0800c43f 	.word	0x0800c43f
 800c1dc:	0800c22d 	.word	0x0800c22d
 800c1e0:	0800c43f 	.word	0x0800c43f
 800c1e4:	0800c43f 	.word	0x0800c43f
 800c1e8:	0800c43f 	.word	0x0800c43f
 800c1ec:	0800c43f 	.word	0x0800c43f
 800c1f0:	0800c43f 	.word	0x0800c43f
 800c1f4:	0800c43f 	.word	0x0800c43f
 800c1f8:	0800c43f 	.word	0x0800c43f
 800c1fc:	0800c233 	.word	0x0800c233
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c200:	4b94      	ldr	r3, [pc, #592]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0320 	and.w	r3, r3, #32
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d009      	beq.n	800c220 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c20c:	4b91      	ldr	r3, [pc, #580]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	08db      	lsrs	r3, r3, #3
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	4a90      	ldr	r2, [pc, #576]	@ (800c458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c218:	fa22 f303 	lsr.w	r3, r2, r3
 800c21c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c21e:	e111      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c220:	4b8d      	ldr	r3, [pc, #564]	@ (800c458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c222:	61bb      	str	r3, [r7, #24]
      break;
 800c224:	e10e      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c226:	4b8d      	ldr	r3, [pc, #564]	@ (800c45c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c228:	61bb      	str	r3, [r7, #24]
      break;
 800c22a:	e10b      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c22c:	4b8c      	ldr	r3, [pc, #560]	@ (800c460 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c22e:	61bb      	str	r3, [r7, #24]
      break;
 800c230:	e108      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c232:	4b88      	ldr	r3, [pc, #544]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c23c:	4b85      	ldr	r3, [pc, #532]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c240:	091b      	lsrs	r3, r3, #4
 800c242:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c246:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c248:	4b82      	ldr	r3, [pc, #520]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c252:	4b80      	ldr	r3, [pc, #512]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c256:	08db      	lsrs	r3, r3, #3
 800c258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	fb02 f303 	mul.w	r3, r2, r3
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 80e1 	beq.w	800c438 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	f000 8083 	beq.w	800c384 <HAL_RCC_GetSysClockFreq+0x204>
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b02      	cmp	r3, #2
 800c282:	f200 80a1 	bhi.w	800c3c8 <HAL_RCC_GetSysClockFreq+0x248>
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <HAL_RCC_GetSysClockFreq+0x114>
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d056      	beq.n	800c340 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c292:	e099      	b.n	800c3c8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c294:	4b6f      	ldr	r3, [pc, #444]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0320 	and.w	r3, r3, #32
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02d      	beq.n	800c2fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2a0:	4b6c      	ldr	r3, [pc, #432]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	08db      	lsrs	r3, r3, #3
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	4a6b      	ldr	r2, [pc, #428]	@ (800c458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	ee07 3a90 	vmov	s15, r3
 800c2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	ee07 3a90 	vmov	s15, r3
 800c2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ca:	4b62      	ldr	r3, [pc, #392]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2da:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c2fa:	e087      	b.n	800c40c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	ee07 3a90 	vmov	s15, r3
 800c302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c306:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c468 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c30e:	4b51      	ldr	r3, [pc, #324]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c316:	ee07 3a90 	vmov	s15, r3
 800c31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c31e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c322:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c32e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c33e:	e065      	b.n	800c40c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c46c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c352:	4b40      	ldr	r3, [pc, #256]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35a:	ee07 3a90 	vmov	s15, r3
 800c35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c362:	ed97 6a02 	vldr	s12, [r7, #8]
 800c366:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c382:	e043      	b.n	800c40c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	ee07 3a90 	vmov	s15, r3
 800c38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c470 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c396:	4b2f      	ldr	r3, [pc, #188]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39e:	ee07 3a90 	vmov	s15, r3
 800c3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3c6:	e021      	b.n	800c40c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c46c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3da:	4b1e      	ldr	r3, [pc, #120]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e2:	ee07 3a90 	vmov	s15, r3
 800c3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c406:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c40a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c40c:	4b11      	ldr	r3, [pc, #68]	@ (800c454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c410:	0a5b      	lsrs	r3, r3, #9
 800c412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c416:	3301      	adds	r3, #1
 800c418:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c424:	edd7 6a07 	vldr	s13, [r7, #28]
 800c428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c430:	ee17 3a90 	vmov	r3, s15
 800c434:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c436:	e005      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c438:	2300      	movs	r3, #0
 800c43a:	61bb      	str	r3, [r7, #24]
      break;
 800c43c:	e002      	b.n	800c444 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c43e:	4b07      	ldr	r3, [pc, #28]	@ (800c45c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c440:	61bb      	str	r3, [r7, #24]
      break;
 800c442:	bf00      	nop
  }

  return sysclockfreq;
 800c444:	69bb      	ldr	r3, [r7, #24]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3724      	adds	r7, #36	@ 0x24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	58024400 	.word	0x58024400
 800c458:	03d09000 	.word	0x03d09000
 800c45c:	003d0900 	.word	0x003d0900
 800c460:	007a1200 	.word	0x007a1200
 800c464:	46000000 	.word	0x46000000
 800c468:	4c742400 	.word	0x4c742400
 800c46c:	4a742400 	.word	0x4a742400
 800c470:	4af42400 	.word	0x4af42400

0800c474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c47a:	f7ff fe81 	bl	800c180 <HAL_RCC_GetSysClockFreq>
 800c47e:	4602      	mov	r2, r0
 800c480:	4b10      	ldr	r3, [pc, #64]	@ (800c4c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	0a1b      	lsrs	r3, r3, #8
 800c486:	f003 030f 	and.w	r3, r3, #15
 800c48a:	490f      	ldr	r1, [pc, #60]	@ (800c4c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c48c:	5ccb      	ldrb	r3, [r1, r3]
 800c48e:	f003 031f 	and.w	r3, r3, #31
 800c492:	fa22 f303 	lsr.w	r3, r2, r3
 800c496:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c498:	4b0a      	ldr	r3, [pc, #40]	@ (800c4c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	f003 030f 	and.w	r3, r3, #15
 800c4a0:	4a09      	ldr	r2, [pc, #36]	@ (800c4c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c4a2:	5cd3      	ldrb	r3, [r2, r3]
 800c4a4:	f003 031f 	and.w	r3, r3, #31
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ae:	4a07      	ldr	r2, [pc, #28]	@ (800c4cc <HAL_RCC_GetHCLKFreq+0x58>)
 800c4b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4b2:	4a07      	ldr	r2, [pc, #28]	@ (800c4d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c4b8:	4b04      	ldr	r3, [pc, #16]	@ (800c4cc <HAL_RCC_GetHCLKFreq+0x58>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	58024400 	.word	0x58024400
 800c4c8:	08017f1c 	.word	0x08017f1c
 800c4cc:	24000044 	.word	0x24000044
 800c4d0:	24000040 	.word	0x24000040

0800c4d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c4d8:	f7ff ffcc 	bl	800c474 <HAL_RCC_GetHCLKFreq>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	091b      	lsrs	r3, r3, #4
 800c4e4:	f003 0307 	and.w	r3, r3, #7
 800c4e8:	4904      	ldr	r1, [pc, #16]	@ (800c4fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c4ea:	5ccb      	ldrb	r3, [r1, r3]
 800c4ec:	f003 031f 	and.w	r3, r3, #31
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	58024400 	.word	0x58024400
 800c4fc:	08017f1c 	.word	0x08017f1c

0800c500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c504:	f7ff ffb6 	bl	800c474 <HAL_RCC_GetHCLKFreq>
 800c508:	4602      	mov	r2, r0
 800c50a:	4b06      	ldr	r3, [pc, #24]	@ (800c524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	0a1b      	lsrs	r3, r3, #8
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	4904      	ldr	r1, [pc, #16]	@ (800c528 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c516:	5ccb      	ldrb	r3, [r1, r3]
 800c518:	f003 031f 	and.w	r3, r3, #31
 800c51c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c520:	4618      	mov	r0, r3
 800c522:	bd80      	pop	{r7, pc}
 800c524:	58024400 	.word	0x58024400
 800c528:	08017f1c 	.word	0x08017f1c

0800c52c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	223f      	movs	r2, #63	@ 0x3f
 800c53a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c53c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	f003 0207 	and.w	r2, r3, #7
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c548:	4b17      	ldr	r3, [pc, #92]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c554:	4b14      	ldr	r3, [pc, #80]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f003 020f 	and.w	r2, r3, #15
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c560:	4b11      	ldr	r3, [pc, #68]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c56c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c56e:	69db      	ldr	r3, [r3, #28]
 800c570:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c578:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c584:	4b08      	ldr	r3, [pc, #32]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x7c>)
 800c586:	6a1b      	ldr	r3, [r3, #32]
 800c588:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c590:	4b06      	ldr	r3, [pc, #24]	@ (800c5ac <HAL_RCC_GetClockConfig+0x80>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 020f 	and.w	r2, r3, #15
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	601a      	str	r2, [r3, #0]
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	52002000 	.word	0x52002000

0800c5b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5b4:	b0ca      	sub	sp, #296	@ 0x128
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c5d4:	2500      	movs	r5, #0
 800c5d6:	ea54 0305 	orrs.w	r3, r4, r5
 800c5da:	d049      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5e6:	d02f      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c5e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5ec:	d828      	bhi.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5f2:	d01a      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c5f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5f8:	d822      	bhi.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d003      	beq.n	800c606 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c602:	d007      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c604:	e01c      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c606:	4bb8      	ldr	r3, [pc, #736]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c60a:	4ab7      	ldr	r2, [pc, #732]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c60c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c612:	e01a      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c618:	3308      	adds	r3, #8
 800c61a:	2102      	movs	r1, #2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fc8f 	bl	800df40 <RCCEx_PLL2_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c628:	e00f      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c62e:	3328      	adds	r3, #40	@ 0x28
 800c630:	2102      	movs	r1, #2
 800c632:	4618      	mov	r0, r3
 800c634:	f001 fd36 	bl	800e0a4 <RCCEx_PLL3_Config>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c63e:	e004      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c646:	e000      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c64a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c652:	4ba5      	ldr	r3, [pc, #660]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c656:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c65e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c660:	4aa1      	ldr	r2, [pc, #644]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c662:	430b      	orrs	r3, r1
 800c664:	6513      	str	r3, [r2, #80]	@ 0x50
 800c666:	e003      	b.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c66c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c67c:	f04f 0900 	mov.w	r9, #0
 800c680:	ea58 0309 	orrs.w	r3, r8, r9
 800c684:	d047      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c68a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d82a      	bhi.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c690:	a201      	add	r2, pc, #4	@ (adr r2, 800c698 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c6ad 	.word	0x0800c6ad
 800c69c:	0800c6bb 	.word	0x0800c6bb
 800c6a0:	0800c6d1 	.word	0x0800c6d1
 800c6a4:	0800c6ef 	.word	0x0800c6ef
 800c6a8:	0800c6ef 	.word	0x0800c6ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ac:	4b8e      	ldr	r3, [pc, #568]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b0:	4a8d      	ldr	r2, [pc, #564]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6b8:	e01a      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6be:	3308      	adds	r3, #8
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f001 fc3c 	bl	800df40 <RCCEx_PLL2_Config>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6ce:	e00f      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6d4:	3328      	adds	r3, #40	@ 0x28
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f001 fce3 	bl	800e0a4 <RCCEx_PLL3_Config>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c6e4:	e004      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c6ec:	e000      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c6ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10a      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6f8:	4b7b      	ldr	r3, [pc, #492]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6fc:	f023 0107 	bic.w	r1, r3, #7
 800c700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c706:	4a78      	ldr	r2, [pc, #480]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c708:	430b      	orrs	r3, r1
 800c70a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c70c:	e003      	b.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c70e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800c722:	f04f 0b00 	mov.w	fp, #0
 800c726:	ea5a 030b 	orrs.w	r3, sl, fp
 800c72a:	d04c      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c736:	d030      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c73c:	d829      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c73e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c740:	d02d      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c742:	2bc0      	cmp	r3, #192	@ 0xc0
 800c744:	d825      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c746:	2b80      	cmp	r3, #128	@ 0x80
 800c748:	d018      	beq.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c74a:	2b80      	cmp	r3, #128	@ 0x80
 800c74c:	d821      	bhi.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c752:	2b40      	cmp	r3, #64	@ 0x40
 800c754:	d007      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c756:	e01c      	b.n	800c792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c758:	4b63      	ldr	r3, [pc, #396]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c75c:	4a62      	ldr	r2, [pc, #392]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c75e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c764:	e01c      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c76a:	3308      	adds	r3, #8
 800c76c:	2100      	movs	r1, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 fbe6 	bl	800df40 <RCCEx_PLL2_Config>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c77a:	e011      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c780:	3328      	adds	r3, #40	@ 0x28
 800c782:	2100      	movs	r1, #0
 800c784:	4618      	mov	r0, r3
 800c786:	f001 fc8d 	bl	800e0a4 <RCCEx_PLL3_Config>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c790:	e006      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c798:	e002      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c79e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10a      	bne.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c7a8:	4b4f      	ldr	r3, [pc, #316]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800c7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7b6:	4a4c      	ldr	r2, [pc, #304]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7b8:	430b      	orrs	r3, r1
 800c7ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800c7bc:	e003      	b.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800c7d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c7dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	d053      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c7ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7f2:	d035      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c7f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7f8:	d82e      	bhi.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c7fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c7fe:	d031      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c800:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c804:	d828      	bhi.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c80a:	d01a      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c80c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c810:	d822      	bhi.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c81a:	d007      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c81c:	e01c      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c81e:	4b32      	ldr	r3, [pc, #200]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c822:	4a31      	ldr	r2, [pc, #196]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c82a:	e01c      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c830:	3308      	adds	r3, #8
 800c832:	2100      	movs	r1, #0
 800c834:	4618      	mov	r0, r3
 800c836:	f001 fb83 	bl	800df40 <RCCEx_PLL2_Config>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c840:	e011      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c846:	3328      	adds	r3, #40	@ 0x28
 800c848:	2100      	movs	r1, #0
 800c84a:	4618      	mov	r0, r3
 800c84c:	f001 fc2a 	bl	800e0a4 <RCCEx_PLL3_Config>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c856:	e006      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c85e:	e002      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c860:	bf00      	nop
 800c862:	e000      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10b      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c86e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c872:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c87a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c87e:	4a1a      	ldr	r2, [pc, #104]	@ (800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c880:	430b      	orrs	r3, r1
 800c882:	6593      	str	r3, [r2, #88]	@ 0x58
 800c884:	e003      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c88a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c89a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c8a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	d056      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c8b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8ba:	d038      	beq.n	800c92e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c8bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8c0:	d831      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c8c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c8c6:	d034      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c8c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c8cc:	d82b      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c8ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8d2:	d01d      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c8d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8d8:	d825      	bhi.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d006      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c8de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8e2:	d00a      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c8e4:	e01f      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c8e6:	bf00      	nop
 800c8e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ec:	4ba2      	ldr	r3, [pc, #648]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f0:	4aa1      	ldr	r2, [pc, #644]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8f8:	e01c      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8fe:	3308      	adds	r3, #8
 800c900:	2100      	movs	r1, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f001 fb1c 	bl	800df40 <RCCEx_PLL2_Config>
 800c908:	4603      	mov	r3, r0
 800c90a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c90e:	e011      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c914:	3328      	adds	r3, #40	@ 0x28
 800c916:	2100      	movs	r1, #0
 800c918:	4618      	mov	r0, r3
 800c91a:	f001 fbc3 	bl	800e0a4 <RCCEx_PLL3_Config>
 800c91e:	4603      	mov	r3, r0
 800c920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c924:	e006      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c92c:	e002      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10b      	bne.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c93c:	4b8e      	ldr	r3, [pc, #568]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c93e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c940:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c94c:	4a8a      	ldr	r2, [pc, #552]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c94e:	430b      	orrs	r3, r1
 800c950:	6593      	str	r3, [r2, #88]	@ 0x58
 800c952:	e003      	b.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c964:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c96c:	2300      	movs	r3, #0
 800c96e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c972:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c976:	460b      	mov	r3, r1
 800c978:	4313      	orrs	r3, r2
 800c97a:	d03a      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c982:	2b30      	cmp	r3, #48	@ 0x30
 800c984:	d01f      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c986:	2b30      	cmp	r3, #48	@ 0x30
 800c988:	d819      	bhi.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	d00c      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d815      	bhi.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d019      	beq.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c996:	2b10      	cmp	r3, #16
 800c998:	d111      	bne.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c99a:	4b77      	ldr	r3, [pc, #476]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c99e:	4a76      	ldr	r2, [pc, #472]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c9a6:	e011      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	2102      	movs	r1, #2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 fac5 	bl	800df40 <RCCEx_PLL2_Config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c9bc:	e006      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c9c4:	e002      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c9c6:	bf00      	nop
 800c9c8:	e000      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c9d4:	4b68      	ldr	r3, [pc, #416]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9e2:	4a65      	ldr	r2, [pc, #404]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c9e8:	e003      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c9fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca02:	2300      	movs	r3, #0
 800ca04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ca08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	d051      	beq.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ca12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca1c:	d035      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ca1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca22:	d82e      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ca24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca28:	d031      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ca2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca2e:	d828      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ca30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca34:	d01a      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ca36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca3a:	d822      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ca40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca44:	d007      	beq.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ca46:	e01c      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca48:	4b4b      	ldr	r3, [pc, #300]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4c:	4a4a      	ldr	r2, [pc, #296]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca54:	e01c      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f001 fa6e 	bl	800df40 <RCCEx_PLL2_Config>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca6a:	e011      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca70:	3328      	adds	r3, #40	@ 0x28
 800ca72:	2100      	movs	r1, #0
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 fb15 	bl	800e0a4 <RCCEx_PLL3_Config>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca80:	e006      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca88:	e002      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca8a:	bf00      	nop
 800ca8c:	e000      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ca98:	4b37      	ldr	r3, [pc, #220]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800caa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caa6:	4a34      	ldr	r2, [pc, #208]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caa8:	430b      	orrs	r3, r1
 800caaa:	6513      	str	r3, [r2, #80]	@ 0x50
 800caac:	e003      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800cac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cac6:	2300      	movs	r3, #0
 800cac8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cacc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800cad0:	460b      	mov	r3, r1
 800cad2:	4313      	orrs	r3, r2
 800cad4:	d056      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cadc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cae0:	d033      	beq.n	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cae6:	d82c      	bhi.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cae8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caec:	d02f      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800caee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caf2:	d826      	bhi.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800caf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800caf8:	d02b      	beq.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cafa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cafe:	d820      	bhi.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb04:	d012      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cb06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb0a:	d81a      	bhi.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d022      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cb10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb14:	d115      	bne.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f001 fa0e 	bl	800df40 <RCCEx_PLL2_Config>
 800cb24:	4603      	mov	r3, r0
 800cb26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cb2a:	e015      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb30:	3328      	adds	r3, #40	@ 0x28
 800cb32:	2101      	movs	r1, #1
 800cb34:	4618      	mov	r0, r3
 800cb36:	f001 fab5 	bl	800e0a4 <RCCEx_PLL3_Config>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cb40:	e00a      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cb48:	e006      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb4a:	bf00      	nop
 800cb4c:	e004      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb4e:	bf00      	nop
 800cb50:	e002      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10d      	bne.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cb60:	4b05      	ldr	r3, [pc, #20]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb6e:	4a02      	ldr	r2, [pc, #8]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb70:	430b      	orrs	r3, r1
 800cb72:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb74:	e006      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb76:	bf00      	nop
 800cb78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cb90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb94:	2300      	movs	r3, #0
 800cb96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cb9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4313      	orrs	r3, r2
 800cba2:	d055      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cbac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbb0:	d033      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cbb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbb6:	d82c      	bhi.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cbb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbbc:	d02f      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbc2:	d826      	bhi.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cbc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cbc8:	d02b      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cbca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cbce:	d820      	bhi.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cbd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbd4:	d012      	beq.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cbd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbda:	d81a      	bhi.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d022      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cbe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbe4:	d115      	bne.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbea:	3308      	adds	r3, #8
 800cbec:	2101      	movs	r1, #1
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f001 f9a6 	bl	800df40 <RCCEx_PLL2_Config>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cbfa:	e015      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc00:	3328      	adds	r3, #40	@ 0x28
 800cc02:	2101      	movs	r1, #1
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 fa4d 	bl	800e0a4 <RCCEx_PLL3_Config>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc10:	e00a      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc18:	e006      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc1a:	bf00      	nop
 800cc1c:	e004      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc1e:	bf00      	nop
 800cc20:	e002      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc22:	bf00      	nop
 800cc24:	e000      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10b      	bne.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cc30:	4ba3      	ldr	r3, [pc, #652]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc34:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cc40:	4a9f      	ldr	r2, [pc, #636]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc42:	430b      	orrs	r3, r1
 800cc44:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc46:	e003      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cc5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cc60:	2300      	movs	r3, #0
 800cc62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cc66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	d037      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc7a:	d00e      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cc7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc80:	d816      	bhi.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d018      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cc86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc8a:	d111      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc8c:	4b8c      	ldr	r3, [pc, #560]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc90:	4a8b      	ldr	r2, [pc, #556]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc98:	e00f      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc9e:	3308      	adds	r3, #8
 800cca0:	2101      	movs	r1, #1
 800cca2:	4618      	mov	r0, r3
 800cca4:	f001 f94c 	bl	800df40 <RCCEx_PLL2_Config>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ccae:	e004      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ccb6:	e000      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ccb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ccc2:	4b7f      	ldr	r3, [pc, #508]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ccca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd0:	4a7b      	ldr	r2, [pc, #492]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccd2:	430b      	orrs	r3, r1
 800ccd4:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccd6:	e003      	b.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800ccec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ccf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	d039      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d81c      	bhi.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800cd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd4d 	.word	0x0800cd4d
 800cd14:	0800cd21 	.word	0x0800cd21
 800cd18:	0800cd2f 	.word	0x0800cd2f
 800cd1c:	0800cd4d 	.word	0x0800cd4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd20:	4b67      	ldr	r3, [pc, #412]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd24:	4a66      	ldr	r2, [pc, #408]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cd2c:	e00f      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd32:	3308      	adds	r3, #8
 800cd34:	2102      	movs	r1, #2
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 f902 	bl	800df40 <RCCEx_PLL2_Config>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cd42:	e004      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd4a:	e000      	b.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800cd4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cd56:	4b5a      	ldr	r3, [pc, #360]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd5a:	f023 0103 	bic.w	r1, r3, #3
 800cd5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd64:	4a56      	ldr	r2, [pc, #344]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd66:	430b      	orrs	r3, r1
 800cd68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cd6a:	e003      	b.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cd80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd84:	2300      	movs	r3, #0
 800cd86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cd8e:	460b      	mov	r3, r1
 800cd90:	4313      	orrs	r3, r2
 800cd92:	f000 809f 	beq.w	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd96:	4b4b      	ldr	r3, [pc, #300]	@ (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a4a      	ldr	r2, [pc, #296]	@ (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cda0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cda2:	f7f9 fe5f 	bl	8006a64 <HAL_GetTick>
 800cda6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdaa:	e00b      	b.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdac:	f7f9 fe5a 	bl	8006a64 <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	2b64      	cmp	r3, #100	@ 0x64
 800cdba:	d903      	bls.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cdc2:	e005      	b.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdc4:	4b3f      	ldr	r3, [pc, #252]	@ (800cec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0ed      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cdd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d179      	bne.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cdd8:	4b39      	ldr	r3, [pc, #228]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cde0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cde4:	4053      	eors	r3, r2
 800cde6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d015      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cdee:	4b34      	ldr	r3, [pc, #208]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdf6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cdfa:	4b31      	ldr	r3, [pc, #196]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfe:	4a30      	ldr	r2, [pc, #192]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce06:	4b2e      	ldr	r3, [pc, #184]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce0a:	4a2d      	ldr	r2, [pc, #180]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ce12:	4a2b      	ldr	r2, [pc, #172]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ce18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ce1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce26:	d118      	bne.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce28:	f7f9 fe1c 	bl	8006a64 <HAL_GetTick>
 800ce2c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce30:	e00d      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce32:	f7f9 fe17 	bl	8006a64 <HAL_GetTick>
 800ce36:	4602      	mov	r2, r0
 800ce38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ce3c:	1ad2      	subs	r2, r2, r3
 800ce3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d903      	bls.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ce46:	2303      	movs	r3, #3
 800ce48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ce4c:	e005      	b.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d0eb      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ce5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d129      	bne.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce72:	d10e      	bne.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ce74:	4b12      	ldr	r3, [pc, #72]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ce7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce84:	091a      	lsrs	r2, r3, #4
 800ce86:	4b10      	ldr	r3, [pc, #64]	@ (800cec8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	4a0d      	ldr	r2, [pc, #52]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce8c:	430b      	orrs	r3, r1
 800ce8e:	6113      	str	r3, [r2, #16]
 800ce90:	e005      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ce92:	4b0b      	ldr	r3, [pc, #44]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	4a0a      	ldr	r2, [pc, #40]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce9c:	6113      	str	r3, [r2, #16]
 800ce9e:	4b08      	ldr	r3, [pc, #32]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cea0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ceaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceae:	4a04      	ldr	r2, [pc, #16]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ceb4:	e00e      	b.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ceb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ceba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800cebe:	e009      	b.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800cec0:	58024400 	.word	0x58024400
 800cec4:	58024800 	.word	0x58024800
 800cec8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ced0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ced4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	f002 0301 	and.w	r3, r2, #1
 800cee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cee4:	2300      	movs	r3, #0
 800cee6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ceea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f000 8089 	beq.w	800d008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cefa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cefc:	2b28      	cmp	r3, #40	@ 0x28
 800cefe:	d86b      	bhi.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800cf00:	a201      	add	r2, pc, #4	@ (adr r2, 800cf08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cf02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf06:	bf00      	nop
 800cf08:	0800cfe1 	.word	0x0800cfe1
 800cf0c:	0800cfd9 	.word	0x0800cfd9
 800cf10:	0800cfd9 	.word	0x0800cfd9
 800cf14:	0800cfd9 	.word	0x0800cfd9
 800cf18:	0800cfd9 	.word	0x0800cfd9
 800cf1c:	0800cfd9 	.word	0x0800cfd9
 800cf20:	0800cfd9 	.word	0x0800cfd9
 800cf24:	0800cfd9 	.word	0x0800cfd9
 800cf28:	0800cfad 	.word	0x0800cfad
 800cf2c:	0800cfd9 	.word	0x0800cfd9
 800cf30:	0800cfd9 	.word	0x0800cfd9
 800cf34:	0800cfd9 	.word	0x0800cfd9
 800cf38:	0800cfd9 	.word	0x0800cfd9
 800cf3c:	0800cfd9 	.word	0x0800cfd9
 800cf40:	0800cfd9 	.word	0x0800cfd9
 800cf44:	0800cfd9 	.word	0x0800cfd9
 800cf48:	0800cfc3 	.word	0x0800cfc3
 800cf4c:	0800cfd9 	.word	0x0800cfd9
 800cf50:	0800cfd9 	.word	0x0800cfd9
 800cf54:	0800cfd9 	.word	0x0800cfd9
 800cf58:	0800cfd9 	.word	0x0800cfd9
 800cf5c:	0800cfd9 	.word	0x0800cfd9
 800cf60:	0800cfd9 	.word	0x0800cfd9
 800cf64:	0800cfd9 	.word	0x0800cfd9
 800cf68:	0800cfe1 	.word	0x0800cfe1
 800cf6c:	0800cfd9 	.word	0x0800cfd9
 800cf70:	0800cfd9 	.word	0x0800cfd9
 800cf74:	0800cfd9 	.word	0x0800cfd9
 800cf78:	0800cfd9 	.word	0x0800cfd9
 800cf7c:	0800cfd9 	.word	0x0800cfd9
 800cf80:	0800cfd9 	.word	0x0800cfd9
 800cf84:	0800cfd9 	.word	0x0800cfd9
 800cf88:	0800cfe1 	.word	0x0800cfe1
 800cf8c:	0800cfd9 	.word	0x0800cfd9
 800cf90:	0800cfd9 	.word	0x0800cfd9
 800cf94:	0800cfd9 	.word	0x0800cfd9
 800cf98:	0800cfd9 	.word	0x0800cfd9
 800cf9c:	0800cfd9 	.word	0x0800cfd9
 800cfa0:	0800cfd9 	.word	0x0800cfd9
 800cfa4:	0800cfd9 	.word	0x0800cfd9
 800cfa8:	0800cfe1 	.word	0x0800cfe1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	2101      	movs	r1, #1
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 ffc3 	bl	800df40 <RCCEx_PLL2_Config>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cfc0:	e00f      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc6:	3328      	adds	r3, #40	@ 0x28
 800cfc8:	2101      	movs	r1, #1
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f001 f86a 	bl	800e0a4 <RCCEx_PLL3_Config>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cfd6:	e004      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cfde:	e000      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cfe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10a      	bne.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cfea:	4bbf      	ldr	r3, [pc, #764]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cff8:	4abb      	ldr	r2, [pc, #748]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cffa:	430b      	orrs	r3, r1
 800cffc:	6553      	str	r3, [r2, #84]	@ 0x54
 800cffe:	e003      	b.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	f002 0302 	and.w	r3, r2, #2
 800d014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d018:	2300      	movs	r3, #0
 800d01a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d01e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d022:	460b      	mov	r3, r1
 800d024:	4313      	orrs	r3, r2
 800d026:	d041      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d02c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d02e:	2b05      	cmp	r3, #5
 800d030:	d824      	bhi.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d032:	a201      	add	r2, pc, #4	@ (adr r2, 800d038 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d085 	.word	0x0800d085
 800d03c:	0800d051 	.word	0x0800d051
 800d040:	0800d067 	.word	0x0800d067
 800d044:	0800d085 	.word	0x0800d085
 800d048:	0800d085 	.word	0x0800d085
 800d04c:	0800d085 	.word	0x0800d085
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d054:	3308      	adds	r3, #8
 800d056:	2101      	movs	r1, #1
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 ff71 	bl	800df40 <RCCEx_PLL2_Config>
 800d05e:	4603      	mov	r3, r0
 800d060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d064:	e00f      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d06a:	3328      	adds	r3, #40	@ 0x28
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 f818 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d07a:	e004      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d082:	e000      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d08e:	4b96      	ldr	r3, [pc, #600]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d092:	f023 0107 	bic.w	r1, r3, #7
 800d096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d09a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d09c:	4a92      	ldr	r2, [pc, #584]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d09e:	430b      	orrs	r3, r1
 800d0a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0a2:	e003      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f002 0304 	and.w	r3, r2, #4
 800d0b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	d044      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0d4:	2b05      	cmp	r3, #5
 800d0d6:	d825      	bhi.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0de:	bf00      	nop
 800d0e0:	0800d12d 	.word	0x0800d12d
 800d0e4:	0800d0f9 	.word	0x0800d0f9
 800d0e8:	0800d10f 	.word	0x0800d10f
 800d0ec:	0800d12d 	.word	0x0800d12d
 800d0f0:	0800d12d 	.word	0x0800d12d
 800d0f4:	0800d12d 	.word	0x0800d12d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	2101      	movs	r1, #1
 800d100:	4618      	mov	r0, r3
 800d102:	f000 ff1d 	bl	800df40 <RCCEx_PLL2_Config>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d10c:	e00f      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d112:	3328      	adds	r3, #40	@ 0x28
 800d114:	2101      	movs	r1, #1
 800d116:	4618      	mov	r0, r3
 800d118:	f000 ffc4 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d11c:	4603      	mov	r3, r0
 800d11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d122:	e004      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d12a:	e000      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d136:	4b6c      	ldr	r3, [pc, #432]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d13a:	f023 0107 	bic.w	r1, r3, #7
 800d13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d146:	4a68      	ldr	r2, [pc, #416]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d148:	430b      	orrs	r3, r1
 800d14a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d14c:	e003      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d14e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f002 0320 	and.w	r3, r2, #32
 800d162:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d166:	2300      	movs	r3, #0
 800d168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d16c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d170:	460b      	mov	r3, r1
 800d172:	4313      	orrs	r3, r2
 800d174:	d055      	beq.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d182:	d033      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d188:	d82c      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d18e:	d02f      	beq.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d194:	d826      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d196:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d19a:	d02b      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d19c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1a0:	d820      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d1a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1a6:	d012      	beq.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d1a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1ac:	d81a      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d022      	beq.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d1b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1b6:	d115      	bne.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1bc:	3308      	adds	r3, #8
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 febd 	bl	800df40 <RCCEx_PLL2_Config>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d1cc:	e015      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1d2:	3328      	adds	r3, #40	@ 0x28
 800d1d4:	2102      	movs	r1, #2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 ff64 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d1e2:	e00a      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d1ea:	e006      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1ec:	bf00      	nop
 800d1ee:	e004      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1f0:	bf00      	nop
 800d1f2:	e002      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1f4:	bf00      	nop
 800d1f6:	e000      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10b      	bne.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d202:	4b39      	ldr	r3, [pc, #228]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d206:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d212:	4a35      	ldr	r2, [pc, #212]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d214:	430b      	orrs	r3, r1
 800d216:	6553      	str	r3, [r2, #84]	@ 0x54
 800d218:	e003      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d21e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d22e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d232:	2300      	movs	r3, #0
 800d234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4313      	orrs	r3, r2
 800d240:	d058      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d24a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d24e:	d033      	beq.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d250:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d254:	d82c      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d25a:	d02f      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d25c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d260:	d826      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d266:	d02b      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d26c:	d820      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d26e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d272:	d012      	beq.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d278:	d81a      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d022      	beq.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d27e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d282:	d115      	bne.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d288:	3308      	adds	r3, #8
 800d28a:	2100      	movs	r1, #0
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 fe57 	bl	800df40 <RCCEx_PLL2_Config>
 800d292:	4603      	mov	r3, r0
 800d294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d298:	e015      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d29e:	3328      	adds	r3, #40	@ 0x28
 800d2a0:	2102      	movs	r1, #2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 fefe 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d2ae:	e00a      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2b6:	e006      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d2b8:	bf00      	nop
 800d2ba:	e004      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d2bc:	bf00      	nop
 800d2be:	e002      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d2c0:	bf00      	nop
 800d2c2:	e000      	b.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10e      	bne.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d2ce:	4b06      	ldr	r3, [pc, #24]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d2de:	4a02      	ldr	r2, [pc, #8]	@ (800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2e0:	430b      	orrs	r3, r1
 800d2e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2e4:	e006      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d2e6:	bf00      	nop
 800d2e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d304:	2300      	movs	r3, #0
 800d306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d30a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d30e:	460b      	mov	r3, r1
 800d310:	4313      	orrs	r3, r2
 800d312:	d055      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d31c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d320:	d033      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d322:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d326:	d82c      	bhi.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d32c:	d02f      	beq.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d32e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d332:	d826      	bhi.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d334:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d338:	d02b      	beq.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d33a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d33e:	d820      	bhi.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d344:	d012      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d34a:	d81a      	bhi.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d022      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d354:	d115      	bne.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d35a:	3308      	adds	r3, #8
 800d35c:	2100      	movs	r1, #0
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 fdee 	bl	800df40 <RCCEx_PLL2_Config>
 800d364:	4603      	mov	r3, r0
 800d366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d36a:	e015      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d370:	3328      	adds	r3, #40	@ 0x28
 800d372:	2102      	movs	r1, #2
 800d374:	4618      	mov	r0, r3
 800d376:	f000 fe95 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d380:	e00a      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d388:	e006      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d38a:	bf00      	nop
 800d38c:	e004      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d38e:	bf00      	nop
 800d390:	e002      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d392:	bf00      	nop
 800d394:	e000      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d396:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d3a0:	4ba1      	ldr	r3, [pc, #644]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3b0:	4a9d      	ldr	r2, [pc, #628]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3b2:	430b      	orrs	r3, r1
 800d3b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3b6:	e003      	b.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f002 0308 	and.w	r3, r2, #8
 800d3cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	d01e      	beq.n	800d41e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3ec:	d10c      	bne.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3f2:	3328      	adds	r3, #40	@ 0x28
 800d3f4:	2102      	movs	r1, #2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fe54 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d408:	4b87      	ldr	r3, [pc, #540]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d40c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d418:	4a83      	ldr	r2, [pc, #524]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d41a:	430b      	orrs	r3, r1
 800d41c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	f002 0310 	and.w	r3, r2, #16
 800d42a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d42e:	2300      	movs	r3, #0
 800d430:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d434:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d438:	460b      	mov	r3, r1
 800d43a:	4313      	orrs	r3, r2
 800d43c:	d01e      	beq.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d44a:	d10c      	bne.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d450:	3328      	adds	r3, #40	@ 0x28
 800d452:	2102      	movs	r1, #2
 800d454:	4618      	mov	r0, r3
 800d456:	f000 fe25 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d466:	4b70      	ldr	r3, [pc, #448]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d46a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d476:	4a6c      	ldr	r2, [pc, #432]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d478:	430b      	orrs	r3, r1
 800d47a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d488:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d48c:	2300      	movs	r3, #0
 800d48e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d492:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d496:	460b      	mov	r3, r1
 800d498:	4313      	orrs	r3, r2
 800d49a:	d03e      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d4a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4a8:	d022      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d4aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4ae:	d81b      	bhi.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d003      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d4b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4b8:	d00b      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d4ba:	e015      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 fd3b 	bl	800df40 <RCCEx_PLL2_Config>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d4d0:	e00f      	b.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4d6:	3328      	adds	r3, #40	@ 0x28
 800d4d8:	2102      	movs	r1, #2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fde2 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d4e6:	e004      	b.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4ee:	e000      	b.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d4f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10b      	bne.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d4fa:	4b4b      	ldr	r3, [pc, #300]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d50a:	4a47      	ldr	r2, [pc, #284]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d50c:	430b      	orrs	r3, r1
 800d50e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d510:	e003      	b.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d522:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d526:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d528:	2300      	movs	r3, #0
 800d52a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d52c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d530:	460b      	mov	r3, r1
 800d532:	4313      	orrs	r3, r2
 800d534:	d03b      	beq.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d53e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d542:	d01f      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d544:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d548:	d818      	bhi.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d54a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d54e:	d003      	beq.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d550:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d554:	d007      	beq.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d556:	e011      	b.n	800d57c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d558:	4b33      	ldr	r3, [pc, #204]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55c:	4a32      	ldr	r2, [pc, #200]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d564:	e00f      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d56a:	3328      	adds	r3, #40	@ 0x28
 800d56c:	2101      	movs	r1, #1
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fd98 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d574:	4603      	mov	r3, r0
 800d576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d57a:	e004      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d582:	e000      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10b      	bne.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d58e:	4b26      	ldr	r3, [pc, #152]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d592:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d59e:	4a22      	ldr	r2, [pc, #136]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5a4:	e003      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d5ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5bc:	2300      	movs	r3, #0
 800d5be:	677b      	str	r3, [r7, #116]	@ 0x74
 800d5c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	d034      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d5d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5d8:	d007      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d5da:	e011      	b.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5dc:	4b12      	ldr	r3, [pc, #72]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e0:	4a11      	ldr	r2, [pc, #68]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d5e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d5e8:	e00e      	b.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ee:	3308      	adds	r3, #8
 800d5f0:	2102      	movs	r1, #2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 fca4 	bl	800df40 <RCCEx_PLL2_Config>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d5fe:	e003      	b.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d600:	2301      	movs	r3, #1
 800d602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d606:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10d      	bne.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d610:	4b05      	ldr	r3, [pc, #20]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d614:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d61e:	4a02      	ldr	r2, [pc, #8]	@ (800d628 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d620:	430b      	orrs	r3, r1
 800d622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d624:	e006      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d626:	bf00      	nop
 800d628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d62c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d640:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d642:	2300      	movs	r3, #0
 800d644:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d646:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d64a:	460b      	mov	r3, r1
 800d64c:	4313      	orrs	r3, r2
 800d64e:	d00c      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d654:	3328      	adds	r3, #40	@ 0x28
 800d656:	2102      	movs	r1, #2
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fd23 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d676:	663b      	str	r3, [r7, #96]	@ 0x60
 800d678:	2300      	movs	r3, #0
 800d67a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d67c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d680:	460b      	mov	r3, r1
 800d682:	4313      	orrs	r3, r2
 800d684:	d038      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d692:	d018      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d698:	d811      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d69a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d69e:	d014      	beq.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6a4:	d80b      	bhi.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d011      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d6aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6ae:	d106      	bne.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6b0:	4bc3      	ldr	r3, [pc, #780]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b4:	4ac2      	ldr	r2, [pc, #776]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d6bc:	e008      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d6c4:	e004      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d6c6:	bf00      	nop
 800d6c8:	e002      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d6ca:	bf00      	nop
 800d6cc:	e000      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d6ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d10b      	bne.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d6d8:	4bb9      	ldr	r3, [pc, #740]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6e8:	4ab5      	ldr	r2, [pc, #724]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6ea:	430b      	orrs	r3, r1
 800d6ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800d6ee:	e003      	b.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d704:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d706:	2300      	movs	r3, #0
 800d708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d70a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d70e:	460b      	mov	r3, r1
 800d710:	4313      	orrs	r3, r2
 800d712:	d009      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d714:	4baa      	ldr	r3, [pc, #680]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d718:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d722:	4aa7      	ldr	r2, [pc, #668]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d724:	430b      	orrs	r3, r1
 800d726:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800d734:	653b      	str	r3, [r7, #80]	@ 0x50
 800d736:	2300      	movs	r3, #0
 800d738:	657b      	str	r3, [r7, #84]	@ 0x54
 800d73a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d73e:	460b      	mov	r3, r1
 800d740:	4313      	orrs	r3, r2
 800d742:	d00a      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d744:	4b9e      	ldr	r3, [pc, #632]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800d74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d750:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d754:	4a9a      	ldr	r2, [pc, #616]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d756:	430b      	orrs	r3, r1
 800d758:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d766:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d768:	2300      	movs	r3, #0
 800d76a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d76c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d770:	460b      	mov	r3, r1
 800d772:	4313      	orrs	r3, r2
 800d774:	d009      	beq.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d776:	4b92      	ldr	r3, [pc, #584]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d77a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d784:	4a8e      	ldr	r2, [pc, #568]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d786:	430b      	orrs	r3, r1
 800d788:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d796:	643b      	str	r3, [r7, #64]	@ 0x40
 800d798:	2300      	movs	r3, #0
 800d79a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d79c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	d00e      	beq.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d7a6:	4b86      	ldr	r3, [pc, #536]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	4a85      	ldr	r2, [pc, #532]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d7b0:	6113      	str	r3, [r2, #16]
 800d7b2:	4b83      	ldr	r3, [pc, #524]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7b4:	6919      	ldr	r1, [r3, #16]
 800d7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d7be:	4a80      	ldr	r2, [pc, #512]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7c0:	430b      	orrs	r3, r1
 800d7c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	d009      	beq.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d7e0:	4b77      	ldr	r3, [pc, #476]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ee:	4a74      	ldr	r2, [pc, #464]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7f0:	430b      	orrs	r3, r1
 800d7f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d800:	633b      	str	r3, [r7, #48]	@ 0x30
 800d802:	2300      	movs	r3, #0
 800d804:	637b      	str	r3, [r7, #52]	@ 0x34
 800d806:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d80a:	460b      	mov	r3, r1
 800d80c:	4313      	orrs	r3, r2
 800d80e:	d00a      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d810:	4b6b      	ldr	r3, [pc, #428]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d814:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d820:	4a67      	ldr	r2, [pc, #412]	@ (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d822:	430b      	orrs	r3, r1
 800d824:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	2100      	movs	r1, #0
 800d830:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d832:	f003 0301 	and.w	r3, r3, #1
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d838:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d83c:	460b      	mov	r3, r1
 800d83e:	4313      	orrs	r3, r2
 800d840:	d011      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d846:	3308      	adds	r3, #8
 800d848:	2100      	movs	r1, #0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fb78 	bl	800df40 <RCCEx_PLL2_Config>
 800d850:	4603      	mov	r3, r0
 800d852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d85e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86e:	2100      	movs	r1, #0
 800d870:	6239      	str	r1, [r7, #32]
 800d872:	f003 0302 	and.w	r3, r3, #2
 800d876:	627b      	str	r3, [r7, #36]	@ 0x24
 800d878:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d87c:	460b      	mov	r3, r1
 800d87e:	4313      	orrs	r3, r2
 800d880:	d011      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d886:	3308      	adds	r3, #8
 800d888:	2101      	movs	r1, #1
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 fb58 	bl	800df40 <RCCEx_PLL2_Config>
 800d890:	4603      	mov	r3, r0
 800d892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d003      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d89e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	61b9      	str	r1, [r7, #24]
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	d011      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8c6:	3308      	adds	r3, #8
 800d8c8:	2102      	movs	r1, #2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fb38 	bl	800df40 <RCCEx_PLL2_Config>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	6139      	str	r1, [r7, #16]
 800d8f2:	f003 0308 	and.w	r3, r3, #8
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4313      	orrs	r3, r2
 800d900:	d011      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d906:	3328      	adds	r3, #40	@ 0x28
 800d908:	2100      	movs	r1, #0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 fbca 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d910:	4603      	mov	r3, r0
 800d912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800d916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d003      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d91e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	2100      	movs	r1, #0
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	f003 0310 	and.w	r3, r3, #16
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d93c:	460b      	mov	r3, r1
 800d93e:	4313      	orrs	r3, r2
 800d940:	d011      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d946:	3328      	adds	r3, #40	@ 0x28
 800d948:	2101      	movs	r1, #1
 800d94a:	4618      	mov	r0, r3
 800d94c:	f000 fbaa 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d95e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	2100      	movs	r1, #0
 800d970:	6039      	str	r1, [r7, #0]
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	607b      	str	r3, [r7, #4]
 800d978:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d97c:	460b      	mov	r3, r1
 800d97e:	4313      	orrs	r3, r2
 800d980:	d011      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d986:	3328      	adds	r3, #40	@ 0x28
 800d988:	2102      	movs	r1, #2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fb8a 	bl	800e0a4 <RCCEx_PLL3_Config>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d99e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800d9a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e000      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d9b2:	2301      	movs	r3, #1
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9c0:	58024400 	.word	0x58024400

0800d9c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d9c8:	f7fe fd54 	bl	800c474 <HAL_RCC_GetHCLKFreq>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	4b06      	ldr	r3, [pc, #24]	@ (800d9e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	091b      	lsrs	r3, r3, #4
 800d9d4:	f003 0307 	and.w	r3, r3, #7
 800d9d8:	4904      	ldr	r1, [pc, #16]	@ (800d9ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d9da:	5ccb      	ldrb	r3, [r1, r3]
 800d9dc:	f003 031f 	and.w	r3, r3, #31
 800d9e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	58024400 	.word	0x58024400
 800d9ec:	08017f1c 	.word	0x08017f1c

0800d9f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b089      	sub	sp, #36	@ 0x24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9f8:	4ba1      	ldr	r3, [pc, #644]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800da02:	4b9f      	ldr	r3, [pc, #636]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da06:	0b1b      	lsrs	r3, r3, #12
 800da08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800da0e:	4b9c      	ldr	r3, [pc, #624]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da12:	091b      	lsrs	r3, r3, #4
 800da14:	f003 0301 	and.w	r3, r3, #1
 800da18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800da1a:	4b99      	ldr	r3, [pc, #612]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da1e:	08db      	lsrs	r3, r3, #3
 800da20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	fb02 f303 	mul.w	r3, r2, r3
 800da2a:	ee07 3a90 	vmov	s15, r3
 800da2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 8111 	beq.w	800dc60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	2b02      	cmp	r3, #2
 800da42:	f000 8083 	beq.w	800db4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	f200 80a1 	bhi.w	800db90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d003      	beq.n	800da5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d056      	beq.n	800db08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800da5a:	e099      	b.n	800db90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da5c:	4b88      	ldr	r3, [pc, #544]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0320 	and.w	r3, r3, #32
 800da64:	2b00      	cmp	r3, #0
 800da66:	d02d      	beq.n	800dac4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da68:	4b85      	ldr	r3, [pc, #532]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	08db      	lsrs	r3, r3, #3
 800da6e:	f003 0303 	and.w	r3, r3, #3
 800da72:	4a84      	ldr	r2, [pc, #528]	@ (800dc84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800da74:	fa22 f303 	lsr.w	r3, r2, r3
 800da78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	ee07 3a90 	vmov	s15, r3
 800da80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	ee07 3a90 	vmov	s15, r3
 800da8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da92:	4b7b      	ldr	r3, [pc, #492]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da9a:	ee07 3a90 	vmov	s15, r3
 800da9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800daa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800daaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dabe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dac2:	e087      	b.n	800dbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	ee07 3a90 	vmov	s15, r3
 800daca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dace:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dc8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800dad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dad6:	4b6a      	ldr	r3, [pc, #424]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dade:	ee07 3a90 	vmov	s15, r3
 800dae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800daea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800daee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db06:	e065      	b.n	800dbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	ee07 3a90 	vmov	s15, r3
 800db0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dc90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800db16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db1a:	4b59      	ldr	r3, [pc, #356]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db22:	ee07 3a90 	vmov	s15, r3
 800db26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db4a:	e043      	b.n	800dbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	ee07 3a90 	vmov	s15, r3
 800db52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dc94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800db5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5e:	4b48      	ldr	r3, [pc, #288]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db66:	ee07 3a90 	vmov	s15, r3
 800db6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800db72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db8e:	e021      	b.n	800dbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	ee07 3a90 	vmov	s15, r3
 800db96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dc90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800db9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dba2:	4b37      	ldr	r3, [pc, #220]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbaa:	ee07 3a90 	vmov	s15, r3
 800dbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800dbd4:	4b2a      	ldr	r3, [pc, #168]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd8:	0a5b      	lsrs	r3, r3, #9
 800dbda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbde:	ee07 3a90 	vmov	s15, r3
 800dbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbfa:	ee17 2a90 	vmov	r2, s15
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dc02:	4b1f      	ldr	r3, [pc, #124]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc06:	0c1b      	lsrs	r3, r3, #16
 800dc08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc0c:	ee07 3a90 	vmov	s15, r3
 800dc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc28:	ee17 2a90 	vmov	r2, s15
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800dc30:	4b13      	ldr	r3, [pc, #76]	@ (800dc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc34:	0e1b      	lsrs	r3, r3, #24
 800dc36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc56:	ee17 2a90 	vmov	r2, s15
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dc5e:	e008      	b.n	800dc72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	609a      	str	r2, [r3, #8]
}
 800dc72:	bf00      	nop
 800dc74:	3724      	adds	r7, #36	@ 0x24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	58024400 	.word	0x58024400
 800dc84:	03d09000 	.word	0x03d09000
 800dc88:	46000000 	.word	0x46000000
 800dc8c:	4c742400 	.word	0x4c742400
 800dc90:	4a742400 	.word	0x4a742400
 800dc94:	4af42400 	.word	0x4af42400

0800dc98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b089      	sub	sp, #36	@ 0x24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dca0:	4ba1      	ldr	r3, [pc, #644]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca4:	f003 0303 	and.w	r3, r3, #3
 800dca8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dcaa:	4b9f      	ldr	r3, [pc, #636]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcae:	0d1b      	lsrs	r3, r3, #20
 800dcb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dcb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dcb6:	4b9c      	ldr	r3, [pc, #624]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	0a1b      	lsrs	r3, r3, #8
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dcc2:	4b99      	ldr	r3, [pc, #612]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcc6:	08db      	lsrs	r3, r3, #3
 800dcc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	fb02 f303 	mul.w	r3, r2, r3
 800dcd2:	ee07 3a90 	vmov	s15, r3
 800dcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 8111 	beq.w	800df08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	f000 8083 	beq.w	800ddf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	f200 80a1 	bhi.w	800de38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d056      	beq.n	800ddb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dd02:	e099      	b.n	800de38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd04:	4b88      	ldr	r3, [pc, #544]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0320 	and.w	r3, r3, #32
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d02d      	beq.n	800dd6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd10:	4b85      	ldr	r3, [pc, #532]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	08db      	lsrs	r3, r3, #3
 800dd16:	f003 0303 	and.w	r3, r3, #3
 800dd1a:	4a84      	ldr	r2, [pc, #528]	@ (800df2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	ee07 3a90 	vmov	s15, r3
 800dd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	ee07 3a90 	vmov	s15, r3
 800dd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd3a:	4b7b      	ldr	r3, [pc, #492]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd42:	ee07 3a90 	vmov	s15, r3
 800dd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800df30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dd6a:	e087      	b.n	800de7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	ee07 3a90 	vmov	s15, r3
 800dd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800df34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd7e:	4b6a      	ldr	r3, [pc, #424]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800df30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddae:	e065      	b.n	800de7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	ee07 3a90 	vmov	s15, r3
 800ddb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800df38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ddbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddc2:	4b59      	ldr	r3, [pc, #356]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddca:	ee07 3a90 	vmov	s15, r3
 800ddce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800df30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dde2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddf2:	e043      	b.n	800de7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	ee07 3a90 	vmov	s15, r3
 800ddfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800df3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800de02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de06:	4b48      	ldr	r3, [pc, #288]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0e:	ee07 3a90 	vmov	s15, r3
 800de12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de16:	ed97 6a03 	vldr	s12, [r7, #12]
 800de1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800df30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de36:	e021      	b.n	800de7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	ee07 3a90 	vmov	s15, r3
 800de3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800df38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800de46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de4a:	4b37      	ldr	r3, [pc, #220]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de52:	ee07 3a90 	vmov	s15, r3
 800de56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800de5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800df30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800de7c:	4b2a      	ldr	r3, [pc, #168]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de80:	0a5b      	lsrs	r3, r3, #9
 800de82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de86:	ee07 3a90 	vmov	s15, r3
 800de8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de96:	edd7 6a07 	vldr	s13, [r7, #28]
 800de9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dea2:	ee17 2a90 	vmov	r2, s15
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800deaa:	4b1f      	ldr	r3, [pc, #124]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800deac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deae:	0c1b      	lsrs	r3, r3, #16
 800deb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800deb4:	ee07 3a90 	vmov	s15, r3
 800deb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800debc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dec4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800decc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ded0:	ee17 2a90 	vmov	r2, s15
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ded8:	4b13      	ldr	r3, [pc, #76]	@ (800df28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800deda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dedc:	0e1b      	lsrs	r3, r3, #24
 800dede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee2:	ee07 3a90 	vmov	s15, r3
 800dee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800deee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800def2:	edd7 6a07 	vldr	s13, [r7, #28]
 800def6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800defa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800defe:	ee17 2a90 	vmov	r2, s15
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800df06:	e008      	b.n	800df1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	609a      	str	r2, [r3, #8]
}
 800df1a:	bf00      	nop
 800df1c:	3724      	adds	r7, #36	@ 0x24
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	58024400 	.word	0x58024400
 800df2c:	03d09000 	.word	0x03d09000
 800df30:	46000000 	.word	0x46000000
 800df34:	4c742400 	.word	0x4c742400
 800df38:	4a742400 	.word	0x4a742400
 800df3c:	4af42400 	.word	0x4af42400

0800df40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df4e:	4b53      	ldr	r3, [pc, #332]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800df50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df52:	f003 0303 	and.w	r3, r3, #3
 800df56:	2b03      	cmp	r3, #3
 800df58:	d101      	bne.n	800df5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800df5a:	2301      	movs	r3, #1
 800df5c:	e099      	b.n	800e092 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800df5e:	4b4f      	ldr	r3, [pc, #316]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a4e      	ldr	r2, [pc, #312]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800df64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df6a:	f7f8 fd7b 	bl	8006a64 <HAL_GetTick>
 800df6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df70:	e008      	b.n	800df84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df72:	f7f8 fd77 	bl	8006a64 <HAL_GetTick>
 800df76:	4602      	mov	r2, r0
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d901      	bls.n	800df84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e086      	b.n	800e092 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df84:	4b45      	ldr	r3, [pc, #276]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1f0      	bne.n	800df72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800df90:	4b42      	ldr	r3, [pc, #264]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800df92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	031b      	lsls	r3, r3, #12
 800df9e:	493f      	ldr	r1, [pc, #252]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	628b      	str	r3, [r1, #40]	@ 0x28
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	025b      	lsls	r3, r3, #9
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	431a      	orrs	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	041b      	lsls	r3, r3, #16
 800dfc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	061b      	lsls	r3, r3, #24
 800dfd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dfd4:	4931      	ldr	r1, [pc, #196]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dfda:	4b30      	ldr	r3, [pc, #192]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	695b      	ldr	r3, [r3, #20]
 800dfe6:	492d      	ldr	r1, [pc, #180]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dfec:	4b2b      	ldr	r3, [pc, #172]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff0:	f023 0220 	bic.w	r2, r3, #32
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	4928      	ldr	r1, [pc, #160]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800dffa:	4313      	orrs	r3, r2
 800dffc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dffe:	4b27      	ldr	r3, [pc, #156]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e002:	4a26      	ldr	r2, [pc, #152]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e004:	f023 0310 	bic.w	r3, r3, #16
 800e008:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e00a:	4b24      	ldr	r3, [pc, #144]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e00c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e00e:	4b24      	ldr	r3, [pc, #144]	@ (800e0a0 <RCCEx_PLL2_Config+0x160>)
 800e010:	4013      	ands	r3, r2
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	69d2      	ldr	r2, [r2, #28]
 800e016:	00d2      	lsls	r2, r2, #3
 800e018:	4920      	ldr	r1, [pc, #128]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e01a:	4313      	orrs	r3, r2
 800e01c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e01e:	4b1f      	ldr	r3, [pc, #124]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e022:	4a1e      	ldr	r2, [pc, #120]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e024:	f043 0310 	orr.w	r3, r3, #16
 800e028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d106      	bne.n	800e03e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e030:	4b1a      	ldr	r3, [pc, #104]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e034:	4a19      	ldr	r2, [pc, #100]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e036:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e03a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e03c:	e00f      	b.n	800e05e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d106      	bne.n	800e052 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e044:	4b15      	ldr	r3, [pc, #84]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e048:	4a14      	ldr	r2, [pc, #80]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e04a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e04e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e050:	e005      	b.n	800e05e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e056:	4a11      	ldr	r2, [pc, #68]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e058:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e05c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e05e:	4b0f      	ldr	r3, [pc, #60]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a0e      	ldr	r2, [pc, #56]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e06a:	f7f8 fcfb 	bl	8006a64 <HAL_GetTick>
 800e06e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e070:	e008      	b.n	800e084 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e072:	f7f8 fcf7 	bl	8006a64 <HAL_GetTick>
 800e076:	4602      	mov	r2, r0
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	2b02      	cmp	r3, #2
 800e07e:	d901      	bls.n	800e084 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e080:	2303      	movs	r3, #3
 800e082:	e006      	b.n	800e092 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e084:	4b05      	ldr	r3, [pc, #20]	@ (800e09c <RCCEx_PLL2_Config+0x15c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0f0      	beq.n	800e072 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e090:	7bfb      	ldrb	r3, [r7, #15]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	58024400 	.word	0x58024400
 800e0a0:	ffff0007 	.word	0xffff0007

0800e0a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e0b2:	4b53      	ldr	r3, [pc, #332]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0b6:	f003 0303 	and.w	r3, r3, #3
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d101      	bne.n	800e0c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e099      	b.n	800e1f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e0c2:	4b4f      	ldr	r3, [pc, #316]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a4e      	ldr	r2, [pc, #312]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e0c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ce:	f7f8 fcc9 	bl	8006a64 <HAL_GetTick>
 800e0d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e0d4:	e008      	b.n	800e0e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e0d6:	f7f8 fcc5 	bl	8006a64 <HAL_GetTick>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	2b02      	cmp	r3, #2
 800e0e2:	d901      	bls.n	800e0e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	e086      	b.n	800e1f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e0e8:	4b45      	ldr	r3, [pc, #276]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1f0      	bne.n	800e0d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e0f4:	4b42      	ldr	r3, [pc, #264]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	051b      	lsls	r3, r3, #20
 800e102:	493f      	ldr	r1, [pc, #252]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e104:	4313      	orrs	r3, r2
 800e106:	628b      	str	r3, [r1, #40]	@ 0x28
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	3b01      	subs	r3, #1
 800e10e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	3b01      	subs	r3, #1
 800e118:	025b      	lsls	r3, r3, #9
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	431a      	orrs	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	3b01      	subs	r3, #1
 800e124:	041b      	lsls	r3, r3, #16
 800e126:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e12a:	431a      	orrs	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	3b01      	subs	r3, #1
 800e132:	061b      	lsls	r3, r3, #24
 800e134:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e138:	4931      	ldr	r1, [pc, #196]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e13a:	4313      	orrs	r3, r2
 800e13c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e13e:	4b30      	ldr	r3, [pc, #192]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e142:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	492d      	ldr	r1, [pc, #180]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e14c:	4313      	orrs	r3, r2
 800e14e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e150:	4b2b      	ldr	r3, [pc, #172]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e154:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	4928      	ldr	r1, [pc, #160]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e15e:	4313      	orrs	r3, r2
 800e160:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e162:	4b27      	ldr	r3, [pc, #156]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	4a26      	ldr	r2, [pc, #152]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e16c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e16e:	4b24      	ldr	r3, [pc, #144]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e172:	4b24      	ldr	r3, [pc, #144]	@ (800e204 <RCCEx_PLL3_Config+0x160>)
 800e174:	4013      	ands	r3, r2
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	69d2      	ldr	r2, [r2, #28]
 800e17a:	00d2      	lsls	r2, r2, #3
 800e17c:	4920      	ldr	r1, [pc, #128]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e17e:	4313      	orrs	r3, r2
 800e180:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e182:	4b1f      	ldr	r3, [pc, #124]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	4a1e      	ldr	r2, [pc, #120]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e18c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d106      	bne.n	800e1a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e194:	4b1a      	ldr	r3, [pc, #104]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e198:	4a19      	ldr	r2, [pc, #100]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e19a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e19e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e1a0:	e00f      	b.n	800e1c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d106      	bne.n	800e1b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e1a8:	4b15      	ldr	r3, [pc, #84]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ac:	4a14      	ldr	r2, [pc, #80]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e1b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e1b4:	e005      	b.n	800e1c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e1b6:	4b12      	ldr	r3, [pc, #72]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ba:	4a11      	ldr	r2, [pc, #68]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e1c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a0e      	ldr	r2, [pc, #56]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1ce:	f7f8 fc49 	bl	8006a64 <HAL_GetTick>
 800e1d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e1d4:	e008      	b.n	800e1e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e1d6:	f7f8 fc45 	bl	8006a64 <HAL_GetTick>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d901      	bls.n	800e1e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	e006      	b.n	800e1f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e1e8:	4b05      	ldr	r3, [pc, #20]	@ (800e200 <RCCEx_PLL3_Config+0x15c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d0f0      	beq.n	800e1d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	58024400 	.word	0x58024400
 800e204:	ffff0007 	.word	0xffff0007

0800e208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	e049      	b.n	800e2ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f841 	bl	800e2b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2202      	movs	r2, #2
 800e238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3304      	adds	r3, #4
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f000 f9e8 	bl	800e61c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3708      	adds	r7, #8
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
	...

0800e2cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d001      	beq.n	800e2e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e054      	b.n	800e38e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68da      	ldr	r2, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 0201 	orr.w	r2, r2, #1
 800e2fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a26      	ldr	r2, [pc, #152]	@ (800e39c <HAL_TIM_Base_Start_IT+0xd0>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d022      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e30e:	d01d      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a22      	ldr	r2, [pc, #136]	@ (800e3a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d018      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a21      	ldr	r2, [pc, #132]	@ (800e3a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d013      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a1f      	ldr	r2, [pc, #124]	@ (800e3a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d00e      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a1e      	ldr	r2, [pc, #120]	@ (800e3ac <HAL_TIM_Base_Start_IT+0xe0>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d009      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a1c      	ldr	r2, [pc, #112]	@ (800e3b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d004      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d115      	bne.n	800e378 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	689a      	ldr	r2, [r3, #8]
 800e352:	4b19      	ldr	r3, [pc, #100]	@ (800e3b8 <HAL_TIM_Base_Start_IT+0xec>)
 800e354:	4013      	ands	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b06      	cmp	r3, #6
 800e35c:	d015      	beq.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e364:	d011      	beq.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f042 0201 	orr.w	r2, r2, #1
 800e374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e376:	e008      	b.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f042 0201 	orr.w	r2, r2, #1
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	e000      	b.n	800e38c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e38a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	40010000 	.word	0x40010000
 800e3a0:	40000400 	.word	0x40000400
 800e3a4:	40000800 	.word	0x40000800
 800e3a8:	40000c00 	.word	0x40000c00
 800e3ac:	40010400 	.word	0x40010400
 800e3b0:	40001800 	.word	0x40001800
 800e3b4:	40014000 	.word	0x40014000
 800e3b8:	00010007 	.word	0x00010007

0800e3bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	f003 0302 	and.w	r3, r3, #2
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d020      	beq.n	800e420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01b      	beq.n	800e420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f06f 0202 	mvn.w	r2, #2
 800e3f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	f003 0303 	and.w	r3, r3, #3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d003      	beq.n	800e40e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8e9 	bl	800e5de <HAL_TIM_IC_CaptureCallback>
 800e40c:	e005      	b.n	800e41a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f8db 	bl	800e5ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f8ec 	bl	800e5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f003 0304 	and.w	r3, r3, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	d020      	beq.n	800e46c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01b      	beq.n	800e46c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f06f 0204 	mvn.w	r2, #4
 800e43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2202      	movs	r2, #2
 800e442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f8c3 	bl	800e5de <HAL_TIM_IC_CaptureCallback>
 800e458:	e005      	b.n	800e466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f8b5 	bl	800e5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f8c6 	bl	800e5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f003 0308 	and.w	r3, r3, #8
 800e472:	2b00      	cmp	r3, #0
 800e474:	d020      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f003 0308 	and.w	r3, r3, #8
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d01b      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f06f 0208 	mvn.w	r2, #8
 800e488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2204      	movs	r2, #4
 800e48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f89d 	bl	800e5de <HAL_TIM_IC_CaptureCallback>
 800e4a4:	e005      	b.n	800e4b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f88f 	bl	800e5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f8a0 	bl	800e5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f003 0310 	and.w	r3, r3, #16
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d020      	beq.n	800e504 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f003 0310 	and.w	r3, r3, #16
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d01b      	beq.n	800e504 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f06f 0210 	mvn.w	r2, #16
 800e4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2208      	movs	r2, #8
 800e4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f877 	bl	800e5de <HAL_TIM_IC_CaptureCallback>
 800e4f0:	e005      	b.n	800e4fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f869 	bl	800e5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f87a 	bl	800e5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00c      	beq.n	800e528 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f06f 0201 	mvn.w	r2, #1
 800e520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f7f7 fc9e 	bl	8005e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d104      	bne.n	800e53c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00c      	beq.n	800e556 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e542:	2b00      	cmp	r3, #0
 800e544:	d007      	beq.n	800e556 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 f90d 	bl	800e770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00c      	beq.n	800e57a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e566:	2b00      	cmp	r3, #0
 800e568:	d007      	beq.n	800e57a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f905 	bl	800e784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00c      	beq.n	800e59e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d007      	beq.n	800e59e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f834 	bl	800e606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f003 0320 	and.w	r3, r3, #32
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00c      	beq.n	800e5c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d007      	beq.n	800e5c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f06f 0220 	mvn.w	r2, #32
 800e5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f8cd 	bl	800e75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5d2:	bf00      	nop
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e5e6:	bf00      	nop
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e5fa:	bf00      	nop
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e60e:	bf00      	nop
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
	...

0800e61c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a43      	ldr	r2, [pc, #268]	@ (800e73c <TIM_Base_SetConfig+0x120>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d013      	beq.n	800e65c <TIM_Base_SetConfig+0x40>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e63a:	d00f      	beq.n	800e65c <TIM_Base_SetConfig+0x40>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a40      	ldr	r2, [pc, #256]	@ (800e740 <TIM_Base_SetConfig+0x124>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00b      	beq.n	800e65c <TIM_Base_SetConfig+0x40>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a3f      	ldr	r2, [pc, #252]	@ (800e744 <TIM_Base_SetConfig+0x128>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d007      	beq.n	800e65c <TIM_Base_SetConfig+0x40>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a3e      	ldr	r2, [pc, #248]	@ (800e748 <TIM_Base_SetConfig+0x12c>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d003      	beq.n	800e65c <TIM_Base_SetConfig+0x40>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a3d      	ldr	r2, [pc, #244]	@ (800e74c <TIM_Base_SetConfig+0x130>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d108      	bne.n	800e66e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a32      	ldr	r2, [pc, #200]	@ (800e73c <TIM_Base_SetConfig+0x120>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d01f      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e67c:	d01b      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a2f      	ldr	r2, [pc, #188]	@ (800e740 <TIM_Base_SetConfig+0x124>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d017      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a2e      	ldr	r2, [pc, #184]	@ (800e744 <TIM_Base_SetConfig+0x128>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d013      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a2d      	ldr	r2, [pc, #180]	@ (800e748 <TIM_Base_SetConfig+0x12c>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d00f      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a2c      	ldr	r2, [pc, #176]	@ (800e74c <TIM_Base_SetConfig+0x130>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d00b      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a2b      	ldr	r2, [pc, #172]	@ (800e750 <TIM_Base_SetConfig+0x134>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d007      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a2a      	ldr	r2, [pc, #168]	@ (800e754 <TIM_Base_SetConfig+0x138>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d003      	beq.n	800e6b6 <TIM_Base_SetConfig+0x9a>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a29      	ldr	r2, [pc, #164]	@ (800e758 <TIM_Base_SetConfig+0x13c>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d108      	bne.n	800e6c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	695b      	ldr	r3, [r3, #20]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	689a      	ldr	r2, [r3, #8]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a14      	ldr	r2, [pc, #80]	@ (800e73c <TIM_Base_SetConfig+0x120>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d00f      	beq.n	800e70e <TIM_Base_SetConfig+0xf2>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a16      	ldr	r2, [pc, #88]	@ (800e74c <TIM_Base_SetConfig+0x130>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d00b      	beq.n	800e70e <TIM_Base_SetConfig+0xf2>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a15      	ldr	r2, [pc, #84]	@ (800e750 <TIM_Base_SetConfig+0x134>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d007      	beq.n	800e70e <TIM_Base_SetConfig+0xf2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a14      	ldr	r2, [pc, #80]	@ (800e754 <TIM_Base_SetConfig+0x138>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d003      	beq.n	800e70e <TIM_Base_SetConfig+0xf2>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a13      	ldr	r2, [pc, #76]	@ (800e758 <TIM_Base_SetConfig+0x13c>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d103      	bne.n	800e716 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	691a      	ldr	r2, [r3, #16]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f043 0204 	orr.w	r2, r3, #4
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2201      	movs	r2, #1
 800e726:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	601a      	str	r2, [r3, #0]
}
 800e72e:	bf00      	nop
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	40010000 	.word	0x40010000
 800e740:	40000400 	.word	0x40000400
 800e744:	40000800 	.word	0x40000800
 800e748:	40000c00 	.word	0x40000c00
 800e74c:	40010400 	.word	0x40010400
 800e750:	40014000 	.word	0x40014000
 800e754:	40014400 	.word	0x40014400
 800e758:	40014800 	.word	0x40014800

0800e75c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e042      	b.n	800e830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d106      	bne.n	800e7c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7f7 fcc7 	bl	8006150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2224      	movs	r2, #36	@ 0x24
 800e7c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f022 0201 	bic.w	r2, r2, #1
 800e7d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d002      	beq.n	800e7e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 fab0 	bl	800fd48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fd45 	bl	800f278 <UART_SetConfig>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d101      	bne.n	800e7f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e01b      	b.n	800e830 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689a      	ldr	r2, [r3, #8]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f042 0201 	orr.w	r2, r2, #1
 800e826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 fb2f 	bl	800fe8c <UART_CheckIdleState>
 800e82e:	4603      	mov	r3, r0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	@ 0x28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	4613      	mov	r3, r2
 800e844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e84c:	2b20      	cmp	r3, #32
 800e84e:	d167      	bne.n	800e920 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <HAL_UART_Transmit_DMA+0x24>
 800e856:	88fb      	ldrh	r3, [r7, #6]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d101      	bne.n	800e860 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	e060      	b.n	800e922 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	88fa      	ldrh	r2, [r7, #6]
 800e86a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	88fa      	ldrh	r2, [r7, #6]
 800e872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2221      	movs	r2, #33	@ 0x21
 800e882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d028      	beq.n	800e8e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e892:	4a26      	ldr	r2, [pc, #152]	@ (800e92c <HAL_UART_Transmit_DMA+0xf4>)
 800e894:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e89a:	4a25      	ldr	r2, [pc, #148]	@ (800e930 <HAL_UART_Transmit_DMA+0xf8>)
 800e89c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e8a2:	4a24      	ldr	r2, [pc, #144]	@ (800e934 <HAL_UART_Transmit_DMA+0xfc>)
 800e8a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3328      	adds	r3, #40	@ 0x28
 800e8be:	461a      	mov	r2, r3
 800e8c0:	88fb      	ldrh	r3, [r7, #6]
 800e8c2:	f7f8 ff75 	bl	80077b0 <HAL_DMA_Start_IT>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2210      	movs	r2, #16
 800e8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2220      	movs	r2, #32
 800e8d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e020      	b.n	800e922 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2240      	movs	r2, #64	@ 0x40
 800e8e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	e853 3f00 	ldrex	r3, [r3]
 800e8f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	3308      	adds	r3, #8
 800e906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e908:	623a      	str	r2, [r7, #32]
 800e90a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90c:	69f9      	ldr	r1, [r7, #28]
 800e90e:	6a3a      	ldr	r2, [r7, #32]
 800e910:	e841 2300 	strex	r3, r2, [r1]
 800e914:	61bb      	str	r3, [r7, #24]
   return(result);
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1e5      	bne.n	800e8e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	e000      	b.n	800e922 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e920:	2302      	movs	r3, #2
  }
}
 800e922:	4618      	mov	r0, r3
 800e924:	3728      	adds	r7, #40	@ 0x28
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	08010359 	.word	0x08010359
 800e930:	080103ef 	.word	0x080103ef
 800e934:	08010571 	.word	0x08010571

0800e938 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b09a      	sub	sp, #104	@ 0x68
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e94e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e954:	667b      	str	r3, [r7, #100]	@ 0x64
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e95e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e960:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e96c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e6      	bne.n	800e940 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3308      	adds	r3, #8
 800e978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e984:	4b46      	ldr	r3, [pc, #280]	@ (800eaa0 <HAL_UART_AbortReceive+0x168>)
 800e986:	4013      	ands	r3, r2
 800e988:	663b      	str	r3, [r7, #96]	@ 0x60
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3308      	adds	r3, #8
 800e990:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e992:	643a      	str	r2, [r7, #64]	@ 0x40
 800e994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e99a:	e841 2300 	strex	r3, r2, [r1]
 800e99e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e5      	bne.n	800e972 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d118      	bne.n	800e9e0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	e853 3f00 	ldrex	r3, [r3]
 800e9ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	f023 0310 	bic.w	r3, r3, #16
 800e9c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9d4:	e841 2300 	strex	r3, r2, [r1]
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1e6      	bne.n	800e9ae <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ea:	2b40      	cmp	r3, #64	@ 0x40
 800e9ec:	d13b      	bne.n	800ea66 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea0e:	61ba      	str	r2, [r7, #24]
 800ea10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea12:	6979      	ldr	r1, [r7, #20]
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	e841 2300 	strex	r3, r2, [r1]
 800ea1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1e5      	bne.n	800e9ee <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01c      	beq.n	800ea66 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea32:	2200      	movs	r2, #0
 800ea34:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f9 f921 	bl	8007c84 <HAL_DMA_Abort>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00e      	beq.n	800ea66 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fa fda6 	bl	80095a0 <HAL_DMA_GetError>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b20      	cmp	r3, #32
 800ea58:	d105      	bne.n	800ea66 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e017      	b.n	800ea96 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	220f      	movs	r2, #15
 800ea74:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	699a      	ldr	r2, [r3, #24]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f042 0208 	orr.w	r2, r2, #8
 800ea84:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3768      	adds	r7, #104	@ 0x68
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	effffffe 	.word	0xeffffffe

0800eaa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b0ba      	sub	sp, #232	@ 0xe8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eaca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eace:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ead2:	4013      	ands	r3, r2
 800ead4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ead8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d11b      	bne.n	800eb18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eae4:	f003 0320 	and.w	r3, r3, #32
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d015      	beq.n	800eb18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eaec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eaf0:	f003 0320 	and.w	r3, r3, #32
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d105      	bne.n	800eb04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eaf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eafc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d009      	beq.n	800eb18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 8393 	beq.w	800f234 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	4798      	blx	r3
      }
      return;
 800eb16:	e38d      	b.n	800f234 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 8123 	beq.w	800ed68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb26:	4b8d      	ldr	r3, [pc, #564]	@ (800ed5c <HAL_UART_IRQHandler+0x2b8>)
 800eb28:	4013      	ands	r3, r2
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb32:	4b8b      	ldr	r3, [pc, #556]	@ (800ed60 <HAL_UART_IRQHandler+0x2bc>)
 800eb34:	4013      	ands	r3, r2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f000 8116 	beq.w	800ed68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d011      	beq.n	800eb6c <HAL_UART_IRQHandler+0xc8>
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00b      	beq.n	800eb6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb62:	f043 0201 	orr.w	r2, r3, #1
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb70:	f003 0302 	and.w	r3, r3, #2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d011      	beq.n	800eb9c <HAL_UART_IRQHandler+0xf8>
 800eb78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2202      	movs	r2, #2
 800eb8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb92:	f043 0204 	orr.w	r2, r3, #4
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eba0:	f003 0304 	and.w	r3, r3, #4
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d011      	beq.n	800ebcc <HAL_UART_IRQHandler+0x128>
 800eba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00b      	beq.n	800ebcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2204      	movs	r2, #4
 800ebba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebc2:	f043 0202 	orr.w	r2, r3, #2
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ebcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d017      	beq.n	800ec08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ebd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebdc:	f003 0320 	and.w	r3, r3, #32
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d105      	bne.n	800ebf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ebe4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebe8:	4b5c      	ldr	r3, [pc, #368]	@ (800ed5c <HAL_UART_IRQHandler+0x2b8>)
 800ebea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00b      	beq.n	800ec08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebfe:	f043 0208 	orr.w	r2, r3, #8
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d012      	beq.n	800ec3a <HAL_UART_IRQHandler+0x196>
 800ec14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00c      	beq.n	800ec3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec30:	f043 0220 	orr.w	r2, r3, #32
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 82f9 	beq.w	800f238 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec4a:	f003 0320 	and.w	r3, r3, #32
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d013      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec56:	f003 0320 	and.w	r3, r3, #32
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d007      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec8e:	2b40      	cmp	r3, #64	@ 0x40
 800ec90:	d005      	beq.n	800ec9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ec96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d054      	beq.n	800ed48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f001 faf4 	bl	801028c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecae:	2b40      	cmp	r3, #64	@ 0x40
 800ecb0:	d146      	bne.n	800ed40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecc0:	e853 3f00 	ldrex	r3, [r3]
 800ecc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ecc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ecde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ece2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ecea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ecee:	e841 2300 	strex	r3, r2, [r1]
 800ecf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ecf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1d9      	bne.n	800ecb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d017      	beq.n	800ed38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed0e:	4a15      	ldr	r2, [pc, #84]	@ (800ed64 <HAL_UART_IRQHandler+0x2c0>)
 800ed10:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f9 fad1 	bl	80082c0 <HAL_DMA_Abort_IT>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d019      	beq.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ed32:	4610      	mov	r0, r2
 800ed34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed36:	e00f      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7f2 f959 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed3e:	e00b      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7f2 f955 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed46:	e007      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7f2 f951 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ed56:	e26f      	b.n	800f238 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed58:	bf00      	nop
    return;
 800ed5a:	e26d      	b.n	800f238 <HAL_UART_IRQHandler+0x794>
 800ed5c:	10000001 	.word	0x10000001
 800ed60:	04000120 	.word	0x04000120
 800ed64:	080105f1 	.word	0x080105f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	f040 8203 	bne.w	800f178 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed76:	f003 0310 	and.w	r3, r3, #16
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 81fc 	beq.w	800f178 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed84:	f003 0310 	and.w	r3, r3, #16
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 81f5 	beq.w	800f178 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2210      	movs	r2, #16
 800ed94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eda0:	2b40      	cmp	r3, #64	@ 0x40
 800eda2:	f040 816d 	bne.w	800f080 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4aa4      	ldr	r2, [pc, #656]	@ (800f040 <HAL_UART_IRQHandler+0x59c>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d068      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4aa1      	ldr	r2, [pc, #644]	@ (800f044 <HAL_UART_IRQHandler+0x5a0>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d061      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a9f      	ldr	r2, [pc, #636]	@ (800f048 <HAL_UART_IRQHandler+0x5a4>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d05a      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a9c      	ldr	r2, [pc, #624]	@ (800f04c <HAL_UART_IRQHandler+0x5a8>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d053      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a9a      	ldr	r2, [pc, #616]	@ (800f050 <HAL_UART_IRQHandler+0x5ac>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d04c      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a97      	ldr	r2, [pc, #604]	@ (800f054 <HAL_UART_IRQHandler+0x5b0>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d045      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a95      	ldr	r2, [pc, #596]	@ (800f058 <HAL_UART_IRQHandler+0x5b4>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d03e      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a92      	ldr	r2, [pc, #584]	@ (800f05c <HAL_UART_IRQHandler+0x5b8>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d037      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a90      	ldr	r2, [pc, #576]	@ (800f060 <HAL_UART_IRQHandler+0x5bc>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d030      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a8d      	ldr	r2, [pc, #564]	@ (800f064 <HAL_UART_IRQHandler+0x5c0>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d029      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4a8b      	ldr	r2, [pc, #556]	@ (800f068 <HAL_UART_IRQHandler+0x5c4>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d022      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4a88      	ldr	r2, [pc, #544]	@ (800f06c <HAL_UART_IRQHandler+0x5c8>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d01b      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a86      	ldr	r2, [pc, #536]	@ (800f070 <HAL_UART_IRQHandler+0x5cc>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d014      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a83      	ldr	r2, [pc, #524]	@ (800f074 <HAL_UART_IRQHandler+0x5d0>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d00d      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a81      	ldr	r2, [pc, #516]	@ (800f078 <HAL_UART_IRQHandler+0x5d4>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d006      	beq.n	800ee86 <HAL_UART_IRQHandler+0x3e2>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a7e      	ldr	r2, [pc, #504]	@ (800f07c <HAL_UART_IRQHandler+0x5d8>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d106      	bne.n	800ee94 <HAL_UART_IRQHandler+0x3f0>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	e005      	b.n	800eea0 <HAL_UART_IRQHandler+0x3fc>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 80ad 	beq.w	800f008 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eeb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	f080 80a5 	bcs.w	800f008 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eec4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eed4:	f000 8087 	beq.w	800efe6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eeec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	461a      	mov	r2, r3
 800eefe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef12:	e841 2300 	strex	r3, r2, [r1]
 800ef16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1da      	bne.n	800eed8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3308      	adds	r3, #8
 800ef28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef2c:	e853 3f00 	ldrex	r3, [r3]
 800ef30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef34:	f023 0301 	bic.w	r3, r3, #1
 800ef38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3308      	adds	r3, #8
 800ef42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef52:	e841 2300 	strex	r3, r2, [r1]
 800ef56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e1      	bne.n	800ef22 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	3308      	adds	r3, #8
 800ef64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef68:	e853 3f00 	ldrex	r3, [r3]
 800ef6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3308      	adds	r3, #8
 800ef7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ef88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef8a:	e841 2300 	strex	r3, r2, [r1]
 800ef8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ef90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1e3      	bne.n	800ef5e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2220      	movs	r2, #32
 800ef9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efac:	e853 3f00 	ldrex	r3, [r3]
 800efb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800efb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efb4:	f023 0310 	bic.w	r3, r3, #16
 800efb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	461a      	mov	r2, r3
 800efc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efce:	e841 2300 	strex	r3, r2, [r1]
 800efd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800efd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1e4      	bne.n	800efa4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f8 fe4f 	bl	8007c84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2202      	movs	r2, #2
 800efea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eff8:	b29b      	uxth	r3, r3
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	b29b      	uxth	r3, r3
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7f1 ffbd 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f006:	e119      	b.n	800f23c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f00e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f012:	429a      	cmp	r2, r3
 800f014:	f040 8112 	bne.w	800f23c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f024:	f040 810a 	bne.w	800f23c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2202      	movs	r2, #2
 800f02c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f034:	4619      	mov	r1, r3
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7f1 ffa2 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
      return;
 800f03c:	e0fe      	b.n	800f23c <HAL_UART_IRQHandler+0x798>
 800f03e:	bf00      	nop
 800f040:	40020010 	.word	0x40020010
 800f044:	40020028 	.word	0x40020028
 800f048:	40020040 	.word	0x40020040
 800f04c:	40020058 	.word	0x40020058
 800f050:	40020070 	.word	0x40020070
 800f054:	40020088 	.word	0x40020088
 800f058:	400200a0 	.word	0x400200a0
 800f05c:	400200b8 	.word	0x400200b8
 800f060:	40020410 	.word	0x40020410
 800f064:	40020428 	.word	0x40020428
 800f068:	40020440 	.word	0x40020440
 800f06c:	40020458 	.word	0x40020458
 800f070:	40020470 	.word	0x40020470
 800f074:	40020488 	.word	0x40020488
 800f078:	400204a0 	.word	0x400204a0
 800f07c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f000 80cf 	beq.w	800f240 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800f0a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	f000 80ca 	beq.w	800f240 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b4:	e853 3f00 	ldrex	r3, [r3]
 800f0b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0d6:	e841 2300 	strex	r3, r2, [r1]
 800f0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1e4      	bne.n	800f0ac <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	e853 3f00 	ldrex	r3, [r3]
 800f0f0:	623b      	str	r3, [r7, #32]
   return(result);
 800f0f2:	6a3a      	ldr	r2, [r7, #32]
 800f0f4:	4b55      	ldr	r3, [pc, #340]	@ (800f24c <HAL_UART_IRQHandler+0x7a8>)
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3308      	adds	r3, #8
 800f102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f106:	633a      	str	r2, [r7, #48]	@ 0x30
 800f108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f10c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f10e:	e841 2300 	strex	r3, r2, [r1]
 800f112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1e3      	bne.n	800f0e2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2220      	movs	r2, #32
 800f11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	e853 3f00 	ldrex	r3, [r3]
 800f13a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f023 0310 	bic.w	r3, r3, #16
 800f142:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	461a      	mov	r2, r3
 800f14c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f150:	61fb      	str	r3, [r7, #28]
 800f152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f154:	69b9      	ldr	r1, [r7, #24]
 800f156:	69fa      	ldr	r2, [r7, #28]
 800f158:	e841 2300 	strex	r3, r2, [r1]
 800f15c:	617b      	str	r3, [r7, #20]
   return(result);
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1e4      	bne.n	800f12e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2202      	movs	r2, #2
 800f168:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f16a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7f1 ff05 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f176:	e063      	b.n	800f240 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f17c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00e      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x6fe>
 800f184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d008      	beq.n	800f1a2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f001 fa65 	bl	801066a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1a0:	e051      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d014      	beq.n	800f1d8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d105      	bne.n	800f1c6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d008      	beq.n	800f1d8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d03a      	beq.n	800f244 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	4798      	blx	r3
    }
    return;
 800f1d6:	e035      	b.n	800f244 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d009      	beq.n	800f1f8 <HAL_UART_IRQHandler+0x754>
 800f1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f001 fa0f 	bl	8010614 <UART_EndTransmit_IT>
    return;
 800f1f6:	e026      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f200:	2b00      	cmp	r3, #0
 800f202:	d009      	beq.n	800f218 <HAL_UART_IRQHandler+0x774>
 800f204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f208:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d003      	beq.n	800f218 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f001 fa3e 	bl	8010692 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f216:	e016      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f21c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d010      	beq.n	800f246 <HAL_UART_IRQHandler+0x7a2>
 800f224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da0c      	bge.n	800f246 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f001 fa26 	bl	801067e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f232:	e008      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
      return;
 800f234:	bf00      	nop
 800f236:	e006      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
    return;
 800f238:	bf00      	nop
 800f23a:	e004      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
      return;
 800f23c:	bf00      	nop
 800f23e:	e002      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
      return;
 800f240:	bf00      	nop
 800f242:	e000      	b.n	800f246 <HAL_UART_IRQHandler+0x7a2>
    return;
 800f244:	bf00      	nop
  }
}
 800f246:	37e8      	adds	r7, #232	@ 0xe8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	effffffe 	.word	0xeffffffe

0800f250 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f27c:	b092      	sub	sp, #72	@ 0x48
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	689a      	ldr	r2, [r3, #8]
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	431a      	orrs	r2, r3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	695b      	ldr	r3, [r3, #20]
 800f296:	431a      	orrs	r2, r3
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	69db      	ldr	r3, [r3, #28]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	4bbe      	ldr	r3, [pc, #760]	@ (800f5a0 <UART_SetConfig+0x328>)
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	6812      	ldr	r2, [r2, #0]
 800f2ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2b0:	430b      	orrs	r3, r1
 800f2b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	68da      	ldr	r2, [r3, #12]
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	430a      	orrs	r2, r1
 800f2c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	699b      	ldr	r3, [r3, #24]
 800f2ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4ab3      	ldr	r2, [pc, #716]	@ (800f5a4 <UART_SetConfig+0x32c>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d004      	beq.n	800f2e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	689a      	ldr	r2, [r3, #8]
 800f2ea:	4baf      	ldr	r3, [pc, #700]	@ (800f5a8 <UART_SetConfig+0x330>)
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	6812      	ldr	r2, [r2, #0]
 800f2f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2f4:	430b      	orrs	r3, r1
 800f2f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fe:	f023 010f 	bic.w	r1, r3, #15
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	430a      	orrs	r2, r1
 800f30c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4aa6      	ldr	r2, [pc, #664]	@ (800f5ac <UART_SetConfig+0x334>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d177      	bne.n	800f408 <UART_SetConfig+0x190>
 800f318:	4ba5      	ldr	r3, [pc, #660]	@ (800f5b0 <UART_SetConfig+0x338>)
 800f31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f31c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f320:	2b28      	cmp	r3, #40	@ 0x28
 800f322:	d86d      	bhi.n	800f400 <UART_SetConfig+0x188>
 800f324:	a201      	add	r2, pc, #4	@ (adr r2, 800f32c <UART_SetConfig+0xb4>)
 800f326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f32a:	bf00      	nop
 800f32c:	0800f3d1 	.word	0x0800f3d1
 800f330:	0800f401 	.word	0x0800f401
 800f334:	0800f401 	.word	0x0800f401
 800f338:	0800f401 	.word	0x0800f401
 800f33c:	0800f401 	.word	0x0800f401
 800f340:	0800f401 	.word	0x0800f401
 800f344:	0800f401 	.word	0x0800f401
 800f348:	0800f401 	.word	0x0800f401
 800f34c:	0800f3d9 	.word	0x0800f3d9
 800f350:	0800f401 	.word	0x0800f401
 800f354:	0800f401 	.word	0x0800f401
 800f358:	0800f401 	.word	0x0800f401
 800f35c:	0800f401 	.word	0x0800f401
 800f360:	0800f401 	.word	0x0800f401
 800f364:	0800f401 	.word	0x0800f401
 800f368:	0800f401 	.word	0x0800f401
 800f36c:	0800f3e1 	.word	0x0800f3e1
 800f370:	0800f401 	.word	0x0800f401
 800f374:	0800f401 	.word	0x0800f401
 800f378:	0800f401 	.word	0x0800f401
 800f37c:	0800f401 	.word	0x0800f401
 800f380:	0800f401 	.word	0x0800f401
 800f384:	0800f401 	.word	0x0800f401
 800f388:	0800f401 	.word	0x0800f401
 800f38c:	0800f3e9 	.word	0x0800f3e9
 800f390:	0800f401 	.word	0x0800f401
 800f394:	0800f401 	.word	0x0800f401
 800f398:	0800f401 	.word	0x0800f401
 800f39c:	0800f401 	.word	0x0800f401
 800f3a0:	0800f401 	.word	0x0800f401
 800f3a4:	0800f401 	.word	0x0800f401
 800f3a8:	0800f401 	.word	0x0800f401
 800f3ac:	0800f3f1 	.word	0x0800f3f1
 800f3b0:	0800f401 	.word	0x0800f401
 800f3b4:	0800f401 	.word	0x0800f401
 800f3b8:	0800f401 	.word	0x0800f401
 800f3bc:	0800f401 	.word	0x0800f401
 800f3c0:	0800f401 	.word	0x0800f401
 800f3c4:	0800f401 	.word	0x0800f401
 800f3c8:	0800f401 	.word	0x0800f401
 800f3cc:	0800f3f9 	.word	0x0800f3f9
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d6:	e222      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f3d8:	2304      	movs	r3, #4
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3de:	e21e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f3e0:	2308      	movs	r3, #8
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	e21a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f3e8:	2310      	movs	r3, #16
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ee:	e216      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f3f0:	2320      	movs	r3, #32
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e212      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f3f8:	2340      	movs	r3, #64	@ 0x40
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e20e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f400:	2380      	movs	r3, #128	@ 0x80
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f406:	e20a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a69      	ldr	r2, [pc, #420]	@ (800f5b4 <UART_SetConfig+0x33c>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d130      	bne.n	800f474 <UART_SetConfig+0x1fc>
 800f412:	4b67      	ldr	r3, [pc, #412]	@ (800f5b0 <UART_SetConfig+0x338>)
 800f414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f416:	f003 0307 	and.w	r3, r3, #7
 800f41a:	2b05      	cmp	r3, #5
 800f41c:	d826      	bhi.n	800f46c <UART_SetConfig+0x1f4>
 800f41e:	a201      	add	r2, pc, #4	@ (adr r2, 800f424 <UART_SetConfig+0x1ac>)
 800f420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f424:	0800f43d 	.word	0x0800f43d
 800f428:	0800f445 	.word	0x0800f445
 800f42c:	0800f44d 	.word	0x0800f44d
 800f430:	0800f455 	.word	0x0800f455
 800f434:	0800f45d 	.word	0x0800f45d
 800f438:	0800f465 	.word	0x0800f465
 800f43c:	2300      	movs	r3, #0
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e1ec      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f444:	2304      	movs	r3, #4
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e1e8      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f44c:	2308      	movs	r3, #8
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e1e4      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f454:	2310      	movs	r3, #16
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e1e0      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f45c:	2320      	movs	r3, #32
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e1dc      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f464:	2340      	movs	r3, #64	@ 0x40
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e1d8      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f46c:	2380      	movs	r3, #128	@ 0x80
 800f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f472:	e1d4      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a4f      	ldr	r2, [pc, #316]	@ (800f5b8 <UART_SetConfig+0x340>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d130      	bne.n	800f4e0 <UART_SetConfig+0x268>
 800f47e:	4b4c      	ldr	r3, [pc, #304]	@ (800f5b0 <UART_SetConfig+0x338>)
 800f480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f482:	f003 0307 	and.w	r3, r3, #7
 800f486:	2b05      	cmp	r3, #5
 800f488:	d826      	bhi.n	800f4d8 <UART_SetConfig+0x260>
 800f48a:	a201      	add	r2, pc, #4	@ (adr r2, 800f490 <UART_SetConfig+0x218>)
 800f48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f490:	0800f4a9 	.word	0x0800f4a9
 800f494:	0800f4b1 	.word	0x0800f4b1
 800f498:	0800f4b9 	.word	0x0800f4b9
 800f49c:	0800f4c1 	.word	0x0800f4c1
 800f4a0:	0800f4c9 	.word	0x0800f4c9
 800f4a4:	0800f4d1 	.word	0x0800f4d1
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e1b6      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4b0:	2304      	movs	r3, #4
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e1b2      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4b8:	2308      	movs	r3, #8
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e1ae      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4c0:	2310      	movs	r3, #16
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e1aa      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4c8:	2320      	movs	r3, #32
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e1a6      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4d0:	2340      	movs	r3, #64	@ 0x40
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d6:	e1a2      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4d8:	2380      	movs	r3, #128	@ 0x80
 800f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4de:	e19e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4a35      	ldr	r2, [pc, #212]	@ (800f5bc <UART_SetConfig+0x344>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d130      	bne.n	800f54c <UART_SetConfig+0x2d4>
 800f4ea:	4b31      	ldr	r3, [pc, #196]	@ (800f5b0 <UART_SetConfig+0x338>)
 800f4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4ee:	f003 0307 	and.w	r3, r3, #7
 800f4f2:	2b05      	cmp	r3, #5
 800f4f4:	d826      	bhi.n	800f544 <UART_SetConfig+0x2cc>
 800f4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4fc <UART_SetConfig+0x284>)
 800f4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fc:	0800f515 	.word	0x0800f515
 800f500:	0800f51d 	.word	0x0800f51d
 800f504:	0800f525 	.word	0x0800f525
 800f508:	0800f52d 	.word	0x0800f52d
 800f50c:	0800f535 	.word	0x0800f535
 800f510:	0800f53d 	.word	0x0800f53d
 800f514:	2300      	movs	r3, #0
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e180      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f51c:	2304      	movs	r3, #4
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e17c      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f524:	2308      	movs	r3, #8
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e178      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f52c:	2310      	movs	r3, #16
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e174      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f534:	2320      	movs	r3, #32
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e170      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f53c:	2340      	movs	r3, #64	@ 0x40
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f542:	e16c      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f544:	2380      	movs	r3, #128	@ 0x80
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54a:	e168      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c0 <UART_SetConfig+0x348>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d142      	bne.n	800f5dc <UART_SetConfig+0x364>
 800f556:	4b16      	ldr	r3, [pc, #88]	@ (800f5b0 <UART_SetConfig+0x338>)
 800f558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f55a:	f003 0307 	and.w	r3, r3, #7
 800f55e:	2b05      	cmp	r3, #5
 800f560:	d838      	bhi.n	800f5d4 <UART_SetConfig+0x35c>
 800f562:	a201      	add	r2, pc, #4	@ (adr r2, 800f568 <UART_SetConfig+0x2f0>)
 800f564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f568:	0800f581 	.word	0x0800f581
 800f56c:	0800f589 	.word	0x0800f589
 800f570:	0800f591 	.word	0x0800f591
 800f574:	0800f599 	.word	0x0800f599
 800f578:	0800f5c5 	.word	0x0800f5c5
 800f57c:	0800f5cd 	.word	0x0800f5cd
 800f580:	2300      	movs	r3, #0
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e14a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f588:	2304      	movs	r3, #4
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e146      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f590:	2308      	movs	r3, #8
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e142      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f598:	2310      	movs	r3, #16
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59e:	e13e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f5a0:	cfff69f3 	.word	0xcfff69f3
 800f5a4:	58000c00 	.word	0x58000c00
 800f5a8:	11fff4ff 	.word	0x11fff4ff
 800f5ac:	40011000 	.word	0x40011000
 800f5b0:	58024400 	.word	0x58024400
 800f5b4:	40004400 	.word	0x40004400
 800f5b8:	40004800 	.word	0x40004800
 800f5bc:	40004c00 	.word	0x40004c00
 800f5c0:	40005000 	.word	0x40005000
 800f5c4:	2320      	movs	r3, #32
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ca:	e128      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f5cc:	2340      	movs	r3, #64	@ 0x40
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d2:	e124      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f5d4:	2380      	movs	r3, #128	@ 0x80
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5da:	e120      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4acb      	ldr	r2, [pc, #812]	@ (800f910 <UART_SetConfig+0x698>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d176      	bne.n	800f6d4 <UART_SetConfig+0x45c>
 800f5e6:	4bcb      	ldr	r3, [pc, #812]	@ (800f914 <UART_SetConfig+0x69c>)
 800f5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f5ee:	2b28      	cmp	r3, #40	@ 0x28
 800f5f0:	d86c      	bhi.n	800f6cc <UART_SetConfig+0x454>
 800f5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f8 <UART_SetConfig+0x380>)
 800f5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f8:	0800f69d 	.word	0x0800f69d
 800f5fc:	0800f6cd 	.word	0x0800f6cd
 800f600:	0800f6cd 	.word	0x0800f6cd
 800f604:	0800f6cd 	.word	0x0800f6cd
 800f608:	0800f6cd 	.word	0x0800f6cd
 800f60c:	0800f6cd 	.word	0x0800f6cd
 800f610:	0800f6cd 	.word	0x0800f6cd
 800f614:	0800f6cd 	.word	0x0800f6cd
 800f618:	0800f6a5 	.word	0x0800f6a5
 800f61c:	0800f6cd 	.word	0x0800f6cd
 800f620:	0800f6cd 	.word	0x0800f6cd
 800f624:	0800f6cd 	.word	0x0800f6cd
 800f628:	0800f6cd 	.word	0x0800f6cd
 800f62c:	0800f6cd 	.word	0x0800f6cd
 800f630:	0800f6cd 	.word	0x0800f6cd
 800f634:	0800f6cd 	.word	0x0800f6cd
 800f638:	0800f6ad 	.word	0x0800f6ad
 800f63c:	0800f6cd 	.word	0x0800f6cd
 800f640:	0800f6cd 	.word	0x0800f6cd
 800f644:	0800f6cd 	.word	0x0800f6cd
 800f648:	0800f6cd 	.word	0x0800f6cd
 800f64c:	0800f6cd 	.word	0x0800f6cd
 800f650:	0800f6cd 	.word	0x0800f6cd
 800f654:	0800f6cd 	.word	0x0800f6cd
 800f658:	0800f6b5 	.word	0x0800f6b5
 800f65c:	0800f6cd 	.word	0x0800f6cd
 800f660:	0800f6cd 	.word	0x0800f6cd
 800f664:	0800f6cd 	.word	0x0800f6cd
 800f668:	0800f6cd 	.word	0x0800f6cd
 800f66c:	0800f6cd 	.word	0x0800f6cd
 800f670:	0800f6cd 	.word	0x0800f6cd
 800f674:	0800f6cd 	.word	0x0800f6cd
 800f678:	0800f6bd 	.word	0x0800f6bd
 800f67c:	0800f6cd 	.word	0x0800f6cd
 800f680:	0800f6cd 	.word	0x0800f6cd
 800f684:	0800f6cd 	.word	0x0800f6cd
 800f688:	0800f6cd 	.word	0x0800f6cd
 800f68c:	0800f6cd 	.word	0x0800f6cd
 800f690:	0800f6cd 	.word	0x0800f6cd
 800f694:	0800f6cd 	.word	0x0800f6cd
 800f698:	0800f6c5 	.word	0x0800f6c5
 800f69c:	2301      	movs	r3, #1
 800f69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a2:	e0bc      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6aa:	e0b8      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6ac:	2308      	movs	r3, #8
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b2:	e0b4      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6b4:	2310      	movs	r3, #16
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ba:	e0b0      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6bc:	2320      	movs	r3, #32
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c2:	e0ac      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6c4:	2340      	movs	r3, #64	@ 0x40
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ca:	e0a8      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6cc:	2380      	movs	r3, #128	@ 0x80
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d2:	e0a4      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a8f      	ldr	r2, [pc, #572]	@ (800f918 <UART_SetConfig+0x6a0>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d130      	bne.n	800f740 <UART_SetConfig+0x4c8>
 800f6de:	4b8d      	ldr	r3, [pc, #564]	@ (800f914 <UART_SetConfig+0x69c>)
 800f6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6e2:	f003 0307 	and.w	r3, r3, #7
 800f6e6:	2b05      	cmp	r3, #5
 800f6e8:	d826      	bhi.n	800f738 <UART_SetConfig+0x4c0>
 800f6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f6f0 <UART_SetConfig+0x478>)
 800f6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f0:	0800f709 	.word	0x0800f709
 800f6f4:	0800f711 	.word	0x0800f711
 800f6f8:	0800f719 	.word	0x0800f719
 800f6fc:	0800f721 	.word	0x0800f721
 800f700:	0800f729 	.word	0x0800f729
 800f704:	0800f731 	.word	0x0800f731
 800f708:	2300      	movs	r3, #0
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e086      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f710:	2304      	movs	r3, #4
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e082      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f718:	2308      	movs	r3, #8
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e07e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f720:	2310      	movs	r3, #16
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e07a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f728:	2320      	movs	r3, #32
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e076      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f730:	2340      	movs	r3, #64	@ 0x40
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f736:	e072      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f738:	2380      	movs	r3, #128	@ 0x80
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73e:	e06e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a75      	ldr	r2, [pc, #468]	@ (800f91c <UART_SetConfig+0x6a4>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d130      	bne.n	800f7ac <UART_SetConfig+0x534>
 800f74a:	4b72      	ldr	r3, [pc, #456]	@ (800f914 <UART_SetConfig+0x69c>)
 800f74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f74e:	f003 0307 	and.w	r3, r3, #7
 800f752:	2b05      	cmp	r3, #5
 800f754:	d826      	bhi.n	800f7a4 <UART_SetConfig+0x52c>
 800f756:	a201      	add	r2, pc, #4	@ (adr r2, 800f75c <UART_SetConfig+0x4e4>)
 800f758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f75c:	0800f775 	.word	0x0800f775
 800f760:	0800f77d 	.word	0x0800f77d
 800f764:	0800f785 	.word	0x0800f785
 800f768:	0800f78d 	.word	0x0800f78d
 800f76c:	0800f795 	.word	0x0800f795
 800f770:	0800f79d 	.word	0x0800f79d
 800f774:	2300      	movs	r3, #0
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e050      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f77c:	2304      	movs	r3, #4
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e04c      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f784:	2308      	movs	r3, #8
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e048      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f78c:	2310      	movs	r3, #16
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e044      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f794:	2320      	movs	r3, #32
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e040      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f79c:	2340      	movs	r3, #64	@ 0x40
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e03c      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f7a4:	2380      	movs	r3, #128	@ 0x80
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7aa:	e038      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a5b      	ldr	r2, [pc, #364]	@ (800f920 <UART_SetConfig+0x6a8>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d130      	bne.n	800f818 <UART_SetConfig+0x5a0>
 800f7b6:	4b57      	ldr	r3, [pc, #348]	@ (800f914 <UART_SetConfig+0x69c>)
 800f7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7ba:	f003 0307 	and.w	r3, r3, #7
 800f7be:	2b05      	cmp	r3, #5
 800f7c0:	d826      	bhi.n	800f810 <UART_SetConfig+0x598>
 800f7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7c8 <UART_SetConfig+0x550>)
 800f7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c8:	0800f7e1 	.word	0x0800f7e1
 800f7cc:	0800f7e9 	.word	0x0800f7e9
 800f7d0:	0800f7f1 	.word	0x0800f7f1
 800f7d4:	0800f7f9 	.word	0x0800f7f9
 800f7d8:	0800f801 	.word	0x0800f801
 800f7dc:	0800f809 	.word	0x0800f809
 800f7e0:	2302      	movs	r3, #2
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e01a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f7e8:	2304      	movs	r3, #4
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e016      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f7f0:	2308      	movs	r3, #8
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e012      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f7f8:	2310      	movs	r3, #16
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e00e      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f800:	2320      	movs	r3, #32
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f806:	e00a      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f808:	2340      	movs	r3, #64	@ 0x40
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80e:	e006      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f810:	2380      	movs	r3, #128	@ 0x80
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f816:	e002      	b.n	800f81e <UART_SetConfig+0x5a6>
 800f818:	2380      	movs	r3, #128	@ 0x80
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a3f      	ldr	r2, [pc, #252]	@ (800f920 <UART_SetConfig+0x6a8>)
 800f824:	4293      	cmp	r3, r2
 800f826:	f040 80f8 	bne.w	800fa1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f82a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f82e:	2b20      	cmp	r3, #32
 800f830:	dc46      	bgt.n	800f8c0 <UART_SetConfig+0x648>
 800f832:	2b02      	cmp	r3, #2
 800f834:	f2c0 8082 	blt.w	800f93c <UART_SetConfig+0x6c4>
 800f838:	3b02      	subs	r3, #2
 800f83a:	2b1e      	cmp	r3, #30
 800f83c:	d87e      	bhi.n	800f93c <UART_SetConfig+0x6c4>
 800f83e:	a201      	add	r2, pc, #4	@ (adr r2, 800f844 <UART_SetConfig+0x5cc>)
 800f840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f844:	0800f8c7 	.word	0x0800f8c7
 800f848:	0800f93d 	.word	0x0800f93d
 800f84c:	0800f8cf 	.word	0x0800f8cf
 800f850:	0800f93d 	.word	0x0800f93d
 800f854:	0800f93d 	.word	0x0800f93d
 800f858:	0800f93d 	.word	0x0800f93d
 800f85c:	0800f8df 	.word	0x0800f8df
 800f860:	0800f93d 	.word	0x0800f93d
 800f864:	0800f93d 	.word	0x0800f93d
 800f868:	0800f93d 	.word	0x0800f93d
 800f86c:	0800f93d 	.word	0x0800f93d
 800f870:	0800f93d 	.word	0x0800f93d
 800f874:	0800f93d 	.word	0x0800f93d
 800f878:	0800f93d 	.word	0x0800f93d
 800f87c:	0800f8ef 	.word	0x0800f8ef
 800f880:	0800f93d 	.word	0x0800f93d
 800f884:	0800f93d 	.word	0x0800f93d
 800f888:	0800f93d 	.word	0x0800f93d
 800f88c:	0800f93d 	.word	0x0800f93d
 800f890:	0800f93d 	.word	0x0800f93d
 800f894:	0800f93d 	.word	0x0800f93d
 800f898:	0800f93d 	.word	0x0800f93d
 800f89c:	0800f93d 	.word	0x0800f93d
 800f8a0:	0800f93d 	.word	0x0800f93d
 800f8a4:	0800f93d 	.word	0x0800f93d
 800f8a8:	0800f93d 	.word	0x0800f93d
 800f8ac:	0800f93d 	.word	0x0800f93d
 800f8b0:	0800f93d 	.word	0x0800f93d
 800f8b4:	0800f93d 	.word	0x0800f93d
 800f8b8:	0800f93d 	.word	0x0800f93d
 800f8bc:	0800f92f 	.word	0x0800f92f
 800f8c0:	2b40      	cmp	r3, #64	@ 0x40
 800f8c2:	d037      	beq.n	800f934 <UART_SetConfig+0x6bc>
 800f8c4:	e03a      	b.n	800f93c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f8c6:	f7fe f87d 	bl	800d9c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f8ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8cc:	e03c      	b.n	800f948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe f88c 	bl	800d9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8dc:	e034      	b.n	800f948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8de:	f107 0318 	add.w	r3, r7, #24
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe f9d8 	bl	800dc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8ec:	e02c      	b.n	800f948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8ee:	4b09      	ldr	r3, [pc, #36]	@ (800f914 <UART_SetConfig+0x69c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f003 0320 	and.w	r3, r3, #32
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d016      	beq.n	800f928 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8fa:	4b06      	ldr	r3, [pc, #24]	@ (800f914 <UART_SetConfig+0x69c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	08db      	lsrs	r3, r3, #3
 800f900:	f003 0303 	and.w	r3, r3, #3
 800f904:	4a07      	ldr	r2, [pc, #28]	@ (800f924 <UART_SetConfig+0x6ac>)
 800f906:	fa22 f303 	lsr.w	r3, r2, r3
 800f90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f90c:	e01c      	b.n	800f948 <UART_SetConfig+0x6d0>
 800f90e:	bf00      	nop
 800f910:	40011400 	.word	0x40011400
 800f914:	58024400 	.word	0x58024400
 800f918:	40007800 	.word	0x40007800
 800f91c:	40007c00 	.word	0x40007c00
 800f920:	58000c00 	.word	0x58000c00
 800f924:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f928:	4b9d      	ldr	r3, [pc, #628]	@ (800fba0 <UART_SetConfig+0x928>)
 800f92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f92c:	e00c      	b.n	800f948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f92e:	4b9d      	ldr	r3, [pc, #628]	@ (800fba4 <UART_SetConfig+0x92c>)
 800f930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f932:	e009      	b.n	800f948 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f93a:	e005      	b.n	800f948 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f93c:	2300      	movs	r3, #0
 800f93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f946:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f000 81de 	beq.w	800fd0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f954:	4a94      	ldr	r2, [pc, #592]	@ (800fba8 <UART_SetConfig+0x930>)
 800f956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f95a:	461a      	mov	r2, r3
 800f95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f95e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f962:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	4613      	mov	r3, r2
 800f96a:	005b      	lsls	r3, r3, #1
 800f96c:	4413      	add	r3, r2
 800f96e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f970:	429a      	cmp	r2, r3
 800f972:	d305      	bcc.n	800f980 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f97a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d903      	bls.n	800f988 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f980:	2301      	movs	r3, #1
 800f982:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f986:	e1c1      	b.n	800fd0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f98a:	2200      	movs	r2, #0
 800f98c:	60bb      	str	r3, [r7, #8]
 800f98e:	60fa      	str	r2, [r7, #12]
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f994:	4a84      	ldr	r2, [pc, #528]	@ (800fba8 <UART_SetConfig+0x930>)
 800f996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	2200      	movs	r2, #0
 800f99e:	603b      	str	r3, [r7, #0]
 800f9a0:	607a      	str	r2, [r7, #4]
 800f9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f9aa:	f7f0 ffbb 	bl	8000924 <__aeabi_uldivmod>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	f04f 0200 	mov.w	r2, #0
 800f9ba:	f04f 0300 	mov.w	r3, #0
 800f9be:	020b      	lsls	r3, r1, #8
 800f9c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f9c4:	0202      	lsls	r2, r0, #8
 800f9c6:	6979      	ldr	r1, [r7, #20]
 800f9c8:	6849      	ldr	r1, [r1, #4]
 800f9ca:	0849      	lsrs	r1, r1, #1
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	460c      	mov	r4, r1
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	eb12 0804 	adds.w	r8, r2, r4
 800f9d6:	eb43 0905 	adc.w	r9, r3, r5
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	469a      	mov	sl, r3
 800f9e2:	4693      	mov	fp, r2
 800f9e4:	4652      	mov	r2, sl
 800f9e6:	465b      	mov	r3, fp
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	f7f0 ff9a 	bl	8000924 <__aeabi_uldivmod>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9fe:	d308      	bcc.n	800fa12 <UART_SetConfig+0x79a>
 800fa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa06:	d204      	bcs.n	800fa12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa0e:	60da      	str	r2, [r3, #12]
 800fa10:	e17c      	b.n	800fd0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fa12:	2301      	movs	r3, #1
 800fa14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fa18:	e178      	b.n	800fd0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	69db      	ldr	r3, [r3, #28]
 800fa1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa22:	f040 80c5 	bne.w	800fbb0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fa26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	2b20      	cmp	r3, #32
 800fa2c:	dc48      	bgt.n	800fac0 <UART_SetConfig+0x848>
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	db7b      	blt.n	800fb2a <UART_SetConfig+0x8b2>
 800fa32:	2b20      	cmp	r3, #32
 800fa34:	d879      	bhi.n	800fb2a <UART_SetConfig+0x8b2>
 800fa36:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <UART_SetConfig+0x7c4>)
 800fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3c:	0800fac7 	.word	0x0800fac7
 800fa40:	0800facf 	.word	0x0800facf
 800fa44:	0800fb2b 	.word	0x0800fb2b
 800fa48:	0800fb2b 	.word	0x0800fb2b
 800fa4c:	0800fad7 	.word	0x0800fad7
 800fa50:	0800fb2b 	.word	0x0800fb2b
 800fa54:	0800fb2b 	.word	0x0800fb2b
 800fa58:	0800fb2b 	.word	0x0800fb2b
 800fa5c:	0800fae7 	.word	0x0800fae7
 800fa60:	0800fb2b 	.word	0x0800fb2b
 800fa64:	0800fb2b 	.word	0x0800fb2b
 800fa68:	0800fb2b 	.word	0x0800fb2b
 800fa6c:	0800fb2b 	.word	0x0800fb2b
 800fa70:	0800fb2b 	.word	0x0800fb2b
 800fa74:	0800fb2b 	.word	0x0800fb2b
 800fa78:	0800fb2b 	.word	0x0800fb2b
 800fa7c:	0800faf7 	.word	0x0800faf7
 800fa80:	0800fb2b 	.word	0x0800fb2b
 800fa84:	0800fb2b 	.word	0x0800fb2b
 800fa88:	0800fb2b 	.word	0x0800fb2b
 800fa8c:	0800fb2b 	.word	0x0800fb2b
 800fa90:	0800fb2b 	.word	0x0800fb2b
 800fa94:	0800fb2b 	.word	0x0800fb2b
 800fa98:	0800fb2b 	.word	0x0800fb2b
 800fa9c:	0800fb2b 	.word	0x0800fb2b
 800faa0:	0800fb2b 	.word	0x0800fb2b
 800faa4:	0800fb2b 	.word	0x0800fb2b
 800faa8:	0800fb2b 	.word	0x0800fb2b
 800faac:	0800fb2b 	.word	0x0800fb2b
 800fab0:	0800fb2b 	.word	0x0800fb2b
 800fab4:	0800fb2b 	.word	0x0800fb2b
 800fab8:	0800fb2b 	.word	0x0800fb2b
 800fabc:	0800fb1d 	.word	0x0800fb1d
 800fac0:	2b40      	cmp	r3, #64	@ 0x40
 800fac2:	d02e      	beq.n	800fb22 <UART_SetConfig+0x8aa>
 800fac4:	e031      	b.n	800fb2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fac6:	f7fc fd05 	bl	800c4d4 <HAL_RCC_GetPCLK1Freq>
 800faca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800facc:	e033      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800face:	f7fc fd17 	bl	800c500 <HAL_RCC_GetPCLK2Freq>
 800fad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fad4:	e02f      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fd ff88 	bl	800d9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fae4:	e027      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fae6:	f107 0318 	add.w	r3, r7, #24
 800faea:	4618      	mov	r0, r3
 800faec:	f7fe f8d4 	bl	800dc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faf4:	e01f      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faf6:	4b2d      	ldr	r3, [pc, #180]	@ (800fbac <UART_SetConfig+0x934>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f003 0320 	and.w	r3, r3, #32
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d009      	beq.n	800fb16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb02:	4b2a      	ldr	r3, [pc, #168]	@ (800fbac <UART_SetConfig+0x934>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	08db      	lsrs	r3, r3, #3
 800fb08:	f003 0303 	and.w	r3, r3, #3
 800fb0c:	4a24      	ldr	r2, [pc, #144]	@ (800fba0 <UART_SetConfig+0x928>)
 800fb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb14:	e00f      	b.n	800fb36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb16:	4b22      	ldr	r3, [pc, #136]	@ (800fba0 <UART_SetConfig+0x928>)
 800fb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb1a:	e00c      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb1c:	4b21      	ldr	r3, [pc, #132]	@ (800fba4 <UART_SetConfig+0x92c>)
 800fb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb20:	e009      	b.n	800fb36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb28:	e005      	b.n	800fb36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 80e7 	beq.w	800fd0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb42:	4a19      	ldr	r2, [pc, #100]	@ (800fba8 <UART_SetConfig+0x930>)
 800fb44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb48:	461a      	mov	r2, r3
 800fb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb50:	005a      	lsls	r2, r3, #1
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	085b      	lsrs	r3, r3, #1
 800fb58:	441a      	add	r2, r3
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb66:	2b0f      	cmp	r3, #15
 800fb68:	d916      	bls.n	800fb98 <UART_SetConfig+0x920>
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb70:	d212      	bcs.n	800fb98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	f023 030f 	bic.w	r3, r3, #15
 800fb7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	085b      	lsrs	r3, r3, #1
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fb94:	60da      	str	r2, [r3, #12]
 800fb96:	e0b9      	b.n	800fd0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb9e:	e0b5      	b.n	800fd0c <UART_SetConfig+0xa94>
 800fba0:	03d09000 	.word	0x03d09000
 800fba4:	003d0900 	.word	0x003d0900
 800fba8:	08017f50 	.word	0x08017f50
 800fbac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fbb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbb4:	2b20      	cmp	r3, #32
 800fbb6:	dc49      	bgt.n	800fc4c <UART_SetConfig+0x9d4>
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	db7c      	blt.n	800fcb6 <UART_SetConfig+0xa3e>
 800fbbc:	2b20      	cmp	r3, #32
 800fbbe:	d87a      	bhi.n	800fcb6 <UART_SetConfig+0xa3e>
 800fbc0:	a201      	add	r2, pc, #4	@ (adr r2, 800fbc8 <UART_SetConfig+0x950>)
 800fbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc6:	bf00      	nop
 800fbc8:	0800fc53 	.word	0x0800fc53
 800fbcc:	0800fc5b 	.word	0x0800fc5b
 800fbd0:	0800fcb7 	.word	0x0800fcb7
 800fbd4:	0800fcb7 	.word	0x0800fcb7
 800fbd8:	0800fc63 	.word	0x0800fc63
 800fbdc:	0800fcb7 	.word	0x0800fcb7
 800fbe0:	0800fcb7 	.word	0x0800fcb7
 800fbe4:	0800fcb7 	.word	0x0800fcb7
 800fbe8:	0800fc73 	.word	0x0800fc73
 800fbec:	0800fcb7 	.word	0x0800fcb7
 800fbf0:	0800fcb7 	.word	0x0800fcb7
 800fbf4:	0800fcb7 	.word	0x0800fcb7
 800fbf8:	0800fcb7 	.word	0x0800fcb7
 800fbfc:	0800fcb7 	.word	0x0800fcb7
 800fc00:	0800fcb7 	.word	0x0800fcb7
 800fc04:	0800fcb7 	.word	0x0800fcb7
 800fc08:	0800fc83 	.word	0x0800fc83
 800fc0c:	0800fcb7 	.word	0x0800fcb7
 800fc10:	0800fcb7 	.word	0x0800fcb7
 800fc14:	0800fcb7 	.word	0x0800fcb7
 800fc18:	0800fcb7 	.word	0x0800fcb7
 800fc1c:	0800fcb7 	.word	0x0800fcb7
 800fc20:	0800fcb7 	.word	0x0800fcb7
 800fc24:	0800fcb7 	.word	0x0800fcb7
 800fc28:	0800fcb7 	.word	0x0800fcb7
 800fc2c:	0800fcb7 	.word	0x0800fcb7
 800fc30:	0800fcb7 	.word	0x0800fcb7
 800fc34:	0800fcb7 	.word	0x0800fcb7
 800fc38:	0800fcb7 	.word	0x0800fcb7
 800fc3c:	0800fcb7 	.word	0x0800fcb7
 800fc40:	0800fcb7 	.word	0x0800fcb7
 800fc44:	0800fcb7 	.word	0x0800fcb7
 800fc48:	0800fca9 	.word	0x0800fca9
 800fc4c:	2b40      	cmp	r3, #64	@ 0x40
 800fc4e:	d02e      	beq.n	800fcae <UART_SetConfig+0xa36>
 800fc50:	e031      	b.n	800fcb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc52:	f7fc fc3f 	bl	800c4d4 <HAL_RCC_GetPCLK1Freq>
 800fc56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc58:	e033      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc5a:	f7fc fc51 	bl	800c500 <HAL_RCC_GetPCLK2Freq>
 800fc5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc60:	e02f      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fd fec2 	bl	800d9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc70:	e027      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc72:	f107 0318 	add.w	r3, r7, #24
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe f80e 	bl	800dc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc80:	e01f      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc82:	4b2d      	ldr	r3, [pc, #180]	@ (800fd38 <UART_SetConfig+0xac0>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 0320 	and.w	r3, r3, #32
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d009      	beq.n	800fca2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc8e:	4b2a      	ldr	r3, [pc, #168]	@ (800fd38 <UART_SetConfig+0xac0>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	08db      	lsrs	r3, r3, #3
 800fc94:	f003 0303 	and.w	r3, r3, #3
 800fc98:	4a28      	ldr	r2, [pc, #160]	@ (800fd3c <UART_SetConfig+0xac4>)
 800fc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fca0:	e00f      	b.n	800fcc2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fca2:	4b26      	ldr	r3, [pc, #152]	@ (800fd3c <UART_SetConfig+0xac4>)
 800fca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fca6:	e00c      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fca8:	4b25      	ldr	r3, [pc, #148]	@ (800fd40 <UART_SetConfig+0xac8>)
 800fcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcac:	e009      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcb4:	e005      	b.n	800fcc2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fcc0:	bf00      	nop
    }

    if (pclk != 0U)
 800fcc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d021      	beq.n	800fd0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fccc:	4a1d      	ldr	r2, [pc, #116]	@ (800fd44 <UART_SetConfig+0xacc>)
 800fcce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	085b      	lsrs	r3, r3, #1
 800fce0:	441a      	add	r2, r3
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcee:	2b0f      	cmp	r3, #15
 800fcf0:	d909      	bls.n	800fd06 <UART_SetConfig+0xa8e>
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fcf8:	d205      	bcs.n	800fd06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	e002      	b.n	800fd0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	2200      	movs	r2, #0
 800fd26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fd28:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3748      	adds	r7, #72	@ 0x48
 800fd30:	46bd      	mov	sp, r7
 800fd32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd36:	bf00      	nop
 800fd38:	58024400 	.word	0x58024400
 800fd3c:	03d09000 	.word	0x03d09000
 800fd40:	003d0900 	.word	0x003d0900
 800fd44:	08017f50 	.word	0x08017f50

0800fd48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd54:	f003 0308 	and.w	r3, r3, #8
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00a      	beq.n	800fd72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd76:	f003 0301 	and.w	r3, r3, #1
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00a      	beq.n	800fd94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	430a      	orrs	r2, r1
 800fd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd98:	f003 0302 	and.w	r3, r3, #2
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00a      	beq.n	800fdb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	430a      	orrs	r2, r1
 800fdb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdba:	f003 0304 	and.w	r3, r3, #4
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d00a      	beq.n	800fdd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	430a      	orrs	r2, r1
 800fdd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fddc:	f003 0310 	and.w	r3, r3, #16
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00a      	beq.n	800fdfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfe:	f003 0320 	and.w	r3, r3, #32
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00a      	beq.n	800fe1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	430a      	orrs	r2, r1
 800fe1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d01a      	beq.n	800fe5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	430a      	orrs	r2, r1
 800fe3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe46:	d10a      	bne.n	800fe5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	430a      	orrs	r2, r1
 800fe5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00a      	beq.n	800fe80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	430a      	orrs	r2, r1
 800fe7e:	605a      	str	r2, [r3, #4]
  }
}
 800fe80:	bf00      	nop
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b098      	sub	sp, #96	@ 0x60
 800fe90:	af02      	add	r7, sp, #8
 800fe92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe9c:	f7f6 fde2 	bl	8006a64 <HAL_GetTick>
 800fea0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f003 0308 	and.w	r3, r3, #8
 800feac:	2b08      	cmp	r3, #8
 800feae:	d12f      	bne.n	800ff10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800feb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800feb4:	9300      	str	r3, [sp, #0]
 800feb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feb8:	2200      	movs	r2, #0
 800feba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 f88e 	bl	800ffe0 <UART_WaitOnFlagUntilTimeout>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d022      	beq.n	800ff10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fede:	653b      	str	r3, [r7, #80]	@ 0x50
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fee8:	647b      	str	r3, [r7, #68]	@ 0x44
 800feea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800feee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fef0:	e841 2300 	strex	r3, r2, [r1]
 800fef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e6      	bne.n	800feca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2220      	movs	r2, #32
 800ff00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e063      	b.n	800ffd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 0304 	and.w	r3, r3, #4
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	d149      	bne.n	800ffb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff26:	2200      	movs	r2, #0
 800ff28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f857 	bl	800ffe0 <UART_WaitOnFlagUntilTimeout>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d03c      	beq.n	800ffb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff40:	e853 3f00 	ldrex	r3, [r3]
 800ff44:	623b      	str	r3, [r7, #32]
   return(result);
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff5e:	e841 2300 	strex	r3, r2, [r1]
 800ff62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1e6      	bne.n	800ff38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	3308      	adds	r3, #8
 800ff70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	e853 3f00 	ldrex	r3, [r3]
 800ff78:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f023 0301 	bic.w	r3, r3, #1
 800ff80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	3308      	adds	r3, #8
 800ff88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff8a:	61fa      	str	r2, [r7, #28]
 800ff8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8e:	69b9      	ldr	r1, [r7, #24]
 800ff90:	69fa      	ldr	r2, [r7, #28]
 800ff92:	e841 2300 	strex	r3, r2, [r1]
 800ff96:	617b      	str	r3, [r7, #20]
   return(result);
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d1e5      	bne.n	800ff6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2220      	movs	r2, #32
 800ffa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffae:	2303      	movs	r3, #3
 800ffb0:	e012      	b.n	800ffd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2220      	movs	r2, #32
 800ffbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3758      	adds	r7, #88	@ 0x58
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	603b      	str	r3, [r7, #0]
 800ffec:	4613      	mov	r3, r2
 800ffee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fff0:	e04f      	b.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff8:	d04b      	beq.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fffa:	f7f6 fd33 	bl	8006a64 <HAL_GetTick>
 800fffe:	4602      	mov	r2, r0
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	1ad3      	subs	r3, r2, r3
 8010004:	69ba      	ldr	r2, [r7, #24]
 8010006:	429a      	cmp	r2, r3
 8010008:	d302      	bcc.n	8010010 <UART_WaitOnFlagUntilTimeout+0x30>
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d101      	bne.n	8010014 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010010:	2303      	movs	r3, #3
 8010012:	e04e      	b.n	80100b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f003 0304 	and.w	r3, r3, #4
 801001e:	2b00      	cmp	r3, #0
 8010020:	d037      	beq.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2b80      	cmp	r3, #128	@ 0x80
 8010026:	d034      	beq.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2b40      	cmp	r3, #64	@ 0x40
 801002c:	d031      	beq.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	f003 0308 	and.w	r3, r3, #8
 8010038:	2b08      	cmp	r3, #8
 801003a:	d110      	bne.n	801005e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2208      	movs	r2, #8
 8010042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 f921 	bl	801028c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2208      	movs	r2, #8
 801004e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	e029      	b.n	80100b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801006c:	d111      	bne.n	8010092 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010078:	68f8      	ldr	r0, [r7, #12]
 801007a:	f000 f907 	bl	801028c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2220      	movs	r2, #32
 8010082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801008e:	2303      	movs	r3, #3
 8010090:	e00f      	b.n	80100b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	69da      	ldr	r2, [r3, #28]
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	4013      	ands	r3, r2
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	429a      	cmp	r2, r3
 80100a0:	bf0c      	ite	eq
 80100a2:	2301      	moveq	r3, #1
 80100a4:	2300      	movne	r3, #0
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	461a      	mov	r2, r3
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d0a0      	beq.n	800fff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80100b0:	2300      	movs	r3, #0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
	...

080100bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b096      	sub	sp, #88	@ 0x58
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	4613      	mov	r3, r2
 80100c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	88fa      	ldrh	r2, [r7, #6]
 80100d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2222      	movs	r2, #34	@ 0x22
 80100e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d02d      	beq.n	801014e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100f8:	4a40      	ldr	r2, [pc, #256]	@ (80101fc <UART_Start_Receive_DMA+0x140>)
 80100fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010102:	4a3f      	ldr	r2, [pc, #252]	@ (8010200 <UART_Start_Receive_DMA+0x144>)
 8010104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801010c:	4a3d      	ldr	r2, [pc, #244]	@ (8010204 <UART_Start_Receive_DMA+0x148>)
 801010e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010116:	2200      	movs	r2, #0
 8010118:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	3324      	adds	r3, #36	@ 0x24
 8010126:	4619      	mov	r1, r3
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801012c:	461a      	mov	r2, r3
 801012e:	88fb      	ldrh	r3, [r7, #6]
 8010130:	f7f7 fb3e 	bl	80077b0 <HAL_DMA_Start_IT>
 8010134:	4603      	mov	r3, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d009      	beq.n	801014e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2210      	movs	r2, #16
 801013e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2220      	movs	r2, #32
 8010146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801014a:	2301      	movs	r3, #1
 801014c:	e051      	b.n	80101f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d018      	beq.n	8010188 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801015e:	e853 3f00 	ldrex	r3, [r3]
 8010162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801016a:	657b      	str	r3, [r7, #84]	@ 0x54
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010176:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010178:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801017a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801017c:	e841 2300 	strex	r3, r2, [r1]
 8010180:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1e6      	bne.n	8010156 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	3308      	adds	r3, #8
 801018e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010192:	e853 3f00 	ldrex	r3, [r3]
 8010196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019a:	f043 0301 	orr.w	r3, r3, #1
 801019e:	653b      	str	r3, [r7, #80]	@ 0x50
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	3308      	adds	r3, #8
 80101a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80101a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80101aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101b0:	e841 2300 	strex	r3, r2, [r1]
 80101b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1e5      	bne.n	8010188 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	3308      	adds	r3, #8
 80101c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	613b      	str	r3, [r7, #16]
   return(result);
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3308      	adds	r3, #8
 80101da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80101dc:	623a      	str	r2, [r7, #32]
 80101de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	69f9      	ldr	r1, [r7, #28]
 80101e2:	6a3a      	ldr	r2, [r7, #32]
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e5      	bne.n	80101bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80101f0:	2300      	movs	r3, #0
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3758      	adds	r7, #88	@ 0x58
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	0801040b 	.word	0x0801040b
 8010200:	08010533 	.word	0x08010533
 8010204:	08010571 	.word	0x08010571

08010208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010208:	b480      	push	{r7}
 801020a:	b08f      	sub	sp, #60	@ 0x3c
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	e853 3f00 	ldrex	r3, [r3]
 801021c:	61fb      	str	r3, [r7, #28]
   return(result);
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010224:	637b      	str	r3, [r7, #52]	@ 0x34
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	461a      	mov	r2, r3
 801022c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801022e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010230:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010236:	e841 2300 	strex	r3, r2, [r1]
 801023a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801023c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1e6      	bne.n	8010210 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3308      	adds	r3, #8
 8010248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	e853 3f00 	ldrex	r3, [r3]
 8010250:	60bb      	str	r3, [r7, #8]
   return(result);
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010258:	633b      	str	r3, [r7, #48]	@ 0x30
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3308      	adds	r3, #8
 8010260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010262:	61ba      	str	r2, [r7, #24]
 8010264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010266:	6979      	ldr	r1, [r7, #20]
 8010268:	69ba      	ldr	r2, [r7, #24]
 801026a:	e841 2300 	strex	r3, r2, [r1]
 801026e:	613b      	str	r3, [r7, #16]
   return(result);
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d1e5      	bne.n	8010242 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2220      	movs	r2, #32
 801027a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801027e:	bf00      	nop
 8010280:	373c      	adds	r7, #60	@ 0x3c
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
	...

0801028c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801028c:	b480      	push	{r7}
 801028e:	b095      	sub	sp, #84	@ 0x54
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801029a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801029c:	e853 3f00 	ldrex	r3, [r3]
 80102a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80102a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	461a      	mov	r2, r3
 80102b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80102b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102ba:	e841 2300 	strex	r3, r2, [r1]
 80102be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1e6      	bne.n	8010294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3308      	adds	r3, #8
 80102cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	e853 3f00 	ldrex	r3, [r3]
 80102d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80102d6:	69fa      	ldr	r2, [r7, #28]
 80102d8:	4b1e      	ldr	r3, [pc, #120]	@ (8010354 <UART_EndRxTransfer+0xc8>)
 80102da:	4013      	ands	r3, r2
 80102dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	3308      	adds	r3, #8
 80102e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102ee:	e841 2300 	strex	r3, r2, [r1]
 80102f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1e5      	bne.n	80102c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d118      	bne.n	8010334 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	e853 3f00 	ldrex	r3, [r3]
 801030e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	f023 0310 	bic.w	r3, r3, #16
 8010316:	647b      	str	r3, [r7, #68]	@ 0x44
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	461a      	mov	r2, r3
 801031e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010320:	61bb      	str	r3, [r7, #24]
 8010322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010324:	6979      	ldr	r1, [r7, #20]
 8010326:	69ba      	ldr	r2, [r7, #24]
 8010328:	e841 2300 	strex	r3, r2, [r1]
 801032c:	613b      	str	r3, [r7, #16]
   return(result);
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1e6      	bne.n	8010302 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2220      	movs	r2, #32
 8010338:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010348:	bf00      	nop
 801034a:	3754      	adds	r7, #84	@ 0x54
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	effffffe 	.word	0xeffffffe

08010358 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b090      	sub	sp, #64	@ 0x40
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010364:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	69db      	ldr	r3, [r3, #28]
 801036a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801036e:	d037      	beq.n	80103e0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010372:	2200      	movs	r2, #0
 8010374:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3308      	adds	r3, #8
 801037e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010382:	e853 3f00 	ldrex	r3, [r3]
 8010386:	623b      	str	r3, [r7, #32]
   return(result);
 8010388:	6a3b      	ldr	r3, [r7, #32]
 801038a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801038e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	3308      	adds	r3, #8
 8010396:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010398:	633a      	str	r2, [r7, #48]	@ 0x30
 801039a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801039e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a0:	e841 2300 	strex	r3, r2, [r1]
 80103a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1e5      	bne.n	8010378 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	e853 3f00 	ldrex	r3, [r3]
 80103b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80103c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ca:	61fb      	str	r3, [r7, #28]
 80103cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ce:	69b9      	ldr	r1, [r7, #24]
 80103d0:	69fa      	ldr	r2, [r7, #28]
 80103d2:	e841 2300 	strex	r3, r2, [r1]
 80103d6:	617b      	str	r3, [r7, #20]
   return(result);
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e6      	bne.n	80103ac <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80103de:	e002      	b.n	80103e6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80103e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80103e2:	f7f0 fe7b 	bl	80010dc <HAL_UART_TxCpltCallback>
}
 80103e6:	bf00      	nop
 80103e8:	3740      	adds	r7, #64	@ 0x40
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}

080103ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7fe ff27 	bl	800f250 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010402:	bf00      	nop
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b09c      	sub	sp, #112	@ 0x70
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010416:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	69db      	ldr	r3, [r3, #28]
 801041c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010420:	d071      	beq.n	8010506 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010424:	2200      	movs	r2, #0
 8010426:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801042a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010432:	e853 3f00 	ldrex	r3, [r3]
 8010436:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801043a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801043e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	461a      	mov	r2, r3
 8010446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010448:	65bb      	str	r3, [r7, #88]	@ 0x58
 801044a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801044e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010450:	e841 2300 	strex	r3, r2, [r1]
 8010454:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1e6      	bne.n	801042a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801045c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3308      	adds	r3, #8
 8010462:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010466:	e853 3f00 	ldrex	r3, [r3]
 801046a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801046c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801046e:	f023 0301 	bic.w	r3, r3, #1
 8010472:	667b      	str	r3, [r7, #100]	@ 0x64
 8010474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801047c:	647a      	str	r2, [r7, #68]	@ 0x44
 801047e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010480:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010484:	e841 2300 	strex	r3, r2, [r1]
 8010488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801048a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e5      	bne.n	801045c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3308      	adds	r3, #8
 8010496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049a:	e853 3f00 	ldrex	r3, [r3]
 801049e:	623b      	str	r3, [r7, #32]
   return(result);
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80104a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3308      	adds	r3, #8
 80104ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80104b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80104b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104b8:	e841 2300 	strex	r3, r2, [r1]
 80104bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80104be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d1e5      	bne.n	8010490 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104c6:	2220      	movs	r2, #32
 80104c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d118      	bne.n	8010506 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	e853 3f00 	ldrex	r3, [r3]
 80104e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f023 0310 	bic.w	r3, r3, #16
 80104e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80104ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104f2:	61fb      	str	r3, [r7, #28]
 80104f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f6:	69b9      	ldr	r1, [r7, #24]
 80104f8:	69fa      	ldr	r2, [r7, #28]
 80104fa:	e841 2300 	strex	r3, r2, [r1]
 80104fe:	617b      	str	r3, [r7, #20]
   return(result);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1e6      	bne.n	80104d4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010508:	2200      	movs	r2, #0
 801050a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801050c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801050e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010510:	2b01      	cmp	r3, #1
 8010512:	d107      	bne.n	8010524 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801051a:	4619      	mov	r1, r3
 801051c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801051e:	f7f0 fd2f 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010522:	e002      	b.n	801052a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010524:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010526:	f7f0 fd49 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 801052a:	bf00      	nop
 801052c:	3770      	adds	r7, #112	@ 0x70
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b084      	sub	sp, #16
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801053e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2201      	movs	r2, #1
 8010544:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801054a:	2b01      	cmp	r3, #1
 801054c:	d109      	bne.n	8010562 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010554:	085b      	lsrs	r3, r3, #1
 8010556:	b29b      	uxth	r3, r3
 8010558:	4619      	mov	r1, r3
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f7f0 fd10 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010560:	e002      	b.n	8010568 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7fe fe7e 	bl	800f264 <HAL_UART_RxHalfCpltCallback>
}
 8010568:	bf00      	nop
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801057c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010584:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801058c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010598:	2b80      	cmp	r3, #128	@ 0x80
 801059a:	d109      	bne.n	80105b0 <UART_DMAError+0x40>
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	2b21      	cmp	r3, #33	@ 0x21
 80105a0:	d106      	bne.n	80105b0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80105aa:	6978      	ldr	r0, [r7, #20]
 80105ac:	f7ff fe2c 	bl	8010208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105ba:	2b40      	cmp	r3, #64	@ 0x40
 80105bc:	d109      	bne.n	80105d2 <UART_DMAError+0x62>
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2b22      	cmp	r3, #34	@ 0x22
 80105c2:	d106      	bne.n	80105d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80105cc:	6978      	ldr	r0, [r7, #20]
 80105ce:	f7ff fe5d 	bl	801028c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105d8:	f043 0210 	orr.w	r2, r3, #16
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105e2:	6978      	ldr	r0, [r7, #20]
 80105e4:	f7f0 fd04 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105e8:	bf00      	nop
 80105ea:	3718      	adds	r7, #24
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2200      	movs	r2, #0
 8010602:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	f7f0 fcf2 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801060c:	bf00      	nop
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b088      	sub	sp, #32
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	e853 3f00 	ldrex	r3, [r3]
 8010628:	60bb      	str	r3, [r7, #8]
   return(result);
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	461a      	mov	r2, r3
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	61bb      	str	r3, [r7, #24]
 801063c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063e:	6979      	ldr	r1, [r7, #20]
 8010640:	69ba      	ldr	r2, [r7, #24]
 8010642:	e841 2300 	strex	r3, r2, [r1]
 8010646:	613b      	str	r3, [r7, #16]
   return(result);
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1e6      	bne.n	801061c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2220      	movs	r2, #32
 8010652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7f0 fd3d 	bl	80010dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010662:	bf00      	nop
 8010664:	3720      	adds	r7, #32
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010672:	bf00      	nop
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801067e:	b480      	push	{r7}
 8010680:	b083      	sub	sp, #12
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010686:	bf00      	nop
 8010688:	370c      	adds	r7, #12
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010692:	b480      	push	{r7}
 8010694:	b083      	sub	sp, #12
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801069a:	bf00      	nop
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b084      	sub	sp, #16
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d101      	bne.n	80106bc <HAL_UARTEx_EnableFifoMode+0x16>
 80106b8:	2302      	movs	r3, #2
 80106ba:	e02b      	b.n	8010714 <HAL_UARTEx_EnableFifoMode+0x6e>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2201      	movs	r2, #1
 80106c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2224      	movs	r2, #36	@ 0x24
 80106c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f022 0201 	bic.w	r2, r2, #1
 80106e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80106ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80106f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 f8dd 	bl	80108bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2220      	movs	r2, #32
 8010706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2200      	movs	r2, #0
 801070e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801072c:	2b01      	cmp	r3, #1
 801072e:	d101      	bne.n	8010734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010730:	2302      	movs	r3, #2
 8010732:	e02d      	b.n	8010790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2224      	movs	r2, #36	@ 0x24
 8010740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f022 0201 	bic.w	r2, r2, #1
 801075a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	683a      	ldr	r2, [r7, #0]
 801076c:	430a      	orrs	r2, r1
 801076e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 f8a3 	bl	80108bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2220      	movs	r2, #32
 8010782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d101      	bne.n	80107b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e02d      	b.n	801080c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2224      	movs	r2, #36	@ 0x24
 80107bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f022 0201 	bic.w	r2, r2, #1
 80107d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	689b      	ldr	r3, [r3, #8]
 80107de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	430a      	orrs	r2, r1
 80107ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f000 f865 	bl	80108bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68fa      	ldr	r2, [r7, #12]
 80107f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2220      	movs	r2, #32
 80107fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b08c      	sub	sp, #48	@ 0x30
 8010818:	af00      	add	r7, sp, #0
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	4613      	mov	r3, r2
 8010820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010828:	2b20      	cmp	r3, #32
 801082a:	d142      	bne.n	80108b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010832:	88fb      	ldrh	r3, [r7, #6]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d101      	bne.n	801083c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010838:	2301      	movs	r3, #1
 801083a:	e03b      	b.n	80108b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2201      	movs	r2, #1
 8010840:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2200      	movs	r2, #0
 8010846:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010848:	88fb      	ldrh	r3, [r7, #6]
 801084a:	461a      	mov	r2, r3
 801084c:	68b9      	ldr	r1, [r7, #8]
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7ff fc34 	bl	80100bc <UART_Start_Receive_DMA>
 8010854:	4603      	mov	r3, r0
 8010856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801085a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801085e:	2b00      	cmp	r3, #0
 8010860:	d124      	bne.n	80108ac <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010866:	2b01      	cmp	r3, #1
 8010868:	d11d      	bne.n	80108a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2210      	movs	r2, #16
 8010870:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	e853 3f00 	ldrex	r3, [r3]
 801087e:	617b      	str	r3, [r7, #20]
   return(result);
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	f043 0310 	orr.w	r3, r3, #16
 8010886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	461a      	mov	r2, r3
 801088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010890:	627b      	str	r3, [r7, #36]	@ 0x24
 8010892:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010894:	6a39      	ldr	r1, [r7, #32]
 8010896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010898:	e841 2300 	strex	r3, r2, [r1]
 801089c:	61fb      	str	r3, [r7, #28]
   return(result);
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1e6      	bne.n	8010872 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80108a4:	e002      	b.n	80108ac <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80108a6:	2301      	movs	r3, #1
 80108a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80108ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108b0:	e000      	b.n	80108b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80108b2:	2302      	movs	r3, #2
  }
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3730      	adds	r7, #48	@ 0x30
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d108      	bne.n	80108de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80108dc:	e031      	b.n	8010942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80108de:	2310      	movs	r3, #16
 80108e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80108e2:	2310      	movs	r3, #16
 80108e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	0e5b      	lsrs	r3, r3, #25
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 0307 	and.w	r3, r3, #7
 80108f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689b      	ldr	r3, [r3, #8]
 80108fc:	0f5b      	lsrs	r3, r3, #29
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	f003 0307 	and.w	r3, r3, #7
 8010904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010906:	7bbb      	ldrb	r3, [r7, #14]
 8010908:	7b3a      	ldrb	r2, [r7, #12]
 801090a:	4911      	ldr	r1, [pc, #68]	@ (8010950 <UARTEx_SetNbDataToProcess+0x94>)
 801090c:	5c8a      	ldrb	r2, [r1, r2]
 801090e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010912:	7b3a      	ldrb	r2, [r7, #12]
 8010914:	490f      	ldr	r1, [pc, #60]	@ (8010954 <UARTEx_SetNbDataToProcess+0x98>)
 8010916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010918:	fb93 f3f2 	sdiv	r3, r3, r2
 801091c:	b29a      	uxth	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010924:	7bfb      	ldrb	r3, [r7, #15]
 8010926:	7b7a      	ldrb	r2, [r7, #13]
 8010928:	4909      	ldr	r1, [pc, #36]	@ (8010950 <UARTEx_SetNbDataToProcess+0x94>)
 801092a:	5c8a      	ldrb	r2, [r1, r2]
 801092c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010930:	7b7a      	ldrb	r2, [r7, #13]
 8010932:	4908      	ldr	r1, [pc, #32]	@ (8010954 <UARTEx_SetNbDataToProcess+0x98>)
 8010934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010936:	fb93 f3f2 	sdiv	r3, r3, r2
 801093a:	b29a      	uxth	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010942:	bf00      	nop
 8010944:	3714      	adds	r7, #20
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	08017f68 	.word	0x08017f68
 8010954:	08017f70 	.word	0x08017f70

08010958 <__NVIC_SetPriority>:
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	4603      	mov	r3, r0
 8010960:	6039      	str	r1, [r7, #0]
 8010962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010968:	2b00      	cmp	r3, #0
 801096a:	db0a      	blt.n	8010982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	b2da      	uxtb	r2, r3
 8010970:	490c      	ldr	r1, [pc, #48]	@ (80109a4 <__NVIC_SetPriority+0x4c>)
 8010972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010976:	0112      	lsls	r2, r2, #4
 8010978:	b2d2      	uxtb	r2, r2
 801097a:	440b      	add	r3, r1
 801097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010980:	e00a      	b.n	8010998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	b2da      	uxtb	r2, r3
 8010986:	4908      	ldr	r1, [pc, #32]	@ (80109a8 <__NVIC_SetPriority+0x50>)
 8010988:	88fb      	ldrh	r3, [r7, #6]
 801098a:	f003 030f 	and.w	r3, r3, #15
 801098e:	3b04      	subs	r3, #4
 8010990:	0112      	lsls	r2, r2, #4
 8010992:	b2d2      	uxtb	r2, r2
 8010994:	440b      	add	r3, r1
 8010996:	761a      	strb	r2, [r3, #24]
}
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	e000e100 	.word	0xe000e100
 80109a8:	e000ed00 	.word	0xe000ed00

080109ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80109b0:	4b05      	ldr	r3, [pc, #20]	@ (80109c8 <SysTick_Handler+0x1c>)
 80109b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80109b4:	f001 fdb0 	bl	8012518 <xTaskGetSchedulerState>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d001      	beq.n	80109c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80109be:	f002 fbab 	bl	8013118 <xPortSysTickHandler>
  }
}
 80109c2:	bf00      	nop
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	e000e010 	.word	0xe000e010

080109cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80109d0:	2100      	movs	r1, #0
 80109d2:	f06f 0004 	mvn.w	r0, #4
 80109d6:	f7ff ffbf 	bl	8010958 <__NVIC_SetPriority>
#endif
}
 80109da:	bf00      	nop
 80109dc:	bd80      	pop	{r7, pc}
	...

080109e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80109e0:	b480      	push	{r7}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109e6:	f3ef 8305 	mrs	r3, IPSR
 80109ea:	603b      	str	r3, [r7, #0]
  return(result);
 80109ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80109f2:	f06f 0305 	mvn.w	r3, #5
 80109f6:	607b      	str	r3, [r7, #4]
 80109f8:	e00c      	b.n	8010a14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80109fa:	4b0a      	ldr	r3, [pc, #40]	@ (8010a24 <osKernelInitialize+0x44>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d105      	bne.n	8010a0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010a02:	4b08      	ldr	r3, [pc, #32]	@ (8010a24 <osKernelInitialize+0x44>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	607b      	str	r3, [r7, #4]
 8010a0c:	e002      	b.n	8010a14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010a14:	687b      	ldr	r3, [r7, #4]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	24002aac 	.word	0x24002aac

08010a28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a2e:	f3ef 8305 	mrs	r3, IPSR
 8010a32:	603b      	str	r3, [r7, #0]
  return(result);
 8010a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d003      	beq.n	8010a42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8010a3a:	f06f 0305 	mvn.w	r3, #5
 8010a3e:	607b      	str	r3, [r7, #4]
 8010a40:	e010      	b.n	8010a64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010a42:	4b0b      	ldr	r3, [pc, #44]	@ (8010a70 <osKernelStart+0x48>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d109      	bne.n	8010a5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010a4a:	f7ff ffbf 	bl	80109cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010a4e:	4b08      	ldr	r3, [pc, #32]	@ (8010a70 <osKernelStart+0x48>)
 8010a50:	2202      	movs	r2, #2
 8010a52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010a54:	f001 f8fc 	bl	8011c50 <vTaskStartScheduler>
      stat = osOK;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	607b      	str	r3, [r7, #4]
 8010a5c:	e002      	b.n	8010a64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010a64:	687b      	ldr	r3, [r7, #4]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	24002aac 	.word	0x24002aac

08010a74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b08e      	sub	sp, #56	@ 0x38
 8010a78:	af04      	add	r7, sp, #16
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010a80:	2300      	movs	r3, #0
 8010a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a84:	f3ef 8305 	mrs	r3, IPSR
 8010a88:	617b      	str	r3, [r7, #20]
  return(result);
 8010a8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d17e      	bne.n	8010b8e <osThreadNew+0x11a>
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d07b      	beq.n	8010b8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010a96:	2380      	movs	r3, #128	@ 0x80
 8010a98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010a9a:	2318      	movs	r3, #24
 8010a9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8010aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d045      	beq.n	8010b3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d002      	beq.n	8010abc <osThreadNew+0x48>
        name = attr->name;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d002      	beq.n	8010aca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	699b      	ldr	r3, [r3, #24]
 8010ac8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d008      	beq.n	8010ae2 <osThreadNew+0x6e>
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	2b38      	cmp	r3, #56	@ 0x38
 8010ad4:	d805      	bhi.n	8010ae2 <osThreadNew+0x6e>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	f003 0301 	and.w	r3, r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d001      	beq.n	8010ae6 <osThreadNew+0x72>
        return (NULL);
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e054      	b.n	8010b90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	695b      	ldr	r3, [r3, #20]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d003      	beq.n	8010af6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	089b      	lsrs	r3, r3, #2
 8010af4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00e      	beq.n	8010b1c <osThreadNew+0xa8>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	2ba7      	cmp	r3, #167	@ 0xa7
 8010b04:	d90a      	bls.n	8010b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d006      	beq.n	8010b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <osThreadNew+0xa8>
        mem = 1;
 8010b16:	2301      	movs	r3, #1
 8010b18:	61bb      	str	r3, [r7, #24]
 8010b1a:	e010      	b.n	8010b3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10c      	bne.n	8010b3e <osThreadNew+0xca>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d108      	bne.n	8010b3e <osThreadNew+0xca>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d104      	bne.n	8010b3e <osThreadNew+0xca>
          mem = 0;
 8010b34:	2300      	movs	r3, #0
 8010b36:	61bb      	str	r3, [r7, #24]
 8010b38:	e001      	b.n	8010b3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d110      	bne.n	8010b66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	9301      	str	r3, [sp, #4]
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	6a3a      	ldr	r2, [r7, #32]
 8010b58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f000 fe3a 	bl	80117d4 <xTaskCreateStatic>
 8010b60:	4603      	mov	r3, r0
 8010b62:	613b      	str	r3, [r7, #16]
 8010b64:	e013      	b.n	8010b8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d110      	bne.n	8010b8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	f107 0310 	add.w	r3, r7, #16
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f000 fe88 	bl	8011894 <xTaskCreate>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d001      	beq.n	8010b8e <osThreadNew+0x11a>
            hTask = NULL;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010b8e:	693b      	ldr	r3, [r7, #16]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3728      	adds	r7, #40	@ 0x28
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	4a07      	ldr	r2, [pc, #28]	@ (8010bc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8010ba8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	4a06      	ldr	r2, [pc, #24]	@ (8010bc8 <vApplicationGetIdleTaskMemory+0x30>)
 8010bae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2280      	movs	r2, #128	@ 0x80
 8010bb4:	601a      	str	r2, [r3, #0]
}
 8010bb6:	bf00      	nop
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	24002ab0 	.word	0x24002ab0
 8010bc8:	24002b58 	.word	0x24002b58

08010bcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	4a07      	ldr	r2, [pc, #28]	@ (8010bf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8010bdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	4a06      	ldr	r2, [pc, #24]	@ (8010bfc <vApplicationGetTimerTaskMemory+0x30>)
 8010be2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010bea:	601a      	str	r2, [r3, #0]
}
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf6:	4770      	bx	lr
 8010bf8:	24002d58 	.word	0x24002d58
 8010bfc:	24002e00 	.word	0x24002e00

08010c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f103 0208 	add.w	r2, r3, #8
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f04f 32ff 	mov.w	r2, #4294967295
 8010c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f103 0208 	add.w	r2, r3, #8
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f103 0208 	add.w	r2, r3, #8
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2200      	movs	r2, #0
 8010c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010c34:	bf00      	nop
 8010c36:	370c      	adds	r7, #12
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b085      	sub	sp, #20
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	689a      	ldr	r2, [r3, #8]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	1c5a      	adds	r2, r3, #1
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
}
 8010c96:	bf00      	nop
 8010c98:	3714      	adds	r7, #20
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca0:	4770      	bx	lr

08010ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ca2:	b480      	push	{r7}
 8010ca4:	b085      	sub	sp, #20
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb8:	d103      	bne.n	8010cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	60fb      	str	r3, [r7, #12]
 8010cc0:	e00c      	b.n	8010cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	60fb      	str	r3, [r7, #12]
 8010cc8:	e002      	b.n	8010cd0 <vListInsert+0x2e>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	60fb      	str	r3, [r7, #12]
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d2f6      	bcs.n	8010cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	685a      	ldr	r2, [r3, #4]
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	685b      	ldr	r3, [r3, #4]
 8010ce8:	683a      	ldr	r2, [r7, #0]
 8010cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	601a      	str	r2, [r3, #0]
}
 8010d08:	bf00      	nop
 8010d0a:	3714      	adds	r7, #20
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010d14:	b480      	push	{r7}
 8010d16:	b085      	sub	sp, #20
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	691b      	ldr	r3, [r3, #16]
 8010d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	6892      	ldr	r2, [r2, #8]
 8010d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	6852      	ldr	r2, [r2, #4]
 8010d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d103      	bne.n	8010d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	689a      	ldr	r2, [r3, #8]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	1e5a      	subs	r2, r3, #1
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3714      	adds	r7, #20
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10b      	bne.n	8010d94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d80:	f383 8811 	msr	BASEPRI, r3
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010d8e:	bf00      	nop
 8010d90:	bf00      	nop
 8010d92:	e7fd      	b.n	8010d90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010d94:	f002 f930 	bl	8012ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010da0:	68f9      	ldr	r1, [r7, #12]
 8010da2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010da4:	fb01 f303 	mul.w	r3, r1, r3
 8010da8:	441a      	add	r2, r3
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	68f9      	ldr	r1, [r7, #12]
 8010dc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010dca:	fb01 f303 	mul.w	r3, r1, r3
 8010dce:	441a      	add	r2, r3
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	22ff      	movs	r2, #255	@ 0xff
 8010dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	22ff      	movs	r2, #255	@ 0xff
 8010de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d114      	bne.n	8010e14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	691b      	ldr	r3, [r3, #16]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d01a      	beq.n	8010e28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3310      	adds	r3, #16
 8010df6:	4618      	mov	r0, r3
 8010df8:	f001 f9c8 	bl	801218c <xTaskRemoveFromEventList>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d012      	beq.n	8010e28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010e02:	4b0d      	ldr	r3, [pc, #52]	@ (8010e38 <xQueueGenericReset+0xd0>)
 8010e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	e009      	b.n	8010e28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	3310      	adds	r3, #16
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fef1 	bl	8010c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3324      	adds	r3, #36	@ 0x24
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7ff feec 	bl	8010c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010e28:	f002 f918 	bl	801305c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010e2c:	2301      	movs	r3, #1
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	e000ed04 	.word	0xe000ed04

08010e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b08e      	sub	sp, #56	@ 0x38
 8010e40:	af02      	add	r7, sp, #8
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	60b9      	str	r1, [r7, #8]
 8010e46:	607a      	str	r2, [r7, #4]
 8010e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10b      	bne.n	8010e68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010e62:	bf00      	nop
 8010e64:	bf00      	nop
 8010e66:	e7fd      	b.n	8010e64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d10b      	bne.n	8010e86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e72:	f383 8811 	msr	BASEPRI, r3
 8010e76:	f3bf 8f6f 	isb	sy
 8010e7a:	f3bf 8f4f 	dsb	sy
 8010e7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010e80:	bf00      	nop
 8010e82:	bf00      	nop
 8010e84:	e7fd      	b.n	8010e82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <xQueueGenericCreateStatic+0x56>
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d001      	beq.n	8010e96 <xQueueGenericCreateStatic+0x5a>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e000      	b.n	8010e98 <xQueueGenericCreateStatic+0x5c>
 8010e96:	2300      	movs	r3, #0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10b      	bne.n	8010eb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea0:	f383 8811 	msr	BASEPRI, r3
 8010ea4:	f3bf 8f6f 	isb	sy
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	623b      	str	r3, [r7, #32]
}
 8010eae:	bf00      	nop
 8010eb0:	bf00      	nop
 8010eb2:	e7fd      	b.n	8010eb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d102      	bne.n	8010ec0 <xQueueGenericCreateStatic+0x84>
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <xQueueGenericCreateStatic+0x88>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e000      	b.n	8010ec6 <xQueueGenericCreateStatic+0x8a>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d10b      	bne.n	8010ee2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ece:	f383 8811 	msr	BASEPRI, r3
 8010ed2:	f3bf 8f6f 	isb	sy
 8010ed6:	f3bf 8f4f 	dsb	sy
 8010eda:	61fb      	str	r3, [r7, #28]
}
 8010edc:	bf00      	nop
 8010ede:	bf00      	nop
 8010ee0:	e7fd      	b.n	8010ede <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010ee2:	2350      	movs	r3, #80	@ 0x50
 8010ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2b50      	cmp	r3, #80	@ 0x50
 8010eea:	d00b      	beq.n	8010f04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	61bb      	str	r3, [r7, #24]
}
 8010efe:	bf00      	nop
 8010f00:	bf00      	nop
 8010f02:	e7fd      	b.n	8010f00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010f04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00d      	beq.n	8010f2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f12:	2201      	movs	r2, #1
 8010f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	4613      	mov	r3, r2
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	68b9      	ldr	r1, [r7, #8]
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f000 f840 	bl	8010fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3730      	adds	r7, #48	@ 0x30
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b08a      	sub	sp, #40	@ 0x28
 8010f3a:	af02      	add	r7, sp, #8
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	4613      	mov	r3, r2
 8010f42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10b      	bne.n	8010f62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8010f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	613b      	str	r3, [r7, #16]
}
 8010f5c:	bf00      	nop
 8010f5e:	bf00      	nop
 8010f60:	e7fd      	b.n	8010f5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	68ba      	ldr	r2, [r7, #8]
 8010f66:	fb02 f303 	mul.w	r3, r2, r3
 8010f6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	3350      	adds	r3, #80	@ 0x50
 8010f70:	4618      	mov	r0, r3
 8010f72:	f002 f963 	bl	801323c <pvPortMalloc>
 8010f76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d011      	beq.n	8010fa2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	3350      	adds	r3, #80	@ 0x50
 8010f86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f90:	79fa      	ldrb	r2, [r7, #7]
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	4613      	mov	r3, r2
 8010f98:	697a      	ldr	r2, [r7, #20]
 8010f9a:	68b9      	ldr	r1, [r7, #8]
 8010f9c:	68f8      	ldr	r0, [r7, #12]
 8010f9e:	f000 f805 	bl	8010fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3720      	adds	r7, #32
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d103      	bne.n	8010fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	69ba      	ldr	r2, [r7, #24]
 8010fc4:	601a      	str	r2, [r3, #0]
 8010fc6:	e002      	b.n	8010fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010fda:	2101      	movs	r1, #1
 8010fdc:	69b8      	ldr	r0, [r7, #24]
 8010fde:	f7ff fec3 	bl	8010d68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	78fa      	ldrb	r2, [r7, #3]
 8010fe6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010fea:	bf00      	nop
 8010fec:	3710      	adds	r7, #16
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
	...

08010ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08e      	sub	sp, #56	@ 0x38
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	607a      	str	r2, [r7, #4]
 8011000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011002:	2300      	movs	r3, #0
 8011004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100c:	2b00      	cmp	r3, #0
 801100e:	d10b      	bne.n	8011028 <xQueueGenericSend+0x34>
	__asm volatile
 8011010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011014:	f383 8811 	msr	BASEPRI, r3
 8011018:	f3bf 8f6f 	isb	sy
 801101c:	f3bf 8f4f 	dsb	sy
 8011020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011022:	bf00      	nop
 8011024:	bf00      	nop
 8011026:	e7fd      	b.n	8011024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d103      	bne.n	8011036 <xQueueGenericSend+0x42>
 801102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <xQueueGenericSend+0x46>
 8011036:	2301      	movs	r3, #1
 8011038:	e000      	b.n	801103c <xQueueGenericSend+0x48>
 801103a:	2300      	movs	r3, #0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10b      	bne.n	8011058 <xQueueGenericSend+0x64>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011052:	bf00      	nop
 8011054:	bf00      	nop
 8011056:	e7fd      	b.n	8011054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	2b02      	cmp	r3, #2
 801105c:	d103      	bne.n	8011066 <xQueueGenericSend+0x72>
 801105e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011062:	2b01      	cmp	r3, #1
 8011064:	d101      	bne.n	801106a <xQueueGenericSend+0x76>
 8011066:	2301      	movs	r3, #1
 8011068:	e000      	b.n	801106c <xQueueGenericSend+0x78>
 801106a:	2300      	movs	r3, #0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10b      	bne.n	8011088 <xQueueGenericSend+0x94>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	623b      	str	r3, [r7, #32]
}
 8011082:	bf00      	nop
 8011084:	bf00      	nop
 8011086:	e7fd      	b.n	8011084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011088:	f001 fa46 	bl	8012518 <xTaskGetSchedulerState>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d102      	bne.n	8011098 <xQueueGenericSend+0xa4>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <xQueueGenericSend+0xa8>
 8011098:	2301      	movs	r3, #1
 801109a:	e000      	b.n	801109e <xQueueGenericSend+0xaa>
 801109c:	2300      	movs	r3, #0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d10b      	bne.n	80110ba <xQueueGenericSend+0xc6>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a6:	f383 8811 	msr	BASEPRI, r3
 80110aa:	f3bf 8f6f 	isb	sy
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	61fb      	str	r3, [r7, #28]
}
 80110b4:	bf00      	nop
 80110b6:	bf00      	nop
 80110b8:	e7fd      	b.n	80110b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110ba:	f001 ff9d 	bl	8012ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80110be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d302      	bcc.n	80110d0 <xQueueGenericSend+0xdc>
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	2b02      	cmp	r3, #2
 80110ce:	d129      	bne.n	8011124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80110d6:	f000 fa0f 	bl	80114f8 <prvCopyDataToQueue>
 80110da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d010      	beq.n	8011106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e6:	3324      	adds	r3, #36	@ 0x24
 80110e8:	4618      	mov	r0, r3
 80110ea:	f001 f84f 	bl	801218c <xTaskRemoveFromEventList>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d013      	beq.n	801111c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80110f4:	4b3f      	ldr	r3, [pc, #252]	@ (80111f4 <xQueueGenericSend+0x200>)
 80110f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110fa:	601a      	str	r2, [r3, #0]
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	e00a      	b.n	801111c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011108:	2b00      	cmp	r3, #0
 801110a:	d007      	beq.n	801111c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801110c:	4b39      	ldr	r3, [pc, #228]	@ (80111f4 <xQueueGenericSend+0x200>)
 801110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801111c:	f001 ff9e 	bl	801305c <vPortExitCritical>
				return pdPASS;
 8011120:	2301      	movs	r3, #1
 8011122:	e063      	b.n	80111ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d103      	bne.n	8011132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801112a:	f001 ff97 	bl	801305c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801112e:	2300      	movs	r3, #0
 8011130:	e05c      	b.n	80111ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011134:	2b00      	cmp	r3, #0
 8011136:	d106      	bne.n	8011146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011138:	f107 0314 	add.w	r3, r7, #20
 801113c:	4618      	mov	r0, r3
 801113e:	f001 f889 	bl	8012254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011142:	2301      	movs	r3, #1
 8011144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011146:	f001 ff89 	bl	801305c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801114a:	f000 fdf1 	bl	8011d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801114e:	f001 ff53 	bl	8012ff8 <vPortEnterCritical>
 8011152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011158:	b25b      	sxtb	r3, r3
 801115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801115e:	d103      	bne.n	8011168 <xQueueGenericSend+0x174>
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	2200      	movs	r2, #0
 8011164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801116a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801116e:	b25b      	sxtb	r3, r3
 8011170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011174:	d103      	bne.n	801117e <xQueueGenericSend+0x18a>
 8011176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011178:	2200      	movs	r2, #0
 801117a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801117e:	f001 ff6d 	bl	801305c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011182:	1d3a      	adds	r2, r7, #4
 8011184:	f107 0314 	add.w	r3, r7, #20
 8011188:	4611      	mov	r1, r2
 801118a:	4618      	mov	r0, r3
 801118c:	f001 f878 	bl	8012280 <xTaskCheckForTimeOut>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d124      	bne.n	80111e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011198:	f000 faa6 	bl	80116e8 <prvIsQueueFull>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d018      	beq.n	80111d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80111a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a4:	3310      	adds	r3, #16
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	4611      	mov	r1, r2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 ff9c 	bl	80120e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80111b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111b2:	f000 fa31 	bl	8011618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80111b6:	f000 fdc9 	bl	8011d4c <xTaskResumeAll>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f47f af7c 	bne.w	80110ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80111c2:	4b0c      	ldr	r3, [pc, #48]	@ (80111f4 <xQueueGenericSend+0x200>)
 80111c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	f3bf 8f6f 	isb	sy
 80111d2:	e772      	b.n	80110ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80111d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111d6:	f000 fa1f 	bl	8011618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111da:	f000 fdb7 	bl	8011d4c <xTaskResumeAll>
 80111de:	e76c      	b.n	80110ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80111e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111e2:	f000 fa19 	bl	8011618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111e6:	f000 fdb1 	bl	8011d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80111ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3738      	adds	r7, #56	@ 0x38
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	e000ed04 	.word	0xe000ed04

080111f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b090      	sub	sp, #64	@ 0x40
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
 8011204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801120a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801120c:	2b00      	cmp	r3, #0
 801120e:	d10b      	bne.n	8011228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8011210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011222:	bf00      	nop
 8011224:	bf00      	nop
 8011226:	e7fd      	b.n	8011224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d103      	bne.n	8011236 <xQueueGenericSendFromISR+0x3e>
 801122e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <xQueueGenericSendFromISR+0x42>
 8011236:	2301      	movs	r3, #1
 8011238:	e000      	b.n	801123c <xQueueGenericSendFromISR+0x44>
 801123a:	2300      	movs	r3, #0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10b      	bne.n	8011258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011244:	f383 8811 	msr	BASEPRI, r3
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	f3bf 8f4f 	dsb	sy
 8011250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011252:	bf00      	nop
 8011254:	bf00      	nop
 8011256:	e7fd      	b.n	8011254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2b02      	cmp	r3, #2
 801125c:	d103      	bne.n	8011266 <xQueueGenericSendFromISR+0x6e>
 801125e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011262:	2b01      	cmp	r3, #1
 8011264:	d101      	bne.n	801126a <xQueueGenericSendFromISR+0x72>
 8011266:	2301      	movs	r3, #1
 8011268:	e000      	b.n	801126c <xQueueGenericSendFromISR+0x74>
 801126a:	2300      	movs	r3, #0
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10b      	bne.n	8011288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	623b      	str	r3, [r7, #32]
}
 8011282:	bf00      	nop
 8011284:	bf00      	nop
 8011286:	e7fd      	b.n	8011284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011288:	f001 ff96 	bl	80131b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801128c:	f3ef 8211 	mrs	r2, BASEPRI
 8011290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011294:	f383 8811 	msr	BASEPRI, r3
 8011298:	f3bf 8f6f 	isb	sy
 801129c:	f3bf 8f4f 	dsb	sy
 80112a0:	61fa      	str	r2, [r7, #28]
 80112a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80112a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d302      	bcc.n	80112ba <xQueueGenericSendFromISR+0xc2>
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d12f      	bne.n	801131a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80112ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80112c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	68b9      	ldr	r1, [r7, #8]
 80112ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80112d0:	f000 f912 	bl	80114f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80112d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80112d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112dc:	d112      	bne.n	8011304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d016      	beq.n	8011314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e8:	3324      	adds	r3, #36	@ 0x24
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 ff4e 	bl	801218c <xTaskRemoveFromEventList>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00e      	beq.n	8011314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d00b      	beq.n	8011314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	601a      	str	r2, [r3, #0]
 8011302:	e007      	b.n	8011314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011308:	3301      	adds	r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	b25a      	sxtb	r2, r3
 801130e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011314:	2301      	movs	r3, #1
 8011316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011318:	e001      	b.n	801131e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801131a:	2300      	movs	r3, #0
 801131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801131e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801132a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801132c:	4618      	mov	r0, r3
 801132e:	3740      	adds	r7, #64	@ 0x40
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b08c      	sub	sp, #48	@ 0x30
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011340:	2300      	movs	r3, #0
 8011342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801134a:	2b00      	cmp	r3, #0
 801134c:	d10b      	bne.n	8011366 <xQueueReceive+0x32>
	__asm volatile
 801134e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	623b      	str	r3, [r7, #32]
}
 8011360:	bf00      	nop
 8011362:	bf00      	nop
 8011364:	e7fd      	b.n	8011362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d103      	bne.n	8011374 <xQueueReceive+0x40>
 801136c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011370:	2b00      	cmp	r3, #0
 8011372:	d101      	bne.n	8011378 <xQueueReceive+0x44>
 8011374:	2301      	movs	r3, #1
 8011376:	e000      	b.n	801137a <xQueueReceive+0x46>
 8011378:	2300      	movs	r3, #0
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10b      	bne.n	8011396 <xQueueReceive+0x62>
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	61fb      	str	r3, [r7, #28]
}
 8011390:	bf00      	nop
 8011392:	bf00      	nop
 8011394:	e7fd      	b.n	8011392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011396:	f001 f8bf 	bl	8012518 <xTaskGetSchedulerState>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <xQueueReceive+0x72>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <xQueueReceive+0x76>
 80113a6:	2301      	movs	r3, #1
 80113a8:	e000      	b.n	80113ac <xQueueReceive+0x78>
 80113aa:	2300      	movs	r3, #0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10b      	bne.n	80113c8 <xQueueReceive+0x94>
	__asm volatile
 80113b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	61bb      	str	r3, [r7, #24]
}
 80113c2:	bf00      	nop
 80113c4:	bf00      	nop
 80113c6:	e7fd      	b.n	80113c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80113c8:	f001 fe16 	bl	8012ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d01f      	beq.n	8011418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113d8:	68b9      	ldr	r1, [r7, #8]
 80113da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80113dc:	f000 f8f6 	bl	80115cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80113e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e2:	1e5a      	subs	r2, r3, #1
 80113e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113ea:	691b      	ldr	r3, [r3, #16]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00f      	beq.n	8011410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113f2:	3310      	adds	r3, #16
 80113f4:	4618      	mov	r0, r3
 80113f6:	f000 fec9 	bl	801218c <xTaskRemoveFromEventList>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d007      	beq.n	8011410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011400:	4b3c      	ldr	r3, [pc, #240]	@ (80114f4 <xQueueReceive+0x1c0>)
 8011402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011406:	601a      	str	r2, [r3, #0]
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011410:	f001 fe24 	bl	801305c <vPortExitCritical>
				return pdPASS;
 8011414:	2301      	movs	r3, #1
 8011416:	e069      	b.n	80114ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d103      	bne.n	8011426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801141e:	f001 fe1d 	bl	801305c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011422:	2300      	movs	r3, #0
 8011424:	e062      	b.n	80114ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801142c:	f107 0310 	add.w	r3, r7, #16
 8011430:	4618      	mov	r0, r3
 8011432:	f000 ff0f 	bl	8012254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011436:	2301      	movs	r3, #1
 8011438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801143a:	f001 fe0f 	bl	801305c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801143e:	f000 fc77 	bl	8011d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011442:	f001 fdd9 	bl	8012ff8 <vPortEnterCritical>
 8011446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801144c:	b25b      	sxtb	r3, r3
 801144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011452:	d103      	bne.n	801145c <xQueueReceive+0x128>
 8011454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011456:	2200      	movs	r2, #0
 8011458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801145e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011462:	b25b      	sxtb	r3, r3
 8011464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011468:	d103      	bne.n	8011472 <xQueueReceive+0x13e>
 801146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011472:	f001 fdf3 	bl	801305c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011476:	1d3a      	adds	r2, r7, #4
 8011478:	f107 0310 	add.w	r3, r7, #16
 801147c:	4611      	mov	r1, r2
 801147e:	4618      	mov	r0, r3
 8011480:	f000 fefe 	bl	8012280 <xTaskCheckForTimeOut>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d123      	bne.n	80114d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801148a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801148c:	f000 f916 	bl	80116bc <prvIsQueueEmpty>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d017      	beq.n	80114c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011498:	3324      	adds	r3, #36	@ 0x24
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	4611      	mov	r1, r2
 801149e:	4618      	mov	r0, r3
 80114a0:	f000 fe22 	bl	80120e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80114a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80114a6:	f000 f8b7 	bl	8011618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80114aa:	f000 fc4f 	bl	8011d4c <xTaskResumeAll>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d189      	bne.n	80113c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80114b4:	4b0f      	ldr	r3, [pc, #60]	@ (80114f4 <xQueueReceive+0x1c0>)
 80114b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114ba:	601a      	str	r2, [r3, #0]
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	f3bf 8f6f 	isb	sy
 80114c4:	e780      	b.n	80113c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80114c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80114c8:	f000 f8a6 	bl	8011618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114cc:	f000 fc3e 	bl	8011d4c <xTaskResumeAll>
 80114d0:	e77a      	b.n	80113c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80114d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80114d4:	f000 f8a0 	bl	8011618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80114d8:	f000 fc38 	bl	8011d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80114de:	f000 f8ed 	bl	80116bc <prvIsQueueEmpty>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	f43f af6f 	beq.w	80113c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80114ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3730      	adds	r7, #48	@ 0x30
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	e000ed04 	.word	0xe000ed04

080114f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	60b9      	str	r1, [r7, #8]
 8011502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011504:	2300      	movs	r3, #0
 8011506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801150c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011512:	2b00      	cmp	r3, #0
 8011514:	d10d      	bne.n	8011532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d14d      	bne.n	80115ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	4618      	mov	r0, r3
 8011524:	f001 f816 	bl	8012554 <xTaskPriorityDisinherit>
 8011528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	609a      	str	r2, [r3, #8]
 8011530:	e043      	b.n	80115ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d119      	bne.n	801156c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6858      	ldr	r0, [r3, #4]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011540:	461a      	mov	r2, r3
 8011542:	68b9      	ldr	r1, [r7, #8]
 8011544:	f003 fecf 	bl	80152e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	685a      	ldr	r2, [r3, #4]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011550:	441a      	add	r2, r3
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	429a      	cmp	r2, r3
 8011560:	d32b      	bcc.n	80115ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	605a      	str	r2, [r3, #4]
 801156a:	e026      	b.n	80115ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	68d8      	ldr	r0, [r3, #12]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011574:	461a      	mov	r2, r3
 8011576:	68b9      	ldr	r1, [r7, #8]
 8011578:	f003 feb5 	bl	80152e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	68da      	ldr	r2, [r3, #12]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011584:	425b      	negs	r3, r3
 8011586:	441a      	add	r2, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	68da      	ldr	r2, [r3, #12]
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	429a      	cmp	r2, r3
 8011596:	d207      	bcs.n	80115a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	689a      	ldr	r2, [r3, #8]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115a0:	425b      	negs	r3, r3
 80115a2:	441a      	add	r2, r3
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b02      	cmp	r3, #2
 80115ac:	d105      	bne.n	80115ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	3b01      	subs	r3, #1
 80115b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	1c5a      	adds	r2, r3, #1
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80115c2:	697b      	ldr	r3, [r7, #20]
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3718      	adds	r7, #24
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d018      	beq.n	8011610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	68da      	ldr	r2, [r3, #12]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115e6:	441a      	add	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	68da      	ldr	r2, [r3, #12]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d303      	bcc.n	8011600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	68d9      	ldr	r1, [r3, #12]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011608:	461a      	mov	r2, r3
 801160a:	6838      	ldr	r0, [r7, #0]
 801160c:	f003 fe6b 	bl	80152e6 <memcpy>
	}
}
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011620:	f001 fcea 	bl	8012ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801162a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801162c:	e011      	b.n	8011652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011632:	2b00      	cmp	r3, #0
 8011634:	d012      	beq.n	801165c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3324      	adds	r3, #36	@ 0x24
 801163a:	4618      	mov	r0, r3
 801163c:	f000 fda6 	bl	801218c <xTaskRemoveFromEventList>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011646:	f000 fe7f 	bl	8012348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801164a:	7bfb      	ldrb	r3, [r7, #15]
 801164c:	3b01      	subs	r3, #1
 801164e:	b2db      	uxtb	r3, r3
 8011650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011656:	2b00      	cmp	r3, #0
 8011658:	dce9      	bgt.n	801162e <prvUnlockQueue+0x16>
 801165a:	e000      	b.n	801165e <prvUnlockQueue+0x46>
					break;
 801165c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	22ff      	movs	r2, #255	@ 0xff
 8011662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011666:	f001 fcf9 	bl	801305c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801166a:	f001 fcc5 	bl	8012ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011676:	e011      	b.n	801169c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d012      	beq.n	80116a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3310      	adds	r3, #16
 8011684:	4618      	mov	r0, r3
 8011686:	f000 fd81 	bl	801218c <xTaskRemoveFromEventList>
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	d001      	beq.n	8011694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011690:	f000 fe5a 	bl	8012348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011694:	7bbb      	ldrb	r3, [r7, #14]
 8011696:	3b01      	subs	r3, #1
 8011698:	b2db      	uxtb	r3, r3
 801169a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801169c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	dce9      	bgt.n	8011678 <prvUnlockQueue+0x60>
 80116a4:	e000      	b.n	80116a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80116a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	22ff      	movs	r2, #255	@ 0xff
 80116ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80116b0:	f001 fcd4 	bl	801305c <vPortExitCritical>
}
 80116b4:	bf00      	nop
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116c4:	f001 fc98 	bl	8012ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d102      	bne.n	80116d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80116d0:	2301      	movs	r3, #1
 80116d2:	60fb      	str	r3, [r7, #12]
 80116d4:	e001      	b.n	80116da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80116d6:	2300      	movs	r3, #0
 80116d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116da:	f001 fcbf 	bl	801305c <vPortExitCritical>

	return xReturn;
 80116de:	68fb      	ldr	r3, [r7, #12]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116f0:	f001 fc82 	bl	8012ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d102      	bne.n	8011706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011700:	2301      	movs	r3, #1
 8011702:	60fb      	str	r3, [r7, #12]
 8011704:	e001      	b.n	801170a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011706:	2300      	movs	r3, #0
 8011708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801170a:	f001 fca7 	bl	801305c <vPortExitCritical>

	return xReturn;
 801170e:	68fb      	ldr	r3, [r7, #12]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011718:	b480      	push	{r7}
 801171a:	b085      	sub	sp, #20
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011722:	2300      	movs	r3, #0
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	e014      	b.n	8011752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011728:	4a0f      	ldr	r2, [pc, #60]	@ (8011768 <vQueueAddToRegistry+0x50>)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10b      	bne.n	801174c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011734:	490c      	ldr	r1, [pc, #48]	@ (8011768 <vQueueAddToRegistry+0x50>)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	683a      	ldr	r2, [r7, #0]
 801173a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801173e:	4a0a      	ldr	r2, [pc, #40]	@ (8011768 <vQueueAddToRegistry+0x50>)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	00db      	lsls	r3, r3, #3
 8011744:	4413      	add	r3, r2
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801174a:	e006      	b.n	801175a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	3301      	adds	r3, #1
 8011750:	60fb      	str	r3, [r7, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2b07      	cmp	r3, #7
 8011756:	d9e7      	bls.n	8011728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011758:	bf00      	nop
 801175a:	bf00      	nop
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	24003200 	.word	0x24003200

0801176c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801177c:	f001 fc3c 	bl	8012ff8 <vPortEnterCritical>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011786:	b25b      	sxtb	r3, r3
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178c:	d103      	bne.n	8011796 <vQueueWaitForMessageRestricted+0x2a>
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801179c:	b25b      	sxtb	r3, r3
 801179e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a2:	d103      	bne.n	80117ac <vQueueWaitForMessageRestricted+0x40>
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	2200      	movs	r2, #0
 80117a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80117ac:	f001 fc56 	bl	801305c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	3324      	adds	r3, #36	@ 0x24
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	68b9      	ldr	r1, [r7, #8]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f000 fcb7 	bl	8012134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80117c6:	6978      	ldr	r0, [r7, #20]
 80117c8:	f7ff ff26 	bl	8011618 <prvUnlockQueue>
	}
 80117cc:	bf00      	nop
 80117ce:	3718      	adds	r7, #24
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08e      	sub	sp, #56	@ 0x38
 80117d8:	af04      	add	r7, sp, #16
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
 80117e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80117e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10b      	bne.n	8011800 <xTaskCreateStatic+0x2c>
	__asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ec:	f383 8811 	msr	BASEPRI, r3
 80117f0:	f3bf 8f6f 	isb	sy
 80117f4:	f3bf 8f4f 	dsb	sy
 80117f8:	623b      	str	r3, [r7, #32]
}
 80117fa:	bf00      	nop
 80117fc:	bf00      	nop
 80117fe:	e7fd      	b.n	80117fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011802:	2b00      	cmp	r3, #0
 8011804:	d10b      	bne.n	801181e <xTaskCreateStatic+0x4a>
	__asm volatile
 8011806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801180a:	f383 8811 	msr	BASEPRI, r3
 801180e:	f3bf 8f6f 	isb	sy
 8011812:	f3bf 8f4f 	dsb	sy
 8011816:	61fb      	str	r3, [r7, #28]
}
 8011818:	bf00      	nop
 801181a:	bf00      	nop
 801181c:	e7fd      	b.n	801181a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801181e:	23a8      	movs	r3, #168	@ 0xa8
 8011820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	2ba8      	cmp	r3, #168	@ 0xa8
 8011826:	d00b      	beq.n	8011840 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801182c:	f383 8811 	msr	BASEPRI, r3
 8011830:	f3bf 8f6f 	isb	sy
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	61bb      	str	r3, [r7, #24]
}
 801183a:	bf00      	nop
 801183c:	bf00      	nop
 801183e:	e7fd      	b.n	801183c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011844:	2b00      	cmp	r3, #0
 8011846:	d01e      	beq.n	8011886 <xTaskCreateStatic+0xb2>
 8011848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801184a:	2b00      	cmp	r3, #0
 801184c:	d01b      	beq.n	8011886 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011856:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185a:	2202      	movs	r2, #2
 801185c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011860:	2300      	movs	r3, #0
 8011862:	9303      	str	r3, [sp, #12]
 8011864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011866:	9302      	str	r3, [sp, #8]
 8011868:	f107 0314 	add.w	r3, r7, #20
 801186c:	9301      	str	r3, [sp, #4]
 801186e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	68b9      	ldr	r1, [r7, #8]
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 f851 	bl	8011920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801187e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011880:	f000 f8f6 	bl	8011a70 <prvAddNewTaskToReadyList>
 8011884:	e001      	b.n	801188a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011886:	2300      	movs	r3, #0
 8011888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801188a:	697b      	ldr	r3, [r7, #20]
	}
 801188c:	4618      	mov	r0, r3
 801188e:	3728      	adds	r7, #40	@ 0x28
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011894:	b580      	push	{r7, lr}
 8011896:	b08c      	sub	sp, #48	@ 0x30
 8011898:	af04      	add	r7, sp, #16
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	603b      	str	r3, [r7, #0]
 80118a0:	4613      	mov	r3, r2
 80118a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80118a4:	88fb      	ldrh	r3, [r7, #6]
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4618      	mov	r0, r3
 80118aa:	f001 fcc7 	bl	801323c <pvPortMalloc>
 80118ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00e      	beq.n	80118d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80118b6:	20a8      	movs	r0, #168	@ 0xa8
 80118b8:	f001 fcc0 	bl	801323c <pvPortMalloc>
 80118bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80118be:	69fb      	ldr	r3, [r7, #28]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d003      	beq.n	80118cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	697a      	ldr	r2, [r7, #20]
 80118c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80118ca:	e005      	b.n	80118d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80118cc:	6978      	ldr	r0, [r7, #20]
 80118ce:	f001 fd83 	bl	80133d8 <vPortFree>
 80118d2:	e001      	b.n	80118d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80118d4:	2300      	movs	r3, #0
 80118d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d017      	beq.n	801190e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	2200      	movs	r2, #0
 80118e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80118e6:	88fa      	ldrh	r2, [r7, #6]
 80118e8:	2300      	movs	r3, #0
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	9302      	str	r3, [sp, #8]
 80118f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f2:	9301      	str	r3, [sp, #4]
 80118f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	68b9      	ldr	r1, [r7, #8]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f000 f80f 	bl	8011920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011902:	69f8      	ldr	r0, [r7, #28]
 8011904:	f000 f8b4 	bl	8011a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011908:	2301      	movs	r3, #1
 801190a:	61bb      	str	r3, [r7, #24]
 801190c:	e002      	b.n	8011914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801190e:	f04f 33ff 	mov.w	r3, #4294967295
 8011912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011914:	69bb      	ldr	r3, [r7, #24]
	}
 8011916:	4618      	mov	r0, r3
 8011918:	3720      	adds	r7, #32
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
	...

08011920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b088      	sub	sp, #32
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801192e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011930:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	461a      	mov	r2, r3
 8011938:	21a5      	movs	r1, #165	@ 0xa5
 801193a:	f003 fbc2 	bl	80150c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801193e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011948:	440b      	add	r3, r1
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f023 0307 	bic.w	r3, r3, #7
 8011956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	f003 0307 	and.w	r3, r3, #7
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00b      	beq.n	801197a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	617b      	str	r3, [r7, #20]
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop
 8011978:	e7fd      	b.n	8011976 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d01f      	beq.n	80119c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011980:	2300      	movs	r3, #0
 8011982:	61fb      	str	r3, [r7, #28]
 8011984:	e012      	b.n	80119ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	4413      	add	r3, r2
 801198c:	7819      	ldrb	r1, [r3, #0]
 801198e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	4413      	add	r3, r2
 8011994:	3334      	adds	r3, #52	@ 0x34
 8011996:	460a      	mov	r2, r1
 8011998:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	4413      	add	r3, r2
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d006      	beq.n	80119b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	3301      	adds	r3, #1
 80119aa:	61fb      	str	r3, [r7, #28]
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	2b0f      	cmp	r3, #15
 80119b0:	d9e9      	bls.n	8011986 <prvInitialiseNewTask+0x66>
 80119b2:	e000      	b.n	80119b6 <prvInitialiseNewTask+0x96>
			{
				break;
 80119b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119b8:	2200      	movs	r2, #0
 80119ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80119be:	e003      	b.n	80119c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80119c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c2:	2200      	movs	r2, #0
 80119c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ca:	2b37      	cmp	r3, #55	@ 0x37
 80119cc:	d901      	bls.n	80119d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119ce:	2337      	movs	r3, #55	@ 0x37
 80119d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80119d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80119d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80119de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e0:	2200      	movs	r2, #0
 80119e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e6:	3304      	adds	r3, #4
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7ff f929 	bl	8010c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f0:	3318      	adds	r3, #24
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7ff f924 	bl	8010c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a10:	2200      	movs	r2, #0
 8011a12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a20:	3354      	adds	r3, #84	@ 0x54
 8011a22:	224c      	movs	r2, #76	@ 0x4c
 8011a24:	2100      	movs	r1, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f003 fb4b 	bl	80150c2 <memset>
 8011a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8011a64 <prvInitialiseNewTask+0x144>)
 8011a30:	659a      	str	r2, [r3, #88]	@ 0x58
 8011a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a34:	4a0c      	ldr	r2, [pc, #48]	@ (8011a68 <prvInitialiseNewTask+0x148>)
 8011a36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8011a6c <prvInitialiseNewTask+0x14c>)
 8011a3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	68f9      	ldr	r1, [r7, #12]
 8011a42:	69b8      	ldr	r0, [r7, #24]
 8011a44:	f001 f9a4 	bl	8012d90 <pxPortInitialiseStack>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d002      	beq.n	8011a5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a5a:	bf00      	nop
 8011a5c:	3720      	adds	r7, #32
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	24007494 	.word	0x24007494
 8011a68:	240074fc 	.word	0x240074fc
 8011a6c:	24007564 	.word	0x24007564

08011a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a78:	f001 fabe 	bl	8012ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8011b34 <prvAddNewTaskToReadyList+0xc4>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	3301      	adds	r3, #1
 8011a82:	4a2c      	ldr	r2, [pc, #176]	@ (8011b34 <prvAddNewTaskToReadyList+0xc4>)
 8011a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a86:	4b2c      	ldr	r3, [pc, #176]	@ (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d109      	bne.n	8011aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a94:	4b27      	ldr	r3, [pc, #156]	@ (8011b34 <prvAddNewTaskToReadyList+0xc4>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d110      	bne.n	8011abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a9c:	f000 fc78 	bl	8012390 <prvInitialiseTaskLists>
 8011aa0:	e00d      	b.n	8011abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011aa2:	4b26      	ldr	r3, [pc, #152]	@ (8011b3c <prvAddNewTaskToReadyList+0xcc>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d109      	bne.n	8011abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011aaa:	4b23      	ldr	r3, [pc, #140]	@ (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d802      	bhi.n	8011abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011abe:	4b20      	ldr	r3, [pc, #128]	@ (8011b40 <prvAddNewTaskToReadyList+0xd0>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8011b40 <prvAddNewTaskToReadyList+0xd0>)
 8011ac6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8011b40 <prvAddNewTaskToReadyList+0xd0>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8011b44 <prvAddNewTaskToReadyList+0xd4>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d903      	bls.n	8011ae4 <prvAddNewTaskToReadyList+0x74>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae0:	4a18      	ldr	r2, [pc, #96]	@ (8011b44 <prvAddNewTaskToReadyList+0xd4>)
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4a15      	ldr	r2, [pc, #84]	@ (8011b48 <prvAddNewTaskToReadyList+0xd8>)
 8011af2:	441a      	add	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	3304      	adds	r3, #4
 8011af8:	4619      	mov	r1, r3
 8011afa:	4610      	mov	r0, r2
 8011afc:	f7ff f8ad 	bl	8010c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011b00:	f001 faac 	bl	801305c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011b04:	4b0d      	ldr	r3, [pc, #52]	@ (8011b3c <prvAddNewTaskToReadyList+0xcc>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00e      	beq.n	8011b2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b38 <prvAddNewTaskToReadyList+0xc8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d207      	bcs.n	8011b2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8011b4c <prvAddNewTaskToReadyList+0xdc>)
 8011b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b20:	601a      	str	r2, [r3, #0]
 8011b22:	f3bf 8f4f 	dsb	sy
 8011b26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b2a:	bf00      	nop
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	24003714 	.word	0x24003714
 8011b38:	24003240 	.word	0x24003240
 8011b3c:	24003720 	.word	0x24003720
 8011b40:	24003730 	.word	0x24003730
 8011b44:	2400371c 	.word	0x2400371c
 8011b48:	24003244 	.word	0x24003244
 8011b4c:	e000ed04 	.word	0xe000ed04

08011b50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08a      	sub	sp, #40	@ 0x28
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d10b      	bne.n	8011b7c <vTaskDelayUntil+0x2c>
	__asm volatile
 8011b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b68:	f383 8811 	msr	BASEPRI, r3
 8011b6c:	f3bf 8f6f 	isb	sy
 8011b70:	f3bf 8f4f 	dsb	sy
 8011b74:	617b      	str	r3, [r7, #20]
}
 8011b76:	bf00      	nop
 8011b78:	bf00      	nop
 8011b7a:	e7fd      	b.n	8011b78 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d10b      	bne.n	8011b9a <vTaskDelayUntil+0x4a>
	__asm volatile
 8011b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b86:	f383 8811 	msr	BASEPRI, r3
 8011b8a:	f3bf 8f6f 	isb	sy
 8011b8e:	f3bf 8f4f 	dsb	sy
 8011b92:	613b      	str	r3, [r7, #16]
}
 8011b94:	bf00      	nop
 8011b96:	bf00      	nop
 8011b98:	e7fd      	b.n	8011b96 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8011b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8011c44 <vTaskDelayUntil+0xf4>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00b      	beq.n	8011bba <vTaskDelayUntil+0x6a>
	__asm volatile
 8011ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba6:	f383 8811 	msr	BASEPRI, r3
 8011baa:	f3bf 8f6f 	isb	sy
 8011bae:	f3bf 8f4f 	dsb	sy
 8011bb2:	60fb      	str	r3, [r7, #12]
}
 8011bb4:	bf00      	nop
 8011bb6:	bf00      	nop
 8011bb8:	e7fd      	b.n	8011bb6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8011bba:	f000 f8b9 	bl	8011d30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011bbe:	4b22      	ldr	r3, [pc, #136]	@ (8011c48 <vTaskDelayUntil+0xf8>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	683a      	ldr	r2, [r7, #0]
 8011bca:	4413      	add	r3, r2
 8011bcc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6a3a      	ldr	r2, [r7, #32]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d20b      	bcs.n	8011bf0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	69fa      	ldr	r2, [r7, #28]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d211      	bcs.n	8011c06 <vTaskDelayUntil+0xb6>
 8011be2:	69fa      	ldr	r2, [r7, #28]
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d90d      	bls.n	8011c06 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011bea:	2301      	movs	r3, #1
 8011bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bee:	e00a      	b.n	8011c06 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	69fa      	ldr	r2, [r7, #28]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d303      	bcc.n	8011c02 <vTaskDelayUntil+0xb2>
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d901      	bls.n	8011c06 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011c02:	2301      	movs	r3, #1
 8011c04:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	69fa      	ldr	r2, [r7, #28]
 8011c0a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d006      	beq.n	8011c20 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011c12:	69fa      	ldr	r2, [r7, #28]
 8011c14:	6a3b      	ldr	r3, [r7, #32]
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	2100      	movs	r1, #0
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 fd0a 	bl	8012634 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011c20:	f000 f894 	bl	8011d4c <xTaskResumeAll>
 8011c24:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d107      	bne.n	8011c3c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8011c2c:	4b07      	ldr	r3, [pc, #28]	@ (8011c4c <vTaskDelayUntil+0xfc>)
 8011c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c3c:	bf00      	nop
 8011c3e:	3728      	adds	r7, #40	@ 0x28
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	2400373c 	.word	0x2400373c
 8011c48:	24003718 	.word	0x24003718
 8011c4c:	e000ed04 	.word	0xe000ed04

08011c50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b08a      	sub	sp, #40	@ 0x28
 8011c54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011c56:	2300      	movs	r3, #0
 8011c58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011c5e:	463a      	mov	r2, r7
 8011c60:	1d39      	adds	r1, r7, #4
 8011c62:	f107 0308 	add.w	r3, r7, #8
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fe ff96 	bl	8010b98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011c6c:	6839      	ldr	r1, [r7, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	9202      	str	r2, [sp, #8]
 8011c74:	9301      	str	r3, [sp, #4]
 8011c76:	2300      	movs	r3, #0
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	460a      	mov	r2, r1
 8011c7e:	4924      	ldr	r1, [pc, #144]	@ (8011d10 <vTaskStartScheduler+0xc0>)
 8011c80:	4824      	ldr	r0, [pc, #144]	@ (8011d14 <vTaskStartScheduler+0xc4>)
 8011c82:	f7ff fda7 	bl	80117d4 <xTaskCreateStatic>
 8011c86:	4603      	mov	r3, r0
 8011c88:	4a23      	ldr	r2, [pc, #140]	@ (8011d18 <vTaskStartScheduler+0xc8>)
 8011c8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011c8c:	4b22      	ldr	r3, [pc, #136]	@ (8011d18 <vTaskStartScheduler+0xc8>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d002      	beq.n	8011c9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011c94:	2301      	movs	r3, #1
 8011c96:	617b      	str	r3, [r7, #20]
 8011c98:	e001      	b.n	8011c9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d102      	bne.n	8011caa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011ca4:	f000 fd1a 	bl	80126dc <xTimerCreateTimerTask>
 8011ca8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d11b      	bne.n	8011ce8 <vTaskStartScheduler+0x98>
	__asm volatile
 8011cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cb4:	f383 8811 	msr	BASEPRI, r3
 8011cb8:	f3bf 8f6f 	isb	sy
 8011cbc:	f3bf 8f4f 	dsb	sy
 8011cc0:	613b      	str	r3, [r7, #16]
}
 8011cc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011cc4:	4b15      	ldr	r3, [pc, #84]	@ (8011d1c <vTaskStartScheduler+0xcc>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	3354      	adds	r3, #84	@ 0x54
 8011cca:	4a15      	ldr	r2, [pc, #84]	@ (8011d20 <vTaskStartScheduler+0xd0>)
 8011ccc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011cce:	4b15      	ldr	r3, [pc, #84]	@ (8011d24 <vTaskStartScheduler+0xd4>)
 8011cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011cd6:	4b14      	ldr	r3, [pc, #80]	@ (8011d28 <vTaskStartScheduler+0xd8>)
 8011cd8:	2201      	movs	r2, #1
 8011cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011cdc:	4b13      	ldr	r3, [pc, #76]	@ (8011d2c <vTaskStartScheduler+0xdc>)
 8011cde:	2200      	movs	r2, #0
 8011ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011ce2:	f001 f8e5 	bl	8012eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011ce6:	e00f      	b.n	8011d08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cee:	d10b      	bne.n	8011d08 <vTaskStartScheduler+0xb8>
	__asm volatile
 8011cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	60fb      	str	r3, [r7, #12]
}
 8011d02:	bf00      	nop
 8011d04:	bf00      	nop
 8011d06:	e7fd      	b.n	8011d04 <vTaskStartScheduler+0xb4>
}
 8011d08:	bf00      	nop
 8011d0a:	3718      	adds	r7, #24
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	08017ebc 	.word	0x08017ebc
 8011d14:	08012361 	.word	0x08012361
 8011d18:	24003738 	.word	0x24003738
 8011d1c:	24003240 	.word	0x24003240
 8011d20:	240001e4 	.word	0x240001e4
 8011d24:	24003734 	.word	0x24003734
 8011d28:	24003720 	.word	0x24003720
 8011d2c:	24003718 	.word	0x24003718

08011d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011d30:	b480      	push	{r7}
 8011d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011d34:	4b04      	ldr	r3, [pc, #16]	@ (8011d48 <vTaskSuspendAll+0x18>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	4a03      	ldr	r2, [pc, #12]	@ (8011d48 <vTaskSuspendAll+0x18>)
 8011d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011d3e:	bf00      	nop
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	2400373c 	.word	0x2400373c

08011d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011d5a:	4b42      	ldr	r3, [pc, #264]	@ (8011e64 <xTaskResumeAll+0x118>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10b      	bne.n	8011d7a <xTaskResumeAll+0x2e>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	603b      	str	r3, [r7, #0]
}
 8011d74:	bf00      	nop
 8011d76:	bf00      	nop
 8011d78:	e7fd      	b.n	8011d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d7a:	f001 f93d 	bl	8012ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d7e:	4b39      	ldr	r3, [pc, #228]	@ (8011e64 <xTaskResumeAll+0x118>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	3b01      	subs	r3, #1
 8011d84:	4a37      	ldr	r2, [pc, #220]	@ (8011e64 <xTaskResumeAll+0x118>)
 8011d86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d88:	4b36      	ldr	r3, [pc, #216]	@ (8011e64 <xTaskResumeAll+0x118>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d162      	bne.n	8011e56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d90:	4b35      	ldr	r3, [pc, #212]	@ (8011e68 <xTaskResumeAll+0x11c>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d05e      	beq.n	8011e56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d98:	e02f      	b.n	8011dfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d9a:	4b34      	ldr	r3, [pc, #208]	@ (8011e6c <xTaskResumeAll+0x120>)
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	3318      	adds	r3, #24
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe ffb4 	bl	8010d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	3304      	adds	r3, #4
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fe ffaf 	bl	8010d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dba:	4b2d      	ldr	r3, [pc, #180]	@ (8011e70 <xTaskResumeAll+0x124>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d903      	bls.n	8011dca <xTaskResumeAll+0x7e>
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8011e70 <xTaskResumeAll+0x124>)
 8011dc8:	6013      	str	r3, [r2, #0]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dce:	4613      	mov	r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	4413      	add	r3, r2
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4a27      	ldr	r2, [pc, #156]	@ (8011e74 <xTaskResumeAll+0x128>)
 8011dd8:	441a      	add	r2, r3
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3304      	adds	r3, #4
 8011dde:	4619      	mov	r1, r3
 8011de0:	4610      	mov	r0, r2
 8011de2:	f7fe ff3a 	bl	8010c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dea:	4b23      	ldr	r3, [pc, #140]	@ (8011e78 <xTaskResumeAll+0x12c>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d302      	bcc.n	8011dfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011df4:	4b21      	ldr	r3, [pc, #132]	@ (8011e7c <xTaskResumeAll+0x130>)
 8011df6:	2201      	movs	r2, #1
 8011df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8011e6c <xTaskResumeAll+0x120>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1cb      	bne.n	8011d9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011e08:	f000 fb66 	bl	80124d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8011e80 <xTaskResumeAll+0x134>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d010      	beq.n	8011e3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011e18:	f000 f846 	bl	8011ea8 <xTaskIncrementTick>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d002      	beq.n	8011e28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011e22:	4b16      	ldr	r3, [pc, #88]	@ (8011e7c <xTaskResumeAll+0x130>)
 8011e24:	2201      	movs	r2, #1
 8011e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	3b01      	subs	r3, #1
 8011e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1f1      	bne.n	8011e18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011e34:	4b12      	ldr	r3, [pc, #72]	@ (8011e80 <xTaskResumeAll+0x134>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011e3a:	4b10      	ldr	r3, [pc, #64]	@ (8011e7c <xTaskResumeAll+0x130>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d009      	beq.n	8011e56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011e42:	2301      	movs	r3, #1
 8011e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011e46:	4b0f      	ldr	r3, [pc, #60]	@ (8011e84 <xTaskResumeAll+0x138>)
 8011e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e56:	f001 f901 	bl	801305c <vPortExitCritical>

	return xAlreadyYielded;
 8011e5a:	68bb      	ldr	r3, [r7, #8]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3710      	adds	r7, #16
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	2400373c 	.word	0x2400373c
 8011e68:	24003714 	.word	0x24003714
 8011e6c:	240036d4 	.word	0x240036d4
 8011e70:	2400371c 	.word	0x2400371c
 8011e74:	24003244 	.word	0x24003244
 8011e78:	24003240 	.word	0x24003240
 8011e7c:	24003728 	.word	0x24003728
 8011e80:	24003724 	.word	0x24003724
 8011e84:	e000ed04 	.word	0xe000ed04

08011e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e8e:	4b05      	ldr	r3, [pc, #20]	@ (8011ea4 <xTaskGetTickCount+0x1c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e94:	687b      	ldr	r3, [r7, #4]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	370c      	adds	r7, #12
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr
 8011ea2:	bf00      	nop
 8011ea4:	24003718 	.word	0x24003718

08011ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b086      	sub	sp, #24
 8011eac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8011ff0 <xTaskIncrementTick+0x148>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f040 8090 	bne.w	8011fdc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8011ff4 <xTaskIncrementTick+0x14c>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8011ff4 <xTaskIncrementTick+0x14c>)
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d121      	bne.n	8011f14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ed0:	4b49      	ldr	r3, [pc, #292]	@ (8011ff8 <xTaskIncrementTick+0x150>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00b      	beq.n	8011ef2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	603b      	str	r3, [r7, #0]
}
 8011eec:	bf00      	nop
 8011eee:	bf00      	nop
 8011ef0:	e7fd      	b.n	8011eee <xTaskIncrementTick+0x46>
 8011ef2:	4b41      	ldr	r3, [pc, #260]	@ (8011ff8 <xTaskIncrementTick+0x150>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	60fb      	str	r3, [r7, #12]
 8011ef8:	4b40      	ldr	r3, [pc, #256]	@ (8011ffc <xTaskIncrementTick+0x154>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a3e      	ldr	r2, [pc, #248]	@ (8011ff8 <xTaskIncrementTick+0x150>)
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	4a3e      	ldr	r2, [pc, #248]	@ (8011ffc <xTaskIncrementTick+0x154>)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	6013      	str	r3, [r2, #0]
 8011f06:	4b3e      	ldr	r3, [pc, #248]	@ (8012000 <xTaskIncrementTick+0x158>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8012000 <xTaskIncrementTick+0x158>)
 8011f0e:	6013      	str	r3, [r2, #0]
 8011f10:	f000 fae2 	bl	80124d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011f14:	4b3b      	ldr	r3, [pc, #236]	@ (8012004 <xTaskIncrementTick+0x15c>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	693a      	ldr	r2, [r7, #16]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d349      	bcc.n	8011fb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f1e:	4b36      	ldr	r3, [pc, #216]	@ (8011ff8 <xTaskIncrementTick+0x150>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d104      	bne.n	8011f32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f28:	4b36      	ldr	r3, [pc, #216]	@ (8012004 <xTaskIncrementTick+0x15c>)
 8011f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2e:	601a      	str	r2, [r3, #0]
					break;
 8011f30:	e03f      	b.n	8011fb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f32:	4b31      	ldr	r3, [pc, #196]	@ (8011ff8 <xTaskIncrementTick+0x150>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011f42:	693a      	ldr	r2, [r7, #16]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d203      	bcs.n	8011f52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8012004 <xTaskIncrementTick+0x15c>)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011f50:	e02f      	b.n	8011fb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	3304      	adds	r3, #4
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fe fedc 	bl	8010d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d004      	beq.n	8011f6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	3318      	adds	r3, #24
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe fed3 	bl	8010d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f72:	4b25      	ldr	r3, [pc, #148]	@ (8012008 <xTaskIncrementTick+0x160>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d903      	bls.n	8011f82 <xTaskIncrementTick+0xda>
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f7e:	4a22      	ldr	r2, [pc, #136]	@ (8012008 <xTaskIncrementTick+0x160>)
 8011f80:	6013      	str	r3, [r2, #0]
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f86:	4613      	mov	r3, r2
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	009b      	lsls	r3, r3, #2
 8011f8e:	4a1f      	ldr	r2, [pc, #124]	@ (801200c <xTaskIncrementTick+0x164>)
 8011f90:	441a      	add	r2, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	3304      	adds	r3, #4
 8011f96:	4619      	mov	r1, r3
 8011f98:	4610      	mov	r0, r2
 8011f9a:	f7fe fe5e 	bl	8010c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8012010 <xTaskIncrementTick+0x168>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d3b8      	bcc.n	8011f1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011fac:	2301      	movs	r3, #1
 8011fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fb0:	e7b5      	b.n	8011f1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011fb2:	4b17      	ldr	r3, [pc, #92]	@ (8012010 <xTaskIncrementTick+0x168>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fb8:	4914      	ldr	r1, [pc, #80]	@ (801200c <xTaskIncrementTick+0x164>)
 8011fba:	4613      	mov	r3, r2
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	4413      	add	r3, r2
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	440b      	add	r3, r1
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d901      	bls.n	8011fce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011fce:	4b11      	ldr	r3, [pc, #68]	@ (8012014 <xTaskIncrementTick+0x16c>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d007      	beq.n	8011fe6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	617b      	str	r3, [r7, #20]
 8011fda:	e004      	b.n	8011fe6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8012018 <xTaskIncrementTick+0x170>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8012018 <xTaskIncrementTick+0x170>)
 8011fe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011fe6:	697b      	ldr	r3, [r7, #20]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	2400373c 	.word	0x2400373c
 8011ff4:	24003718 	.word	0x24003718
 8011ff8:	240036cc 	.word	0x240036cc
 8011ffc:	240036d0 	.word	0x240036d0
 8012000:	2400372c 	.word	0x2400372c
 8012004:	24003734 	.word	0x24003734
 8012008:	2400371c 	.word	0x2400371c
 801200c:	24003244 	.word	0x24003244
 8012010:	24003240 	.word	0x24003240
 8012014:	24003728 	.word	0x24003728
 8012018:	24003724 	.word	0x24003724

0801201c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801201c:	b480      	push	{r7}
 801201e:	b085      	sub	sp, #20
 8012020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012022:	4b2b      	ldr	r3, [pc, #172]	@ (80120d0 <vTaskSwitchContext+0xb4>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d003      	beq.n	8012032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801202a:	4b2a      	ldr	r3, [pc, #168]	@ (80120d4 <vTaskSwitchContext+0xb8>)
 801202c:	2201      	movs	r2, #1
 801202e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012030:	e047      	b.n	80120c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8012032:	4b28      	ldr	r3, [pc, #160]	@ (80120d4 <vTaskSwitchContext+0xb8>)
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012038:	4b27      	ldr	r3, [pc, #156]	@ (80120d8 <vTaskSwitchContext+0xbc>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	60fb      	str	r3, [r7, #12]
 801203e:	e011      	b.n	8012064 <vTaskSwitchContext+0x48>
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d10b      	bne.n	801205e <vTaskSwitchContext+0x42>
	__asm volatile
 8012046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801204a:	f383 8811 	msr	BASEPRI, r3
 801204e:	f3bf 8f6f 	isb	sy
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	607b      	str	r3, [r7, #4]
}
 8012058:	bf00      	nop
 801205a:	bf00      	nop
 801205c:	e7fd      	b.n	801205a <vTaskSwitchContext+0x3e>
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3b01      	subs	r3, #1
 8012062:	60fb      	str	r3, [r7, #12]
 8012064:	491d      	ldr	r1, [pc, #116]	@ (80120dc <vTaskSwitchContext+0xc0>)
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	4613      	mov	r3, r2
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4413      	add	r3, r2
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	440b      	add	r3, r1
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d0e3      	beq.n	8012040 <vTaskSwitchContext+0x24>
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	4613      	mov	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	4413      	add	r3, r2
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	4a16      	ldr	r2, [pc, #88]	@ (80120dc <vTaskSwitchContext+0xc0>)
 8012084:	4413      	add	r3, r2
 8012086:	60bb      	str	r3, [r7, #8]
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	685a      	ldr	r2, [r3, #4]
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	605a      	str	r2, [r3, #4]
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	685a      	ldr	r2, [r3, #4]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	3308      	adds	r3, #8
 801209a:	429a      	cmp	r2, r3
 801209c:	d104      	bne.n	80120a8 <vTaskSwitchContext+0x8c>
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	685a      	ldr	r2, [r3, #4]
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	605a      	str	r2, [r3, #4]
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	4a0c      	ldr	r2, [pc, #48]	@ (80120e0 <vTaskSwitchContext+0xc4>)
 80120b0:	6013      	str	r3, [r2, #0]
 80120b2:	4a09      	ldr	r2, [pc, #36]	@ (80120d8 <vTaskSwitchContext+0xbc>)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80120b8:	4b09      	ldr	r3, [pc, #36]	@ (80120e0 <vTaskSwitchContext+0xc4>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	3354      	adds	r3, #84	@ 0x54
 80120be:	4a09      	ldr	r2, [pc, #36]	@ (80120e4 <vTaskSwitchContext+0xc8>)
 80120c0:	6013      	str	r3, [r2, #0]
}
 80120c2:	bf00      	nop
 80120c4:	3714      	adds	r7, #20
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	2400373c 	.word	0x2400373c
 80120d4:	24003728 	.word	0x24003728
 80120d8:	2400371c 	.word	0x2400371c
 80120dc:	24003244 	.word	0x24003244
 80120e0:	24003240 	.word	0x24003240
 80120e4:	240001e4 	.word	0x240001e4

080120e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10b      	bne.n	8012110 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	60fb      	str	r3, [r7, #12]
}
 801210a:	bf00      	nop
 801210c:	bf00      	nop
 801210e:	e7fd      	b.n	801210c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012110:	4b07      	ldr	r3, [pc, #28]	@ (8012130 <vTaskPlaceOnEventList+0x48>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	3318      	adds	r3, #24
 8012116:	4619      	mov	r1, r3
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7fe fdc2 	bl	8010ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801211e:	2101      	movs	r1, #1
 8012120:	6838      	ldr	r0, [r7, #0]
 8012122:	f000 fa87 	bl	8012634 <prvAddCurrentTaskToDelayedList>
}
 8012126:	bf00      	nop
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	24003240 	.word	0x24003240

08012134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d10b      	bne.n	801215e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8012146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801214a:	f383 8811 	msr	BASEPRI, r3
 801214e:	f3bf 8f6f 	isb	sy
 8012152:	f3bf 8f4f 	dsb	sy
 8012156:	617b      	str	r3, [r7, #20]
}
 8012158:	bf00      	nop
 801215a:	bf00      	nop
 801215c:	e7fd      	b.n	801215a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801215e:	4b0a      	ldr	r3, [pc, #40]	@ (8012188 <vTaskPlaceOnEventListRestricted+0x54>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	3318      	adds	r3, #24
 8012164:	4619      	mov	r1, r3
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f7fe fd77 	bl	8010c5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d002      	beq.n	8012178 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012172:	f04f 33ff 	mov.w	r3, #4294967295
 8012176:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012178:	6879      	ldr	r1, [r7, #4]
 801217a:	68b8      	ldr	r0, [r7, #8]
 801217c:	f000 fa5a 	bl	8012634 <prvAddCurrentTaskToDelayedList>
	}
 8012180:	bf00      	nop
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	24003240 	.word	0x24003240

0801218c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b086      	sub	sp, #24
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10b      	bne.n	80121ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80121a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	60fb      	str	r3, [r7, #12]
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop
 80121b8:	e7fd      	b.n	80121b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	3318      	adds	r3, #24
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fe fda8 	bl	8010d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121c4:	4b1d      	ldr	r3, [pc, #116]	@ (801223c <xTaskRemoveFromEventList+0xb0>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d11d      	bne.n	8012208 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	3304      	adds	r3, #4
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe fd9f 	bl	8010d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121da:	4b19      	ldr	r3, [pc, #100]	@ (8012240 <xTaskRemoveFromEventList+0xb4>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d903      	bls.n	80121ea <xTaskRemoveFromEventList+0x5e>
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121e6:	4a16      	ldr	r2, [pc, #88]	@ (8012240 <xTaskRemoveFromEventList+0xb4>)
 80121e8:	6013      	str	r3, [r2, #0]
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121ee:	4613      	mov	r3, r2
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	4413      	add	r3, r2
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	4a13      	ldr	r2, [pc, #76]	@ (8012244 <xTaskRemoveFromEventList+0xb8>)
 80121f8:	441a      	add	r2, r3
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	3304      	adds	r3, #4
 80121fe:	4619      	mov	r1, r3
 8012200:	4610      	mov	r0, r2
 8012202:	f7fe fd2a 	bl	8010c5a <vListInsertEnd>
 8012206:	e005      	b.n	8012214 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	3318      	adds	r3, #24
 801220c:	4619      	mov	r1, r3
 801220e:	480e      	ldr	r0, [pc, #56]	@ (8012248 <xTaskRemoveFromEventList+0xbc>)
 8012210:	f7fe fd23 	bl	8010c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012218:	4b0c      	ldr	r3, [pc, #48]	@ (801224c <xTaskRemoveFromEventList+0xc0>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801221e:	429a      	cmp	r2, r3
 8012220:	d905      	bls.n	801222e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012222:	2301      	movs	r3, #1
 8012224:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012226:	4b0a      	ldr	r3, [pc, #40]	@ (8012250 <xTaskRemoveFromEventList+0xc4>)
 8012228:	2201      	movs	r2, #1
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	e001      	b.n	8012232 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801222e:	2300      	movs	r3, #0
 8012230:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012232:	697b      	ldr	r3, [r7, #20]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3718      	adds	r7, #24
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	2400373c 	.word	0x2400373c
 8012240:	2400371c 	.word	0x2400371c
 8012244:	24003244 	.word	0x24003244
 8012248:	240036d4 	.word	0x240036d4
 801224c:	24003240 	.word	0x24003240
 8012250:	24003728 	.word	0x24003728

08012254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801225c:	4b06      	ldr	r3, [pc, #24]	@ (8012278 <vTaskInternalSetTimeOutState+0x24>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012264:	4b05      	ldr	r3, [pc, #20]	@ (801227c <vTaskInternalSetTimeOutState+0x28>)
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	605a      	str	r2, [r3, #4]
}
 801226c:	bf00      	nop
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012276:	4770      	bx	lr
 8012278:	2400372c 	.word	0x2400372c
 801227c:	24003718 	.word	0x24003718

08012280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b088      	sub	sp, #32
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10b      	bne.n	80122a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012294:	f383 8811 	msr	BASEPRI, r3
 8012298:	f3bf 8f6f 	isb	sy
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	613b      	str	r3, [r7, #16]
}
 80122a2:	bf00      	nop
 80122a4:	bf00      	nop
 80122a6:	e7fd      	b.n	80122a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10b      	bne.n	80122c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80122ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	60fb      	str	r3, [r7, #12]
}
 80122c0:	bf00      	nop
 80122c2:	bf00      	nop
 80122c4:	e7fd      	b.n	80122c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80122c6:	f000 fe97 	bl	8012ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80122ca:	4b1d      	ldr	r3, [pc, #116]	@ (8012340 <xTaskCheckForTimeOut+0xc0>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	69ba      	ldr	r2, [r7, #24]
 80122d6:	1ad3      	subs	r3, r2, r3
 80122d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e2:	d102      	bne.n	80122ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80122e4:	2300      	movs	r3, #0
 80122e6:	61fb      	str	r3, [r7, #28]
 80122e8:	e023      	b.n	8012332 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	4b15      	ldr	r3, [pc, #84]	@ (8012344 <xTaskCheckForTimeOut+0xc4>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d007      	beq.n	8012306 <xTaskCheckForTimeOut+0x86>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	69ba      	ldr	r2, [r7, #24]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d302      	bcc.n	8012306 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012300:	2301      	movs	r3, #1
 8012302:	61fb      	str	r3, [r7, #28]
 8012304:	e015      	b.n	8012332 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	697a      	ldr	r2, [r7, #20]
 801230c:	429a      	cmp	r2, r3
 801230e:	d20b      	bcs.n	8012328 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	1ad2      	subs	r2, r2, r3
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff ff99 	bl	8012254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012322:	2300      	movs	r3, #0
 8012324:	61fb      	str	r3, [r7, #28]
 8012326:	e004      	b.n	8012332 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	2200      	movs	r2, #0
 801232c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801232e:	2301      	movs	r3, #1
 8012330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012332:	f000 fe93 	bl	801305c <vPortExitCritical>

	return xReturn;
 8012336:	69fb      	ldr	r3, [r7, #28]
}
 8012338:	4618      	mov	r0, r3
 801233a:	3720      	adds	r7, #32
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	24003718 	.word	0x24003718
 8012344:	2400372c 	.word	0x2400372c

08012348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012348:	b480      	push	{r7}
 801234a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801234c:	4b03      	ldr	r3, [pc, #12]	@ (801235c <vTaskMissedYield+0x14>)
 801234e:	2201      	movs	r2, #1
 8012350:	601a      	str	r2, [r3, #0]
}
 8012352:	bf00      	nop
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr
 801235c:	24003728 	.word	0x24003728

08012360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012368:	f000 f852 	bl	8012410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801236c:	4b06      	ldr	r3, [pc, #24]	@ (8012388 <prvIdleTask+0x28>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d9f9      	bls.n	8012368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012374:	4b05      	ldr	r3, [pc, #20]	@ (801238c <prvIdleTask+0x2c>)
 8012376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012384:	e7f0      	b.n	8012368 <prvIdleTask+0x8>
 8012386:	bf00      	nop
 8012388:	24003244 	.word	0x24003244
 801238c:	e000ed04 	.word	0xe000ed04

08012390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012396:	2300      	movs	r3, #0
 8012398:	607b      	str	r3, [r7, #4]
 801239a:	e00c      	b.n	80123b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	4613      	mov	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4413      	add	r3, r2
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	4a12      	ldr	r2, [pc, #72]	@ (80123f0 <prvInitialiseTaskLists+0x60>)
 80123a8:	4413      	add	r3, r2
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe fc28 	bl	8010c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	3301      	adds	r3, #1
 80123b4:	607b      	str	r3, [r7, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2b37      	cmp	r3, #55	@ 0x37
 80123ba:	d9ef      	bls.n	801239c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80123bc:	480d      	ldr	r0, [pc, #52]	@ (80123f4 <prvInitialiseTaskLists+0x64>)
 80123be:	f7fe fc1f 	bl	8010c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80123c2:	480d      	ldr	r0, [pc, #52]	@ (80123f8 <prvInitialiseTaskLists+0x68>)
 80123c4:	f7fe fc1c 	bl	8010c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80123c8:	480c      	ldr	r0, [pc, #48]	@ (80123fc <prvInitialiseTaskLists+0x6c>)
 80123ca:	f7fe fc19 	bl	8010c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80123ce:	480c      	ldr	r0, [pc, #48]	@ (8012400 <prvInitialiseTaskLists+0x70>)
 80123d0:	f7fe fc16 	bl	8010c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80123d4:	480b      	ldr	r0, [pc, #44]	@ (8012404 <prvInitialiseTaskLists+0x74>)
 80123d6:	f7fe fc13 	bl	8010c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80123da:	4b0b      	ldr	r3, [pc, #44]	@ (8012408 <prvInitialiseTaskLists+0x78>)
 80123dc:	4a05      	ldr	r2, [pc, #20]	@ (80123f4 <prvInitialiseTaskLists+0x64>)
 80123de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80123e0:	4b0a      	ldr	r3, [pc, #40]	@ (801240c <prvInitialiseTaskLists+0x7c>)
 80123e2:	4a05      	ldr	r2, [pc, #20]	@ (80123f8 <prvInitialiseTaskLists+0x68>)
 80123e4:	601a      	str	r2, [r3, #0]
}
 80123e6:	bf00      	nop
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	24003244 	.word	0x24003244
 80123f4:	240036a4 	.word	0x240036a4
 80123f8:	240036b8 	.word	0x240036b8
 80123fc:	240036d4 	.word	0x240036d4
 8012400:	240036e8 	.word	0x240036e8
 8012404:	24003700 	.word	0x24003700
 8012408:	240036cc 	.word	0x240036cc
 801240c:	240036d0 	.word	0x240036d0

08012410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012416:	e019      	b.n	801244c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012418:	f000 fdee 	bl	8012ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801241c:	4b10      	ldr	r3, [pc, #64]	@ (8012460 <prvCheckTasksWaitingTermination+0x50>)
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	3304      	adds	r3, #4
 8012428:	4618      	mov	r0, r3
 801242a:	f7fe fc73 	bl	8010d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801242e:	4b0d      	ldr	r3, [pc, #52]	@ (8012464 <prvCheckTasksWaitingTermination+0x54>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3b01      	subs	r3, #1
 8012434:	4a0b      	ldr	r2, [pc, #44]	@ (8012464 <prvCheckTasksWaitingTermination+0x54>)
 8012436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012438:	4b0b      	ldr	r3, [pc, #44]	@ (8012468 <prvCheckTasksWaitingTermination+0x58>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	3b01      	subs	r3, #1
 801243e:	4a0a      	ldr	r2, [pc, #40]	@ (8012468 <prvCheckTasksWaitingTermination+0x58>)
 8012440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012442:	f000 fe0b 	bl	801305c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f810 	bl	801246c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801244c:	4b06      	ldr	r3, [pc, #24]	@ (8012468 <prvCheckTasksWaitingTermination+0x58>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1e1      	bne.n	8012418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	240036e8 	.word	0x240036e8
 8012464:	24003714 	.word	0x24003714
 8012468:	240036fc 	.word	0x240036fc

0801246c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	3354      	adds	r3, #84	@ 0x54
 8012478:	4618      	mov	r0, r3
 801247a:	f002 fe73 	bl	8015164 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012484:	2b00      	cmp	r3, #0
 8012486:	d108      	bne.n	801249a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801248c:	4618      	mov	r0, r3
 801248e:	f000 ffa3 	bl	80133d8 <vPortFree>
				vPortFree( pxTCB );
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 ffa0 	bl	80133d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012498:	e019      	b.n	80124ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	d103      	bne.n	80124ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 ff97 	bl	80133d8 <vPortFree>
	}
 80124aa:	e010      	b.n	80124ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d00b      	beq.n	80124ce <prvDeleteTCB+0x62>
	__asm volatile
 80124b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	60fb      	str	r3, [r7, #12]
}
 80124c8:	bf00      	nop
 80124ca:	bf00      	nop
 80124cc:	e7fd      	b.n	80124ca <prvDeleteTCB+0x5e>
	}
 80124ce:	bf00      	nop
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
	...

080124d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80124de:	4b0c      	ldr	r3, [pc, #48]	@ (8012510 <prvResetNextTaskUnblockTime+0x38>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d104      	bne.n	80124f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80124e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012514 <prvResetNextTaskUnblockTime+0x3c>)
 80124ea:	f04f 32ff 	mov.w	r2, #4294967295
 80124ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80124f0:	e008      	b.n	8012504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124f2:	4b07      	ldr	r3, [pc, #28]	@ (8012510 <prvResetNextTaskUnblockTime+0x38>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	4a04      	ldr	r2, [pc, #16]	@ (8012514 <prvResetNextTaskUnblockTime+0x3c>)
 8012502:	6013      	str	r3, [r2, #0]
}
 8012504:	bf00      	nop
 8012506:	370c      	adds	r7, #12
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr
 8012510:	240036cc 	.word	0x240036cc
 8012514:	24003734 	.word	0x24003734

08012518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801251e:	4b0b      	ldr	r3, [pc, #44]	@ (801254c <xTaskGetSchedulerState+0x34>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d102      	bne.n	801252c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012526:	2301      	movs	r3, #1
 8012528:	607b      	str	r3, [r7, #4]
 801252a:	e008      	b.n	801253e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801252c:	4b08      	ldr	r3, [pc, #32]	@ (8012550 <xTaskGetSchedulerState+0x38>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d102      	bne.n	801253a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012534:	2302      	movs	r3, #2
 8012536:	607b      	str	r3, [r7, #4]
 8012538:	e001      	b.n	801253e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801253a:	2300      	movs	r3, #0
 801253c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801253e:	687b      	ldr	r3, [r7, #4]
	}
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr
 801254c:	24003720 	.word	0x24003720
 8012550:	2400373c 	.word	0x2400373c

08012554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012560:	2300      	movs	r3, #0
 8012562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d058      	beq.n	801261c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801256a:	4b2f      	ldr	r3, [pc, #188]	@ (8012628 <xTaskPriorityDisinherit+0xd4>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	429a      	cmp	r2, r3
 8012572:	d00b      	beq.n	801258c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	60fb      	str	r3, [r7, #12]
}
 8012586:	bf00      	nop
 8012588:	bf00      	nop
 801258a:	e7fd      	b.n	8012588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10b      	bne.n	80125ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012598:	f383 8811 	msr	BASEPRI, r3
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	f3bf 8f4f 	dsb	sy
 80125a4:	60bb      	str	r3, [r7, #8]
}
 80125a6:	bf00      	nop
 80125a8:	bf00      	nop
 80125aa:	e7fd      	b.n	80125a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125b0:	1e5a      	subs	r2, r3, #1
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125be:	429a      	cmp	r2, r3
 80125c0:	d02c      	beq.n	801261c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d128      	bne.n	801261c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	3304      	adds	r3, #4
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe fba0 	bl	8010d14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ec:	4b0f      	ldr	r3, [pc, #60]	@ (801262c <xTaskPriorityDisinherit+0xd8>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d903      	bls.n	80125fc <xTaskPriorityDisinherit+0xa8>
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f8:	4a0c      	ldr	r2, [pc, #48]	@ (801262c <xTaskPriorityDisinherit+0xd8>)
 80125fa:	6013      	str	r3, [r2, #0]
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012600:	4613      	mov	r3, r2
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	4413      	add	r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	4a09      	ldr	r2, [pc, #36]	@ (8012630 <xTaskPriorityDisinherit+0xdc>)
 801260a:	441a      	add	r2, r3
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	3304      	adds	r3, #4
 8012610:	4619      	mov	r1, r3
 8012612:	4610      	mov	r0, r2
 8012614:	f7fe fb21 	bl	8010c5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012618:	2301      	movs	r3, #1
 801261a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801261c:	697b      	ldr	r3, [r7, #20]
	}
 801261e:	4618      	mov	r0, r3
 8012620:	3718      	adds	r7, #24
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	24003240 	.word	0x24003240
 801262c:	2400371c 	.word	0x2400371c
 8012630:	24003244 	.word	0x24003244

08012634 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801263e:	4b21      	ldr	r3, [pc, #132]	@ (80126c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012644:	4b20      	ldr	r3, [pc, #128]	@ (80126c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	3304      	adds	r3, #4
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe fb62 	bl	8010d14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012656:	d10a      	bne.n	801266e <prvAddCurrentTaskToDelayedList+0x3a>
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d007      	beq.n	801266e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801265e:	4b1a      	ldr	r3, [pc, #104]	@ (80126c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	3304      	adds	r3, #4
 8012664:	4619      	mov	r1, r3
 8012666:	4819      	ldr	r0, [pc, #100]	@ (80126cc <prvAddCurrentTaskToDelayedList+0x98>)
 8012668:	f7fe faf7 	bl	8010c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801266c:	e026      	b.n	80126bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	4413      	add	r3, r2
 8012674:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012676:	4b14      	ldr	r3, [pc, #80]	@ (80126c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	68ba      	ldr	r2, [r7, #8]
 801267c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	429a      	cmp	r2, r3
 8012684:	d209      	bcs.n	801269a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012686:	4b12      	ldr	r3, [pc, #72]	@ (80126d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	4b0f      	ldr	r3, [pc, #60]	@ (80126c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	3304      	adds	r3, #4
 8012690:	4619      	mov	r1, r3
 8012692:	4610      	mov	r0, r2
 8012694:	f7fe fb05 	bl	8010ca2 <vListInsert>
}
 8012698:	e010      	b.n	80126bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801269a:	4b0e      	ldr	r3, [pc, #56]	@ (80126d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	4b0a      	ldr	r3, [pc, #40]	@ (80126c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	3304      	adds	r3, #4
 80126a4:	4619      	mov	r1, r3
 80126a6:	4610      	mov	r0, r2
 80126a8:	f7fe fafb 	bl	8010ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80126ac:	4b0a      	ldr	r3, [pc, #40]	@ (80126d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d202      	bcs.n	80126bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80126b6:	4a08      	ldr	r2, [pc, #32]	@ (80126d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	6013      	str	r3, [r2, #0]
}
 80126bc:	bf00      	nop
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	24003718 	.word	0x24003718
 80126c8:	24003240 	.word	0x24003240
 80126cc:	24003700 	.word	0x24003700
 80126d0:	240036d0 	.word	0x240036d0
 80126d4:	240036cc 	.word	0x240036cc
 80126d8:	24003734 	.word	0x24003734

080126dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b08a      	sub	sp, #40	@ 0x28
 80126e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80126e6:	f000 fb13 	bl	8012d10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80126ea:	4b1d      	ldr	r3, [pc, #116]	@ (8012760 <xTimerCreateTimerTask+0x84>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d021      	beq.n	8012736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80126f2:	2300      	movs	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80126fa:	1d3a      	adds	r2, r7, #4
 80126fc:	f107 0108 	add.w	r1, r7, #8
 8012700:	f107 030c 	add.w	r3, r7, #12
 8012704:	4618      	mov	r0, r3
 8012706:	f7fe fa61 	bl	8010bcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	68fa      	ldr	r2, [r7, #12]
 8012710:	9202      	str	r2, [sp, #8]
 8012712:	9301      	str	r3, [sp, #4]
 8012714:	2302      	movs	r3, #2
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	2300      	movs	r3, #0
 801271a:	460a      	mov	r2, r1
 801271c:	4911      	ldr	r1, [pc, #68]	@ (8012764 <xTimerCreateTimerTask+0x88>)
 801271e:	4812      	ldr	r0, [pc, #72]	@ (8012768 <xTimerCreateTimerTask+0x8c>)
 8012720:	f7ff f858 	bl	80117d4 <xTaskCreateStatic>
 8012724:	4603      	mov	r3, r0
 8012726:	4a11      	ldr	r2, [pc, #68]	@ (801276c <xTimerCreateTimerTask+0x90>)
 8012728:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801272a:	4b10      	ldr	r3, [pc, #64]	@ (801276c <xTimerCreateTimerTask+0x90>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d001      	beq.n	8012736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012732:	2301      	movs	r3, #1
 8012734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10b      	bne.n	8012754 <xTimerCreateTimerTask+0x78>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	613b      	str	r3, [r7, #16]
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	e7fd      	b.n	8012750 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012754:	697b      	ldr	r3, [r7, #20]
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	24003770 	.word	0x24003770
 8012764:	08017ec4 	.word	0x08017ec4
 8012768:	080128a9 	.word	0x080128a9
 801276c:	24003774 	.word	0x24003774

08012770 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08a      	sub	sp, #40	@ 0x28
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	607a      	str	r2, [r7, #4]
 801277c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801277e:	2300      	movs	r3, #0
 8012780:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10b      	bne.n	80127a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8012788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801278c:	f383 8811 	msr	BASEPRI, r3
 8012790:	f3bf 8f6f 	isb	sy
 8012794:	f3bf 8f4f 	dsb	sy
 8012798:	623b      	str	r3, [r7, #32]
}
 801279a:	bf00      	nop
 801279c:	bf00      	nop
 801279e:	e7fd      	b.n	801279c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80127a0:	4b19      	ldr	r3, [pc, #100]	@ (8012808 <xTimerGenericCommand+0x98>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d02a      	beq.n	80127fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b05      	cmp	r3, #5
 80127b8:	dc18      	bgt.n	80127ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80127ba:	f7ff fead 	bl	8012518 <xTaskGetSchedulerState>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b02      	cmp	r3, #2
 80127c2:	d109      	bne.n	80127d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80127c4:	4b10      	ldr	r3, [pc, #64]	@ (8012808 <xTimerGenericCommand+0x98>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	f107 0110 	add.w	r1, r7, #16
 80127cc:	2300      	movs	r3, #0
 80127ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80127d0:	f7fe fc10 	bl	8010ff4 <xQueueGenericSend>
 80127d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80127d6:	e012      	b.n	80127fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80127d8:	4b0b      	ldr	r3, [pc, #44]	@ (8012808 <xTimerGenericCommand+0x98>)
 80127da:	6818      	ldr	r0, [r3, #0]
 80127dc:	f107 0110 	add.w	r1, r7, #16
 80127e0:	2300      	movs	r3, #0
 80127e2:	2200      	movs	r2, #0
 80127e4:	f7fe fc06 	bl	8010ff4 <xQueueGenericSend>
 80127e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80127ea:	e008      	b.n	80127fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80127ec:	4b06      	ldr	r3, [pc, #24]	@ (8012808 <xTimerGenericCommand+0x98>)
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	f107 0110 	add.w	r1, r7, #16
 80127f4:	2300      	movs	r3, #0
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	f7fe fcfe 	bl	80111f8 <xQueueGenericSendFromISR>
 80127fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80127fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012800:	4618      	mov	r0, r3
 8012802:	3728      	adds	r7, #40	@ 0x28
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	24003770 	.word	0x24003770

0801280c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b088      	sub	sp, #32
 8012810:	af02      	add	r7, sp, #8
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012816:	4b23      	ldr	r3, [pc, #140]	@ (80128a4 <prvProcessExpiredTimer+0x98>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	68db      	ldr	r3, [r3, #12]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	3304      	adds	r3, #4
 8012824:	4618      	mov	r0, r3
 8012826:	f7fe fa75 	bl	8010d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012830:	f003 0304 	and.w	r3, r3, #4
 8012834:	2b00      	cmp	r3, #0
 8012836:	d023      	beq.n	8012880 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	699a      	ldr	r2, [r3, #24]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	18d1      	adds	r1, r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	6978      	ldr	r0, [r7, #20]
 8012846:	f000 f8d5 	bl	80129f4 <prvInsertTimerInActiveList>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d020      	beq.n	8012892 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012850:	2300      	movs	r3, #0
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	2300      	movs	r3, #0
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	2100      	movs	r1, #0
 801285a:	6978      	ldr	r0, [r7, #20]
 801285c:	f7ff ff88 	bl	8012770 <xTimerGenericCommand>
 8012860:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d114      	bne.n	8012892 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801286c:	f383 8811 	msr	BASEPRI, r3
 8012870:	f3bf 8f6f 	isb	sy
 8012874:	f3bf 8f4f 	dsb	sy
 8012878:	60fb      	str	r3, [r7, #12]
}
 801287a:	bf00      	nop
 801287c:	bf00      	nop
 801287e:	e7fd      	b.n	801287c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012886:	f023 0301 	bic.w	r3, r3, #1
 801288a:	b2da      	uxtb	r2, r3
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	6a1b      	ldr	r3, [r3, #32]
 8012896:	6978      	ldr	r0, [r7, #20]
 8012898:	4798      	blx	r3
}
 801289a:	bf00      	nop
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	24003768 	.word	0x24003768

080128a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80128b0:	f107 0308 	add.w	r3, r7, #8
 80128b4:	4618      	mov	r0, r3
 80128b6:	f000 f859 	bl	801296c <prvGetNextExpireTime>
 80128ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	4619      	mov	r1, r3
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f000 f805 	bl	80128d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80128c6:	f000 f8d7 	bl	8012a78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80128ca:	bf00      	nop
 80128cc:	e7f0      	b.n	80128b0 <prvTimerTask+0x8>
	...

080128d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80128da:	f7ff fa29 	bl	8011d30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80128de:	f107 0308 	add.w	r3, r7, #8
 80128e2:	4618      	mov	r0, r3
 80128e4:	f000 f866 	bl	80129b4 <prvSampleTimeNow>
 80128e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d130      	bne.n	8012952 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d10a      	bne.n	801290c <prvProcessTimerOrBlockTask+0x3c>
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d806      	bhi.n	801290c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80128fe:	f7ff fa25 	bl	8011d4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012902:	68f9      	ldr	r1, [r7, #12]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7ff ff81 	bl	801280c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801290a:	e024      	b.n	8012956 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d008      	beq.n	8012924 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012912:	4b13      	ldr	r3, [pc, #76]	@ (8012960 <prvProcessTimerOrBlockTask+0x90>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d101      	bne.n	8012920 <prvProcessTimerOrBlockTask+0x50>
 801291c:	2301      	movs	r3, #1
 801291e:	e000      	b.n	8012922 <prvProcessTimerOrBlockTask+0x52>
 8012920:	2300      	movs	r3, #0
 8012922:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012924:	4b0f      	ldr	r3, [pc, #60]	@ (8012964 <prvProcessTimerOrBlockTask+0x94>)
 8012926:	6818      	ldr	r0, [r3, #0]
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	1ad3      	subs	r3, r2, r3
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	4619      	mov	r1, r3
 8012932:	f7fe ff1b 	bl	801176c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012936:	f7ff fa09 	bl	8011d4c <xTaskResumeAll>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10a      	bne.n	8012956 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012940:	4b09      	ldr	r3, [pc, #36]	@ (8012968 <prvProcessTimerOrBlockTask+0x98>)
 8012942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012946:	601a      	str	r2, [r3, #0]
 8012948:	f3bf 8f4f 	dsb	sy
 801294c:	f3bf 8f6f 	isb	sy
}
 8012950:	e001      	b.n	8012956 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012952:	f7ff f9fb 	bl	8011d4c <xTaskResumeAll>
}
 8012956:	bf00      	nop
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	2400376c 	.word	0x2400376c
 8012964:	24003770 	.word	0x24003770
 8012968:	e000ed04 	.word	0xe000ed04

0801296c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012974:	4b0e      	ldr	r3, [pc, #56]	@ (80129b0 <prvGetNextExpireTime+0x44>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d101      	bne.n	8012982 <prvGetNextExpireTime+0x16>
 801297e:	2201      	movs	r2, #1
 8012980:	e000      	b.n	8012984 <prvGetNextExpireTime+0x18>
 8012982:	2200      	movs	r2, #0
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d105      	bne.n	801299c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012990:	4b07      	ldr	r3, [pc, #28]	@ (80129b0 <prvGetNextExpireTime+0x44>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60fb      	str	r3, [r7, #12]
 801299a:	e001      	b.n	80129a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801299c:	2300      	movs	r3, #0
 801299e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80129a0:	68fb      	ldr	r3, [r7, #12]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3714      	adds	r7, #20
 80129a6:	46bd      	mov	sp, r7
 80129a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	24003768 	.word	0x24003768

080129b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80129bc:	f7ff fa64 	bl	8011e88 <xTaskGetTickCount>
 80129c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80129c2:	4b0b      	ldr	r3, [pc, #44]	@ (80129f0 <prvSampleTimeNow+0x3c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	68fa      	ldr	r2, [r7, #12]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d205      	bcs.n	80129d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80129cc:	f000 f93a 	bl	8012c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2201      	movs	r2, #1
 80129d4:	601a      	str	r2, [r3, #0]
 80129d6:	e002      	b.n	80129de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2200      	movs	r2, #0
 80129dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80129de:	4a04      	ldr	r2, [pc, #16]	@ (80129f0 <prvSampleTimeNow+0x3c>)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80129e4:	68fb      	ldr	r3, [r7, #12]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3710      	adds	r7, #16
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	24003778 	.word	0x24003778

080129f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b086      	sub	sp, #24
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
 8012a00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012a02:	2300      	movs	r3, #0
 8012a04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	68ba      	ldr	r2, [r7, #8]
 8012a0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012a12:	68ba      	ldr	r2, [r7, #8]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d812      	bhi.n	8012a40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	1ad2      	subs	r2, r2, r3
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	699b      	ldr	r3, [r3, #24]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d302      	bcc.n	8012a2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	617b      	str	r3, [r7, #20]
 8012a2c:	e01b      	b.n	8012a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012a2e:	4b10      	ldr	r3, [pc, #64]	@ (8012a70 <prvInsertTimerInActiveList+0x7c>)
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	3304      	adds	r3, #4
 8012a36:	4619      	mov	r1, r3
 8012a38:	4610      	mov	r0, r2
 8012a3a:	f7fe f932 	bl	8010ca2 <vListInsert>
 8012a3e:	e012      	b.n	8012a66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d206      	bcs.n	8012a56 <prvInsertTimerInActiveList+0x62>
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d302      	bcc.n	8012a56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012a50:	2301      	movs	r3, #1
 8012a52:	617b      	str	r3, [r7, #20]
 8012a54:	e007      	b.n	8012a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a56:	4b07      	ldr	r3, [pc, #28]	@ (8012a74 <prvInsertTimerInActiveList+0x80>)
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4610      	mov	r0, r2
 8012a62:	f7fe f91e 	bl	8010ca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012a66:	697b      	ldr	r3, [r7, #20]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3718      	adds	r7, #24
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	2400376c 	.word	0x2400376c
 8012a74:	24003768 	.word	0x24003768

08012a78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b08e      	sub	sp, #56	@ 0x38
 8012a7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a7e:	e0ce      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	da19      	bge.n	8012aba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012a86:	1d3b      	adds	r3, r7, #4
 8012a88:	3304      	adds	r3, #4
 8012a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d10b      	bne.n	8012aaa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	61fb      	str	r3, [r7, #28]
}
 8012aa4:	bf00      	nop
 8012aa6:	bf00      	nop
 8012aa8:	e7fd      	b.n	8012aa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ab0:	6850      	ldr	r0, [r2, #4]
 8012ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ab4:	6892      	ldr	r2, [r2, #8]
 8012ab6:	4611      	mov	r1, r2
 8012ab8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	f2c0 80ae 	blt.w	8012c1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ac8:	695b      	ldr	r3, [r3, #20]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d004      	beq.n	8012ad8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad0:	3304      	adds	r3, #4
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fe f91e 	bl	8010d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ad8:	463b      	mov	r3, r7
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff ff6a 	bl	80129b4 <prvSampleTimeNow>
 8012ae0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2b09      	cmp	r3, #9
 8012ae6:	f200 8097 	bhi.w	8012c18 <prvProcessReceivedCommands+0x1a0>
 8012aea:	a201      	add	r2, pc, #4	@ (adr r2, 8012af0 <prvProcessReceivedCommands+0x78>)
 8012aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af0:	08012b19 	.word	0x08012b19
 8012af4:	08012b19 	.word	0x08012b19
 8012af8:	08012b19 	.word	0x08012b19
 8012afc:	08012b8f 	.word	0x08012b8f
 8012b00:	08012ba3 	.word	0x08012ba3
 8012b04:	08012bef 	.word	0x08012bef
 8012b08:	08012b19 	.word	0x08012b19
 8012b0c:	08012b19 	.word	0x08012b19
 8012b10:	08012b8f 	.word	0x08012b8f
 8012b14:	08012ba3 	.word	0x08012ba3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b1e:	f043 0301 	orr.w	r3, r3, #1
 8012b22:	b2da      	uxtb	r2, r3
 8012b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012b2a:	68ba      	ldr	r2, [r7, #8]
 8012b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b2e:	699b      	ldr	r3, [r3, #24]
 8012b30:	18d1      	adds	r1, r2, r3
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b38:	f7ff ff5c 	bl	80129f4 <prvInsertTimerInActiveList>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d06c      	beq.n	8012c1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b44:	6a1b      	ldr	r3, [r3, #32]
 8012b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b50:	f003 0304 	and.w	r3, r3, #4
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d061      	beq.n	8012c1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b5c:	699b      	ldr	r3, [r3, #24]
 8012b5e:	441a      	add	r2, r3
 8012b60:	2300      	movs	r3, #0
 8012b62:	9300      	str	r3, [sp, #0]
 8012b64:	2300      	movs	r3, #0
 8012b66:	2100      	movs	r1, #0
 8012b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b6a:	f7ff fe01 	bl	8012770 <xTimerGenericCommand>
 8012b6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d152      	bne.n	8012c1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8012b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7a:	f383 8811 	msr	BASEPRI, r3
 8012b7e:	f3bf 8f6f 	isb	sy
 8012b82:	f3bf 8f4f 	dsb	sy
 8012b86:	61bb      	str	r3, [r7, #24]
}
 8012b88:	bf00      	nop
 8012b8a:	bf00      	nop
 8012b8c:	e7fd      	b.n	8012b8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b94:	f023 0301 	bic.w	r3, r3, #1
 8012b98:	b2da      	uxtb	r2, r3
 8012b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012ba0:	e03d      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ba8:	f043 0301 	orr.w	r3, r3, #1
 8012bac:	b2da      	uxtb	r2, r3
 8012bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012bb4:	68ba      	ldr	r2, [r7, #8]
 8012bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d10b      	bne.n	8012bda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bc6:	f383 8811 	msr	BASEPRI, r3
 8012bca:	f3bf 8f6f 	isb	sy
 8012bce:	f3bf 8f4f 	dsb	sy
 8012bd2:	617b      	str	r3, [r7, #20]
}
 8012bd4:	bf00      	nop
 8012bd6:	bf00      	nop
 8012bd8:	e7fd      	b.n	8012bd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bdc:	699a      	ldr	r2, [r3, #24]
 8012bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be0:	18d1      	adds	r1, r2, r3
 8012be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012be8:	f7ff ff04 	bl	80129f4 <prvInsertTimerInActiveList>
					break;
 8012bec:	e017      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012bf4:	f003 0302 	and.w	r3, r3, #2
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d103      	bne.n	8012c04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012bfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bfe:	f000 fbeb 	bl	80133d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012c02:	e00c      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c0a:	f023 0301 	bic.w	r3, r3, #1
 8012c0e:	b2da      	uxtb	r2, r3
 8012c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012c16:	e002      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012c18:	bf00      	nop
 8012c1a:	e000      	b.n	8012c1e <prvProcessReceivedCommands+0x1a6>
					break;
 8012c1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012c1e:	4b08      	ldr	r3, [pc, #32]	@ (8012c40 <prvProcessReceivedCommands+0x1c8>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	1d39      	adds	r1, r7, #4
 8012c24:	2200      	movs	r2, #0
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe fb84 	bl	8011334 <xQueueReceive>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	f47f af26 	bne.w	8012a80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012c34:	bf00      	nop
 8012c36:	bf00      	nop
 8012c38:	3730      	adds	r7, #48	@ 0x30
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	24003770 	.word	0x24003770

08012c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b088      	sub	sp, #32
 8012c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c4a:	e049      	b.n	8012ce0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c56:	4b2c      	ldr	r3, [pc, #176]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	68db      	ldr	r3, [r3, #12]
 8012c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	3304      	adds	r3, #4
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fe f855 	bl	8010d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6a1b      	ldr	r3, [r3, #32]
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c78:	f003 0304 	and.w	r3, r3, #4
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d02f      	beq.n	8012ce0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	699b      	ldr	r3, [r3, #24]
 8012c84:	693a      	ldr	r2, [r7, #16]
 8012c86:	4413      	add	r3, r2
 8012c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d90e      	bls.n	8012cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	68ba      	ldr	r2, [r7, #8]
 8012c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	68fa      	ldr	r2, [r7, #12]
 8012c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	4610      	mov	r0, r2
 8012caa:	f7fd fffa 	bl	8010ca2 <vListInsert>
 8012cae:	e017      	b.n	8012ce0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	693a      	ldr	r2, [r7, #16]
 8012cb8:	2100      	movs	r1, #0
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7ff fd58 	bl	8012770 <xTimerGenericCommand>
 8012cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10b      	bne.n	8012ce0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ccc:	f383 8811 	msr	BASEPRI, r3
 8012cd0:	f3bf 8f6f 	isb	sy
 8012cd4:	f3bf 8f4f 	dsb	sy
 8012cd8:	603b      	str	r3, [r7, #0]
}
 8012cda:	bf00      	nop
 8012cdc:	bf00      	nop
 8012cde:	e7fd      	b.n	8012cdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ce0:	4b09      	ldr	r3, [pc, #36]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d1b0      	bne.n	8012c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012cea:	4b07      	ldr	r3, [pc, #28]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012cf0:	4b06      	ldr	r3, [pc, #24]	@ (8012d0c <prvSwitchTimerLists+0xc8>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	4a04      	ldr	r2, [pc, #16]	@ (8012d08 <prvSwitchTimerLists+0xc4>)
 8012cf6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012cf8:	4a04      	ldr	r2, [pc, #16]	@ (8012d0c <prvSwitchTimerLists+0xc8>)
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	6013      	str	r3, [r2, #0]
}
 8012cfe:	bf00      	nop
 8012d00:	3718      	adds	r7, #24
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	24003768 	.word	0x24003768
 8012d0c:	2400376c 	.word	0x2400376c

08012d10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012d16:	f000 f96f 	bl	8012ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012d1a:	4b15      	ldr	r3, [pc, #84]	@ (8012d70 <prvCheckForValidListAndQueue+0x60>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d120      	bne.n	8012d64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012d22:	4814      	ldr	r0, [pc, #80]	@ (8012d74 <prvCheckForValidListAndQueue+0x64>)
 8012d24:	f7fd ff6c 	bl	8010c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012d28:	4813      	ldr	r0, [pc, #76]	@ (8012d78 <prvCheckForValidListAndQueue+0x68>)
 8012d2a:	f7fd ff69 	bl	8010c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012d2e:	4b13      	ldr	r3, [pc, #76]	@ (8012d7c <prvCheckForValidListAndQueue+0x6c>)
 8012d30:	4a10      	ldr	r2, [pc, #64]	@ (8012d74 <prvCheckForValidListAndQueue+0x64>)
 8012d32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012d34:	4b12      	ldr	r3, [pc, #72]	@ (8012d80 <prvCheckForValidListAndQueue+0x70>)
 8012d36:	4a10      	ldr	r2, [pc, #64]	@ (8012d78 <prvCheckForValidListAndQueue+0x68>)
 8012d38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	9300      	str	r3, [sp, #0]
 8012d3e:	4b11      	ldr	r3, [pc, #68]	@ (8012d84 <prvCheckForValidListAndQueue+0x74>)
 8012d40:	4a11      	ldr	r2, [pc, #68]	@ (8012d88 <prvCheckForValidListAndQueue+0x78>)
 8012d42:	2110      	movs	r1, #16
 8012d44:	200a      	movs	r0, #10
 8012d46:	f7fe f879 	bl	8010e3c <xQueueGenericCreateStatic>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	4a08      	ldr	r2, [pc, #32]	@ (8012d70 <prvCheckForValidListAndQueue+0x60>)
 8012d4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012d50:	4b07      	ldr	r3, [pc, #28]	@ (8012d70 <prvCheckForValidListAndQueue+0x60>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d005      	beq.n	8012d64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012d58:	4b05      	ldr	r3, [pc, #20]	@ (8012d70 <prvCheckForValidListAndQueue+0x60>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	490b      	ldr	r1, [pc, #44]	@ (8012d8c <prvCheckForValidListAndQueue+0x7c>)
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fcda 	bl	8011718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d64:	f000 f97a 	bl	801305c <vPortExitCritical>
}
 8012d68:	bf00      	nop
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	24003770 	.word	0x24003770
 8012d74:	24003740 	.word	0x24003740
 8012d78:	24003754 	.word	0x24003754
 8012d7c:	24003768 	.word	0x24003768
 8012d80:	2400376c 	.word	0x2400376c
 8012d84:	2400381c 	.word	0x2400381c
 8012d88:	2400377c 	.word	0x2400377c
 8012d8c:	08017ecc 	.word	0x08017ecc

08012d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012d90:	b480      	push	{r7}
 8012d92:	b085      	sub	sp, #20
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3b04      	subs	r3, #4
 8012da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	3b04      	subs	r3, #4
 8012dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	f023 0201 	bic.w	r2, r3, #1
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	3b04      	subs	r3, #4
 8012dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8012df4 <pxPortInitialiseStack+0x64>)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	3b14      	subs	r3, #20
 8012dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	3b04      	subs	r3, #4
 8012dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f06f 0202 	mvn.w	r2, #2
 8012dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	3b20      	subs	r3, #32
 8012de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012de6:	68fb      	ldr	r3, [r7, #12]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr
 8012df4:	08012df9 	.word	0x08012df9

08012df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012e02:	4b13      	ldr	r3, [pc, #76]	@ (8012e50 <prvTaskExitError+0x58>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e0a:	d00b      	beq.n	8012e24 <prvTaskExitError+0x2c>
	__asm volatile
 8012e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e10:	f383 8811 	msr	BASEPRI, r3
 8012e14:	f3bf 8f6f 	isb	sy
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	60fb      	str	r3, [r7, #12]
}
 8012e1e:	bf00      	nop
 8012e20:	bf00      	nop
 8012e22:	e7fd      	b.n	8012e20 <prvTaskExitError+0x28>
	__asm volatile
 8012e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	60bb      	str	r3, [r7, #8]
}
 8012e36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012e38:	bf00      	nop
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d0fc      	beq.n	8012e3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012e40:	bf00      	nop
 8012e42:	bf00      	nop
 8012e44:	3714      	adds	r7, #20
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	24000068 	.word	0x24000068
	...

08012e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012e60:	4b07      	ldr	r3, [pc, #28]	@ (8012e80 <pxCurrentTCBConst2>)
 8012e62:	6819      	ldr	r1, [r3, #0]
 8012e64:	6808      	ldr	r0, [r1, #0]
 8012e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6a:	f380 8809 	msr	PSP, r0
 8012e6e:	f3bf 8f6f 	isb	sy
 8012e72:	f04f 0000 	mov.w	r0, #0
 8012e76:	f380 8811 	msr	BASEPRI, r0
 8012e7a:	4770      	bx	lr
 8012e7c:	f3af 8000 	nop.w

08012e80 <pxCurrentTCBConst2>:
 8012e80:	24003240 	.word	0x24003240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012e84:	bf00      	nop
 8012e86:	bf00      	nop

08012e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012e88:	4808      	ldr	r0, [pc, #32]	@ (8012eac <prvPortStartFirstTask+0x24>)
 8012e8a:	6800      	ldr	r0, [r0, #0]
 8012e8c:	6800      	ldr	r0, [r0, #0]
 8012e8e:	f380 8808 	msr	MSP, r0
 8012e92:	f04f 0000 	mov.w	r0, #0
 8012e96:	f380 8814 	msr	CONTROL, r0
 8012e9a:	b662      	cpsie	i
 8012e9c:	b661      	cpsie	f
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	f3bf 8f6f 	isb	sy
 8012ea6:	df00      	svc	0
 8012ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012eaa:	bf00      	nop
 8012eac:	e000ed08 	.word	0xe000ed08

08012eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012eb6:	4b47      	ldr	r3, [pc, #284]	@ (8012fd4 <xPortStartScheduler+0x124>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4a47      	ldr	r2, [pc, #284]	@ (8012fd8 <xPortStartScheduler+0x128>)
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d10b      	bne.n	8012ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8012ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	60fb      	str	r3, [r7, #12]
}
 8012ed2:	bf00      	nop
 8012ed4:	bf00      	nop
 8012ed6:	e7fd      	b.n	8012ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8012fd4 <xPortStartScheduler+0x124>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	4a3f      	ldr	r2, [pc, #252]	@ (8012fdc <xPortStartScheduler+0x12c>)
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d10b      	bne.n	8012efa <xPortStartScheduler+0x4a>
	__asm volatile
 8012ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	613b      	str	r3, [r7, #16]
}
 8012ef4:	bf00      	nop
 8012ef6:	bf00      	nop
 8012ef8:	e7fd      	b.n	8012ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012efa:	4b39      	ldr	r3, [pc, #228]	@ (8012fe0 <xPortStartScheduler+0x130>)
 8012efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	22ff      	movs	r2, #255	@ 0xff
 8012f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012f14:	78fb      	ldrb	r3, [r7, #3]
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012f1c:	b2da      	uxtb	r2, r3
 8012f1e:	4b31      	ldr	r3, [pc, #196]	@ (8012fe4 <xPortStartScheduler+0x134>)
 8012f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012f22:	4b31      	ldr	r3, [pc, #196]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f24:	2207      	movs	r2, #7
 8012f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012f28:	e009      	b.n	8012f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	4a2d      	ldr	r2, [pc, #180]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012f34:	78fb      	ldrb	r3, [r7, #3]
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012f3e:	78fb      	ldrb	r3, [r7, #3]
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012f46:	2b80      	cmp	r3, #128	@ 0x80
 8012f48:	d0ef      	beq.n	8012f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012f4a:	4b27      	ldr	r3, [pc, #156]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f1c3 0307 	rsb	r3, r3, #7
 8012f52:	2b04      	cmp	r3, #4
 8012f54:	d00b      	beq.n	8012f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8012f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f5a:	f383 8811 	msr	BASEPRI, r3
 8012f5e:	f3bf 8f6f 	isb	sy
 8012f62:	f3bf 8f4f 	dsb	sy
 8012f66:	60bb      	str	r3, [r7, #8]
}
 8012f68:	bf00      	nop
 8012f6a:	bf00      	nop
 8012f6c:	e7fd      	b.n	8012f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	021b      	lsls	r3, r3, #8
 8012f74:	4a1c      	ldr	r2, [pc, #112]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012f78:	4b1b      	ldr	r3, [pc, #108]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012f80:	4a19      	ldr	r2, [pc, #100]	@ (8012fe8 <xPortStartScheduler+0x138>)
 8012f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	b2da      	uxtb	r2, r3
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012f8c:	4b17      	ldr	r3, [pc, #92]	@ (8012fec <xPortStartScheduler+0x13c>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a16      	ldr	r2, [pc, #88]	@ (8012fec <xPortStartScheduler+0x13c>)
 8012f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012f98:	4b14      	ldr	r3, [pc, #80]	@ (8012fec <xPortStartScheduler+0x13c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	4a13      	ldr	r2, [pc, #76]	@ (8012fec <xPortStartScheduler+0x13c>)
 8012f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012fa4:	f000 f8da 	bl	801315c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012fa8:	4b11      	ldr	r3, [pc, #68]	@ (8012ff0 <xPortStartScheduler+0x140>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012fae:	f000 f8f9 	bl	80131a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012fb2:	4b10      	ldr	r3, [pc, #64]	@ (8012ff4 <xPortStartScheduler+0x144>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8012ff4 <xPortStartScheduler+0x144>)
 8012fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012fbe:	f7ff ff63 	bl	8012e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012fc2:	f7ff f82b 	bl	801201c <vTaskSwitchContext>
	prvTaskExitError();
 8012fc6:	f7ff ff17 	bl	8012df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012fca:	2300      	movs	r3, #0
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3718      	adds	r7, #24
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	e000ed00 	.word	0xe000ed00
 8012fd8:	410fc271 	.word	0x410fc271
 8012fdc:	410fc270 	.word	0x410fc270
 8012fe0:	e000e400 	.word	0xe000e400
 8012fe4:	2400386c 	.word	0x2400386c
 8012fe8:	24003870 	.word	0x24003870
 8012fec:	e000ed20 	.word	0xe000ed20
 8012ff0:	24000068 	.word	0x24000068
 8012ff4:	e000ef34 	.word	0xe000ef34

08012ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8012ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013002:	f383 8811 	msr	BASEPRI, r3
 8013006:	f3bf 8f6f 	isb	sy
 801300a:	f3bf 8f4f 	dsb	sy
 801300e:	607b      	str	r3, [r7, #4]
}
 8013010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013012:	4b10      	ldr	r3, [pc, #64]	@ (8013054 <vPortEnterCritical+0x5c>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	3301      	adds	r3, #1
 8013018:	4a0e      	ldr	r2, [pc, #56]	@ (8013054 <vPortEnterCritical+0x5c>)
 801301a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801301c:	4b0d      	ldr	r3, [pc, #52]	@ (8013054 <vPortEnterCritical+0x5c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d110      	bne.n	8013046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013024:	4b0c      	ldr	r3, [pc, #48]	@ (8013058 <vPortEnterCritical+0x60>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	b2db      	uxtb	r3, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00b      	beq.n	8013046 <vPortEnterCritical+0x4e>
	__asm volatile
 801302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013032:	f383 8811 	msr	BASEPRI, r3
 8013036:	f3bf 8f6f 	isb	sy
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	603b      	str	r3, [r7, #0]
}
 8013040:	bf00      	nop
 8013042:	bf00      	nop
 8013044:	e7fd      	b.n	8013042 <vPortEnterCritical+0x4a>
	}
}
 8013046:	bf00      	nop
 8013048:	370c      	adds	r7, #12
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	24000068 	.word	0x24000068
 8013058:	e000ed04 	.word	0xe000ed04

0801305c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013062:	4b12      	ldr	r3, [pc, #72]	@ (80130ac <vPortExitCritical+0x50>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d10b      	bne.n	8013082 <vPortExitCritical+0x26>
	__asm volatile
 801306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	607b      	str	r3, [r7, #4]
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	e7fd      	b.n	801307e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013082:	4b0a      	ldr	r3, [pc, #40]	@ (80130ac <vPortExitCritical+0x50>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	3b01      	subs	r3, #1
 8013088:	4a08      	ldr	r2, [pc, #32]	@ (80130ac <vPortExitCritical+0x50>)
 801308a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801308c:	4b07      	ldr	r3, [pc, #28]	@ (80130ac <vPortExitCritical+0x50>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d105      	bne.n	80130a0 <vPortExitCritical+0x44>
 8013094:	2300      	movs	r3, #0
 8013096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	f383 8811 	msr	BASEPRI, r3
}
 801309e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr
 80130ac:	24000068 	.word	0x24000068

080130b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80130b0:	f3ef 8009 	mrs	r0, PSP
 80130b4:	f3bf 8f6f 	isb	sy
 80130b8:	4b15      	ldr	r3, [pc, #84]	@ (8013110 <pxCurrentTCBConst>)
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	f01e 0f10 	tst.w	lr, #16
 80130c0:	bf08      	it	eq
 80130c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80130c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ca:	6010      	str	r0, [r2, #0]
 80130cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80130d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80130d4:	f380 8811 	msr	BASEPRI, r0
 80130d8:	f3bf 8f4f 	dsb	sy
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f7fe ff9c 	bl	801201c <vTaskSwitchContext>
 80130e4:	f04f 0000 	mov.w	r0, #0
 80130e8:	f380 8811 	msr	BASEPRI, r0
 80130ec:	bc09      	pop	{r0, r3}
 80130ee:	6819      	ldr	r1, [r3, #0]
 80130f0:	6808      	ldr	r0, [r1, #0]
 80130f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f6:	f01e 0f10 	tst.w	lr, #16
 80130fa:	bf08      	it	eq
 80130fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013100:	f380 8809 	msr	PSP, r0
 8013104:	f3bf 8f6f 	isb	sy
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	f3af 8000 	nop.w

08013110 <pxCurrentTCBConst>:
 8013110:	24003240 	.word	0x24003240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013114:	bf00      	nop
 8013116:	bf00      	nop

08013118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
	__asm volatile
 801311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	607b      	str	r3, [r7, #4]
}
 8013130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013132:	f7fe feb9 	bl	8011ea8 <xTaskIncrementTick>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d003      	beq.n	8013144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801313c:	4b06      	ldr	r3, [pc, #24]	@ (8013158 <xPortSysTickHandler+0x40>)
 801313e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013142:	601a      	str	r2, [r3, #0]
 8013144:	2300      	movs	r3, #0
 8013146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	f383 8811 	msr	BASEPRI, r3
}
 801314e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	e000ed04 	.word	0xe000ed04

0801315c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801315c:	b480      	push	{r7}
 801315e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013160:	4b0b      	ldr	r3, [pc, #44]	@ (8013190 <vPortSetupTimerInterrupt+0x34>)
 8013162:	2200      	movs	r2, #0
 8013164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013166:	4b0b      	ldr	r3, [pc, #44]	@ (8013194 <vPortSetupTimerInterrupt+0x38>)
 8013168:	2200      	movs	r2, #0
 801316a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801316c:	4b0a      	ldr	r3, [pc, #40]	@ (8013198 <vPortSetupTimerInterrupt+0x3c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a0a      	ldr	r2, [pc, #40]	@ (801319c <vPortSetupTimerInterrupt+0x40>)
 8013172:	fba2 2303 	umull	r2, r3, r2, r3
 8013176:	095b      	lsrs	r3, r3, #5
 8013178:	4a09      	ldr	r2, [pc, #36]	@ (80131a0 <vPortSetupTimerInterrupt+0x44>)
 801317a:	3b01      	subs	r3, #1
 801317c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801317e:	4b04      	ldr	r3, [pc, #16]	@ (8013190 <vPortSetupTimerInterrupt+0x34>)
 8013180:	2207      	movs	r2, #7
 8013182:	601a      	str	r2, [r3, #0]
}
 8013184:	bf00      	nop
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr
 801318e:	bf00      	nop
 8013190:	e000e010 	.word	0xe000e010
 8013194:	e000e018 	.word	0xe000e018
 8013198:	24000040 	.word	0x24000040
 801319c:	10624dd3 	.word	0x10624dd3
 80131a0:	e000e014 	.word	0xe000e014

080131a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80131a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80131b4 <vPortEnableVFP+0x10>
 80131a8:	6801      	ldr	r1, [r0, #0]
 80131aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80131ae:	6001      	str	r1, [r0, #0]
 80131b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80131b2:	bf00      	nop
 80131b4:	e000ed88 	.word	0xe000ed88

080131b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80131b8:	b480      	push	{r7}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80131be:	f3ef 8305 	mrs	r3, IPSR
 80131c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2b0f      	cmp	r3, #15
 80131c8:	d915      	bls.n	80131f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80131ca:	4a18      	ldr	r2, [pc, #96]	@ (801322c <vPortValidateInterruptPriority+0x74>)
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80131d4:	4b16      	ldr	r3, [pc, #88]	@ (8013230 <vPortValidateInterruptPriority+0x78>)
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	7afa      	ldrb	r2, [r7, #11]
 80131da:	429a      	cmp	r2, r3
 80131dc:	d20b      	bcs.n	80131f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80131de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	607b      	str	r3, [r7, #4]
}
 80131f0:	bf00      	nop
 80131f2:	bf00      	nop
 80131f4:	e7fd      	b.n	80131f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80131f6:	4b0f      	ldr	r3, [pc, #60]	@ (8013234 <vPortValidateInterruptPriority+0x7c>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80131fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013238 <vPortValidateInterruptPriority+0x80>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	429a      	cmp	r2, r3
 8013204:	d90b      	bls.n	801321e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801320a:	f383 8811 	msr	BASEPRI, r3
 801320e:	f3bf 8f6f 	isb	sy
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	603b      	str	r3, [r7, #0]
}
 8013218:	bf00      	nop
 801321a:	bf00      	nop
 801321c:	e7fd      	b.n	801321a <vPortValidateInterruptPriority+0x62>
	}
 801321e:	bf00      	nop
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop
 801322c:	e000e3f0 	.word	0xe000e3f0
 8013230:	2400386c 	.word	0x2400386c
 8013234:	e000ed0c 	.word	0xe000ed0c
 8013238:	24003870 	.word	0x24003870

0801323c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b08a      	sub	sp, #40	@ 0x28
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013244:	2300      	movs	r3, #0
 8013246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013248:	f7fe fd72 	bl	8011d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801324c:	4b5c      	ldr	r3, [pc, #368]	@ (80133c0 <pvPortMalloc+0x184>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d101      	bne.n	8013258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013254:	f000 f924 	bl	80134a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013258:	4b5a      	ldr	r3, [pc, #360]	@ (80133c4 <pvPortMalloc+0x188>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	4013      	ands	r3, r2
 8013260:	2b00      	cmp	r3, #0
 8013262:	f040 8095 	bne.w	8013390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d01e      	beq.n	80132aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801326c:	2208      	movs	r2, #8
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4413      	add	r3, r2
 8013272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f003 0307 	and.w	r3, r3, #7
 801327a:	2b00      	cmp	r3, #0
 801327c:	d015      	beq.n	80132aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f023 0307 	bic.w	r3, r3, #7
 8013284:	3308      	adds	r3, #8
 8013286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f003 0307 	and.w	r3, r3, #7
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00b      	beq.n	80132aa <pvPortMalloc+0x6e>
	__asm volatile
 8013292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013296:	f383 8811 	msr	BASEPRI, r3
 801329a:	f3bf 8f6f 	isb	sy
 801329e:	f3bf 8f4f 	dsb	sy
 80132a2:	617b      	str	r3, [r7, #20]
}
 80132a4:	bf00      	nop
 80132a6:	bf00      	nop
 80132a8:	e7fd      	b.n	80132a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d06f      	beq.n	8013390 <pvPortMalloc+0x154>
 80132b0:	4b45      	ldr	r3, [pc, #276]	@ (80133c8 <pvPortMalloc+0x18c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d86a      	bhi.n	8013390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80132ba:	4b44      	ldr	r3, [pc, #272]	@ (80133cc <pvPortMalloc+0x190>)
 80132bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80132be:	4b43      	ldr	r3, [pc, #268]	@ (80133cc <pvPortMalloc+0x190>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80132c4:	e004      	b.n	80132d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80132c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80132ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80132d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d903      	bls.n	80132e2 <pvPortMalloc+0xa6>
 80132da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d1f1      	bne.n	80132c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80132e2:	4b37      	ldr	r3, [pc, #220]	@ (80133c0 <pvPortMalloc+0x184>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d051      	beq.n	8013390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80132ec:	6a3b      	ldr	r3, [r7, #32]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2208      	movs	r2, #8
 80132f2:	4413      	add	r3, r2
 80132f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	6a3b      	ldr	r3, [r7, #32]
 80132fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80132fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013300:	685a      	ldr	r2, [r3, #4]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	1ad2      	subs	r2, r2, r3
 8013306:	2308      	movs	r3, #8
 8013308:	005b      	lsls	r3, r3, #1
 801330a:	429a      	cmp	r2, r3
 801330c:	d920      	bls.n	8013350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4413      	add	r3, r2
 8013314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	f003 0307 	and.w	r3, r3, #7
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00b      	beq.n	8013338 <pvPortMalloc+0xfc>
	__asm volatile
 8013320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013324:	f383 8811 	msr	BASEPRI, r3
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	613b      	str	r3, [r7, #16]
}
 8013332:	bf00      	nop
 8013334:	bf00      	nop
 8013336:	e7fd      	b.n	8013334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801333a:	685a      	ldr	r2, [r3, #4]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	1ad2      	subs	r2, r2, r3
 8013340:	69bb      	ldr	r3, [r7, #24]
 8013342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801334a:	69b8      	ldr	r0, [r7, #24]
 801334c:	f000 f90a 	bl	8013564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013350:	4b1d      	ldr	r3, [pc, #116]	@ (80133c8 <pvPortMalloc+0x18c>)
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	4a1b      	ldr	r2, [pc, #108]	@ (80133c8 <pvPortMalloc+0x18c>)
 801335c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801335e:	4b1a      	ldr	r3, [pc, #104]	@ (80133c8 <pvPortMalloc+0x18c>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	4b1b      	ldr	r3, [pc, #108]	@ (80133d0 <pvPortMalloc+0x194>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	429a      	cmp	r2, r3
 8013368:	d203      	bcs.n	8013372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801336a:	4b17      	ldr	r3, [pc, #92]	@ (80133c8 <pvPortMalloc+0x18c>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	4a18      	ldr	r2, [pc, #96]	@ (80133d0 <pvPortMalloc+0x194>)
 8013370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013374:	685a      	ldr	r2, [r3, #4]
 8013376:	4b13      	ldr	r3, [pc, #76]	@ (80133c4 <pvPortMalloc+0x188>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	431a      	orrs	r2, r3
 801337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801337e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013382:	2200      	movs	r2, #0
 8013384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013386:	4b13      	ldr	r3, [pc, #76]	@ (80133d4 <pvPortMalloc+0x198>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	3301      	adds	r3, #1
 801338c:	4a11      	ldr	r2, [pc, #68]	@ (80133d4 <pvPortMalloc+0x198>)
 801338e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013390:	f7fe fcdc 	bl	8011d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	f003 0307 	and.w	r3, r3, #7
 801339a:	2b00      	cmp	r3, #0
 801339c:	d00b      	beq.n	80133b6 <pvPortMalloc+0x17a>
	__asm volatile
 801339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a2:	f383 8811 	msr	BASEPRI, r3
 80133a6:	f3bf 8f6f 	isb	sy
 80133aa:	f3bf 8f4f 	dsb	sy
 80133ae:	60fb      	str	r3, [r7, #12]
}
 80133b0:	bf00      	nop
 80133b2:	bf00      	nop
 80133b4:	e7fd      	b.n	80133b2 <pvPortMalloc+0x176>
	return pvReturn;
 80133b6:	69fb      	ldr	r3, [r7, #28]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3728      	adds	r7, #40	@ 0x28
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	2400747c 	.word	0x2400747c
 80133c4:	24007490 	.word	0x24007490
 80133c8:	24007480 	.word	0x24007480
 80133cc:	24007474 	.word	0x24007474
 80133d0:	24007484 	.word	0x24007484
 80133d4:	24007488 	.word	0x24007488

080133d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b086      	sub	sp, #24
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d04f      	beq.n	801348a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80133ea:	2308      	movs	r3, #8
 80133ec:	425b      	negs	r3, r3
 80133ee:	697a      	ldr	r2, [r7, #20]
 80133f0:	4413      	add	r3, r2
 80133f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	685a      	ldr	r2, [r3, #4]
 80133fc:	4b25      	ldr	r3, [pc, #148]	@ (8013494 <vPortFree+0xbc>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4013      	ands	r3, r2
 8013402:	2b00      	cmp	r3, #0
 8013404:	d10b      	bne.n	801341e <vPortFree+0x46>
	__asm volatile
 8013406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801340a:	f383 8811 	msr	BASEPRI, r3
 801340e:	f3bf 8f6f 	isb	sy
 8013412:	f3bf 8f4f 	dsb	sy
 8013416:	60fb      	str	r3, [r7, #12]
}
 8013418:	bf00      	nop
 801341a:	bf00      	nop
 801341c:	e7fd      	b.n	801341a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d00b      	beq.n	801343e <vPortFree+0x66>
	__asm volatile
 8013426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	60bb      	str	r3, [r7, #8]
}
 8013438:	bf00      	nop
 801343a:	bf00      	nop
 801343c:	e7fd      	b.n	801343a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	685a      	ldr	r2, [r3, #4]
 8013442:	4b14      	ldr	r3, [pc, #80]	@ (8013494 <vPortFree+0xbc>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4013      	ands	r3, r2
 8013448:	2b00      	cmp	r3, #0
 801344a:	d01e      	beq.n	801348a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d11a      	bne.n	801348a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	685a      	ldr	r2, [r3, #4]
 8013458:	4b0e      	ldr	r3, [pc, #56]	@ (8013494 <vPortFree+0xbc>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	43db      	mvns	r3, r3
 801345e:	401a      	ands	r2, r3
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013464:	f7fe fc64 	bl	8011d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	4b0a      	ldr	r3, [pc, #40]	@ (8013498 <vPortFree+0xc0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4413      	add	r3, r2
 8013472:	4a09      	ldr	r2, [pc, #36]	@ (8013498 <vPortFree+0xc0>)
 8013474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013476:	6938      	ldr	r0, [r7, #16]
 8013478:	f000 f874 	bl	8013564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801347c:	4b07      	ldr	r3, [pc, #28]	@ (801349c <vPortFree+0xc4>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	3301      	adds	r3, #1
 8013482:	4a06      	ldr	r2, [pc, #24]	@ (801349c <vPortFree+0xc4>)
 8013484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013486:	f7fe fc61 	bl	8011d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801348a:	bf00      	nop
 801348c:	3718      	adds	r7, #24
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	24007490 	.word	0x24007490
 8013498:	24007480 	.word	0x24007480
 801349c:	2400748c 	.word	0x2400748c

080134a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80134a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80134aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80134ac:	4b27      	ldr	r3, [pc, #156]	@ (801354c <prvHeapInit+0xac>)
 80134ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f003 0307 	and.w	r3, r3, #7
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00c      	beq.n	80134d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	3307      	adds	r3, #7
 80134be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f023 0307 	bic.w	r3, r3, #7
 80134c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80134c8:	68ba      	ldr	r2, [r7, #8]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	4a1f      	ldr	r2, [pc, #124]	@ (801354c <prvHeapInit+0xac>)
 80134d0:	4413      	add	r3, r2
 80134d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80134d8:	4a1d      	ldr	r2, [pc, #116]	@ (8013550 <prvHeapInit+0xb0>)
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80134de:	4b1c      	ldr	r3, [pc, #112]	@ (8013550 <prvHeapInit+0xb0>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	68ba      	ldr	r2, [r7, #8]
 80134e8:	4413      	add	r3, r2
 80134ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80134ec:	2208      	movs	r2, #8
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	1a9b      	subs	r3, r3, r2
 80134f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f023 0307 	bic.w	r3, r3, #7
 80134fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	4a15      	ldr	r2, [pc, #84]	@ (8013554 <prvHeapInit+0xb4>)
 8013500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013502:	4b14      	ldr	r3, [pc, #80]	@ (8013554 <prvHeapInit+0xb4>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	2200      	movs	r2, #0
 8013508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801350a:	4b12      	ldr	r3, [pc, #72]	@ (8013554 <prvHeapInit+0xb4>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2200      	movs	r2, #0
 8013510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	1ad2      	subs	r2, r2, r3
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013520:	4b0c      	ldr	r3, [pc, #48]	@ (8013554 <prvHeapInit+0xb4>)
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	4a0a      	ldr	r2, [pc, #40]	@ (8013558 <prvHeapInit+0xb8>)
 801352e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	4a09      	ldr	r2, [pc, #36]	@ (801355c <prvHeapInit+0xbc>)
 8013536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013538:	4b09      	ldr	r3, [pc, #36]	@ (8013560 <prvHeapInit+0xc0>)
 801353a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801353e:	601a      	str	r2, [r3, #0]
}
 8013540:	bf00      	nop
 8013542:	3714      	adds	r7, #20
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr
 801354c:	24003874 	.word	0x24003874
 8013550:	24007474 	.word	0x24007474
 8013554:	2400747c 	.word	0x2400747c
 8013558:	24007484 	.word	0x24007484
 801355c:	24007480 	.word	0x24007480
 8013560:	24007490 	.word	0x24007490

08013564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013564:	b480      	push	{r7}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801356c:	4b28      	ldr	r3, [pc, #160]	@ (8013610 <prvInsertBlockIntoFreeList+0xac>)
 801356e:	60fb      	str	r3, [r7, #12]
 8013570:	e002      	b.n	8013578 <prvInsertBlockIntoFreeList+0x14>
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	60fb      	str	r3, [r7, #12]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	687a      	ldr	r2, [r7, #4]
 801357e:	429a      	cmp	r2, r3
 8013580:	d8f7      	bhi.n	8013572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	68ba      	ldr	r2, [r7, #8]
 801358c:	4413      	add	r3, r2
 801358e:	687a      	ldr	r2, [r7, #4]
 8013590:	429a      	cmp	r2, r3
 8013592:	d108      	bne.n	80135a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	685a      	ldr	r2, [r3, #4]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	441a      	add	r2, r3
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	68ba      	ldr	r2, [r7, #8]
 80135b0:	441a      	add	r2, r3
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d118      	bne.n	80135ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	681a      	ldr	r2, [r3, #0]
 80135be:	4b15      	ldr	r3, [pc, #84]	@ (8013614 <prvInsertBlockIntoFreeList+0xb0>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d00d      	beq.n	80135e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	685a      	ldr	r2, [r3, #4]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	441a      	add	r2, r3
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	e008      	b.n	80135f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80135e2:	4b0c      	ldr	r3, [pc, #48]	@ (8013614 <prvInsertBlockIntoFreeList+0xb0>)
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	e003      	b.n	80135f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	681a      	ldr	r2, [r3, #0]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d002      	beq.n	8013602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013602:	bf00      	nop
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	24007474 	.word	0x24007474
 8013614:	2400747c 	.word	0x2400747c

08013618 <arm_mat_trans_f32>:
 8013618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801361c:	8802      	ldrh	r2, [r0, #0]
 801361e:	b085      	sub	sp, #20
 8013620:	884b      	ldrh	r3, [r1, #2]
 8013622:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8013626:	4293      	cmp	r3, r2
 8013628:	8844      	ldrh	r4, [r0, #2]
 801362a:	6848      	ldr	r0, [r1, #4]
 801362c:	d14e      	bne.n	80136cc <arm_mat_trans_f32+0xb4>
 801362e:	f8b1 8000 	ldrh.w	r8, [r1]
 8013632:	45a0      	cmp	r8, r4
 8013634:	d14a      	bne.n	80136cc <arm_mat_trans_f32+0xb4>
 8013636:	ea4f 0998 	mov.w	r9, r8, lsr #2
 801363a:	f008 0803 	and.w	r8, r8, #3
 801363e:	009c      	lsls	r4, r3, #2
 8013640:	4684      	mov	ip, r0
 8013642:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8013646:	fb09 f204 	mul.w	r2, r9, r4
 801364a:	011d      	lsls	r5, r3, #4
 801364c:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8013650:	eb00 0a04 	add.w	sl, r0, r4
 8013654:	0092      	lsls	r2, r2, #2
 8013656:	9103      	str	r1, [sp, #12]
 8013658:	00db      	lsls	r3, r3, #3
 801365a:	9202      	str	r2, [sp, #8]
 801365c:	9301      	str	r3, [sp, #4]
 801365e:	4663      	mov	r3, ip
 8013660:	f1b9 0f00 	cmp.w	r9, #0
 8013664:	d01d      	beq.n	80136a2 <arm_mat_trans_f32+0x8a>
 8013666:	9901      	ldr	r1, [sp, #4]
 8013668:	f10e 0210 	add.w	r2, lr, #16
 801366c:	4648      	mov	r0, r9
 801366e:	4461      	add	r1, ip
 8013670:	ed52 7a04 	vldr	s15, [r2, #-16]
 8013674:	191f      	adds	r7, r3, r4
 8013676:	190e      	adds	r6, r1, r4
 8013678:	3801      	subs	r0, #1
 801367a:	edc3 7a00 	vstr	s15, [r3]
 801367e:	f102 0210 	add.w	r2, r2, #16
 8013682:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 8013686:	442b      	add	r3, r5
 8013688:	edc7 7a00 	vstr	s15, [r7]
 801368c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8013690:	600f      	str	r7, [r1, #0]
 8013692:	4429      	add	r1, r5
 8013694:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8013698:	6037      	str	r7, [r6, #0]
 801369a:	d1e9      	bne.n	8013670 <arm_mat_trans_f32+0x58>
 801369c:	9b02      	ldr	r3, [sp, #8]
 801369e:	44de      	add	lr, fp
 80136a0:	4463      	add	r3, ip
 80136a2:	f1b8 0f00 	cmp.w	r8, #0
 80136a6:	d009      	beq.n	80136bc <arm_mat_trans_f32+0xa4>
 80136a8:	4642      	mov	r2, r8
 80136aa:	4671      	mov	r1, lr
 80136ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80136b0:	3a01      	subs	r2, #1
 80136b2:	6018      	str	r0, [r3, #0]
 80136b4:	4423      	add	r3, r4
 80136b6:	d1f9      	bne.n	80136ac <arm_mat_trans_f32+0x94>
 80136b8:	9b03      	ldr	r3, [sp, #12]
 80136ba:	449e      	add	lr, r3
 80136bc:	f10c 0c04 	add.w	ip, ip, #4
 80136c0:	45d4      	cmp	ip, sl
 80136c2:	d1cc      	bne.n	801365e <arm_mat_trans_f32+0x46>
 80136c4:	2000      	movs	r0, #0
 80136c6:	b005      	add	sp, #20
 80136c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136cc:	f06f 0002 	mvn.w	r0, #2
 80136d0:	e7f9      	b.n	80136c6 <arm_mat_trans_f32+0xae>
 80136d2:	bf00      	nop

080136d4 <arm_mat_mult_f32>:
 80136d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d8:	8845      	ldrh	r5, [r0, #2]
 80136da:	b08b      	sub	sp, #44	@ 0x2c
 80136dc:	880b      	ldrh	r3, [r1, #0]
 80136de:	8806      	ldrh	r6, [r0, #0]
 80136e0:	42ab      	cmp	r3, r5
 80136e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80136e4:	6847      	ldr	r7, [r0, #4]
 80136e6:	9604      	str	r6, [sp, #16]
 80136e8:	6848      	ldr	r0, [r1, #4]
 80136ea:	6854      	ldr	r4, [r2, #4]
 80136ec:	8849      	ldrh	r1, [r1, #2]
 80136ee:	f040 808d 	bne.w	801380c <arm_mat_mult_f32+0x138>
 80136f2:	8815      	ldrh	r5, [r2, #0]
 80136f4:	42b5      	cmp	r5, r6
 80136f6:	f040 8089 	bne.w	801380c <arm_mat_mult_f32+0x138>
 80136fa:	8852      	ldrh	r2, [r2, #2]
 80136fc:	428a      	cmp	r2, r1
 80136fe:	f040 8085 	bne.w	801380c <arm_mat_mult_f32+0x138>
 8013702:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8013706:	1d01      	adds	r1, r0, #4
 8013708:	0116      	lsls	r6, r2, #4
 801370a:	f003 0903 	and.w	r9, r3, #3
 801370e:	9108      	str	r1, [sp, #32]
 8013710:	0095      	lsls	r5, r2, #2
 8013712:	fb06 f108 	mul.w	r1, r6, r8
 8013716:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801371a:	009b      	lsls	r3, r3, #2
 801371c:	f107 0b10 	add.w	fp, r7, #16
 8013720:	9103      	str	r1, [sp, #12]
 8013722:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8013726:	00d2      	lsls	r2, r2, #3
 8013728:	eb04 0a05 	add.w	sl, r4, r5
 801372c:	9101      	str	r1, [sp, #4]
 801372e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8013732:	9202      	str	r2, [sp, #8]
 8013734:	9107      	str	r1, [sp, #28]
 8013736:	9306      	str	r3, [sp, #24]
 8013738:	f1ab 0310 	sub.w	r3, fp, #16
 801373c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8013740:	9305      	str	r3, [sp, #20]
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	eb03 0c0a 	add.w	ip, r3, sl
 8013748:	f1b8 0f00 	cmp.w	r8, #0
 801374c:	d056      	beq.n	80137fc <arm_mat_mult_f32+0x128>
 801374e:	9b02      	ldr	r3, [sp, #8]
 8013750:	4644      	mov	r4, r8
 8013752:	4602      	mov	r2, r0
 8013754:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8013818 <arm_mat_mult_f32+0x144>
 8013758:	18c1      	adds	r1, r0, r3
 801375a:	465b      	mov	r3, fp
 801375c:	edd2 6a00 	vldr	s13, [r2]
 8013760:	1957      	adds	r7, r2, r5
 8013762:	ed13 7a04 	vldr	s14, [r3, #-16]
 8013766:	3c01      	subs	r4, #1
 8013768:	ed53 5a03 	vldr	s11, [r3, #-12]
 801376c:	4432      	add	r2, r6
 801376e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013772:	ed97 6a00 	vldr	s12, [r7]
 8013776:	ed53 6a02 	vldr	s13, [r3, #-8]
 801377a:	eb01 0705 	add.w	r7, r1, r5
 801377e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013782:	ed91 5a00 	vldr	s10, [r1]
 8013786:	ee77 7a27 	vadd.f32	s15, s14, s15
 801378a:	edd7 5a00 	vldr	s11, [r7]
 801378e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8013792:	ed53 6a01 	vldr	s13, [r3, #-4]
 8013796:	4431      	add	r1, r6
 8013798:	f103 0310 	add.w	r3, r3, #16
 801379c:	ee76 7a27 	vadd.f32	s15, s12, s15
 80137a0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80137a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80137ac:	d1d6      	bne.n	801375c <arm_mat_mult_f32+0x88>
 80137ae:	9b03      	ldr	r3, [sp, #12]
 80137b0:	9a01      	ldr	r2, [sp, #4]
 80137b2:	4418      	add	r0, r3
 80137b4:	f1b9 0f00 	cmp.w	r9, #0
 80137b8:	d00b      	beq.n	80137d2 <arm_mat_mult_f32+0xfe>
 80137ba:	464b      	mov	r3, r9
 80137bc:	edd0 6a00 	vldr	s13, [r0]
 80137c0:	3b01      	subs	r3, #1
 80137c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80137c6:	4428      	add	r0, r5
 80137c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80137cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137d0:	d1f4      	bne.n	80137bc <arm_mat_mult_f32+0xe8>
 80137d2:	ecec 7a01 	vstmia	ip!, {s15}
 80137d6:	45d4      	cmp	ip, sl
 80137d8:	4670      	mov	r0, lr
 80137da:	f10e 0e04 	add.w	lr, lr, #4
 80137de:	d1b3      	bne.n	8013748 <arm_mat_mult_f32+0x74>
 80137e0:	9a01      	ldr	r2, [sp, #4]
 80137e2:	44aa      	add	sl, r5
 80137e4:	9b06      	ldr	r3, [sp, #24]
 80137e6:	4611      	mov	r1, r2
 80137e8:	449b      	add	fp, r3
 80137ea:	4419      	add	r1, r3
 80137ec:	9b04      	ldr	r3, [sp, #16]
 80137ee:	3b01      	subs	r3, #1
 80137f0:	9101      	str	r1, [sp, #4]
 80137f2:	9304      	str	r3, [sp, #16]
 80137f4:	d006      	beq.n	8013804 <arm_mat_mult_f32+0x130>
 80137f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137f8:	6858      	ldr	r0, [r3, #4]
 80137fa:	e79d      	b.n	8013738 <arm_mat_mult_f32+0x64>
 80137fc:	9a05      	ldr	r2, [sp, #20]
 80137fe:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8013818 <arm_mat_mult_f32+0x144>
 8013802:	e7d7      	b.n	80137b4 <arm_mat_mult_f32+0xe0>
 8013804:	4618      	mov	r0, r3
 8013806:	b00b      	add	sp, #44	@ 0x2c
 8013808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380c:	f06f 0002 	mvn.w	r0, #2
 8013810:	b00b      	add	sp, #44	@ 0x2c
 8013812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013816:	bf00      	nop
 8013818:	00000000 	.word	0x00000000

0801381c <arm_mat_inverse_f32>:
 801381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013820:	8843      	ldrh	r3, [r0, #2]
 8013822:	b087      	sub	sp, #28
 8013824:	8804      	ldrh	r4, [r0, #0]
 8013826:	684d      	ldr	r5, [r1, #4]
 8013828:	429c      	cmp	r4, r3
 801382a:	9301      	str	r3, [sp, #4]
 801382c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013830:	9503      	str	r5, [sp, #12]
 8013832:	f040 80e2 	bne.w	80139fa <arm_mat_inverse_f32+0x1de>
 8013836:	880b      	ldrh	r3, [r1, #0]
 8013838:	884a      	ldrh	r2, [r1, #2]
 801383a:	429a      	cmp	r2, r3
 801383c:	f040 80dd 	bne.w	80139fa <arm_mat_inverse_f32+0x1de>
 8013840:	429c      	cmp	r4, r3
 8013842:	f040 80da 	bne.w	80139fa <arm_mat_inverse_f32+0x1de>
 8013846:	9005      	str	r0, [sp, #20]
 8013848:	b1fc      	cbz	r4, 801388a <arm_mat_inverse_f32+0x6e>
 801384a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801384e:	1e66      	subs	r6, r4, #1
 8013850:	f845 bb04 	str.w	fp, [r5], #4
 8013854:	d019      	beq.n	801388a <arm_mat_inverse_f32+0x6e>
 8013856:	2701      	movs	r7, #1
 8013858:	00b2      	lsls	r2, r6, #2
 801385a:	4628      	mov	r0, r5
 801385c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8013860:	2100      	movs	r1, #0
 8013862:	eb05 0a02 	add.w	sl, r5, r2
 8013866:	f001 fc2c 	bl	80150c2 <memset>
 801386a:	4642      	mov	r2, r8
 801386c:	2100      	movs	r1, #0
 801386e:	eb0a 0508 	add.w	r5, sl, r8
 8013872:	4650      	mov	r0, sl
 8013874:	2f00      	cmp	r7, #0
 8013876:	f000 80c5 	beq.w	8013a04 <arm_mat_inverse_f32+0x1e8>
 801387a:	f001 fc22 	bl	80150c2 <memset>
 801387e:	3e01      	subs	r6, #1
 8013880:	f107 0701 	add.w	r7, r7, #1
 8013884:	f845 bb04 	str.w	fp, [r5], #4
 8013888:	d1e6      	bne.n	8013858 <arm_mat_inverse_f32+0x3c>
 801388a:	9b01      	ldr	r3, [sp, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	f000 80af 	beq.w	80139f0 <arm_mat_inverse_f32+0x1d4>
 8013892:	009d      	lsls	r5, r3, #2
 8013894:	46cc      	mov	ip, r9
 8013896:	469e      	mov	lr, r3
 8013898:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801389c:	eb0c 0305 	add.w	r3, ip, r5
 80138a0:	462f      	mov	r7, r5
 80138a2:	2600      	movs	r6, #0
 80138a4:	9302      	str	r3, [sp, #8]
 80138a6:	1d2b      	adds	r3, r5, #4
 80138a8:	9304      	str	r3, [sp, #16]
 80138aa:	9b02      	ldr	r3, [sp, #8]
 80138ac:	42b4      	cmp	r4, r6
 80138ae:	eddc 6a00 	vldr	s13, [ip]
 80138b2:	eba3 0b07 	sub.w	fp, r3, r7
 80138b6:	f000 809b 	beq.w	80139f0 <arm_mat_inverse_f32+0x1d4>
 80138ba:	4632      	mov	r2, r6
 80138bc:	4663      	mov	r3, ip
 80138be:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013a14 <arm_mat_inverse_f32+0x1f8>
 80138c2:	e009      	b.n	80138d8 <arm_mat_inverse_f32+0xbc>
 80138c4:	eef4 7a47 	vcmp.f32	s15, s14
 80138c8:	3201      	adds	r2, #1
 80138ca:	442b      	add	r3, r5
 80138cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138d0:	fe37 7a87 	vselgt.f32	s14, s15, s14
 80138d4:	42a2      	cmp	r2, r4
 80138d6:	d012      	beq.n	80138fe <arm_mat_inverse_f32+0xe2>
 80138d8:	edd3 7a00 	vldr	s15, [r3]
 80138dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138e0:	eeb1 6a67 	vneg.f32	s12, s15
 80138e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e8:	dcec      	bgt.n	80138c4 <arm_mat_inverse_f32+0xa8>
 80138ea:	eeb4 6a47 	vcmp.f32	s12, s14
 80138ee:	3201      	adds	r2, #1
 80138f0:	442b      	add	r3, r5
 80138f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f6:	fe36 7a07 	vselgt.f32	s14, s12, s14
 80138fa:	42a2      	cmp	r2, r4
 80138fc:	d1ec      	bne.n	80138d8 <arm_mat_inverse_f32+0xbc>
 80138fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013906:	d073      	beq.n	80139f0 <arm_mat_inverse_f32+0x1d4>
 8013908:	eef5 6a40 	vcmp.f32	s13, #0.0
 801390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013910:	d06e      	beq.n	80139f0 <arm_mat_inverse_f32+0x1d4>
 8013912:	4672      	mov	r2, lr
 8013914:	4663      	mov	r3, ip
 8013916:	ed93 7a00 	vldr	s14, [r3]
 801391a:	3a01      	subs	r2, #1
 801391c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013920:	ece3 7a01 	vstmia	r3!, {s15}
 8013924:	d1f7      	bne.n	8013916 <arm_mat_inverse_f32+0xfa>
 8013926:	9901      	ldr	r1, [sp, #4]
 8013928:	464b      	mov	r3, r9
 801392a:	ed93 7a00 	vldr	s14, [r3]
 801392e:	3901      	subs	r1, #1
 8013930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013934:	ece3 7a01 	vstmia	r3!, {s15}
 8013938:	d1f7      	bne.n	801392a <arm_mat_inverse_f32+0x10e>
 801393a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801393e:	9803      	ldr	r0, [sp, #12]
 8013940:	42b1      	cmp	r1, r6
 8013942:	d038      	beq.n	80139b6 <arm_mat_inverse_f32+0x19a>
 8013944:	eddb 6a00 	vldr	s13, [fp]
 8013948:	465a      	mov	r2, fp
 801394a:	4673      	mov	r3, lr
 801394c:	46e2      	mov	sl, ip
 801394e:	ecba 7a01 	vldmia	sl!, {s14}
 8013952:	3b01      	subs	r3, #1
 8013954:	edd2 7a00 	vldr	s15, [r2]
 8013958:	ee26 7a87 	vmul.f32	s14, s13, s14
 801395c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013960:	ece2 7a01 	vstmia	r2!, {s15}
 8013964:	d1f3      	bne.n	801394e <arm_mat_inverse_f32+0x132>
 8013966:	44bb      	add	fp, r7
 8013968:	4602      	mov	r2, r0
 801396a:	9b01      	ldr	r3, [sp, #4]
 801396c:	46ca      	mov	sl, r9
 801396e:	ecba 7a01 	vldmia	sl!, {s14}
 8013972:	3b01      	subs	r3, #1
 8013974:	edd2 7a00 	vldr	s15, [r2]
 8013978:	ee26 7a87 	vmul.f32	s14, s13, s14
 801397c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013980:	ece2 7a01 	vstmia	r2!, {s15}
 8013984:	d1f3      	bne.n	801396e <arm_mat_inverse_f32+0x152>
 8013986:	4428      	add	r0, r5
 8013988:	3101      	adds	r1, #1
 801398a:	44c3      	add	fp, r8
 801398c:	428c      	cmp	r4, r1
 801398e:	d1d7      	bne.n	8013940 <arm_mat_inverse_f32+0x124>
 8013990:	9b04      	ldr	r3, [sp, #16]
 8013992:	f1be 0e01 	subs.w	lr, lr, #1
 8013996:	f106 0601 	add.w	r6, r6, #1
 801399a:	f1a7 0704 	sub.w	r7, r7, #4
 801399e:	449c      	add	ip, r3
 80139a0:	44a9      	add	r9, r5
 80139a2:	d182      	bne.n	80138aa <arm_mat_inverse_f32+0x8e>
 80139a4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	d006      	beq.n	80139bc <arm_mat_inverse_f32+0x1a0>
 80139ae:	2000      	movs	r0, #0
 80139b0:	b007      	add	sp, #28
 80139b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b6:	44bb      	add	fp, r7
 80139b8:	4428      	add	r0, r5
 80139ba:	e7e5      	b.n	8013988 <arm_mat_inverse_f32+0x16c>
 80139bc:	9b05      	ldr	r3, [sp, #20]
 80139be:	9a01      	ldr	r2, [sp, #4]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	fb02 f204 	mul.w	r2, r2, r4
 80139c6:	edd3 7a00 	vldr	s15, [r3]
 80139ca:	4614      	mov	r4, r2
 80139cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d4:	d1eb      	bne.n	80139ae <arm_mat_inverse_f32+0x192>
 80139d6:	3304      	adds	r3, #4
 80139d8:	e006      	b.n	80139e8 <arm_mat_inverse_f32+0x1cc>
 80139da:	ecf3 7a01 	vldmia	r3!, {s15}
 80139de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e6:	d1e2      	bne.n	80139ae <arm_mat_inverse_f32+0x192>
 80139e8:	f10e 0e01 	add.w	lr, lr, #1
 80139ec:	4574      	cmp	r4, lr
 80139ee:	d1f4      	bne.n	80139da <arm_mat_inverse_f32+0x1be>
 80139f0:	f06f 0004 	mvn.w	r0, #4
 80139f4:	b007      	add	sp, #28
 80139f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139fa:	f06f 0002 	mvn.w	r0, #2
 80139fe:	b007      	add	sp, #28
 8013a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a04:	4655      	mov	r5, sl
 8013a06:	3e01      	subs	r6, #1
 8013a08:	f845 bb04 	str.w	fp, [r5], #4
 8013a0c:	f47f af23 	bne.w	8013856 <arm_mat_inverse_f32+0x3a>
 8013a10:	e73b      	b.n	801388a <arm_mat_inverse_f32+0x6e>
 8013a12:	bf00      	nop
 8013a14:	00000000 	.word	0x00000000

08013a18 <arm_mat_init_f32>:
 8013a18:	8001      	strh	r1, [r0, #0]
 8013a1a:	8042      	strh	r2, [r0, #2]
 8013a1c:	6043      	str	r3, [r0, #4]
 8013a1e:	4770      	bx	lr

08013a20 <sulp>:
 8013a20:	b570      	push	{r4, r5, r6, lr}
 8013a22:	4604      	mov	r4, r0
 8013a24:	460d      	mov	r5, r1
 8013a26:	4616      	mov	r6, r2
 8013a28:	ec45 4b10 	vmov	d0, r4, r5
 8013a2c:	f003 fa1a 	bl	8016e64 <__ulp>
 8013a30:	b17e      	cbz	r6, 8013a52 <sulp+0x32>
 8013a32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013a36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	dd09      	ble.n	8013a52 <sulp+0x32>
 8013a3e:	051b      	lsls	r3, r3, #20
 8013a40:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8013a44:	2000      	movs	r0, #0
 8013a46:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8013a4a:	ec41 0b17 	vmov	d7, r0, r1
 8013a4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a52:	bd70      	pop	{r4, r5, r6, pc}
 8013a54:	0000      	movs	r0, r0
	...

08013a58 <_strtod_l>:
 8013a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a5c:	ed2d 8b0a 	vpush	{d8-d12}
 8013a60:	b097      	sub	sp, #92	@ 0x5c
 8013a62:	4688      	mov	r8, r1
 8013a64:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a66:	2200      	movs	r2, #0
 8013a68:	9212      	str	r2, [sp, #72]	@ 0x48
 8013a6a:	9005      	str	r0, [sp, #20]
 8013a6c:	f04f 0a00 	mov.w	sl, #0
 8013a70:	f04f 0b00 	mov.w	fp, #0
 8013a74:	460a      	mov	r2, r1
 8013a76:	9211      	str	r2, [sp, #68]	@ 0x44
 8013a78:	7811      	ldrb	r1, [r2, #0]
 8013a7a:	292b      	cmp	r1, #43	@ 0x2b
 8013a7c:	d04c      	beq.n	8013b18 <_strtod_l+0xc0>
 8013a7e:	d839      	bhi.n	8013af4 <_strtod_l+0x9c>
 8013a80:	290d      	cmp	r1, #13
 8013a82:	d833      	bhi.n	8013aec <_strtod_l+0x94>
 8013a84:	2908      	cmp	r1, #8
 8013a86:	d833      	bhi.n	8013af0 <_strtod_l+0x98>
 8013a88:	2900      	cmp	r1, #0
 8013a8a:	d03c      	beq.n	8013b06 <_strtod_l+0xae>
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	9208      	str	r2, [sp, #32]
 8013a90:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013a92:	782a      	ldrb	r2, [r5, #0]
 8013a94:	2a30      	cmp	r2, #48	@ 0x30
 8013a96:	f040 80b7 	bne.w	8013c08 <_strtod_l+0x1b0>
 8013a9a:	786a      	ldrb	r2, [r5, #1]
 8013a9c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013aa0:	2a58      	cmp	r2, #88	@ 0x58
 8013aa2:	d170      	bne.n	8013b86 <_strtod_l+0x12e>
 8013aa4:	9302      	str	r3, [sp, #8]
 8013aa6:	9b08      	ldr	r3, [sp, #32]
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	ab12      	add	r3, sp, #72	@ 0x48
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	4a90      	ldr	r2, [pc, #576]	@ (8013cf0 <_strtod_l+0x298>)
 8013ab0:	9805      	ldr	r0, [sp, #20]
 8013ab2:	ab13      	add	r3, sp, #76	@ 0x4c
 8013ab4:	a911      	add	r1, sp, #68	@ 0x44
 8013ab6:	f002 facf 	bl	8016058 <__gethex>
 8013aba:	f010 060f 	ands.w	r6, r0, #15
 8013abe:	4604      	mov	r4, r0
 8013ac0:	d005      	beq.n	8013ace <_strtod_l+0x76>
 8013ac2:	2e06      	cmp	r6, #6
 8013ac4:	d12a      	bne.n	8013b1c <_strtod_l+0xc4>
 8013ac6:	3501      	adds	r5, #1
 8013ac8:	2300      	movs	r3, #0
 8013aca:	9511      	str	r5, [sp, #68]	@ 0x44
 8013acc:	9308      	str	r3, [sp, #32]
 8013ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f040 8537 	bne.w	8014544 <_strtod_l+0xaec>
 8013ad6:	9b08      	ldr	r3, [sp, #32]
 8013ad8:	ec4b ab10 	vmov	d0, sl, fp
 8013adc:	b1cb      	cbz	r3, 8013b12 <_strtod_l+0xba>
 8013ade:	eeb1 0b40 	vneg.f64	d0, d0
 8013ae2:	b017      	add	sp, #92	@ 0x5c
 8013ae4:	ecbd 8b0a 	vpop	{d8-d12}
 8013ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aec:	2920      	cmp	r1, #32
 8013aee:	d1cd      	bne.n	8013a8c <_strtod_l+0x34>
 8013af0:	3201      	adds	r2, #1
 8013af2:	e7c0      	b.n	8013a76 <_strtod_l+0x1e>
 8013af4:	292d      	cmp	r1, #45	@ 0x2d
 8013af6:	d1c9      	bne.n	8013a8c <_strtod_l+0x34>
 8013af8:	2101      	movs	r1, #1
 8013afa:	9108      	str	r1, [sp, #32]
 8013afc:	1c51      	adds	r1, r2, #1
 8013afe:	9111      	str	r1, [sp, #68]	@ 0x44
 8013b00:	7852      	ldrb	r2, [r2, #1]
 8013b02:	2a00      	cmp	r2, #0
 8013b04:	d1c4      	bne.n	8013a90 <_strtod_l+0x38>
 8013b06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b08:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f040 8517 	bne.w	8014540 <_strtod_l+0xae8>
 8013b12:	ec4b ab10 	vmov	d0, sl, fp
 8013b16:	e7e4      	b.n	8013ae2 <_strtod_l+0x8a>
 8013b18:	2100      	movs	r1, #0
 8013b1a:	e7ee      	b.n	8013afa <_strtod_l+0xa2>
 8013b1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013b1e:	b13a      	cbz	r2, 8013b30 <_strtod_l+0xd8>
 8013b20:	2135      	movs	r1, #53	@ 0x35
 8013b22:	a814      	add	r0, sp, #80	@ 0x50
 8013b24:	f003 fa95 	bl	8017052 <__copybits>
 8013b28:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013b2a:	9805      	ldr	r0, [sp, #20]
 8013b2c:	f002 fe6e 	bl	801680c <_Bfree>
 8013b30:	1e73      	subs	r3, r6, #1
 8013b32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013b34:	2b04      	cmp	r3, #4
 8013b36:	d806      	bhi.n	8013b46 <_strtod_l+0xee>
 8013b38:	e8df f003 	tbb	[pc, r3]
 8013b3c:	201d0314 	.word	0x201d0314
 8013b40:	14          	.byte	0x14
 8013b41:	00          	.byte	0x00
 8013b42:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013b46:	05e3      	lsls	r3, r4, #23
 8013b48:	bf48      	it	mi
 8013b4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013b4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b52:	0d1b      	lsrs	r3, r3, #20
 8013b54:	051b      	lsls	r3, r3, #20
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d1b9      	bne.n	8013ace <_strtod_l+0x76>
 8013b5a:	f001 fb97 	bl	801528c <__errno>
 8013b5e:	2322      	movs	r3, #34	@ 0x22
 8013b60:	6003      	str	r3, [r0, #0]
 8013b62:	e7b4      	b.n	8013ace <_strtod_l+0x76>
 8013b64:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013b68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013b6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013b70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b74:	e7e7      	b.n	8013b46 <_strtod_l+0xee>
 8013b76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013cf8 <_strtod_l+0x2a0>
 8013b7a:	e7e4      	b.n	8013b46 <_strtod_l+0xee>
 8013b7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013b80:	f04f 3aff 	mov.w	sl, #4294967295
 8013b84:	e7df      	b.n	8013b46 <_strtod_l+0xee>
 8013b86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b88:	1c5a      	adds	r2, r3, #1
 8013b8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8013b8c:	785b      	ldrb	r3, [r3, #1]
 8013b8e:	2b30      	cmp	r3, #48	@ 0x30
 8013b90:	d0f9      	beq.n	8013b86 <_strtod_l+0x12e>
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d09b      	beq.n	8013ace <_strtod_l+0x76>
 8013b96:	2301      	movs	r3, #1
 8013b98:	9307      	str	r3, [sp, #28]
 8013b9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	9306      	str	r3, [sp, #24]
 8013ba2:	4699      	mov	r9, r3
 8013ba4:	461d      	mov	r5, r3
 8013ba6:	220a      	movs	r2, #10
 8013ba8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013baa:	7804      	ldrb	r4, [r0, #0]
 8013bac:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013bb0:	b2d9      	uxtb	r1, r3
 8013bb2:	2909      	cmp	r1, #9
 8013bb4:	d92a      	bls.n	8013c0c <_strtod_l+0x1b4>
 8013bb6:	494f      	ldr	r1, [pc, #316]	@ (8013cf4 <_strtod_l+0x29c>)
 8013bb8:	2201      	movs	r2, #1
 8013bba:	f001 fa97 	bl	80150ec <strncmp>
 8013bbe:	b398      	cbz	r0, 8013c28 <_strtod_l+0x1d0>
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	4607      	mov	r7, r0
 8013bc8:	4601      	mov	r1, r0
 8013bca:	2a65      	cmp	r2, #101	@ 0x65
 8013bcc:	d001      	beq.n	8013bd2 <_strtod_l+0x17a>
 8013bce:	2a45      	cmp	r2, #69	@ 0x45
 8013bd0:	d118      	bne.n	8013c04 <_strtod_l+0x1ac>
 8013bd2:	b91b      	cbnz	r3, 8013bdc <_strtod_l+0x184>
 8013bd4:	9b07      	ldr	r3, [sp, #28]
 8013bd6:	4303      	orrs	r3, r0
 8013bd8:	d095      	beq.n	8013b06 <_strtod_l+0xae>
 8013bda:	2300      	movs	r3, #0
 8013bdc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013be0:	f108 0201 	add.w	r2, r8, #1
 8013be4:	9211      	str	r2, [sp, #68]	@ 0x44
 8013be6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013bea:	2a2b      	cmp	r2, #43	@ 0x2b
 8013bec:	d074      	beq.n	8013cd8 <_strtod_l+0x280>
 8013bee:	2a2d      	cmp	r2, #45	@ 0x2d
 8013bf0:	d07a      	beq.n	8013ce8 <_strtod_l+0x290>
 8013bf2:	f04f 0e00 	mov.w	lr, #0
 8013bf6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013bfa:	2c09      	cmp	r4, #9
 8013bfc:	f240 8082 	bls.w	8013d04 <_strtod_l+0x2ac>
 8013c00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013c04:	2400      	movs	r4, #0
 8013c06:	e09d      	b.n	8013d44 <_strtod_l+0x2ec>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	e7c5      	b.n	8013b98 <_strtod_l+0x140>
 8013c0c:	2d08      	cmp	r5, #8
 8013c0e:	bfc8      	it	gt
 8013c10:	9906      	ldrgt	r1, [sp, #24]
 8013c12:	f100 0001 	add.w	r0, r0, #1
 8013c16:	bfca      	itet	gt
 8013c18:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013c1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013c20:	9306      	strgt	r3, [sp, #24]
 8013c22:	3501      	adds	r5, #1
 8013c24:	9011      	str	r0, [sp, #68]	@ 0x44
 8013c26:	e7bf      	b.n	8013ba8 <_strtod_l+0x150>
 8013c28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c2a:	1c5a      	adds	r2, r3, #1
 8013c2c:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c2e:	785a      	ldrb	r2, [r3, #1]
 8013c30:	b3bd      	cbz	r5, 8013ca2 <_strtod_l+0x24a>
 8013c32:	4607      	mov	r7, r0
 8013c34:	462b      	mov	r3, r5
 8013c36:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013c3a:	2909      	cmp	r1, #9
 8013c3c:	d912      	bls.n	8013c64 <_strtod_l+0x20c>
 8013c3e:	2101      	movs	r1, #1
 8013c40:	e7c3      	b.n	8013bca <_strtod_l+0x172>
 8013c42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c44:	1c5a      	adds	r2, r3, #1
 8013c46:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c48:	785a      	ldrb	r2, [r3, #1]
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	2a30      	cmp	r2, #48	@ 0x30
 8013c4e:	d0f8      	beq.n	8013c42 <_strtod_l+0x1ea>
 8013c50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013c54:	2b08      	cmp	r3, #8
 8013c56:	f200 847a 	bhi.w	801454e <_strtod_l+0xaf6>
 8013c5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c5e:	4607      	mov	r7, r0
 8013c60:	2000      	movs	r0, #0
 8013c62:	4603      	mov	r3, r0
 8013c64:	3a30      	subs	r2, #48	@ 0x30
 8013c66:	f100 0101 	add.w	r1, r0, #1
 8013c6a:	d014      	beq.n	8013c96 <_strtod_l+0x23e>
 8013c6c:	440f      	add	r7, r1
 8013c6e:	469c      	mov	ip, r3
 8013c70:	f04f 0e0a 	mov.w	lr, #10
 8013c74:	f10c 0401 	add.w	r4, ip, #1
 8013c78:	1ae6      	subs	r6, r4, r3
 8013c7a:	42b1      	cmp	r1, r6
 8013c7c:	dc13      	bgt.n	8013ca6 <_strtod_l+0x24e>
 8013c7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013c82:	1819      	adds	r1, r3, r0
 8013c84:	2908      	cmp	r1, #8
 8013c86:	f103 0301 	add.w	r3, r3, #1
 8013c8a:	4403      	add	r3, r0
 8013c8c:	dc19      	bgt.n	8013cc2 <_strtod_l+0x26a>
 8013c8e:	210a      	movs	r1, #10
 8013c90:	fb01 2909 	mla	r9, r1, r9, r2
 8013c94:	2100      	movs	r1, #0
 8013c96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c98:	1c50      	adds	r0, r2, #1
 8013c9a:	9011      	str	r0, [sp, #68]	@ 0x44
 8013c9c:	7852      	ldrb	r2, [r2, #1]
 8013c9e:	4608      	mov	r0, r1
 8013ca0:	e7c9      	b.n	8013c36 <_strtod_l+0x1de>
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	e7d2      	b.n	8013c4c <_strtod_l+0x1f4>
 8013ca6:	f1bc 0f08 	cmp.w	ip, #8
 8013caa:	dc03      	bgt.n	8013cb4 <_strtod_l+0x25c>
 8013cac:	fb0e f909 	mul.w	r9, lr, r9
 8013cb0:	46a4      	mov	ip, r4
 8013cb2:	e7df      	b.n	8013c74 <_strtod_l+0x21c>
 8013cb4:	2c10      	cmp	r4, #16
 8013cb6:	bfde      	ittt	le
 8013cb8:	9e06      	ldrle	r6, [sp, #24]
 8013cba:	fb0e f606 	mulle.w	r6, lr, r6
 8013cbe:	9606      	strle	r6, [sp, #24]
 8013cc0:	e7f6      	b.n	8013cb0 <_strtod_l+0x258>
 8013cc2:	290f      	cmp	r1, #15
 8013cc4:	bfdf      	itttt	le
 8013cc6:	9806      	ldrle	r0, [sp, #24]
 8013cc8:	210a      	movle	r1, #10
 8013cca:	fb01 2200 	mlale	r2, r1, r0, r2
 8013cce:	9206      	strle	r2, [sp, #24]
 8013cd0:	e7e0      	b.n	8013c94 <_strtod_l+0x23c>
 8013cd2:	2700      	movs	r7, #0
 8013cd4:	2101      	movs	r1, #1
 8013cd6:	e77d      	b.n	8013bd4 <_strtod_l+0x17c>
 8013cd8:	f04f 0e00 	mov.w	lr, #0
 8013cdc:	f108 0202 	add.w	r2, r8, #2
 8013ce0:	9211      	str	r2, [sp, #68]	@ 0x44
 8013ce2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013ce6:	e786      	b.n	8013bf6 <_strtod_l+0x19e>
 8013ce8:	f04f 0e01 	mov.w	lr, #1
 8013cec:	e7f6      	b.n	8013cdc <_strtod_l+0x284>
 8013cee:	bf00      	nop
 8013cf0:	08018160 	.word	0x08018160
 8013cf4:	08017f78 	.word	0x08017f78
 8013cf8:	7ff00000 	.word	0x7ff00000
 8013cfc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013cfe:	1c54      	adds	r4, r2, #1
 8013d00:	9411      	str	r4, [sp, #68]	@ 0x44
 8013d02:	7852      	ldrb	r2, [r2, #1]
 8013d04:	2a30      	cmp	r2, #48	@ 0x30
 8013d06:	d0f9      	beq.n	8013cfc <_strtod_l+0x2a4>
 8013d08:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013d0c:	2c08      	cmp	r4, #8
 8013d0e:	f63f af79 	bhi.w	8013c04 <_strtod_l+0x1ac>
 8013d12:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013d16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d1c:	1c54      	adds	r4, r2, #1
 8013d1e:	9411      	str	r4, [sp, #68]	@ 0x44
 8013d20:	7852      	ldrb	r2, [r2, #1]
 8013d22:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013d26:	2e09      	cmp	r6, #9
 8013d28:	d937      	bls.n	8013d9a <_strtod_l+0x342>
 8013d2a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013d2c:	1ba4      	subs	r4, r4, r6
 8013d2e:	2c08      	cmp	r4, #8
 8013d30:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013d34:	dc02      	bgt.n	8013d3c <_strtod_l+0x2e4>
 8013d36:	4564      	cmp	r4, ip
 8013d38:	bfa8      	it	ge
 8013d3a:	4664      	movge	r4, ip
 8013d3c:	f1be 0f00 	cmp.w	lr, #0
 8013d40:	d000      	beq.n	8013d44 <_strtod_l+0x2ec>
 8013d42:	4264      	negs	r4, r4
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d14d      	bne.n	8013de4 <_strtod_l+0x38c>
 8013d48:	9b07      	ldr	r3, [sp, #28]
 8013d4a:	4318      	orrs	r0, r3
 8013d4c:	f47f aebf 	bne.w	8013ace <_strtod_l+0x76>
 8013d50:	2900      	cmp	r1, #0
 8013d52:	f47f aed8 	bne.w	8013b06 <_strtod_l+0xae>
 8013d56:	2a69      	cmp	r2, #105	@ 0x69
 8013d58:	d027      	beq.n	8013daa <_strtod_l+0x352>
 8013d5a:	dc24      	bgt.n	8013da6 <_strtod_l+0x34e>
 8013d5c:	2a49      	cmp	r2, #73	@ 0x49
 8013d5e:	d024      	beq.n	8013daa <_strtod_l+0x352>
 8013d60:	2a4e      	cmp	r2, #78	@ 0x4e
 8013d62:	f47f aed0 	bne.w	8013b06 <_strtod_l+0xae>
 8013d66:	4997      	ldr	r1, [pc, #604]	@ (8013fc4 <_strtod_l+0x56c>)
 8013d68:	a811      	add	r0, sp, #68	@ 0x44
 8013d6a:	f002 fb97 	bl	801649c <__match>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f43f aec9 	beq.w	8013b06 <_strtod_l+0xae>
 8013d74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	2b28      	cmp	r3, #40	@ 0x28
 8013d7a:	d12d      	bne.n	8013dd8 <_strtod_l+0x380>
 8013d7c:	4992      	ldr	r1, [pc, #584]	@ (8013fc8 <_strtod_l+0x570>)
 8013d7e:	aa14      	add	r2, sp, #80	@ 0x50
 8013d80:	a811      	add	r0, sp, #68	@ 0x44
 8013d82:	f002 fb9f 	bl	80164c4 <__hexnan>
 8013d86:	2805      	cmp	r0, #5
 8013d88:	d126      	bne.n	8013dd8 <_strtod_l+0x380>
 8013d8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013d8c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013d90:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013d94:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013d98:	e699      	b.n	8013ace <_strtod_l+0x76>
 8013d9a:	240a      	movs	r4, #10
 8013d9c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013da0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013da4:	e7b9      	b.n	8013d1a <_strtod_l+0x2c2>
 8013da6:	2a6e      	cmp	r2, #110	@ 0x6e
 8013da8:	e7db      	b.n	8013d62 <_strtod_l+0x30a>
 8013daa:	4988      	ldr	r1, [pc, #544]	@ (8013fcc <_strtod_l+0x574>)
 8013dac:	a811      	add	r0, sp, #68	@ 0x44
 8013dae:	f002 fb75 	bl	801649c <__match>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	f43f aea7 	beq.w	8013b06 <_strtod_l+0xae>
 8013db8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013dba:	4985      	ldr	r1, [pc, #532]	@ (8013fd0 <_strtod_l+0x578>)
 8013dbc:	3b01      	subs	r3, #1
 8013dbe:	a811      	add	r0, sp, #68	@ 0x44
 8013dc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013dc2:	f002 fb6b 	bl	801649c <__match>
 8013dc6:	b910      	cbnz	r0, 8013dce <_strtod_l+0x376>
 8013dc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013dca:	3301      	adds	r3, #1
 8013dcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8013dce:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013fe4 <_strtod_l+0x58c>
 8013dd2:	f04f 0a00 	mov.w	sl, #0
 8013dd6:	e67a      	b.n	8013ace <_strtod_l+0x76>
 8013dd8:	487e      	ldr	r0, [pc, #504]	@ (8013fd4 <_strtod_l+0x57c>)
 8013dda:	f001 fa95 	bl	8015308 <nan>
 8013dde:	ec5b ab10 	vmov	sl, fp, d0
 8013de2:	e674      	b.n	8013ace <_strtod_l+0x76>
 8013de4:	ee07 9a90 	vmov	s15, r9
 8013de8:	1be2      	subs	r2, r4, r7
 8013dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013dee:	2d00      	cmp	r5, #0
 8013df0:	bf08      	it	eq
 8013df2:	461d      	moveq	r5, r3
 8013df4:	2b10      	cmp	r3, #16
 8013df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013df8:	461a      	mov	r2, r3
 8013dfa:	bfa8      	it	ge
 8013dfc:	2210      	movge	r2, #16
 8013dfe:	2b09      	cmp	r3, #9
 8013e00:	ec5b ab17 	vmov	sl, fp, d7
 8013e04:	dc15      	bgt.n	8013e32 <_strtod_l+0x3da>
 8013e06:	1be1      	subs	r1, r4, r7
 8013e08:	2900      	cmp	r1, #0
 8013e0a:	f43f ae60 	beq.w	8013ace <_strtod_l+0x76>
 8013e0e:	eba4 0107 	sub.w	r1, r4, r7
 8013e12:	dd72      	ble.n	8013efa <_strtod_l+0x4a2>
 8013e14:	2916      	cmp	r1, #22
 8013e16:	dc59      	bgt.n	8013ecc <_strtod_l+0x474>
 8013e18:	4b6f      	ldr	r3, [pc, #444]	@ (8013fd8 <_strtod_l+0x580>)
 8013e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e20:	ed93 7b00 	vldr	d7, [r3]
 8013e24:	ec4b ab16 	vmov	d6, sl, fp
 8013e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e2c:	ec5b ab17 	vmov	sl, fp, d7
 8013e30:	e64d      	b.n	8013ace <_strtod_l+0x76>
 8013e32:	4969      	ldr	r1, [pc, #420]	@ (8013fd8 <_strtod_l+0x580>)
 8013e34:	eddd 6a06 	vldr	s13, [sp, #24]
 8013e38:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013e3c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013e40:	2b0f      	cmp	r3, #15
 8013e42:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013e46:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013e4a:	ec5b ab16 	vmov	sl, fp, d6
 8013e4e:	ddda      	ble.n	8013e06 <_strtod_l+0x3ae>
 8013e50:	1a9a      	subs	r2, r3, r2
 8013e52:	1be1      	subs	r1, r4, r7
 8013e54:	440a      	add	r2, r1
 8013e56:	2a00      	cmp	r2, #0
 8013e58:	f340 8094 	ble.w	8013f84 <_strtod_l+0x52c>
 8013e5c:	f012 000f 	ands.w	r0, r2, #15
 8013e60:	d00a      	beq.n	8013e78 <_strtod_l+0x420>
 8013e62:	495d      	ldr	r1, [pc, #372]	@ (8013fd8 <_strtod_l+0x580>)
 8013e64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013e68:	ed91 7b00 	vldr	d7, [r1]
 8013e6c:	ec4b ab16 	vmov	d6, sl, fp
 8013e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e74:	ec5b ab17 	vmov	sl, fp, d7
 8013e78:	f032 020f 	bics.w	r2, r2, #15
 8013e7c:	d073      	beq.n	8013f66 <_strtod_l+0x50e>
 8013e7e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013e82:	dd47      	ble.n	8013f14 <_strtod_l+0x4bc>
 8013e84:	2400      	movs	r4, #0
 8013e86:	4625      	mov	r5, r4
 8013e88:	9407      	str	r4, [sp, #28]
 8013e8a:	4626      	mov	r6, r4
 8013e8c:	9a05      	ldr	r2, [sp, #20]
 8013e8e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013fe4 <_strtod_l+0x58c>
 8013e92:	2322      	movs	r3, #34	@ 0x22
 8013e94:	6013      	str	r3, [r2, #0]
 8013e96:	f04f 0a00 	mov.w	sl, #0
 8013e9a:	9b07      	ldr	r3, [sp, #28]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	f43f ae16 	beq.w	8013ace <_strtod_l+0x76>
 8013ea2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013ea4:	9805      	ldr	r0, [sp, #20]
 8013ea6:	f002 fcb1 	bl	801680c <_Bfree>
 8013eaa:	9805      	ldr	r0, [sp, #20]
 8013eac:	4631      	mov	r1, r6
 8013eae:	f002 fcad 	bl	801680c <_Bfree>
 8013eb2:	9805      	ldr	r0, [sp, #20]
 8013eb4:	4629      	mov	r1, r5
 8013eb6:	f002 fca9 	bl	801680c <_Bfree>
 8013eba:	9907      	ldr	r1, [sp, #28]
 8013ebc:	9805      	ldr	r0, [sp, #20]
 8013ebe:	f002 fca5 	bl	801680c <_Bfree>
 8013ec2:	9805      	ldr	r0, [sp, #20]
 8013ec4:	4621      	mov	r1, r4
 8013ec6:	f002 fca1 	bl	801680c <_Bfree>
 8013eca:	e600      	b.n	8013ace <_strtod_l+0x76>
 8013ecc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013ed0:	1be0      	subs	r0, r4, r7
 8013ed2:	4281      	cmp	r1, r0
 8013ed4:	dbbc      	blt.n	8013e50 <_strtod_l+0x3f8>
 8013ed6:	4a40      	ldr	r2, [pc, #256]	@ (8013fd8 <_strtod_l+0x580>)
 8013ed8:	f1c3 030f 	rsb	r3, r3, #15
 8013edc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013ee0:	ed91 7b00 	vldr	d7, [r1]
 8013ee4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ee6:	ec4b ab16 	vmov	d6, sl, fp
 8013eea:	1acb      	subs	r3, r1, r3
 8013eec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ef4:	ed92 6b00 	vldr	d6, [r2]
 8013ef8:	e796      	b.n	8013e28 <_strtod_l+0x3d0>
 8013efa:	3116      	adds	r1, #22
 8013efc:	dba8      	blt.n	8013e50 <_strtod_l+0x3f8>
 8013efe:	4b36      	ldr	r3, [pc, #216]	@ (8013fd8 <_strtod_l+0x580>)
 8013f00:	1b3c      	subs	r4, r7, r4
 8013f02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013f06:	ed94 7b00 	vldr	d7, [r4]
 8013f0a:	ec4b ab16 	vmov	d6, sl, fp
 8013f0e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013f12:	e78b      	b.n	8013e2c <_strtod_l+0x3d4>
 8013f14:	2000      	movs	r0, #0
 8013f16:	ec4b ab17 	vmov	d7, sl, fp
 8013f1a:	4e30      	ldr	r6, [pc, #192]	@ (8013fdc <_strtod_l+0x584>)
 8013f1c:	1112      	asrs	r2, r2, #4
 8013f1e:	4601      	mov	r1, r0
 8013f20:	2a01      	cmp	r2, #1
 8013f22:	dc23      	bgt.n	8013f6c <_strtod_l+0x514>
 8013f24:	b108      	cbz	r0, 8013f2a <_strtod_l+0x4d2>
 8013f26:	ec5b ab17 	vmov	sl, fp, d7
 8013f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8013fdc <_strtod_l+0x584>)
 8013f2c:	482c      	ldr	r0, [pc, #176]	@ (8013fe0 <_strtod_l+0x588>)
 8013f2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013f32:	ed92 7b00 	vldr	d7, [r2]
 8013f36:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013f3a:	ec4b ab16 	vmov	d6, sl, fp
 8013f3e:	4a29      	ldr	r2, [pc, #164]	@ (8013fe4 <_strtod_l+0x58c>)
 8013f40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f44:	ee17 1a90 	vmov	r1, s15
 8013f48:	400a      	ands	r2, r1
 8013f4a:	4282      	cmp	r2, r0
 8013f4c:	ec5b ab17 	vmov	sl, fp, d7
 8013f50:	d898      	bhi.n	8013e84 <_strtod_l+0x42c>
 8013f52:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013f56:	4282      	cmp	r2, r0
 8013f58:	bf86      	itte	hi
 8013f5a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013fe8 <_strtod_l+0x590>
 8013f5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013f62:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013f66:	2200      	movs	r2, #0
 8013f68:	9206      	str	r2, [sp, #24]
 8013f6a:	e076      	b.n	801405a <_strtod_l+0x602>
 8013f6c:	f012 0f01 	tst.w	r2, #1
 8013f70:	d004      	beq.n	8013f7c <_strtod_l+0x524>
 8013f72:	ed96 6b00 	vldr	d6, [r6]
 8013f76:	2001      	movs	r0, #1
 8013f78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f7c:	3101      	adds	r1, #1
 8013f7e:	1052      	asrs	r2, r2, #1
 8013f80:	3608      	adds	r6, #8
 8013f82:	e7cd      	b.n	8013f20 <_strtod_l+0x4c8>
 8013f84:	d0ef      	beq.n	8013f66 <_strtod_l+0x50e>
 8013f86:	4252      	negs	r2, r2
 8013f88:	f012 000f 	ands.w	r0, r2, #15
 8013f8c:	d00a      	beq.n	8013fa4 <_strtod_l+0x54c>
 8013f8e:	4912      	ldr	r1, [pc, #72]	@ (8013fd8 <_strtod_l+0x580>)
 8013f90:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013f94:	ed91 7b00 	vldr	d7, [r1]
 8013f98:	ec4b ab16 	vmov	d6, sl, fp
 8013f9c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013fa0:	ec5b ab17 	vmov	sl, fp, d7
 8013fa4:	1112      	asrs	r2, r2, #4
 8013fa6:	d0de      	beq.n	8013f66 <_strtod_l+0x50e>
 8013fa8:	2a1f      	cmp	r2, #31
 8013faa:	dd1f      	ble.n	8013fec <_strtod_l+0x594>
 8013fac:	2400      	movs	r4, #0
 8013fae:	4625      	mov	r5, r4
 8013fb0:	9407      	str	r4, [sp, #28]
 8013fb2:	4626      	mov	r6, r4
 8013fb4:	9a05      	ldr	r2, [sp, #20]
 8013fb6:	2322      	movs	r3, #34	@ 0x22
 8013fb8:	f04f 0a00 	mov.w	sl, #0
 8013fbc:	f04f 0b00 	mov.w	fp, #0
 8013fc0:	6013      	str	r3, [r2, #0]
 8013fc2:	e76a      	b.n	8013e9a <_strtod_l+0x442>
 8013fc4:	08017f87 	.word	0x08017f87
 8013fc8:	0801814c 	.word	0x0801814c
 8013fcc:	08017f7f 	.word	0x08017f7f
 8013fd0:	08017fb9 	.word	0x08017fb9
 8013fd4:	08018148 	.word	0x08018148
 8013fd8:	080181d8 	.word	0x080181d8
 8013fdc:	080181b0 	.word	0x080181b0
 8013fe0:	7ca00000 	.word	0x7ca00000
 8013fe4:	7ff00000 	.word	0x7ff00000
 8013fe8:	7fefffff 	.word	0x7fefffff
 8013fec:	f012 0110 	ands.w	r1, r2, #16
 8013ff0:	bf18      	it	ne
 8013ff2:	216a      	movne	r1, #106	@ 0x6a
 8013ff4:	9106      	str	r1, [sp, #24]
 8013ff6:	ec4b ab17 	vmov	d7, sl, fp
 8013ffa:	49af      	ldr	r1, [pc, #700]	@ (80142b8 <_strtod_l+0x860>)
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	07d6      	lsls	r6, r2, #31
 8014000:	d504      	bpl.n	801400c <_strtod_l+0x5b4>
 8014002:	ed91 6b00 	vldr	d6, [r1]
 8014006:	2001      	movs	r0, #1
 8014008:	ee27 7b06 	vmul.f64	d7, d7, d6
 801400c:	1052      	asrs	r2, r2, #1
 801400e:	f101 0108 	add.w	r1, r1, #8
 8014012:	d1f4      	bne.n	8013ffe <_strtod_l+0x5a6>
 8014014:	b108      	cbz	r0, 801401a <_strtod_l+0x5c2>
 8014016:	ec5b ab17 	vmov	sl, fp, d7
 801401a:	9a06      	ldr	r2, [sp, #24]
 801401c:	b1b2      	cbz	r2, 801404c <_strtod_l+0x5f4>
 801401e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8014022:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8014026:	2a00      	cmp	r2, #0
 8014028:	4658      	mov	r0, fp
 801402a:	dd0f      	ble.n	801404c <_strtod_l+0x5f4>
 801402c:	2a1f      	cmp	r2, #31
 801402e:	dd55      	ble.n	80140dc <_strtod_l+0x684>
 8014030:	2a34      	cmp	r2, #52	@ 0x34
 8014032:	bfde      	ittt	le
 8014034:	f04f 32ff 	movle.w	r2, #4294967295
 8014038:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801403c:	408a      	lslle	r2, r1
 801403e:	f04f 0a00 	mov.w	sl, #0
 8014042:	bfcc      	ite	gt
 8014044:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014048:	ea02 0b00 	andle.w	fp, r2, r0
 801404c:	ec4b ab17 	vmov	d7, sl, fp
 8014050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014058:	d0a8      	beq.n	8013fac <_strtod_l+0x554>
 801405a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801405c:	9805      	ldr	r0, [sp, #20]
 801405e:	f8cd 9000 	str.w	r9, [sp]
 8014062:	462a      	mov	r2, r5
 8014064:	f002 fc3a 	bl	80168dc <__s2b>
 8014068:	9007      	str	r0, [sp, #28]
 801406a:	2800      	cmp	r0, #0
 801406c:	f43f af0a 	beq.w	8013e84 <_strtod_l+0x42c>
 8014070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014072:	1b3f      	subs	r7, r7, r4
 8014074:	2b00      	cmp	r3, #0
 8014076:	bfb4      	ite	lt
 8014078:	463b      	movlt	r3, r7
 801407a:	2300      	movge	r3, #0
 801407c:	930a      	str	r3, [sp, #40]	@ 0x28
 801407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014080:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80142a8 <_strtod_l+0x850>
 8014084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014088:	2400      	movs	r4, #0
 801408a:	930d      	str	r3, [sp, #52]	@ 0x34
 801408c:	4625      	mov	r5, r4
 801408e:	9b07      	ldr	r3, [sp, #28]
 8014090:	9805      	ldr	r0, [sp, #20]
 8014092:	6859      	ldr	r1, [r3, #4]
 8014094:	f002 fb7a 	bl	801678c <_Balloc>
 8014098:	4606      	mov	r6, r0
 801409a:	2800      	cmp	r0, #0
 801409c:	f43f aef6 	beq.w	8013e8c <_strtod_l+0x434>
 80140a0:	9b07      	ldr	r3, [sp, #28]
 80140a2:	691a      	ldr	r2, [r3, #16]
 80140a4:	ec4b ab19 	vmov	d9, sl, fp
 80140a8:	3202      	adds	r2, #2
 80140aa:	f103 010c 	add.w	r1, r3, #12
 80140ae:	0092      	lsls	r2, r2, #2
 80140b0:	300c      	adds	r0, #12
 80140b2:	f001 f918 	bl	80152e6 <memcpy>
 80140b6:	eeb0 0b49 	vmov.f64	d0, d9
 80140ba:	9805      	ldr	r0, [sp, #20]
 80140bc:	aa14      	add	r2, sp, #80	@ 0x50
 80140be:	a913      	add	r1, sp, #76	@ 0x4c
 80140c0:	f002 ff40 	bl	8016f44 <__d2b>
 80140c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80140c6:	2800      	cmp	r0, #0
 80140c8:	f43f aee0 	beq.w	8013e8c <_strtod_l+0x434>
 80140cc:	9805      	ldr	r0, [sp, #20]
 80140ce:	2101      	movs	r1, #1
 80140d0:	f002 fc9a 	bl	8016a08 <__i2b>
 80140d4:	4605      	mov	r5, r0
 80140d6:	b940      	cbnz	r0, 80140ea <_strtod_l+0x692>
 80140d8:	2500      	movs	r5, #0
 80140da:	e6d7      	b.n	8013e8c <_strtod_l+0x434>
 80140dc:	f04f 31ff 	mov.w	r1, #4294967295
 80140e0:	fa01 f202 	lsl.w	r2, r1, r2
 80140e4:	ea02 0a0a 	and.w	sl, r2, sl
 80140e8:	e7b0      	b.n	801404c <_strtod_l+0x5f4>
 80140ea:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80140ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80140ee:	2f00      	cmp	r7, #0
 80140f0:	bfab      	itete	ge
 80140f2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80140f4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80140f6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80140fa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80140fe:	bfac      	ite	ge
 8014100:	eb07 0903 	addge.w	r9, r7, r3
 8014104:	eba3 0807 	sublt.w	r8, r3, r7
 8014108:	9b06      	ldr	r3, [sp, #24]
 801410a:	1aff      	subs	r7, r7, r3
 801410c:	4417      	add	r7, r2
 801410e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8014112:	4a6a      	ldr	r2, [pc, #424]	@ (80142bc <_strtod_l+0x864>)
 8014114:	3f01      	subs	r7, #1
 8014116:	4297      	cmp	r7, r2
 8014118:	da51      	bge.n	80141be <_strtod_l+0x766>
 801411a:	1bd1      	subs	r1, r2, r7
 801411c:	291f      	cmp	r1, #31
 801411e:	eba3 0301 	sub.w	r3, r3, r1
 8014122:	f04f 0201 	mov.w	r2, #1
 8014126:	dc3e      	bgt.n	80141a6 <_strtod_l+0x74e>
 8014128:	408a      	lsls	r2, r1
 801412a:	920c      	str	r2, [sp, #48]	@ 0x30
 801412c:	2200      	movs	r2, #0
 801412e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014130:	eb09 0703 	add.w	r7, r9, r3
 8014134:	4498      	add	r8, r3
 8014136:	9b06      	ldr	r3, [sp, #24]
 8014138:	45b9      	cmp	r9, r7
 801413a:	4498      	add	r8, r3
 801413c:	464b      	mov	r3, r9
 801413e:	bfa8      	it	ge
 8014140:	463b      	movge	r3, r7
 8014142:	4543      	cmp	r3, r8
 8014144:	bfa8      	it	ge
 8014146:	4643      	movge	r3, r8
 8014148:	2b00      	cmp	r3, #0
 801414a:	bfc2      	ittt	gt
 801414c:	1aff      	subgt	r7, r7, r3
 801414e:	eba8 0803 	subgt.w	r8, r8, r3
 8014152:	eba9 0903 	subgt.w	r9, r9, r3
 8014156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014158:	2b00      	cmp	r3, #0
 801415a:	dd16      	ble.n	801418a <_strtod_l+0x732>
 801415c:	4629      	mov	r1, r5
 801415e:	9805      	ldr	r0, [sp, #20]
 8014160:	461a      	mov	r2, r3
 8014162:	f002 fd09 	bl	8016b78 <__pow5mult>
 8014166:	4605      	mov	r5, r0
 8014168:	2800      	cmp	r0, #0
 801416a:	d0b5      	beq.n	80140d8 <_strtod_l+0x680>
 801416c:	4601      	mov	r1, r0
 801416e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014170:	9805      	ldr	r0, [sp, #20]
 8014172:	f002 fc5f 	bl	8016a34 <__multiply>
 8014176:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014178:	2800      	cmp	r0, #0
 801417a:	f43f ae87 	beq.w	8013e8c <_strtod_l+0x434>
 801417e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014180:	9805      	ldr	r0, [sp, #20]
 8014182:	f002 fb43 	bl	801680c <_Bfree>
 8014186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014188:	9312      	str	r3, [sp, #72]	@ 0x48
 801418a:	2f00      	cmp	r7, #0
 801418c:	dc1b      	bgt.n	80141c6 <_strtod_l+0x76e>
 801418e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014190:	2b00      	cmp	r3, #0
 8014192:	dd21      	ble.n	80141d8 <_strtod_l+0x780>
 8014194:	4631      	mov	r1, r6
 8014196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014198:	9805      	ldr	r0, [sp, #20]
 801419a:	f002 fced 	bl	8016b78 <__pow5mult>
 801419e:	4606      	mov	r6, r0
 80141a0:	b9d0      	cbnz	r0, 80141d8 <_strtod_l+0x780>
 80141a2:	2600      	movs	r6, #0
 80141a4:	e672      	b.n	8013e8c <_strtod_l+0x434>
 80141a6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80141aa:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80141ae:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80141b2:	37e2      	adds	r7, #226	@ 0xe2
 80141b4:	fa02 f107 	lsl.w	r1, r2, r7
 80141b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80141ba:	920c      	str	r2, [sp, #48]	@ 0x30
 80141bc:	e7b8      	b.n	8014130 <_strtod_l+0x6d8>
 80141be:	2200      	movs	r2, #0
 80141c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80141c2:	2201      	movs	r2, #1
 80141c4:	e7f9      	b.n	80141ba <_strtod_l+0x762>
 80141c6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80141c8:	9805      	ldr	r0, [sp, #20]
 80141ca:	463a      	mov	r2, r7
 80141cc:	f002 fd2e 	bl	8016c2c <__lshift>
 80141d0:	9012      	str	r0, [sp, #72]	@ 0x48
 80141d2:	2800      	cmp	r0, #0
 80141d4:	d1db      	bne.n	801418e <_strtod_l+0x736>
 80141d6:	e659      	b.n	8013e8c <_strtod_l+0x434>
 80141d8:	f1b8 0f00 	cmp.w	r8, #0
 80141dc:	dd07      	ble.n	80141ee <_strtod_l+0x796>
 80141de:	4631      	mov	r1, r6
 80141e0:	9805      	ldr	r0, [sp, #20]
 80141e2:	4642      	mov	r2, r8
 80141e4:	f002 fd22 	bl	8016c2c <__lshift>
 80141e8:	4606      	mov	r6, r0
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d0d9      	beq.n	80141a2 <_strtod_l+0x74a>
 80141ee:	f1b9 0f00 	cmp.w	r9, #0
 80141f2:	dd08      	ble.n	8014206 <_strtod_l+0x7ae>
 80141f4:	4629      	mov	r1, r5
 80141f6:	9805      	ldr	r0, [sp, #20]
 80141f8:	464a      	mov	r2, r9
 80141fa:	f002 fd17 	bl	8016c2c <__lshift>
 80141fe:	4605      	mov	r5, r0
 8014200:	2800      	cmp	r0, #0
 8014202:	f43f ae43 	beq.w	8013e8c <_strtod_l+0x434>
 8014206:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014208:	9805      	ldr	r0, [sp, #20]
 801420a:	4632      	mov	r2, r6
 801420c:	f002 fd96 	bl	8016d3c <__mdiff>
 8014210:	4604      	mov	r4, r0
 8014212:	2800      	cmp	r0, #0
 8014214:	f43f ae3a 	beq.w	8013e8c <_strtod_l+0x434>
 8014218:	2300      	movs	r3, #0
 801421a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801421e:	60c3      	str	r3, [r0, #12]
 8014220:	4629      	mov	r1, r5
 8014222:	f002 fd6f 	bl	8016d04 <__mcmp>
 8014226:	2800      	cmp	r0, #0
 8014228:	da4c      	bge.n	80142c4 <_strtod_l+0x86c>
 801422a:	ea58 080a 	orrs.w	r8, r8, sl
 801422e:	d172      	bne.n	8014316 <_strtod_l+0x8be>
 8014230:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014234:	2b00      	cmp	r3, #0
 8014236:	d16e      	bne.n	8014316 <_strtod_l+0x8be>
 8014238:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801423c:	0d1b      	lsrs	r3, r3, #20
 801423e:	051b      	lsls	r3, r3, #20
 8014240:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014244:	d967      	bls.n	8014316 <_strtod_l+0x8be>
 8014246:	6963      	ldr	r3, [r4, #20]
 8014248:	b913      	cbnz	r3, 8014250 <_strtod_l+0x7f8>
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	2b01      	cmp	r3, #1
 801424e:	dd62      	ble.n	8014316 <_strtod_l+0x8be>
 8014250:	4621      	mov	r1, r4
 8014252:	2201      	movs	r2, #1
 8014254:	9805      	ldr	r0, [sp, #20]
 8014256:	f002 fce9 	bl	8016c2c <__lshift>
 801425a:	4629      	mov	r1, r5
 801425c:	4604      	mov	r4, r0
 801425e:	f002 fd51 	bl	8016d04 <__mcmp>
 8014262:	2800      	cmp	r0, #0
 8014264:	dd57      	ble.n	8014316 <_strtod_l+0x8be>
 8014266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801426a:	9a06      	ldr	r2, [sp, #24]
 801426c:	0d1b      	lsrs	r3, r3, #20
 801426e:	051b      	lsls	r3, r3, #20
 8014270:	2a00      	cmp	r2, #0
 8014272:	d06e      	beq.n	8014352 <_strtod_l+0x8fa>
 8014274:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014278:	d86b      	bhi.n	8014352 <_strtod_l+0x8fa>
 801427a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801427e:	f67f ae99 	bls.w	8013fb4 <_strtod_l+0x55c>
 8014282:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80142b0 <_strtod_l+0x858>
 8014286:	ec4b ab16 	vmov	d6, sl, fp
 801428a:	4b0d      	ldr	r3, [pc, #52]	@ (80142c0 <_strtod_l+0x868>)
 801428c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014290:	ee17 2a90 	vmov	r2, s15
 8014294:	4013      	ands	r3, r2
 8014296:	ec5b ab17 	vmov	sl, fp, d7
 801429a:	2b00      	cmp	r3, #0
 801429c:	f47f ae01 	bne.w	8013ea2 <_strtod_l+0x44a>
 80142a0:	9a05      	ldr	r2, [sp, #20]
 80142a2:	2322      	movs	r3, #34	@ 0x22
 80142a4:	6013      	str	r3, [r2, #0]
 80142a6:	e5fc      	b.n	8013ea2 <_strtod_l+0x44a>
 80142a8:	ffc00000 	.word	0xffc00000
 80142ac:	41dfffff 	.word	0x41dfffff
 80142b0:	00000000 	.word	0x00000000
 80142b4:	39500000 	.word	0x39500000
 80142b8:	08018178 	.word	0x08018178
 80142bc:	fffffc02 	.word	0xfffffc02
 80142c0:	7ff00000 	.word	0x7ff00000
 80142c4:	46d9      	mov	r9, fp
 80142c6:	d15d      	bne.n	8014384 <_strtod_l+0x92c>
 80142c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142cc:	f1b8 0f00 	cmp.w	r8, #0
 80142d0:	d02a      	beq.n	8014328 <_strtod_l+0x8d0>
 80142d2:	4aa9      	ldr	r2, [pc, #676]	@ (8014578 <_strtod_l+0xb20>)
 80142d4:	4293      	cmp	r3, r2
 80142d6:	d12a      	bne.n	801432e <_strtod_l+0x8d6>
 80142d8:	9b06      	ldr	r3, [sp, #24]
 80142da:	4652      	mov	r2, sl
 80142dc:	b1fb      	cbz	r3, 801431e <_strtod_l+0x8c6>
 80142de:	4ba7      	ldr	r3, [pc, #668]	@ (801457c <_strtod_l+0xb24>)
 80142e0:	ea0b 0303 	and.w	r3, fp, r3
 80142e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80142e8:	f04f 31ff 	mov.w	r1, #4294967295
 80142ec:	d81a      	bhi.n	8014324 <_strtod_l+0x8cc>
 80142ee:	0d1b      	lsrs	r3, r3, #20
 80142f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80142f4:	fa01 f303 	lsl.w	r3, r1, r3
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d118      	bne.n	801432e <_strtod_l+0x8d6>
 80142fc:	4ba0      	ldr	r3, [pc, #640]	@ (8014580 <_strtod_l+0xb28>)
 80142fe:	4599      	cmp	r9, r3
 8014300:	d102      	bne.n	8014308 <_strtod_l+0x8b0>
 8014302:	3201      	adds	r2, #1
 8014304:	f43f adc2 	beq.w	8013e8c <_strtod_l+0x434>
 8014308:	4b9c      	ldr	r3, [pc, #624]	@ (801457c <_strtod_l+0xb24>)
 801430a:	ea09 0303 	and.w	r3, r9, r3
 801430e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8014312:	f04f 0a00 	mov.w	sl, #0
 8014316:	9b06      	ldr	r3, [sp, #24]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1b2      	bne.n	8014282 <_strtod_l+0x82a>
 801431c:	e5c1      	b.n	8013ea2 <_strtod_l+0x44a>
 801431e:	f04f 33ff 	mov.w	r3, #4294967295
 8014322:	e7e9      	b.n	80142f8 <_strtod_l+0x8a0>
 8014324:	460b      	mov	r3, r1
 8014326:	e7e7      	b.n	80142f8 <_strtod_l+0x8a0>
 8014328:	ea53 030a 	orrs.w	r3, r3, sl
 801432c:	d09b      	beq.n	8014266 <_strtod_l+0x80e>
 801432e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014330:	b1c3      	cbz	r3, 8014364 <_strtod_l+0x90c>
 8014332:	ea13 0f09 	tst.w	r3, r9
 8014336:	d0ee      	beq.n	8014316 <_strtod_l+0x8be>
 8014338:	9a06      	ldr	r2, [sp, #24]
 801433a:	4650      	mov	r0, sl
 801433c:	4659      	mov	r1, fp
 801433e:	f1b8 0f00 	cmp.w	r8, #0
 8014342:	d013      	beq.n	801436c <_strtod_l+0x914>
 8014344:	f7ff fb6c 	bl	8013a20 <sulp>
 8014348:	ee39 7b00 	vadd.f64	d7, d9, d0
 801434c:	ec5b ab17 	vmov	sl, fp, d7
 8014350:	e7e1      	b.n	8014316 <_strtod_l+0x8be>
 8014352:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014356:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801435a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801435e:	f04f 3aff 	mov.w	sl, #4294967295
 8014362:	e7d8      	b.n	8014316 <_strtod_l+0x8be>
 8014364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014366:	ea13 0f0a 	tst.w	r3, sl
 801436a:	e7e4      	b.n	8014336 <_strtod_l+0x8de>
 801436c:	f7ff fb58 	bl	8013a20 <sulp>
 8014370:	ee39 0b40 	vsub.f64	d0, d9, d0
 8014374:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437c:	ec5b ab10 	vmov	sl, fp, d0
 8014380:	d1c9      	bne.n	8014316 <_strtod_l+0x8be>
 8014382:	e617      	b.n	8013fb4 <_strtod_l+0x55c>
 8014384:	4629      	mov	r1, r5
 8014386:	4620      	mov	r0, r4
 8014388:	f002 fe34 	bl	8016ff4 <__ratio>
 801438c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8014390:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014398:	d85d      	bhi.n	8014456 <_strtod_l+0x9fe>
 801439a:	f1b8 0f00 	cmp.w	r8, #0
 801439e:	d164      	bne.n	801446a <_strtod_l+0xa12>
 80143a0:	f1ba 0f00 	cmp.w	sl, #0
 80143a4:	d14b      	bne.n	801443e <_strtod_l+0x9e6>
 80143a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143aa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d160      	bne.n	8014474 <_strtod_l+0xa1c>
 80143b2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80143b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80143ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143be:	d401      	bmi.n	80143c4 <_strtod_l+0x96c>
 80143c0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80143c4:	eeb1 ab48 	vneg.f64	d10, d8
 80143c8:	486c      	ldr	r0, [pc, #432]	@ (801457c <_strtod_l+0xb24>)
 80143ca:	496e      	ldr	r1, [pc, #440]	@ (8014584 <_strtod_l+0xb2c>)
 80143cc:	ea09 0700 	and.w	r7, r9, r0
 80143d0:	428f      	cmp	r7, r1
 80143d2:	ec53 2b1a 	vmov	r2, r3, d10
 80143d6:	d17d      	bne.n	80144d4 <_strtod_l+0xa7c>
 80143d8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80143dc:	ec4b ab1c 	vmov	d12, sl, fp
 80143e0:	eeb0 0b4c 	vmov.f64	d0, d12
 80143e4:	f002 fd3e 	bl	8016e64 <__ulp>
 80143e8:	4864      	ldr	r0, [pc, #400]	@ (801457c <_strtod_l+0xb24>)
 80143ea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80143ee:	ee1c 3a90 	vmov	r3, s25
 80143f2:	4a65      	ldr	r2, [pc, #404]	@ (8014588 <_strtod_l+0xb30>)
 80143f4:	ea03 0100 	and.w	r1, r3, r0
 80143f8:	4291      	cmp	r1, r2
 80143fa:	ec5b ab1c 	vmov	sl, fp, d12
 80143fe:	d93c      	bls.n	801447a <_strtod_l+0xa22>
 8014400:	ee19 2a90 	vmov	r2, s19
 8014404:	4b5e      	ldr	r3, [pc, #376]	@ (8014580 <_strtod_l+0xb28>)
 8014406:	429a      	cmp	r2, r3
 8014408:	d104      	bne.n	8014414 <_strtod_l+0x9bc>
 801440a:	ee19 3a10 	vmov	r3, s18
 801440e:	3301      	adds	r3, #1
 8014410:	f43f ad3c 	beq.w	8013e8c <_strtod_l+0x434>
 8014414:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014580 <_strtod_l+0xb28>
 8014418:	f04f 3aff 	mov.w	sl, #4294967295
 801441c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801441e:	9805      	ldr	r0, [sp, #20]
 8014420:	f002 f9f4 	bl	801680c <_Bfree>
 8014424:	9805      	ldr	r0, [sp, #20]
 8014426:	4631      	mov	r1, r6
 8014428:	f002 f9f0 	bl	801680c <_Bfree>
 801442c:	9805      	ldr	r0, [sp, #20]
 801442e:	4629      	mov	r1, r5
 8014430:	f002 f9ec 	bl	801680c <_Bfree>
 8014434:	9805      	ldr	r0, [sp, #20]
 8014436:	4621      	mov	r1, r4
 8014438:	f002 f9e8 	bl	801680c <_Bfree>
 801443c:	e627      	b.n	801408e <_strtod_l+0x636>
 801443e:	f1ba 0f01 	cmp.w	sl, #1
 8014442:	d103      	bne.n	801444c <_strtod_l+0x9f4>
 8014444:	f1bb 0f00 	cmp.w	fp, #0
 8014448:	f43f adb4 	beq.w	8013fb4 <_strtod_l+0x55c>
 801444c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014450:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014454:	e7b8      	b.n	80143c8 <_strtod_l+0x970>
 8014456:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801445a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801445e:	f1b8 0f00 	cmp.w	r8, #0
 8014462:	d0af      	beq.n	80143c4 <_strtod_l+0x96c>
 8014464:	eeb0 ab48 	vmov.f64	d10, d8
 8014468:	e7ae      	b.n	80143c8 <_strtod_l+0x970>
 801446a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801446e:	eeb0 8b4a 	vmov.f64	d8, d10
 8014472:	e7a9      	b.n	80143c8 <_strtod_l+0x970>
 8014474:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014478:	e7a6      	b.n	80143c8 <_strtod_l+0x970>
 801447a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801447e:	9b06      	ldr	r3, [sp, #24]
 8014480:	46d9      	mov	r9, fp
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1ca      	bne.n	801441c <_strtod_l+0x9c4>
 8014486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801448a:	0d1b      	lsrs	r3, r3, #20
 801448c:	051b      	lsls	r3, r3, #20
 801448e:	429f      	cmp	r7, r3
 8014490:	d1c4      	bne.n	801441c <_strtod_l+0x9c4>
 8014492:	ec51 0b18 	vmov	r0, r1, d8
 8014496:	f7ec fa5d 	bl	8000954 <__aeabi_d2lz>
 801449a:	f7ec f907 	bl	80006ac <__aeabi_l2d>
 801449e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80144a2:	ec41 0b17 	vmov	d7, r0, r1
 80144a6:	ea49 090a 	orr.w	r9, r9, sl
 80144aa:	ea59 0908 	orrs.w	r9, r9, r8
 80144ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80144b2:	d03c      	beq.n	801452e <_strtod_l+0xad6>
 80144b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014560 <_strtod_l+0xb08>
 80144b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80144bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c0:	f53f acef 	bmi.w	8013ea2 <_strtod_l+0x44a>
 80144c4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8014568 <_strtod_l+0xb10>
 80144c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80144cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d0:	dda4      	ble.n	801441c <_strtod_l+0x9c4>
 80144d2:	e4e6      	b.n	8013ea2 <_strtod_l+0x44a>
 80144d4:	9906      	ldr	r1, [sp, #24]
 80144d6:	b1e1      	cbz	r1, 8014512 <_strtod_l+0xaba>
 80144d8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80144dc:	d819      	bhi.n	8014512 <_strtod_l+0xaba>
 80144de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80144e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e6:	d811      	bhi.n	801450c <_strtod_l+0xab4>
 80144e8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80144ec:	ee18 3a10 	vmov	r3, s16
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	bf38      	it	cc
 80144f4:	2301      	movcc	r3, #1
 80144f6:	ee08 3a10 	vmov	s16, r3
 80144fa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80144fe:	f1b8 0f00 	cmp.w	r8, #0
 8014502:	d111      	bne.n	8014528 <_strtod_l+0xad0>
 8014504:	eeb1 7b48 	vneg.f64	d7, d8
 8014508:	ec53 2b17 	vmov	r2, r3, d7
 801450c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8014510:	1bcb      	subs	r3, r1, r7
 8014512:	eeb0 0b49 	vmov.f64	d0, d9
 8014516:	ec43 2b1a 	vmov	d10, r2, r3
 801451a:	f002 fca3 	bl	8016e64 <__ulp>
 801451e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8014522:	ec5b ab19 	vmov	sl, fp, d9
 8014526:	e7aa      	b.n	801447e <_strtod_l+0xa26>
 8014528:	eeb0 7b48 	vmov.f64	d7, d8
 801452c:	e7ec      	b.n	8014508 <_strtod_l+0xab0>
 801452e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014570 <_strtod_l+0xb18>
 8014532:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453a:	f57f af6f 	bpl.w	801441c <_strtod_l+0x9c4>
 801453e:	e4b0      	b.n	8013ea2 <_strtod_l+0x44a>
 8014540:	2300      	movs	r3, #0
 8014542:	9308      	str	r3, [sp, #32]
 8014544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014546:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014548:	6013      	str	r3, [r2, #0]
 801454a:	f7ff bac4 	b.w	8013ad6 <_strtod_l+0x7e>
 801454e:	2a65      	cmp	r2, #101	@ 0x65
 8014550:	f43f abbf 	beq.w	8013cd2 <_strtod_l+0x27a>
 8014554:	2a45      	cmp	r2, #69	@ 0x45
 8014556:	f43f abbc 	beq.w	8013cd2 <_strtod_l+0x27a>
 801455a:	2101      	movs	r1, #1
 801455c:	f7ff bbf4 	b.w	8013d48 <_strtod_l+0x2f0>
 8014560:	94a03595 	.word	0x94a03595
 8014564:	3fdfffff 	.word	0x3fdfffff
 8014568:	35afe535 	.word	0x35afe535
 801456c:	3fe00000 	.word	0x3fe00000
 8014570:	94a03595 	.word	0x94a03595
 8014574:	3fcfffff 	.word	0x3fcfffff
 8014578:	000fffff 	.word	0x000fffff
 801457c:	7ff00000 	.word	0x7ff00000
 8014580:	7fefffff 	.word	0x7fefffff
 8014584:	7fe00000 	.word	0x7fe00000
 8014588:	7c9fffff 	.word	0x7c9fffff
 801458c:	00000000 	.word	0x00000000

08014590 <strtof>:
 8014590:	b510      	push	{r4, lr}
 8014592:	4c21      	ldr	r4, [pc, #132]	@ (8014618 <strtof+0x88>)
 8014594:	4b21      	ldr	r3, [pc, #132]	@ (801461c <strtof+0x8c>)
 8014596:	460a      	mov	r2, r1
 8014598:	4601      	mov	r1, r0
 801459a:	6820      	ldr	r0, [r4, #0]
 801459c:	f7ff fa5c 	bl	8013a58 <_strtod_l>
 80145a0:	eeb4 0b40 	vcmp.f64	d0, d0
 80145a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a8:	eeb0 7b40 	vmov.f64	d7, d0
 80145ac:	d70d      	bvc.n	80145ca <strtof+0x3a>
 80145ae:	ee17 3a90 	vmov	r3, s15
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	481a      	ldr	r0, [pc, #104]	@ (8014620 <strtof+0x90>)
 80145b6:	da04      	bge.n	80145c2 <strtof+0x32>
 80145b8:	f000 feae 	bl	8015318 <nanf>
 80145bc:	eeb1 0a40 	vneg.f32	s0, s0
 80145c0:	bd10      	pop	{r4, pc}
 80145c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145c6:	f000 bea7 	b.w	8015318 <nanf>
 80145ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80145ce:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8014624 <strtof+0x94>
 80145d2:	eeb0 6ac0 	vabs.f32	s12, s0
 80145d6:	eeb4 6a66 	vcmp.f32	s12, s13
 80145da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145de:	dd08      	ble.n	80145f2 <strtof+0x62>
 80145e0:	eeb0 6bc7 	vabs.f64	d6, d7
 80145e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8014610 <strtof+0x80>
 80145e8:	eeb4 6b45 	vcmp.f64	d6, d5
 80145ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f0:	dd0a      	ble.n	8014608 <strtof+0x78>
 80145f2:	ee10 3a10 	vmov	r3, s0
 80145f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80145fa:	d1e1      	bne.n	80145c0 <strtof+0x30>
 80145fc:	ee17 2a90 	vmov	r2, s15
 8014600:	4b09      	ldr	r3, [pc, #36]	@ (8014628 <strtof+0x98>)
 8014602:	4013      	ands	r3, r2
 8014604:	2b00      	cmp	r3, #0
 8014606:	d0db      	beq.n	80145c0 <strtof+0x30>
 8014608:	6823      	ldr	r3, [r4, #0]
 801460a:	2222      	movs	r2, #34	@ 0x22
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	e7d7      	b.n	80145c0 <strtof+0x30>
 8014610:	ffffffff 	.word	0xffffffff
 8014614:	7fefffff 	.word	0x7fefffff
 8014618:	240001e4 	.word	0x240001e4
 801461c:	24000078 	.word	0x24000078
 8014620:	08018148 	.word	0x08018148
 8014624:	7f7fffff 	.word	0x7f7fffff
 8014628:	7ff00000 	.word	0x7ff00000

0801462c <__cvt>:
 801462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801462e:	ed2d 8b02 	vpush	{d8}
 8014632:	eeb0 8b40 	vmov.f64	d8, d0
 8014636:	b085      	sub	sp, #20
 8014638:	4617      	mov	r7, r2
 801463a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801463c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801463e:	ee18 2a90 	vmov	r2, s17
 8014642:	f025 0520 	bic.w	r5, r5, #32
 8014646:	2a00      	cmp	r2, #0
 8014648:	bfb6      	itet	lt
 801464a:	222d      	movlt	r2, #45	@ 0x2d
 801464c:	2200      	movge	r2, #0
 801464e:	eeb1 8b40 	vneglt.f64	d8, d0
 8014652:	2d46      	cmp	r5, #70	@ 0x46
 8014654:	460c      	mov	r4, r1
 8014656:	701a      	strb	r2, [r3, #0]
 8014658:	d004      	beq.n	8014664 <__cvt+0x38>
 801465a:	2d45      	cmp	r5, #69	@ 0x45
 801465c:	d100      	bne.n	8014660 <__cvt+0x34>
 801465e:	3401      	adds	r4, #1
 8014660:	2102      	movs	r1, #2
 8014662:	e000      	b.n	8014666 <__cvt+0x3a>
 8014664:	2103      	movs	r1, #3
 8014666:	ab03      	add	r3, sp, #12
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	ab02      	add	r3, sp, #8
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	4622      	mov	r2, r4
 8014670:	4633      	mov	r3, r6
 8014672:	eeb0 0b48 	vmov.f64	d0, d8
 8014676:	f000 fedf 	bl	8015438 <_dtoa_r>
 801467a:	2d47      	cmp	r5, #71	@ 0x47
 801467c:	d114      	bne.n	80146a8 <__cvt+0x7c>
 801467e:	07fb      	lsls	r3, r7, #31
 8014680:	d50a      	bpl.n	8014698 <__cvt+0x6c>
 8014682:	1902      	adds	r2, r0, r4
 8014684:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468c:	bf08      	it	eq
 801468e:	9203      	streq	r2, [sp, #12]
 8014690:	2130      	movs	r1, #48	@ 0x30
 8014692:	9b03      	ldr	r3, [sp, #12]
 8014694:	4293      	cmp	r3, r2
 8014696:	d319      	bcc.n	80146cc <__cvt+0xa0>
 8014698:	9b03      	ldr	r3, [sp, #12]
 801469a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801469c:	1a1b      	subs	r3, r3, r0
 801469e:	6013      	str	r3, [r2, #0]
 80146a0:	b005      	add	sp, #20
 80146a2:	ecbd 8b02 	vpop	{d8}
 80146a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146a8:	2d46      	cmp	r5, #70	@ 0x46
 80146aa:	eb00 0204 	add.w	r2, r0, r4
 80146ae:	d1e9      	bne.n	8014684 <__cvt+0x58>
 80146b0:	7803      	ldrb	r3, [r0, #0]
 80146b2:	2b30      	cmp	r3, #48	@ 0x30
 80146b4:	d107      	bne.n	80146c6 <__cvt+0x9a>
 80146b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80146ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146be:	bf1c      	itt	ne
 80146c0:	f1c4 0401 	rsbne	r4, r4, #1
 80146c4:	6034      	strne	r4, [r6, #0]
 80146c6:	6833      	ldr	r3, [r6, #0]
 80146c8:	441a      	add	r2, r3
 80146ca:	e7db      	b.n	8014684 <__cvt+0x58>
 80146cc:	1c5c      	adds	r4, r3, #1
 80146ce:	9403      	str	r4, [sp, #12]
 80146d0:	7019      	strb	r1, [r3, #0]
 80146d2:	e7de      	b.n	8014692 <__cvt+0x66>

080146d4 <__exponent>:
 80146d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146d6:	2900      	cmp	r1, #0
 80146d8:	bfba      	itte	lt
 80146da:	4249      	neglt	r1, r1
 80146dc:	232d      	movlt	r3, #45	@ 0x2d
 80146de:	232b      	movge	r3, #43	@ 0x2b
 80146e0:	2909      	cmp	r1, #9
 80146e2:	7002      	strb	r2, [r0, #0]
 80146e4:	7043      	strb	r3, [r0, #1]
 80146e6:	dd29      	ble.n	801473c <__exponent+0x68>
 80146e8:	f10d 0307 	add.w	r3, sp, #7
 80146ec:	461d      	mov	r5, r3
 80146ee:	270a      	movs	r7, #10
 80146f0:	461a      	mov	r2, r3
 80146f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80146f6:	fb07 1416 	mls	r4, r7, r6, r1
 80146fa:	3430      	adds	r4, #48	@ 0x30
 80146fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014700:	460c      	mov	r4, r1
 8014702:	2c63      	cmp	r4, #99	@ 0x63
 8014704:	f103 33ff 	add.w	r3, r3, #4294967295
 8014708:	4631      	mov	r1, r6
 801470a:	dcf1      	bgt.n	80146f0 <__exponent+0x1c>
 801470c:	3130      	adds	r1, #48	@ 0x30
 801470e:	1e94      	subs	r4, r2, #2
 8014710:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014714:	1c41      	adds	r1, r0, #1
 8014716:	4623      	mov	r3, r4
 8014718:	42ab      	cmp	r3, r5
 801471a:	d30a      	bcc.n	8014732 <__exponent+0x5e>
 801471c:	f10d 0309 	add.w	r3, sp, #9
 8014720:	1a9b      	subs	r3, r3, r2
 8014722:	42ac      	cmp	r4, r5
 8014724:	bf88      	it	hi
 8014726:	2300      	movhi	r3, #0
 8014728:	3302      	adds	r3, #2
 801472a:	4403      	add	r3, r0
 801472c:	1a18      	subs	r0, r3, r0
 801472e:	b003      	add	sp, #12
 8014730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014732:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014736:	f801 6f01 	strb.w	r6, [r1, #1]!
 801473a:	e7ed      	b.n	8014718 <__exponent+0x44>
 801473c:	2330      	movs	r3, #48	@ 0x30
 801473e:	3130      	adds	r1, #48	@ 0x30
 8014740:	7083      	strb	r3, [r0, #2]
 8014742:	70c1      	strb	r1, [r0, #3]
 8014744:	1d03      	adds	r3, r0, #4
 8014746:	e7f1      	b.n	801472c <__exponent+0x58>

08014748 <_printf_float>:
 8014748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801474c:	b08d      	sub	sp, #52	@ 0x34
 801474e:	460c      	mov	r4, r1
 8014750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014754:	4616      	mov	r6, r2
 8014756:	461f      	mov	r7, r3
 8014758:	4605      	mov	r5, r0
 801475a:	f000 fcef 	bl	801513c <_localeconv_r>
 801475e:	f8d0 b000 	ldr.w	fp, [r0]
 8014762:	4658      	mov	r0, fp
 8014764:	f7eb fe0c 	bl	8000380 <strlen>
 8014768:	2300      	movs	r3, #0
 801476a:	930a      	str	r3, [sp, #40]	@ 0x28
 801476c:	f8d8 3000 	ldr.w	r3, [r8]
 8014770:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014774:	6822      	ldr	r2, [r4, #0]
 8014776:	9005      	str	r0, [sp, #20]
 8014778:	3307      	adds	r3, #7
 801477a:	f023 0307 	bic.w	r3, r3, #7
 801477e:	f103 0108 	add.w	r1, r3, #8
 8014782:	f8c8 1000 	str.w	r1, [r8]
 8014786:	ed93 0b00 	vldr	d0, [r3]
 801478a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80149e8 <_printf_float+0x2a0>
 801478e:	eeb0 7bc0 	vabs.f64	d7, d0
 8014792:	eeb4 7b46 	vcmp.f64	d7, d6
 8014796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801479e:	dd24      	ble.n	80147ea <_printf_float+0xa2>
 80147a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80147a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a8:	d502      	bpl.n	80147b0 <_printf_float+0x68>
 80147aa:	232d      	movs	r3, #45	@ 0x2d
 80147ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147b0:	498f      	ldr	r1, [pc, #572]	@ (80149f0 <_printf_float+0x2a8>)
 80147b2:	4b90      	ldr	r3, [pc, #576]	@ (80149f4 <_printf_float+0x2ac>)
 80147b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80147b8:	bf8c      	ite	hi
 80147ba:	4688      	movhi	r8, r1
 80147bc:	4698      	movls	r8, r3
 80147be:	f022 0204 	bic.w	r2, r2, #4
 80147c2:	2303      	movs	r3, #3
 80147c4:	6123      	str	r3, [r4, #16]
 80147c6:	6022      	str	r2, [r4, #0]
 80147c8:	f04f 0a00 	mov.w	sl, #0
 80147cc:	9700      	str	r7, [sp, #0]
 80147ce:	4633      	mov	r3, r6
 80147d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80147d2:	4621      	mov	r1, r4
 80147d4:	4628      	mov	r0, r5
 80147d6:	f000 f9d1 	bl	8014b7c <_printf_common>
 80147da:	3001      	adds	r0, #1
 80147dc:	f040 8089 	bne.w	80148f2 <_printf_float+0x1aa>
 80147e0:	f04f 30ff 	mov.w	r0, #4294967295
 80147e4:	b00d      	add	sp, #52	@ 0x34
 80147e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80147ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f2:	d709      	bvc.n	8014808 <_printf_float+0xc0>
 80147f4:	ee10 3a90 	vmov	r3, s1
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	bfbc      	itt	lt
 80147fc:	232d      	movlt	r3, #45	@ 0x2d
 80147fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014802:	497d      	ldr	r1, [pc, #500]	@ (80149f8 <_printf_float+0x2b0>)
 8014804:	4b7d      	ldr	r3, [pc, #500]	@ (80149fc <_printf_float+0x2b4>)
 8014806:	e7d5      	b.n	80147b4 <_printf_float+0x6c>
 8014808:	6863      	ldr	r3, [r4, #4]
 801480a:	1c59      	adds	r1, r3, #1
 801480c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8014810:	d139      	bne.n	8014886 <_printf_float+0x13e>
 8014812:	2306      	movs	r3, #6
 8014814:	6063      	str	r3, [r4, #4]
 8014816:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801481a:	2300      	movs	r3, #0
 801481c:	6022      	str	r2, [r4, #0]
 801481e:	9303      	str	r3, [sp, #12]
 8014820:	ab0a      	add	r3, sp, #40	@ 0x28
 8014822:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014826:	ab09      	add	r3, sp, #36	@ 0x24
 8014828:	9300      	str	r3, [sp, #0]
 801482a:	6861      	ldr	r1, [r4, #4]
 801482c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014830:	4628      	mov	r0, r5
 8014832:	f7ff fefb 	bl	801462c <__cvt>
 8014836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801483a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801483c:	4680      	mov	r8, r0
 801483e:	d129      	bne.n	8014894 <_printf_float+0x14c>
 8014840:	1cc8      	adds	r0, r1, #3
 8014842:	db02      	blt.n	801484a <_printf_float+0x102>
 8014844:	6863      	ldr	r3, [r4, #4]
 8014846:	4299      	cmp	r1, r3
 8014848:	dd41      	ble.n	80148ce <_printf_float+0x186>
 801484a:	f1a9 0902 	sub.w	r9, r9, #2
 801484e:	fa5f f989 	uxtb.w	r9, r9
 8014852:	3901      	subs	r1, #1
 8014854:	464a      	mov	r2, r9
 8014856:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801485a:	9109      	str	r1, [sp, #36]	@ 0x24
 801485c:	f7ff ff3a 	bl	80146d4 <__exponent>
 8014860:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014862:	1813      	adds	r3, r2, r0
 8014864:	2a01      	cmp	r2, #1
 8014866:	4682      	mov	sl, r0
 8014868:	6123      	str	r3, [r4, #16]
 801486a:	dc02      	bgt.n	8014872 <_printf_float+0x12a>
 801486c:	6822      	ldr	r2, [r4, #0]
 801486e:	07d2      	lsls	r2, r2, #31
 8014870:	d501      	bpl.n	8014876 <_printf_float+0x12e>
 8014872:	3301      	adds	r3, #1
 8014874:	6123      	str	r3, [r4, #16]
 8014876:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801487a:	2b00      	cmp	r3, #0
 801487c:	d0a6      	beq.n	80147cc <_printf_float+0x84>
 801487e:	232d      	movs	r3, #45	@ 0x2d
 8014880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014884:	e7a2      	b.n	80147cc <_printf_float+0x84>
 8014886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801488a:	d1c4      	bne.n	8014816 <_printf_float+0xce>
 801488c:	2b00      	cmp	r3, #0
 801488e:	d1c2      	bne.n	8014816 <_printf_float+0xce>
 8014890:	2301      	movs	r3, #1
 8014892:	e7bf      	b.n	8014814 <_printf_float+0xcc>
 8014894:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014898:	d9db      	bls.n	8014852 <_printf_float+0x10a>
 801489a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801489e:	d118      	bne.n	80148d2 <_printf_float+0x18a>
 80148a0:	2900      	cmp	r1, #0
 80148a2:	6863      	ldr	r3, [r4, #4]
 80148a4:	dd0b      	ble.n	80148be <_printf_float+0x176>
 80148a6:	6121      	str	r1, [r4, #16]
 80148a8:	b913      	cbnz	r3, 80148b0 <_printf_float+0x168>
 80148aa:	6822      	ldr	r2, [r4, #0]
 80148ac:	07d0      	lsls	r0, r2, #31
 80148ae:	d502      	bpl.n	80148b6 <_printf_float+0x16e>
 80148b0:	3301      	adds	r3, #1
 80148b2:	440b      	add	r3, r1
 80148b4:	6123      	str	r3, [r4, #16]
 80148b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80148b8:	f04f 0a00 	mov.w	sl, #0
 80148bc:	e7db      	b.n	8014876 <_printf_float+0x12e>
 80148be:	b913      	cbnz	r3, 80148c6 <_printf_float+0x17e>
 80148c0:	6822      	ldr	r2, [r4, #0]
 80148c2:	07d2      	lsls	r2, r2, #31
 80148c4:	d501      	bpl.n	80148ca <_printf_float+0x182>
 80148c6:	3302      	adds	r3, #2
 80148c8:	e7f4      	b.n	80148b4 <_printf_float+0x16c>
 80148ca:	2301      	movs	r3, #1
 80148cc:	e7f2      	b.n	80148b4 <_printf_float+0x16c>
 80148ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80148d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148d4:	4299      	cmp	r1, r3
 80148d6:	db05      	blt.n	80148e4 <_printf_float+0x19c>
 80148d8:	6823      	ldr	r3, [r4, #0]
 80148da:	6121      	str	r1, [r4, #16]
 80148dc:	07d8      	lsls	r0, r3, #31
 80148de:	d5ea      	bpl.n	80148b6 <_printf_float+0x16e>
 80148e0:	1c4b      	adds	r3, r1, #1
 80148e2:	e7e7      	b.n	80148b4 <_printf_float+0x16c>
 80148e4:	2900      	cmp	r1, #0
 80148e6:	bfd4      	ite	le
 80148e8:	f1c1 0202 	rsble	r2, r1, #2
 80148ec:	2201      	movgt	r2, #1
 80148ee:	4413      	add	r3, r2
 80148f0:	e7e0      	b.n	80148b4 <_printf_float+0x16c>
 80148f2:	6823      	ldr	r3, [r4, #0]
 80148f4:	055a      	lsls	r2, r3, #21
 80148f6:	d407      	bmi.n	8014908 <_printf_float+0x1c0>
 80148f8:	6923      	ldr	r3, [r4, #16]
 80148fa:	4642      	mov	r2, r8
 80148fc:	4631      	mov	r1, r6
 80148fe:	4628      	mov	r0, r5
 8014900:	47b8      	blx	r7
 8014902:	3001      	adds	r0, #1
 8014904:	d12a      	bne.n	801495c <_printf_float+0x214>
 8014906:	e76b      	b.n	80147e0 <_printf_float+0x98>
 8014908:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801490c:	f240 80e0 	bls.w	8014ad0 <_printf_float+0x388>
 8014910:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014914:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491c:	d133      	bne.n	8014986 <_printf_float+0x23e>
 801491e:	4a38      	ldr	r2, [pc, #224]	@ (8014a00 <_printf_float+0x2b8>)
 8014920:	2301      	movs	r3, #1
 8014922:	4631      	mov	r1, r6
 8014924:	4628      	mov	r0, r5
 8014926:	47b8      	blx	r7
 8014928:	3001      	adds	r0, #1
 801492a:	f43f af59 	beq.w	80147e0 <_printf_float+0x98>
 801492e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014932:	4543      	cmp	r3, r8
 8014934:	db02      	blt.n	801493c <_printf_float+0x1f4>
 8014936:	6823      	ldr	r3, [r4, #0]
 8014938:	07d8      	lsls	r0, r3, #31
 801493a:	d50f      	bpl.n	801495c <_printf_float+0x214>
 801493c:	9b05      	ldr	r3, [sp, #20]
 801493e:	465a      	mov	r2, fp
 8014940:	4631      	mov	r1, r6
 8014942:	4628      	mov	r0, r5
 8014944:	47b8      	blx	r7
 8014946:	3001      	adds	r0, #1
 8014948:	f43f af4a 	beq.w	80147e0 <_printf_float+0x98>
 801494c:	f04f 0900 	mov.w	r9, #0
 8014950:	f108 38ff 	add.w	r8, r8, #4294967295
 8014954:	f104 0a1a 	add.w	sl, r4, #26
 8014958:	45c8      	cmp	r8, r9
 801495a:	dc09      	bgt.n	8014970 <_printf_float+0x228>
 801495c:	6823      	ldr	r3, [r4, #0]
 801495e:	079b      	lsls	r3, r3, #30
 8014960:	f100 8107 	bmi.w	8014b72 <_printf_float+0x42a>
 8014964:	68e0      	ldr	r0, [r4, #12]
 8014966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014968:	4298      	cmp	r0, r3
 801496a:	bfb8      	it	lt
 801496c:	4618      	movlt	r0, r3
 801496e:	e739      	b.n	80147e4 <_printf_float+0x9c>
 8014970:	2301      	movs	r3, #1
 8014972:	4652      	mov	r2, sl
 8014974:	4631      	mov	r1, r6
 8014976:	4628      	mov	r0, r5
 8014978:	47b8      	blx	r7
 801497a:	3001      	adds	r0, #1
 801497c:	f43f af30 	beq.w	80147e0 <_printf_float+0x98>
 8014980:	f109 0901 	add.w	r9, r9, #1
 8014984:	e7e8      	b.n	8014958 <_printf_float+0x210>
 8014986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014988:	2b00      	cmp	r3, #0
 801498a:	dc3b      	bgt.n	8014a04 <_printf_float+0x2bc>
 801498c:	4a1c      	ldr	r2, [pc, #112]	@ (8014a00 <_printf_float+0x2b8>)
 801498e:	2301      	movs	r3, #1
 8014990:	4631      	mov	r1, r6
 8014992:	4628      	mov	r0, r5
 8014994:	47b8      	blx	r7
 8014996:	3001      	adds	r0, #1
 8014998:	f43f af22 	beq.w	80147e0 <_printf_float+0x98>
 801499c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80149a0:	ea59 0303 	orrs.w	r3, r9, r3
 80149a4:	d102      	bne.n	80149ac <_printf_float+0x264>
 80149a6:	6823      	ldr	r3, [r4, #0]
 80149a8:	07d9      	lsls	r1, r3, #31
 80149aa:	d5d7      	bpl.n	801495c <_printf_float+0x214>
 80149ac:	9b05      	ldr	r3, [sp, #20]
 80149ae:	465a      	mov	r2, fp
 80149b0:	4631      	mov	r1, r6
 80149b2:	4628      	mov	r0, r5
 80149b4:	47b8      	blx	r7
 80149b6:	3001      	adds	r0, #1
 80149b8:	f43f af12 	beq.w	80147e0 <_printf_float+0x98>
 80149bc:	f04f 0a00 	mov.w	sl, #0
 80149c0:	f104 0b1a 	add.w	fp, r4, #26
 80149c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149c6:	425b      	negs	r3, r3
 80149c8:	4553      	cmp	r3, sl
 80149ca:	dc01      	bgt.n	80149d0 <_printf_float+0x288>
 80149cc:	464b      	mov	r3, r9
 80149ce:	e794      	b.n	80148fa <_printf_float+0x1b2>
 80149d0:	2301      	movs	r3, #1
 80149d2:	465a      	mov	r2, fp
 80149d4:	4631      	mov	r1, r6
 80149d6:	4628      	mov	r0, r5
 80149d8:	47b8      	blx	r7
 80149da:	3001      	adds	r0, #1
 80149dc:	f43f af00 	beq.w	80147e0 <_printf_float+0x98>
 80149e0:	f10a 0a01 	add.w	sl, sl, #1
 80149e4:	e7ee      	b.n	80149c4 <_printf_float+0x27c>
 80149e6:	bf00      	nop
 80149e8:	ffffffff 	.word	0xffffffff
 80149ec:	7fefffff 	.word	0x7fefffff
 80149f0:	08017f7e 	.word	0x08017f7e
 80149f4:	08017f7a 	.word	0x08017f7a
 80149f8:	08017f86 	.word	0x08017f86
 80149fc:	08017f82 	.word	0x08017f82
 8014a00:	08017f8a 	.word	0x08017f8a
 8014a04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014a06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014a0a:	4553      	cmp	r3, sl
 8014a0c:	bfa8      	it	ge
 8014a0e:	4653      	movge	r3, sl
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	4699      	mov	r9, r3
 8014a14:	dc37      	bgt.n	8014a86 <_printf_float+0x33e>
 8014a16:	2300      	movs	r3, #0
 8014a18:	9307      	str	r3, [sp, #28]
 8014a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a1e:	f104 021a 	add.w	r2, r4, #26
 8014a22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014a24:	9907      	ldr	r1, [sp, #28]
 8014a26:	9306      	str	r3, [sp, #24]
 8014a28:	eba3 0309 	sub.w	r3, r3, r9
 8014a2c:	428b      	cmp	r3, r1
 8014a2e:	dc31      	bgt.n	8014a94 <_printf_float+0x34c>
 8014a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a32:	459a      	cmp	sl, r3
 8014a34:	dc3b      	bgt.n	8014aae <_printf_float+0x366>
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	07da      	lsls	r2, r3, #31
 8014a3a:	d438      	bmi.n	8014aae <_printf_float+0x366>
 8014a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a3e:	ebaa 0903 	sub.w	r9, sl, r3
 8014a42:	9b06      	ldr	r3, [sp, #24]
 8014a44:	ebaa 0303 	sub.w	r3, sl, r3
 8014a48:	4599      	cmp	r9, r3
 8014a4a:	bfa8      	it	ge
 8014a4c:	4699      	movge	r9, r3
 8014a4e:	f1b9 0f00 	cmp.w	r9, #0
 8014a52:	dc34      	bgt.n	8014abe <_printf_float+0x376>
 8014a54:	f04f 0800 	mov.w	r8, #0
 8014a58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a5c:	f104 0b1a 	add.w	fp, r4, #26
 8014a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a62:	ebaa 0303 	sub.w	r3, sl, r3
 8014a66:	eba3 0309 	sub.w	r3, r3, r9
 8014a6a:	4543      	cmp	r3, r8
 8014a6c:	f77f af76 	ble.w	801495c <_printf_float+0x214>
 8014a70:	2301      	movs	r3, #1
 8014a72:	465a      	mov	r2, fp
 8014a74:	4631      	mov	r1, r6
 8014a76:	4628      	mov	r0, r5
 8014a78:	47b8      	blx	r7
 8014a7a:	3001      	adds	r0, #1
 8014a7c:	f43f aeb0 	beq.w	80147e0 <_printf_float+0x98>
 8014a80:	f108 0801 	add.w	r8, r8, #1
 8014a84:	e7ec      	b.n	8014a60 <_printf_float+0x318>
 8014a86:	4642      	mov	r2, r8
 8014a88:	4631      	mov	r1, r6
 8014a8a:	4628      	mov	r0, r5
 8014a8c:	47b8      	blx	r7
 8014a8e:	3001      	adds	r0, #1
 8014a90:	d1c1      	bne.n	8014a16 <_printf_float+0x2ce>
 8014a92:	e6a5      	b.n	80147e0 <_printf_float+0x98>
 8014a94:	2301      	movs	r3, #1
 8014a96:	4631      	mov	r1, r6
 8014a98:	4628      	mov	r0, r5
 8014a9a:	9206      	str	r2, [sp, #24]
 8014a9c:	47b8      	blx	r7
 8014a9e:	3001      	adds	r0, #1
 8014aa0:	f43f ae9e 	beq.w	80147e0 <_printf_float+0x98>
 8014aa4:	9b07      	ldr	r3, [sp, #28]
 8014aa6:	9a06      	ldr	r2, [sp, #24]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	9307      	str	r3, [sp, #28]
 8014aac:	e7b9      	b.n	8014a22 <_printf_float+0x2da>
 8014aae:	9b05      	ldr	r3, [sp, #20]
 8014ab0:	465a      	mov	r2, fp
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	47b8      	blx	r7
 8014ab8:	3001      	adds	r0, #1
 8014aba:	d1bf      	bne.n	8014a3c <_printf_float+0x2f4>
 8014abc:	e690      	b.n	80147e0 <_printf_float+0x98>
 8014abe:	9a06      	ldr	r2, [sp, #24]
 8014ac0:	464b      	mov	r3, r9
 8014ac2:	4442      	add	r2, r8
 8014ac4:	4631      	mov	r1, r6
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	47b8      	blx	r7
 8014aca:	3001      	adds	r0, #1
 8014acc:	d1c2      	bne.n	8014a54 <_printf_float+0x30c>
 8014ace:	e687      	b.n	80147e0 <_printf_float+0x98>
 8014ad0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014ad4:	f1b9 0f01 	cmp.w	r9, #1
 8014ad8:	dc01      	bgt.n	8014ade <_printf_float+0x396>
 8014ada:	07db      	lsls	r3, r3, #31
 8014adc:	d536      	bpl.n	8014b4c <_printf_float+0x404>
 8014ade:	2301      	movs	r3, #1
 8014ae0:	4642      	mov	r2, r8
 8014ae2:	4631      	mov	r1, r6
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	47b8      	blx	r7
 8014ae8:	3001      	adds	r0, #1
 8014aea:	f43f ae79 	beq.w	80147e0 <_printf_float+0x98>
 8014aee:	9b05      	ldr	r3, [sp, #20]
 8014af0:	465a      	mov	r2, fp
 8014af2:	4631      	mov	r1, r6
 8014af4:	4628      	mov	r0, r5
 8014af6:	47b8      	blx	r7
 8014af8:	3001      	adds	r0, #1
 8014afa:	f43f ae71 	beq.w	80147e0 <_printf_float+0x98>
 8014afe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014b02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8014b0e:	d018      	beq.n	8014b42 <_printf_float+0x3fa>
 8014b10:	464b      	mov	r3, r9
 8014b12:	f108 0201 	add.w	r2, r8, #1
 8014b16:	4631      	mov	r1, r6
 8014b18:	4628      	mov	r0, r5
 8014b1a:	47b8      	blx	r7
 8014b1c:	3001      	adds	r0, #1
 8014b1e:	d10c      	bne.n	8014b3a <_printf_float+0x3f2>
 8014b20:	e65e      	b.n	80147e0 <_printf_float+0x98>
 8014b22:	2301      	movs	r3, #1
 8014b24:	465a      	mov	r2, fp
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f43f ae57 	beq.w	80147e0 <_printf_float+0x98>
 8014b32:	f108 0801 	add.w	r8, r8, #1
 8014b36:	45c8      	cmp	r8, r9
 8014b38:	dbf3      	blt.n	8014b22 <_printf_float+0x3da>
 8014b3a:	4653      	mov	r3, sl
 8014b3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014b40:	e6dc      	b.n	80148fc <_printf_float+0x1b4>
 8014b42:	f04f 0800 	mov.w	r8, #0
 8014b46:	f104 0b1a 	add.w	fp, r4, #26
 8014b4a:	e7f4      	b.n	8014b36 <_printf_float+0x3ee>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	4642      	mov	r2, r8
 8014b50:	e7e1      	b.n	8014b16 <_printf_float+0x3ce>
 8014b52:	2301      	movs	r3, #1
 8014b54:	464a      	mov	r2, r9
 8014b56:	4631      	mov	r1, r6
 8014b58:	4628      	mov	r0, r5
 8014b5a:	47b8      	blx	r7
 8014b5c:	3001      	adds	r0, #1
 8014b5e:	f43f ae3f 	beq.w	80147e0 <_printf_float+0x98>
 8014b62:	f108 0801 	add.w	r8, r8, #1
 8014b66:	68e3      	ldr	r3, [r4, #12]
 8014b68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014b6a:	1a5b      	subs	r3, r3, r1
 8014b6c:	4543      	cmp	r3, r8
 8014b6e:	dcf0      	bgt.n	8014b52 <_printf_float+0x40a>
 8014b70:	e6f8      	b.n	8014964 <_printf_float+0x21c>
 8014b72:	f04f 0800 	mov.w	r8, #0
 8014b76:	f104 0919 	add.w	r9, r4, #25
 8014b7a:	e7f4      	b.n	8014b66 <_printf_float+0x41e>

08014b7c <_printf_common>:
 8014b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b80:	4616      	mov	r6, r2
 8014b82:	4698      	mov	r8, r3
 8014b84:	688a      	ldr	r2, [r1, #8]
 8014b86:	690b      	ldr	r3, [r1, #16]
 8014b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b8c:	4293      	cmp	r3, r2
 8014b8e:	bfb8      	it	lt
 8014b90:	4613      	movlt	r3, r2
 8014b92:	6033      	str	r3, [r6, #0]
 8014b94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b98:	4607      	mov	r7, r0
 8014b9a:	460c      	mov	r4, r1
 8014b9c:	b10a      	cbz	r2, 8014ba2 <_printf_common+0x26>
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	6033      	str	r3, [r6, #0]
 8014ba2:	6823      	ldr	r3, [r4, #0]
 8014ba4:	0699      	lsls	r1, r3, #26
 8014ba6:	bf42      	ittt	mi
 8014ba8:	6833      	ldrmi	r3, [r6, #0]
 8014baa:	3302      	addmi	r3, #2
 8014bac:	6033      	strmi	r3, [r6, #0]
 8014bae:	6825      	ldr	r5, [r4, #0]
 8014bb0:	f015 0506 	ands.w	r5, r5, #6
 8014bb4:	d106      	bne.n	8014bc4 <_printf_common+0x48>
 8014bb6:	f104 0a19 	add.w	sl, r4, #25
 8014bba:	68e3      	ldr	r3, [r4, #12]
 8014bbc:	6832      	ldr	r2, [r6, #0]
 8014bbe:	1a9b      	subs	r3, r3, r2
 8014bc0:	42ab      	cmp	r3, r5
 8014bc2:	dc26      	bgt.n	8014c12 <_printf_common+0x96>
 8014bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014bc8:	6822      	ldr	r2, [r4, #0]
 8014bca:	3b00      	subs	r3, #0
 8014bcc:	bf18      	it	ne
 8014bce:	2301      	movne	r3, #1
 8014bd0:	0692      	lsls	r2, r2, #26
 8014bd2:	d42b      	bmi.n	8014c2c <_printf_common+0xb0>
 8014bd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014bd8:	4641      	mov	r1, r8
 8014bda:	4638      	mov	r0, r7
 8014bdc:	47c8      	blx	r9
 8014bde:	3001      	adds	r0, #1
 8014be0:	d01e      	beq.n	8014c20 <_printf_common+0xa4>
 8014be2:	6823      	ldr	r3, [r4, #0]
 8014be4:	6922      	ldr	r2, [r4, #16]
 8014be6:	f003 0306 	and.w	r3, r3, #6
 8014bea:	2b04      	cmp	r3, #4
 8014bec:	bf02      	ittt	eq
 8014bee:	68e5      	ldreq	r5, [r4, #12]
 8014bf0:	6833      	ldreq	r3, [r6, #0]
 8014bf2:	1aed      	subeq	r5, r5, r3
 8014bf4:	68a3      	ldr	r3, [r4, #8]
 8014bf6:	bf0c      	ite	eq
 8014bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bfc:	2500      	movne	r5, #0
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	bfc4      	itt	gt
 8014c02:	1a9b      	subgt	r3, r3, r2
 8014c04:	18ed      	addgt	r5, r5, r3
 8014c06:	2600      	movs	r6, #0
 8014c08:	341a      	adds	r4, #26
 8014c0a:	42b5      	cmp	r5, r6
 8014c0c:	d11a      	bne.n	8014c44 <_printf_common+0xc8>
 8014c0e:	2000      	movs	r0, #0
 8014c10:	e008      	b.n	8014c24 <_printf_common+0xa8>
 8014c12:	2301      	movs	r3, #1
 8014c14:	4652      	mov	r2, sl
 8014c16:	4641      	mov	r1, r8
 8014c18:	4638      	mov	r0, r7
 8014c1a:	47c8      	blx	r9
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	d103      	bne.n	8014c28 <_printf_common+0xac>
 8014c20:	f04f 30ff 	mov.w	r0, #4294967295
 8014c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c28:	3501      	adds	r5, #1
 8014c2a:	e7c6      	b.n	8014bba <_printf_common+0x3e>
 8014c2c:	18e1      	adds	r1, r4, r3
 8014c2e:	1c5a      	adds	r2, r3, #1
 8014c30:	2030      	movs	r0, #48	@ 0x30
 8014c32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014c36:	4422      	add	r2, r4
 8014c38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014c40:	3302      	adds	r3, #2
 8014c42:	e7c7      	b.n	8014bd4 <_printf_common+0x58>
 8014c44:	2301      	movs	r3, #1
 8014c46:	4622      	mov	r2, r4
 8014c48:	4641      	mov	r1, r8
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	47c8      	blx	r9
 8014c4e:	3001      	adds	r0, #1
 8014c50:	d0e6      	beq.n	8014c20 <_printf_common+0xa4>
 8014c52:	3601      	adds	r6, #1
 8014c54:	e7d9      	b.n	8014c0a <_printf_common+0x8e>
	...

08014c58 <_printf_i>:
 8014c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c5c:	7e0f      	ldrb	r7, [r1, #24]
 8014c5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014c60:	2f78      	cmp	r7, #120	@ 0x78
 8014c62:	4691      	mov	r9, r2
 8014c64:	4680      	mov	r8, r0
 8014c66:	460c      	mov	r4, r1
 8014c68:	469a      	mov	sl, r3
 8014c6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014c6e:	d807      	bhi.n	8014c80 <_printf_i+0x28>
 8014c70:	2f62      	cmp	r7, #98	@ 0x62
 8014c72:	d80a      	bhi.n	8014c8a <_printf_i+0x32>
 8014c74:	2f00      	cmp	r7, #0
 8014c76:	f000 80d1 	beq.w	8014e1c <_printf_i+0x1c4>
 8014c7a:	2f58      	cmp	r7, #88	@ 0x58
 8014c7c:	f000 80b8 	beq.w	8014df0 <_printf_i+0x198>
 8014c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014c88:	e03a      	b.n	8014d00 <_printf_i+0xa8>
 8014c8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014c8e:	2b15      	cmp	r3, #21
 8014c90:	d8f6      	bhi.n	8014c80 <_printf_i+0x28>
 8014c92:	a101      	add	r1, pc, #4	@ (adr r1, 8014c98 <_printf_i+0x40>)
 8014c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c98:	08014cf1 	.word	0x08014cf1
 8014c9c:	08014d05 	.word	0x08014d05
 8014ca0:	08014c81 	.word	0x08014c81
 8014ca4:	08014c81 	.word	0x08014c81
 8014ca8:	08014c81 	.word	0x08014c81
 8014cac:	08014c81 	.word	0x08014c81
 8014cb0:	08014d05 	.word	0x08014d05
 8014cb4:	08014c81 	.word	0x08014c81
 8014cb8:	08014c81 	.word	0x08014c81
 8014cbc:	08014c81 	.word	0x08014c81
 8014cc0:	08014c81 	.word	0x08014c81
 8014cc4:	08014e03 	.word	0x08014e03
 8014cc8:	08014d2f 	.word	0x08014d2f
 8014ccc:	08014dbd 	.word	0x08014dbd
 8014cd0:	08014c81 	.word	0x08014c81
 8014cd4:	08014c81 	.word	0x08014c81
 8014cd8:	08014e25 	.word	0x08014e25
 8014cdc:	08014c81 	.word	0x08014c81
 8014ce0:	08014d2f 	.word	0x08014d2f
 8014ce4:	08014c81 	.word	0x08014c81
 8014ce8:	08014c81 	.word	0x08014c81
 8014cec:	08014dc5 	.word	0x08014dc5
 8014cf0:	6833      	ldr	r3, [r6, #0]
 8014cf2:	1d1a      	adds	r2, r3, #4
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	6032      	str	r2, [r6, #0]
 8014cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014cfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014d00:	2301      	movs	r3, #1
 8014d02:	e09c      	b.n	8014e3e <_printf_i+0x1e6>
 8014d04:	6833      	ldr	r3, [r6, #0]
 8014d06:	6820      	ldr	r0, [r4, #0]
 8014d08:	1d19      	adds	r1, r3, #4
 8014d0a:	6031      	str	r1, [r6, #0]
 8014d0c:	0606      	lsls	r6, r0, #24
 8014d0e:	d501      	bpl.n	8014d14 <_printf_i+0xbc>
 8014d10:	681d      	ldr	r5, [r3, #0]
 8014d12:	e003      	b.n	8014d1c <_printf_i+0xc4>
 8014d14:	0645      	lsls	r5, r0, #25
 8014d16:	d5fb      	bpl.n	8014d10 <_printf_i+0xb8>
 8014d18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014d1c:	2d00      	cmp	r5, #0
 8014d1e:	da03      	bge.n	8014d28 <_printf_i+0xd0>
 8014d20:	232d      	movs	r3, #45	@ 0x2d
 8014d22:	426d      	negs	r5, r5
 8014d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d28:	4858      	ldr	r0, [pc, #352]	@ (8014e8c <_printf_i+0x234>)
 8014d2a:	230a      	movs	r3, #10
 8014d2c:	e011      	b.n	8014d52 <_printf_i+0xfa>
 8014d2e:	6821      	ldr	r1, [r4, #0]
 8014d30:	6833      	ldr	r3, [r6, #0]
 8014d32:	0608      	lsls	r0, r1, #24
 8014d34:	f853 5b04 	ldr.w	r5, [r3], #4
 8014d38:	d402      	bmi.n	8014d40 <_printf_i+0xe8>
 8014d3a:	0649      	lsls	r1, r1, #25
 8014d3c:	bf48      	it	mi
 8014d3e:	b2ad      	uxthmi	r5, r5
 8014d40:	2f6f      	cmp	r7, #111	@ 0x6f
 8014d42:	4852      	ldr	r0, [pc, #328]	@ (8014e8c <_printf_i+0x234>)
 8014d44:	6033      	str	r3, [r6, #0]
 8014d46:	bf14      	ite	ne
 8014d48:	230a      	movne	r3, #10
 8014d4a:	2308      	moveq	r3, #8
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014d52:	6866      	ldr	r6, [r4, #4]
 8014d54:	60a6      	str	r6, [r4, #8]
 8014d56:	2e00      	cmp	r6, #0
 8014d58:	db05      	blt.n	8014d66 <_printf_i+0x10e>
 8014d5a:	6821      	ldr	r1, [r4, #0]
 8014d5c:	432e      	orrs	r6, r5
 8014d5e:	f021 0104 	bic.w	r1, r1, #4
 8014d62:	6021      	str	r1, [r4, #0]
 8014d64:	d04b      	beq.n	8014dfe <_printf_i+0x1a6>
 8014d66:	4616      	mov	r6, r2
 8014d68:	fbb5 f1f3 	udiv	r1, r5, r3
 8014d6c:	fb03 5711 	mls	r7, r3, r1, r5
 8014d70:	5dc7      	ldrb	r7, [r0, r7]
 8014d72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d76:	462f      	mov	r7, r5
 8014d78:	42bb      	cmp	r3, r7
 8014d7a:	460d      	mov	r5, r1
 8014d7c:	d9f4      	bls.n	8014d68 <_printf_i+0x110>
 8014d7e:	2b08      	cmp	r3, #8
 8014d80:	d10b      	bne.n	8014d9a <_printf_i+0x142>
 8014d82:	6823      	ldr	r3, [r4, #0]
 8014d84:	07df      	lsls	r7, r3, #31
 8014d86:	d508      	bpl.n	8014d9a <_printf_i+0x142>
 8014d88:	6923      	ldr	r3, [r4, #16]
 8014d8a:	6861      	ldr	r1, [r4, #4]
 8014d8c:	4299      	cmp	r1, r3
 8014d8e:	bfde      	ittt	le
 8014d90:	2330      	movle	r3, #48	@ 0x30
 8014d92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014d9a:	1b92      	subs	r2, r2, r6
 8014d9c:	6122      	str	r2, [r4, #16]
 8014d9e:	f8cd a000 	str.w	sl, [sp]
 8014da2:	464b      	mov	r3, r9
 8014da4:	aa03      	add	r2, sp, #12
 8014da6:	4621      	mov	r1, r4
 8014da8:	4640      	mov	r0, r8
 8014daa:	f7ff fee7 	bl	8014b7c <_printf_common>
 8014dae:	3001      	adds	r0, #1
 8014db0:	d14a      	bne.n	8014e48 <_printf_i+0x1f0>
 8014db2:	f04f 30ff 	mov.w	r0, #4294967295
 8014db6:	b004      	add	sp, #16
 8014db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	f043 0320 	orr.w	r3, r3, #32
 8014dc2:	6023      	str	r3, [r4, #0]
 8014dc4:	4832      	ldr	r0, [pc, #200]	@ (8014e90 <_printf_i+0x238>)
 8014dc6:	2778      	movs	r7, #120	@ 0x78
 8014dc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014dcc:	6823      	ldr	r3, [r4, #0]
 8014dce:	6831      	ldr	r1, [r6, #0]
 8014dd0:	061f      	lsls	r7, r3, #24
 8014dd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8014dd6:	d402      	bmi.n	8014dde <_printf_i+0x186>
 8014dd8:	065f      	lsls	r7, r3, #25
 8014dda:	bf48      	it	mi
 8014ddc:	b2ad      	uxthmi	r5, r5
 8014dde:	6031      	str	r1, [r6, #0]
 8014de0:	07d9      	lsls	r1, r3, #31
 8014de2:	bf44      	itt	mi
 8014de4:	f043 0320 	orrmi.w	r3, r3, #32
 8014de8:	6023      	strmi	r3, [r4, #0]
 8014dea:	b11d      	cbz	r5, 8014df4 <_printf_i+0x19c>
 8014dec:	2310      	movs	r3, #16
 8014dee:	e7ad      	b.n	8014d4c <_printf_i+0xf4>
 8014df0:	4826      	ldr	r0, [pc, #152]	@ (8014e8c <_printf_i+0x234>)
 8014df2:	e7e9      	b.n	8014dc8 <_printf_i+0x170>
 8014df4:	6823      	ldr	r3, [r4, #0]
 8014df6:	f023 0320 	bic.w	r3, r3, #32
 8014dfa:	6023      	str	r3, [r4, #0]
 8014dfc:	e7f6      	b.n	8014dec <_printf_i+0x194>
 8014dfe:	4616      	mov	r6, r2
 8014e00:	e7bd      	b.n	8014d7e <_printf_i+0x126>
 8014e02:	6833      	ldr	r3, [r6, #0]
 8014e04:	6825      	ldr	r5, [r4, #0]
 8014e06:	6961      	ldr	r1, [r4, #20]
 8014e08:	1d18      	adds	r0, r3, #4
 8014e0a:	6030      	str	r0, [r6, #0]
 8014e0c:	062e      	lsls	r6, r5, #24
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	d501      	bpl.n	8014e16 <_printf_i+0x1be>
 8014e12:	6019      	str	r1, [r3, #0]
 8014e14:	e002      	b.n	8014e1c <_printf_i+0x1c4>
 8014e16:	0668      	lsls	r0, r5, #25
 8014e18:	d5fb      	bpl.n	8014e12 <_printf_i+0x1ba>
 8014e1a:	8019      	strh	r1, [r3, #0]
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	6123      	str	r3, [r4, #16]
 8014e20:	4616      	mov	r6, r2
 8014e22:	e7bc      	b.n	8014d9e <_printf_i+0x146>
 8014e24:	6833      	ldr	r3, [r6, #0]
 8014e26:	1d1a      	adds	r2, r3, #4
 8014e28:	6032      	str	r2, [r6, #0]
 8014e2a:	681e      	ldr	r6, [r3, #0]
 8014e2c:	6862      	ldr	r2, [r4, #4]
 8014e2e:	2100      	movs	r1, #0
 8014e30:	4630      	mov	r0, r6
 8014e32:	f7eb fa55 	bl	80002e0 <memchr>
 8014e36:	b108      	cbz	r0, 8014e3c <_printf_i+0x1e4>
 8014e38:	1b80      	subs	r0, r0, r6
 8014e3a:	6060      	str	r0, [r4, #4]
 8014e3c:	6863      	ldr	r3, [r4, #4]
 8014e3e:	6123      	str	r3, [r4, #16]
 8014e40:	2300      	movs	r3, #0
 8014e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e46:	e7aa      	b.n	8014d9e <_printf_i+0x146>
 8014e48:	6923      	ldr	r3, [r4, #16]
 8014e4a:	4632      	mov	r2, r6
 8014e4c:	4649      	mov	r1, r9
 8014e4e:	4640      	mov	r0, r8
 8014e50:	47d0      	blx	sl
 8014e52:	3001      	adds	r0, #1
 8014e54:	d0ad      	beq.n	8014db2 <_printf_i+0x15a>
 8014e56:	6823      	ldr	r3, [r4, #0]
 8014e58:	079b      	lsls	r3, r3, #30
 8014e5a:	d413      	bmi.n	8014e84 <_printf_i+0x22c>
 8014e5c:	68e0      	ldr	r0, [r4, #12]
 8014e5e:	9b03      	ldr	r3, [sp, #12]
 8014e60:	4298      	cmp	r0, r3
 8014e62:	bfb8      	it	lt
 8014e64:	4618      	movlt	r0, r3
 8014e66:	e7a6      	b.n	8014db6 <_printf_i+0x15e>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	4632      	mov	r2, r6
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	4640      	mov	r0, r8
 8014e70:	47d0      	blx	sl
 8014e72:	3001      	adds	r0, #1
 8014e74:	d09d      	beq.n	8014db2 <_printf_i+0x15a>
 8014e76:	3501      	adds	r5, #1
 8014e78:	68e3      	ldr	r3, [r4, #12]
 8014e7a:	9903      	ldr	r1, [sp, #12]
 8014e7c:	1a5b      	subs	r3, r3, r1
 8014e7e:	42ab      	cmp	r3, r5
 8014e80:	dcf2      	bgt.n	8014e68 <_printf_i+0x210>
 8014e82:	e7eb      	b.n	8014e5c <_printf_i+0x204>
 8014e84:	2500      	movs	r5, #0
 8014e86:	f104 0619 	add.w	r6, r4, #25
 8014e8a:	e7f5      	b.n	8014e78 <_printf_i+0x220>
 8014e8c:	08017f8c 	.word	0x08017f8c
 8014e90:	08017f9d 	.word	0x08017f9d

08014e94 <std>:
 8014e94:	2300      	movs	r3, #0
 8014e96:	b510      	push	{r4, lr}
 8014e98:	4604      	mov	r4, r0
 8014e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8014e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ea2:	6083      	str	r3, [r0, #8]
 8014ea4:	8181      	strh	r1, [r0, #12]
 8014ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ea8:	81c2      	strh	r2, [r0, #14]
 8014eaa:	6183      	str	r3, [r0, #24]
 8014eac:	4619      	mov	r1, r3
 8014eae:	2208      	movs	r2, #8
 8014eb0:	305c      	adds	r0, #92	@ 0x5c
 8014eb2:	f000 f906 	bl	80150c2 <memset>
 8014eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8014eec <std+0x58>)
 8014eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8014eba:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef0 <std+0x5c>)
 8014ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef4 <std+0x60>)
 8014ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef8 <std+0x64>)
 8014ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8014ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8014efc <std+0x68>)
 8014ec8:	6224      	str	r4, [r4, #32]
 8014eca:	429c      	cmp	r4, r3
 8014ecc:	d006      	beq.n	8014edc <std+0x48>
 8014ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014ed2:	4294      	cmp	r4, r2
 8014ed4:	d002      	beq.n	8014edc <std+0x48>
 8014ed6:	33d0      	adds	r3, #208	@ 0xd0
 8014ed8:	429c      	cmp	r4, r3
 8014eda:	d105      	bne.n	8014ee8 <std+0x54>
 8014edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ee4:	f000 b9fc 	b.w	80152e0 <__retarget_lock_init_recursive>
 8014ee8:	bd10      	pop	{r4, pc}
 8014eea:	bf00      	nop
 8014eec:	0801503d 	.word	0x0801503d
 8014ef0:	0801505f 	.word	0x0801505f
 8014ef4:	08015097 	.word	0x08015097
 8014ef8:	080150bb 	.word	0x080150bb
 8014efc:	24007494 	.word	0x24007494

08014f00 <stdio_exit_handler>:
 8014f00:	4a02      	ldr	r2, [pc, #8]	@ (8014f0c <stdio_exit_handler+0xc>)
 8014f02:	4903      	ldr	r1, [pc, #12]	@ (8014f10 <stdio_exit_handler+0x10>)
 8014f04:	4803      	ldr	r0, [pc, #12]	@ (8014f14 <stdio_exit_handler+0x14>)
 8014f06:	f000 b869 	b.w	8014fdc <_fwalk_sglue>
 8014f0a:	bf00      	nop
 8014f0c:	2400006c 	.word	0x2400006c
 8014f10:	08017481 	.word	0x08017481
 8014f14:	240001e8 	.word	0x240001e8

08014f18 <cleanup_stdio>:
 8014f18:	6841      	ldr	r1, [r0, #4]
 8014f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8014f4c <cleanup_stdio+0x34>)
 8014f1c:	4299      	cmp	r1, r3
 8014f1e:	b510      	push	{r4, lr}
 8014f20:	4604      	mov	r4, r0
 8014f22:	d001      	beq.n	8014f28 <cleanup_stdio+0x10>
 8014f24:	f002 faac 	bl	8017480 <_fflush_r>
 8014f28:	68a1      	ldr	r1, [r4, #8]
 8014f2a:	4b09      	ldr	r3, [pc, #36]	@ (8014f50 <cleanup_stdio+0x38>)
 8014f2c:	4299      	cmp	r1, r3
 8014f2e:	d002      	beq.n	8014f36 <cleanup_stdio+0x1e>
 8014f30:	4620      	mov	r0, r4
 8014f32:	f002 faa5 	bl	8017480 <_fflush_r>
 8014f36:	68e1      	ldr	r1, [r4, #12]
 8014f38:	4b06      	ldr	r3, [pc, #24]	@ (8014f54 <cleanup_stdio+0x3c>)
 8014f3a:	4299      	cmp	r1, r3
 8014f3c:	d004      	beq.n	8014f48 <cleanup_stdio+0x30>
 8014f3e:	4620      	mov	r0, r4
 8014f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f44:	f002 ba9c 	b.w	8017480 <_fflush_r>
 8014f48:	bd10      	pop	{r4, pc}
 8014f4a:	bf00      	nop
 8014f4c:	24007494 	.word	0x24007494
 8014f50:	240074fc 	.word	0x240074fc
 8014f54:	24007564 	.word	0x24007564

08014f58 <global_stdio_init.part.0>:
 8014f58:	b510      	push	{r4, lr}
 8014f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f88 <global_stdio_init.part.0+0x30>)
 8014f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8014f8c <global_stdio_init.part.0+0x34>)
 8014f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8014f90 <global_stdio_init.part.0+0x38>)
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	4620      	mov	r0, r4
 8014f64:	2200      	movs	r2, #0
 8014f66:	2104      	movs	r1, #4
 8014f68:	f7ff ff94 	bl	8014e94 <std>
 8014f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f70:	2201      	movs	r2, #1
 8014f72:	2109      	movs	r1, #9
 8014f74:	f7ff ff8e 	bl	8014e94 <std>
 8014f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f7c:	2202      	movs	r2, #2
 8014f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f82:	2112      	movs	r1, #18
 8014f84:	f7ff bf86 	b.w	8014e94 <std>
 8014f88:	240075cc 	.word	0x240075cc
 8014f8c:	24007494 	.word	0x24007494
 8014f90:	08014f01 	.word	0x08014f01

08014f94 <__sfp_lock_acquire>:
 8014f94:	4801      	ldr	r0, [pc, #4]	@ (8014f9c <__sfp_lock_acquire+0x8>)
 8014f96:	f000 b9a4 	b.w	80152e2 <__retarget_lock_acquire_recursive>
 8014f9a:	bf00      	nop
 8014f9c:	240075d5 	.word	0x240075d5

08014fa0 <__sfp_lock_release>:
 8014fa0:	4801      	ldr	r0, [pc, #4]	@ (8014fa8 <__sfp_lock_release+0x8>)
 8014fa2:	f000 b99f 	b.w	80152e4 <__retarget_lock_release_recursive>
 8014fa6:	bf00      	nop
 8014fa8:	240075d5 	.word	0x240075d5

08014fac <__sinit>:
 8014fac:	b510      	push	{r4, lr}
 8014fae:	4604      	mov	r4, r0
 8014fb0:	f7ff fff0 	bl	8014f94 <__sfp_lock_acquire>
 8014fb4:	6a23      	ldr	r3, [r4, #32]
 8014fb6:	b11b      	cbz	r3, 8014fc0 <__sinit+0x14>
 8014fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fbc:	f7ff bff0 	b.w	8014fa0 <__sfp_lock_release>
 8014fc0:	4b04      	ldr	r3, [pc, #16]	@ (8014fd4 <__sinit+0x28>)
 8014fc2:	6223      	str	r3, [r4, #32]
 8014fc4:	4b04      	ldr	r3, [pc, #16]	@ (8014fd8 <__sinit+0x2c>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d1f5      	bne.n	8014fb8 <__sinit+0xc>
 8014fcc:	f7ff ffc4 	bl	8014f58 <global_stdio_init.part.0>
 8014fd0:	e7f2      	b.n	8014fb8 <__sinit+0xc>
 8014fd2:	bf00      	nop
 8014fd4:	08014f19 	.word	0x08014f19
 8014fd8:	240075cc 	.word	0x240075cc

08014fdc <_fwalk_sglue>:
 8014fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fe0:	4607      	mov	r7, r0
 8014fe2:	4688      	mov	r8, r1
 8014fe4:	4614      	mov	r4, r2
 8014fe6:	2600      	movs	r6, #0
 8014fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fec:	f1b9 0901 	subs.w	r9, r9, #1
 8014ff0:	d505      	bpl.n	8014ffe <_fwalk_sglue+0x22>
 8014ff2:	6824      	ldr	r4, [r4, #0]
 8014ff4:	2c00      	cmp	r4, #0
 8014ff6:	d1f7      	bne.n	8014fe8 <_fwalk_sglue+0xc>
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ffe:	89ab      	ldrh	r3, [r5, #12]
 8015000:	2b01      	cmp	r3, #1
 8015002:	d907      	bls.n	8015014 <_fwalk_sglue+0x38>
 8015004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015008:	3301      	adds	r3, #1
 801500a:	d003      	beq.n	8015014 <_fwalk_sglue+0x38>
 801500c:	4629      	mov	r1, r5
 801500e:	4638      	mov	r0, r7
 8015010:	47c0      	blx	r8
 8015012:	4306      	orrs	r6, r0
 8015014:	3568      	adds	r5, #104	@ 0x68
 8015016:	e7e9      	b.n	8014fec <_fwalk_sglue+0x10>

08015018 <iprintf>:
 8015018:	b40f      	push	{r0, r1, r2, r3}
 801501a:	b507      	push	{r0, r1, r2, lr}
 801501c:	4906      	ldr	r1, [pc, #24]	@ (8015038 <iprintf+0x20>)
 801501e:	ab04      	add	r3, sp, #16
 8015020:	6808      	ldr	r0, [r1, #0]
 8015022:	f853 2b04 	ldr.w	r2, [r3], #4
 8015026:	6881      	ldr	r1, [r0, #8]
 8015028:	9301      	str	r3, [sp, #4]
 801502a:	f002 f88d 	bl	8017148 <_vfiprintf_r>
 801502e:	b003      	add	sp, #12
 8015030:	f85d eb04 	ldr.w	lr, [sp], #4
 8015034:	b004      	add	sp, #16
 8015036:	4770      	bx	lr
 8015038:	240001e4 	.word	0x240001e4

0801503c <__sread>:
 801503c:	b510      	push	{r4, lr}
 801503e:	460c      	mov	r4, r1
 8015040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015044:	f000 f8fe 	bl	8015244 <_read_r>
 8015048:	2800      	cmp	r0, #0
 801504a:	bfab      	itete	ge
 801504c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801504e:	89a3      	ldrhlt	r3, [r4, #12]
 8015050:	181b      	addge	r3, r3, r0
 8015052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015056:	bfac      	ite	ge
 8015058:	6563      	strge	r3, [r4, #84]	@ 0x54
 801505a:	81a3      	strhlt	r3, [r4, #12]
 801505c:	bd10      	pop	{r4, pc}

0801505e <__swrite>:
 801505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015062:	461f      	mov	r7, r3
 8015064:	898b      	ldrh	r3, [r1, #12]
 8015066:	05db      	lsls	r3, r3, #23
 8015068:	4605      	mov	r5, r0
 801506a:	460c      	mov	r4, r1
 801506c:	4616      	mov	r6, r2
 801506e:	d505      	bpl.n	801507c <__swrite+0x1e>
 8015070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015074:	2302      	movs	r3, #2
 8015076:	2200      	movs	r2, #0
 8015078:	f000 f8d2 	bl	8015220 <_lseek_r>
 801507c:	89a3      	ldrh	r3, [r4, #12]
 801507e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015086:	81a3      	strh	r3, [r4, #12]
 8015088:	4632      	mov	r2, r6
 801508a:	463b      	mov	r3, r7
 801508c:	4628      	mov	r0, r5
 801508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015092:	f000 b8e9 	b.w	8015268 <_write_r>

08015096 <__sseek>:
 8015096:	b510      	push	{r4, lr}
 8015098:	460c      	mov	r4, r1
 801509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801509e:	f000 f8bf 	bl	8015220 <_lseek_r>
 80150a2:	1c43      	adds	r3, r0, #1
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	bf15      	itete	ne
 80150a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80150aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80150ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80150b2:	81a3      	strheq	r3, [r4, #12]
 80150b4:	bf18      	it	ne
 80150b6:	81a3      	strhne	r3, [r4, #12]
 80150b8:	bd10      	pop	{r4, pc}

080150ba <__sclose>:
 80150ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150be:	f000 b841 	b.w	8015144 <_close_r>

080150c2 <memset>:
 80150c2:	4402      	add	r2, r0
 80150c4:	4603      	mov	r3, r0
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d100      	bne.n	80150cc <memset+0xa>
 80150ca:	4770      	bx	lr
 80150cc:	f803 1b01 	strb.w	r1, [r3], #1
 80150d0:	e7f9      	b.n	80150c6 <memset+0x4>

080150d2 <strchr>:
 80150d2:	b2c9      	uxtb	r1, r1
 80150d4:	4603      	mov	r3, r0
 80150d6:	4618      	mov	r0, r3
 80150d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150dc:	b112      	cbz	r2, 80150e4 <strchr+0x12>
 80150de:	428a      	cmp	r2, r1
 80150e0:	d1f9      	bne.n	80150d6 <strchr+0x4>
 80150e2:	4770      	bx	lr
 80150e4:	2900      	cmp	r1, #0
 80150e6:	bf18      	it	ne
 80150e8:	2000      	movne	r0, #0
 80150ea:	4770      	bx	lr

080150ec <strncmp>:
 80150ec:	b510      	push	{r4, lr}
 80150ee:	b16a      	cbz	r2, 801510c <strncmp+0x20>
 80150f0:	3901      	subs	r1, #1
 80150f2:	1884      	adds	r4, r0, r2
 80150f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d103      	bne.n	8015108 <strncmp+0x1c>
 8015100:	42a0      	cmp	r0, r4
 8015102:	d001      	beq.n	8015108 <strncmp+0x1c>
 8015104:	2a00      	cmp	r2, #0
 8015106:	d1f5      	bne.n	80150f4 <strncmp+0x8>
 8015108:	1ad0      	subs	r0, r2, r3
 801510a:	bd10      	pop	{r4, pc}
 801510c:	4610      	mov	r0, r2
 801510e:	e7fc      	b.n	801510a <strncmp+0x1e>

08015110 <strrchr>:
 8015110:	b538      	push	{r3, r4, r5, lr}
 8015112:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8015116:	4603      	mov	r3, r0
 8015118:	d10e      	bne.n	8015138 <strrchr+0x28>
 801511a:	4621      	mov	r1, r4
 801511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015120:	f7ff bfd7 	b.w	80150d2 <strchr>
 8015124:	1c43      	adds	r3, r0, #1
 8015126:	4605      	mov	r5, r0
 8015128:	4621      	mov	r1, r4
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff ffd1 	bl	80150d2 <strchr>
 8015130:	2800      	cmp	r0, #0
 8015132:	d1f7      	bne.n	8015124 <strrchr+0x14>
 8015134:	4628      	mov	r0, r5
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	2500      	movs	r5, #0
 801513a:	e7f5      	b.n	8015128 <strrchr+0x18>

0801513c <_localeconv_r>:
 801513c:	4800      	ldr	r0, [pc, #0]	@ (8015140 <_localeconv_r+0x4>)
 801513e:	4770      	bx	lr
 8015140:	24000168 	.word	0x24000168

08015144 <_close_r>:
 8015144:	b538      	push	{r3, r4, r5, lr}
 8015146:	4d06      	ldr	r5, [pc, #24]	@ (8015160 <_close_r+0x1c>)
 8015148:	2300      	movs	r3, #0
 801514a:	4604      	mov	r4, r0
 801514c:	4608      	mov	r0, r1
 801514e:	602b      	str	r3, [r5, #0]
 8015150:	f7f1 f9e7 	bl	8006522 <_close>
 8015154:	1c43      	adds	r3, r0, #1
 8015156:	d102      	bne.n	801515e <_close_r+0x1a>
 8015158:	682b      	ldr	r3, [r5, #0]
 801515a:	b103      	cbz	r3, 801515e <_close_r+0x1a>
 801515c:	6023      	str	r3, [r4, #0]
 801515e:	bd38      	pop	{r3, r4, r5, pc}
 8015160:	240075d0 	.word	0x240075d0

08015164 <_reclaim_reent>:
 8015164:	4b2d      	ldr	r3, [pc, #180]	@ (801521c <_reclaim_reent+0xb8>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4283      	cmp	r3, r0
 801516a:	b570      	push	{r4, r5, r6, lr}
 801516c:	4604      	mov	r4, r0
 801516e:	d053      	beq.n	8015218 <_reclaim_reent+0xb4>
 8015170:	69c3      	ldr	r3, [r0, #28]
 8015172:	b31b      	cbz	r3, 80151bc <_reclaim_reent+0x58>
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	b163      	cbz	r3, 8015192 <_reclaim_reent+0x2e>
 8015178:	2500      	movs	r5, #0
 801517a:	69e3      	ldr	r3, [r4, #28]
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	5959      	ldr	r1, [r3, r5]
 8015180:	b9b1      	cbnz	r1, 80151b0 <_reclaim_reent+0x4c>
 8015182:	3504      	adds	r5, #4
 8015184:	2d80      	cmp	r5, #128	@ 0x80
 8015186:	d1f8      	bne.n	801517a <_reclaim_reent+0x16>
 8015188:	69e3      	ldr	r3, [r4, #28]
 801518a:	4620      	mov	r0, r4
 801518c:	68d9      	ldr	r1, [r3, #12]
 801518e:	f000 feb1 	bl	8015ef4 <_free_r>
 8015192:	69e3      	ldr	r3, [r4, #28]
 8015194:	6819      	ldr	r1, [r3, #0]
 8015196:	b111      	cbz	r1, 801519e <_reclaim_reent+0x3a>
 8015198:	4620      	mov	r0, r4
 801519a:	f000 feab 	bl	8015ef4 <_free_r>
 801519e:	69e3      	ldr	r3, [r4, #28]
 80151a0:	689d      	ldr	r5, [r3, #8]
 80151a2:	b15d      	cbz	r5, 80151bc <_reclaim_reent+0x58>
 80151a4:	4629      	mov	r1, r5
 80151a6:	4620      	mov	r0, r4
 80151a8:	682d      	ldr	r5, [r5, #0]
 80151aa:	f000 fea3 	bl	8015ef4 <_free_r>
 80151ae:	e7f8      	b.n	80151a2 <_reclaim_reent+0x3e>
 80151b0:	680e      	ldr	r6, [r1, #0]
 80151b2:	4620      	mov	r0, r4
 80151b4:	f000 fe9e 	bl	8015ef4 <_free_r>
 80151b8:	4631      	mov	r1, r6
 80151ba:	e7e1      	b.n	8015180 <_reclaim_reent+0x1c>
 80151bc:	6961      	ldr	r1, [r4, #20]
 80151be:	b111      	cbz	r1, 80151c6 <_reclaim_reent+0x62>
 80151c0:	4620      	mov	r0, r4
 80151c2:	f000 fe97 	bl	8015ef4 <_free_r>
 80151c6:	69e1      	ldr	r1, [r4, #28]
 80151c8:	b111      	cbz	r1, 80151d0 <_reclaim_reent+0x6c>
 80151ca:	4620      	mov	r0, r4
 80151cc:	f000 fe92 	bl	8015ef4 <_free_r>
 80151d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80151d2:	b111      	cbz	r1, 80151da <_reclaim_reent+0x76>
 80151d4:	4620      	mov	r0, r4
 80151d6:	f000 fe8d 	bl	8015ef4 <_free_r>
 80151da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80151dc:	b111      	cbz	r1, 80151e4 <_reclaim_reent+0x80>
 80151de:	4620      	mov	r0, r4
 80151e0:	f000 fe88 	bl	8015ef4 <_free_r>
 80151e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80151e6:	b111      	cbz	r1, 80151ee <_reclaim_reent+0x8a>
 80151e8:	4620      	mov	r0, r4
 80151ea:	f000 fe83 	bl	8015ef4 <_free_r>
 80151ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80151f0:	b111      	cbz	r1, 80151f8 <_reclaim_reent+0x94>
 80151f2:	4620      	mov	r0, r4
 80151f4:	f000 fe7e 	bl	8015ef4 <_free_r>
 80151f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80151fa:	b111      	cbz	r1, 8015202 <_reclaim_reent+0x9e>
 80151fc:	4620      	mov	r0, r4
 80151fe:	f000 fe79 	bl	8015ef4 <_free_r>
 8015202:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015204:	b111      	cbz	r1, 801520c <_reclaim_reent+0xa8>
 8015206:	4620      	mov	r0, r4
 8015208:	f000 fe74 	bl	8015ef4 <_free_r>
 801520c:	6a23      	ldr	r3, [r4, #32]
 801520e:	b11b      	cbz	r3, 8015218 <_reclaim_reent+0xb4>
 8015210:	4620      	mov	r0, r4
 8015212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015216:	4718      	bx	r3
 8015218:	bd70      	pop	{r4, r5, r6, pc}
 801521a:	bf00      	nop
 801521c:	240001e4 	.word	0x240001e4

08015220 <_lseek_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4d07      	ldr	r5, [pc, #28]	@ (8015240 <_lseek_r+0x20>)
 8015224:	4604      	mov	r4, r0
 8015226:	4608      	mov	r0, r1
 8015228:	4611      	mov	r1, r2
 801522a:	2200      	movs	r2, #0
 801522c:	602a      	str	r2, [r5, #0]
 801522e:	461a      	mov	r2, r3
 8015230:	f7f1 f99e 	bl	8006570 <_lseek>
 8015234:	1c43      	adds	r3, r0, #1
 8015236:	d102      	bne.n	801523e <_lseek_r+0x1e>
 8015238:	682b      	ldr	r3, [r5, #0]
 801523a:	b103      	cbz	r3, 801523e <_lseek_r+0x1e>
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	bd38      	pop	{r3, r4, r5, pc}
 8015240:	240075d0 	.word	0x240075d0

08015244 <_read_r>:
 8015244:	b538      	push	{r3, r4, r5, lr}
 8015246:	4d07      	ldr	r5, [pc, #28]	@ (8015264 <_read_r+0x20>)
 8015248:	4604      	mov	r4, r0
 801524a:	4608      	mov	r0, r1
 801524c:	4611      	mov	r1, r2
 801524e:	2200      	movs	r2, #0
 8015250:	602a      	str	r2, [r5, #0]
 8015252:	461a      	mov	r2, r3
 8015254:	f7f1 f948 	bl	80064e8 <_read>
 8015258:	1c43      	adds	r3, r0, #1
 801525a:	d102      	bne.n	8015262 <_read_r+0x1e>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	b103      	cbz	r3, 8015262 <_read_r+0x1e>
 8015260:	6023      	str	r3, [r4, #0]
 8015262:	bd38      	pop	{r3, r4, r5, pc}
 8015264:	240075d0 	.word	0x240075d0

08015268 <_write_r>:
 8015268:	b538      	push	{r3, r4, r5, lr}
 801526a:	4d07      	ldr	r5, [pc, #28]	@ (8015288 <_write_r+0x20>)
 801526c:	4604      	mov	r4, r0
 801526e:	4608      	mov	r0, r1
 8015270:	4611      	mov	r1, r2
 8015272:	2200      	movs	r2, #0
 8015274:	602a      	str	r2, [r5, #0]
 8015276:	461a      	mov	r2, r3
 8015278:	f7eb ffd0 	bl	800121c <_write>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_write_r+0x1e>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_write_r+0x1e>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	240075d0 	.word	0x240075d0

0801528c <__errno>:
 801528c:	4b01      	ldr	r3, [pc, #4]	@ (8015294 <__errno+0x8>)
 801528e:	6818      	ldr	r0, [r3, #0]
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop
 8015294:	240001e4 	.word	0x240001e4

08015298 <__libc_init_array>:
 8015298:	b570      	push	{r4, r5, r6, lr}
 801529a:	4d0d      	ldr	r5, [pc, #52]	@ (80152d0 <__libc_init_array+0x38>)
 801529c:	4c0d      	ldr	r4, [pc, #52]	@ (80152d4 <__libc_init_array+0x3c>)
 801529e:	1b64      	subs	r4, r4, r5
 80152a0:	10a4      	asrs	r4, r4, #2
 80152a2:	2600      	movs	r6, #0
 80152a4:	42a6      	cmp	r6, r4
 80152a6:	d109      	bne.n	80152bc <__libc_init_array+0x24>
 80152a8:	4d0b      	ldr	r5, [pc, #44]	@ (80152d8 <__libc_init_array+0x40>)
 80152aa:	4c0c      	ldr	r4, [pc, #48]	@ (80152dc <__libc_init_array+0x44>)
 80152ac:	f002 fd0e 	bl	8017ccc <_init>
 80152b0:	1b64      	subs	r4, r4, r5
 80152b2:	10a4      	asrs	r4, r4, #2
 80152b4:	2600      	movs	r6, #0
 80152b6:	42a6      	cmp	r6, r4
 80152b8:	d105      	bne.n	80152c6 <__libc_init_array+0x2e>
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80152c0:	4798      	blx	r3
 80152c2:	3601      	adds	r6, #1
 80152c4:	e7ee      	b.n	80152a4 <__libc_init_array+0xc>
 80152c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80152ca:	4798      	blx	r3
 80152cc:	3601      	adds	r6, #1
 80152ce:	e7f2      	b.n	80152b6 <__libc_init_array+0x1e>
 80152d0:	080184f0 	.word	0x080184f0
 80152d4:	080184f0 	.word	0x080184f0
 80152d8:	080184f0 	.word	0x080184f0
 80152dc:	080184f4 	.word	0x080184f4

080152e0 <__retarget_lock_init_recursive>:
 80152e0:	4770      	bx	lr

080152e2 <__retarget_lock_acquire_recursive>:
 80152e2:	4770      	bx	lr

080152e4 <__retarget_lock_release_recursive>:
 80152e4:	4770      	bx	lr

080152e6 <memcpy>:
 80152e6:	440a      	add	r2, r1
 80152e8:	4291      	cmp	r1, r2
 80152ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80152ee:	d100      	bne.n	80152f2 <memcpy+0xc>
 80152f0:	4770      	bx	lr
 80152f2:	b510      	push	{r4, lr}
 80152f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152fc:	4291      	cmp	r1, r2
 80152fe:	d1f9      	bne.n	80152f4 <memcpy+0xe>
 8015300:	bd10      	pop	{r4, pc}
 8015302:	0000      	movs	r0, r0
 8015304:	0000      	movs	r0, r0
	...

08015308 <nan>:
 8015308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015310 <nan+0x8>
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	00000000 	.word	0x00000000
 8015314:	7ff80000 	.word	0x7ff80000

08015318 <nanf>:
 8015318:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015320 <nanf+0x8>
 801531c:	4770      	bx	lr
 801531e:	bf00      	nop
 8015320:	7fc00000 	.word	0x7fc00000

08015324 <quorem>:
 8015324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015328:	6903      	ldr	r3, [r0, #16]
 801532a:	690c      	ldr	r4, [r1, #16]
 801532c:	42a3      	cmp	r3, r4
 801532e:	4607      	mov	r7, r0
 8015330:	db7e      	blt.n	8015430 <quorem+0x10c>
 8015332:	3c01      	subs	r4, #1
 8015334:	f101 0814 	add.w	r8, r1, #20
 8015338:	00a3      	lsls	r3, r4, #2
 801533a:	f100 0514 	add.w	r5, r0, #20
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015344:	9301      	str	r3, [sp, #4]
 8015346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801534a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801534e:	3301      	adds	r3, #1
 8015350:	429a      	cmp	r2, r3
 8015352:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015356:	fbb2 f6f3 	udiv	r6, r2, r3
 801535a:	d32e      	bcc.n	80153ba <quorem+0x96>
 801535c:	f04f 0a00 	mov.w	sl, #0
 8015360:	46c4      	mov	ip, r8
 8015362:	46ae      	mov	lr, r5
 8015364:	46d3      	mov	fp, sl
 8015366:	f85c 3b04 	ldr.w	r3, [ip], #4
 801536a:	b298      	uxth	r0, r3
 801536c:	fb06 a000 	mla	r0, r6, r0, sl
 8015370:	0c02      	lsrs	r2, r0, #16
 8015372:	0c1b      	lsrs	r3, r3, #16
 8015374:	fb06 2303 	mla	r3, r6, r3, r2
 8015378:	f8de 2000 	ldr.w	r2, [lr]
 801537c:	b280      	uxth	r0, r0
 801537e:	b292      	uxth	r2, r2
 8015380:	1a12      	subs	r2, r2, r0
 8015382:	445a      	add	r2, fp
 8015384:	f8de 0000 	ldr.w	r0, [lr]
 8015388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801538c:	b29b      	uxth	r3, r3
 801538e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015396:	b292      	uxth	r2, r2
 8015398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801539c:	45e1      	cmp	r9, ip
 801539e:	f84e 2b04 	str.w	r2, [lr], #4
 80153a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80153a6:	d2de      	bcs.n	8015366 <quorem+0x42>
 80153a8:	9b00      	ldr	r3, [sp, #0]
 80153aa:	58eb      	ldr	r3, [r5, r3]
 80153ac:	b92b      	cbnz	r3, 80153ba <quorem+0x96>
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	3b04      	subs	r3, #4
 80153b2:	429d      	cmp	r5, r3
 80153b4:	461a      	mov	r2, r3
 80153b6:	d32f      	bcc.n	8015418 <quorem+0xf4>
 80153b8:	613c      	str	r4, [r7, #16]
 80153ba:	4638      	mov	r0, r7
 80153bc:	f001 fca2 	bl	8016d04 <__mcmp>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	db25      	blt.n	8015410 <quorem+0xec>
 80153c4:	4629      	mov	r1, r5
 80153c6:	2000      	movs	r0, #0
 80153c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80153cc:	f8d1 c000 	ldr.w	ip, [r1]
 80153d0:	fa1f fe82 	uxth.w	lr, r2
 80153d4:	fa1f f38c 	uxth.w	r3, ip
 80153d8:	eba3 030e 	sub.w	r3, r3, lr
 80153dc:	4403      	add	r3, r0
 80153de:	0c12      	lsrs	r2, r2, #16
 80153e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80153e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153ee:	45c1      	cmp	r9, r8
 80153f0:	f841 3b04 	str.w	r3, [r1], #4
 80153f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80153f8:	d2e6      	bcs.n	80153c8 <quorem+0xa4>
 80153fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015402:	b922      	cbnz	r2, 801540e <quorem+0xea>
 8015404:	3b04      	subs	r3, #4
 8015406:	429d      	cmp	r5, r3
 8015408:	461a      	mov	r2, r3
 801540a:	d30b      	bcc.n	8015424 <quorem+0x100>
 801540c:	613c      	str	r4, [r7, #16]
 801540e:	3601      	adds	r6, #1
 8015410:	4630      	mov	r0, r6
 8015412:	b003      	add	sp, #12
 8015414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015418:	6812      	ldr	r2, [r2, #0]
 801541a:	3b04      	subs	r3, #4
 801541c:	2a00      	cmp	r2, #0
 801541e:	d1cb      	bne.n	80153b8 <quorem+0x94>
 8015420:	3c01      	subs	r4, #1
 8015422:	e7c6      	b.n	80153b2 <quorem+0x8e>
 8015424:	6812      	ldr	r2, [r2, #0]
 8015426:	3b04      	subs	r3, #4
 8015428:	2a00      	cmp	r2, #0
 801542a:	d1ef      	bne.n	801540c <quorem+0xe8>
 801542c:	3c01      	subs	r4, #1
 801542e:	e7ea      	b.n	8015406 <quorem+0xe2>
 8015430:	2000      	movs	r0, #0
 8015432:	e7ee      	b.n	8015412 <quorem+0xee>
 8015434:	0000      	movs	r0, r0
	...

08015438 <_dtoa_r>:
 8015438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543c:	ed2d 8b02 	vpush	{d8}
 8015440:	69c7      	ldr	r7, [r0, #28]
 8015442:	b091      	sub	sp, #68	@ 0x44
 8015444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015448:	ec55 4b10 	vmov	r4, r5, d0
 801544c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801544e:	9107      	str	r1, [sp, #28]
 8015450:	4681      	mov	r9, r0
 8015452:	9209      	str	r2, [sp, #36]	@ 0x24
 8015454:	930d      	str	r3, [sp, #52]	@ 0x34
 8015456:	b97f      	cbnz	r7, 8015478 <_dtoa_r+0x40>
 8015458:	2010      	movs	r0, #16
 801545a:	f001 f8cf 	bl	80165fc <malloc>
 801545e:	4602      	mov	r2, r0
 8015460:	f8c9 001c 	str.w	r0, [r9, #28]
 8015464:	b920      	cbnz	r0, 8015470 <_dtoa_r+0x38>
 8015466:	4ba0      	ldr	r3, [pc, #640]	@ (80156e8 <_dtoa_r+0x2b0>)
 8015468:	21ef      	movs	r1, #239	@ 0xef
 801546a:	48a0      	ldr	r0, [pc, #640]	@ (80156ec <_dtoa_r+0x2b4>)
 801546c:	f002 f8d4 	bl	8017618 <__assert_func>
 8015470:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015474:	6007      	str	r7, [r0, #0]
 8015476:	60c7      	str	r7, [r0, #12]
 8015478:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801547c:	6819      	ldr	r1, [r3, #0]
 801547e:	b159      	cbz	r1, 8015498 <_dtoa_r+0x60>
 8015480:	685a      	ldr	r2, [r3, #4]
 8015482:	604a      	str	r2, [r1, #4]
 8015484:	2301      	movs	r3, #1
 8015486:	4093      	lsls	r3, r2
 8015488:	608b      	str	r3, [r1, #8]
 801548a:	4648      	mov	r0, r9
 801548c:	f001 f9be 	bl	801680c <_Bfree>
 8015490:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015494:	2200      	movs	r2, #0
 8015496:	601a      	str	r2, [r3, #0]
 8015498:	1e2b      	subs	r3, r5, #0
 801549a:	bfbb      	ittet	lt
 801549c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80154a0:	9303      	strlt	r3, [sp, #12]
 80154a2:	2300      	movge	r3, #0
 80154a4:	2201      	movlt	r2, #1
 80154a6:	bfac      	ite	ge
 80154a8:	6033      	strge	r3, [r6, #0]
 80154aa:	6032      	strlt	r2, [r6, #0]
 80154ac:	4b90      	ldr	r3, [pc, #576]	@ (80156f0 <_dtoa_r+0x2b8>)
 80154ae:	9e03      	ldr	r6, [sp, #12]
 80154b0:	43b3      	bics	r3, r6
 80154b2:	d110      	bne.n	80154d6 <_dtoa_r+0x9e>
 80154b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80154b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80154ba:	6013      	str	r3, [r2, #0]
 80154bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80154c0:	4323      	orrs	r3, r4
 80154c2:	f000 84e6 	beq.w	8015e92 <_dtoa_r+0xa5a>
 80154c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80154c8:	4f8a      	ldr	r7, [pc, #552]	@ (80156f4 <_dtoa_r+0x2bc>)
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f000 84e8 	beq.w	8015ea0 <_dtoa_r+0xa68>
 80154d0:	1cfb      	adds	r3, r7, #3
 80154d2:	f000 bce3 	b.w	8015e9c <_dtoa_r+0xa64>
 80154d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80154da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80154de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e2:	d10a      	bne.n	80154fa <_dtoa_r+0xc2>
 80154e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80154e6:	2301      	movs	r3, #1
 80154e8:	6013      	str	r3, [r2, #0]
 80154ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80154ec:	b113      	cbz	r3, 80154f4 <_dtoa_r+0xbc>
 80154ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80154f0:	4b81      	ldr	r3, [pc, #516]	@ (80156f8 <_dtoa_r+0x2c0>)
 80154f2:	6013      	str	r3, [r2, #0]
 80154f4:	4f81      	ldr	r7, [pc, #516]	@ (80156fc <_dtoa_r+0x2c4>)
 80154f6:	f000 bcd3 	b.w	8015ea0 <_dtoa_r+0xa68>
 80154fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80154fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80154fe:	4648      	mov	r0, r9
 8015500:	eeb0 0b48 	vmov.f64	d0, d8
 8015504:	f001 fd1e 	bl	8016f44 <__d2b>
 8015508:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801550c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801550e:	9001      	str	r0, [sp, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d045      	beq.n	80155a0 <_dtoa_r+0x168>
 8015514:	eeb0 7b48 	vmov.f64	d7, d8
 8015518:	ee18 1a90 	vmov	r1, s17
 801551c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015520:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8015524:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8015528:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801552c:	2500      	movs	r5, #0
 801552e:	ee07 1a90 	vmov	s15, r1
 8015532:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8015536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80156d0 <_dtoa_r+0x298>
 801553a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801553e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80156d8 <_dtoa_r+0x2a0>
 8015542:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015546:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80156e0 <_dtoa_r+0x2a8>
 801554a:	ee07 3a90 	vmov	s15, r3
 801554e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015552:	eeb0 7b46 	vmov.f64	d7, d6
 8015556:	eea4 7b05 	vfma.f64	d7, d4, d5
 801555a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801555e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015566:	ee16 8a90 	vmov	r8, s13
 801556a:	d508      	bpl.n	801557e <_dtoa_r+0x146>
 801556c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015570:	eeb4 6b47 	vcmp.f64	d6, d7
 8015574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015578:	bf18      	it	ne
 801557a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801557e:	f1b8 0f16 	cmp.w	r8, #22
 8015582:	d82b      	bhi.n	80155dc <_dtoa_r+0x1a4>
 8015584:	495e      	ldr	r1, [pc, #376]	@ (8015700 <_dtoa_r+0x2c8>)
 8015586:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801558a:	ed91 7b00 	vldr	d7, [r1]
 801558e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	d501      	bpl.n	801559c <_dtoa_r+0x164>
 8015598:	f108 38ff 	add.w	r8, r8, #4294967295
 801559c:	2100      	movs	r1, #0
 801559e:	e01e      	b.n	80155de <_dtoa_r+0x1a6>
 80155a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155a2:	4413      	add	r3, r2
 80155a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80155a8:	2920      	cmp	r1, #32
 80155aa:	bfc1      	itttt	gt
 80155ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80155b0:	408e      	lslgt	r6, r1
 80155b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80155b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80155ba:	bfd6      	itet	le
 80155bc:	f1c1 0120 	rsble	r1, r1, #32
 80155c0:	4331      	orrgt	r1, r6
 80155c2:	fa04 f101 	lslle.w	r1, r4, r1
 80155c6:	ee07 1a90 	vmov	s15, r1
 80155ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80155ce:	3b01      	subs	r3, #1
 80155d0:	ee17 1a90 	vmov	r1, s15
 80155d4:	2501      	movs	r5, #1
 80155d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80155da:	e7a8      	b.n	801552e <_dtoa_r+0xf6>
 80155dc:	2101      	movs	r1, #1
 80155de:	1ad2      	subs	r2, r2, r3
 80155e0:	1e53      	subs	r3, r2, #1
 80155e2:	9306      	str	r3, [sp, #24]
 80155e4:	bf45      	ittet	mi
 80155e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80155ea:	9304      	strmi	r3, [sp, #16]
 80155ec:	2300      	movpl	r3, #0
 80155ee:	2300      	movmi	r3, #0
 80155f0:	bf4c      	ite	mi
 80155f2:	9306      	strmi	r3, [sp, #24]
 80155f4:	9304      	strpl	r3, [sp, #16]
 80155f6:	f1b8 0f00 	cmp.w	r8, #0
 80155fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80155fc:	db18      	blt.n	8015630 <_dtoa_r+0x1f8>
 80155fe:	9b06      	ldr	r3, [sp, #24]
 8015600:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015604:	4443      	add	r3, r8
 8015606:	9306      	str	r3, [sp, #24]
 8015608:	2300      	movs	r3, #0
 801560a:	9a07      	ldr	r2, [sp, #28]
 801560c:	2a09      	cmp	r2, #9
 801560e:	d845      	bhi.n	801569c <_dtoa_r+0x264>
 8015610:	2a05      	cmp	r2, #5
 8015612:	bfc4      	itt	gt
 8015614:	3a04      	subgt	r2, #4
 8015616:	9207      	strgt	r2, [sp, #28]
 8015618:	9a07      	ldr	r2, [sp, #28]
 801561a:	f1a2 0202 	sub.w	r2, r2, #2
 801561e:	bfcc      	ite	gt
 8015620:	2400      	movgt	r4, #0
 8015622:	2401      	movle	r4, #1
 8015624:	2a03      	cmp	r2, #3
 8015626:	d844      	bhi.n	80156b2 <_dtoa_r+0x27a>
 8015628:	e8df f002 	tbb	[pc, r2]
 801562c:	0b173634 	.word	0x0b173634
 8015630:	9b04      	ldr	r3, [sp, #16]
 8015632:	2200      	movs	r2, #0
 8015634:	eba3 0308 	sub.w	r3, r3, r8
 8015638:	9304      	str	r3, [sp, #16]
 801563a:	920a      	str	r2, [sp, #40]	@ 0x28
 801563c:	f1c8 0300 	rsb	r3, r8, #0
 8015640:	e7e3      	b.n	801560a <_dtoa_r+0x1d2>
 8015642:	2201      	movs	r2, #1
 8015644:	9208      	str	r2, [sp, #32]
 8015646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015648:	eb08 0b02 	add.w	fp, r8, r2
 801564c:	f10b 0a01 	add.w	sl, fp, #1
 8015650:	4652      	mov	r2, sl
 8015652:	2a01      	cmp	r2, #1
 8015654:	bfb8      	it	lt
 8015656:	2201      	movlt	r2, #1
 8015658:	e006      	b.n	8015668 <_dtoa_r+0x230>
 801565a:	2201      	movs	r2, #1
 801565c:	9208      	str	r2, [sp, #32]
 801565e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015660:	2a00      	cmp	r2, #0
 8015662:	dd29      	ble.n	80156b8 <_dtoa_r+0x280>
 8015664:	4693      	mov	fp, r2
 8015666:	4692      	mov	sl, r2
 8015668:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801566c:	2100      	movs	r1, #0
 801566e:	2004      	movs	r0, #4
 8015670:	f100 0614 	add.w	r6, r0, #20
 8015674:	4296      	cmp	r6, r2
 8015676:	d926      	bls.n	80156c6 <_dtoa_r+0x28e>
 8015678:	6079      	str	r1, [r7, #4]
 801567a:	4648      	mov	r0, r9
 801567c:	9305      	str	r3, [sp, #20]
 801567e:	f001 f885 	bl	801678c <_Balloc>
 8015682:	9b05      	ldr	r3, [sp, #20]
 8015684:	4607      	mov	r7, r0
 8015686:	2800      	cmp	r0, #0
 8015688:	d13e      	bne.n	8015708 <_dtoa_r+0x2d0>
 801568a:	4b1e      	ldr	r3, [pc, #120]	@ (8015704 <_dtoa_r+0x2cc>)
 801568c:	4602      	mov	r2, r0
 801568e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015692:	e6ea      	b.n	801546a <_dtoa_r+0x32>
 8015694:	2200      	movs	r2, #0
 8015696:	e7e1      	b.n	801565c <_dtoa_r+0x224>
 8015698:	2200      	movs	r2, #0
 801569a:	e7d3      	b.n	8015644 <_dtoa_r+0x20c>
 801569c:	2401      	movs	r4, #1
 801569e:	2200      	movs	r2, #0
 80156a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80156a4:	f04f 3bff 	mov.w	fp, #4294967295
 80156a8:	2100      	movs	r1, #0
 80156aa:	46da      	mov	sl, fp
 80156ac:	2212      	movs	r2, #18
 80156ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80156b0:	e7da      	b.n	8015668 <_dtoa_r+0x230>
 80156b2:	2201      	movs	r2, #1
 80156b4:	9208      	str	r2, [sp, #32]
 80156b6:	e7f5      	b.n	80156a4 <_dtoa_r+0x26c>
 80156b8:	f04f 0b01 	mov.w	fp, #1
 80156bc:	46da      	mov	sl, fp
 80156be:	465a      	mov	r2, fp
 80156c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80156c4:	e7d0      	b.n	8015668 <_dtoa_r+0x230>
 80156c6:	3101      	adds	r1, #1
 80156c8:	0040      	lsls	r0, r0, #1
 80156ca:	e7d1      	b.n	8015670 <_dtoa_r+0x238>
 80156cc:	f3af 8000 	nop.w
 80156d0:	636f4361 	.word	0x636f4361
 80156d4:	3fd287a7 	.word	0x3fd287a7
 80156d8:	8b60c8b3 	.word	0x8b60c8b3
 80156dc:	3fc68a28 	.word	0x3fc68a28
 80156e0:	509f79fb 	.word	0x509f79fb
 80156e4:	3fd34413 	.word	0x3fd34413
 80156e8:	08017fc3 	.word	0x08017fc3
 80156ec:	08017fda 	.word	0x08017fda
 80156f0:	7ff00000 	.word	0x7ff00000
 80156f4:	08017fbf 	.word	0x08017fbf
 80156f8:	08017f8b 	.word	0x08017f8b
 80156fc:	08017f8a 	.word	0x08017f8a
 8015700:	080181d8 	.word	0x080181d8
 8015704:	08018032 	.word	0x08018032
 8015708:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801570c:	f1ba 0f0e 	cmp.w	sl, #14
 8015710:	6010      	str	r0, [r2, #0]
 8015712:	d86e      	bhi.n	80157f2 <_dtoa_r+0x3ba>
 8015714:	2c00      	cmp	r4, #0
 8015716:	d06c      	beq.n	80157f2 <_dtoa_r+0x3ba>
 8015718:	f1b8 0f00 	cmp.w	r8, #0
 801571c:	f340 80b4 	ble.w	8015888 <_dtoa_r+0x450>
 8015720:	4ac8      	ldr	r2, [pc, #800]	@ (8015a44 <_dtoa_r+0x60c>)
 8015722:	f008 010f 	and.w	r1, r8, #15
 8015726:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801572a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801572e:	ed92 7b00 	vldr	d7, [r2]
 8015732:	ea4f 1128 	mov.w	r1, r8, asr #4
 8015736:	f000 809b 	beq.w	8015870 <_dtoa_r+0x438>
 801573a:	4ac3      	ldr	r2, [pc, #780]	@ (8015a48 <_dtoa_r+0x610>)
 801573c:	ed92 6b08 	vldr	d6, [r2, #32]
 8015740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015744:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015748:	f001 010f 	and.w	r1, r1, #15
 801574c:	2203      	movs	r2, #3
 801574e:	48be      	ldr	r0, [pc, #760]	@ (8015a48 <_dtoa_r+0x610>)
 8015750:	2900      	cmp	r1, #0
 8015752:	f040 808f 	bne.w	8015874 <_dtoa_r+0x43c>
 8015756:	ed9d 6b02 	vldr	d6, [sp, #8]
 801575a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801575e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015768:	2900      	cmp	r1, #0
 801576a:	f000 80b3 	beq.w	80158d4 <_dtoa_r+0x49c>
 801576e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015772:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801577a:	f140 80ab 	bpl.w	80158d4 <_dtoa_r+0x49c>
 801577e:	f1ba 0f00 	cmp.w	sl, #0
 8015782:	f000 80a7 	beq.w	80158d4 <_dtoa_r+0x49c>
 8015786:	f1bb 0f00 	cmp.w	fp, #0
 801578a:	dd30      	ble.n	80157ee <_dtoa_r+0x3b6>
 801578c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015790:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015798:	f108 31ff 	add.w	r1, r8, #4294967295
 801579c:	9105      	str	r1, [sp, #20]
 801579e:	3201      	adds	r2, #1
 80157a0:	465c      	mov	r4, fp
 80157a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80157a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80157aa:	ee07 2a90 	vmov	s15, r2
 80157ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80157b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80157b6:	ee15 2a90 	vmov	r2, s11
 80157ba:	ec51 0b15 	vmov	r0, r1, d5
 80157be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80157c2:	2c00      	cmp	r4, #0
 80157c4:	f040 808a 	bne.w	80158dc <_dtoa_r+0x4a4>
 80157c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80157cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80157d0:	ec41 0b17 	vmov	d7, r0, r1
 80157d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80157d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157dc:	f300 826a 	bgt.w	8015cb4 <_dtoa_r+0x87c>
 80157e0:	eeb1 7b47 	vneg.f64	d7, d7
 80157e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80157e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ec:	d423      	bmi.n	8015836 <_dtoa_r+0x3fe>
 80157ee:	ed8d 8b02 	vstr	d8, [sp, #8]
 80157f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80157f4:	2a00      	cmp	r2, #0
 80157f6:	f2c0 8129 	blt.w	8015a4c <_dtoa_r+0x614>
 80157fa:	f1b8 0f0e 	cmp.w	r8, #14
 80157fe:	f300 8125 	bgt.w	8015a4c <_dtoa_r+0x614>
 8015802:	4b90      	ldr	r3, [pc, #576]	@ (8015a44 <_dtoa_r+0x60c>)
 8015804:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015808:	ed93 6b00 	vldr	d6, [r3]
 801580c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801580e:	2b00      	cmp	r3, #0
 8015810:	f280 80c8 	bge.w	80159a4 <_dtoa_r+0x56c>
 8015814:	f1ba 0f00 	cmp.w	sl, #0
 8015818:	f300 80c4 	bgt.w	80159a4 <_dtoa_r+0x56c>
 801581c:	d10b      	bne.n	8015836 <_dtoa_r+0x3fe>
 801581e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8015822:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015826:	ed9d 7b02 	vldr	d7, [sp, #8]
 801582a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015832:	f2c0 823c 	blt.w	8015cae <_dtoa_r+0x876>
 8015836:	2400      	movs	r4, #0
 8015838:	4625      	mov	r5, r4
 801583a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801583c:	43db      	mvns	r3, r3
 801583e:	9305      	str	r3, [sp, #20]
 8015840:	463e      	mov	r6, r7
 8015842:	f04f 0800 	mov.w	r8, #0
 8015846:	4621      	mov	r1, r4
 8015848:	4648      	mov	r0, r9
 801584a:	f000 ffdf 	bl	801680c <_Bfree>
 801584e:	2d00      	cmp	r5, #0
 8015850:	f000 80a2 	beq.w	8015998 <_dtoa_r+0x560>
 8015854:	f1b8 0f00 	cmp.w	r8, #0
 8015858:	d005      	beq.n	8015866 <_dtoa_r+0x42e>
 801585a:	45a8      	cmp	r8, r5
 801585c:	d003      	beq.n	8015866 <_dtoa_r+0x42e>
 801585e:	4641      	mov	r1, r8
 8015860:	4648      	mov	r0, r9
 8015862:	f000 ffd3 	bl	801680c <_Bfree>
 8015866:	4629      	mov	r1, r5
 8015868:	4648      	mov	r0, r9
 801586a:	f000 ffcf 	bl	801680c <_Bfree>
 801586e:	e093      	b.n	8015998 <_dtoa_r+0x560>
 8015870:	2202      	movs	r2, #2
 8015872:	e76c      	b.n	801574e <_dtoa_r+0x316>
 8015874:	07cc      	lsls	r4, r1, #31
 8015876:	d504      	bpl.n	8015882 <_dtoa_r+0x44a>
 8015878:	ed90 6b00 	vldr	d6, [r0]
 801587c:	3201      	adds	r2, #1
 801587e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015882:	1049      	asrs	r1, r1, #1
 8015884:	3008      	adds	r0, #8
 8015886:	e763      	b.n	8015750 <_dtoa_r+0x318>
 8015888:	d022      	beq.n	80158d0 <_dtoa_r+0x498>
 801588a:	f1c8 0100 	rsb	r1, r8, #0
 801588e:	4a6d      	ldr	r2, [pc, #436]	@ (8015a44 <_dtoa_r+0x60c>)
 8015890:	f001 000f 	and.w	r0, r1, #15
 8015894:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015898:	ed92 7b00 	vldr	d7, [r2]
 801589c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80158a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158a4:	4868      	ldr	r0, [pc, #416]	@ (8015a48 <_dtoa_r+0x610>)
 80158a6:	1109      	asrs	r1, r1, #4
 80158a8:	2400      	movs	r4, #0
 80158aa:	2202      	movs	r2, #2
 80158ac:	b929      	cbnz	r1, 80158ba <_dtoa_r+0x482>
 80158ae:	2c00      	cmp	r4, #0
 80158b0:	f43f af57 	beq.w	8015762 <_dtoa_r+0x32a>
 80158b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158b8:	e753      	b.n	8015762 <_dtoa_r+0x32a>
 80158ba:	07ce      	lsls	r6, r1, #31
 80158bc:	d505      	bpl.n	80158ca <_dtoa_r+0x492>
 80158be:	ed90 6b00 	vldr	d6, [r0]
 80158c2:	3201      	adds	r2, #1
 80158c4:	2401      	movs	r4, #1
 80158c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80158ca:	1049      	asrs	r1, r1, #1
 80158cc:	3008      	adds	r0, #8
 80158ce:	e7ed      	b.n	80158ac <_dtoa_r+0x474>
 80158d0:	2202      	movs	r2, #2
 80158d2:	e746      	b.n	8015762 <_dtoa_r+0x32a>
 80158d4:	f8cd 8014 	str.w	r8, [sp, #20]
 80158d8:	4654      	mov	r4, sl
 80158da:	e762      	b.n	80157a2 <_dtoa_r+0x36a>
 80158dc:	4a59      	ldr	r2, [pc, #356]	@ (8015a44 <_dtoa_r+0x60c>)
 80158de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80158e2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80158e6:	9a08      	ldr	r2, [sp, #32]
 80158e8:	ec41 0b17 	vmov	d7, r0, r1
 80158ec:	443c      	add	r4, r7
 80158ee:	b34a      	cbz	r2, 8015944 <_dtoa_r+0x50c>
 80158f0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80158f4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80158f8:	463e      	mov	r6, r7
 80158fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80158fe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015902:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015906:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801590a:	ee14 2a90 	vmov	r2, s9
 801590e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015912:	3230      	adds	r2, #48	@ 0x30
 8015914:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015918:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015920:	f806 2b01 	strb.w	r2, [r6], #1
 8015924:	d438      	bmi.n	8015998 <_dtoa_r+0x560>
 8015926:	ee32 5b46 	vsub.f64	d5, d2, d6
 801592a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015932:	d46e      	bmi.n	8015a12 <_dtoa_r+0x5da>
 8015934:	42a6      	cmp	r6, r4
 8015936:	f43f af5a 	beq.w	80157ee <_dtoa_r+0x3b6>
 801593a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801593e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015942:	e7e0      	b.n	8015906 <_dtoa_r+0x4ce>
 8015944:	4621      	mov	r1, r4
 8015946:	463e      	mov	r6, r7
 8015948:	ee27 7b04 	vmul.f64	d7, d7, d4
 801594c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015950:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015954:	ee14 2a90 	vmov	r2, s9
 8015958:	3230      	adds	r2, #48	@ 0x30
 801595a:	f806 2b01 	strb.w	r2, [r6], #1
 801595e:	42a6      	cmp	r6, r4
 8015960:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015964:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015968:	d119      	bne.n	801599e <_dtoa_r+0x566>
 801596a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801596e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015972:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597a:	dc4a      	bgt.n	8015a12 <_dtoa_r+0x5da>
 801597c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015980:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015988:	f57f af31 	bpl.w	80157ee <_dtoa_r+0x3b6>
 801598c:	460e      	mov	r6, r1
 801598e:	3901      	subs	r1, #1
 8015990:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015994:	2b30      	cmp	r3, #48	@ 0x30
 8015996:	d0f9      	beq.n	801598c <_dtoa_r+0x554>
 8015998:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801599c:	e027      	b.n	80159ee <_dtoa_r+0x5b6>
 801599e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80159a2:	e7d5      	b.n	8015950 <_dtoa_r+0x518>
 80159a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80159a8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80159ac:	463e      	mov	r6, r7
 80159ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80159b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80159b6:	ee15 3a10 	vmov	r3, s10
 80159ba:	3330      	adds	r3, #48	@ 0x30
 80159bc:	f806 3b01 	strb.w	r3, [r6], #1
 80159c0:	1bf3      	subs	r3, r6, r7
 80159c2:	459a      	cmp	sl, r3
 80159c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80159c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80159cc:	d132      	bne.n	8015a34 <_dtoa_r+0x5fc>
 80159ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80159d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80159d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159da:	dc18      	bgt.n	8015a0e <_dtoa_r+0x5d6>
 80159dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80159e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e4:	d103      	bne.n	80159ee <_dtoa_r+0x5b6>
 80159e6:	ee15 3a10 	vmov	r3, s10
 80159ea:	07db      	lsls	r3, r3, #31
 80159ec:	d40f      	bmi.n	8015a0e <_dtoa_r+0x5d6>
 80159ee:	9901      	ldr	r1, [sp, #4]
 80159f0:	4648      	mov	r0, r9
 80159f2:	f000 ff0b 	bl	801680c <_Bfree>
 80159f6:	2300      	movs	r3, #0
 80159f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80159fa:	7033      	strb	r3, [r6, #0]
 80159fc:	f108 0301 	add.w	r3, r8, #1
 8015a00:	6013      	str	r3, [r2, #0]
 8015a02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	f000 824b 	beq.w	8015ea0 <_dtoa_r+0xa68>
 8015a0a:	601e      	str	r6, [r3, #0]
 8015a0c:	e248      	b.n	8015ea0 <_dtoa_r+0xa68>
 8015a0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015a12:	4633      	mov	r3, r6
 8015a14:	461e      	mov	r6, r3
 8015a16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a1a:	2a39      	cmp	r2, #57	@ 0x39
 8015a1c:	d106      	bne.n	8015a2c <_dtoa_r+0x5f4>
 8015a1e:	429f      	cmp	r7, r3
 8015a20:	d1f8      	bne.n	8015a14 <_dtoa_r+0x5dc>
 8015a22:	9a05      	ldr	r2, [sp, #20]
 8015a24:	3201      	adds	r2, #1
 8015a26:	9205      	str	r2, [sp, #20]
 8015a28:	2230      	movs	r2, #48	@ 0x30
 8015a2a:	703a      	strb	r2, [r7, #0]
 8015a2c:	781a      	ldrb	r2, [r3, #0]
 8015a2e:	3201      	adds	r2, #1
 8015a30:	701a      	strb	r2, [r3, #0]
 8015a32:	e7b1      	b.n	8015998 <_dtoa_r+0x560>
 8015a34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015a38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a40:	d1b5      	bne.n	80159ae <_dtoa_r+0x576>
 8015a42:	e7d4      	b.n	80159ee <_dtoa_r+0x5b6>
 8015a44:	080181d8 	.word	0x080181d8
 8015a48:	080181b0 	.word	0x080181b0
 8015a4c:	9908      	ldr	r1, [sp, #32]
 8015a4e:	2900      	cmp	r1, #0
 8015a50:	f000 80e9 	beq.w	8015c26 <_dtoa_r+0x7ee>
 8015a54:	9907      	ldr	r1, [sp, #28]
 8015a56:	2901      	cmp	r1, #1
 8015a58:	f300 80cb 	bgt.w	8015bf2 <_dtoa_r+0x7ba>
 8015a5c:	2d00      	cmp	r5, #0
 8015a5e:	f000 80c4 	beq.w	8015bea <_dtoa_r+0x7b2>
 8015a62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015a66:	9e04      	ldr	r6, [sp, #16]
 8015a68:	461c      	mov	r4, r3
 8015a6a:	9305      	str	r3, [sp, #20]
 8015a6c:	9b04      	ldr	r3, [sp, #16]
 8015a6e:	4413      	add	r3, r2
 8015a70:	9304      	str	r3, [sp, #16]
 8015a72:	9b06      	ldr	r3, [sp, #24]
 8015a74:	2101      	movs	r1, #1
 8015a76:	4413      	add	r3, r2
 8015a78:	4648      	mov	r0, r9
 8015a7a:	9306      	str	r3, [sp, #24]
 8015a7c:	f000 ffc4 	bl	8016a08 <__i2b>
 8015a80:	9b05      	ldr	r3, [sp, #20]
 8015a82:	4605      	mov	r5, r0
 8015a84:	b166      	cbz	r6, 8015aa0 <_dtoa_r+0x668>
 8015a86:	9a06      	ldr	r2, [sp, #24]
 8015a88:	2a00      	cmp	r2, #0
 8015a8a:	dd09      	ble.n	8015aa0 <_dtoa_r+0x668>
 8015a8c:	42b2      	cmp	r2, r6
 8015a8e:	9904      	ldr	r1, [sp, #16]
 8015a90:	bfa8      	it	ge
 8015a92:	4632      	movge	r2, r6
 8015a94:	1a89      	subs	r1, r1, r2
 8015a96:	9104      	str	r1, [sp, #16]
 8015a98:	9906      	ldr	r1, [sp, #24]
 8015a9a:	1ab6      	subs	r6, r6, r2
 8015a9c:	1a8a      	subs	r2, r1, r2
 8015a9e:	9206      	str	r2, [sp, #24]
 8015aa0:	b30b      	cbz	r3, 8015ae6 <_dtoa_r+0x6ae>
 8015aa2:	9a08      	ldr	r2, [sp, #32]
 8015aa4:	2a00      	cmp	r2, #0
 8015aa6:	f000 80c5 	beq.w	8015c34 <_dtoa_r+0x7fc>
 8015aaa:	2c00      	cmp	r4, #0
 8015aac:	f000 80bf 	beq.w	8015c2e <_dtoa_r+0x7f6>
 8015ab0:	4629      	mov	r1, r5
 8015ab2:	4622      	mov	r2, r4
 8015ab4:	4648      	mov	r0, r9
 8015ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ab8:	f001 f85e 	bl	8016b78 <__pow5mult>
 8015abc:	9a01      	ldr	r2, [sp, #4]
 8015abe:	4601      	mov	r1, r0
 8015ac0:	4605      	mov	r5, r0
 8015ac2:	4648      	mov	r0, r9
 8015ac4:	f000 ffb6 	bl	8016a34 <__multiply>
 8015ac8:	9901      	ldr	r1, [sp, #4]
 8015aca:	9005      	str	r0, [sp, #20]
 8015acc:	4648      	mov	r0, r9
 8015ace:	f000 fe9d 	bl	801680c <_Bfree>
 8015ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ad4:	1b1b      	subs	r3, r3, r4
 8015ad6:	f000 80b0 	beq.w	8015c3a <_dtoa_r+0x802>
 8015ada:	9905      	ldr	r1, [sp, #20]
 8015adc:	461a      	mov	r2, r3
 8015ade:	4648      	mov	r0, r9
 8015ae0:	f001 f84a 	bl	8016b78 <__pow5mult>
 8015ae4:	9001      	str	r0, [sp, #4]
 8015ae6:	2101      	movs	r1, #1
 8015ae8:	4648      	mov	r0, r9
 8015aea:	f000 ff8d 	bl	8016a08 <__i2b>
 8015aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015af0:	4604      	mov	r4, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f000 81da 	beq.w	8015eac <_dtoa_r+0xa74>
 8015af8:	461a      	mov	r2, r3
 8015afa:	4601      	mov	r1, r0
 8015afc:	4648      	mov	r0, r9
 8015afe:	f001 f83b 	bl	8016b78 <__pow5mult>
 8015b02:	9b07      	ldr	r3, [sp, #28]
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	4604      	mov	r4, r0
 8015b08:	f300 80a0 	bgt.w	8015c4c <_dtoa_r+0x814>
 8015b0c:	9b02      	ldr	r3, [sp, #8]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	f040 8096 	bne.w	8015c40 <_dtoa_r+0x808>
 8015b14:	9b03      	ldr	r3, [sp, #12]
 8015b16:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015b1a:	2a00      	cmp	r2, #0
 8015b1c:	f040 8092 	bne.w	8015c44 <_dtoa_r+0x80c>
 8015b20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015b24:	0d12      	lsrs	r2, r2, #20
 8015b26:	0512      	lsls	r2, r2, #20
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	f000 808d 	beq.w	8015c48 <_dtoa_r+0x810>
 8015b2e:	9b04      	ldr	r3, [sp, #16]
 8015b30:	3301      	adds	r3, #1
 8015b32:	9304      	str	r3, [sp, #16]
 8015b34:	9b06      	ldr	r3, [sp, #24]
 8015b36:	3301      	adds	r3, #1
 8015b38:	9306      	str	r3, [sp, #24]
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f000 81b9 	beq.w	8015eb8 <_dtoa_r+0xa80>
 8015b46:	6922      	ldr	r2, [r4, #16]
 8015b48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015b4c:	6910      	ldr	r0, [r2, #16]
 8015b4e:	f000 ff0f 	bl	8016970 <__hi0bits>
 8015b52:	f1c0 0020 	rsb	r0, r0, #32
 8015b56:	9b06      	ldr	r3, [sp, #24]
 8015b58:	4418      	add	r0, r3
 8015b5a:	f010 001f 	ands.w	r0, r0, #31
 8015b5e:	f000 8081 	beq.w	8015c64 <_dtoa_r+0x82c>
 8015b62:	f1c0 0220 	rsb	r2, r0, #32
 8015b66:	2a04      	cmp	r2, #4
 8015b68:	dd73      	ble.n	8015c52 <_dtoa_r+0x81a>
 8015b6a:	9b04      	ldr	r3, [sp, #16]
 8015b6c:	f1c0 001c 	rsb	r0, r0, #28
 8015b70:	4403      	add	r3, r0
 8015b72:	9304      	str	r3, [sp, #16]
 8015b74:	9b06      	ldr	r3, [sp, #24]
 8015b76:	4406      	add	r6, r0
 8015b78:	4403      	add	r3, r0
 8015b7a:	9306      	str	r3, [sp, #24]
 8015b7c:	9b04      	ldr	r3, [sp, #16]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	dd05      	ble.n	8015b8e <_dtoa_r+0x756>
 8015b82:	9901      	ldr	r1, [sp, #4]
 8015b84:	461a      	mov	r2, r3
 8015b86:	4648      	mov	r0, r9
 8015b88:	f001 f850 	bl	8016c2c <__lshift>
 8015b8c:	9001      	str	r0, [sp, #4]
 8015b8e:	9b06      	ldr	r3, [sp, #24]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	dd05      	ble.n	8015ba0 <_dtoa_r+0x768>
 8015b94:	4621      	mov	r1, r4
 8015b96:	461a      	mov	r2, r3
 8015b98:	4648      	mov	r0, r9
 8015b9a:	f001 f847 	bl	8016c2c <__lshift>
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d060      	beq.n	8015c68 <_dtoa_r+0x830>
 8015ba6:	9801      	ldr	r0, [sp, #4]
 8015ba8:	4621      	mov	r1, r4
 8015baa:	f001 f8ab 	bl	8016d04 <__mcmp>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	da5a      	bge.n	8015c68 <_dtoa_r+0x830>
 8015bb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8015bb6:	9305      	str	r3, [sp, #20]
 8015bb8:	9901      	ldr	r1, [sp, #4]
 8015bba:	2300      	movs	r3, #0
 8015bbc:	220a      	movs	r2, #10
 8015bbe:	4648      	mov	r0, r9
 8015bc0:	f000 fe46 	bl	8016850 <__multadd>
 8015bc4:	9b08      	ldr	r3, [sp, #32]
 8015bc6:	9001      	str	r0, [sp, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	f000 8177 	beq.w	8015ebc <_dtoa_r+0xa84>
 8015bce:	4629      	mov	r1, r5
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	220a      	movs	r2, #10
 8015bd4:	4648      	mov	r0, r9
 8015bd6:	f000 fe3b 	bl	8016850 <__multadd>
 8015bda:	f1bb 0f00 	cmp.w	fp, #0
 8015bde:	4605      	mov	r5, r0
 8015be0:	dc6e      	bgt.n	8015cc0 <_dtoa_r+0x888>
 8015be2:	9b07      	ldr	r3, [sp, #28]
 8015be4:	2b02      	cmp	r3, #2
 8015be6:	dc48      	bgt.n	8015c7a <_dtoa_r+0x842>
 8015be8:	e06a      	b.n	8015cc0 <_dtoa_r+0x888>
 8015bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015bec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015bf0:	e739      	b.n	8015a66 <_dtoa_r+0x62e>
 8015bf2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015bf6:	42a3      	cmp	r3, r4
 8015bf8:	db07      	blt.n	8015c0a <_dtoa_r+0x7d2>
 8015bfa:	f1ba 0f00 	cmp.w	sl, #0
 8015bfe:	eba3 0404 	sub.w	r4, r3, r4
 8015c02:	db0b      	blt.n	8015c1c <_dtoa_r+0x7e4>
 8015c04:	9e04      	ldr	r6, [sp, #16]
 8015c06:	4652      	mov	r2, sl
 8015c08:	e72f      	b.n	8015a6a <_dtoa_r+0x632>
 8015c0a:	1ae2      	subs	r2, r4, r3
 8015c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c0e:	9e04      	ldr	r6, [sp, #16]
 8015c10:	4413      	add	r3, r2
 8015c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c14:	4652      	mov	r2, sl
 8015c16:	4623      	mov	r3, r4
 8015c18:	2400      	movs	r4, #0
 8015c1a:	e726      	b.n	8015a6a <_dtoa_r+0x632>
 8015c1c:	9a04      	ldr	r2, [sp, #16]
 8015c1e:	eba2 060a 	sub.w	r6, r2, sl
 8015c22:	2200      	movs	r2, #0
 8015c24:	e721      	b.n	8015a6a <_dtoa_r+0x632>
 8015c26:	9e04      	ldr	r6, [sp, #16]
 8015c28:	9d08      	ldr	r5, [sp, #32]
 8015c2a:	461c      	mov	r4, r3
 8015c2c:	e72a      	b.n	8015a84 <_dtoa_r+0x64c>
 8015c2e:	9a01      	ldr	r2, [sp, #4]
 8015c30:	9205      	str	r2, [sp, #20]
 8015c32:	e752      	b.n	8015ada <_dtoa_r+0x6a2>
 8015c34:	9901      	ldr	r1, [sp, #4]
 8015c36:	461a      	mov	r2, r3
 8015c38:	e751      	b.n	8015ade <_dtoa_r+0x6a6>
 8015c3a:	9b05      	ldr	r3, [sp, #20]
 8015c3c:	9301      	str	r3, [sp, #4]
 8015c3e:	e752      	b.n	8015ae6 <_dtoa_r+0x6ae>
 8015c40:	2300      	movs	r3, #0
 8015c42:	e77b      	b.n	8015b3c <_dtoa_r+0x704>
 8015c44:	9b02      	ldr	r3, [sp, #8]
 8015c46:	e779      	b.n	8015b3c <_dtoa_r+0x704>
 8015c48:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015c4a:	e778      	b.n	8015b3e <_dtoa_r+0x706>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015c50:	e779      	b.n	8015b46 <_dtoa_r+0x70e>
 8015c52:	d093      	beq.n	8015b7c <_dtoa_r+0x744>
 8015c54:	9b04      	ldr	r3, [sp, #16]
 8015c56:	321c      	adds	r2, #28
 8015c58:	4413      	add	r3, r2
 8015c5a:	9304      	str	r3, [sp, #16]
 8015c5c:	9b06      	ldr	r3, [sp, #24]
 8015c5e:	4416      	add	r6, r2
 8015c60:	4413      	add	r3, r2
 8015c62:	e78a      	b.n	8015b7a <_dtoa_r+0x742>
 8015c64:	4602      	mov	r2, r0
 8015c66:	e7f5      	b.n	8015c54 <_dtoa_r+0x81c>
 8015c68:	f1ba 0f00 	cmp.w	sl, #0
 8015c6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015c70:	46d3      	mov	fp, sl
 8015c72:	dc21      	bgt.n	8015cb8 <_dtoa_r+0x880>
 8015c74:	9b07      	ldr	r3, [sp, #28]
 8015c76:	2b02      	cmp	r3, #2
 8015c78:	dd1e      	ble.n	8015cb8 <_dtoa_r+0x880>
 8015c7a:	f1bb 0f00 	cmp.w	fp, #0
 8015c7e:	f47f addc 	bne.w	801583a <_dtoa_r+0x402>
 8015c82:	4621      	mov	r1, r4
 8015c84:	465b      	mov	r3, fp
 8015c86:	2205      	movs	r2, #5
 8015c88:	4648      	mov	r0, r9
 8015c8a:	f000 fde1 	bl	8016850 <__multadd>
 8015c8e:	4601      	mov	r1, r0
 8015c90:	4604      	mov	r4, r0
 8015c92:	9801      	ldr	r0, [sp, #4]
 8015c94:	f001 f836 	bl	8016d04 <__mcmp>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	f77f adce 	ble.w	801583a <_dtoa_r+0x402>
 8015c9e:	463e      	mov	r6, r7
 8015ca0:	2331      	movs	r3, #49	@ 0x31
 8015ca2:	f806 3b01 	strb.w	r3, [r6], #1
 8015ca6:	9b05      	ldr	r3, [sp, #20]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	9305      	str	r3, [sp, #20]
 8015cac:	e5c9      	b.n	8015842 <_dtoa_r+0x40a>
 8015cae:	f8cd 8014 	str.w	r8, [sp, #20]
 8015cb2:	4654      	mov	r4, sl
 8015cb4:	4625      	mov	r5, r4
 8015cb6:	e7f2      	b.n	8015c9e <_dtoa_r+0x866>
 8015cb8:	9b08      	ldr	r3, [sp, #32]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f000 8102 	beq.w	8015ec4 <_dtoa_r+0xa8c>
 8015cc0:	2e00      	cmp	r6, #0
 8015cc2:	dd05      	ble.n	8015cd0 <_dtoa_r+0x898>
 8015cc4:	4629      	mov	r1, r5
 8015cc6:	4632      	mov	r2, r6
 8015cc8:	4648      	mov	r0, r9
 8015cca:	f000 ffaf 	bl	8016c2c <__lshift>
 8015cce:	4605      	mov	r5, r0
 8015cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d058      	beq.n	8015d88 <_dtoa_r+0x950>
 8015cd6:	6869      	ldr	r1, [r5, #4]
 8015cd8:	4648      	mov	r0, r9
 8015cda:	f000 fd57 	bl	801678c <_Balloc>
 8015cde:	4606      	mov	r6, r0
 8015ce0:	b928      	cbnz	r0, 8015cee <_dtoa_r+0x8b6>
 8015ce2:	4b82      	ldr	r3, [pc, #520]	@ (8015eec <_dtoa_r+0xab4>)
 8015ce4:	4602      	mov	r2, r0
 8015ce6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015cea:	f7ff bbbe 	b.w	801546a <_dtoa_r+0x32>
 8015cee:	692a      	ldr	r2, [r5, #16]
 8015cf0:	3202      	adds	r2, #2
 8015cf2:	0092      	lsls	r2, r2, #2
 8015cf4:	f105 010c 	add.w	r1, r5, #12
 8015cf8:	300c      	adds	r0, #12
 8015cfa:	f7ff faf4 	bl	80152e6 <memcpy>
 8015cfe:	2201      	movs	r2, #1
 8015d00:	4631      	mov	r1, r6
 8015d02:	4648      	mov	r0, r9
 8015d04:	f000 ff92 	bl	8016c2c <__lshift>
 8015d08:	1c7b      	adds	r3, r7, #1
 8015d0a:	9304      	str	r3, [sp, #16]
 8015d0c:	eb07 030b 	add.w	r3, r7, fp
 8015d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d12:	9b02      	ldr	r3, [sp, #8]
 8015d14:	f003 0301 	and.w	r3, r3, #1
 8015d18:	46a8      	mov	r8, r5
 8015d1a:	9308      	str	r3, [sp, #32]
 8015d1c:	4605      	mov	r5, r0
 8015d1e:	9b04      	ldr	r3, [sp, #16]
 8015d20:	9801      	ldr	r0, [sp, #4]
 8015d22:	4621      	mov	r1, r4
 8015d24:	f103 3bff 	add.w	fp, r3, #4294967295
 8015d28:	f7ff fafc 	bl	8015324 <quorem>
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	9002      	str	r0, [sp, #8]
 8015d30:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015d34:	9801      	ldr	r0, [sp, #4]
 8015d36:	f000 ffe5 	bl	8016d04 <__mcmp>
 8015d3a:	462a      	mov	r2, r5
 8015d3c:	9006      	str	r0, [sp, #24]
 8015d3e:	4621      	mov	r1, r4
 8015d40:	4648      	mov	r0, r9
 8015d42:	f000 fffb 	bl	8016d3c <__mdiff>
 8015d46:	68c2      	ldr	r2, [r0, #12]
 8015d48:	4606      	mov	r6, r0
 8015d4a:	b9fa      	cbnz	r2, 8015d8c <_dtoa_r+0x954>
 8015d4c:	4601      	mov	r1, r0
 8015d4e:	9801      	ldr	r0, [sp, #4]
 8015d50:	f000 ffd8 	bl	8016d04 <__mcmp>
 8015d54:	4602      	mov	r2, r0
 8015d56:	4631      	mov	r1, r6
 8015d58:	4648      	mov	r0, r9
 8015d5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8015d5c:	f000 fd56 	bl	801680c <_Bfree>
 8015d60:	9b07      	ldr	r3, [sp, #28]
 8015d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015d64:	9e04      	ldr	r6, [sp, #16]
 8015d66:	ea42 0103 	orr.w	r1, r2, r3
 8015d6a:	9b08      	ldr	r3, [sp, #32]
 8015d6c:	4319      	orrs	r1, r3
 8015d6e:	d10f      	bne.n	8015d90 <_dtoa_r+0x958>
 8015d70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015d74:	d028      	beq.n	8015dc8 <_dtoa_r+0x990>
 8015d76:	9b06      	ldr	r3, [sp, #24]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	dd02      	ble.n	8015d82 <_dtoa_r+0x94a>
 8015d7c:	9b02      	ldr	r3, [sp, #8]
 8015d7e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015d82:	f88b a000 	strb.w	sl, [fp]
 8015d86:	e55e      	b.n	8015846 <_dtoa_r+0x40e>
 8015d88:	4628      	mov	r0, r5
 8015d8a:	e7bd      	b.n	8015d08 <_dtoa_r+0x8d0>
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	e7e2      	b.n	8015d56 <_dtoa_r+0x91e>
 8015d90:	9b06      	ldr	r3, [sp, #24]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	db04      	blt.n	8015da0 <_dtoa_r+0x968>
 8015d96:	9907      	ldr	r1, [sp, #28]
 8015d98:	430b      	orrs	r3, r1
 8015d9a:	9908      	ldr	r1, [sp, #32]
 8015d9c:	430b      	orrs	r3, r1
 8015d9e:	d120      	bne.n	8015de2 <_dtoa_r+0x9aa>
 8015da0:	2a00      	cmp	r2, #0
 8015da2:	ddee      	ble.n	8015d82 <_dtoa_r+0x94a>
 8015da4:	9901      	ldr	r1, [sp, #4]
 8015da6:	2201      	movs	r2, #1
 8015da8:	4648      	mov	r0, r9
 8015daa:	f000 ff3f 	bl	8016c2c <__lshift>
 8015dae:	4621      	mov	r1, r4
 8015db0:	9001      	str	r0, [sp, #4]
 8015db2:	f000 ffa7 	bl	8016d04 <__mcmp>
 8015db6:	2800      	cmp	r0, #0
 8015db8:	dc03      	bgt.n	8015dc2 <_dtoa_r+0x98a>
 8015dba:	d1e2      	bne.n	8015d82 <_dtoa_r+0x94a>
 8015dbc:	f01a 0f01 	tst.w	sl, #1
 8015dc0:	d0df      	beq.n	8015d82 <_dtoa_r+0x94a>
 8015dc2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015dc6:	d1d9      	bne.n	8015d7c <_dtoa_r+0x944>
 8015dc8:	2339      	movs	r3, #57	@ 0x39
 8015dca:	f88b 3000 	strb.w	r3, [fp]
 8015dce:	4633      	mov	r3, r6
 8015dd0:	461e      	mov	r6, r3
 8015dd2:	3b01      	subs	r3, #1
 8015dd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015dd8:	2a39      	cmp	r2, #57	@ 0x39
 8015dda:	d052      	beq.n	8015e82 <_dtoa_r+0xa4a>
 8015ddc:	3201      	adds	r2, #1
 8015dde:	701a      	strb	r2, [r3, #0]
 8015de0:	e531      	b.n	8015846 <_dtoa_r+0x40e>
 8015de2:	2a00      	cmp	r2, #0
 8015de4:	dd07      	ble.n	8015df6 <_dtoa_r+0x9be>
 8015de6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015dea:	d0ed      	beq.n	8015dc8 <_dtoa_r+0x990>
 8015dec:	f10a 0301 	add.w	r3, sl, #1
 8015df0:	f88b 3000 	strb.w	r3, [fp]
 8015df4:	e527      	b.n	8015846 <_dtoa_r+0x40e>
 8015df6:	9b04      	ldr	r3, [sp, #16]
 8015df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015dfa:	f803 ac01 	strb.w	sl, [r3, #-1]
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d029      	beq.n	8015e56 <_dtoa_r+0xa1e>
 8015e02:	9901      	ldr	r1, [sp, #4]
 8015e04:	2300      	movs	r3, #0
 8015e06:	220a      	movs	r2, #10
 8015e08:	4648      	mov	r0, r9
 8015e0a:	f000 fd21 	bl	8016850 <__multadd>
 8015e0e:	45a8      	cmp	r8, r5
 8015e10:	9001      	str	r0, [sp, #4]
 8015e12:	f04f 0300 	mov.w	r3, #0
 8015e16:	f04f 020a 	mov.w	r2, #10
 8015e1a:	4641      	mov	r1, r8
 8015e1c:	4648      	mov	r0, r9
 8015e1e:	d107      	bne.n	8015e30 <_dtoa_r+0x9f8>
 8015e20:	f000 fd16 	bl	8016850 <__multadd>
 8015e24:	4680      	mov	r8, r0
 8015e26:	4605      	mov	r5, r0
 8015e28:	9b04      	ldr	r3, [sp, #16]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	9304      	str	r3, [sp, #16]
 8015e2e:	e776      	b.n	8015d1e <_dtoa_r+0x8e6>
 8015e30:	f000 fd0e 	bl	8016850 <__multadd>
 8015e34:	4629      	mov	r1, r5
 8015e36:	4680      	mov	r8, r0
 8015e38:	2300      	movs	r3, #0
 8015e3a:	220a      	movs	r2, #10
 8015e3c:	4648      	mov	r0, r9
 8015e3e:	f000 fd07 	bl	8016850 <__multadd>
 8015e42:	4605      	mov	r5, r0
 8015e44:	e7f0      	b.n	8015e28 <_dtoa_r+0x9f0>
 8015e46:	f1bb 0f00 	cmp.w	fp, #0
 8015e4a:	bfcc      	ite	gt
 8015e4c:	465e      	movgt	r6, fp
 8015e4e:	2601      	movle	r6, #1
 8015e50:	443e      	add	r6, r7
 8015e52:	f04f 0800 	mov.w	r8, #0
 8015e56:	9901      	ldr	r1, [sp, #4]
 8015e58:	2201      	movs	r2, #1
 8015e5a:	4648      	mov	r0, r9
 8015e5c:	f000 fee6 	bl	8016c2c <__lshift>
 8015e60:	4621      	mov	r1, r4
 8015e62:	9001      	str	r0, [sp, #4]
 8015e64:	f000 ff4e 	bl	8016d04 <__mcmp>
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	dcb0      	bgt.n	8015dce <_dtoa_r+0x996>
 8015e6c:	d102      	bne.n	8015e74 <_dtoa_r+0xa3c>
 8015e6e:	f01a 0f01 	tst.w	sl, #1
 8015e72:	d1ac      	bne.n	8015dce <_dtoa_r+0x996>
 8015e74:	4633      	mov	r3, r6
 8015e76:	461e      	mov	r6, r3
 8015e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e7c:	2a30      	cmp	r2, #48	@ 0x30
 8015e7e:	d0fa      	beq.n	8015e76 <_dtoa_r+0xa3e>
 8015e80:	e4e1      	b.n	8015846 <_dtoa_r+0x40e>
 8015e82:	429f      	cmp	r7, r3
 8015e84:	d1a4      	bne.n	8015dd0 <_dtoa_r+0x998>
 8015e86:	9b05      	ldr	r3, [sp, #20]
 8015e88:	3301      	adds	r3, #1
 8015e8a:	9305      	str	r3, [sp, #20]
 8015e8c:	2331      	movs	r3, #49	@ 0x31
 8015e8e:	703b      	strb	r3, [r7, #0]
 8015e90:	e4d9      	b.n	8015846 <_dtoa_r+0x40e>
 8015e92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015e94:	4f16      	ldr	r7, [pc, #88]	@ (8015ef0 <_dtoa_r+0xab8>)
 8015e96:	b11b      	cbz	r3, 8015ea0 <_dtoa_r+0xa68>
 8015e98:	f107 0308 	add.w	r3, r7, #8
 8015e9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015e9e:	6013      	str	r3, [r2, #0]
 8015ea0:	4638      	mov	r0, r7
 8015ea2:	b011      	add	sp, #68	@ 0x44
 8015ea4:	ecbd 8b02 	vpop	{d8}
 8015ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eac:	9b07      	ldr	r3, [sp, #28]
 8015eae:	2b01      	cmp	r3, #1
 8015eb0:	f77f ae2c 	ble.w	8015b0c <_dtoa_r+0x6d4>
 8015eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015eb8:	2001      	movs	r0, #1
 8015eba:	e64c      	b.n	8015b56 <_dtoa_r+0x71e>
 8015ebc:	f1bb 0f00 	cmp.w	fp, #0
 8015ec0:	f77f aed8 	ble.w	8015c74 <_dtoa_r+0x83c>
 8015ec4:	463e      	mov	r6, r7
 8015ec6:	9801      	ldr	r0, [sp, #4]
 8015ec8:	4621      	mov	r1, r4
 8015eca:	f7ff fa2b 	bl	8015324 <quorem>
 8015ece:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015ed2:	f806 ab01 	strb.w	sl, [r6], #1
 8015ed6:	1bf2      	subs	r2, r6, r7
 8015ed8:	4593      	cmp	fp, r2
 8015eda:	ddb4      	ble.n	8015e46 <_dtoa_r+0xa0e>
 8015edc:	9901      	ldr	r1, [sp, #4]
 8015ede:	2300      	movs	r3, #0
 8015ee0:	220a      	movs	r2, #10
 8015ee2:	4648      	mov	r0, r9
 8015ee4:	f000 fcb4 	bl	8016850 <__multadd>
 8015ee8:	9001      	str	r0, [sp, #4]
 8015eea:	e7ec      	b.n	8015ec6 <_dtoa_r+0xa8e>
 8015eec:	08018032 	.word	0x08018032
 8015ef0:	08017fb6 	.word	0x08017fb6

08015ef4 <_free_r>:
 8015ef4:	b538      	push	{r3, r4, r5, lr}
 8015ef6:	4605      	mov	r5, r0
 8015ef8:	2900      	cmp	r1, #0
 8015efa:	d041      	beq.n	8015f80 <_free_r+0x8c>
 8015efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f00:	1f0c      	subs	r4, r1, #4
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	bfb8      	it	lt
 8015f06:	18e4      	addlt	r4, r4, r3
 8015f08:	f000 fc34 	bl	8016774 <__malloc_lock>
 8015f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8015f84 <_free_r+0x90>)
 8015f0e:	6813      	ldr	r3, [r2, #0]
 8015f10:	b933      	cbnz	r3, 8015f20 <_free_r+0x2c>
 8015f12:	6063      	str	r3, [r4, #4]
 8015f14:	6014      	str	r4, [r2, #0]
 8015f16:	4628      	mov	r0, r5
 8015f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f1c:	f000 bc30 	b.w	8016780 <__malloc_unlock>
 8015f20:	42a3      	cmp	r3, r4
 8015f22:	d908      	bls.n	8015f36 <_free_r+0x42>
 8015f24:	6820      	ldr	r0, [r4, #0]
 8015f26:	1821      	adds	r1, r4, r0
 8015f28:	428b      	cmp	r3, r1
 8015f2a:	bf01      	itttt	eq
 8015f2c:	6819      	ldreq	r1, [r3, #0]
 8015f2e:	685b      	ldreq	r3, [r3, #4]
 8015f30:	1809      	addeq	r1, r1, r0
 8015f32:	6021      	streq	r1, [r4, #0]
 8015f34:	e7ed      	b.n	8015f12 <_free_r+0x1e>
 8015f36:	461a      	mov	r2, r3
 8015f38:	685b      	ldr	r3, [r3, #4]
 8015f3a:	b10b      	cbz	r3, 8015f40 <_free_r+0x4c>
 8015f3c:	42a3      	cmp	r3, r4
 8015f3e:	d9fa      	bls.n	8015f36 <_free_r+0x42>
 8015f40:	6811      	ldr	r1, [r2, #0]
 8015f42:	1850      	adds	r0, r2, r1
 8015f44:	42a0      	cmp	r0, r4
 8015f46:	d10b      	bne.n	8015f60 <_free_r+0x6c>
 8015f48:	6820      	ldr	r0, [r4, #0]
 8015f4a:	4401      	add	r1, r0
 8015f4c:	1850      	adds	r0, r2, r1
 8015f4e:	4283      	cmp	r3, r0
 8015f50:	6011      	str	r1, [r2, #0]
 8015f52:	d1e0      	bne.n	8015f16 <_free_r+0x22>
 8015f54:	6818      	ldr	r0, [r3, #0]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	6053      	str	r3, [r2, #4]
 8015f5a:	4408      	add	r0, r1
 8015f5c:	6010      	str	r0, [r2, #0]
 8015f5e:	e7da      	b.n	8015f16 <_free_r+0x22>
 8015f60:	d902      	bls.n	8015f68 <_free_r+0x74>
 8015f62:	230c      	movs	r3, #12
 8015f64:	602b      	str	r3, [r5, #0]
 8015f66:	e7d6      	b.n	8015f16 <_free_r+0x22>
 8015f68:	6820      	ldr	r0, [r4, #0]
 8015f6a:	1821      	adds	r1, r4, r0
 8015f6c:	428b      	cmp	r3, r1
 8015f6e:	bf04      	itt	eq
 8015f70:	6819      	ldreq	r1, [r3, #0]
 8015f72:	685b      	ldreq	r3, [r3, #4]
 8015f74:	6063      	str	r3, [r4, #4]
 8015f76:	bf04      	itt	eq
 8015f78:	1809      	addeq	r1, r1, r0
 8015f7a:	6021      	streq	r1, [r4, #0]
 8015f7c:	6054      	str	r4, [r2, #4]
 8015f7e:	e7ca      	b.n	8015f16 <_free_r+0x22>
 8015f80:	bd38      	pop	{r3, r4, r5, pc}
 8015f82:	bf00      	nop
 8015f84:	240075dc 	.word	0x240075dc

08015f88 <rshift>:
 8015f88:	6903      	ldr	r3, [r0, #16]
 8015f8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015f8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015f96:	f100 0414 	add.w	r4, r0, #20
 8015f9a:	dd45      	ble.n	8016028 <rshift+0xa0>
 8015f9c:	f011 011f 	ands.w	r1, r1, #31
 8015fa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015fa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015fa8:	d10c      	bne.n	8015fc4 <rshift+0x3c>
 8015faa:	f100 0710 	add.w	r7, r0, #16
 8015fae:	4629      	mov	r1, r5
 8015fb0:	42b1      	cmp	r1, r6
 8015fb2:	d334      	bcc.n	801601e <rshift+0x96>
 8015fb4:	1a9b      	subs	r3, r3, r2
 8015fb6:	009b      	lsls	r3, r3, #2
 8015fb8:	1eea      	subs	r2, r5, #3
 8015fba:	4296      	cmp	r6, r2
 8015fbc:	bf38      	it	cc
 8015fbe:	2300      	movcc	r3, #0
 8015fc0:	4423      	add	r3, r4
 8015fc2:	e015      	b.n	8015ff0 <rshift+0x68>
 8015fc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015fc8:	f1c1 0820 	rsb	r8, r1, #32
 8015fcc:	40cf      	lsrs	r7, r1
 8015fce:	f105 0e04 	add.w	lr, r5, #4
 8015fd2:	46a1      	mov	r9, r4
 8015fd4:	4576      	cmp	r6, lr
 8015fd6:	46f4      	mov	ip, lr
 8015fd8:	d815      	bhi.n	8016006 <rshift+0x7e>
 8015fda:	1a9a      	subs	r2, r3, r2
 8015fdc:	0092      	lsls	r2, r2, #2
 8015fde:	3a04      	subs	r2, #4
 8015fe0:	3501      	adds	r5, #1
 8015fe2:	42ae      	cmp	r6, r5
 8015fe4:	bf38      	it	cc
 8015fe6:	2200      	movcc	r2, #0
 8015fe8:	18a3      	adds	r3, r4, r2
 8015fea:	50a7      	str	r7, [r4, r2]
 8015fec:	b107      	cbz	r7, 8015ff0 <rshift+0x68>
 8015fee:	3304      	adds	r3, #4
 8015ff0:	1b1a      	subs	r2, r3, r4
 8015ff2:	42a3      	cmp	r3, r4
 8015ff4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015ff8:	bf08      	it	eq
 8015ffa:	2300      	moveq	r3, #0
 8015ffc:	6102      	str	r2, [r0, #16]
 8015ffe:	bf08      	it	eq
 8016000:	6143      	streq	r3, [r0, #20]
 8016002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016006:	f8dc c000 	ldr.w	ip, [ip]
 801600a:	fa0c fc08 	lsl.w	ip, ip, r8
 801600e:	ea4c 0707 	orr.w	r7, ip, r7
 8016012:	f849 7b04 	str.w	r7, [r9], #4
 8016016:	f85e 7b04 	ldr.w	r7, [lr], #4
 801601a:	40cf      	lsrs	r7, r1
 801601c:	e7da      	b.n	8015fd4 <rshift+0x4c>
 801601e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016022:	f847 cf04 	str.w	ip, [r7, #4]!
 8016026:	e7c3      	b.n	8015fb0 <rshift+0x28>
 8016028:	4623      	mov	r3, r4
 801602a:	e7e1      	b.n	8015ff0 <rshift+0x68>

0801602c <__hexdig_fun>:
 801602c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016030:	2b09      	cmp	r3, #9
 8016032:	d802      	bhi.n	801603a <__hexdig_fun+0xe>
 8016034:	3820      	subs	r0, #32
 8016036:	b2c0      	uxtb	r0, r0
 8016038:	4770      	bx	lr
 801603a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801603e:	2b05      	cmp	r3, #5
 8016040:	d801      	bhi.n	8016046 <__hexdig_fun+0x1a>
 8016042:	3847      	subs	r0, #71	@ 0x47
 8016044:	e7f7      	b.n	8016036 <__hexdig_fun+0xa>
 8016046:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801604a:	2b05      	cmp	r3, #5
 801604c:	d801      	bhi.n	8016052 <__hexdig_fun+0x26>
 801604e:	3827      	subs	r0, #39	@ 0x27
 8016050:	e7f1      	b.n	8016036 <__hexdig_fun+0xa>
 8016052:	2000      	movs	r0, #0
 8016054:	4770      	bx	lr
	...

08016058 <__gethex>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	b085      	sub	sp, #20
 801605e:	468a      	mov	sl, r1
 8016060:	9302      	str	r3, [sp, #8]
 8016062:	680b      	ldr	r3, [r1, #0]
 8016064:	9001      	str	r0, [sp, #4]
 8016066:	4690      	mov	r8, r2
 8016068:	1c9c      	adds	r4, r3, #2
 801606a:	46a1      	mov	r9, r4
 801606c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016070:	2830      	cmp	r0, #48	@ 0x30
 8016072:	d0fa      	beq.n	801606a <__gethex+0x12>
 8016074:	eba9 0303 	sub.w	r3, r9, r3
 8016078:	f1a3 0b02 	sub.w	fp, r3, #2
 801607c:	f7ff ffd6 	bl	801602c <__hexdig_fun>
 8016080:	4605      	mov	r5, r0
 8016082:	2800      	cmp	r0, #0
 8016084:	d168      	bne.n	8016158 <__gethex+0x100>
 8016086:	49a0      	ldr	r1, [pc, #640]	@ (8016308 <__gethex+0x2b0>)
 8016088:	2201      	movs	r2, #1
 801608a:	4648      	mov	r0, r9
 801608c:	f7ff f82e 	bl	80150ec <strncmp>
 8016090:	4607      	mov	r7, r0
 8016092:	2800      	cmp	r0, #0
 8016094:	d167      	bne.n	8016166 <__gethex+0x10e>
 8016096:	f899 0001 	ldrb.w	r0, [r9, #1]
 801609a:	4626      	mov	r6, r4
 801609c:	f7ff ffc6 	bl	801602c <__hexdig_fun>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d062      	beq.n	801616a <__gethex+0x112>
 80160a4:	4623      	mov	r3, r4
 80160a6:	7818      	ldrb	r0, [r3, #0]
 80160a8:	2830      	cmp	r0, #48	@ 0x30
 80160aa:	4699      	mov	r9, r3
 80160ac:	f103 0301 	add.w	r3, r3, #1
 80160b0:	d0f9      	beq.n	80160a6 <__gethex+0x4e>
 80160b2:	f7ff ffbb 	bl	801602c <__hexdig_fun>
 80160b6:	fab0 f580 	clz	r5, r0
 80160ba:	096d      	lsrs	r5, r5, #5
 80160bc:	f04f 0b01 	mov.w	fp, #1
 80160c0:	464a      	mov	r2, r9
 80160c2:	4616      	mov	r6, r2
 80160c4:	3201      	adds	r2, #1
 80160c6:	7830      	ldrb	r0, [r6, #0]
 80160c8:	f7ff ffb0 	bl	801602c <__hexdig_fun>
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d1f8      	bne.n	80160c2 <__gethex+0x6a>
 80160d0:	498d      	ldr	r1, [pc, #564]	@ (8016308 <__gethex+0x2b0>)
 80160d2:	2201      	movs	r2, #1
 80160d4:	4630      	mov	r0, r6
 80160d6:	f7ff f809 	bl	80150ec <strncmp>
 80160da:	2800      	cmp	r0, #0
 80160dc:	d13f      	bne.n	801615e <__gethex+0x106>
 80160de:	b944      	cbnz	r4, 80160f2 <__gethex+0x9a>
 80160e0:	1c74      	adds	r4, r6, #1
 80160e2:	4622      	mov	r2, r4
 80160e4:	4616      	mov	r6, r2
 80160e6:	3201      	adds	r2, #1
 80160e8:	7830      	ldrb	r0, [r6, #0]
 80160ea:	f7ff ff9f 	bl	801602c <__hexdig_fun>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d1f8      	bne.n	80160e4 <__gethex+0x8c>
 80160f2:	1ba4      	subs	r4, r4, r6
 80160f4:	00a7      	lsls	r7, r4, #2
 80160f6:	7833      	ldrb	r3, [r6, #0]
 80160f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80160fc:	2b50      	cmp	r3, #80	@ 0x50
 80160fe:	d13e      	bne.n	801617e <__gethex+0x126>
 8016100:	7873      	ldrb	r3, [r6, #1]
 8016102:	2b2b      	cmp	r3, #43	@ 0x2b
 8016104:	d033      	beq.n	801616e <__gethex+0x116>
 8016106:	2b2d      	cmp	r3, #45	@ 0x2d
 8016108:	d034      	beq.n	8016174 <__gethex+0x11c>
 801610a:	1c71      	adds	r1, r6, #1
 801610c:	2400      	movs	r4, #0
 801610e:	7808      	ldrb	r0, [r1, #0]
 8016110:	f7ff ff8c 	bl	801602c <__hexdig_fun>
 8016114:	1e43      	subs	r3, r0, #1
 8016116:	b2db      	uxtb	r3, r3
 8016118:	2b18      	cmp	r3, #24
 801611a:	d830      	bhi.n	801617e <__gethex+0x126>
 801611c:	f1a0 0210 	sub.w	r2, r0, #16
 8016120:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016124:	f7ff ff82 	bl	801602c <__hexdig_fun>
 8016128:	f100 3cff 	add.w	ip, r0, #4294967295
 801612c:	fa5f fc8c 	uxtb.w	ip, ip
 8016130:	f1bc 0f18 	cmp.w	ip, #24
 8016134:	f04f 030a 	mov.w	r3, #10
 8016138:	d91e      	bls.n	8016178 <__gethex+0x120>
 801613a:	b104      	cbz	r4, 801613e <__gethex+0xe6>
 801613c:	4252      	negs	r2, r2
 801613e:	4417      	add	r7, r2
 8016140:	f8ca 1000 	str.w	r1, [sl]
 8016144:	b1ed      	cbz	r5, 8016182 <__gethex+0x12a>
 8016146:	f1bb 0f00 	cmp.w	fp, #0
 801614a:	bf0c      	ite	eq
 801614c:	2506      	moveq	r5, #6
 801614e:	2500      	movne	r5, #0
 8016150:	4628      	mov	r0, r5
 8016152:	b005      	add	sp, #20
 8016154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016158:	2500      	movs	r5, #0
 801615a:	462c      	mov	r4, r5
 801615c:	e7b0      	b.n	80160c0 <__gethex+0x68>
 801615e:	2c00      	cmp	r4, #0
 8016160:	d1c7      	bne.n	80160f2 <__gethex+0x9a>
 8016162:	4627      	mov	r7, r4
 8016164:	e7c7      	b.n	80160f6 <__gethex+0x9e>
 8016166:	464e      	mov	r6, r9
 8016168:	462f      	mov	r7, r5
 801616a:	2501      	movs	r5, #1
 801616c:	e7c3      	b.n	80160f6 <__gethex+0x9e>
 801616e:	2400      	movs	r4, #0
 8016170:	1cb1      	adds	r1, r6, #2
 8016172:	e7cc      	b.n	801610e <__gethex+0xb6>
 8016174:	2401      	movs	r4, #1
 8016176:	e7fb      	b.n	8016170 <__gethex+0x118>
 8016178:	fb03 0002 	mla	r0, r3, r2, r0
 801617c:	e7ce      	b.n	801611c <__gethex+0xc4>
 801617e:	4631      	mov	r1, r6
 8016180:	e7de      	b.n	8016140 <__gethex+0xe8>
 8016182:	eba6 0309 	sub.w	r3, r6, r9
 8016186:	3b01      	subs	r3, #1
 8016188:	4629      	mov	r1, r5
 801618a:	2b07      	cmp	r3, #7
 801618c:	dc0a      	bgt.n	80161a4 <__gethex+0x14c>
 801618e:	9801      	ldr	r0, [sp, #4]
 8016190:	f000 fafc 	bl	801678c <_Balloc>
 8016194:	4604      	mov	r4, r0
 8016196:	b940      	cbnz	r0, 80161aa <__gethex+0x152>
 8016198:	4b5c      	ldr	r3, [pc, #368]	@ (801630c <__gethex+0x2b4>)
 801619a:	4602      	mov	r2, r0
 801619c:	21e4      	movs	r1, #228	@ 0xe4
 801619e:	485c      	ldr	r0, [pc, #368]	@ (8016310 <__gethex+0x2b8>)
 80161a0:	f001 fa3a 	bl	8017618 <__assert_func>
 80161a4:	3101      	adds	r1, #1
 80161a6:	105b      	asrs	r3, r3, #1
 80161a8:	e7ef      	b.n	801618a <__gethex+0x132>
 80161aa:	f100 0a14 	add.w	sl, r0, #20
 80161ae:	2300      	movs	r3, #0
 80161b0:	4655      	mov	r5, sl
 80161b2:	469b      	mov	fp, r3
 80161b4:	45b1      	cmp	r9, r6
 80161b6:	d337      	bcc.n	8016228 <__gethex+0x1d0>
 80161b8:	f845 bb04 	str.w	fp, [r5], #4
 80161bc:	eba5 050a 	sub.w	r5, r5, sl
 80161c0:	10ad      	asrs	r5, r5, #2
 80161c2:	6125      	str	r5, [r4, #16]
 80161c4:	4658      	mov	r0, fp
 80161c6:	f000 fbd3 	bl	8016970 <__hi0bits>
 80161ca:	016d      	lsls	r5, r5, #5
 80161cc:	f8d8 6000 	ldr.w	r6, [r8]
 80161d0:	1a2d      	subs	r5, r5, r0
 80161d2:	42b5      	cmp	r5, r6
 80161d4:	dd54      	ble.n	8016280 <__gethex+0x228>
 80161d6:	1bad      	subs	r5, r5, r6
 80161d8:	4629      	mov	r1, r5
 80161da:	4620      	mov	r0, r4
 80161dc:	f000 ff5c 	bl	8017098 <__any_on>
 80161e0:	4681      	mov	r9, r0
 80161e2:	b178      	cbz	r0, 8016204 <__gethex+0x1ac>
 80161e4:	1e6b      	subs	r3, r5, #1
 80161e6:	1159      	asrs	r1, r3, #5
 80161e8:	f003 021f 	and.w	r2, r3, #31
 80161ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80161f0:	f04f 0901 	mov.w	r9, #1
 80161f4:	fa09 f202 	lsl.w	r2, r9, r2
 80161f8:	420a      	tst	r2, r1
 80161fa:	d003      	beq.n	8016204 <__gethex+0x1ac>
 80161fc:	454b      	cmp	r3, r9
 80161fe:	dc36      	bgt.n	801626e <__gethex+0x216>
 8016200:	f04f 0902 	mov.w	r9, #2
 8016204:	4629      	mov	r1, r5
 8016206:	4620      	mov	r0, r4
 8016208:	f7ff febe 	bl	8015f88 <rshift>
 801620c:	442f      	add	r7, r5
 801620e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016212:	42bb      	cmp	r3, r7
 8016214:	da42      	bge.n	801629c <__gethex+0x244>
 8016216:	9801      	ldr	r0, [sp, #4]
 8016218:	4621      	mov	r1, r4
 801621a:	f000 faf7 	bl	801680c <_Bfree>
 801621e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016220:	2300      	movs	r3, #0
 8016222:	6013      	str	r3, [r2, #0]
 8016224:	25a3      	movs	r5, #163	@ 0xa3
 8016226:	e793      	b.n	8016150 <__gethex+0xf8>
 8016228:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801622c:	2a2e      	cmp	r2, #46	@ 0x2e
 801622e:	d012      	beq.n	8016256 <__gethex+0x1fe>
 8016230:	2b20      	cmp	r3, #32
 8016232:	d104      	bne.n	801623e <__gethex+0x1e6>
 8016234:	f845 bb04 	str.w	fp, [r5], #4
 8016238:	f04f 0b00 	mov.w	fp, #0
 801623c:	465b      	mov	r3, fp
 801623e:	7830      	ldrb	r0, [r6, #0]
 8016240:	9303      	str	r3, [sp, #12]
 8016242:	f7ff fef3 	bl	801602c <__hexdig_fun>
 8016246:	9b03      	ldr	r3, [sp, #12]
 8016248:	f000 000f 	and.w	r0, r0, #15
 801624c:	4098      	lsls	r0, r3
 801624e:	ea4b 0b00 	orr.w	fp, fp, r0
 8016252:	3304      	adds	r3, #4
 8016254:	e7ae      	b.n	80161b4 <__gethex+0x15c>
 8016256:	45b1      	cmp	r9, r6
 8016258:	d8ea      	bhi.n	8016230 <__gethex+0x1d8>
 801625a:	492b      	ldr	r1, [pc, #172]	@ (8016308 <__gethex+0x2b0>)
 801625c:	9303      	str	r3, [sp, #12]
 801625e:	2201      	movs	r2, #1
 8016260:	4630      	mov	r0, r6
 8016262:	f7fe ff43 	bl	80150ec <strncmp>
 8016266:	9b03      	ldr	r3, [sp, #12]
 8016268:	2800      	cmp	r0, #0
 801626a:	d1e1      	bne.n	8016230 <__gethex+0x1d8>
 801626c:	e7a2      	b.n	80161b4 <__gethex+0x15c>
 801626e:	1ea9      	subs	r1, r5, #2
 8016270:	4620      	mov	r0, r4
 8016272:	f000 ff11 	bl	8017098 <__any_on>
 8016276:	2800      	cmp	r0, #0
 8016278:	d0c2      	beq.n	8016200 <__gethex+0x1a8>
 801627a:	f04f 0903 	mov.w	r9, #3
 801627e:	e7c1      	b.n	8016204 <__gethex+0x1ac>
 8016280:	da09      	bge.n	8016296 <__gethex+0x23e>
 8016282:	1b75      	subs	r5, r6, r5
 8016284:	4621      	mov	r1, r4
 8016286:	9801      	ldr	r0, [sp, #4]
 8016288:	462a      	mov	r2, r5
 801628a:	f000 fccf 	bl	8016c2c <__lshift>
 801628e:	1b7f      	subs	r7, r7, r5
 8016290:	4604      	mov	r4, r0
 8016292:	f100 0a14 	add.w	sl, r0, #20
 8016296:	f04f 0900 	mov.w	r9, #0
 801629a:	e7b8      	b.n	801620e <__gethex+0x1b6>
 801629c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80162a0:	42bd      	cmp	r5, r7
 80162a2:	dd6f      	ble.n	8016384 <__gethex+0x32c>
 80162a4:	1bed      	subs	r5, r5, r7
 80162a6:	42ae      	cmp	r6, r5
 80162a8:	dc34      	bgt.n	8016314 <__gethex+0x2bc>
 80162aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162ae:	2b02      	cmp	r3, #2
 80162b0:	d022      	beq.n	80162f8 <__gethex+0x2a0>
 80162b2:	2b03      	cmp	r3, #3
 80162b4:	d024      	beq.n	8016300 <__gethex+0x2a8>
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d115      	bne.n	80162e6 <__gethex+0x28e>
 80162ba:	42ae      	cmp	r6, r5
 80162bc:	d113      	bne.n	80162e6 <__gethex+0x28e>
 80162be:	2e01      	cmp	r6, #1
 80162c0:	d10b      	bne.n	80162da <__gethex+0x282>
 80162c2:	9a02      	ldr	r2, [sp, #8]
 80162c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162c8:	6013      	str	r3, [r2, #0]
 80162ca:	2301      	movs	r3, #1
 80162cc:	6123      	str	r3, [r4, #16]
 80162ce:	f8ca 3000 	str.w	r3, [sl]
 80162d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162d4:	2562      	movs	r5, #98	@ 0x62
 80162d6:	601c      	str	r4, [r3, #0]
 80162d8:	e73a      	b.n	8016150 <__gethex+0xf8>
 80162da:	1e71      	subs	r1, r6, #1
 80162dc:	4620      	mov	r0, r4
 80162de:	f000 fedb 	bl	8017098 <__any_on>
 80162e2:	2800      	cmp	r0, #0
 80162e4:	d1ed      	bne.n	80162c2 <__gethex+0x26a>
 80162e6:	9801      	ldr	r0, [sp, #4]
 80162e8:	4621      	mov	r1, r4
 80162ea:	f000 fa8f 	bl	801680c <_Bfree>
 80162ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80162f0:	2300      	movs	r3, #0
 80162f2:	6013      	str	r3, [r2, #0]
 80162f4:	2550      	movs	r5, #80	@ 0x50
 80162f6:	e72b      	b.n	8016150 <__gethex+0xf8>
 80162f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d1f3      	bne.n	80162e6 <__gethex+0x28e>
 80162fe:	e7e0      	b.n	80162c2 <__gethex+0x26a>
 8016300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016302:	2b00      	cmp	r3, #0
 8016304:	d1dd      	bne.n	80162c2 <__gethex+0x26a>
 8016306:	e7ee      	b.n	80162e6 <__gethex+0x28e>
 8016308:	08017f78 	.word	0x08017f78
 801630c:	08018032 	.word	0x08018032
 8016310:	08018043 	.word	0x08018043
 8016314:	1e6f      	subs	r7, r5, #1
 8016316:	f1b9 0f00 	cmp.w	r9, #0
 801631a:	d130      	bne.n	801637e <__gethex+0x326>
 801631c:	b127      	cbz	r7, 8016328 <__gethex+0x2d0>
 801631e:	4639      	mov	r1, r7
 8016320:	4620      	mov	r0, r4
 8016322:	f000 feb9 	bl	8017098 <__any_on>
 8016326:	4681      	mov	r9, r0
 8016328:	117a      	asrs	r2, r7, #5
 801632a:	2301      	movs	r3, #1
 801632c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016330:	f007 071f 	and.w	r7, r7, #31
 8016334:	40bb      	lsls	r3, r7
 8016336:	4213      	tst	r3, r2
 8016338:	4629      	mov	r1, r5
 801633a:	4620      	mov	r0, r4
 801633c:	bf18      	it	ne
 801633e:	f049 0902 	orrne.w	r9, r9, #2
 8016342:	f7ff fe21 	bl	8015f88 <rshift>
 8016346:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801634a:	1b76      	subs	r6, r6, r5
 801634c:	2502      	movs	r5, #2
 801634e:	f1b9 0f00 	cmp.w	r9, #0
 8016352:	d047      	beq.n	80163e4 <__gethex+0x38c>
 8016354:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016358:	2b02      	cmp	r3, #2
 801635a:	d015      	beq.n	8016388 <__gethex+0x330>
 801635c:	2b03      	cmp	r3, #3
 801635e:	d017      	beq.n	8016390 <__gethex+0x338>
 8016360:	2b01      	cmp	r3, #1
 8016362:	d109      	bne.n	8016378 <__gethex+0x320>
 8016364:	f019 0f02 	tst.w	r9, #2
 8016368:	d006      	beq.n	8016378 <__gethex+0x320>
 801636a:	f8da 3000 	ldr.w	r3, [sl]
 801636e:	ea49 0903 	orr.w	r9, r9, r3
 8016372:	f019 0f01 	tst.w	r9, #1
 8016376:	d10e      	bne.n	8016396 <__gethex+0x33e>
 8016378:	f045 0510 	orr.w	r5, r5, #16
 801637c:	e032      	b.n	80163e4 <__gethex+0x38c>
 801637e:	f04f 0901 	mov.w	r9, #1
 8016382:	e7d1      	b.n	8016328 <__gethex+0x2d0>
 8016384:	2501      	movs	r5, #1
 8016386:	e7e2      	b.n	801634e <__gethex+0x2f6>
 8016388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801638a:	f1c3 0301 	rsb	r3, r3, #1
 801638e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016392:	2b00      	cmp	r3, #0
 8016394:	d0f0      	beq.n	8016378 <__gethex+0x320>
 8016396:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801639a:	f104 0314 	add.w	r3, r4, #20
 801639e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80163a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80163a6:	f04f 0c00 	mov.w	ip, #0
 80163aa:	4618      	mov	r0, r3
 80163ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80163b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80163b4:	d01b      	beq.n	80163ee <__gethex+0x396>
 80163b6:	3201      	adds	r2, #1
 80163b8:	6002      	str	r2, [r0, #0]
 80163ba:	2d02      	cmp	r5, #2
 80163bc:	f104 0314 	add.w	r3, r4, #20
 80163c0:	d13c      	bne.n	801643c <__gethex+0x3e4>
 80163c2:	f8d8 2000 	ldr.w	r2, [r8]
 80163c6:	3a01      	subs	r2, #1
 80163c8:	42b2      	cmp	r2, r6
 80163ca:	d109      	bne.n	80163e0 <__gethex+0x388>
 80163cc:	1171      	asrs	r1, r6, #5
 80163ce:	2201      	movs	r2, #1
 80163d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80163d4:	f006 061f 	and.w	r6, r6, #31
 80163d8:	fa02 f606 	lsl.w	r6, r2, r6
 80163dc:	421e      	tst	r6, r3
 80163de:	d13a      	bne.n	8016456 <__gethex+0x3fe>
 80163e0:	f045 0520 	orr.w	r5, r5, #32
 80163e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163e6:	601c      	str	r4, [r3, #0]
 80163e8:	9b02      	ldr	r3, [sp, #8]
 80163ea:	601f      	str	r7, [r3, #0]
 80163ec:	e6b0      	b.n	8016150 <__gethex+0xf8>
 80163ee:	4299      	cmp	r1, r3
 80163f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80163f4:	d8d9      	bhi.n	80163aa <__gethex+0x352>
 80163f6:	68a3      	ldr	r3, [r4, #8]
 80163f8:	459b      	cmp	fp, r3
 80163fa:	db17      	blt.n	801642c <__gethex+0x3d4>
 80163fc:	6861      	ldr	r1, [r4, #4]
 80163fe:	9801      	ldr	r0, [sp, #4]
 8016400:	3101      	adds	r1, #1
 8016402:	f000 f9c3 	bl	801678c <_Balloc>
 8016406:	4681      	mov	r9, r0
 8016408:	b918      	cbnz	r0, 8016412 <__gethex+0x3ba>
 801640a:	4b1a      	ldr	r3, [pc, #104]	@ (8016474 <__gethex+0x41c>)
 801640c:	4602      	mov	r2, r0
 801640e:	2184      	movs	r1, #132	@ 0x84
 8016410:	e6c5      	b.n	801619e <__gethex+0x146>
 8016412:	6922      	ldr	r2, [r4, #16]
 8016414:	3202      	adds	r2, #2
 8016416:	f104 010c 	add.w	r1, r4, #12
 801641a:	0092      	lsls	r2, r2, #2
 801641c:	300c      	adds	r0, #12
 801641e:	f7fe ff62 	bl	80152e6 <memcpy>
 8016422:	4621      	mov	r1, r4
 8016424:	9801      	ldr	r0, [sp, #4]
 8016426:	f000 f9f1 	bl	801680c <_Bfree>
 801642a:	464c      	mov	r4, r9
 801642c:	6923      	ldr	r3, [r4, #16]
 801642e:	1c5a      	adds	r2, r3, #1
 8016430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016434:	6122      	str	r2, [r4, #16]
 8016436:	2201      	movs	r2, #1
 8016438:	615a      	str	r2, [r3, #20]
 801643a:	e7be      	b.n	80163ba <__gethex+0x362>
 801643c:	6922      	ldr	r2, [r4, #16]
 801643e:	455a      	cmp	r2, fp
 8016440:	dd0b      	ble.n	801645a <__gethex+0x402>
 8016442:	2101      	movs	r1, #1
 8016444:	4620      	mov	r0, r4
 8016446:	f7ff fd9f 	bl	8015f88 <rshift>
 801644a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801644e:	3701      	adds	r7, #1
 8016450:	42bb      	cmp	r3, r7
 8016452:	f6ff aee0 	blt.w	8016216 <__gethex+0x1be>
 8016456:	2501      	movs	r5, #1
 8016458:	e7c2      	b.n	80163e0 <__gethex+0x388>
 801645a:	f016 061f 	ands.w	r6, r6, #31
 801645e:	d0fa      	beq.n	8016456 <__gethex+0x3fe>
 8016460:	4453      	add	r3, sl
 8016462:	f1c6 0620 	rsb	r6, r6, #32
 8016466:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801646a:	f000 fa81 	bl	8016970 <__hi0bits>
 801646e:	42b0      	cmp	r0, r6
 8016470:	dbe7      	blt.n	8016442 <__gethex+0x3ea>
 8016472:	e7f0      	b.n	8016456 <__gethex+0x3fe>
 8016474:	08018032 	.word	0x08018032

08016478 <L_shift>:
 8016478:	f1c2 0208 	rsb	r2, r2, #8
 801647c:	0092      	lsls	r2, r2, #2
 801647e:	b570      	push	{r4, r5, r6, lr}
 8016480:	f1c2 0620 	rsb	r6, r2, #32
 8016484:	6843      	ldr	r3, [r0, #4]
 8016486:	6804      	ldr	r4, [r0, #0]
 8016488:	fa03 f506 	lsl.w	r5, r3, r6
 801648c:	432c      	orrs	r4, r5
 801648e:	40d3      	lsrs	r3, r2
 8016490:	6004      	str	r4, [r0, #0]
 8016492:	f840 3f04 	str.w	r3, [r0, #4]!
 8016496:	4288      	cmp	r0, r1
 8016498:	d3f4      	bcc.n	8016484 <L_shift+0xc>
 801649a:	bd70      	pop	{r4, r5, r6, pc}

0801649c <__match>:
 801649c:	b530      	push	{r4, r5, lr}
 801649e:	6803      	ldr	r3, [r0, #0]
 80164a0:	3301      	adds	r3, #1
 80164a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164a6:	b914      	cbnz	r4, 80164ae <__match+0x12>
 80164a8:	6003      	str	r3, [r0, #0]
 80164aa:	2001      	movs	r0, #1
 80164ac:	bd30      	pop	{r4, r5, pc}
 80164ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80164b6:	2d19      	cmp	r5, #25
 80164b8:	bf98      	it	ls
 80164ba:	3220      	addls	r2, #32
 80164bc:	42a2      	cmp	r2, r4
 80164be:	d0f0      	beq.n	80164a2 <__match+0x6>
 80164c0:	2000      	movs	r0, #0
 80164c2:	e7f3      	b.n	80164ac <__match+0x10>

080164c4 <__hexnan>:
 80164c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c8:	680b      	ldr	r3, [r1, #0]
 80164ca:	6801      	ldr	r1, [r0, #0]
 80164cc:	115e      	asrs	r6, r3, #5
 80164ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80164d2:	f013 031f 	ands.w	r3, r3, #31
 80164d6:	b087      	sub	sp, #28
 80164d8:	bf18      	it	ne
 80164da:	3604      	addne	r6, #4
 80164dc:	2500      	movs	r5, #0
 80164de:	1f37      	subs	r7, r6, #4
 80164e0:	4682      	mov	sl, r0
 80164e2:	4690      	mov	r8, r2
 80164e4:	9301      	str	r3, [sp, #4]
 80164e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80164ea:	46b9      	mov	r9, r7
 80164ec:	463c      	mov	r4, r7
 80164ee:	9502      	str	r5, [sp, #8]
 80164f0:	46ab      	mov	fp, r5
 80164f2:	784a      	ldrb	r2, [r1, #1]
 80164f4:	1c4b      	adds	r3, r1, #1
 80164f6:	9303      	str	r3, [sp, #12]
 80164f8:	b342      	cbz	r2, 801654c <__hexnan+0x88>
 80164fa:	4610      	mov	r0, r2
 80164fc:	9105      	str	r1, [sp, #20]
 80164fe:	9204      	str	r2, [sp, #16]
 8016500:	f7ff fd94 	bl	801602c <__hexdig_fun>
 8016504:	2800      	cmp	r0, #0
 8016506:	d151      	bne.n	80165ac <__hexnan+0xe8>
 8016508:	9a04      	ldr	r2, [sp, #16]
 801650a:	9905      	ldr	r1, [sp, #20]
 801650c:	2a20      	cmp	r2, #32
 801650e:	d818      	bhi.n	8016542 <__hexnan+0x7e>
 8016510:	9b02      	ldr	r3, [sp, #8]
 8016512:	459b      	cmp	fp, r3
 8016514:	dd13      	ble.n	801653e <__hexnan+0x7a>
 8016516:	454c      	cmp	r4, r9
 8016518:	d206      	bcs.n	8016528 <__hexnan+0x64>
 801651a:	2d07      	cmp	r5, #7
 801651c:	dc04      	bgt.n	8016528 <__hexnan+0x64>
 801651e:	462a      	mov	r2, r5
 8016520:	4649      	mov	r1, r9
 8016522:	4620      	mov	r0, r4
 8016524:	f7ff ffa8 	bl	8016478 <L_shift>
 8016528:	4544      	cmp	r4, r8
 801652a:	d952      	bls.n	80165d2 <__hexnan+0x10e>
 801652c:	2300      	movs	r3, #0
 801652e:	f1a4 0904 	sub.w	r9, r4, #4
 8016532:	f844 3c04 	str.w	r3, [r4, #-4]
 8016536:	f8cd b008 	str.w	fp, [sp, #8]
 801653a:	464c      	mov	r4, r9
 801653c:	461d      	mov	r5, r3
 801653e:	9903      	ldr	r1, [sp, #12]
 8016540:	e7d7      	b.n	80164f2 <__hexnan+0x2e>
 8016542:	2a29      	cmp	r2, #41	@ 0x29
 8016544:	d157      	bne.n	80165f6 <__hexnan+0x132>
 8016546:	3102      	adds	r1, #2
 8016548:	f8ca 1000 	str.w	r1, [sl]
 801654c:	f1bb 0f00 	cmp.w	fp, #0
 8016550:	d051      	beq.n	80165f6 <__hexnan+0x132>
 8016552:	454c      	cmp	r4, r9
 8016554:	d206      	bcs.n	8016564 <__hexnan+0xa0>
 8016556:	2d07      	cmp	r5, #7
 8016558:	dc04      	bgt.n	8016564 <__hexnan+0xa0>
 801655a:	462a      	mov	r2, r5
 801655c:	4649      	mov	r1, r9
 801655e:	4620      	mov	r0, r4
 8016560:	f7ff ff8a 	bl	8016478 <L_shift>
 8016564:	4544      	cmp	r4, r8
 8016566:	d936      	bls.n	80165d6 <__hexnan+0x112>
 8016568:	f1a8 0204 	sub.w	r2, r8, #4
 801656c:	4623      	mov	r3, r4
 801656e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016572:	f842 1f04 	str.w	r1, [r2, #4]!
 8016576:	429f      	cmp	r7, r3
 8016578:	d2f9      	bcs.n	801656e <__hexnan+0xaa>
 801657a:	1b3b      	subs	r3, r7, r4
 801657c:	f023 0303 	bic.w	r3, r3, #3
 8016580:	3304      	adds	r3, #4
 8016582:	3401      	adds	r4, #1
 8016584:	3e03      	subs	r6, #3
 8016586:	42b4      	cmp	r4, r6
 8016588:	bf88      	it	hi
 801658a:	2304      	movhi	r3, #4
 801658c:	4443      	add	r3, r8
 801658e:	2200      	movs	r2, #0
 8016590:	f843 2b04 	str.w	r2, [r3], #4
 8016594:	429f      	cmp	r7, r3
 8016596:	d2fb      	bcs.n	8016590 <__hexnan+0xcc>
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	b91b      	cbnz	r3, 80165a4 <__hexnan+0xe0>
 801659c:	4547      	cmp	r7, r8
 801659e:	d128      	bne.n	80165f2 <__hexnan+0x12e>
 80165a0:	2301      	movs	r3, #1
 80165a2:	603b      	str	r3, [r7, #0]
 80165a4:	2005      	movs	r0, #5
 80165a6:	b007      	add	sp, #28
 80165a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ac:	3501      	adds	r5, #1
 80165ae:	2d08      	cmp	r5, #8
 80165b0:	f10b 0b01 	add.w	fp, fp, #1
 80165b4:	dd06      	ble.n	80165c4 <__hexnan+0x100>
 80165b6:	4544      	cmp	r4, r8
 80165b8:	d9c1      	bls.n	801653e <__hexnan+0x7a>
 80165ba:	2300      	movs	r3, #0
 80165bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80165c0:	2501      	movs	r5, #1
 80165c2:	3c04      	subs	r4, #4
 80165c4:	6822      	ldr	r2, [r4, #0]
 80165c6:	f000 000f 	and.w	r0, r0, #15
 80165ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80165ce:	6020      	str	r0, [r4, #0]
 80165d0:	e7b5      	b.n	801653e <__hexnan+0x7a>
 80165d2:	2508      	movs	r5, #8
 80165d4:	e7b3      	b.n	801653e <__hexnan+0x7a>
 80165d6:	9b01      	ldr	r3, [sp, #4]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d0dd      	beq.n	8016598 <__hexnan+0xd4>
 80165dc:	f1c3 0320 	rsb	r3, r3, #32
 80165e0:	f04f 32ff 	mov.w	r2, #4294967295
 80165e4:	40da      	lsrs	r2, r3
 80165e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80165ea:	4013      	ands	r3, r2
 80165ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80165f0:	e7d2      	b.n	8016598 <__hexnan+0xd4>
 80165f2:	3f04      	subs	r7, #4
 80165f4:	e7d0      	b.n	8016598 <__hexnan+0xd4>
 80165f6:	2004      	movs	r0, #4
 80165f8:	e7d5      	b.n	80165a6 <__hexnan+0xe2>
	...

080165fc <malloc>:
 80165fc:	4b02      	ldr	r3, [pc, #8]	@ (8016608 <malloc+0xc>)
 80165fe:	4601      	mov	r1, r0
 8016600:	6818      	ldr	r0, [r3, #0]
 8016602:	f000 b825 	b.w	8016650 <_malloc_r>
 8016606:	bf00      	nop
 8016608:	240001e4 	.word	0x240001e4

0801660c <sbrk_aligned>:
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	4e0f      	ldr	r6, [pc, #60]	@ (801664c <sbrk_aligned+0x40>)
 8016610:	460c      	mov	r4, r1
 8016612:	6831      	ldr	r1, [r6, #0]
 8016614:	4605      	mov	r5, r0
 8016616:	b911      	cbnz	r1, 801661e <sbrk_aligned+0x12>
 8016618:	f000 ffee 	bl	80175f8 <_sbrk_r>
 801661c:	6030      	str	r0, [r6, #0]
 801661e:	4621      	mov	r1, r4
 8016620:	4628      	mov	r0, r5
 8016622:	f000 ffe9 	bl	80175f8 <_sbrk_r>
 8016626:	1c43      	adds	r3, r0, #1
 8016628:	d103      	bne.n	8016632 <sbrk_aligned+0x26>
 801662a:	f04f 34ff 	mov.w	r4, #4294967295
 801662e:	4620      	mov	r0, r4
 8016630:	bd70      	pop	{r4, r5, r6, pc}
 8016632:	1cc4      	adds	r4, r0, #3
 8016634:	f024 0403 	bic.w	r4, r4, #3
 8016638:	42a0      	cmp	r0, r4
 801663a:	d0f8      	beq.n	801662e <sbrk_aligned+0x22>
 801663c:	1a21      	subs	r1, r4, r0
 801663e:	4628      	mov	r0, r5
 8016640:	f000 ffda 	bl	80175f8 <_sbrk_r>
 8016644:	3001      	adds	r0, #1
 8016646:	d1f2      	bne.n	801662e <sbrk_aligned+0x22>
 8016648:	e7ef      	b.n	801662a <sbrk_aligned+0x1e>
 801664a:	bf00      	nop
 801664c:	240075d8 	.word	0x240075d8

08016650 <_malloc_r>:
 8016650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016654:	1ccd      	adds	r5, r1, #3
 8016656:	f025 0503 	bic.w	r5, r5, #3
 801665a:	3508      	adds	r5, #8
 801665c:	2d0c      	cmp	r5, #12
 801665e:	bf38      	it	cc
 8016660:	250c      	movcc	r5, #12
 8016662:	2d00      	cmp	r5, #0
 8016664:	4606      	mov	r6, r0
 8016666:	db01      	blt.n	801666c <_malloc_r+0x1c>
 8016668:	42a9      	cmp	r1, r5
 801666a:	d904      	bls.n	8016676 <_malloc_r+0x26>
 801666c:	230c      	movs	r3, #12
 801666e:	6033      	str	r3, [r6, #0]
 8016670:	2000      	movs	r0, #0
 8016672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801674c <_malloc_r+0xfc>
 801667a:	f000 f87b 	bl	8016774 <__malloc_lock>
 801667e:	f8d8 3000 	ldr.w	r3, [r8]
 8016682:	461c      	mov	r4, r3
 8016684:	bb44      	cbnz	r4, 80166d8 <_malloc_r+0x88>
 8016686:	4629      	mov	r1, r5
 8016688:	4630      	mov	r0, r6
 801668a:	f7ff ffbf 	bl	801660c <sbrk_aligned>
 801668e:	1c43      	adds	r3, r0, #1
 8016690:	4604      	mov	r4, r0
 8016692:	d158      	bne.n	8016746 <_malloc_r+0xf6>
 8016694:	f8d8 4000 	ldr.w	r4, [r8]
 8016698:	4627      	mov	r7, r4
 801669a:	2f00      	cmp	r7, #0
 801669c:	d143      	bne.n	8016726 <_malloc_r+0xd6>
 801669e:	2c00      	cmp	r4, #0
 80166a0:	d04b      	beq.n	801673a <_malloc_r+0xea>
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	4639      	mov	r1, r7
 80166a6:	4630      	mov	r0, r6
 80166a8:	eb04 0903 	add.w	r9, r4, r3
 80166ac:	f000 ffa4 	bl	80175f8 <_sbrk_r>
 80166b0:	4581      	cmp	r9, r0
 80166b2:	d142      	bne.n	801673a <_malloc_r+0xea>
 80166b4:	6821      	ldr	r1, [r4, #0]
 80166b6:	1a6d      	subs	r5, r5, r1
 80166b8:	4629      	mov	r1, r5
 80166ba:	4630      	mov	r0, r6
 80166bc:	f7ff ffa6 	bl	801660c <sbrk_aligned>
 80166c0:	3001      	adds	r0, #1
 80166c2:	d03a      	beq.n	801673a <_malloc_r+0xea>
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	442b      	add	r3, r5
 80166c8:	6023      	str	r3, [r4, #0]
 80166ca:	f8d8 3000 	ldr.w	r3, [r8]
 80166ce:	685a      	ldr	r2, [r3, #4]
 80166d0:	bb62      	cbnz	r2, 801672c <_malloc_r+0xdc>
 80166d2:	f8c8 7000 	str.w	r7, [r8]
 80166d6:	e00f      	b.n	80166f8 <_malloc_r+0xa8>
 80166d8:	6822      	ldr	r2, [r4, #0]
 80166da:	1b52      	subs	r2, r2, r5
 80166dc:	d420      	bmi.n	8016720 <_malloc_r+0xd0>
 80166de:	2a0b      	cmp	r2, #11
 80166e0:	d917      	bls.n	8016712 <_malloc_r+0xc2>
 80166e2:	1961      	adds	r1, r4, r5
 80166e4:	42a3      	cmp	r3, r4
 80166e6:	6025      	str	r5, [r4, #0]
 80166e8:	bf18      	it	ne
 80166ea:	6059      	strne	r1, [r3, #4]
 80166ec:	6863      	ldr	r3, [r4, #4]
 80166ee:	bf08      	it	eq
 80166f0:	f8c8 1000 	streq.w	r1, [r8]
 80166f4:	5162      	str	r2, [r4, r5]
 80166f6:	604b      	str	r3, [r1, #4]
 80166f8:	4630      	mov	r0, r6
 80166fa:	f000 f841 	bl	8016780 <__malloc_unlock>
 80166fe:	f104 000b 	add.w	r0, r4, #11
 8016702:	1d23      	adds	r3, r4, #4
 8016704:	f020 0007 	bic.w	r0, r0, #7
 8016708:	1ac2      	subs	r2, r0, r3
 801670a:	bf1c      	itt	ne
 801670c:	1a1b      	subne	r3, r3, r0
 801670e:	50a3      	strne	r3, [r4, r2]
 8016710:	e7af      	b.n	8016672 <_malloc_r+0x22>
 8016712:	6862      	ldr	r2, [r4, #4]
 8016714:	42a3      	cmp	r3, r4
 8016716:	bf0c      	ite	eq
 8016718:	f8c8 2000 	streq.w	r2, [r8]
 801671c:	605a      	strne	r2, [r3, #4]
 801671e:	e7eb      	b.n	80166f8 <_malloc_r+0xa8>
 8016720:	4623      	mov	r3, r4
 8016722:	6864      	ldr	r4, [r4, #4]
 8016724:	e7ae      	b.n	8016684 <_malloc_r+0x34>
 8016726:	463c      	mov	r4, r7
 8016728:	687f      	ldr	r7, [r7, #4]
 801672a:	e7b6      	b.n	801669a <_malloc_r+0x4a>
 801672c:	461a      	mov	r2, r3
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	42a3      	cmp	r3, r4
 8016732:	d1fb      	bne.n	801672c <_malloc_r+0xdc>
 8016734:	2300      	movs	r3, #0
 8016736:	6053      	str	r3, [r2, #4]
 8016738:	e7de      	b.n	80166f8 <_malloc_r+0xa8>
 801673a:	230c      	movs	r3, #12
 801673c:	6033      	str	r3, [r6, #0]
 801673e:	4630      	mov	r0, r6
 8016740:	f000 f81e 	bl	8016780 <__malloc_unlock>
 8016744:	e794      	b.n	8016670 <_malloc_r+0x20>
 8016746:	6005      	str	r5, [r0, #0]
 8016748:	e7d6      	b.n	80166f8 <_malloc_r+0xa8>
 801674a:	bf00      	nop
 801674c:	240075dc 	.word	0x240075dc

08016750 <__ascii_mbtowc>:
 8016750:	b082      	sub	sp, #8
 8016752:	b901      	cbnz	r1, 8016756 <__ascii_mbtowc+0x6>
 8016754:	a901      	add	r1, sp, #4
 8016756:	b142      	cbz	r2, 801676a <__ascii_mbtowc+0x1a>
 8016758:	b14b      	cbz	r3, 801676e <__ascii_mbtowc+0x1e>
 801675a:	7813      	ldrb	r3, [r2, #0]
 801675c:	600b      	str	r3, [r1, #0]
 801675e:	7812      	ldrb	r2, [r2, #0]
 8016760:	1e10      	subs	r0, r2, #0
 8016762:	bf18      	it	ne
 8016764:	2001      	movne	r0, #1
 8016766:	b002      	add	sp, #8
 8016768:	4770      	bx	lr
 801676a:	4610      	mov	r0, r2
 801676c:	e7fb      	b.n	8016766 <__ascii_mbtowc+0x16>
 801676e:	f06f 0001 	mvn.w	r0, #1
 8016772:	e7f8      	b.n	8016766 <__ascii_mbtowc+0x16>

08016774 <__malloc_lock>:
 8016774:	4801      	ldr	r0, [pc, #4]	@ (801677c <__malloc_lock+0x8>)
 8016776:	f7fe bdb4 	b.w	80152e2 <__retarget_lock_acquire_recursive>
 801677a:	bf00      	nop
 801677c:	240075d4 	.word	0x240075d4

08016780 <__malloc_unlock>:
 8016780:	4801      	ldr	r0, [pc, #4]	@ (8016788 <__malloc_unlock+0x8>)
 8016782:	f7fe bdaf 	b.w	80152e4 <__retarget_lock_release_recursive>
 8016786:	bf00      	nop
 8016788:	240075d4 	.word	0x240075d4

0801678c <_Balloc>:
 801678c:	b570      	push	{r4, r5, r6, lr}
 801678e:	69c6      	ldr	r6, [r0, #28]
 8016790:	4604      	mov	r4, r0
 8016792:	460d      	mov	r5, r1
 8016794:	b976      	cbnz	r6, 80167b4 <_Balloc+0x28>
 8016796:	2010      	movs	r0, #16
 8016798:	f7ff ff30 	bl	80165fc <malloc>
 801679c:	4602      	mov	r2, r0
 801679e:	61e0      	str	r0, [r4, #28]
 80167a0:	b920      	cbnz	r0, 80167ac <_Balloc+0x20>
 80167a2:	4b18      	ldr	r3, [pc, #96]	@ (8016804 <_Balloc+0x78>)
 80167a4:	4818      	ldr	r0, [pc, #96]	@ (8016808 <_Balloc+0x7c>)
 80167a6:	216b      	movs	r1, #107	@ 0x6b
 80167a8:	f000 ff36 	bl	8017618 <__assert_func>
 80167ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167b0:	6006      	str	r6, [r0, #0]
 80167b2:	60c6      	str	r6, [r0, #12]
 80167b4:	69e6      	ldr	r6, [r4, #28]
 80167b6:	68f3      	ldr	r3, [r6, #12]
 80167b8:	b183      	cbz	r3, 80167dc <_Balloc+0x50>
 80167ba:	69e3      	ldr	r3, [r4, #28]
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80167c2:	b9b8      	cbnz	r0, 80167f4 <_Balloc+0x68>
 80167c4:	2101      	movs	r1, #1
 80167c6:	fa01 f605 	lsl.w	r6, r1, r5
 80167ca:	1d72      	adds	r2, r6, #5
 80167cc:	0092      	lsls	r2, r2, #2
 80167ce:	4620      	mov	r0, r4
 80167d0:	f000 ff40 	bl	8017654 <_calloc_r>
 80167d4:	b160      	cbz	r0, 80167f0 <_Balloc+0x64>
 80167d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80167da:	e00e      	b.n	80167fa <_Balloc+0x6e>
 80167dc:	2221      	movs	r2, #33	@ 0x21
 80167de:	2104      	movs	r1, #4
 80167e0:	4620      	mov	r0, r4
 80167e2:	f000 ff37 	bl	8017654 <_calloc_r>
 80167e6:	69e3      	ldr	r3, [r4, #28]
 80167e8:	60f0      	str	r0, [r6, #12]
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d1e4      	bne.n	80167ba <_Balloc+0x2e>
 80167f0:	2000      	movs	r0, #0
 80167f2:	bd70      	pop	{r4, r5, r6, pc}
 80167f4:	6802      	ldr	r2, [r0, #0]
 80167f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80167fa:	2300      	movs	r3, #0
 80167fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016800:	e7f7      	b.n	80167f2 <_Balloc+0x66>
 8016802:	bf00      	nop
 8016804:	08017fc3 	.word	0x08017fc3
 8016808:	080180a3 	.word	0x080180a3

0801680c <_Bfree>:
 801680c:	b570      	push	{r4, r5, r6, lr}
 801680e:	69c6      	ldr	r6, [r0, #28]
 8016810:	4605      	mov	r5, r0
 8016812:	460c      	mov	r4, r1
 8016814:	b976      	cbnz	r6, 8016834 <_Bfree+0x28>
 8016816:	2010      	movs	r0, #16
 8016818:	f7ff fef0 	bl	80165fc <malloc>
 801681c:	4602      	mov	r2, r0
 801681e:	61e8      	str	r0, [r5, #28]
 8016820:	b920      	cbnz	r0, 801682c <_Bfree+0x20>
 8016822:	4b09      	ldr	r3, [pc, #36]	@ (8016848 <_Bfree+0x3c>)
 8016824:	4809      	ldr	r0, [pc, #36]	@ (801684c <_Bfree+0x40>)
 8016826:	218f      	movs	r1, #143	@ 0x8f
 8016828:	f000 fef6 	bl	8017618 <__assert_func>
 801682c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016830:	6006      	str	r6, [r0, #0]
 8016832:	60c6      	str	r6, [r0, #12]
 8016834:	b13c      	cbz	r4, 8016846 <_Bfree+0x3a>
 8016836:	69eb      	ldr	r3, [r5, #28]
 8016838:	6862      	ldr	r2, [r4, #4]
 801683a:	68db      	ldr	r3, [r3, #12]
 801683c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016840:	6021      	str	r1, [r4, #0]
 8016842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016846:	bd70      	pop	{r4, r5, r6, pc}
 8016848:	08017fc3 	.word	0x08017fc3
 801684c:	080180a3 	.word	0x080180a3

08016850 <__multadd>:
 8016850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016854:	690d      	ldr	r5, [r1, #16]
 8016856:	4607      	mov	r7, r0
 8016858:	460c      	mov	r4, r1
 801685a:	461e      	mov	r6, r3
 801685c:	f101 0c14 	add.w	ip, r1, #20
 8016860:	2000      	movs	r0, #0
 8016862:	f8dc 3000 	ldr.w	r3, [ip]
 8016866:	b299      	uxth	r1, r3
 8016868:	fb02 6101 	mla	r1, r2, r1, r6
 801686c:	0c1e      	lsrs	r6, r3, #16
 801686e:	0c0b      	lsrs	r3, r1, #16
 8016870:	fb02 3306 	mla	r3, r2, r6, r3
 8016874:	b289      	uxth	r1, r1
 8016876:	3001      	adds	r0, #1
 8016878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801687c:	4285      	cmp	r5, r0
 801687e:	f84c 1b04 	str.w	r1, [ip], #4
 8016882:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016886:	dcec      	bgt.n	8016862 <__multadd+0x12>
 8016888:	b30e      	cbz	r6, 80168ce <__multadd+0x7e>
 801688a:	68a3      	ldr	r3, [r4, #8]
 801688c:	42ab      	cmp	r3, r5
 801688e:	dc19      	bgt.n	80168c4 <__multadd+0x74>
 8016890:	6861      	ldr	r1, [r4, #4]
 8016892:	4638      	mov	r0, r7
 8016894:	3101      	adds	r1, #1
 8016896:	f7ff ff79 	bl	801678c <_Balloc>
 801689a:	4680      	mov	r8, r0
 801689c:	b928      	cbnz	r0, 80168aa <__multadd+0x5a>
 801689e:	4602      	mov	r2, r0
 80168a0:	4b0c      	ldr	r3, [pc, #48]	@ (80168d4 <__multadd+0x84>)
 80168a2:	480d      	ldr	r0, [pc, #52]	@ (80168d8 <__multadd+0x88>)
 80168a4:	21ba      	movs	r1, #186	@ 0xba
 80168a6:	f000 feb7 	bl	8017618 <__assert_func>
 80168aa:	6922      	ldr	r2, [r4, #16]
 80168ac:	3202      	adds	r2, #2
 80168ae:	f104 010c 	add.w	r1, r4, #12
 80168b2:	0092      	lsls	r2, r2, #2
 80168b4:	300c      	adds	r0, #12
 80168b6:	f7fe fd16 	bl	80152e6 <memcpy>
 80168ba:	4621      	mov	r1, r4
 80168bc:	4638      	mov	r0, r7
 80168be:	f7ff ffa5 	bl	801680c <_Bfree>
 80168c2:	4644      	mov	r4, r8
 80168c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80168c8:	3501      	adds	r5, #1
 80168ca:	615e      	str	r6, [r3, #20]
 80168cc:	6125      	str	r5, [r4, #16]
 80168ce:	4620      	mov	r0, r4
 80168d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d4:	08018032 	.word	0x08018032
 80168d8:	080180a3 	.word	0x080180a3

080168dc <__s2b>:
 80168dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168e0:	460c      	mov	r4, r1
 80168e2:	4615      	mov	r5, r2
 80168e4:	461f      	mov	r7, r3
 80168e6:	2209      	movs	r2, #9
 80168e8:	3308      	adds	r3, #8
 80168ea:	4606      	mov	r6, r0
 80168ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80168f0:	2100      	movs	r1, #0
 80168f2:	2201      	movs	r2, #1
 80168f4:	429a      	cmp	r2, r3
 80168f6:	db09      	blt.n	801690c <__s2b+0x30>
 80168f8:	4630      	mov	r0, r6
 80168fa:	f7ff ff47 	bl	801678c <_Balloc>
 80168fe:	b940      	cbnz	r0, 8016912 <__s2b+0x36>
 8016900:	4602      	mov	r2, r0
 8016902:	4b19      	ldr	r3, [pc, #100]	@ (8016968 <__s2b+0x8c>)
 8016904:	4819      	ldr	r0, [pc, #100]	@ (801696c <__s2b+0x90>)
 8016906:	21d3      	movs	r1, #211	@ 0xd3
 8016908:	f000 fe86 	bl	8017618 <__assert_func>
 801690c:	0052      	lsls	r2, r2, #1
 801690e:	3101      	adds	r1, #1
 8016910:	e7f0      	b.n	80168f4 <__s2b+0x18>
 8016912:	9b08      	ldr	r3, [sp, #32]
 8016914:	6143      	str	r3, [r0, #20]
 8016916:	2d09      	cmp	r5, #9
 8016918:	f04f 0301 	mov.w	r3, #1
 801691c:	6103      	str	r3, [r0, #16]
 801691e:	dd16      	ble.n	801694e <__s2b+0x72>
 8016920:	f104 0909 	add.w	r9, r4, #9
 8016924:	46c8      	mov	r8, r9
 8016926:	442c      	add	r4, r5
 8016928:	f818 3b01 	ldrb.w	r3, [r8], #1
 801692c:	4601      	mov	r1, r0
 801692e:	3b30      	subs	r3, #48	@ 0x30
 8016930:	220a      	movs	r2, #10
 8016932:	4630      	mov	r0, r6
 8016934:	f7ff ff8c 	bl	8016850 <__multadd>
 8016938:	45a0      	cmp	r8, r4
 801693a:	d1f5      	bne.n	8016928 <__s2b+0x4c>
 801693c:	f1a5 0408 	sub.w	r4, r5, #8
 8016940:	444c      	add	r4, r9
 8016942:	1b2d      	subs	r5, r5, r4
 8016944:	1963      	adds	r3, r4, r5
 8016946:	42bb      	cmp	r3, r7
 8016948:	db04      	blt.n	8016954 <__s2b+0x78>
 801694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801694e:	340a      	adds	r4, #10
 8016950:	2509      	movs	r5, #9
 8016952:	e7f6      	b.n	8016942 <__s2b+0x66>
 8016954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016958:	4601      	mov	r1, r0
 801695a:	3b30      	subs	r3, #48	@ 0x30
 801695c:	220a      	movs	r2, #10
 801695e:	4630      	mov	r0, r6
 8016960:	f7ff ff76 	bl	8016850 <__multadd>
 8016964:	e7ee      	b.n	8016944 <__s2b+0x68>
 8016966:	bf00      	nop
 8016968:	08018032 	.word	0x08018032
 801696c:	080180a3 	.word	0x080180a3

08016970 <__hi0bits>:
 8016970:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016974:	4603      	mov	r3, r0
 8016976:	bf36      	itet	cc
 8016978:	0403      	lslcc	r3, r0, #16
 801697a:	2000      	movcs	r0, #0
 801697c:	2010      	movcc	r0, #16
 801697e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016982:	bf3c      	itt	cc
 8016984:	021b      	lslcc	r3, r3, #8
 8016986:	3008      	addcc	r0, #8
 8016988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801698c:	bf3c      	itt	cc
 801698e:	011b      	lslcc	r3, r3, #4
 8016990:	3004      	addcc	r0, #4
 8016992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016996:	bf3c      	itt	cc
 8016998:	009b      	lslcc	r3, r3, #2
 801699a:	3002      	addcc	r0, #2
 801699c:	2b00      	cmp	r3, #0
 801699e:	db05      	blt.n	80169ac <__hi0bits+0x3c>
 80169a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80169a4:	f100 0001 	add.w	r0, r0, #1
 80169a8:	bf08      	it	eq
 80169aa:	2020      	moveq	r0, #32
 80169ac:	4770      	bx	lr

080169ae <__lo0bits>:
 80169ae:	6803      	ldr	r3, [r0, #0]
 80169b0:	4602      	mov	r2, r0
 80169b2:	f013 0007 	ands.w	r0, r3, #7
 80169b6:	d00b      	beq.n	80169d0 <__lo0bits+0x22>
 80169b8:	07d9      	lsls	r1, r3, #31
 80169ba:	d421      	bmi.n	8016a00 <__lo0bits+0x52>
 80169bc:	0798      	lsls	r0, r3, #30
 80169be:	bf49      	itett	mi
 80169c0:	085b      	lsrmi	r3, r3, #1
 80169c2:	089b      	lsrpl	r3, r3, #2
 80169c4:	2001      	movmi	r0, #1
 80169c6:	6013      	strmi	r3, [r2, #0]
 80169c8:	bf5c      	itt	pl
 80169ca:	6013      	strpl	r3, [r2, #0]
 80169cc:	2002      	movpl	r0, #2
 80169ce:	4770      	bx	lr
 80169d0:	b299      	uxth	r1, r3
 80169d2:	b909      	cbnz	r1, 80169d8 <__lo0bits+0x2a>
 80169d4:	0c1b      	lsrs	r3, r3, #16
 80169d6:	2010      	movs	r0, #16
 80169d8:	b2d9      	uxtb	r1, r3
 80169da:	b909      	cbnz	r1, 80169e0 <__lo0bits+0x32>
 80169dc:	3008      	adds	r0, #8
 80169de:	0a1b      	lsrs	r3, r3, #8
 80169e0:	0719      	lsls	r1, r3, #28
 80169e2:	bf04      	itt	eq
 80169e4:	091b      	lsreq	r3, r3, #4
 80169e6:	3004      	addeq	r0, #4
 80169e8:	0799      	lsls	r1, r3, #30
 80169ea:	bf04      	itt	eq
 80169ec:	089b      	lsreq	r3, r3, #2
 80169ee:	3002      	addeq	r0, #2
 80169f0:	07d9      	lsls	r1, r3, #31
 80169f2:	d403      	bmi.n	80169fc <__lo0bits+0x4e>
 80169f4:	085b      	lsrs	r3, r3, #1
 80169f6:	f100 0001 	add.w	r0, r0, #1
 80169fa:	d003      	beq.n	8016a04 <__lo0bits+0x56>
 80169fc:	6013      	str	r3, [r2, #0]
 80169fe:	4770      	bx	lr
 8016a00:	2000      	movs	r0, #0
 8016a02:	4770      	bx	lr
 8016a04:	2020      	movs	r0, #32
 8016a06:	4770      	bx	lr

08016a08 <__i2b>:
 8016a08:	b510      	push	{r4, lr}
 8016a0a:	460c      	mov	r4, r1
 8016a0c:	2101      	movs	r1, #1
 8016a0e:	f7ff febd 	bl	801678c <_Balloc>
 8016a12:	4602      	mov	r2, r0
 8016a14:	b928      	cbnz	r0, 8016a22 <__i2b+0x1a>
 8016a16:	4b05      	ldr	r3, [pc, #20]	@ (8016a2c <__i2b+0x24>)
 8016a18:	4805      	ldr	r0, [pc, #20]	@ (8016a30 <__i2b+0x28>)
 8016a1a:	f240 1145 	movw	r1, #325	@ 0x145
 8016a1e:	f000 fdfb 	bl	8017618 <__assert_func>
 8016a22:	2301      	movs	r3, #1
 8016a24:	6144      	str	r4, [r0, #20]
 8016a26:	6103      	str	r3, [r0, #16]
 8016a28:	bd10      	pop	{r4, pc}
 8016a2a:	bf00      	nop
 8016a2c:	08018032 	.word	0x08018032
 8016a30:	080180a3 	.word	0x080180a3

08016a34 <__multiply>:
 8016a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a38:	4617      	mov	r7, r2
 8016a3a:	690a      	ldr	r2, [r1, #16]
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	bfa8      	it	ge
 8016a42:	463b      	movge	r3, r7
 8016a44:	4689      	mov	r9, r1
 8016a46:	bfa4      	itt	ge
 8016a48:	460f      	movge	r7, r1
 8016a4a:	4699      	movge	r9, r3
 8016a4c:	693d      	ldr	r5, [r7, #16]
 8016a4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	6879      	ldr	r1, [r7, #4]
 8016a56:	eb05 060a 	add.w	r6, r5, sl
 8016a5a:	42b3      	cmp	r3, r6
 8016a5c:	b085      	sub	sp, #20
 8016a5e:	bfb8      	it	lt
 8016a60:	3101      	addlt	r1, #1
 8016a62:	f7ff fe93 	bl	801678c <_Balloc>
 8016a66:	b930      	cbnz	r0, 8016a76 <__multiply+0x42>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	4b41      	ldr	r3, [pc, #260]	@ (8016b70 <__multiply+0x13c>)
 8016a6c:	4841      	ldr	r0, [pc, #260]	@ (8016b74 <__multiply+0x140>)
 8016a6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016a72:	f000 fdd1 	bl	8017618 <__assert_func>
 8016a76:	f100 0414 	add.w	r4, r0, #20
 8016a7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016a7e:	4623      	mov	r3, r4
 8016a80:	2200      	movs	r2, #0
 8016a82:	4573      	cmp	r3, lr
 8016a84:	d320      	bcc.n	8016ac8 <__multiply+0x94>
 8016a86:	f107 0814 	add.w	r8, r7, #20
 8016a8a:	f109 0114 	add.w	r1, r9, #20
 8016a8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016a92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016a96:	9302      	str	r3, [sp, #8]
 8016a98:	1beb      	subs	r3, r5, r7
 8016a9a:	3b15      	subs	r3, #21
 8016a9c:	f023 0303 	bic.w	r3, r3, #3
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	3715      	adds	r7, #21
 8016aa4:	42bd      	cmp	r5, r7
 8016aa6:	bf38      	it	cc
 8016aa8:	2304      	movcc	r3, #4
 8016aaa:	9301      	str	r3, [sp, #4]
 8016aac:	9b02      	ldr	r3, [sp, #8]
 8016aae:	9103      	str	r1, [sp, #12]
 8016ab0:	428b      	cmp	r3, r1
 8016ab2:	d80c      	bhi.n	8016ace <__multiply+0x9a>
 8016ab4:	2e00      	cmp	r6, #0
 8016ab6:	dd03      	ble.n	8016ac0 <__multiply+0x8c>
 8016ab8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d055      	beq.n	8016b6c <__multiply+0x138>
 8016ac0:	6106      	str	r6, [r0, #16]
 8016ac2:	b005      	add	sp, #20
 8016ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac8:	f843 2b04 	str.w	r2, [r3], #4
 8016acc:	e7d9      	b.n	8016a82 <__multiply+0x4e>
 8016ace:	f8b1 a000 	ldrh.w	sl, [r1]
 8016ad2:	f1ba 0f00 	cmp.w	sl, #0
 8016ad6:	d01f      	beq.n	8016b18 <__multiply+0xe4>
 8016ad8:	46c4      	mov	ip, r8
 8016ada:	46a1      	mov	r9, r4
 8016adc:	2700      	movs	r7, #0
 8016ade:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016ae2:	f8d9 3000 	ldr.w	r3, [r9]
 8016ae6:	fa1f fb82 	uxth.w	fp, r2
 8016aea:	b29b      	uxth	r3, r3
 8016aec:	fb0a 330b 	mla	r3, sl, fp, r3
 8016af0:	443b      	add	r3, r7
 8016af2:	f8d9 7000 	ldr.w	r7, [r9]
 8016af6:	0c12      	lsrs	r2, r2, #16
 8016af8:	0c3f      	lsrs	r7, r7, #16
 8016afa:	fb0a 7202 	mla	r2, sl, r2, r7
 8016afe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016b02:	b29b      	uxth	r3, r3
 8016b04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b08:	4565      	cmp	r5, ip
 8016b0a:	f849 3b04 	str.w	r3, [r9], #4
 8016b0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016b12:	d8e4      	bhi.n	8016ade <__multiply+0xaa>
 8016b14:	9b01      	ldr	r3, [sp, #4]
 8016b16:	50e7      	str	r7, [r4, r3]
 8016b18:	9b03      	ldr	r3, [sp, #12]
 8016b1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016b1e:	3104      	adds	r1, #4
 8016b20:	f1b9 0f00 	cmp.w	r9, #0
 8016b24:	d020      	beq.n	8016b68 <__multiply+0x134>
 8016b26:	6823      	ldr	r3, [r4, #0]
 8016b28:	4647      	mov	r7, r8
 8016b2a:	46a4      	mov	ip, r4
 8016b2c:	f04f 0a00 	mov.w	sl, #0
 8016b30:	f8b7 b000 	ldrh.w	fp, [r7]
 8016b34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016b38:	fb09 220b 	mla	r2, r9, fp, r2
 8016b3c:	4452      	add	r2, sl
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b44:	f84c 3b04 	str.w	r3, [ip], #4
 8016b48:	f857 3b04 	ldr.w	r3, [r7], #4
 8016b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b50:	f8bc 3000 	ldrh.w	r3, [ip]
 8016b54:	fb09 330a 	mla	r3, r9, sl, r3
 8016b58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016b5c:	42bd      	cmp	r5, r7
 8016b5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b62:	d8e5      	bhi.n	8016b30 <__multiply+0xfc>
 8016b64:	9a01      	ldr	r2, [sp, #4]
 8016b66:	50a3      	str	r3, [r4, r2]
 8016b68:	3404      	adds	r4, #4
 8016b6a:	e79f      	b.n	8016aac <__multiply+0x78>
 8016b6c:	3e01      	subs	r6, #1
 8016b6e:	e7a1      	b.n	8016ab4 <__multiply+0x80>
 8016b70:	08018032 	.word	0x08018032
 8016b74:	080180a3 	.word	0x080180a3

08016b78 <__pow5mult>:
 8016b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b7c:	4615      	mov	r5, r2
 8016b7e:	f012 0203 	ands.w	r2, r2, #3
 8016b82:	4607      	mov	r7, r0
 8016b84:	460e      	mov	r6, r1
 8016b86:	d007      	beq.n	8016b98 <__pow5mult+0x20>
 8016b88:	4c25      	ldr	r4, [pc, #148]	@ (8016c20 <__pow5mult+0xa8>)
 8016b8a:	3a01      	subs	r2, #1
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b92:	f7ff fe5d 	bl	8016850 <__multadd>
 8016b96:	4606      	mov	r6, r0
 8016b98:	10ad      	asrs	r5, r5, #2
 8016b9a:	d03d      	beq.n	8016c18 <__pow5mult+0xa0>
 8016b9c:	69fc      	ldr	r4, [r7, #28]
 8016b9e:	b97c      	cbnz	r4, 8016bc0 <__pow5mult+0x48>
 8016ba0:	2010      	movs	r0, #16
 8016ba2:	f7ff fd2b 	bl	80165fc <malloc>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	61f8      	str	r0, [r7, #28]
 8016baa:	b928      	cbnz	r0, 8016bb8 <__pow5mult+0x40>
 8016bac:	4b1d      	ldr	r3, [pc, #116]	@ (8016c24 <__pow5mult+0xac>)
 8016bae:	481e      	ldr	r0, [pc, #120]	@ (8016c28 <__pow5mult+0xb0>)
 8016bb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016bb4:	f000 fd30 	bl	8017618 <__assert_func>
 8016bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016bbc:	6004      	str	r4, [r0, #0]
 8016bbe:	60c4      	str	r4, [r0, #12]
 8016bc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016bc8:	b94c      	cbnz	r4, 8016bde <__pow5mult+0x66>
 8016bca:	f240 2171 	movw	r1, #625	@ 0x271
 8016bce:	4638      	mov	r0, r7
 8016bd0:	f7ff ff1a 	bl	8016a08 <__i2b>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016bda:	4604      	mov	r4, r0
 8016bdc:	6003      	str	r3, [r0, #0]
 8016bde:	f04f 0900 	mov.w	r9, #0
 8016be2:	07eb      	lsls	r3, r5, #31
 8016be4:	d50a      	bpl.n	8016bfc <__pow5mult+0x84>
 8016be6:	4631      	mov	r1, r6
 8016be8:	4622      	mov	r2, r4
 8016bea:	4638      	mov	r0, r7
 8016bec:	f7ff ff22 	bl	8016a34 <__multiply>
 8016bf0:	4631      	mov	r1, r6
 8016bf2:	4680      	mov	r8, r0
 8016bf4:	4638      	mov	r0, r7
 8016bf6:	f7ff fe09 	bl	801680c <_Bfree>
 8016bfa:	4646      	mov	r6, r8
 8016bfc:	106d      	asrs	r5, r5, #1
 8016bfe:	d00b      	beq.n	8016c18 <__pow5mult+0xa0>
 8016c00:	6820      	ldr	r0, [r4, #0]
 8016c02:	b938      	cbnz	r0, 8016c14 <__pow5mult+0x9c>
 8016c04:	4622      	mov	r2, r4
 8016c06:	4621      	mov	r1, r4
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f7ff ff13 	bl	8016a34 <__multiply>
 8016c0e:	6020      	str	r0, [r4, #0]
 8016c10:	f8c0 9000 	str.w	r9, [r0]
 8016c14:	4604      	mov	r4, r0
 8016c16:	e7e4      	b.n	8016be2 <__pow5mult+0x6a>
 8016c18:	4630      	mov	r0, r6
 8016c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c1e:	bf00      	nop
 8016c20:	080181a0 	.word	0x080181a0
 8016c24:	08017fc3 	.word	0x08017fc3
 8016c28:	080180a3 	.word	0x080180a3

08016c2c <__lshift>:
 8016c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c30:	460c      	mov	r4, r1
 8016c32:	6849      	ldr	r1, [r1, #4]
 8016c34:	6923      	ldr	r3, [r4, #16]
 8016c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016c3a:	68a3      	ldr	r3, [r4, #8]
 8016c3c:	4607      	mov	r7, r0
 8016c3e:	4691      	mov	r9, r2
 8016c40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c44:	f108 0601 	add.w	r6, r8, #1
 8016c48:	42b3      	cmp	r3, r6
 8016c4a:	db0b      	blt.n	8016c64 <__lshift+0x38>
 8016c4c:	4638      	mov	r0, r7
 8016c4e:	f7ff fd9d 	bl	801678c <_Balloc>
 8016c52:	4605      	mov	r5, r0
 8016c54:	b948      	cbnz	r0, 8016c6a <__lshift+0x3e>
 8016c56:	4602      	mov	r2, r0
 8016c58:	4b28      	ldr	r3, [pc, #160]	@ (8016cfc <__lshift+0xd0>)
 8016c5a:	4829      	ldr	r0, [pc, #164]	@ (8016d00 <__lshift+0xd4>)
 8016c5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016c60:	f000 fcda 	bl	8017618 <__assert_func>
 8016c64:	3101      	adds	r1, #1
 8016c66:	005b      	lsls	r3, r3, #1
 8016c68:	e7ee      	b.n	8016c48 <__lshift+0x1c>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	f100 0114 	add.w	r1, r0, #20
 8016c70:	f100 0210 	add.w	r2, r0, #16
 8016c74:	4618      	mov	r0, r3
 8016c76:	4553      	cmp	r3, sl
 8016c78:	db33      	blt.n	8016ce2 <__lshift+0xb6>
 8016c7a:	6920      	ldr	r0, [r4, #16]
 8016c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c80:	f104 0314 	add.w	r3, r4, #20
 8016c84:	f019 091f 	ands.w	r9, r9, #31
 8016c88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c90:	d02b      	beq.n	8016cea <__lshift+0xbe>
 8016c92:	f1c9 0e20 	rsb	lr, r9, #32
 8016c96:	468a      	mov	sl, r1
 8016c98:	2200      	movs	r2, #0
 8016c9a:	6818      	ldr	r0, [r3, #0]
 8016c9c:	fa00 f009 	lsl.w	r0, r0, r9
 8016ca0:	4310      	orrs	r0, r2
 8016ca2:	f84a 0b04 	str.w	r0, [sl], #4
 8016ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016caa:	459c      	cmp	ip, r3
 8016cac:	fa22 f20e 	lsr.w	r2, r2, lr
 8016cb0:	d8f3      	bhi.n	8016c9a <__lshift+0x6e>
 8016cb2:	ebac 0304 	sub.w	r3, ip, r4
 8016cb6:	3b15      	subs	r3, #21
 8016cb8:	f023 0303 	bic.w	r3, r3, #3
 8016cbc:	3304      	adds	r3, #4
 8016cbe:	f104 0015 	add.w	r0, r4, #21
 8016cc2:	4560      	cmp	r0, ip
 8016cc4:	bf88      	it	hi
 8016cc6:	2304      	movhi	r3, #4
 8016cc8:	50ca      	str	r2, [r1, r3]
 8016cca:	b10a      	cbz	r2, 8016cd0 <__lshift+0xa4>
 8016ccc:	f108 0602 	add.w	r6, r8, #2
 8016cd0:	3e01      	subs	r6, #1
 8016cd2:	4638      	mov	r0, r7
 8016cd4:	612e      	str	r6, [r5, #16]
 8016cd6:	4621      	mov	r1, r4
 8016cd8:	f7ff fd98 	bl	801680c <_Bfree>
 8016cdc:	4628      	mov	r0, r5
 8016cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	e7c5      	b.n	8016c76 <__lshift+0x4a>
 8016cea:	3904      	subs	r1, #4
 8016cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016cf4:	459c      	cmp	ip, r3
 8016cf6:	d8f9      	bhi.n	8016cec <__lshift+0xc0>
 8016cf8:	e7ea      	b.n	8016cd0 <__lshift+0xa4>
 8016cfa:	bf00      	nop
 8016cfc:	08018032 	.word	0x08018032
 8016d00:	080180a3 	.word	0x080180a3

08016d04 <__mcmp>:
 8016d04:	690a      	ldr	r2, [r1, #16]
 8016d06:	4603      	mov	r3, r0
 8016d08:	6900      	ldr	r0, [r0, #16]
 8016d0a:	1a80      	subs	r0, r0, r2
 8016d0c:	b530      	push	{r4, r5, lr}
 8016d0e:	d10e      	bne.n	8016d2e <__mcmp+0x2a>
 8016d10:	3314      	adds	r3, #20
 8016d12:	3114      	adds	r1, #20
 8016d14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016d18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016d24:	4295      	cmp	r5, r2
 8016d26:	d003      	beq.n	8016d30 <__mcmp+0x2c>
 8016d28:	d205      	bcs.n	8016d36 <__mcmp+0x32>
 8016d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2e:	bd30      	pop	{r4, r5, pc}
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	d3f3      	bcc.n	8016d1c <__mcmp+0x18>
 8016d34:	e7fb      	b.n	8016d2e <__mcmp+0x2a>
 8016d36:	2001      	movs	r0, #1
 8016d38:	e7f9      	b.n	8016d2e <__mcmp+0x2a>
	...

08016d3c <__mdiff>:
 8016d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d40:	4689      	mov	r9, r1
 8016d42:	4606      	mov	r6, r0
 8016d44:	4611      	mov	r1, r2
 8016d46:	4648      	mov	r0, r9
 8016d48:	4614      	mov	r4, r2
 8016d4a:	f7ff ffdb 	bl	8016d04 <__mcmp>
 8016d4e:	1e05      	subs	r5, r0, #0
 8016d50:	d112      	bne.n	8016d78 <__mdiff+0x3c>
 8016d52:	4629      	mov	r1, r5
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7ff fd19 	bl	801678c <_Balloc>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	b928      	cbnz	r0, 8016d6a <__mdiff+0x2e>
 8016d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8016e5c <__mdiff+0x120>)
 8016d60:	f240 2137 	movw	r1, #567	@ 0x237
 8016d64:	483e      	ldr	r0, [pc, #248]	@ (8016e60 <__mdiff+0x124>)
 8016d66:	f000 fc57 	bl	8017618 <__assert_func>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d70:	4610      	mov	r0, r2
 8016d72:	b003      	add	sp, #12
 8016d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d78:	bfbc      	itt	lt
 8016d7a:	464b      	movlt	r3, r9
 8016d7c:	46a1      	movlt	r9, r4
 8016d7e:	4630      	mov	r0, r6
 8016d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016d84:	bfba      	itte	lt
 8016d86:	461c      	movlt	r4, r3
 8016d88:	2501      	movlt	r5, #1
 8016d8a:	2500      	movge	r5, #0
 8016d8c:	f7ff fcfe 	bl	801678c <_Balloc>
 8016d90:	4602      	mov	r2, r0
 8016d92:	b918      	cbnz	r0, 8016d9c <__mdiff+0x60>
 8016d94:	4b31      	ldr	r3, [pc, #196]	@ (8016e5c <__mdiff+0x120>)
 8016d96:	f240 2145 	movw	r1, #581	@ 0x245
 8016d9a:	e7e3      	b.n	8016d64 <__mdiff+0x28>
 8016d9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016da0:	6926      	ldr	r6, [r4, #16]
 8016da2:	60c5      	str	r5, [r0, #12]
 8016da4:	f109 0310 	add.w	r3, r9, #16
 8016da8:	f109 0514 	add.w	r5, r9, #20
 8016dac:	f104 0e14 	add.w	lr, r4, #20
 8016db0:	f100 0b14 	add.w	fp, r0, #20
 8016db4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016db8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016dbc:	9301      	str	r3, [sp, #4]
 8016dbe:	46d9      	mov	r9, fp
 8016dc0:	f04f 0c00 	mov.w	ip, #0
 8016dc4:	9b01      	ldr	r3, [sp, #4]
 8016dc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016dca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016dce:	9301      	str	r3, [sp, #4]
 8016dd0:	fa1f f38a 	uxth.w	r3, sl
 8016dd4:	4619      	mov	r1, r3
 8016dd6:	b283      	uxth	r3, r0
 8016dd8:	1acb      	subs	r3, r1, r3
 8016dda:	0c00      	lsrs	r0, r0, #16
 8016ddc:	4463      	add	r3, ip
 8016dde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016de2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016dec:	4576      	cmp	r6, lr
 8016dee:	f849 3b04 	str.w	r3, [r9], #4
 8016df2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016df6:	d8e5      	bhi.n	8016dc4 <__mdiff+0x88>
 8016df8:	1b33      	subs	r3, r6, r4
 8016dfa:	3b15      	subs	r3, #21
 8016dfc:	f023 0303 	bic.w	r3, r3, #3
 8016e00:	3415      	adds	r4, #21
 8016e02:	3304      	adds	r3, #4
 8016e04:	42a6      	cmp	r6, r4
 8016e06:	bf38      	it	cc
 8016e08:	2304      	movcc	r3, #4
 8016e0a:	441d      	add	r5, r3
 8016e0c:	445b      	add	r3, fp
 8016e0e:	461e      	mov	r6, r3
 8016e10:	462c      	mov	r4, r5
 8016e12:	4544      	cmp	r4, r8
 8016e14:	d30e      	bcc.n	8016e34 <__mdiff+0xf8>
 8016e16:	f108 0103 	add.w	r1, r8, #3
 8016e1a:	1b49      	subs	r1, r1, r5
 8016e1c:	f021 0103 	bic.w	r1, r1, #3
 8016e20:	3d03      	subs	r5, #3
 8016e22:	45a8      	cmp	r8, r5
 8016e24:	bf38      	it	cc
 8016e26:	2100      	movcc	r1, #0
 8016e28:	440b      	add	r3, r1
 8016e2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e2e:	b191      	cbz	r1, 8016e56 <__mdiff+0x11a>
 8016e30:	6117      	str	r7, [r2, #16]
 8016e32:	e79d      	b.n	8016d70 <__mdiff+0x34>
 8016e34:	f854 1b04 	ldr.w	r1, [r4], #4
 8016e38:	46e6      	mov	lr, ip
 8016e3a:	0c08      	lsrs	r0, r1, #16
 8016e3c:	fa1c fc81 	uxtah	ip, ip, r1
 8016e40:	4471      	add	r1, lr
 8016e42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016e46:	b289      	uxth	r1, r1
 8016e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016e4c:	f846 1b04 	str.w	r1, [r6], #4
 8016e50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e54:	e7dd      	b.n	8016e12 <__mdiff+0xd6>
 8016e56:	3f01      	subs	r7, #1
 8016e58:	e7e7      	b.n	8016e2a <__mdiff+0xee>
 8016e5a:	bf00      	nop
 8016e5c:	08018032 	.word	0x08018032
 8016e60:	080180a3 	.word	0x080180a3

08016e64 <__ulp>:
 8016e64:	b082      	sub	sp, #8
 8016e66:	ed8d 0b00 	vstr	d0, [sp]
 8016e6a:	9a01      	ldr	r2, [sp, #4]
 8016e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8016eac <__ulp+0x48>)
 8016e6e:	4013      	ands	r3, r2
 8016e70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	dc08      	bgt.n	8016e8a <__ulp+0x26>
 8016e78:	425b      	negs	r3, r3
 8016e7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016e7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016e82:	da04      	bge.n	8016e8e <__ulp+0x2a>
 8016e84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016e88:	4113      	asrs	r3, r2
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	e008      	b.n	8016ea0 <__ulp+0x3c>
 8016e8e:	f1a2 0314 	sub.w	r3, r2, #20
 8016e92:	2b1e      	cmp	r3, #30
 8016e94:	bfda      	itte	le
 8016e96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016e9a:	40da      	lsrle	r2, r3
 8016e9c:	2201      	movgt	r2, #1
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	4610      	mov	r0, r2
 8016ea4:	ec41 0b10 	vmov	d0, r0, r1
 8016ea8:	b002      	add	sp, #8
 8016eaa:	4770      	bx	lr
 8016eac:	7ff00000 	.word	0x7ff00000

08016eb0 <__b2d>:
 8016eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb4:	6906      	ldr	r6, [r0, #16]
 8016eb6:	f100 0814 	add.w	r8, r0, #20
 8016eba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016ebe:	1f37      	subs	r7, r6, #4
 8016ec0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016ec4:	4610      	mov	r0, r2
 8016ec6:	f7ff fd53 	bl	8016970 <__hi0bits>
 8016eca:	f1c0 0320 	rsb	r3, r0, #32
 8016ece:	280a      	cmp	r0, #10
 8016ed0:	600b      	str	r3, [r1, #0]
 8016ed2:	491b      	ldr	r1, [pc, #108]	@ (8016f40 <__b2d+0x90>)
 8016ed4:	dc15      	bgt.n	8016f02 <__b2d+0x52>
 8016ed6:	f1c0 0c0b 	rsb	ip, r0, #11
 8016eda:	fa22 f30c 	lsr.w	r3, r2, ip
 8016ede:	45b8      	cmp	r8, r7
 8016ee0:	ea43 0501 	orr.w	r5, r3, r1
 8016ee4:	bf34      	ite	cc
 8016ee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016eea:	2300      	movcs	r3, #0
 8016eec:	3015      	adds	r0, #21
 8016eee:	fa02 f000 	lsl.w	r0, r2, r0
 8016ef2:	fa23 f30c 	lsr.w	r3, r3, ip
 8016ef6:	4303      	orrs	r3, r0
 8016ef8:	461c      	mov	r4, r3
 8016efa:	ec45 4b10 	vmov	d0, r4, r5
 8016efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f02:	45b8      	cmp	r8, r7
 8016f04:	bf3a      	itte	cc
 8016f06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016f0e:	2300      	movcs	r3, #0
 8016f10:	380b      	subs	r0, #11
 8016f12:	d012      	beq.n	8016f3a <__b2d+0x8a>
 8016f14:	f1c0 0120 	rsb	r1, r0, #32
 8016f18:	fa23 f401 	lsr.w	r4, r3, r1
 8016f1c:	4082      	lsls	r2, r0
 8016f1e:	4322      	orrs	r2, r4
 8016f20:	4547      	cmp	r7, r8
 8016f22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016f26:	bf8c      	ite	hi
 8016f28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016f2c:	2200      	movls	r2, #0
 8016f2e:	4083      	lsls	r3, r0
 8016f30:	40ca      	lsrs	r2, r1
 8016f32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016f36:	4313      	orrs	r3, r2
 8016f38:	e7de      	b.n	8016ef8 <__b2d+0x48>
 8016f3a:	ea42 0501 	orr.w	r5, r2, r1
 8016f3e:	e7db      	b.n	8016ef8 <__b2d+0x48>
 8016f40:	3ff00000 	.word	0x3ff00000

08016f44 <__d2b>:
 8016f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f48:	460f      	mov	r7, r1
 8016f4a:	2101      	movs	r1, #1
 8016f4c:	ec59 8b10 	vmov	r8, r9, d0
 8016f50:	4616      	mov	r6, r2
 8016f52:	f7ff fc1b 	bl	801678c <_Balloc>
 8016f56:	4604      	mov	r4, r0
 8016f58:	b930      	cbnz	r0, 8016f68 <__d2b+0x24>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	4b23      	ldr	r3, [pc, #140]	@ (8016fec <__d2b+0xa8>)
 8016f5e:	4824      	ldr	r0, [pc, #144]	@ (8016ff0 <__d2b+0xac>)
 8016f60:	f240 310f 	movw	r1, #783	@ 0x30f
 8016f64:	f000 fb58 	bl	8017618 <__assert_func>
 8016f68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f70:	b10d      	cbz	r5, 8016f76 <__d2b+0x32>
 8016f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f76:	9301      	str	r3, [sp, #4]
 8016f78:	f1b8 0300 	subs.w	r3, r8, #0
 8016f7c:	d023      	beq.n	8016fc6 <__d2b+0x82>
 8016f7e:	4668      	mov	r0, sp
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	f7ff fd14 	bl	80169ae <__lo0bits>
 8016f86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f8a:	b1d0      	cbz	r0, 8016fc2 <__d2b+0x7e>
 8016f8c:	f1c0 0320 	rsb	r3, r0, #32
 8016f90:	fa02 f303 	lsl.w	r3, r2, r3
 8016f94:	430b      	orrs	r3, r1
 8016f96:	40c2      	lsrs	r2, r0
 8016f98:	6163      	str	r3, [r4, #20]
 8016f9a:	9201      	str	r2, [sp, #4]
 8016f9c:	9b01      	ldr	r3, [sp, #4]
 8016f9e:	61a3      	str	r3, [r4, #24]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	bf0c      	ite	eq
 8016fa4:	2201      	moveq	r2, #1
 8016fa6:	2202      	movne	r2, #2
 8016fa8:	6122      	str	r2, [r4, #16]
 8016faa:	b1a5      	cbz	r5, 8016fd6 <__d2b+0x92>
 8016fac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016fb0:	4405      	add	r5, r0
 8016fb2:	603d      	str	r5, [r7, #0]
 8016fb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016fb8:	6030      	str	r0, [r6, #0]
 8016fba:	4620      	mov	r0, r4
 8016fbc:	b003      	add	sp, #12
 8016fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fc2:	6161      	str	r1, [r4, #20]
 8016fc4:	e7ea      	b.n	8016f9c <__d2b+0x58>
 8016fc6:	a801      	add	r0, sp, #4
 8016fc8:	f7ff fcf1 	bl	80169ae <__lo0bits>
 8016fcc:	9b01      	ldr	r3, [sp, #4]
 8016fce:	6163      	str	r3, [r4, #20]
 8016fd0:	3020      	adds	r0, #32
 8016fd2:	2201      	movs	r2, #1
 8016fd4:	e7e8      	b.n	8016fa8 <__d2b+0x64>
 8016fd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016fda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016fde:	6038      	str	r0, [r7, #0]
 8016fe0:	6918      	ldr	r0, [r3, #16]
 8016fe2:	f7ff fcc5 	bl	8016970 <__hi0bits>
 8016fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016fea:	e7e5      	b.n	8016fb8 <__d2b+0x74>
 8016fec:	08018032 	.word	0x08018032
 8016ff0:	080180a3 	.word	0x080180a3

08016ff4 <__ratio>:
 8016ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff8:	4688      	mov	r8, r1
 8016ffa:	4669      	mov	r1, sp
 8016ffc:	4681      	mov	r9, r0
 8016ffe:	f7ff ff57 	bl	8016eb0 <__b2d>
 8017002:	a901      	add	r1, sp, #4
 8017004:	4640      	mov	r0, r8
 8017006:	ec55 4b10 	vmov	r4, r5, d0
 801700a:	f7ff ff51 	bl	8016eb0 <__b2d>
 801700e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017012:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017016:	1ad2      	subs	r2, r2, r3
 8017018:	e9dd 3100 	ldrd	r3, r1, [sp]
 801701c:	1a5b      	subs	r3, r3, r1
 801701e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017022:	ec57 6b10 	vmov	r6, r7, d0
 8017026:	2b00      	cmp	r3, #0
 8017028:	bfd6      	itet	le
 801702a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801702e:	462a      	movgt	r2, r5
 8017030:	463a      	movle	r2, r7
 8017032:	46ab      	mov	fp, r5
 8017034:	46a2      	mov	sl, r4
 8017036:	bfce      	itee	gt
 8017038:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801703c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017040:	ee00 3a90 	vmovle	s1, r3
 8017044:	ec4b ab17 	vmov	d7, sl, fp
 8017048:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801704c:	b003      	add	sp, #12
 801704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017052 <__copybits>:
 8017052:	3901      	subs	r1, #1
 8017054:	b570      	push	{r4, r5, r6, lr}
 8017056:	1149      	asrs	r1, r1, #5
 8017058:	6914      	ldr	r4, [r2, #16]
 801705a:	3101      	adds	r1, #1
 801705c:	f102 0314 	add.w	r3, r2, #20
 8017060:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017064:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017068:	1f05      	subs	r5, r0, #4
 801706a:	42a3      	cmp	r3, r4
 801706c:	d30c      	bcc.n	8017088 <__copybits+0x36>
 801706e:	1aa3      	subs	r3, r4, r2
 8017070:	3b11      	subs	r3, #17
 8017072:	f023 0303 	bic.w	r3, r3, #3
 8017076:	3211      	adds	r2, #17
 8017078:	42a2      	cmp	r2, r4
 801707a:	bf88      	it	hi
 801707c:	2300      	movhi	r3, #0
 801707e:	4418      	add	r0, r3
 8017080:	2300      	movs	r3, #0
 8017082:	4288      	cmp	r0, r1
 8017084:	d305      	bcc.n	8017092 <__copybits+0x40>
 8017086:	bd70      	pop	{r4, r5, r6, pc}
 8017088:	f853 6b04 	ldr.w	r6, [r3], #4
 801708c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017090:	e7eb      	b.n	801706a <__copybits+0x18>
 8017092:	f840 3b04 	str.w	r3, [r0], #4
 8017096:	e7f4      	b.n	8017082 <__copybits+0x30>

08017098 <__any_on>:
 8017098:	f100 0214 	add.w	r2, r0, #20
 801709c:	6900      	ldr	r0, [r0, #16]
 801709e:	114b      	asrs	r3, r1, #5
 80170a0:	4298      	cmp	r0, r3
 80170a2:	b510      	push	{r4, lr}
 80170a4:	db11      	blt.n	80170ca <__any_on+0x32>
 80170a6:	dd0a      	ble.n	80170be <__any_on+0x26>
 80170a8:	f011 011f 	ands.w	r1, r1, #31
 80170ac:	d007      	beq.n	80170be <__any_on+0x26>
 80170ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80170b2:	fa24 f001 	lsr.w	r0, r4, r1
 80170b6:	fa00 f101 	lsl.w	r1, r0, r1
 80170ba:	428c      	cmp	r4, r1
 80170bc:	d10b      	bne.n	80170d6 <__any_on+0x3e>
 80170be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80170c2:	4293      	cmp	r3, r2
 80170c4:	d803      	bhi.n	80170ce <__any_on+0x36>
 80170c6:	2000      	movs	r0, #0
 80170c8:	bd10      	pop	{r4, pc}
 80170ca:	4603      	mov	r3, r0
 80170cc:	e7f7      	b.n	80170be <__any_on+0x26>
 80170ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80170d2:	2900      	cmp	r1, #0
 80170d4:	d0f5      	beq.n	80170c2 <__any_on+0x2a>
 80170d6:	2001      	movs	r0, #1
 80170d8:	e7f6      	b.n	80170c8 <__any_on+0x30>

080170da <__ascii_wctomb>:
 80170da:	4603      	mov	r3, r0
 80170dc:	4608      	mov	r0, r1
 80170de:	b141      	cbz	r1, 80170f2 <__ascii_wctomb+0x18>
 80170e0:	2aff      	cmp	r2, #255	@ 0xff
 80170e2:	d904      	bls.n	80170ee <__ascii_wctomb+0x14>
 80170e4:	228a      	movs	r2, #138	@ 0x8a
 80170e6:	601a      	str	r2, [r3, #0]
 80170e8:	f04f 30ff 	mov.w	r0, #4294967295
 80170ec:	4770      	bx	lr
 80170ee:	700a      	strb	r2, [r1, #0]
 80170f0:	2001      	movs	r0, #1
 80170f2:	4770      	bx	lr

080170f4 <__sfputc_r>:
 80170f4:	6893      	ldr	r3, [r2, #8]
 80170f6:	3b01      	subs	r3, #1
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	b410      	push	{r4}
 80170fc:	6093      	str	r3, [r2, #8]
 80170fe:	da08      	bge.n	8017112 <__sfputc_r+0x1e>
 8017100:	6994      	ldr	r4, [r2, #24]
 8017102:	42a3      	cmp	r3, r4
 8017104:	db01      	blt.n	801710a <__sfputc_r+0x16>
 8017106:	290a      	cmp	r1, #10
 8017108:	d103      	bne.n	8017112 <__sfputc_r+0x1e>
 801710a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801710e:	f000 b9df 	b.w	80174d0 <__swbuf_r>
 8017112:	6813      	ldr	r3, [r2, #0]
 8017114:	1c58      	adds	r0, r3, #1
 8017116:	6010      	str	r0, [r2, #0]
 8017118:	7019      	strb	r1, [r3, #0]
 801711a:	4608      	mov	r0, r1
 801711c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017120:	4770      	bx	lr

08017122 <__sfputs_r>:
 8017122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017124:	4606      	mov	r6, r0
 8017126:	460f      	mov	r7, r1
 8017128:	4614      	mov	r4, r2
 801712a:	18d5      	adds	r5, r2, r3
 801712c:	42ac      	cmp	r4, r5
 801712e:	d101      	bne.n	8017134 <__sfputs_r+0x12>
 8017130:	2000      	movs	r0, #0
 8017132:	e007      	b.n	8017144 <__sfputs_r+0x22>
 8017134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017138:	463a      	mov	r2, r7
 801713a:	4630      	mov	r0, r6
 801713c:	f7ff ffda 	bl	80170f4 <__sfputc_r>
 8017140:	1c43      	adds	r3, r0, #1
 8017142:	d1f3      	bne.n	801712c <__sfputs_r+0xa>
 8017144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017148 <_vfiprintf_r>:
 8017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	460d      	mov	r5, r1
 801714e:	b09d      	sub	sp, #116	@ 0x74
 8017150:	4614      	mov	r4, r2
 8017152:	4698      	mov	r8, r3
 8017154:	4606      	mov	r6, r0
 8017156:	b118      	cbz	r0, 8017160 <_vfiprintf_r+0x18>
 8017158:	6a03      	ldr	r3, [r0, #32]
 801715a:	b90b      	cbnz	r3, 8017160 <_vfiprintf_r+0x18>
 801715c:	f7fd ff26 	bl	8014fac <__sinit>
 8017160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017162:	07d9      	lsls	r1, r3, #31
 8017164:	d405      	bmi.n	8017172 <_vfiprintf_r+0x2a>
 8017166:	89ab      	ldrh	r3, [r5, #12]
 8017168:	059a      	lsls	r2, r3, #22
 801716a:	d402      	bmi.n	8017172 <_vfiprintf_r+0x2a>
 801716c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801716e:	f7fe f8b8 	bl	80152e2 <__retarget_lock_acquire_recursive>
 8017172:	89ab      	ldrh	r3, [r5, #12]
 8017174:	071b      	lsls	r3, r3, #28
 8017176:	d501      	bpl.n	801717c <_vfiprintf_r+0x34>
 8017178:	692b      	ldr	r3, [r5, #16]
 801717a:	b99b      	cbnz	r3, 80171a4 <_vfiprintf_r+0x5c>
 801717c:	4629      	mov	r1, r5
 801717e:	4630      	mov	r0, r6
 8017180:	f000 f9e4 	bl	801754c <__swsetup_r>
 8017184:	b170      	cbz	r0, 80171a4 <_vfiprintf_r+0x5c>
 8017186:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017188:	07dc      	lsls	r4, r3, #31
 801718a:	d504      	bpl.n	8017196 <_vfiprintf_r+0x4e>
 801718c:	f04f 30ff 	mov.w	r0, #4294967295
 8017190:	b01d      	add	sp, #116	@ 0x74
 8017192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017196:	89ab      	ldrh	r3, [r5, #12]
 8017198:	0598      	lsls	r0, r3, #22
 801719a:	d4f7      	bmi.n	801718c <_vfiprintf_r+0x44>
 801719c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801719e:	f7fe f8a1 	bl	80152e4 <__retarget_lock_release_recursive>
 80171a2:	e7f3      	b.n	801718c <_vfiprintf_r+0x44>
 80171a4:	2300      	movs	r3, #0
 80171a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a8:	2320      	movs	r3, #32
 80171aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80171b2:	2330      	movs	r3, #48	@ 0x30
 80171b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017364 <_vfiprintf_r+0x21c>
 80171b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171bc:	f04f 0901 	mov.w	r9, #1
 80171c0:	4623      	mov	r3, r4
 80171c2:	469a      	mov	sl, r3
 80171c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c8:	b10a      	cbz	r2, 80171ce <_vfiprintf_r+0x86>
 80171ca:	2a25      	cmp	r2, #37	@ 0x25
 80171cc:	d1f9      	bne.n	80171c2 <_vfiprintf_r+0x7a>
 80171ce:	ebba 0b04 	subs.w	fp, sl, r4
 80171d2:	d00b      	beq.n	80171ec <_vfiprintf_r+0xa4>
 80171d4:	465b      	mov	r3, fp
 80171d6:	4622      	mov	r2, r4
 80171d8:	4629      	mov	r1, r5
 80171da:	4630      	mov	r0, r6
 80171dc:	f7ff ffa1 	bl	8017122 <__sfputs_r>
 80171e0:	3001      	adds	r0, #1
 80171e2:	f000 80a7 	beq.w	8017334 <_vfiprintf_r+0x1ec>
 80171e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e8:	445a      	add	r2, fp
 80171ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80171ec:	f89a 3000 	ldrb.w	r3, [sl]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	f000 809f 	beq.w	8017334 <_vfiprintf_r+0x1ec>
 80171f6:	2300      	movs	r3, #0
 80171f8:	f04f 32ff 	mov.w	r2, #4294967295
 80171fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017200:	f10a 0a01 	add.w	sl, sl, #1
 8017204:	9304      	str	r3, [sp, #16]
 8017206:	9307      	str	r3, [sp, #28]
 8017208:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801720c:	931a      	str	r3, [sp, #104]	@ 0x68
 801720e:	4654      	mov	r4, sl
 8017210:	2205      	movs	r2, #5
 8017212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017216:	4853      	ldr	r0, [pc, #332]	@ (8017364 <_vfiprintf_r+0x21c>)
 8017218:	f7e9 f862 	bl	80002e0 <memchr>
 801721c:	9a04      	ldr	r2, [sp, #16]
 801721e:	b9d8      	cbnz	r0, 8017258 <_vfiprintf_r+0x110>
 8017220:	06d1      	lsls	r1, r2, #27
 8017222:	bf44      	itt	mi
 8017224:	2320      	movmi	r3, #32
 8017226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801722a:	0713      	lsls	r3, r2, #28
 801722c:	bf44      	itt	mi
 801722e:	232b      	movmi	r3, #43	@ 0x2b
 8017230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017234:	f89a 3000 	ldrb.w	r3, [sl]
 8017238:	2b2a      	cmp	r3, #42	@ 0x2a
 801723a:	d015      	beq.n	8017268 <_vfiprintf_r+0x120>
 801723c:	9a07      	ldr	r2, [sp, #28]
 801723e:	4654      	mov	r4, sl
 8017240:	2000      	movs	r0, #0
 8017242:	f04f 0c0a 	mov.w	ip, #10
 8017246:	4621      	mov	r1, r4
 8017248:	f811 3b01 	ldrb.w	r3, [r1], #1
 801724c:	3b30      	subs	r3, #48	@ 0x30
 801724e:	2b09      	cmp	r3, #9
 8017250:	d94b      	bls.n	80172ea <_vfiprintf_r+0x1a2>
 8017252:	b1b0      	cbz	r0, 8017282 <_vfiprintf_r+0x13a>
 8017254:	9207      	str	r2, [sp, #28]
 8017256:	e014      	b.n	8017282 <_vfiprintf_r+0x13a>
 8017258:	eba0 0308 	sub.w	r3, r0, r8
 801725c:	fa09 f303 	lsl.w	r3, r9, r3
 8017260:	4313      	orrs	r3, r2
 8017262:	9304      	str	r3, [sp, #16]
 8017264:	46a2      	mov	sl, r4
 8017266:	e7d2      	b.n	801720e <_vfiprintf_r+0xc6>
 8017268:	9b03      	ldr	r3, [sp, #12]
 801726a:	1d19      	adds	r1, r3, #4
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	9103      	str	r1, [sp, #12]
 8017270:	2b00      	cmp	r3, #0
 8017272:	bfbb      	ittet	lt
 8017274:	425b      	neglt	r3, r3
 8017276:	f042 0202 	orrlt.w	r2, r2, #2
 801727a:	9307      	strge	r3, [sp, #28]
 801727c:	9307      	strlt	r3, [sp, #28]
 801727e:	bfb8      	it	lt
 8017280:	9204      	strlt	r2, [sp, #16]
 8017282:	7823      	ldrb	r3, [r4, #0]
 8017284:	2b2e      	cmp	r3, #46	@ 0x2e
 8017286:	d10a      	bne.n	801729e <_vfiprintf_r+0x156>
 8017288:	7863      	ldrb	r3, [r4, #1]
 801728a:	2b2a      	cmp	r3, #42	@ 0x2a
 801728c:	d132      	bne.n	80172f4 <_vfiprintf_r+0x1ac>
 801728e:	9b03      	ldr	r3, [sp, #12]
 8017290:	1d1a      	adds	r2, r3, #4
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	9203      	str	r2, [sp, #12]
 8017296:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801729a:	3402      	adds	r4, #2
 801729c:	9305      	str	r3, [sp, #20]
 801729e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017374 <_vfiprintf_r+0x22c>
 80172a2:	7821      	ldrb	r1, [r4, #0]
 80172a4:	2203      	movs	r2, #3
 80172a6:	4650      	mov	r0, sl
 80172a8:	f7e9 f81a 	bl	80002e0 <memchr>
 80172ac:	b138      	cbz	r0, 80172be <_vfiprintf_r+0x176>
 80172ae:	9b04      	ldr	r3, [sp, #16]
 80172b0:	eba0 000a 	sub.w	r0, r0, sl
 80172b4:	2240      	movs	r2, #64	@ 0x40
 80172b6:	4082      	lsls	r2, r0
 80172b8:	4313      	orrs	r3, r2
 80172ba:	3401      	adds	r4, #1
 80172bc:	9304      	str	r3, [sp, #16]
 80172be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172c2:	4829      	ldr	r0, [pc, #164]	@ (8017368 <_vfiprintf_r+0x220>)
 80172c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172c8:	2206      	movs	r2, #6
 80172ca:	f7e9 f809 	bl	80002e0 <memchr>
 80172ce:	2800      	cmp	r0, #0
 80172d0:	d03f      	beq.n	8017352 <_vfiprintf_r+0x20a>
 80172d2:	4b26      	ldr	r3, [pc, #152]	@ (801736c <_vfiprintf_r+0x224>)
 80172d4:	bb1b      	cbnz	r3, 801731e <_vfiprintf_r+0x1d6>
 80172d6:	9b03      	ldr	r3, [sp, #12]
 80172d8:	3307      	adds	r3, #7
 80172da:	f023 0307 	bic.w	r3, r3, #7
 80172de:	3308      	adds	r3, #8
 80172e0:	9303      	str	r3, [sp, #12]
 80172e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e4:	443b      	add	r3, r7
 80172e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e8:	e76a      	b.n	80171c0 <_vfiprintf_r+0x78>
 80172ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80172ee:	460c      	mov	r4, r1
 80172f0:	2001      	movs	r0, #1
 80172f2:	e7a8      	b.n	8017246 <_vfiprintf_r+0xfe>
 80172f4:	2300      	movs	r3, #0
 80172f6:	3401      	adds	r4, #1
 80172f8:	9305      	str	r3, [sp, #20]
 80172fa:	4619      	mov	r1, r3
 80172fc:	f04f 0c0a 	mov.w	ip, #10
 8017300:	4620      	mov	r0, r4
 8017302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017306:	3a30      	subs	r2, #48	@ 0x30
 8017308:	2a09      	cmp	r2, #9
 801730a:	d903      	bls.n	8017314 <_vfiprintf_r+0x1cc>
 801730c:	2b00      	cmp	r3, #0
 801730e:	d0c6      	beq.n	801729e <_vfiprintf_r+0x156>
 8017310:	9105      	str	r1, [sp, #20]
 8017312:	e7c4      	b.n	801729e <_vfiprintf_r+0x156>
 8017314:	fb0c 2101 	mla	r1, ip, r1, r2
 8017318:	4604      	mov	r4, r0
 801731a:	2301      	movs	r3, #1
 801731c:	e7f0      	b.n	8017300 <_vfiprintf_r+0x1b8>
 801731e:	ab03      	add	r3, sp, #12
 8017320:	9300      	str	r3, [sp, #0]
 8017322:	462a      	mov	r2, r5
 8017324:	4b12      	ldr	r3, [pc, #72]	@ (8017370 <_vfiprintf_r+0x228>)
 8017326:	a904      	add	r1, sp, #16
 8017328:	4630      	mov	r0, r6
 801732a:	f7fd fa0d 	bl	8014748 <_printf_float>
 801732e:	4607      	mov	r7, r0
 8017330:	1c78      	adds	r0, r7, #1
 8017332:	d1d6      	bne.n	80172e2 <_vfiprintf_r+0x19a>
 8017334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017336:	07d9      	lsls	r1, r3, #31
 8017338:	d405      	bmi.n	8017346 <_vfiprintf_r+0x1fe>
 801733a:	89ab      	ldrh	r3, [r5, #12]
 801733c:	059a      	lsls	r2, r3, #22
 801733e:	d402      	bmi.n	8017346 <_vfiprintf_r+0x1fe>
 8017340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017342:	f7fd ffcf 	bl	80152e4 <__retarget_lock_release_recursive>
 8017346:	89ab      	ldrh	r3, [r5, #12]
 8017348:	065b      	lsls	r3, r3, #25
 801734a:	f53f af1f 	bmi.w	801718c <_vfiprintf_r+0x44>
 801734e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017350:	e71e      	b.n	8017190 <_vfiprintf_r+0x48>
 8017352:	ab03      	add	r3, sp, #12
 8017354:	9300      	str	r3, [sp, #0]
 8017356:	462a      	mov	r2, r5
 8017358:	4b05      	ldr	r3, [pc, #20]	@ (8017370 <_vfiprintf_r+0x228>)
 801735a:	a904      	add	r1, sp, #16
 801735c:	4630      	mov	r0, r6
 801735e:	f7fd fc7b 	bl	8014c58 <_printf_i>
 8017362:	e7e4      	b.n	801732e <_vfiprintf_r+0x1e6>
 8017364:	080180fc 	.word	0x080180fc
 8017368:	08018106 	.word	0x08018106
 801736c:	08014749 	.word	0x08014749
 8017370:	08017123 	.word	0x08017123
 8017374:	08018102 	.word	0x08018102

08017378 <__sflush_r>:
 8017378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017380:	0716      	lsls	r6, r2, #28
 8017382:	4605      	mov	r5, r0
 8017384:	460c      	mov	r4, r1
 8017386:	d454      	bmi.n	8017432 <__sflush_r+0xba>
 8017388:	684b      	ldr	r3, [r1, #4]
 801738a:	2b00      	cmp	r3, #0
 801738c:	dc02      	bgt.n	8017394 <__sflush_r+0x1c>
 801738e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017390:	2b00      	cmp	r3, #0
 8017392:	dd48      	ble.n	8017426 <__sflush_r+0xae>
 8017394:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017396:	2e00      	cmp	r6, #0
 8017398:	d045      	beq.n	8017426 <__sflush_r+0xae>
 801739a:	2300      	movs	r3, #0
 801739c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80173a0:	682f      	ldr	r7, [r5, #0]
 80173a2:	6a21      	ldr	r1, [r4, #32]
 80173a4:	602b      	str	r3, [r5, #0]
 80173a6:	d030      	beq.n	801740a <__sflush_r+0x92>
 80173a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80173aa:	89a3      	ldrh	r3, [r4, #12]
 80173ac:	0759      	lsls	r1, r3, #29
 80173ae:	d505      	bpl.n	80173bc <__sflush_r+0x44>
 80173b0:	6863      	ldr	r3, [r4, #4]
 80173b2:	1ad2      	subs	r2, r2, r3
 80173b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80173b6:	b10b      	cbz	r3, 80173bc <__sflush_r+0x44>
 80173b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80173ba:	1ad2      	subs	r2, r2, r3
 80173bc:	2300      	movs	r3, #0
 80173be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80173c0:	6a21      	ldr	r1, [r4, #32]
 80173c2:	4628      	mov	r0, r5
 80173c4:	47b0      	blx	r6
 80173c6:	1c43      	adds	r3, r0, #1
 80173c8:	89a3      	ldrh	r3, [r4, #12]
 80173ca:	d106      	bne.n	80173da <__sflush_r+0x62>
 80173cc:	6829      	ldr	r1, [r5, #0]
 80173ce:	291d      	cmp	r1, #29
 80173d0:	d82b      	bhi.n	801742a <__sflush_r+0xb2>
 80173d2:	4a2a      	ldr	r2, [pc, #168]	@ (801747c <__sflush_r+0x104>)
 80173d4:	40ca      	lsrs	r2, r1
 80173d6:	07d6      	lsls	r6, r2, #31
 80173d8:	d527      	bpl.n	801742a <__sflush_r+0xb2>
 80173da:	2200      	movs	r2, #0
 80173dc:	6062      	str	r2, [r4, #4]
 80173de:	04d9      	lsls	r1, r3, #19
 80173e0:	6922      	ldr	r2, [r4, #16]
 80173e2:	6022      	str	r2, [r4, #0]
 80173e4:	d504      	bpl.n	80173f0 <__sflush_r+0x78>
 80173e6:	1c42      	adds	r2, r0, #1
 80173e8:	d101      	bne.n	80173ee <__sflush_r+0x76>
 80173ea:	682b      	ldr	r3, [r5, #0]
 80173ec:	b903      	cbnz	r3, 80173f0 <__sflush_r+0x78>
 80173ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80173f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173f2:	602f      	str	r7, [r5, #0]
 80173f4:	b1b9      	cbz	r1, 8017426 <__sflush_r+0xae>
 80173f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173fa:	4299      	cmp	r1, r3
 80173fc:	d002      	beq.n	8017404 <__sflush_r+0x8c>
 80173fe:	4628      	mov	r0, r5
 8017400:	f7fe fd78 	bl	8015ef4 <_free_r>
 8017404:	2300      	movs	r3, #0
 8017406:	6363      	str	r3, [r4, #52]	@ 0x34
 8017408:	e00d      	b.n	8017426 <__sflush_r+0xae>
 801740a:	2301      	movs	r3, #1
 801740c:	4628      	mov	r0, r5
 801740e:	47b0      	blx	r6
 8017410:	4602      	mov	r2, r0
 8017412:	1c50      	adds	r0, r2, #1
 8017414:	d1c9      	bne.n	80173aa <__sflush_r+0x32>
 8017416:	682b      	ldr	r3, [r5, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d0c6      	beq.n	80173aa <__sflush_r+0x32>
 801741c:	2b1d      	cmp	r3, #29
 801741e:	d001      	beq.n	8017424 <__sflush_r+0xac>
 8017420:	2b16      	cmp	r3, #22
 8017422:	d11e      	bne.n	8017462 <__sflush_r+0xea>
 8017424:	602f      	str	r7, [r5, #0]
 8017426:	2000      	movs	r0, #0
 8017428:	e022      	b.n	8017470 <__sflush_r+0xf8>
 801742a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801742e:	b21b      	sxth	r3, r3
 8017430:	e01b      	b.n	801746a <__sflush_r+0xf2>
 8017432:	690f      	ldr	r7, [r1, #16]
 8017434:	2f00      	cmp	r7, #0
 8017436:	d0f6      	beq.n	8017426 <__sflush_r+0xae>
 8017438:	0793      	lsls	r3, r2, #30
 801743a:	680e      	ldr	r6, [r1, #0]
 801743c:	bf08      	it	eq
 801743e:	694b      	ldreq	r3, [r1, #20]
 8017440:	600f      	str	r7, [r1, #0]
 8017442:	bf18      	it	ne
 8017444:	2300      	movne	r3, #0
 8017446:	eba6 0807 	sub.w	r8, r6, r7
 801744a:	608b      	str	r3, [r1, #8]
 801744c:	f1b8 0f00 	cmp.w	r8, #0
 8017450:	dde9      	ble.n	8017426 <__sflush_r+0xae>
 8017452:	6a21      	ldr	r1, [r4, #32]
 8017454:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017456:	4643      	mov	r3, r8
 8017458:	463a      	mov	r2, r7
 801745a:	4628      	mov	r0, r5
 801745c:	47b0      	blx	r6
 801745e:	2800      	cmp	r0, #0
 8017460:	dc08      	bgt.n	8017474 <__sflush_r+0xfc>
 8017462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801746a:	81a3      	strh	r3, [r4, #12]
 801746c:	f04f 30ff 	mov.w	r0, #4294967295
 8017470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017474:	4407      	add	r7, r0
 8017476:	eba8 0800 	sub.w	r8, r8, r0
 801747a:	e7e7      	b.n	801744c <__sflush_r+0xd4>
 801747c:	20400001 	.word	0x20400001

08017480 <_fflush_r>:
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	690b      	ldr	r3, [r1, #16]
 8017484:	4605      	mov	r5, r0
 8017486:	460c      	mov	r4, r1
 8017488:	b913      	cbnz	r3, 8017490 <_fflush_r+0x10>
 801748a:	2500      	movs	r5, #0
 801748c:	4628      	mov	r0, r5
 801748e:	bd38      	pop	{r3, r4, r5, pc}
 8017490:	b118      	cbz	r0, 801749a <_fflush_r+0x1a>
 8017492:	6a03      	ldr	r3, [r0, #32]
 8017494:	b90b      	cbnz	r3, 801749a <_fflush_r+0x1a>
 8017496:	f7fd fd89 	bl	8014fac <__sinit>
 801749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d0f3      	beq.n	801748a <_fflush_r+0xa>
 80174a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80174a4:	07d0      	lsls	r0, r2, #31
 80174a6:	d404      	bmi.n	80174b2 <_fflush_r+0x32>
 80174a8:	0599      	lsls	r1, r3, #22
 80174aa:	d402      	bmi.n	80174b2 <_fflush_r+0x32>
 80174ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80174ae:	f7fd ff18 	bl	80152e2 <__retarget_lock_acquire_recursive>
 80174b2:	4628      	mov	r0, r5
 80174b4:	4621      	mov	r1, r4
 80174b6:	f7ff ff5f 	bl	8017378 <__sflush_r>
 80174ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80174bc:	07da      	lsls	r2, r3, #31
 80174be:	4605      	mov	r5, r0
 80174c0:	d4e4      	bmi.n	801748c <_fflush_r+0xc>
 80174c2:	89a3      	ldrh	r3, [r4, #12]
 80174c4:	059b      	lsls	r3, r3, #22
 80174c6:	d4e1      	bmi.n	801748c <_fflush_r+0xc>
 80174c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80174ca:	f7fd ff0b 	bl	80152e4 <__retarget_lock_release_recursive>
 80174ce:	e7dd      	b.n	801748c <_fflush_r+0xc>

080174d0 <__swbuf_r>:
 80174d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d2:	460e      	mov	r6, r1
 80174d4:	4614      	mov	r4, r2
 80174d6:	4605      	mov	r5, r0
 80174d8:	b118      	cbz	r0, 80174e2 <__swbuf_r+0x12>
 80174da:	6a03      	ldr	r3, [r0, #32]
 80174dc:	b90b      	cbnz	r3, 80174e2 <__swbuf_r+0x12>
 80174de:	f7fd fd65 	bl	8014fac <__sinit>
 80174e2:	69a3      	ldr	r3, [r4, #24]
 80174e4:	60a3      	str	r3, [r4, #8]
 80174e6:	89a3      	ldrh	r3, [r4, #12]
 80174e8:	071a      	lsls	r2, r3, #28
 80174ea:	d501      	bpl.n	80174f0 <__swbuf_r+0x20>
 80174ec:	6923      	ldr	r3, [r4, #16]
 80174ee:	b943      	cbnz	r3, 8017502 <__swbuf_r+0x32>
 80174f0:	4621      	mov	r1, r4
 80174f2:	4628      	mov	r0, r5
 80174f4:	f000 f82a 	bl	801754c <__swsetup_r>
 80174f8:	b118      	cbz	r0, 8017502 <__swbuf_r+0x32>
 80174fa:	f04f 37ff 	mov.w	r7, #4294967295
 80174fe:	4638      	mov	r0, r7
 8017500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017502:	6823      	ldr	r3, [r4, #0]
 8017504:	6922      	ldr	r2, [r4, #16]
 8017506:	1a98      	subs	r0, r3, r2
 8017508:	6963      	ldr	r3, [r4, #20]
 801750a:	b2f6      	uxtb	r6, r6
 801750c:	4283      	cmp	r3, r0
 801750e:	4637      	mov	r7, r6
 8017510:	dc05      	bgt.n	801751e <__swbuf_r+0x4e>
 8017512:	4621      	mov	r1, r4
 8017514:	4628      	mov	r0, r5
 8017516:	f7ff ffb3 	bl	8017480 <_fflush_r>
 801751a:	2800      	cmp	r0, #0
 801751c:	d1ed      	bne.n	80174fa <__swbuf_r+0x2a>
 801751e:	68a3      	ldr	r3, [r4, #8]
 8017520:	3b01      	subs	r3, #1
 8017522:	60a3      	str	r3, [r4, #8]
 8017524:	6823      	ldr	r3, [r4, #0]
 8017526:	1c5a      	adds	r2, r3, #1
 8017528:	6022      	str	r2, [r4, #0]
 801752a:	701e      	strb	r6, [r3, #0]
 801752c:	6962      	ldr	r2, [r4, #20]
 801752e:	1c43      	adds	r3, r0, #1
 8017530:	429a      	cmp	r2, r3
 8017532:	d004      	beq.n	801753e <__swbuf_r+0x6e>
 8017534:	89a3      	ldrh	r3, [r4, #12]
 8017536:	07db      	lsls	r3, r3, #31
 8017538:	d5e1      	bpl.n	80174fe <__swbuf_r+0x2e>
 801753a:	2e0a      	cmp	r6, #10
 801753c:	d1df      	bne.n	80174fe <__swbuf_r+0x2e>
 801753e:	4621      	mov	r1, r4
 8017540:	4628      	mov	r0, r5
 8017542:	f7ff ff9d 	bl	8017480 <_fflush_r>
 8017546:	2800      	cmp	r0, #0
 8017548:	d0d9      	beq.n	80174fe <__swbuf_r+0x2e>
 801754a:	e7d6      	b.n	80174fa <__swbuf_r+0x2a>

0801754c <__swsetup_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4b29      	ldr	r3, [pc, #164]	@ (80175f4 <__swsetup_r+0xa8>)
 8017550:	4605      	mov	r5, r0
 8017552:	6818      	ldr	r0, [r3, #0]
 8017554:	460c      	mov	r4, r1
 8017556:	b118      	cbz	r0, 8017560 <__swsetup_r+0x14>
 8017558:	6a03      	ldr	r3, [r0, #32]
 801755a:	b90b      	cbnz	r3, 8017560 <__swsetup_r+0x14>
 801755c:	f7fd fd26 	bl	8014fac <__sinit>
 8017560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017564:	0719      	lsls	r1, r3, #28
 8017566:	d422      	bmi.n	80175ae <__swsetup_r+0x62>
 8017568:	06da      	lsls	r2, r3, #27
 801756a:	d407      	bmi.n	801757c <__swsetup_r+0x30>
 801756c:	2209      	movs	r2, #9
 801756e:	602a      	str	r2, [r5, #0]
 8017570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017574:	81a3      	strh	r3, [r4, #12]
 8017576:	f04f 30ff 	mov.w	r0, #4294967295
 801757a:	e033      	b.n	80175e4 <__swsetup_r+0x98>
 801757c:	0758      	lsls	r0, r3, #29
 801757e:	d512      	bpl.n	80175a6 <__swsetup_r+0x5a>
 8017580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017582:	b141      	cbz	r1, 8017596 <__swsetup_r+0x4a>
 8017584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017588:	4299      	cmp	r1, r3
 801758a:	d002      	beq.n	8017592 <__swsetup_r+0x46>
 801758c:	4628      	mov	r0, r5
 801758e:	f7fe fcb1 	bl	8015ef4 <_free_r>
 8017592:	2300      	movs	r3, #0
 8017594:	6363      	str	r3, [r4, #52]	@ 0x34
 8017596:	89a3      	ldrh	r3, [r4, #12]
 8017598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801759c:	81a3      	strh	r3, [r4, #12]
 801759e:	2300      	movs	r3, #0
 80175a0:	6063      	str	r3, [r4, #4]
 80175a2:	6923      	ldr	r3, [r4, #16]
 80175a4:	6023      	str	r3, [r4, #0]
 80175a6:	89a3      	ldrh	r3, [r4, #12]
 80175a8:	f043 0308 	orr.w	r3, r3, #8
 80175ac:	81a3      	strh	r3, [r4, #12]
 80175ae:	6923      	ldr	r3, [r4, #16]
 80175b0:	b94b      	cbnz	r3, 80175c6 <__swsetup_r+0x7a>
 80175b2:	89a3      	ldrh	r3, [r4, #12]
 80175b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80175b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80175bc:	d003      	beq.n	80175c6 <__swsetup_r+0x7a>
 80175be:	4621      	mov	r1, r4
 80175c0:	4628      	mov	r0, r5
 80175c2:	f000 f893 	bl	80176ec <__smakebuf_r>
 80175c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175ca:	f013 0201 	ands.w	r2, r3, #1
 80175ce:	d00a      	beq.n	80175e6 <__swsetup_r+0x9a>
 80175d0:	2200      	movs	r2, #0
 80175d2:	60a2      	str	r2, [r4, #8]
 80175d4:	6962      	ldr	r2, [r4, #20]
 80175d6:	4252      	negs	r2, r2
 80175d8:	61a2      	str	r2, [r4, #24]
 80175da:	6922      	ldr	r2, [r4, #16]
 80175dc:	b942      	cbnz	r2, 80175f0 <__swsetup_r+0xa4>
 80175de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80175e2:	d1c5      	bne.n	8017570 <__swsetup_r+0x24>
 80175e4:	bd38      	pop	{r3, r4, r5, pc}
 80175e6:	0799      	lsls	r1, r3, #30
 80175e8:	bf58      	it	pl
 80175ea:	6962      	ldrpl	r2, [r4, #20]
 80175ec:	60a2      	str	r2, [r4, #8]
 80175ee:	e7f4      	b.n	80175da <__swsetup_r+0x8e>
 80175f0:	2000      	movs	r0, #0
 80175f2:	e7f7      	b.n	80175e4 <__swsetup_r+0x98>
 80175f4:	240001e4 	.word	0x240001e4

080175f8 <_sbrk_r>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	4d06      	ldr	r5, [pc, #24]	@ (8017614 <_sbrk_r+0x1c>)
 80175fc:	2300      	movs	r3, #0
 80175fe:	4604      	mov	r4, r0
 8017600:	4608      	mov	r0, r1
 8017602:	602b      	str	r3, [r5, #0]
 8017604:	f7ee ffc2 	bl	800658c <_sbrk>
 8017608:	1c43      	adds	r3, r0, #1
 801760a:	d102      	bne.n	8017612 <_sbrk_r+0x1a>
 801760c:	682b      	ldr	r3, [r5, #0]
 801760e:	b103      	cbz	r3, 8017612 <_sbrk_r+0x1a>
 8017610:	6023      	str	r3, [r4, #0]
 8017612:	bd38      	pop	{r3, r4, r5, pc}
 8017614:	240075d0 	.word	0x240075d0

08017618 <__assert_func>:
 8017618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801761a:	4614      	mov	r4, r2
 801761c:	461a      	mov	r2, r3
 801761e:	4b09      	ldr	r3, [pc, #36]	@ (8017644 <__assert_func+0x2c>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	4605      	mov	r5, r0
 8017624:	68d8      	ldr	r0, [r3, #12]
 8017626:	b14c      	cbz	r4, 801763c <__assert_func+0x24>
 8017628:	4b07      	ldr	r3, [pc, #28]	@ (8017648 <__assert_func+0x30>)
 801762a:	9100      	str	r1, [sp, #0]
 801762c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017630:	4906      	ldr	r1, [pc, #24]	@ (801764c <__assert_func+0x34>)
 8017632:	462b      	mov	r3, r5
 8017634:	f000 f822 	bl	801767c <fiprintf>
 8017638:	f000 f8b6 	bl	80177a8 <abort>
 801763c:	4b04      	ldr	r3, [pc, #16]	@ (8017650 <__assert_func+0x38>)
 801763e:	461c      	mov	r4, r3
 8017640:	e7f3      	b.n	801762a <__assert_func+0x12>
 8017642:	bf00      	nop
 8017644:	240001e4 	.word	0x240001e4
 8017648:	0801810d 	.word	0x0801810d
 801764c:	0801811a 	.word	0x0801811a
 8017650:	08018148 	.word	0x08018148

08017654 <_calloc_r>:
 8017654:	b570      	push	{r4, r5, r6, lr}
 8017656:	fba1 5402 	umull	r5, r4, r1, r2
 801765a:	b934      	cbnz	r4, 801766a <_calloc_r+0x16>
 801765c:	4629      	mov	r1, r5
 801765e:	f7fe fff7 	bl	8016650 <_malloc_r>
 8017662:	4606      	mov	r6, r0
 8017664:	b928      	cbnz	r0, 8017672 <_calloc_r+0x1e>
 8017666:	4630      	mov	r0, r6
 8017668:	bd70      	pop	{r4, r5, r6, pc}
 801766a:	220c      	movs	r2, #12
 801766c:	6002      	str	r2, [r0, #0]
 801766e:	2600      	movs	r6, #0
 8017670:	e7f9      	b.n	8017666 <_calloc_r+0x12>
 8017672:	462a      	mov	r2, r5
 8017674:	4621      	mov	r1, r4
 8017676:	f7fd fd24 	bl	80150c2 <memset>
 801767a:	e7f4      	b.n	8017666 <_calloc_r+0x12>

0801767c <fiprintf>:
 801767c:	b40e      	push	{r1, r2, r3}
 801767e:	b503      	push	{r0, r1, lr}
 8017680:	4601      	mov	r1, r0
 8017682:	ab03      	add	r3, sp, #12
 8017684:	4805      	ldr	r0, [pc, #20]	@ (801769c <fiprintf+0x20>)
 8017686:	f853 2b04 	ldr.w	r2, [r3], #4
 801768a:	6800      	ldr	r0, [r0, #0]
 801768c:	9301      	str	r3, [sp, #4]
 801768e:	f7ff fd5b 	bl	8017148 <_vfiprintf_r>
 8017692:	b002      	add	sp, #8
 8017694:	f85d eb04 	ldr.w	lr, [sp], #4
 8017698:	b003      	add	sp, #12
 801769a:	4770      	bx	lr
 801769c:	240001e4 	.word	0x240001e4

080176a0 <__swhatbuf_r>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	460c      	mov	r4, r1
 80176a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a8:	2900      	cmp	r1, #0
 80176aa:	b096      	sub	sp, #88	@ 0x58
 80176ac:	4615      	mov	r5, r2
 80176ae:	461e      	mov	r6, r3
 80176b0:	da0d      	bge.n	80176ce <__swhatbuf_r+0x2e>
 80176b2:	89a3      	ldrh	r3, [r4, #12]
 80176b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80176b8:	f04f 0100 	mov.w	r1, #0
 80176bc:	bf14      	ite	ne
 80176be:	2340      	movne	r3, #64	@ 0x40
 80176c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80176c4:	2000      	movs	r0, #0
 80176c6:	6031      	str	r1, [r6, #0]
 80176c8:	602b      	str	r3, [r5, #0]
 80176ca:	b016      	add	sp, #88	@ 0x58
 80176cc:	bd70      	pop	{r4, r5, r6, pc}
 80176ce:	466a      	mov	r2, sp
 80176d0:	f000 f848 	bl	8017764 <_fstat_r>
 80176d4:	2800      	cmp	r0, #0
 80176d6:	dbec      	blt.n	80176b2 <__swhatbuf_r+0x12>
 80176d8:	9901      	ldr	r1, [sp, #4]
 80176da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80176de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80176e2:	4259      	negs	r1, r3
 80176e4:	4159      	adcs	r1, r3
 80176e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176ea:	e7eb      	b.n	80176c4 <__swhatbuf_r+0x24>

080176ec <__smakebuf_r>:
 80176ec:	898b      	ldrh	r3, [r1, #12]
 80176ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176f0:	079d      	lsls	r5, r3, #30
 80176f2:	4606      	mov	r6, r0
 80176f4:	460c      	mov	r4, r1
 80176f6:	d507      	bpl.n	8017708 <__smakebuf_r+0x1c>
 80176f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176fc:	6023      	str	r3, [r4, #0]
 80176fe:	6123      	str	r3, [r4, #16]
 8017700:	2301      	movs	r3, #1
 8017702:	6163      	str	r3, [r4, #20]
 8017704:	b003      	add	sp, #12
 8017706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017708:	ab01      	add	r3, sp, #4
 801770a:	466a      	mov	r2, sp
 801770c:	f7ff ffc8 	bl	80176a0 <__swhatbuf_r>
 8017710:	9f00      	ldr	r7, [sp, #0]
 8017712:	4605      	mov	r5, r0
 8017714:	4639      	mov	r1, r7
 8017716:	4630      	mov	r0, r6
 8017718:	f7fe ff9a 	bl	8016650 <_malloc_r>
 801771c:	b948      	cbnz	r0, 8017732 <__smakebuf_r+0x46>
 801771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017722:	059a      	lsls	r2, r3, #22
 8017724:	d4ee      	bmi.n	8017704 <__smakebuf_r+0x18>
 8017726:	f023 0303 	bic.w	r3, r3, #3
 801772a:	f043 0302 	orr.w	r3, r3, #2
 801772e:	81a3      	strh	r3, [r4, #12]
 8017730:	e7e2      	b.n	80176f8 <__smakebuf_r+0xc>
 8017732:	89a3      	ldrh	r3, [r4, #12]
 8017734:	6020      	str	r0, [r4, #0]
 8017736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801773a:	81a3      	strh	r3, [r4, #12]
 801773c:	9b01      	ldr	r3, [sp, #4]
 801773e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017742:	b15b      	cbz	r3, 801775c <__smakebuf_r+0x70>
 8017744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017748:	4630      	mov	r0, r6
 801774a:	f000 f81d 	bl	8017788 <_isatty_r>
 801774e:	b128      	cbz	r0, 801775c <__smakebuf_r+0x70>
 8017750:	89a3      	ldrh	r3, [r4, #12]
 8017752:	f023 0303 	bic.w	r3, r3, #3
 8017756:	f043 0301 	orr.w	r3, r3, #1
 801775a:	81a3      	strh	r3, [r4, #12]
 801775c:	89a3      	ldrh	r3, [r4, #12]
 801775e:	431d      	orrs	r5, r3
 8017760:	81a5      	strh	r5, [r4, #12]
 8017762:	e7cf      	b.n	8017704 <__smakebuf_r+0x18>

08017764 <_fstat_r>:
 8017764:	b538      	push	{r3, r4, r5, lr}
 8017766:	4d07      	ldr	r5, [pc, #28]	@ (8017784 <_fstat_r+0x20>)
 8017768:	2300      	movs	r3, #0
 801776a:	4604      	mov	r4, r0
 801776c:	4608      	mov	r0, r1
 801776e:	4611      	mov	r1, r2
 8017770:	602b      	str	r3, [r5, #0]
 8017772:	f7ee fee2 	bl	800653a <_fstat>
 8017776:	1c43      	adds	r3, r0, #1
 8017778:	d102      	bne.n	8017780 <_fstat_r+0x1c>
 801777a:	682b      	ldr	r3, [r5, #0]
 801777c:	b103      	cbz	r3, 8017780 <_fstat_r+0x1c>
 801777e:	6023      	str	r3, [r4, #0]
 8017780:	bd38      	pop	{r3, r4, r5, pc}
 8017782:	bf00      	nop
 8017784:	240075d0 	.word	0x240075d0

08017788 <_isatty_r>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	4d06      	ldr	r5, [pc, #24]	@ (80177a4 <_isatty_r+0x1c>)
 801778c:	2300      	movs	r3, #0
 801778e:	4604      	mov	r4, r0
 8017790:	4608      	mov	r0, r1
 8017792:	602b      	str	r3, [r5, #0]
 8017794:	f7ee fee1 	bl	800655a <_isatty>
 8017798:	1c43      	adds	r3, r0, #1
 801779a:	d102      	bne.n	80177a2 <_isatty_r+0x1a>
 801779c:	682b      	ldr	r3, [r5, #0]
 801779e:	b103      	cbz	r3, 80177a2 <_isatty_r+0x1a>
 80177a0:	6023      	str	r3, [r4, #0]
 80177a2:	bd38      	pop	{r3, r4, r5, pc}
 80177a4:	240075d0 	.word	0x240075d0

080177a8 <abort>:
 80177a8:	b508      	push	{r3, lr}
 80177aa:	2006      	movs	r0, #6
 80177ac:	f000 f82c 	bl	8017808 <raise>
 80177b0:	2001      	movs	r0, #1
 80177b2:	f7ee fe8e 	bl	80064d2 <_exit>

080177b6 <_raise_r>:
 80177b6:	291f      	cmp	r1, #31
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4605      	mov	r5, r0
 80177bc:	460c      	mov	r4, r1
 80177be:	d904      	bls.n	80177ca <_raise_r+0x14>
 80177c0:	2316      	movs	r3, #22
 80177c2:	6003      	str	r3, [r0, #0]
 80177c4:	f04f 30ff 	mov.w	r0, #4294967295
 80177c8:	bd38      	pop	{r3, r4, r5, pc}
 80177ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80177cc:	b112      	cbz	r2, 80177d4 <_raise_r+0x1e>
 80177ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80177d2:	b94b      	cbnz	r3, 80177e8 <_raise_r+0x32>
 80177d4:	4628      	mov	r0, r5
 80177d6:	f000 f831 	bl	801783c <_getpid_r>
 80177da:	4622      	mov	r2, r4
 80177dc:	4601      	mov	r1, r0
 80177de:	4628      	mov	r0, r5
 80177e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177e4:	f000 b818 	b.w	8017818 <_kill_r>
 80177e8:	2b01      	cmp	r3, #1
 80177ea:	d00a      	beq.n	8017802 <_raise_r+0x4c>
 80177ec:	1c59      	adds	r1, r3, #1
 80177ee:	d103      	bne.n	80177f8 <_raise_r+0x42>
 80177f0:	2316      	movs	r3, #22
 80177f2:	6003      	str	r3, [r0, #0]
 80177f4:	2001      	movs	r0, #1
 80177f6:	e7e7      	b.n	80177c8 <_raise_r+0x12>
 80177f8:	2100      	movs	r1, #0
 80177fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80177fe:	4620      	mov	r0, r4
 8017800:	4798      	blx	r3
 8017802:	2000      	movs	r0, #0
 8017804:	e7e0      	b.n	80177c8 <_raise_r+0x12>
	...

08017808 <raise>:
 8017808:	4b02      	ldr	r3, [pc, #8]	@ (8017814 <raise+0xc>)
 801780a:	4601      	mov	r1, r0
 801780c:	6818      	ldr	r0, [r3, #0]
 801780e:	f7ff bfd2 	b.w	80177b6 <_raise_r>
 8017812:	bf00      	nop
 8017814:	240001e4 	.word	0x240001e4

08017818 <_kill_r>:
 8017818:	b538      	push	{r3, r4, r5, lr}
 801781a:	4d07      	ldr	r5, [pc, #28]	@ (8017838 <_kill_r+0x20>)
 801781c:	2300      	movs	r3, #0
 801781e:	4604      	mov	r4, r0
 8017820:	4608      	mov	r0, r1
 8017822:	4611      	mov	r1, r2
 8017824:	602b      	str	r3, [r5, #0]
 8017826:	f7ee fe44 	bl	80064b2 <_kill>
 801782a:	1c43      	adds	r3, r0, #1
 801782c:	d102      	bne.n	8017834 <_kill_r+0x1c>
 801782e:	682b      	ldr	r3, [r5, #0]
 8017830:	b103      	cbz	r3, 8017834 <_kill_r+0x1c>
 8017832:	6023      	str	r3, [r4, #0]
 8017834:	bd38      	pop	{r3, r4, r5, pc}
 8017836:	bf00      	nop
 8017838:	240075d0 	.word	0x240075d0

0801783c <_getpid_r>:
 801783c:	f7ee be31 	b.w	80064a2 <_getpid>

08017840 <fmax>:
 8017840:	b508      	push	{r3, lr}
 8017842:	ed2d 8b04 	vpush	{d8-d9}
 8017846:	eeb0 8b40 	vmov.f64	d8, d0
 801784a:	eeb0 9b41 	vmov.f64	d9, d1
 801784e:	f000 f831 	bl	80178b4 <__fpclassifyd>
 8017852:	b930      	cbnz	r0, 8017862 <fmax+0x22>
 8017854:	eeb0 8b49 	vmov.f64	d8, d9
 8017858:	eeb0 0b48 	vmov.f64	d0, d8
 801785c:	ecbd 8b04 	vpop	{d8-d9}
 8017860:	bd08      	pop	{r3, pc}
 8017862:	eeb0 0b49 	vmov.f64	d0, d9
 8017866:	f000 f825 	bl	80178b4 <__fpclassifyd>
 801786a:	2800      	cmp	r0, #0
 801786c:	d0f4      	beq.n	8017858 <fmax+0x18>
 801786e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017876:	dded      	ble.n	8017854 <fmax+0x14>
 8017878:	e7ee      	b.n	8017858 <fmax+0x18>

0801787a <fmin>:
 801787a:	b508      	push	{r3, lr}
 801787c:	ed2d 8b04 	vpush	{d8-d9}
 8017880:	eeb0 8b40 	vmov.f64	d8, d0
 8017884:	eeb0 9b41 	vmov.f64	d9, d1
 8017888:	f000 f814 	bl	80178b4 <__fpclassifyd>
 801788c:	b930      	cbnz	r0, 801789c <fmin+0x22>
 801788e:	eeb0 8b49 	vmov.f64	d8, d9
 8017892:	eeb0 0b48 	vmov.f64	d0, d8
 8017896:	ecbd 8b04 	vpop	{d8-d9}
 801789a:	bd08      	pop	{r3, pc}
 801789c:	eeb0 0b49 	vmov.f64	d0, d9
 80178a0:	f000 f808 	bl	80178b4 <__fpclassifyd>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d0f4      	beq.n	8017892 <fmin+0x18>
 80178a8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80178ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b0:	d5ed      	bpl.n	801788e <fmin+0x14>
 80178b2:	e7ee      	b.n	8017892 <fmin+0x18>

080178b4 <__fpclassifyd>:
 80178b4:	ec51 0b10 	vmov	r0, r1, d0
 80178b8:	460b      	mov	r3, r1
 80178ba:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 80178be:	b510      	push	{r4, lr}
 80178c0:	d104      	bne.n	80178cc <__fpclassifyd+0x18>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	bf0c      	ite	eq
 80178c6:	2002      	moveq	r0, #2
 80178c8:	2003      	movne	r0, #3
 80178ca:	bd10      	pop	{r4, pc}
 80178cc:	4a09      	ldr	r2, [pc, #36]	@ (80178f4 <__fpclassifyd+0x40>)
 80178ce:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 80178d2:	4294      	cmp	r4, r2
 80178d4:	d908      	bls.n	80178e8 <__fpclassifyd+0x34>
 80178d6:	4a08      	ldr	r2, [pc, #32]	@ (80178f8 <__fpclassifyd+0x44>)
 80178d8:	4213      	tst	r3, r2
 80178da:	d007      	beq.n	80178ec <__fpclassifyd+0x38>
 80178dc:	4291      	cmp	r1, r2
 80178de:	d107      	bne.n	80178f0 <__fpclassifyd+0x3c>
 80178e0:	fab0 f080 	clz	r0, r0
 80178e4:	0940      	lsrs	r0, r0, #5
 80178e6:	e7f0      	b.n	80178ca <__fpclassifyd+0x16>
 80178e8:	2004      	movs	r0, #4
 80178ea:	e7ee      	b.n	80178ca <__fpclassifyd+0x16>
 80178ec:	2003      	movs	r0, #3
 80178ee:	e7ec      	b.n	80178ca <__fpclassifyd+0x16>
 80178f0:	2000      	movs	r0, #0
 80178f2:	e7ea      	b.n	80178ca <__fpclassifyd+0x16>
 80178f4:	7fdfffff 	.word	0x7fdfffff
 80178f8:	7ff00000 	.word	0x7ff00000

080178fc <fmaxf>:
 80178fc:	b508      	push	{r3, lr}
 80178fe:	ed2d 8b02 	vpush	{d8}
 8017902:	eeb0 8a40 	vmov.f32	s16, s0
 8017906:	eef0 8a60 	vmov.f32	s17, s1
 801790a:	f000 f815 	bl	8017938 <__fpclassifyf>
 801790e:	b930      	cbnz	r0, 801791e <fmaxf+0x22>
 8017910:	eeb0 8a68 	vmov.f32	s16, s17
 8017914:	eeb0 0a48 	vmov.f32	s0, s16
 8017918:	ecbd 8b02 	vpop	{d8}
 801791c:	bd08      	pop	{r3, pc}
 801791e:	eeb0 0a68 	vmov.f32	s0, s17
 8017922:	f000 f809 	bl	8017938 <__fpclassifyf>
 8017926:	2800      	cmp	r0, #0
 8017928:	d0f4      	beq.n	8017914 <fmaxf+0x18>
 801792a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017932:	dded      	ble.n	8017910 <fmaxf+0x14>
 8017934:	e7ee      	b.n	8017914 <fmaxf+0x18>
	...

08017938 <__fpclassifyf>:
 8017938:	ee10 3a10 	vmov	r3, s0
 801793c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8017940:	d00d      	beq.n	801795e <__fpclassifyf+0x26>
 8017942:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8017946:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801794a:	d30a      	bcc.n	8017962 <__fpclassifyf+0x2a>
 801794c:	4b07      	ldr	r3, [pc, #28]	@ (801796c <__fpclassifyf+0x34>)
 801794e:	1e42      	subs	r2, r0, #1
 8017950:	429a      	cmp	r2, r3
 8017952:	d908      	bls.n	8017966 <__fpclassifyf+0x2e>
 8017954:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8017958:	4258      	negs	r0, r3
 801795a:	4158      	adcs	r0, r3
 801795c:	4770      	bx	lr
 801795e:	2002      	movs	r0, #2
 8017960:	4770      	bx	lr
 8017962:	2004      	movs	r0, #4
 8017964:	4770      	bx	lr
 8017966:	2003      	movs	r0, #3
 8017968:	4770      	bx	lr
 801796a:	bf00      	nop
 801796c:	007ffffe 	.word	0x007ffffe

08017970 <sinf_poly>:
 8017970:	07cb      	lsls	r3, r1, #31
 8017972:	d412      	bmi.n	801799a <sinf_poly+0x2a>
 8017974:	ee21 5b00 	vmul.f64	d5, d1, d0
 8017978:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801797c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8017980:	eea6 7b01 	vfma.f64	d7, d6, d1
 8017984:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8017988:	ee21 1b05 	vmul.f64	d1, d1, d5
 801798c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8017990:	eea7 0b01 	vfma.f64	d0, d7, d1
 8017994:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017998:	4770      	bx	lr
 801799a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801799e:	ee21 5b01 	vmul.f64	d5, d1, d1
 80179a2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80179a6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80179aa:	eea1 7b06 	vfma.f64	d7, d1, d6
 80179ae:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80179b2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80179b6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80179ba:	ee21 1b05 	vmul.f64	d1, d1, d5
 80179be:	eea5 0b06 	vfma.f64	d0, d5, d6
 80179c2:	e7e5      	b.n	8017990 <sinf_poly+0x20>
 80179c4:	0000      	movs	r0, r0
	...

080179c8 <sinf>:
 80179c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179ca:	ee10 4a10 	vmov	r4, s0
 80179ce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80179d2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80179d6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80179da:	eef0 7a40 	vmov.f32	s15, s0
 80179de:	d218      	bcs.n	8017a12 <sinf+0x4a>
 80179e0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80179e4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80179e8:	d20a      	bcs.n	8017a00 <sinf+0x38>
 80179ea:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80179ee:	d103      	bne.n	80179f8 <sinf+0x30>
 80179f0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80179f4:	ed8d 1a01 	vstr	s2, [sp, #4]
 80179f8:	eeb0 0a67 	vmov.f32	s0, s15
 80179fc:	b003      	add	sp, #12
 80179fe:	bd30      	pop	{r4, r5, pc}
 8017a00:	483b      	ldr	r0, [pc, #236]	@ (8017af0 <sinf+0x128>)
 8017a02:	eeb0 0b46 	vmov.f64	d0, d6
 8017a06:	2100      	movs	r1, #0
 8017a08:	b003      	add	sp, #12
 8017a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a0e:	f7ff bfaf 	b.w	8017970 <sinf_poly>
 8017a12:	f240 422e 	movw	r2, #1070	@ 0x42e
 8017a16:	4293      	cmp	r3, r2
 8017a18:	d824      	bhi.n	8017a64 <sinf+0x9c>
 8017a1a:	4b35      	ldr	r3, [pc, #212]	@ (8017af0 <sinf+0x128>)
 8017a1c:	ed93 7b08 	vldr	d7, [r3, #32]
 8017a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017a24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017a28:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017a2c:	ee17 1a90 	vmov	r1, s15
 8017a30:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8017a34:	1609      	asrs	r1, r1, #24
 8017a36:	ee07 1a90 	vmov	s15, r1
 8017a3a:	f001 0203 	and.w	r2, r1, #3
 8017a3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017a42:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017a46:	ed92 0b00 	vldr	d0, [r2]
 8017a4a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8017a4e:	f011 0f02 	tst.w	r1, #2
 8017a52:	eea5 6b47 	vfms.f64	d6, d5, d7
 8017a56:	bf08      	it	eq
 8017a58:	4618      	moveq	r0, r3
 8017a5a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8017a5e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017a62:	e7d1      	b.n	8017a08 <sinf+0x40>
 8017a64:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8017a68:	d237      	bcs.n	8017ada <sinf+0x112>
 8017a6a:	4922      	ldr	r1, [pc, #136]	@ (8017af4 <sinf+0x12c>)
 8017a6c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8017a70:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017a74:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017a78:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8017a7c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017a80:	6a10      	ldr	r0, [r2, #32]
 8017a82:	6912      	ldr	r2, [r2, #16]
 8017a84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017a88:	40ab      	lsls	r3, r5
 8017a8a:	fba0 5003 	umull	r5, r0, r0, r3
 8017a8e:	4359      	muls	r1, r3
 8017a90:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017a94:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017a98:	0f9d      	lsrs	r5, r3, #30
 8017a9a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017a9e:	1ac9      	subs	r1, r1, r3
 8017aa0:	f7e8 fe04 	bl	80006ac <__aeabi_l2d>
 8017aa4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017aa8:	4b11      	ldr	r3, [pc, #68]	@ (8017af0 <sinf+0x128>)
 8017aaa:	f004 0203 	and.w	r2, r4, #3
 8017aae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017ab2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8017ae8 <sinf+0x120>
 8017ab6:	ed92 0b00 	vldr	d0, [r2]
 8017aba:	ec41 0b17 	vmov	d7, r0, r1
 8017abe:	f014 0f02 	tst.w	r4, #2
 8017ac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ac6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017aca:	4629      	mov	r1, r5
 8017acc:	bf08      	it	eq
 8017ace:	4618      	moveq	r0, r3
 8017ad0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017ad4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017ad8:	e796      	b.n	8017a08 <sinf+0x40>
 8017ada:	b003      	add	sp, #12
 8017adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ae0:	f000 b8e4 	b.w	8017cac <__math_invalidf>
 8017ae4:	f3af 8000 	nop.w
 8017ae8:	54442d18 	.word	0x54442d18
 8017aec:	3c1921fb 	.word	0x3c1921fb
 8017af0:	08018408 	.word	0x08018408
 8017af4:	080183a4 	.word	0x080183a4

08017af8 <sinf_poly>:
 8017af8:	07cb      	lsls	r3, r1, #31
 8017afa:	d412      	bmi.n	8017b22 <sinf_poly+0x2a>
 8017afc:	ee21 5b00 	vmul.f64	d5, d1, d0
 8017b00:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8017b04:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8017b08:	eea6 7b01 	vfma.f64	d7, d6, d1
 8017b0c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8017b10:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017b14:	eea6 0b05 	vfma.f64	d0, d6, d5
 8017b18:	eea7 0b01 	vfma.f64	d0, d7, d1
 8017b1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017b20:	4770      	bx	lr
 8017b22:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8017b26:	ee21 5b01 	vmul.f64	d5, d1, d1
 8017b2a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8017b2e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8017b32:	eea1 7b06 	vfma.f64	d7, d1, d6
 8017b36:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8017b3a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8017b3e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8017b42:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017b46:	eea5 0b06 	vfma.f64	d0, d5, d6
 8017b4a:	e7e5      	b.n	8017b18 <sinf_poly+0x20>
 8017b4c:	0000      	movs	r0, r0
	...

08017b50 <cosf>:
 8017b50:	b538      	push	{r3, r4, r5, lr}
 8017b52:	ee10 4a10 	vmov	r4, s0
 8017b56:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8017b5a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8017b5e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8017b62:	d21f      	bcs.n	8017ba4 <cosf+0x54>
 8017b64:	ee27 7b07 	vmul.f64	d7, d7, d7
 8017b68:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8017b6c:	f0c0 8082 	bcc.w	8017c74 <cosf+0x124>
 8017b70:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017b74:	4b44      	ldr	r3, [pc, #272]	@ (8017c88 <cosf+0x138>)
 8017b76:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8017b7a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8017b7e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8017b82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017b86:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8017b8a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017b8e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8017b92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017b96:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017b9a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8017b9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
 8017ba4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8017ba8:	4293      	cmp	r3, r2
 8017baa:	d829      	bhi.n	8017c00 <cosf+0xb0>
 8017bac:	4b36      	ldr	r3, [pc, #216]	@ (8017c88 <cosf+0x138>)
 8017bae:	ed93 6b08 	vldr	d6, [r3, #32]
 8017bb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017bb6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8017bba:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017bbe:	ee16 1a90 	vmov	r1, s13
 8017bc2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8017bc6:	1609      	asrs	r1, r1, #24
 8017bc8:	ee06 1a90 	vmov	s13, r1
 8017bcc:	f001 0203 	and.w	r2, r1, #3
 8017bd0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017bd4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8017bd8:	ed92 0b00 	vldr	d0, [r2]
 8017bdc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8017be0:	f011 0f02 	tst.w	r1, #2
 8017be4:	f081 0101 	eor.w	r1, r1, #1
 8017be8:	eea5 7b46 	vfms.f64	d7, d5, d6
 8017bec:	bf08      	it	eq
 8017bee:	4618      	moveq	r0, r3
 8017bf0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bf8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017bfc:	f7ff bf7c 	b.w	8017af8 <sinf_poly>
 8017c00:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8017c04:	d232      	bcs.n	8017c6c <cosf+0x11c>
 8017c06:	4921      	ldr	r1, [pc, #132]	@ (8017c8c <cosf+0x13c>)
 8017c08:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8017c0c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017c10:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017c14:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8017c18:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017c1c:	6a10      	ldr	r0, [r2, #32]
 8017c1e:	6912      	ldr	r2, [r2, #16]
 8017c20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017c24:	40ab      	lsls	r3, r5
 8017c26:	fba0 5003 	umull	r5, r0, r0, r3
 8017c2a:	4359      	muls	r1, r3
 8017c2c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017c30:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017c34:	0f9d      	lsrs	r5, r3, #30
 8017c36:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017c3a:	1ac9      	subs	r1, r1, r3
 8017c3c:	f7e8 fd36 	bl	80006ac <__aeabi_l2d>
 8017c40:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017c44:	4b10      	ldr	r3, [pc, #64]	@ (8017c88 <cosf+0x138>)
 8017c46:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8017c80 <cosf+0x130>
 8017c4a:	ec41 0b17 	vmov	d7, r0, r1
 8017c4e:	f004 0203 	and.w	r2, r4, #3
 8017c52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017c56:	ed92 0b00 	vldr	d0, [r2]
 8017c5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c5e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017c62:	f014 0f02 	tst.w	r4, #2
 8017c66:	f085 0101 	eor.w	r1, r5, #1
 8017c6a:	e7bf      	b.n	8017bec <cosf+0x9c>
 8017c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c70:	f000 b81c 	b.w	8017cac <__math_invalidf>
 8017c74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017c78:	e793      	b.n	8017ba2 <cosf+0x52>
 8017c7a:	bf00      	nop
 8017c7c:	f3af 8000 	nop.w
 8017c80:	54442d18 	.word	0x54442d18
 8017c84:	3c1921fb 	.word	0x3c1921fb
 8017c88:	08018408 	.word	0x08018408
 8017c8c:	080183a4 	.word	0x080183a4

08017c90 <with_errnof>:
 8017c90:	b510      	push	{r4, lr}
 8017c92:	ed2d 8b02 	vpush	{d8}
 8017c96:	eeb0 8a40 	vmov.f32	s16, s0
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	f7fd faf6 	bl	801528c <__errno>
 8017ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8017ca4:	ecbd 8b02 	vpop	{d8}
 8017ca8:	6004      	str	r4, [r0, #0]
 8017caa:	bd10      	pop	{r4, pc}

08017cac <__math_invalidf>:
 8017cac:	eef0 7a40 	vmov.f32	s15, s0
 8017cb0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017cb4:	eef4 7a67 	vcmp.f32	s15, s15
 8017cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cbc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017cc0:	d602      	bvs.n	8017cc8 <__math_invalidf+0x1c>
 8017cc2:	2021      	movs	r0, #33	@ 0x21
 8017cc4:	f7ff bfe4 	b.w	8017c90 <with_errnof>
 8017cc8:	4770      	bx	lr
	...

08017ccc <_init>:
 8017ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cce:	bf00      	nop
 8017cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cd2:	bc08      	pop	{r3}
 8017cd4:	469e      	mov	lr, r3
 8017cd6:	4770      	bx	lr

08017cd8 <_fini>:
 8017cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cda:	bf00      	nop
 8017cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cde:	bc08      	pop	{r3}
 8017ce0:	469e      	mov	lr, r3
 8017ce2:	4770      	bx	lr
