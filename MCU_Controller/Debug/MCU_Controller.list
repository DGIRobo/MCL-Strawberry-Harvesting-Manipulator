
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08017c98  08017c98  00018c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018498  08018498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080184a0  080184a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080184a4  080184a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000258  24000000  080184a8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007388  24000258  08018700  0001a258  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240075e0  08018700  0001a5e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001a258  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d982  00000000  00000000  0001a286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005105  00000000  00000000  00047c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f60  00000000  00000000  0004cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001842  00000000  00000000  0004ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000644b  00000000  00000000  000504b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000279e7  00000000  00000000  000568fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f41e  00000000  00000000  0007e2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001fd702  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ad4  00000000  00000000  001fd7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  00207290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  0020730d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  002083af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000258 	.word	0x24000258
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017c7c 	.word	0x08017c7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400025c 	.word	0x2400025c
 80002dc:	08017c7c 	.word	0x08017c7c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <uart3_rb_push_bytes>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
// 링버퍼에 len 바이트 밀어넣기 (꽉 차면 오래된 것부터 드롭)
static void uart3_rb_push_bytes(const uint8_t *src, uint16_t len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
  if (len == 0) return;
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d055      	beq.n	8000d82 <uart3_rb_push_bytes+0xbe>

  uint16_t w = uart3_widx;
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	82fb      	strh	r3, [r7, #22]
  uint16_t r = uart3_ridx;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	82bb      	strh	r3, [r7, #20]

  // 남은 공간 계산 (1바이트 비워두는 구조)
  uint16_t free = (r > w) ? (r - w - 1) : (UART3_RBUF_SIZE - (w - r) - 1);
 8000ce2:	8aba      	ldrh	r2, [r7, #20]
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d906      	bls.n	8000cf8 <uart3_rb_push_bytes+0x34>
 8000cea:	8aba      	ldrh	r2, [r7, #20]
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	e006      	b.n	8000d06 <uart3_rb_push_bytes+0x42>
 8000cf8:	8aba      	ldrh	r2, [r7, #20]
 8000cfa:	8afb      	ldrh	r3, [r7, #22]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	827b      	strh	r3, [r7, #18]
  if (len > free) {
 8000d08:	887a      	ldrh	r2, [r7, #2]
 8000d0a:	8a7b      	ldrh	r3, [r7, #18]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d90e      	bls.n	8000d2e <uart3_rb_push_bytes+0x6a>
    uint16_t drop = len - free;
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	8a7b      	ldrh	r3, [r7, #18]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	823b      	strh	r3, [r7, #16]
    uart3_ridx = (uart3_ridx + drop) & (UART3_RBUF_SIZE - 1);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	8a3b      	ldrh	r3, [r7, #16]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <uart3_rb_push_bytes+0xcc>)
 8000d2c:	801a      	strh	r2, [r3, #0]
  }

  // 연속 구간으로 두 번에 나눠 복사
  uint16_t to_end = UART3_RBUF_SIZE - w;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000d34:	81fb      	strh	r3, [r7, #14]
  uint16_t first  = (len < to_end) ? len : to_end;
 8000d36:	89fa      	ldrh	r2, [r7, #14]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	bf28      	it	cs
 8000d3e:	4613      	movcs	r3, r2
 8000d40:	81bb      	strh	r3, [r7, #12]
  memcpy(&uart3_rbuf[w], src, first);
 8000d42:	8afb      	ldrh	r3, [r7, #22]
 8000d44:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d46:	4413      	add	r3, r2
 8000d48:	89ba      	ldrh	r2, [r7, #12]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f014 faa2 	bl	8015296 <memcpy>
  if (len > first) memcpy(&uart3_rbuf[0], src + first, len - first);
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	89bb      	ldrh	r3, [r7, #12]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d909      	bls.n	8000d6e <uart3_rb_push_bytes+0xaa>
 8000d5a:	89bb      	ldrh	r3, [r7, #12]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	18d1      	adds	r1, r2, r3
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	89bb      	ldrh	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <uart3_rb_push_bytes+0xd0>)
 8000d6a:	f014 fa94 	bl	8015296 <memcpy>

  uart3_widx = (w + len) & (UART3_RBUF_SIZE - 1);
 8000d6e:	8afa      	ldrh	r2, [r7, #22]
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <uart3_rb_push_bytes+0xc8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	e000      	b.n	8000d84 <uart3_rb_push_bytes+0xc0>
  if (len == 0) return;
 8000d82:	bf00      	nop
}
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	24000ec4 	.word	0x24000ec4
 8000d90:	24000ec6 	.word	0x24000ec6
 8000d94:	240006c4 	.word	0x240006c4

08000d98 <uart3_rx_start_normal>:

// NORMAL 모드 + IDLE 이벤트 기반 재무장 (레지스터 직접접근 X)
static void uart3_rx_start_normal(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  // 1) RX DMA가 CIRC로 잡혀 있다면 HAL로 NORMAL로 재초기화
  if (huart3.hdmarx) {
 8000d9c:	4b65      	ldr	r3, [pc, #404]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <uart3_rx_start_normal+0x172>
    if (huart3.hdmarx->Init.Mode != DMA_NORMAL) {
 8000da8:	4b62      	ldr	r3, [pc, #392]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
      // 안전하게 모두 중단
      HAL_UART_AbortReceive(&huart3);
 8000db4:	485f      	ldr	r0, [pc, #380]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000db6:	f00d fd99 	bl	800e8ec <HAL_UART_AbortReceive>
      HAL_DMA_Abort(huart3.hdmarx);
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 ff39 	bl	8007c38 <HAL_DMA_Abort>

      // DMA를 NORMAL로 재설정
      HAL_DMA_DeInit(huart3.hdmarx);
 8000dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fb13 	bl	80073f8 <HAL_DMA_DeInit>
      huart3.hdmarx->Init.Mode = DMA_NORMAL;
 8000dd2:	4b58      	ldr	r3, [pc, #352]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
      if (HAL_DMA_Init(huart3.hdmarx) != HAL_OK) {
 8000ddc:	4b55      	ldr	r3, [pc, #340]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de2:	4618      	mov	r0, r3
 8000de4:	f005 ffac 	bl	8006d40 <HAL_DMA_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <uart3_rx_start_normal+0x60>
        sta = 3;  // MCU Init 에러 코드 재사용
 8000dee:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
        Error_Handler();
 8000df4:	f005 f822 	bl	8005e3c <Error_Handler>
      }
      // __HAL_LINKDMA(&huart3, hdmarx, *huart3.hdmarx); // 보통 재링크 불필요
    }
    // Half-Transfer IRQ는 사용 안 함
    __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
 8000df8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <uart3_rx_start_normal+0x1a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d068      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e06:	4b4b      	ldr	r3, [pc, #300]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <uart3_rx_start_normal+0x1a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d061      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e14:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	@ (8000f44 <uart3_rx_start_normal+0x1ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d05a      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a47      	ldr	r2, [pc, #284]	@ (8000f48 <uart3_rx_start_normal+0x1b0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d053      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e30:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a44      	ldr	r2, [pc, #272]	@ (8000f4c <uart3_rx_start_normal+0x1b4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d04c      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a42      	ldr	r2, [pc, #264]	@ (8000f50 <uart3_rx_start_normal+0x1b8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d045      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e4c:	4b39      	ldr	r3, [pc, #228]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <uart3_rx_start_normal+0x1bc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d03e      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <uart3_rx_start_normal+0x1c0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d037      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <uart3_rx_start_normal+0x1c4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d030      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e76:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a38      	ldr	r2, [pc, #224]	@ (8000f60 <uart3_rx_start_normal+0x1c8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d029      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e84:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a35      	ldr	r2, [pc, #212]	@ (8000f64 <uart3_rx_start_normal+0x1cc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d022      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <uart3_rx_start_normal+0x1d0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d01b      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ea0:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a30      	ldr	r2, [pc, #192]	@ (8000f6c <uart3_rx_start_normal+0x1d4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d014      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <uart3_rx_start_normal+0x1d8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f74 <uart3_rx_start_normal+0x1dc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d006      	beq.n	8000ed8 <uart3_rx_start_normal+0x140>
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	@ (8000f78 <uart3_rx_start_normal+0x1e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d10c      	bne.n	8000ef2 <uart3_rx_start_normal+0x15a>
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0208 	bic.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e00b      	b.n	8000f0a <uart3_rx_start_normal+0x172>
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0204 	bic.w	r2, r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
  }

  // 2) IDLE 플래그 정리하고 ToIdle-DMA 재무장
  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2210      	movs	r2, #16
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart3_rx_dma, UART3_RX_DMA_SIZE) != HAL_OK) {
 8000f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f16:	4919      	ldr	r1, [pc, #100]	@ (8000f7c <uart3_rx_start_normal+0x1e4>)
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <uart3_rx_start_normal+0x19c>)
 8000f1a:	f00f fc55 	bl	80107c8 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <uart3_rx_start_normal+0x196>
    sta = 3;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <uart3_rx_start_normal+0x1a0>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	601a      	str	r2, [r3, #0]
    Error_Handler();
 8000f2a:	f004 ff87 	bl	8005e3c <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	24000338 	.word	0x24000338
 8000f38:	24002a4c 	.word	0x24002a4c
 8000f3c:	40020010 	.word	0x40020010
 8000f40:	40020028 	.word	0x40020028
 8000f44:	40020040 	.word	0x40020040
 8000f48:	40020058 	.word	0x40020058
 8000f4c:	40020070 	.word	0x40020070
 8000f50:	40020088 	.word	0x40020088
 8000f54:	400200a0 	.word	0x400200a0
 8000f58:	400200b8 	.word	0x400200b8
 8000f5c:	40020410 	.word	0x40020410
 8000f60:	40020428 	.word	0x40020428
 8000f64:	40020440 	.word	0x40020440
 8000f68:	40020458 	.word	0x40020458
 8000f6c:	40020470 	.word	0x40020470
 8000f70:	40020488 	.word	0x40020488
 8000f74:	400204a0 	.word	0x400204a0
 8000f78:	400204b8 	.word	0x400204b8
 8000f7c:	240004c4 	.word	0x240004c4

08000f80 <HAL_UARTEx_RxEventCallback>:

// ToIdle-DMA가 IDLE 또는 버퍼가 다 찼을 때 호출됨 (Size: 수신 바이트 수)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance != USART3) return;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d10a      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x2c>

  if (Size) {
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_UARTEx_RxEventCallback+0x26>
    uart3_rb_push_bytes(uart3_rx_dma, Size);
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_UARTEx_RxEventCallback+0x38>)
 8000fa2:	f7ff fe8f 	bl	8000cc4 <uart3_rb_push_bytes>
  }
  // 다음 수신 다시 무장
  uart3_rx_start_normal();
 8000fa6:	f7ff fef7 	bl	8000d98 <uart3_rx_start_normal>
 8000faa:	e000      	b.n	8000fae <HAL_UARTEx_RxEventCallback+0x2e>
  if (huart->Instance != USART3) return;
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	240004c4 	.word	0x240004c4

08000fbc <HAL_UART_RxCpltCallback>:

// 혹시 HAL이 TC로만 불러줄 수도 있으므로 안전망 콜백도 구현
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_UART_RxCpltCallback+0x2c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d107      	bne.n	8000fde <HAL_UART_RxCpltCallback+0x22>

  uart3_rb_push_bytes(uart3_rx_dma, UART3_RX_DMA_SIZE);
 8000fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <HAL_UART_RxCpltCallback+0x30>)
 8000fd4:	f7ff fe76 	bl	8000cc4 <uart3_rb_push_bytes>
  uart3_rx_start_normal();
 8000fd8:	f7ff fede 	bl	8000d98 <uart3_rx_start_normal>
 8000fdc:	e000      	b.n	8000fe0 <HAL_UART_RxCpltCallback+0x24>
  if (huart->Instance != USART3) return;
 8000fde:	bf00      	nop
}
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	240004c4 	.word	0x240004c4

08000ff0 <HAL_UART_ErrorCallback>:

// 에러 시 플래그 정리하고 즉시 재무장
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_UART_ErrorCallback+0x50>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d119      	bne.n	8001036 <HAL_UART_ErrorCallback+0x46>

  HAL_UART_AbortReceive(huart);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f00d fc72 	bl	800e8ec <HAL_UART_AbortReceive>

  __HAL_UART_CLEAR_OREFLAG(huart);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2208      	movs	r2, #8
 800100e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FEFLAG(huart);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_NEFLAG(huart);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2204      	movs	r2, #4
 800101e:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_PEFLAG(huart);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2210      	movs	r2, #16
 800102e:	621a      	str	r2, [r3, #32]

  uart3_rx_start_normal();
 8001030:	f7ff feb2 	bl	8000d98 <uart3_rx_start_normal>
 8001034:	e000      	b.n	8001038 <HAL_UART_ErrorCallback+0x48>
  if (huart->Instance != USART3) return;
 8001036:	bf00      	nop
}
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40004800 	.word	0x40004800

08001044 <uart3_kick_tx_dma>:

static void uart3_kick_tx_dma(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  if (uart3_tx_busy) return;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d131      	bne.n	80010b8 <uart3_kick_tx_dma+0x74>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	429a      	cmp	r2, r3
 8001062:	d02b      	beq.n	80010bc <uart3_kick_tx_dma+0x78>

  // 연속 구간 길이 산출 (wrap 안 끊기게 1번 전송)
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001064:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	429a      	cmp	r2, r3
 8001072:	d308      	bcc.n	8001086 <uart3_kick_tx_dma+0x42>
               ? (uart3_tx_widx - uart3_tx_ridx)
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <uart3_kick_tx_dma+0x88>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	e005      	b.n	8001092 <uart3_kick_tx_dma+0x4e>
               : (UART3_TBUF_SIZE - uart3_tx_ridx);
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
  uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 800108c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001090:	b29b      	uxth	r3, r3
 8001092:	80fb      	strh	r3, [r7, #6]

  uart3_tx_last_len = len;
 8001094:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <uart3_kick_tx_dma+0x8c>)
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	8013      	strh	r3, [r2, #0]
  uart3_tx_busy = 1;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <uart3_kick_tx_dma+0x80>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]

  // (D-Cache 켠 경우) DMA가 읽을 영역 클린
  // SCB_CleanDCache_by_Addr((uint32_t*)&uart3_tbuf[uart3_tx_ridx], len);

  HAL_UART_Transmit_DMA(&huart3, &uart3_tbuf[uart3_tx_ridx], len);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <uart3_kick_tx_dma+0x84>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <uart3_kick_tx_dma+0x90>)
 80010aa:	4413      	add	r3, r2
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <uart3_kick_tx_dma+0x94>)
 80010b2:	f00d fb9b 	bl	800e7ec <HAL_UART_Transmit_DMA>
 80010b6:	e002      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_busy) return;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <uart3_kick_tx_dma+0x7a>
  if (uart3_tx_ridx == uart3_tx_widx) return; // empty
 80010bc:	bf00      	nop
}
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240022d2 	.word	0x240022d2
 80010c8:	240022ce 	.word	0x240022ce
 80010cc:	240022cc 	.word	0x240022cc
 80010d0:	240022d0 	.word	0x240022d0
 80010d4:	240012cc 	.word	0x240012cc
 80010d8:	24000338 	.word	0x24000338

080010dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_UART_TxCpltCallback+0x40>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d112      	bne.n	8001114 <HAL_UART_TxCpltCallback+0x38>

  uart3_tx_ridx = (uart3_tx_ridx + uart3_tx_last_len) & (UART3_TBUF_SIZE - 1);
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_UART_TxCpltCallback+0x48>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_UART_TxCpltCallback+0x44>)
 8001106:	801a      	strh	r2, [r3, #0]
  uart3_tx_busy = 0;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_UART_TxCpltCallback+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
  uart3_kick_tx_dma(); // 남은 데이터가 있으면 곧장 다음 덩어리 전송
 800110e:	f7ff ff99 	bl	8001044 <uart3_kick_tx_dma>
 8001112:	e000      	b.n	8001116 <HAL_UART_TxCpltCallback+0x3a>
  if (huart->Instance != USART3) return;
 8001114:	bf00      	nop
}
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40004800 	.word	0x40004800
 8001120:	240022ce 	.word	0x240022ce
 8001124:	240022d0 	.word	0x240022d0
 8001128:	240022d2 	.word	0x240022d2

0800112c <uart3_tx_write>:

static size_t uart3_tx_write(const uint8_t *data, size_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  size_t w = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 800113a:	e05d      	b.n	80011f8 <uart3_tx_write+0xcc>
    // 먼저 남은 공간 계산(논크리티컬)
    uint16_t r = uart3_tx_ridx;
 800113c:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <uart3_tx_write+0xe4>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	837b      	strh	r3, [r7, #26]
    uint16_t w0 = uart3_tx_widx;
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <uart3_tx_write+0xe8>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	833b      	strh	r3, [r7, #24]
    uint16_t space = (r > w0) ? (r - w0 - 1) : (UART3_TBUF_SIZE - (w0 - r) - 1);
 8001148:	8b7a      	ldrh	r2, [r7, #26]
 800114a:	8b3b      	ldrh	r3, [r7, #24]
 800114c:	429a      	cmp	r2, r3
 800114e:	d906      	bls.n	800115e <uart3_tx_write+0x32>
 8001150:	8b7a      	ldrh	r2, [r7, #26]
 8001152:	8b3b      	ldrh	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b01      	subs	r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	e006      	b.n	800116c <uart3_tx_write+0x40>
 800115e:	8b7a      	ldrh	r2, [r7, #26]
 8001160:	8b3b      	ldrh	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800116a:	b29b      	uxth	r3, r3
 800116c:	82fb      	strh	r3, [r7, #22]
    if (space == 0) break;
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d046      	beq.n	8001202 <uart3_tx_write+0xd6>

    size_t chunk = (len - w < space) ? (len - w) : space;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	4293      	cmp	r3, r2
 800117e:	bf28      	it	cs
 8001180:	4613      	movcs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
    size_t first = (w0 + chunk <= UART3_TBUF_SIZE) ? chunk : (UART3_TBUF_SIZE - w0);
 8001184:	8b3a      	ldrh	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800118e:	d903      	bls.n	8001198 <uart3_tx_write+0x6c>
 8001190:	8b3b      	ldrh	r3, [r7, #24]
 8001192:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001196:	e000      	b.n	800119a <uart3_tx_write+0x6e>
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	60fb      	str	r3, [r7, #12]

    memcpy(&uart3_tbuf[w0], &data[w], first);
 800119c:	8b3b      	ldrh	r3, [r7, #24]
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <uart3_tx_write+0xec>)
 80011a0:	1898      	adds	r0, r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	4413      	add	r3, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4619      	mov	r1, r3
 80011ac:	f014 f873 	bl	8015296 <memcpy>
    if (chunk > first) memcpy(&uart3_tbuf[0], &data[w + first], chunk - first);
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d90b      	bls.n	80011d0 <uart3_tx_write+0xa4>
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	18d1      	adds	r1, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	@ (8001218 <uart3_tx_write+0xec>)
 80011cc:	f014 f863 	bl	8015296 <memcpy>

    taskENTER_CRITICAL();
 80011d0:	f011 feea 	bl	8012fa8 <vPortEnterCritical>
    uart3_tx_widx = (w0 + chunk) & (UART3_TBUF_SIZE - 1);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	8b3b      	ldrh	r3, [r7, #24]
 80011da:	4413      	add	r3, r2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <uart3_tx_write+0xe8>)
 80011e6:	801a      	strh	r2, [r3, #0]
    uart3_kick_tx_dma();
 80011e8:	f7ff ff2c 	bl	8001044 <uart3_kick_tx_dma>
    taskEXIT_CRITICAL();
 80011ec:	f011 ff0e 	bl	801300c <vPortExitCritical>

    w += chunk;
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d39d      	bcc.n	800113c <uart3_tx_write+0x10>
 8001200:	e000      	b.n	8001204 <uart3_tx_write+0xd8>
    if (space == 0) break;
 8001202:	bf00      	nop
  }
  return w;
 8001204:	69fb      	ldr	r3, [r7, #28]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	240022ce 	.word	0x240022ce
 8001214:	240022cc 	.word	0x240022cc
 8001218:	240012cc 	.word	0x240012cc

0800121c <_write>:

int _write(int file, char *p, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  size_t pos = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800122c:	e01e      	b.n	800126c <_write+0x50>
    size_t n = uart3_tx_write((uint8_t*)p + pos, (size_t)len - pos);
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	18d0      	adds	r0, r2, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff ff76 	bl	800112c <uart3_tx_write>
 8001240:	6138      	str	r0, [r7, #16]
    if (n == 0) {
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <_write+0x48>
      // 버퍼가 가득 → RT 제어를 막지 않게 즉시 양보
      if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 8001248:	f011 f940 	bl	80124cc <xTaskGetSchedulerState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b02      	cmp	r3, #2
 8001250:	d10c      	bne.n	800126c <_write+0x50>
        taskYIELD();      // 또는 vTaskDelay(1) 등
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <_write+0x64>)
 8001254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	e003      	b.n	800126c <_write+0x50>
      } else {
        // 스케줄러 전이면 잠깐 회전
      }
    } else {
      pos += n;
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3dc      	bcc.n	800122e <_write+0x12>
    }
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000ed04 	.word	0xe000ed04

08001284 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <uart3_rb_pop+0x50>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <uart3_rb_pop+0x54>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	429a      	cmp	r2, r3
 800129a:	d101      	bne.n	80012a0 <uart3_rb_pop+0x1c>
 800129c:	2300      	movs	r3, #0
 800129e:	e012      	b.n	80012c6 <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <uart3_rb_pop+0x58>)
 80012aa:	5c9a      	ldrb	r2, [r3, r2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <uart3_rb_pop+0x50>)
 80012c2:	801a      	strh	r2, [r3, #0]
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	24000ec6 	.word	0x24000ec6
 80012d8:	24000ec4 	.word	0x24000ec4
 80012dc:	240006c4 	.word	0x240006c4

080012e0 <parse_pc_line_to_floats>:
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
}

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  char *L = strchr(line, '[');
 80012ec:	215b      	movs	r1, #91	@ 0x5b
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f013 fec7 	bl	8015082 <strchr>
 80012f4:	62b8      	str	r0, [r7, #40]	@ 0x28
  char *R = strrchr(line, ']');
 80012f6:	215d      	movs	r1, #93	@ 0x5d
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f013 fee1 	bl	80150c0 <strrchr>
 80012fe:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!L || !R || R <= L) return 0;
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <parse_pc_line_to_floats+0x34>
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <parse_pc_line_to_floats+0x34>
 800130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	429a      	cmp	r2, r3
 8001312:	d801      	bhi.n	8001318 <parse_pc_line_to_floats+0x38>
 8001314:	2300      	movs	r3, #0
 8001316:	e097      	b.n	8001448 <parse_pc_line_to_floats+0x168>

  *R = '\0'; ++L;
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001320:	3301      	adds	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28

  int count = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  char *p = L;
 8001328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30

  while (*p && count < maxn) {
 800132c:	e07b      	b.n	8001426 <parse_pc_line_to_floats+0x146>
    // 구분자(,) 전까지 토큰 범위 찾기
    char *q = p;
 800132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*q && *q != ',') ++q;
 8001332:	e002      	b.n	800133a <parse_pc_line_to_floats+0x5a>
 8001334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001336:	3301      	adds	r3, #1
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <parse_pc_line_to_floats+0x72>
 8001342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b2c      	cmp	r3, #44	@ 0x2c
 8001348:	d1f4      	bne.n	8001334 <parse_pc_line_to_floats+0x54>

    // 토큰 문자열 [p, q)
    // 앞뒤 공백 제거
    while (*p == ' ' || *p == '\t') ++p;
 800134a:	e002      	b.n	8001352 <parse_pc_line_to_floats+0x72>
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	3301      	adds	r3, #1
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
 8001352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b20      	cmp	r3, #32
 8001358:	d0f8      	beq.n	800134c <parse_pc_line_to_floats+0x6c>
 800135a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b09      	cmp	r3, #9
 8001360:	d0f4      	beq.n	800134c <parse_pc_line_to_floats+0x6c>
    char *e = q;
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	61bb      	str	r3, [r7, #24]
    while (e > p && (e[-1] == ' ' || e[-1] == '\t')) --e;
 8001366:	e002      	b.n	800136e <parse_pc_line_to_floats+0x8e>
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	3b01      	subs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001372:	429a      	cmp	r2, r3
 8001374:	d209      	bcs.n	800138a <parse_pc_line_to_floats+0xaa>
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3b01      	subs	r3, #1
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b20      	cmp	r3, #32
 800137e:	d0f3      	beq.n	8001368 <parse_pc_line_to_floats+0x88>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3b01      	subs	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d0ee      	beq.n	8001368 <parse_pc_line_to_floats+0x88>

    if (e > p) { // 빈 토큰이 아니면
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800138e:	429a      	cmp	r2, r3
 8001390:	d242      	bcs.n	8001418 <parse_pc_line_to_floats+0x138>
      errno = 0;
 8001392:	f013 ff53 	bl	801523c <__errno>
 8001396:	4603      	mov	r3, r0
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
      char tmp = *e; *e = '\0';
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
      char *endptr = NULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
      float v = strtof(p, endptr ? &endptr : &e); // newlib-nano 대응
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <parse_pc_line_to_floats+0xda>
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	e001      	b.n	80013be <parse_pc_line_to_floats+0xde>
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013c2:	f013 f8bd 	bl	8014540 <strtof>
 80013c6:	ed87 0a07 	vstr	s0, [r7, #28]
      if (endptr) {
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d017      	beq.n	8001400 <parse_pc_line_to_floats+0x120>
        while (*endptr == ' ' || *endptr == '\t') ++endptr;
 80013d0:	e002      	b.n	80013d8 <parse_pc_line_to_floats+0xf8>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d0f8      	beq.n	80013d2 <parse_pc_line_to_floats+0xf2>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d0f4      	beq.n	80013d2 <parse_pc_line_to_floats+0xf2>
        if (errno != 0 || *endptr != '\0') return 0; // 유효 숫자 아님 → 실패
 80013e8:	f013 ff28 	bl	801523c <__errno>
 80013ec:	4603      	mov	r3, r0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <parse_pc_line_to_floats+0x11c>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <parse_pc_line_to_floats+0x120>
 80013fc:	2300      	movs	r3, #0
 80013fe:	e023      	b.n	8001448 <parse_pc_line_to_floats+0x168>
      }
      vals[count++] = v;
 8001400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	637a      	str	r2, [r7, #52]	@ 0x34
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	601a      	str	r2, [r3, #0]
      *e = tmp;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001416:	701a      	strb	r2, [r3, #0]
    }
    // 끝 처리
    if (*q == '\0') break;
 8001418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <parse_pc_line_to_floats+0x15a>
    p = q + 1;
 8001420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001422:	3301      	adds	r3, #1
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  while (*p && count < maxn) {
 8001426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <parse_pc_line_to_floats+0x15c>
 800142e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	f6ff af7b 	blt.w	800132e <parse_pc_line_to_floats+0x4e>
 8001438:	e000      	b.n	800143c <parse_pc_line_to_floats+0x15c>
    if (*q == '\0') break;
 800143a:	bf00      	nop
  }

  // 꼭 19개여야 성공
  return (count == PC_MSG_FIELDS) ? count : 0;
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	2b13      	cmp	r3, #19
 8001440:	d101      	bne.n	8001446 <parse_pc_line_to_floats+0x166>
 8001442:	2313      	movs	r3, #19
 8001444:	e000      	b.n	8001448 <parse_pc_line_to_floats+0x168>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8001450:	b480      	push	{r7}
 8001452:	b097      	sub	sp, #92	@ 0x5c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 800145c:	2301      	movs	r3, #1
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001460:	2302      	movs	r3, #2
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001464:	2303      	movs	r3, #3
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 8001468:	2304      	movs	r3, #4
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
 800146c:	2305      	movs	r3, #5
 800146e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001470:	2306      	movs	r3, #6
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001474:	2307      	movs	r3, #7
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001478:	2308      	movs	r3, #8
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 800147c:	2309      	movs	r3, #9
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001480:	230a      	movs	r3, #10
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001484:	230b      	movs	r3, #11
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001488:	230c      	movs	r3, #12
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
 800148c:	230d      	movs	r3, #13
 800148e:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 8001490:	230e      	movs	r3, #14
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	230f      	movs	r3, #15
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	2310      	movs	r3, #16
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	2311      	movs	r3, #17
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	2312      	movs	r3, #18
 80014a2:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80014a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	f240 809e 	bls.w	80015f8 <apply_pc_floats+0x1a8>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	f240 8092 	bls.w	80015f8 <apply_pc_floats+0x1a8>
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	f240 8086 	bls.w	80015f8 <apply_pc_floats+0x1a8>

	// 1) taskTime & 타겟 위치 설정
	taskTime = v[T];
 80014ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <apply_pc_floats+0x1b4>)
 80014f8:	6013      	str	r3, [r2, #0]
	desired_posXYZ[0] = v[tx];
 80014fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001506:	6013      	str	r3, [r2, #0]
	desired_posXYZ[1] = v[ty];
 8001508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a3d      	ldr	r2, [pc, #244]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001514:	6053      	str	r3, [r2, #4]
	desired_posXYZ[2] = v[tz];
 8001516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <apply_pc_floats+0x1b8>)
 8001522:	6093      	str	r3, [r2, #8]

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 8001524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a37      	ldr	r2, [pc, #220]	@ (800160c <apply_pc_floats+0x1bc>)
 8001530:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8001532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <apply_pc_floats+0x1c0>)
 800153e:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8001540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a32      	ldr	r2, [pc, #200]	@ (8001614 <apply_pc_floats+0x1c4>)
 800154c:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 800154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <apply_pc_floats+0x1c8>)
 800155a:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <apply_pc_floats+0x1cc>)
 8001568:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 800156a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a25      	ldr	r2, [pc, #148]	@ (800160c <apply_pc_floats+0x1bc>)
 8001576:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a23      	ldr	r2, [pc, #140]	@ (8001610 <apply_pc_floats+0x1c0>)
 8001584:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a20      	ldr	r2, [pc, #128]	@ (8001614 <apply_pc_floats+0x1c4>)
 8001592:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <apply_pc_floats+0x1c8>)
 80015a0:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <apply_pc_floats+0x1cc>)
 80015ae:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <apply_pc_floats+0x1bc>)
 80015bc:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <apply_pc_floats+0x1c0>)
 80015ca:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <apply_pc_floats+0x1c4>)
 80015d8:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <apply_pc_floats+0x1c8>)
 80015e6:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <apply_pc_floats+0x1cc>)
 80015f4:	6093      	str	r3, [r2, #8]
 80015f6:	e000      	b.n	80015fa <apply_pc_floats+0x1aa>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80015f8:	bf00      	nop
}
 80015fa:	375c      	adds	r7, #92	@ 0x5c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	24000018 	.word	0x24000018
 8001608:	2400001c 	.word	0x2400001c
 800160c:	24000034 	.word	0x24000034
 8001610:	24000040 	.word	0x24000040
 8001614:	2400004c 	.word	0x2400004c
 8001618:	24000058 	.word	0x24000058
 800161c:	24002310 	.word	0x24002310

08001620 <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	@ 0x58
 8001624:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 8001626:	e03b      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 8001628:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800162c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8001630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001634:	2b0d      	cmp	r3, #13
 8001636:	d032      	beq.n	800169e <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8001638:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d11a      	bne.n	8001676 <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d02b      	beq.n	80016a0 <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800164e:	2100      	movs	r1, #0
 8001650:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8001652:	463b      	mov	r3, r7
 8001654:	2213      	movs	r2, #19
 8001656:	4619      	mov	r1, r3
 8001658:	4819      	ldr	r0, [pc, #100]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800165a:	f7ff fe41 	bl	80012e0 <parse_pc_line_to_floats>
 800165e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n >= PC_MSG_FIELDS) {
 8001660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001662:	2b12      	cmp	r3, #18
 8001664:	dd03      	ble.n	800166e <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8001666:	463b      	mov	r3, r7
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fef1 	bl	8001450 <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e014      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800167e:	4293      	cmp	r3, r2
 8001680:	d809      	bhi.n	8001696 <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 800168a:	600a      	str	r2, [r1, #0]
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <uart3_poll_and_process_lines+0xa0>)
 800168e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001692:	54ca      	strb	r2, [r1, r3]
 8001694:	e004      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <uart3_poll_and_process_lines+0x9c>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e000      	b.n	80016a0 <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 800169e:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 80016a0:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fded 	bl	8001284 <uart3_rb_pop>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1bb      	bne.n	8001628 <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3758      	adds	r7, #88	@ 0x58
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240012c8 	.word	0x240012c8
 80016c0:	24000ec8 	.word	0x24000ec8

080016c4 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	2400231c 	.word	0x2400231c

080016f4 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8001704:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001708:	f7ff ffdc 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
    }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8001714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001718:	ed2d 8b02 	vpush	{d8}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	ed87 0a03 	vstr	s0, [r7, #12]
 8001724:	edc7 0a02 	vstr	s1, [r7, #8]
 8001728:	ed87 1a01 	vstr	s2, [r7, #4]
 800172c:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 800172e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001732:	edd7 7a02 	vldr	s15, [r7, #8]
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 800173e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001742:	edd7 7a02 	vldr	s15, [r7, #8]
 8001746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d502      	bpl.n	8001756 <float32_t_to_uint+0x42>
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	60f9      	str	r1, [r7, #12]
 8001754:	e00a      	b.n	800176c <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8001756:	ed97 7a03 	vldr	s14, [r7, #12]
 800175a:	edd7 7a01 	vldr	s15, [r7, #4]
 800175e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	dd01      	ble.n	800176c <float32_t_to_uint+0x58>
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 800176c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001770:	edd7 7a02 	vldr	s15, [r7, #8]
 8001774:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001778:	f04f 0001 	mov.w	r0, #1
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	683c      	ldr	r4, [r7, #0]
 8001782:	f1a4 0620 	sub.w	r6, r4, #32
 8001786:	f1c4 0520 	rsb	r5, r4, #32
 800178a:	fa01 f304 	lsl.w	r3, r1, r4
 800178e:	fa00 f606 	lsl.w	r6, r0, r6
 8001792:	4333      	orrs	r3, r6
 8001794:	fa20 f505 	lsr.w	r5, r0, r5
 8001798:	432b      	orrs	r3, r5
 800179a:	fa00 f204 	lsl.w	r2, r0, r4
 800179e:	f112 38ff 	adds.w	r8, r2, #4294967295
 80017a2:	f143 39ff 	adc.w	r9, r3, #4294967295
 80017a6:	4640      	mov	r0, r8
 80017a8:	4649      	mov	r1, r9
 80017aa:	f7ff f875 	bl	8000898 <__aeabi_ul2f>
 80017ae:	ee06 0a90 	vmov	s13, r0
 80017b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c2:	ee17 3a90 	vmov	r3, s15
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	ecbd 8b02 	vpop	{d8}
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017d4 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 80017d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d8:	ed2d 8b02 	vpush	{d8}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80017e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	ee07 1a90 	vmov	s15, r1
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	edd7 7a05 	vldr	s15, [r7, #20]
 800180e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001812:	f04f 0001 	mov.w	r0, #1
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	683c      	ldr	r4, [r7, #0]
 800181c:	f1a4 0620 	sub.w	r6, r4, #32
 8001820:	f1c4 0520 	rsb	r5, r4, #32
 8001824:	fa01 f304 	lsl.w	r3, r1, r4
 8001828:	fa00 f606 	lsl.w	r6, r0, r6
 800182c:	4333      	orrs	r3, r6
 800182e:	fa20 f505 	lsr.w	r5, r0, r5
 8001832:	432b      	orrs	r3, r5
 8001834:	fa00 f204 	lsl.w	r2, r0, r4
 8001838:	f112 38ff 	adds.w	r8, r2, #4294967295
 800183c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7ff f828 	bl	8000898 <__aeabi_ul2f>
 8001848:	ee07 0a90 	vmov	s15, r0
 800184c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001850:	edd7 7a04 	vldr	s15, [r7, #16]
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	ecbd 8b02 	vpop	{d8}
 8001864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001868 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8001872:	23ff      	movs	r3, #255	@ 0xff
 8001874:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800187a:	23ff      	movs	r3, #255	@ 0xff
 800187c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 800187e:	23ff      	movs	r3, #255	@ 0xff
 8001880:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001882:	23ff      	movs	r3, #255	@ 0xff
 8001884:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8001886:	23ff      	movs	r3, #255	@ 0xff
 8001888:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800188a:	23ff      	movs	r3, #255	@ 0xff
 800188c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 800188e:	23fe      	movs	r3, #254	@ 0xfe
 8001890:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4a16      	ldr	r2, [pc, #88]	@ (80018f0 <MIT_reset_origin+0x88>)
 8001896:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001898:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MIT_reset_origin+0x88>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	461a      	mov	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	@ (80018f0 <MIT_reset_origin+0x88>)
 80018d0:	4808      	ldr	r0, [pc, #32]	@ (80018f4 <MIT_reset_origin+0x8c>)
 80018d2:	f008 fca0 	bl	800a216 <HAL_FDCAN_AddMessageToTxFifoQ>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <MIT_reset_origin+0x7e>
		sta = 1;
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MIT_reset_origin+0x90>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80018e2:	f004 faab 	bl	8005e3c <Error_Handler>
	}
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000274 	.word	0x24000274
 80018f4:	24000298 	.word	0x24000298
 80018f8:	24002a4c 	.word	0x24002a4c

080018fc <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8001906:	23ff      	movs	r3, #255	@ 0xff
 8001908:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 800190a:	23ff      	movs	r3, #255	@ 0xff
 800190c:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800190e:	23ff      	movs	r3, #255	@ 0xff
 8001910:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8001912:	23ff      	movs	r3, #255	@ 0xff
 8001914:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001916:	23ff      	movs	r3, #255	@ 0xff
 8001918:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 800191a:	23ff      	movs	r3, #255	@ 0xff
 800191c:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8001922:	23fc      	movs	r3, #252	@ 0xfc
 8001924:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800192a:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800193a:	2208      	movs	r2, #8
 800193c:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MIT_enter_control_mode+0x88>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001958:	2200      	movs	r2, #0
 800195a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	461a      	mov	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <MIT_enter_control_mode+0x88>)
 8001964:	4808      	ldr	r0, [pc, #32]	@ (8001988 <MIT_enter_control_mode+0x8c>)
 8001966:	f008 fc56 	bl	800a216 <HAL_FDCAN_AddMessageToTxFifoQ>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <MIT_enter_control_mode+0x7e>
		sta = 1;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MIT_enter_control_mode+0x90>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001976:	f004 fa61 	bl	8005e3c <Error_Handler>
	}
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000274 	.word	0x24000274
 8001988:	24000298 	.word	0x24000298
 800198c:	24002a4c 	.word	0x24002a4c

08001990 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 800199a:	23ff      	movs	r3, #255	@ 0xff
 800199c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 800199e:	23ff      	movs	r3, #255	@ 0xff
 80019a0:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 80019a2:	23ff      	movs	r3, #255	@ 0xff
 80019a4:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 80019a6:	23ff      	movs	r3, #255	@ 0xff
 80019a8:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 80019aa:	23ff      	movs	r3, #255	@ 0xff
 80019ac:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 80019ae:	23ff      	movs	r3, #255	@ 0xff
 80019b0:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 80019b2:	23ff      	movs	r3, #255	@ 0xff
 80019b4:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 80019b6:	23fd      	movs	r3, #253	@ 0xfd
 80019b8:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	4a16      	ldr	r2, [pc, #88]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019be:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019ce:	2208      	movs	r2, #8
 80019d0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	461a      	mov	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <MIT_exit_control_mode+0x88>)
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <MIT_exit_control_mode+0x8c>)
 80019fa:	f008 fc0c 	bl	800a216 <HAL_FDCAN_AddMessageToTxFifoQ>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <MIT_exit_control_mode+0x7e>
		sta = 1;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <MIT_exit_control_mode+0x90>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001a0a:	f004 fa17 	bl	8005e3c <Error_Handler>
	}
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000274 	.word	0x24000274
 8001a1c:	24000298 	.word	0x24000298
 8001a20:	24002a4c 	.word	0x24002a4c

08001a24 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3302      	adds	r3, #2
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3305      	adds	r3, #5
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	121b      	asrs	r3, r3, #8
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3306      	adds	r3, #6
 8001a68:	f002 020f 	and.w	r2, r2, #15
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3307      	adds	r3, #7
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	ed87 0a00 	vstr	s0, [r7]
 8001a94:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 8001a96:	4b32      	ldr	r3, [pc, #200]	@ (8001b60 <MIT_Mode+0xd8>)
 8001a98:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <MIT_Mode+0xdc>)
 8001a9c:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 8001a9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa6:	edd7 6a00 	vldr	s13, [r7]
 8001aaa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001aae:	eeb0 1b46 	vmov.f64	d1, d6
 8001ab2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab6:	f015 fe9b 	bl	80177f0 <fmax>
 8001aba:	eeb0 6b40 	vmov.f64	d6, d0
 8001abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ac6:	eeb0 1b47 	vmov.f64	d1, d7
 8001aca:	eeb0 0b46 	vmov.f64	d0, d6
 8001ace:	f015 feac 	bl	801782a <fmin>
 8001ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ad6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ada:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001ade:	200c      	movs	r0, #12
 8001ae0:	ed97 1a06 	vldr	s2, [r7, #24]
 8001ae4:	edd7 0a07 	vldr	s1, [r7, #28]
 8001ae8:	ed97 0a00 	vldr	s0, [r7]
 8001aec:	f7ff fe12 	bl	8001714 <float32_t_to_uint>
 8001af0:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff91 	bl	8001a24 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b06:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b16:	2208      	movs	r2, #8
 8001b18:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	490a      	ldr	r1, [pc, #40]	@ (8001b68 <MIT_Mode+0xe0>)
 8001b40:	480a      	ldr	r0, [pc, #40]	@ (8001b6c <MIT_Mode+0xe4>)
 8001b42:	f008 fb68 	bl	800a216 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <MIT_Mode+0xce>
		sta = 1;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <MIT_Mode+0xe8>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001b52:	f004 f973 	bl	8005e3c <Error_Handler>
	}
}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	c1c80000 	.word	0xc1c80000
 8001b64:	41c80000 	.word	0x41c80000
 8001b68:	24000274 	.word	0x24000274
 8001b6c:	24000298 	.word	0x24000298
 8001b70:	24002a4c 	.word	0x24002a4c

08001b74 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b092      	sub	sp, #72	@ 0x48
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d04b      	beq.n	8001c20 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001b88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	2140      	movs	r1, #64	@ 0x40
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f008 fb9a 	bl	800a2cc <HAL_FDCAN_GetRxMessage>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
            Error_Handler();
 8001ba4:	f004 f94a 	bl	8005e3c <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001ba8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001bac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb4:	e02b      	b.n	8001c0e <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bba:	2198      	movs	r1, #152	@ 0x98
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11c      	bne.n	8001c08 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 8001bd2:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd6:	2198      	movs	r1, #152	@ 0x98
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3310      	adds	r3, #16
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001be6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001bea:	2300      	movs	r3, #0
 8001bec:	f00f fade 	bl	80111ac <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00f      	beq.n	8001c16 <HAL_FDCAN_RxFifo0Callback+0xa2>
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	f3bf 8f6f 	isb	sy
                break;
 8001c06:	e006      	b.n	8001c16 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	ddd0      	ble.n	8001bb6 <HAL_FDCAN_RxFifo0Callback+0x42>
 8001c14:	e000      	b.n	8001c18 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 8001c16:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001c1c:	f009 fc25 	bl	800b46a <HAL_GPIO_TogglePin>
    }
}
 8001c20:	bf00      	nop
 8001c22:	3748      	adds	r7, #72	@ 0x48
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24002a4c 	.word	0x24002a4c
 8001c2c:	2400231c 	.word	0x2400231c
 8001c30:	e000ed04 	.word	0xe000ed04
 8001c34:	58021000 	.word	0x58021000

08001c38 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c42:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c46:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c4a:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001c4e:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001cc8 <tustin_derivative+0x90>
 8001c52:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c56:	edd7 7a00 	vldr	s15, [r7]
 8001c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c66:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001c70:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c80:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ccc <tustin_derivative+0x94>
 8001c84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ca4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ccc <tustin_derivative+0x94>
 8001ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb0:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	ee07 3a90 	vmov	s15, r3
}
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40490fd8 	.word	0x40490fd8
 8001ccc:	3b03126f 	.word	0x3b03126f

08001cd0 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	@ 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 8001d2e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d34:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t buf[8], last[8]; int got = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (xQueueReceive(m->canRxQueue, buf, 0) == pdPASS) { memcpy(last, buf, 8); got = 1; }
 8001d3e:	e009      	b.n	8001d54 <motor_encoder_read+0x84>
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	f107 0214 	add.w	r2, r7, #20
 8001d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d50:	2301      	movs	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f107 0114 	add.w	r1, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00f fac2 	bl	80112e8 <xQueueReceive>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d0ea      	beq.n	8001d40 <motor_encoder_read+0x70>
	if (got)
 8001d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01f      	beq.n	8001db0 <motor_encoder_read+0xe0>
	{
		// CAN 메시지가 이미 수신되었을 시
		unsigned int p_int = ((last[1]<<8)|last[2]);
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	7bba      	ldrb	r2, [r7, #14]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	623b      	str	r3, [r7, #32]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001d80:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f7ff fd25 	bl	80017d4 <uint_to_float32_t>
 8001d8a:	ed87 0a07 	vstr	s0, [r7, #28]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001d8e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8001e2c <motor_encoder_read+0x15c>
 8001d92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001dae:	e003      	b.n	8001db8 <motor_encoder_read+0xe8>
	else
	{
//		sta = 2;
//		Error_Handler();
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		m->pos = m->pos_old;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ed93 6a06 	vldr	s12, [r3, #24]
 8001dd0:	eef0 1a46 	vmov.f32	s3, s12
 8001dd4:	eeb0 1a66 	vmov.f32	s2, s13
 8001dd8:	eef0 0a47 	vmov.f32	s1, s14
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	f7ff ff2a 	bl	8001c38 <tustin_derivative>
 8001de4:	eef0 7a40 	vmov.f32	s15, s0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	ed93 6a06 	vldr	s12, [r3, #24]
 8001e06:	eef0 1a46 	vmov.f32	s3, s12
 8001e0a:	eeb0 1a66 	vmov.f32	s2, s13
 8001e0e:	eef0 0a47 	vmov.f32	s1, s14
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f7ff ff0f 	bl	8001c38 <tustin_derivative>
 8001e1a:	eef0 7a40 	vmov.f32	s15, s0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40490fd8 	.word	0x40490fd8

08001e30 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e42:	ed97 7a00 	vldr	s14, [r7]
 8001e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	dd1a      	ble.n	8001eb0 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d400      	bmi.n	8001ec8 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001ec6:	e01a      	b.n	8001efe <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08b      	sub	sp, #44	@ 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f22:	f015 fd29 	bl	8017978 <sinf>
 8001f26:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	f015 fde2 	bl	8017b00 <cosf>
 8001f3c:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f46:	3304      	adds	r3, #4
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f015 fd12 	bl	8017978 <sinf>
 8001f54:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f5e:	3304      	adds	r3, #4
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb0 0a67 	vmov.f32	s0, s15
 8001f68:	f015 fdca 	bl	8017b00 <cosf>
 8001f6c:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f76:	3308      	adds	r3, #8
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f80:	f015 fcfa 	bl	8017978 <sinf>
 8001f84:	ed87 0a03 	vstr	s0, [r7, #12]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001f8e:	3308      	adds	r3, #8
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	f015 fdb2 	bl	8017b00 <cosf>
 8001f9c:	ed87 0a02 	vstr	s0, [r7, #8]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa4:	e03a      	b.n	800201c <robot_forward_kinematics_cal+0x110>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
		r->accXYZ_old.pData[i] = r->accXYZ.pData[i];
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 1310 	ldr.w	r1, [r3, #784]	@ 0x310
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	2b02      	cmp	r3, #2
 8002020:	ddc1      	ble.n	8001fa6 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002028:	edd7 7a04 	vldr	s15, [r7, #16]
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002036:	edd7 7a02 	vldr	s15, [r7, #8]
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800205a:	edd7 7a04 	vldr	s15, [r7, #16]
 800205e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002068:	edd7 7a02 	vldr	s15, [r7, #8]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 800207a:	3304      	adds	r3, #4
 800207c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	ed93 7acb 	vldr	s14, [r3, #812]	@ 0x32c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edd3 6acc 	vldr	s13, [r3, #816]	@ 0x330
 8002094:	edd7 7a05 	vldr	s15, [r7, #20]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80020b4:	3308      	adds	r3, #8
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 80020d0:	461a      	mov	r2, r3
 80020d2:	f011 fad7 	bl	8013684 <arm_mat_mult_f32>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d004      	beq.n	80020e6 <robot_forward_kinematics_cal+0x1da>
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <robot_forward_kinematics_cal+0x250>)
 80020de:	2204      	movs	r2, #4
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f003 feab 	bl	8005e3c <Error_Handler>
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	e02e      	b.n	800214a <robot_forward_kinematics_cal+0x23e>
		r->accXYZ.pData[i] = tustin_derivative(r->velXYZ.pData[i], r->velXYZ_old.pData[i], r->accXYZ_old.pData[i], 70.0f);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	@ 0x2e8
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	ed93 7a00 	vldr	s14, [r3]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 2310 	ldr.w	r2, [r3, #784]	@ 0x310
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	edd3 6a00 	vldr	s13, [r3]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	18d4      	adds	r4, r2, r3
 8002128:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8002160 <robot_forward_kinematics_cal+0x254>
 800212c:	eeb0 1a66 	vmov.f32	s2, s13
 8002130:	eef0 0a47 	vmov.f32	s1, s14
 8002134:	eeb0 0a67 	vmov.f32	s0, s15
 8002138:	f7ff fd7e 	bl	8001c38 <tustin_derivative>
 800213c:	eef0 7a40 	vmov.f32	s15, s0
 8002140:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	3301      	adds	r3, #1
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	2b02      	cmp	r3, #2
 800214e:	ddcd      	ble.n	80020ec <robot_forward_kinematics_cal+0x1e0>
	}
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	372c      	adds	r7, #44	@ 0x2c
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	24002a4c 	.word	0x24002a4c
 8002160:	428c0000 	.word	0x428c0000

08002164 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0f0      	sub	sp, #448	@ 0x1c0
 8002168:	af00      	add	r7, sp, #0
 800216a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800216e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002172:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8002174:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002178:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	f015 fbf5 	bl	8017978 <sinf>
 800218e:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8002192:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002196:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	f015 fcaa 	bl	8017b00 <cosf>
 80021ac:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80021b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021be:	3304      	adds	r3, #4
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	f015 fbd6 	bl	8017978 <sinf>
 80021cc:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80021d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021de:	3304      	adds	r3, #4
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eeb0 0a67 	vmov.f32	s0, s15
 80021e8:	f015 fc8a 	bl	8017b00 <cosf>
 80021ec:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 80021f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80021fe:	3308      	adds	r3, #8
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	f015 fbb6 	bl	8017978 <sinf>
 800220c:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8002210:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002214:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800221e:	3308      	adds	r3, #8
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	f015 fc6a 	bl	8017b00 <cosf>
 800222c:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8002230:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002234:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800223e:	3308      	adds	r3, #8
 8002240:	ed93 7a00 	vldr	s14, [r3]
 8002244:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002248:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002252:	3304      	adds	r3, #4
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	f015 fb8a 	bl	8017978 <sinf>
 8002264:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8002268:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800226c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002276:	3308      	adds	r3, #8
 8002278:	ed93 7a00 	vldr	s14, [r3]
 800227c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002280:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800228a:	3304      	adds	r3, #4
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002294:	eeb0 0a67 	vmov.f32	s0, s15
 8002298:	f015 fc32 	bl	8017b00 <cosf>
 800229c:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 80022a0:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80022a4:	eeb1 7a67 	vneg.f32	s14, s15
 80022a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	edd3 6acc 	vldr	s13, [r3, #816]	@ 0x330
 80022b6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80022ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	ed93 6acd 	vldr	s12, [r3, #820]	@ 0x334
 80022cc:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80022d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 80022ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80022fc:	eeb1 7a67 	vneg.f32	s14, s15
 8002300:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8002304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002308:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800230c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8002316:	3304      	adds	r3, #4
 8002318:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8002324:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002328:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002332:	eeb1 7a67 	vneg.f32	s14, s15
 8002336:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800233a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002342:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800234c:	3308      	adds	r3, #8
 800234e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002356:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800235a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800235e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002368:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002374:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 800237e:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002398:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800239c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 80023b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80023c4:	eeb1 7a67 	vneg.f32	s14, s15
 80023c8:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80023de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80023ec:	3301      	adds	r3, #1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 80023fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002402:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 800240c:	eeb1 7a67 	vneg.f32	s14, s15
 8002410:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002418:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800241c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002426:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800242a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002434:	3302      	adds	r3, #2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 8002446:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800244a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002454:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002458:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 800246c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002470:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800247a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800247e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8002488:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800248c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3304      	adds	r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 80024a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 80024b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80024c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 334e 	ldrh.w	r3, [r3, #846]	@ 0x34e
 80024d2:	3301      	adds	r3, #1
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 80024e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 7253 	add.w	r2, r3, #844	@ 0x34c
 80024f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f011 f860 	bl	80135c8 <arm_mat_trans_f32>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <robot_model_param_cal+0x3bc>
 800250e:	4b03      	ldr	r3, [pc, #12]	@ (800251c <robot_model_param_cal+0x3b8>)
 8002510:	2204      	movs	r2, #4
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f003 fc92 	bl	8005e3c <Error_Handler>
 8002518:	e002      	b.n	8002520 <robot_model_param_cal+0x3bc>
 800251a:	bf00      	nop
 800251c:	24002a4c 	.word	0x24002a4c

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8002520:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002524:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 800252e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002532:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002536:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800253a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	edd3 6ad2 	vldr	s13, [r3, #840]	@ 0x348
 8002544:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8002554:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002558:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	ed93 7ace 	vldr	s14, [r3, #824]	@ 0x338
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8002562:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002566:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	edd3 6ac9 	vldr	s13, [r3, #804]	@ 0x324
 8002570:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002574:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	ed93 6ad1 	vldr	s12, [r3, #836]	@ 0x344
 800257e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002582:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002586:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800258a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	ed93 6ad1 	vldr	s12, [r3, #836]	@ 0x344
 8002598:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800259c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 80025a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 80025b6:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80025ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025be:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80025c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80025c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 80025d4:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80025d8:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 80025dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 80025ea:	eeb1 7a67 	vneg.f32	s14, s15
 80025ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002604:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800261e:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002622:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002626:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002630:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002638:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800263c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002646:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800264a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002652:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002656:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002660:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8002662:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002666:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 800266a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8002678:	eeb1 7a67 	vneg.f32	s14, s15
 800267c:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002684:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002688:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800269a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80026a4:	3308      	adds	r3, #8
 80026a6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 80026b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80026c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80026ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 80026e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	ed93 7acf 	vldr	s14, [r3, #828]	@ 0x33c
											+ r->m3 * r->l2 * r->l2;
 80026f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002700:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002704:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 800270e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002712:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002716:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8002724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002728:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002732:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002736:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 8002740:	3301      	adds	r3, #1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 800274a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 800274e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002752:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	ed93 7aca 	vldr	s14, [r3, #808]	@ 0x328
 800275c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002760:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 800276a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002772:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002784:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800278e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002792:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 800279c:	3302      	adds	r3, #2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 80027ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80027bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80027ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 80027e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80027ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 80027fc:	3302      	adds	r3, #2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002806:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002810:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002814:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	3304      	adds	r3, #4
 8002822:	440b      	add	r3, r1
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8002828:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800282c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002836:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800283a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	@ 0x3fe
 8002844:	3301      	adds	r3, #1
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 800284e:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 8002858:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 800285a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800285e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	edd3 7ac9 	vldr	s15, [r3, #804]	@ 0x324
 8002868:	eeb1 7a67 	vneg.f32	s14, s15
 800286c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002870:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800287a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002882:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002898:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028ae:	3304      	adds	r3, #4
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 80028b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 80028c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	ed93 6acc 	vldr	s12, [r3, #816]	@ 0x330
 80028d4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80028d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80028ea:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80028ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	ed93 6acc 	vldr	s12, [r3, #816]	@ 0x330
 8002908:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800290c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002910:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002914:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800291e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002926:	ee36 6a27 	vadd.f32	s12, s12, s15
 800292a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002938:	3304      	adds	r3, #4
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002942:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002946:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002950:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002954:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002958:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800295c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002966:	3308      	adds	r3, #8
 8002968:	ed93 5a00 	vldr	s10, [r3]
 800296c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002970:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800297a:	3304      	adds	r3, #4
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002984:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002988:	ee76 7a27 	vadd.f32	s15, s12, s15
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8002994:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8002998:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800299c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80029a6:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80029aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
							 ) * r->qdot_bi.pData[0];
 80029b8:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 80029bc:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 80029c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 80029ce:	eeb1 7a67 	vneg.f32	s14, s15
 80029d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a02:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	edd3 6a00 	vldr	s13, [r3]
 8002a12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a20:	3304      	adds	r3, #4
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a32:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	edd3 6a00 	vldr	s13, [r3]
 8002a42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002a50:	3304      	adds	r3, #4
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8002a68:	3304      	adds	r3, #4
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8002a72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	ed93 7aca 	vldr	s14, [r3, #808]	@ 0x328
 8002a80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa4:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ab0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002aba:	3304      	adds	r3, #4
 8002abc:	edd3 6a00 	vldr	s13, [r3]
 8002ac0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ac4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002ace:	3304      	adds	r3, #4
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002adc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002af0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002b04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	ed93 7ac9 	vldr	s14, [r3, #804]	@ 0x324
 8002b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	edd3 6aca 	vldr	s13, [r3, #808]	@ 0x328
 8002b32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	edd3 7acc 	vldr	s15, [r3, #816]	@ 0x330
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b48:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002d64 <robot_model_param_cal+0xc00>
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b54:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002b5e:	3304      	adds	r3, #4
 8002b60:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b68:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002b6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	edd3 7aca 	vldr	s15, [r3, #808]	@ 0x328
 8002b7a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002d64 <robot_model_param_cal+0xc00>
 8002b7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8002b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 8002bb0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bb4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002bbe:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	edd3 6acd 	vldr	s13, [r3, #820]	@ 0x334
 8002bd4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 8002be4:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 8002be8:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf0:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002bf4:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002c04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002c12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002d68 <robot_model_param_cal+0xc04>
 8002c28:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c2c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8002c3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	edd3 7acd 	vldr	s15, [r3, #820]	@ 0x334
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002d6c <robot_model_param_cal+0xc08>
 8002c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c54:	eef0 0a67 	vmov.f32	s1, s15
 8002c58:	eeb0 0a66 	vmov.f32	s0, s13
 8002c5c:	f014 fe26 	bl	80178ac <fmaxf>
 8002c60:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002c64:	4b42      	ldr	r3, [pc, #264]	@ (8002d70 <robot_model_param_cal+0xc0c>)
 8002c66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 8002c6a:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002c6e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c72:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 8002c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	dc0b      	bgt.n	8002c98 <robot_model_param_cal+0xb34>
 8002c80:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002c84:	eef0 7ae7 	vabs.f32	s15, s15
 8002c88:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8002c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	f340 82aa 	ble.w	80031ec <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	f010 fe90 	bl	80139c8 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 8002ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cac:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	f010 fe88 	bl	80139c8 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 8002cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cbc:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	f010 fe80 	bl	80139c8 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002cc8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ccc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002cd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 8002ce4:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f010 fccb 	bl	8013684 <arm_mat_mult_f32>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <robot_model_param_cal+0xb9a>
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d74 <robot_model_param_cal+0xc10>)
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f003 f89f 	bl	8005e3c <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002cfe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d02:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d12:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d22:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002d2e:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002d32:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d68 <robot_model_param_cal+0xc04>
 8002d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d42:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002d78 <robot_model_param_cal+0xc14>
 8002d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4a:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002d4e:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d56:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d60:	e023      	b.n	8002daa <robot_model_param_cal+0xc46>
 8002d62:	bf00      	nop
 8002d64:	411ce80a 	.word	0x411ce80a
 8002d68:	358637bd 	.word	0x358637bd
 8002d6c:	34000000 	.word	0x34000000
 8002d70:	358637bd 	.word	0x358637bd
 8002d74:	24002a4c 	.word	0x24002a4c
 8002d78:	3d4ccccd 	.word	0x3d4ccccd
 8002d7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d80:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002d84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d92:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 8002d96:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002daa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	dde4      	ble.n	8002d7c <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 8002db2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002db6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dce:	edc3 7a00 	vstr	s15, [r3]
 8002dd2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dda:	ed93 7a04 	vldr	s14, [r3, #16]
 8002dde:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dee:	edc3 7a04 	vstr	s15, [r3, #16]
 8002df2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002df6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dfe:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e0a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e0e:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e12:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002e16:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f010 fcd5 	bl	80137cc <arm_mat_inverse_f32>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <robot_model_param_cal+0xcce>
 8002e28:	4b82      	ldr	r3, [pc, #520]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f003 f805 	bl	8005e3c <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f503 7069 	add.w	r0, r3, #932	@ 0x3a4
 8002e40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8002e4e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002e52:	4619      	mov	r1, r3
 8002e54:	f010 fc16 	bl	8013684 <arm_mat_mult_f32>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <robot_model_param_cal+0xd04>
 8002e5e:	4b75      	ldr	r3, [pc, #468]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e60:	2204      	movs	r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f002 ffea 	bl	8005e3c <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8002e76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f010 fb9e 	bl	80135c8 <arm_mat_trans_f32>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <robot_model_param_cal+0xd38>
 8002e92:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002e94:	2204      	movs	r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f002 ffd0 	bl	8005e3c <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 8002e9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002ea0:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	f010 fd8e 	bl	80139c8 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 8002eac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002eb0:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	f010 fd86 	bl	80139c8 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 8002ebc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002ec0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	f010 fd7e 	bl	80139c8 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002ecc:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002ed0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	f010 fd76 	bl	80139c8 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002edc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002ee0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	f010 fd6e 	bl	80139c8 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002eec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ef0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 8002efa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f010 fc63 	bl	80137cc <arm_mat_inverse_f32>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80b2 	bne.w	8003072 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002f1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002f20:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f24:	4618      	mov	r0, r3
 8002f26:	f010 fbad 	bl	8013684 <arm_mat_mult_f32>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <robot_model_param_cal+0xdd6>
 8002f30:	4b40      	ldr	r3, [pc, #256]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002f32:	2204      	movs	r2, #4
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f002 ff81 	bl	8005e3c <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
 8002f48:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002f4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f50:	4618      	mov	r0, r3
 8002f52:	f010 fb97 	bl	8013684 <arm_mat_mult_f32>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <robot_model_param_cal+0xe02>
 8002f5c:	4b35      	ldr	r3, [pc, #212]	@ (8003034 <robot_model_param_cal+0xed0>)
 8002f5e:	2204      	movs	r2, #4
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f002 ff6b 	bl	8005e3c <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002f6c:	e016      	b.n	8002f9c <robot_model_param_cal+0xe38>
 8002f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f72:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002f76:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f84:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002f88:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002f96:	3301      	adds	r3, #1
 8002f98:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002f9c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	dde4      	ble.n	8002f6e <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002fac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
 8002fcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd4:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fd8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fe8:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ff4:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ff8:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003008:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800300c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8003010:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f010 fbd8 	bl	80137cc <arm_mat_inverse_f32>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <robot_model_param_cal+0xec8>
 8003022:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <robot_model_param_cal+0xed0>)
 8003024:	2204      	movs	r2, #4
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f002 ff08 	bl	8005e3c <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003032:	e01a      	b.n	800306a <robot_model_param_cal+0xf06>
 8003034:	24002a4c 	.word	0x24002a4c
 8003038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800303c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 8003058:	443a      	add	r2, r7
 800305a:	3ae0      	subs	r2, #224	@ 0xe0
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003064:	3301      	adds	r3, #1
 8003066:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800306a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800306e:	2b08      	cmp	r3, #8
 8003070:	dde2      	ble.n	8003038 <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8003072:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003076:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8003092:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003096:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80030a0:	3304      	adds	r3, #4
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80030a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80030b6:	3308      	adds	r3, #8
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80030be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80030cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80030e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80030f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 8003100:	3301      	adds	r3, #1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800310a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003114:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003118:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003122:	3301      	adds	r3, #1
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 800312c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003130:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800313a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800313e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003148:	3302      	adds	r3, #2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8003154:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003158:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 8003162:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003166:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 800317a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800317e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 8003188:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800318c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3304      	adds	r3, #4
 800319a:	4413      	add	r3, r2
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80031a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80031b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 80031be:	3301      	adds	r3, #1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	441a      	add	r2, r3
 80031c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 80031d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80031e0:	3301      	adds	r3, #1
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	601a      	str	r2, [r3, #0]
	{
 80031ea:	e227      	b.n	800363c <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 80031ec:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80031f0:	eef1 6a67 	vneg.f32	s13, s15
 80031f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003202:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8003206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 800320e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003212:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800321c:	3304      	adds	r3, #4
 800321e:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8003222:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8003226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800322a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 800322e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003232:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800323c:	3308      	adds	r3, #8
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8003244:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8003248:	eeb1 7a67 	vneg.f32	s14, s15
 800324c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8003250:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003254:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003258:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 8003262:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800326a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800326e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 8003278:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800327c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 8003292:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8003296:	eeb1 7a67 	vneg.f32	s14, s15
 800329a:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800329e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 80032b0:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80032b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80032c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80032d4:	3301      	adds	r3, #1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032de:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 80032e2:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80032e6:	eef1 6a67 	vneg.f32	s13, s15
 80032ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	ed93 7acc 	vldr	s14, [r3, #816]	@ 0x330
 80032f8:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80032fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003300:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003304:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 800330e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003312:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 800331c:	3302      	adds	r3, #2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003326:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 800332a:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 800332e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8003332:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003336:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800333a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 8003344:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003350:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 800335a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800335e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8003374:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8003378:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800337c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003380:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003384:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 800338e:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8003392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003396:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800339a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80033a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3304      	adds	r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 80033c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	ed93 7acd 	vldr	s14, [r3, #820]	@ 0x334
 80033ce:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80033d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
 80033e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 337a 	ldrh.w	r3, [r3, #890]	@ 0x37a
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 80033fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003400:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003404:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003408:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f503 725e 	add.w	r2, r3, #888	@ 0x378
 8003412:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003416:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f010 f8d0 	bl	80135c8 <arm_mat_trans_f32>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <robot_model_param_cal+0x12d4>
 800342e:	4b86      	ldr	r3, [pc, #536]	@ (8003648 <robot_model_param_cal+0x14e4>)
 8003430:	2204      	movs	r2, #4
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f002 fd02 	bl	8005e3c <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 8003438:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800343c:	2224      	movs	r2, #36	@ 0x24
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f011 fe16 	bl	8015072 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 8003446:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800344a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800344e:	2203      	movs	r2, #3
 8003450:	2103      	movs	r1, #3
 8003452:	f010 fab9 	bl	80139c8 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003456:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800345a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 707f 	add.w	r0, r3, #1020	@ 0x3fc
 8003464:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003468:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 8003472:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003476:	4619      	mov	r1, r3
 8003478:	f010 f904 	bl	8013684 <arm_mat_mult_f32>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <robot_model_param_cal+0x1328>
 8003482:	4b71      	ldr	r3, [pc, #452]	@ (8003648 <robot_model_param_cal+0x14e4>)
 8003484:	2204      	movs	r2, #4
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f002 fcd8 	bl	8005e3c <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800348c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003490:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 7074 	add.w	r0, r3, #976	@ 0x3d0
 800349a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800349e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 628a 	add.w	r2, r3, #1104	@ 0x450
 80034a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80034ac:	4619      	mov	r1, r3
 80034ae:	f010 f8e9 	bl	8013684 <arm_mat_mult_f32>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <robot_model_param_cal+0x135e>
 80034b8:	4b63      	ldr	r3, [pc, #396]	@ (8003648 <robot_model_param_cal+0x14e4>)
 80034ba:	2204      	movs	r2, #4
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f002 fcbd 	bl	8005e3c <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80034c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 80034d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80034e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80034f0:	3304      	adds	r3, #4
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80034f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8003506:	3308      	adds	r3, #8
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 800350e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003512:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800351c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003520:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8003534:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003538:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003542:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003546:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 8003550:	3301      	adds	r3, #1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800355a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003564:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003568:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003572:	3301      	adds	r3, #1
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 800357c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003580:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 800358a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800358e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003598:	3302      	adds	r3, #2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 80035a4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80035b2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 80035ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80035d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3304      	adds	r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80035f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80035f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8003600:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003604:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3452 	ldrh.w	r3, [r3, #1106]	@ 0x452
 800360e:	3301      	adds	r3, #1
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	441a      	add	r2, r3
 8003614:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003618:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 1480 	ldr.w	r1, [r3, #1152]	@ 0x480
 8003622:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003626:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 347e 	ldrh.w	r3, [r3, #1150]	@ 0x47e
 8003630:	3301      	adds	r3, #1
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	601a      	str	r2, [r3, #0]
	}
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24002a4c 	.word	0x24002a4c

0800364c <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e0cb      	b.n	80037f2 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3374      	adds	r3, #116	@ 0x74
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2198      	movs	r1, #152	@ 0x98
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	332c      	adds	r3, #44	@ 0x2c
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800367e:	4bae      	ldr	r3, [pc, #696]	@ (8003938 <robot_state_update+0x2ec>)
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3374      	adds	r3, #116	@ 0x74
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	ed93 7a00 	vldr	s14, [r3]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2198      	movs	r1, #152	@ 0x98
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3330      	adds	r3, #48	@ 0x30
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003938 <robot_state_update+0x2ec>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e2:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3374      	adds	r3, #116	@ 0x74
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	ed93 7a00 	vldr	s14, [r3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2198      	movs	r1, #152	@ 0x98
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3334      	adds	r3, #52	@ 0x34
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3374      	adds	r3, #116	@ 0x74
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	ed93 7a00 	vldr	s14, [r3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2198      	movs	r1, #152	@ 0x98
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3338      	adds	r3, #56	@ 0x38
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3374      	adds	r3, #116	@ 0x74
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	ed93 7a00 	vldr	s14, [r3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2198      	movs	r1, #152	@ 0x98
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	333c      	adds	r3, #60	@ 0x3c
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3374      	adds	r3, #116	@ 0x74
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2198      	movs	r1, #152	@ 0x98
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3340      	adds	r3, #64	@ 0x40
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3374      	adds	r3, #116	@ 0x74
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	ed93 7a00 	vldr	s14, [r3]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	2198      	movs	r1, #152	@ 0x98
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f77f af30 	ble.w	800365a <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8003816:	3304      	adds	r3, #4
 8003818:	6852      	ldr	r2, [r2, #4]
 800381a:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003822:	3308      	adds	r3, #8
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800382e:	3304      	adds	r3, #4
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800383a:	3308      	adds	r3, #8
 800383c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003840:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	e036      	b.n	80038b8 <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	ed93 7a00 	vldr	s14, [r3]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	337c      	adds	r3, #124	@ 0x7c
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	dd05      	ble.n	800387e <robot_state_update+0x232>
 8003872:	4b32      	ldr	r3, [pc, #200]	@ (800393c <robot_state_update+0x2f0>)
 8003874:	2205      	movs	r2, #5
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f002 fae0 	bl	8005e3c <Error_Handler>
 800387c:	e019      	b.n	80038b2 <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	337e      	adds	r3, #126	@ 0x7e
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d504      	bpl.n	80038b2 <robot_state_update+0x266>
 80038a8:	4b24      	ldr	r3, [pc, #144]	@ (800393c <robot_state_update+0x2f0>)
 80038aa:	2205      	movs	r2, #5
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f002 fac5 	bl	8005e3c <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	ddc5      	ble.n	800384a <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fc50 	bl	8002164 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe fb21 	bl	8001f0c <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e02c      	b.n	800392a <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 14fc 	ldr.w	r1, [r3, #1276]	@ 0x4fc
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 1560 	ldr.w	r1, [r3, #1376]	@ 0x560
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3301      	adds	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	ddcf      	ble.n	80038d0 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e03f      	b.n	80039b6 <robot_state_update+0x36a>
 8003936:	bf00      	nop
 8003938:	240022f8 	.word	0x240022f8
 800393c:	24002a4c 	.word	0x24002a4c
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3301      	adds	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	ddc1      	ble.n	8003940 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e01e      	b.n	8003a00 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 1648 	ldr.w	r1, [r3, #1608]	@ 0x648
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 1684 	ldr.w	r1, [r3, #1668]	@ 0x684
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	dddd      	ble.n	80039c2 <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f503 7074 	add.w	r0, r3, #976	@ 0x3d0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f503 61cb 	add.w	r1, r3, #1624	@ 0x658
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 636c 	addw	r3, r3, #1644	@ 0x66c
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f00f fe33 	bl	8013684 <arm_mat_mult_f32>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <robot_state_update+0x3e2>
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <robot_state_update+0x3ec>)
 8003a26:	2204      	movs	r2, #4
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f002 fa07 	bl	8005e3c <Error_Handler>
}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24002a4c 	.word	0x24002a4c

08003a3c <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e040      	b.n	8003ad2 <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	4413      	add	r3, r2
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3304      	adds	r3, #4
 8003a98:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	6a3a      	ldr	r2, [r7, #32]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	4413      	add	r3, r2
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	ddbb      	ble.n	8003a50 <robot_pos_pid_gain_setting+0x14>
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e145      	b.n	8003d88 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003afc:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003dc0 <robot_pos_pid+0x2d8>
 8003b00:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f503 739b 	add.w	r3, r3, #310	@ 0x136
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b20:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	ed93 7a00 	vldr	s14, [r3]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6c:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	ed93 7a00 	vldr	s14, [r3]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8003bc6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	edd3 5a00 	vldr	s11, [r3]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	edd3 5a00 	vldr	s11, [r3]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8d3 2684 	ldr.w	r2, [r3, #1668]	@ 0x684
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c72:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c8a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c96:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003c9a:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ca6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	ed93 7a00 	vldr	s14, [r3]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cd6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003cda:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ce6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003cea:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cfa:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8003dc4 <robot_pos_pid+0x2dc>
 8003cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d02:	ee35 7b07 	vadd.f64	d7, d5, d7
 8003d06:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8d3 2560 	ldr.w	r2, [r3, #1376]	@ 0x560
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003d36:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	ed93 7a00 	vldr	s14, [r3]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	edd3 7a00 	vldr	s15, [r3]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8d3 2574 	ldr.w	r2, [r3, #1396]	@ 0x574
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	f77f aeb6 	ble.w	8003afc <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 7069 	add.w	r0, r3, #932	@ 0x3a4
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 61ae 	add.w	r1, r3, #1392	@ 0x570
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8003da2:	461a      	mov	r2, r3
 8003da4:	f00f fc6e 	bl	8013684 <arm_mat_mult_f32>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <robot_pos_pid+0x2d0>
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <robot_pos_pid+0x2e0>)
 8003db0:	2204      	movs	r2, #4
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f002 f842 	bl	8005e3c <Error_Handler>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40490fd8 	.word	0x40490fd8
 8003dc4:	3b03126f 	.word	0x3b03126f
 8003dc8:	24002a4c 	.word	0x24002a4c

08003dcc <set_trajectory>:
// Trajectory Making Functions ----------------------------------------------------
void set_trajectory(Manipulator *r, Trajectory *traj, float32_t task_time, float32_t *final_pos)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b08d      	sub	sp, #52	@ 0x34
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dda:	603a      	str	r2, [r7, #0]
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	ed93 7a00 	vldr	s14, [r3]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
					 final_pos[1]==traj->final_pos[1] &&
 8003de8:	eeb4 7a67 	vcmp.f32	s14, s15
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d119      	bne.n	8003e26 <set_trajectory+0x5a>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	3304      	adds	r3, #4
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003e00:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e08:	d10d      	bne.n	8003e26 <set_trajectory+0x5a>
					 final_pos[2]==traj->final_pos[2]);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	ed93 7a00 	vldr	s14, [r3]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
					 final_pos[1]==traj->final_pos[1] &&
 8003e18:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	d101      	bne.n	8003e26 <set_trajectory+0x5a>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <set_trajectory+0x5c>
 8003e26:	2300      	movs	r3, #0
	bool same_pos = (final_pos[0]==traj->final_pos[0] &&
 8003e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	bool same_T   = fabsf(task_time - traj->task_time) < 1e-6f;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e46:	eef0 7ae7 	vabs.f32	s15, s15
 8003e4a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003ef4 <set_trajectory+0x128>
 8003e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e56:	bf4c      	ite	mi
 8003e58:	2301      	movmi	r3, #1
 8003e5a:	2300      	movpl	r3, #0
 8003e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	float32_t now = (float32_t)ctrl_time_ms/1000.f;
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <set_trajectory+0x12c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e6c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8003efc <set_trajectory+0x130>
 8003e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	bool still_running = (now - traj->initial_time) < traj->task_time;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e7e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e94:	bf4c      	ite	mi
 8003e96:	2301      	movmi	r3, #1
 8003e98:	2300      	movpl	r3, #0
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// 같은 목표/시간이고 아직 진행 중일 때만 스킵
	if (same_pos && same_T && still_running) return;
 8003e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <set_trajectory+0xec>
 8003ea6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <set_trajectory+0xec>
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 830e 	bne.w	80044d4 <set_trajectory+0x708>
	else
	{
		traj->task_time = task_time;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
		traj->initial_time = (float32_t) ctrl_time_ms / 1000.0f;
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <set_trajectory+0x12c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eca:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003efc <set_trajectory+0x130>
 8003ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	edc3 7a01 	vstr	s15, [r3, #4]
		traj->final_time = traj->initial_time + traj->task_time;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	edc3 7a02 	vstr	s15, [r3, #8]

		for (int i=0; i<NUM_TASK_DEG; ++i)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef2:	e043      	b.n	8003f7c <set_trajectory+0x1b0>
 8003ef4:	358637bd 	.word	0x358637bd
 8003ef8:	240022d4 	.word	0x240022d4
 8003efc:	447a0000 	.word	0x447a0000
		{
			traj->initial_pos[i] = r->posXYZ.pData[i];
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f12:	3302      	adds	r3, #2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3304      	adds	r3, #4
 8003f1a:	601a      	str	r2, [r3, #0]
			traj->initial_vel[i] = 0.0f;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	3306      	adds	r3, #6
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
			traj->initial_acc[i] = 0.0f;
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	3308      	adds	r3, #8
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

			traj->final_pos[i] = final_pos[i];
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	601a      	str	r2, [r3, #0]
			traj->final_vel[i] = 0.0f;
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	330e      	adds	r3, #14
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3304      	adds	r3, #4
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
			traj->final_acc[i] = 0.0f;
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	3312      	adds	r3, #18
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
		for (int i=0; i<NUM_TASK_DEG; ++i)
 8003f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f78:	3301      	adds	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	ddbe      	ble.n	8003f00 <set_trajectory+0x134>
		}

		float32_t deltaX = traj->final_pos[0] - traj->initial_pos[0];
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
		traj->xpos_coefficient[0] = traj->initial_pos[0];
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54
		traj->xpos_coefficient[1] = traj->initial_vel[0];
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	659a      	str	r2, [r3, #88]	@ 0x58
		traj->xpos_coefficient[2] = 0.5f * traj->initial_acc[0];
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003fac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		traj->xpos_coefficient[3] = ( 20 * deltaX - 12 * traj->initial_vel[0] * traj->task_time -   3 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 8003fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fbe:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003fc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fcc:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8003fd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003fe8:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8003fec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004004:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		traj->xpos_coefficient[4] = (-15 * deltaX +  8 * traj->initial_vel[0] * traj->task_time + 1.5 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 8004030:	edd7 7a07 	vldr	s15, [r7, #28]
 8004034:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 8004038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004042:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8004046:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004058:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004062:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004066:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 800406a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004078:	ee25 5b07 	vmul.f64	d5, d5, d7
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	edd3 7a00 	vldr	s15, [r3]
 8004082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004086:	ee25 7b07 	vmul.f64	d7, d5, d7
 800408a:	ee36 5b07 	vadd.f64	d5, d6, d7
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	ed93 7a00 	vldr	s14, [r3]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	edd3 7a00 	vldr	s15, [r3]
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80040ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		traj->xpos_coefficient[5] = ( 12 * deltaX -  6 * traj->initial_vel[0] * traj->task_time -   1 * traj->initial_acc[0] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 80040c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040c8:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80040cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80040d6:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80040da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	edd3 7a00 	vldr	s15, [r3]
 80040e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004106:	ee77 6a67 	vsub.f32	s13, s14, s15
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	edd3 7a00 	vldr	s15, [r3]
 8004124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	edd3 7a00 	vldr	s15, [r3]
 800412e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800413c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

		float32_t deltaY = traj->final_pos[1] - traj->initial_pos[1];
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004156:	edc7 7a06 	vstr	s15, [r7, #24]
		traj->ypos_coefficient[0] = traj->initial_pos[1];
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	66da      	str	r2, [r3, #108]	@ 0x6c
		traj->ypos_coefficient[1] = traj->initial_vel[1];
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	671a      	str	r2, [r3, #112]	@ 0x70
		traj->ypos_coefficient[2] = 0.5f * traj->initial_acc[1];
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004170:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		traj->ypos_coefficient[3] = ( 20 * deltaY - 12 * traj->initial_vel[1] * traj->task_time -   3 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 800417e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004182:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004190:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8004194:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80041ac:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80041b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	edd3 7a00 	vldr	s15, [r3]
 80041ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	edd3 7a00 	vldr	s15, [r3]
 80041c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		traj->ypos_coefficient[4] = (-15 * deltaY +  8 * traj->initial_vel[1] * traj->task_time + 1.5 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 80041f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80041f8:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80041fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	edd3 7a07 	vldr	s15, [r3, #28]
 8004206:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800420a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800422a:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 800422e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800423c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	edd3 7a00 	vldr	s15, [r3]
 8004246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800424a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800424e:	ee36 5b07 	vadd.f64	d5, d6, d7
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	ed93 7a00 	vldr	s14, [r3]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	edd3 7a00 	vldr	s15, [r3]
 8004268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	edd3 7a00 	vldr	s15, [r3]
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800427a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800427e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		traj->ypos_coefficient[5] = ( 12 * deltaY -  6 * traj->initial_vel[1] * traj->task_time -   1 * traj->initial_acc[1] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 8004288:	edd7 7a06 	vldr	s15, [r7, #24]
 800428c:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8004290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	edd3 7a07 	vldr	s15, [r3, #28]
 800429a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800429e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	edd3 7a00 	vldr	s15, [r3]
 80042a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	edd3 7a00 	vldr	s15, [r3]
 80042bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	edd3 7a00 	vldr	s15, [r3]
 80042de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	edd3 7a00 	vldr	s15, [r3]
 80042e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80

		float32_t deltaZ = traj->final_pos[2] - traj->initial_pos[2];
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	edd3 7a05 	vldr	s15, [r3, #20]
 8004316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800431a:	edc7 7a05 	vstr	s15, [r7, #20]
		traj->zpos_coefficient[0] = traj->initial_pos[2];
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
		traj->zpos_coefficient[1] = traj->initial_vel[2];
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		traj->zpos_coefficient[2] = 0.5f * traj->initial_acc[2];
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004338:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800433c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		traj->zpos_coefficient[3] = ( 20 * deltaZ - 12 * traj->initial_vel[2] * traj->task_time -   3 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time);
 8004346:	edd7 7a05 	vldr	s15, [r7, #20]
 800434a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800434e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	edd3 7a08 	vldr	s15, [r3, #32]
 8004358:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800435c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800436a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004374:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004378:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	edd3 7a00 	vldr	s15, [r3]
 800438c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004390:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		traj->zpos_coefficient[4] = (-15 * deltaZ +  8 * traj->initial_vel[2] * traj->task_time + 1.5 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (1 * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 80043bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80043c0:	eeba 7a0e 	vmov.f32	s14, #174	@ 0xc1700000 -15.0
 80043c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80043ce:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80043d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	edd3 7a00 	vldr	s15, [r3]
 80043dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80043ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043f2:	eeb7 5b08 	vmov.f64	d5, #120	@ 0x3fc00000  1.5
 80043f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	edd3 7a00 	vldr	s15, [r3]
 8004400:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004404:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004412:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004416:	ee36 5b07 	vadd.f64	d5, d6, d7
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	ed93 7a00 	vldr	s14, [r3]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004442:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004446:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		traj->zpos_coefficient[5] = ( 12 * deltaZ -  6 * traj->initial_vel[2] * traj->task_time -   1 * traj->initial_acc[2] * traj->task_time * traj->task_time) / (2 * traj->task_time * traj->task_time * traj->task_time * traj->task_time * traj->task_time);
 8004450:	edd7 7a05 	vldr	s15, [r7, #20]
 8004454:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8004458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004462:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8004466:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	edd3 7a00 	vldr	s15, [r3]
 8004470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004492:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	edd3 7a00 	vldr	s15, [r3]
 80044b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
 80044d2:	e000      	b.n	80044d6 <set_trajectory+0x70a>
	if (same_pos && same_T && still_running) return;
 80044d4:	bf00      	nop
	}
}
 80044d6:	3734      	adds	r7, #52	@ 0x34
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <get_target_point>:

void get_target_point(Trajectory *traj, arm_matrix_instance_f32 pos_ref)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	1d3b      	adds	r3, r7, #4
 80044ea:	e883 0006 	stmia.w	r3, {r1, r2}
	float32_t t = ((float32_t) ctrl_time_ms / 1000.0f) - traj->initial_time;
 80044ee:	4ba5      	ldr	r3, [pc, #660]	@ (8004784 <get_target_point+0x2a4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8004788 <get_target_point+0x2a8>
 80044fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	edd3 7a01 	vldr	s15, [r3, #4]
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	edc7 7a04 	vstr	s15, [r7, #16]
	if (t < traj->task_time)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	ed97 7a04 	vldr	s14, [r7, #16]
 800451a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	f140 8114 	bpl.w	800474e <get_target_point+0x26e>
	{
		pos_ref.pData[0] = traj->xpos_coefficient[0] + traj->xpos_coefficient[1] *t + traj->xpos_coefficient[2] *t*t + traj->xpos_coefficient[3] *t*t*t + traj->xpos_coefficient[4] *t*t*t*t + traj->xpos_coefficient[5] *t*t*t*t*t;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8004532:	edd7 7a04 	vldr	s15, [r7, #16]
 8004536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800453a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8004544:	edd7 7a04 	vldr	s15, [r7, #16]
 8004548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800454c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 800455e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004562:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004566:	edd7 7a04 	vldr	s15, [r7, #16]
 800456a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800456e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8004580:	edd7 7a04 	vldr	s15, [r7, #16]
 8004584:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004588:	edd7 7a04 	vldr	s15, [r7, #16]
 800458c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004590:	edd7 7a04 	vldr	s15, [r7, #16]
 8004594:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004598:	edd7 7a04 	vldr	s15, [r7, #16]
 800459c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80045aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80045be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc3 7a00 	vstr	s15, [r3]
		pos_ref.pData[1] = traj->ypos_coefficient[0] + traj->ypos_coefficient[1] *t + traj->ypos_coefficient[2] *t*t + traj->ypos_coefficient[3] *t*t*t + traj->ypos_coefficient[4] *t*t*t*t + traj->ypos_coefficient[5] *t*t*t*t*t;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	edd3 6a1c 	vldr	s13, [r3, #112]	@ 0x70
 80045e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80045ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	edd3 6a1d 	vldr	s13, [r3, #116]	@ 0x74
 80045fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80045fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004602:	edd7 7a04 	vldr	s15, [r7, #16]
 8004606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800460a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	edd3 6a1e 	vldr	s13, [r3, #120]	@ 0x78
 8004614:	edd7 7a04 	vldr	s15, [r7, #16]
 8004618:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800461c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004620:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004624:	edd7 7a04 	vldr	s15, [r7, #16]
 8004628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800462c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	edd3 6a1f 	vldr	s13, [r3, #124]	@ 0x7c
 8004636:	edd7 7a04 	vldr	s15, [r7, #16]
 800463a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800463e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004642:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004646:	edd7 7a04 	vldr	s15, [r7, #16]
 800464a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800464e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 8004660:	edd7 7a04 	vldr	s15, [r7, #16]
 8004664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004668:	edd7 7a04 	vldr	s15, [r7, #16]
 800466c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004670:	edd7 7a04 	vldr	s15, [r7, #16]
 8004674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004678:	edd7 7a04 	vldr	s15, [r7, #16]
 800467c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004680:	edd7 7a04 	vldr	s15, [r7, #16]
 8004684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3304      	adds	r3, #4
 800468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004690:	edc3 7a00 	vstr	s15, [r3]
		pos_ref.pData[2] = traj->zpos_coefficient[0] + traj->zpos_coefficient[1] *t + traj->zpos_coefficient[2] *t*t + traj->zpos_coefficient[3] *t*t*t + traj->zpos_coefficient[4] *t*t*t*t + traj->zpos_coefficient[5] *t*t*t*t*t;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	edd3 6a22 	vldr	s13, [r3, #136]	@ 0x88
 80046a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80046a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 80046b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80046b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80046be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	edd3 6a24 	vldr	s13, [r3, #144]	@ 0x90
 80046cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80046e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	edd3 6a25 	vldr	s13, [r3, #148]	@ 0x94
 80046ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80046f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80046fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004702:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004706:	edd7 7a04 	vldr	s15, [r7, #16]
 800470a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800470e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8004718:	edd7 7a04 	vldr	s15, [r7, #16]
 800471c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004720:	edd7 7a04 	vldr	s15, [r7, #16]
 8004724:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004728:	edd7 7a04 	vldr	s15, [r7, #16]
 800472c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004730:	edd7 7a04 	vldr	s15, [r7, #16]
 8004734:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004738:	edd7 7a04 	vldr	s15, [r7, #16]
 800473c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	3308      	adds	r3, #8
 8004744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004748:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<NUM_TASK_DEG; ++i)
		{
			pos_ref.pData[i] = traj->final_pos[i];
		}
	}
}
 800474c:	e013      	b.n	8004776 <get_target_point+0x296>
		for(int i=0; i<NUM_TASK_DEG; ++i)
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e00d      	b.n	8004770 <get_target_point+0x290>
			pos_ref.pData[i] = traj->final_pos[i];
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	320c      	adds	r2, #12
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	440a      	add	r2, r1
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	601a      	str	r2, [r3, #0]
		for(int i=0; i<NUM_TASK_DEG; ++i)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	3301      	adds	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b02      	cmp	r3, #2
 8004774:	ddee      	ble.n	8004754 <get_target_point+0x274>
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	240022d4 	.word	0x240022d4
 8004788:	447a0000 	.word	0x447a0000

0800478c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	e060      	b.n	800485a <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	49bd      	ldr	r1, [pc, #756]	@ (8004a94 <main+0x308>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2098      	movs	r0, #152	@ 0x98
 80047a2:	fb00 f303 	mul.w	r3, r0, r3
 80047a6:	440b      	add	r3, r1
 80047a8:	3308      	adds	r3, #8
 80047aa:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 80047ac:	4ab9      	ldr	r2, [pc, #740]	@ (8004a94 <main+0x308>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2198      	movs	r1, #152	@ 0x98
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	330c      	adds	r3, #12
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 80047be:	4ab5      	ldr	r2, [pc, #724]	@ (8004a94 <main+0x308>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2198      	movs	r1, #152	@ 0x98
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	3314      	adds	r3, #20
 80047cc:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80047d0:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 80047d2:	4ab0      	ldr	r2, [pc, #704]	@ (8004a94 <main+0x308>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2198      	movs	r1, #152	@ 0x98
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	3318      	adds	r3, #24
 80047e0:	4aad      	ldr	r2, [pc, #692]	@ (8004a98 <main+0x30c>)
 80047e2:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 80047e4:	4aab      	ldr	r2, [pc, #684]	@ (8004a94 <main+0x308>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2198      	movs	r1, #152	@ 0x98
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	331c      	adds	r3, #28
 80047f2:	4aaa      	ldr	r2, [pc, #680]	@ (8004a9c <main+0x310>)
 80047f4:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 80047f6:	2200      	movs	r2, #0
 80047f8:	2108      	movs	r1, #8
 80047fa:	2008      	movs	r0, #8
 80047fc:	f00c fb75 	bl	8010eea <xQueueGenericCreate>
 8004800:	4602      	mov	r2, r0
 8004802:	49a4      	ldr	r1, [pc, #656]	@ (8004a94 <main+0x308>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2098      	movs	r0, #152	@ 0x98
 8004808:	fb00 f303 	mul.w	r3, r0, r3
 800480c:	440b      	add	r3, r1
 800480e:	3310      	adds	r3, #16
 8004810:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 8004812:	4aa0      	ldr	r2, [pc, #640]	@ (8004a94 <main+0x308>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2198      	movs	r1, #152	@ 0x98
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4413      	add	r3, r2
 800481e:	3310      	adds	r3, #16
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <main+0xa4>
			sta = 3;
 8004826:	4b9e      	ldr	r3, [pc, #632]	@ (8004aa0 <main+0x314>)
 8004828:	2203      	movs	r2, #3
 800482a:	601a      	str	r2, [r3, #0]
			Error_Handler();
 800482c:	f001 fb06 	bl	8005e3c <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8004830:	4a98      	ldr	r2, [pc, #608]	@ (8004a94 <main+0x308>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2198      	movs	r1, #152	@ 0x98
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	3394      	adds	r3, #148	@ 0x94
 800483e:	4a99      	ldr	r2, [pc, #612]	@ (8004aa4 <main+0x318>)
 8004840:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 8004842:	4a94      	ldr	r2, [pc, #592]	@ (8004a94 <main+0x308>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3301      	adds	r3, #1
 8004848:	2198      	movs	r1, #152	@ 0x98
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	4a95      	ldr	r2, [pc, #596]	@ (8004aa8 <main+0x31c>)
 8004852:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3301      	adds	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b02      	cmp	r3, #2
 800485e:	dd9b      	ble.n	8004798 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8004860:	4b92      	ldr	r3, [pc, #584]	@ (8004aac <main+0x320>)
 8004862:	2201      	movs	r2, #1
 8004864:	2103      	movs	r1, #3
 8004866:	4892      	ldr	r0, [pc, #584]	@ (8004ab0 <main+0x324>)
 8004868:	f00f f8ae 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 800486c:	4b91      	ldr	r3, [pc, #580]	@ (8004ab4 <main+0x328>)
 800486e:	2201      	movs	r2, #1
 8004870:	2103      	movs	r1, #3
 8004872:	4891      	ldr	r0, [pc, #580]	@ (8004ab8 <main+0x32c>)
 8004874:	f00f f8a8 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8004878:	4b90      	ldr	r3, [pc, #576]	@ (8004abc <main+0x330>)
 800487a:	2201      	movs	r2, #1
 800487c:	2103      	movs	r1, #3
 800487e:	4890      	ldr	r0, [pc, #576]	@ (8004ac0 <main+0x334>)
 8004880:	f00f f8a2 	bl	80139c8 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 8004884:	4b83      	ldr	r3, [pc, #524]	@ (8004a94 <main+0x308>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 800488a:	4b82      	ldr	r3, [pc, #520]	@ (8004a94 <main+0x308>)
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8004890:	4b80      	ldr	r3, [pc, #512]	@ (8004a94 <main+0x308>)
 8004892:	4a8c      	ldr	r2, [pc, #560]	@ (8004ac4 <main+0x338>)
 8004894:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 8004898:	4b7e      	ldr	r3, [pc, #504]	@ (8004a94 <main+0x308>)
 800489a:	4a8a      	ldr	r2, [pc, #552]	@ (8004ac4 <main+0x338>)
 800489c:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80048a0:	4b7c      	ldr	r3, [pc, #496]	@ (8004a94 <main+0x308>)
 80048a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048a6:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi / 2;
 80048aa:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8004ac8 <main+0x33c>
 80048ae:	eeb1 7a67 	vneg.f32	s14, s15
 80048b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80048b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ba:	4b76      	ldr	r3, [pc, #472]	@ (8004a94 <main+0x308>)
 80048bc:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi / 2;
 80048c0:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8004ac8 <main+0x33c>
 80048c4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80048c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048cc:	4b71      	ldr	r3, [pc, #452]	@ (8004a94 <main+0x308>)
 80048ce:	edc3 7a7c 	vstr	s15, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 80048d2:	4b70      	ldr	r3, [pc, #448]	@ (8004a94 <main+0x308>)
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 80048dc:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004ac8 <main+0x33c>
 80048e0:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004acc <main+0x340>
 80048e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004ad0 <main+0x344>
 80048ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f0:	4b68      	ldr	r3, [pc, #416]	@ (8004a94 <main+0x308>)
 80048f2:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 80048f6:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8004ac8 <main+0x33c>
 80048fa:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004acc <main+0x340>
 80048fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004902:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004ad4 <main+0x348>
 8004906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800490a:	4b62      	ldr	r3, [pc, #392]	@ (8004a94 <main+0x308>)
 800490c:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8004910:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004ac8 <main+0x33c>
 8004914:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8004acc <main+0x340>
 8004918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004ad8 <main+0x34c>
 8004920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <main+0x308>)
 8004926:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 800492a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a94 <main+0x308>)
 800492c:	4a6b      	ldr	r2, [pc, #428]	@ (8004adc <main+0x350>)
 800492e:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
	strawberry_robot.l2 = 0.46;
 8004932:	4b58      	ldr	r3, [pc, #352]	@ (8004a94 <main+0x308>)
 8004934:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae0 <main+0x354>)
 8004936:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
	strawberry_robot.l3 = 0.46;
 800493a:	4b56      	ldr	r3, [pc, #344]	@ (8004a94 <main+0x308>)
 800493c:	4a68      	ldr	r2, [pc, #416]	@ (8004ae0 <main+0x354>)
 800493e:	f8c3 2334 	str.w	r2, [r3, #820]	@ 0x334

	// link mass setting
	strawberry_robot.m1 = 3.82406;
 8004942:	4b54      	ldr	r3, [pc, #336]	@ (8004a94 <main+0x308>)
 8004944:	4a67      	ldr	r2, [pc, #412]	@ (8004ae4 <main+0x358>)
 8004946:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	strawberry_robot.m2 = 0.07634;
 800494a:	4b52      	ldr	r3, [pc, #328]	@ (8004a94 <main+0x308>)
 800494c:	4a66      	ldr	r2, [pc, #408]	@ (8004ae8 <main+0x35c>)
 800494e:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
	strawberry_robot.m3 = 1.26067;
 8004952:	4b50      	ldr	r3, [pc, #320]	@ (8004a94 <main+0x308>)
 8004954:	4a65      	ldr	r2, [pc, #404]	@ (8004aec <main+0x360>)
 8004956:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

	// link CoM position setting
	strawberry_robot.d2 = 0.23;
 800495a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a94 <main+0x308>)
 800495c:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <main+0x364>)
 800495e:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
	strawberry_robot.d3 = 0.18432;
 8004962:	4b4c      	ldr	r3, [pc, #304]	@ (8004a94 <main+0x308>)
 8004964:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <main+0x368>)
 8004966:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348

	// link inertia setting
	strawberry_robot.J1 = 0.02450771104;
 800496a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a94 <main+0x308>)
 800496c:	4a62      	ldr	r2, [pc, #392]	@ (8004af8 <main+0x36c>)
 800496e:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
	strawberry_robot.J2 = 0.00811740221;
 8004972:	4b48      	ldr	r3, [pc, #288]	@ (8004a94 <main+0x308>)
 8004974:	4a61      	ldr	r2, [pc, #388]	@ (8004afc <main+0x370>)
 8004976:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
	strawberry_robot.J3 = 0.11079467270;
 800497a:	4b46      	ldr	r3, [pc, #280]	@ (8004a94 <main+0x308>)
 800497c:	4a60      	ldr	r2, [pc, #384]	@ (8004b00 <main+0x374>)
 800497e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8004982:	4b60      	ldr	r3, [pc, #384]	@ (8004b04 <main+0x378>)
 8004984:	2201      	movs	r2, #1
 8004986:	2103      	movs	r1, #3
 8004988:	485f      	ldr	r0, [pc, #380]	@ (8004b08 <main+0x37c>)
 800498a:	f00f f81d 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 800498e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b0c <main+0x380>)
 8004990:	2201      	movs	r2, #1
 8004992:	2103      	movs	r1, #3
 8004994:	485e      	ldr	r0, [pc, #376]	@ (8004b10 <main+0x384>)
 8004996:	f00f f817 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 800499a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b14 <main+0x388>)
 800499c:	2201      	movs	r2, #1
 800499e:	2103      	movs	r1, #3
 80049a0:	485d      	ldr	r0, [pc, #372]	@ (8004b18 <main+0x38c>)
 80049a2:	f00f f811 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80049a6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b1c <main+0x390>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	2103      	movs	r1, #3
 80049ac:	485c      	ldr	r0, [pc, #368]	@ (8004b20 <main+0x394>)
 80049ae:	f00f f80b 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 80049b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b24 <main+0x398>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	2103      	movs	r1, #3
 80049b8:	485b      	ldr	r0, [pc, #364]	@ (8004b28 <main+0x39c>)
 80049ba:	f00f f805 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 80049be:	4b5b      	ldr	r3, [pc, #364]	@ (8004b2c <main+0x3a0>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	2103      	movs	r1, #3
 80049c4:	485a      	ldr	r0, [pc, #360]	@ (8004b30 <main+0x3a4>)
 80049c6:	f00e ffff 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 80049ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004b34 <main+0x3a8>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	2103      	movs	r1, #3
 80049d0:	4859      	ldr	r0, [pc, #356]	@ (8004b38 <main+0x3ac>)
 80049d2:	f00e fff9 	bl	80139c8 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 80049d6:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <main+0x3b0>)
 80049d8:	2201      	movs	r2, #1
 80049da:	2103      	movs	r1, #3
 80049dc:	4858      	ldr	r0, [pc, #352]	@ (8004b40 <main+0x3b4>)
 80049de:	f00e fff3 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 80049e2:	4b58      	ldr	r3, [pc, #352]	@ (8004b44 <main+0x3b8>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	2103      	movs	r1, #3
 80049e8:	4857      	ldr	r0, [pc, #348]	@ (8004b48 <main+0x3bc>)
 80049ea:	f00e ffed 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 80049ee:	4b57      	ldr	r3, [pc, #348]	@ (8004b4c <main+0x3c0>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	2103      	movs	r1, #3
 80049f4:	4856      	ldr	r0, [pc, #344]	@ (8004b50 <main+0x3c4>)
 80049f6:	f00e ffe7 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 80049fa:	4b56      	ldr	r3, [pc, #344]	@ (8004b54 <main+0x3c8>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	2103      	movs	r1, #3
 8004a00:	4855      	ldr	r0, [pc, #340]	@ (8004b58 <main+0x3cc>)
 8004a02:	f00e ffe1 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8004a06:	4b55      	ldr	r3, [pc, #340]	@ (8004b5c <main+0x3d0>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	4854      	ldr	r0, [pc, #336]	@ (8004b60 <main+0x3d4>)
 8004a0e:	f00e ffdb 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8004a12:	4b54      	ldr	r3, [pc, #336]	@ (8004b64 <main+0x3d8>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	2103      	movs	r1, #3
 8004a18:	4853      	ldr	r0, [pc, #332]	@ (8004b68 <main+0x3dc>)
 8004a1a:	f00e ffd5 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.accXYZ, NUM_TASK_DEG, 1, strawberry_robot.accXYZ_buffer);
 8004a1e:	4b53      	ldr	r3, [pc, #332]	@ (8004b6c <main+0x3e0>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	2103      	movs	r1, #3
 8004a24:	4852      	ldr	r0, [pc, #328]	@ (8004b70 <main+0x3e4>)
 8004a26:	f00e ffcf 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.accXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.accXYZ_old_buffer);
 8004a2a:	4b52      	ldr	r3, [pc, #328]	@ (8004b74 <main+0x3e8>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2103      	movs	r1, #3
 8004a30:	4851      	ldr	r0, [pc, #324]	@ (8004b78 <main+0x3ec>)
 8004a32:	f00e ffc9 	bl	80139c8 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 8004a36:	4b51      	ldr	r3, [pc, #324]	@ (8004b7c <main+0x3f0>)
 8004a38:	2203      	movs	r2, #3
 8004a3a:	2103      	movs	r1, #3
 8004a3c:	4850      	ldr	r0, [pc, #320]	@ (8004b80 <main+0x3f4>)
 8004a3e:	f00e ffc3 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 8004a42:	4b50      	ldr	r3, [pc, #320]	@ (8004b84 <main+0x3f8>)
 8004a44:	2203      	movs	r2, #3
 8004a46:	2103      	movs	r1, #3
 8004a48:	484f      	ldr	r0, [pc, #316]	@ (8004b88 <main+0x3fc>)
 8004a4a:	f00e ffbd 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b8c <main+0x400>)
 8004a50:	2203      	movs	r2, #3
 8004a52:	2103      	movs	r1, #3
 8004a54:	484e      	ldr	r0, [pc, #312]	@ (8004b90 <main+0x404>)
 8004a56:	f00e ffb7 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <main+0x408>)
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	2103      	movs	r1, #3
 8004a60:	484d      	ldr	r0, [pc, #308]	@ (8004b98 <main+0x40c>)
 8004a62:	f00e ffb1 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 8004a66:	4b4d      	ldr	r3, [pc, #308]	@ (8004b9c <main+0x410>)
 8004a68:	2203      	movs	r2, #3
 8004a6a:	2103      	movs	r1, #3
 8004a6c:	484c      	ldr	r0, [pc, #304]	@ (8004ba0 <main+0x414>)
 8004a6e:	f00e ffab 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 8004a72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba4 <main+0x418>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	2103      	movs	r1, #3
 8004a78:	484b      	ldr	r0, [pc, #300]	@ (8004ba8 <main+0x41c>)
 8004a7a:	f00e ffa5 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 8004a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bac <main+0x420>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	2103      	movs	r1, #3
 8004a84:	484a      	ldr	r0, [pc, #296]	@ (8004bb0 <main+0x424>)
 8004a86:	f00e ff9f 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb4 <main+0x428>)
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	2103      	movs	r1, #3
 8004a90:	e092      	b.n	8004bb8 <main+0x42c>
 8004a92:	bf00      	nop
 8004a94:	2400231c 	.word	0x2400231c
 8004a98:	41200000 	.word	0x41200000
 8004a9c:	3dfbe76d 	.word	0x3dfbe76d
 8004aa0:	24002a4c 	.word	0x24002a4c
 8004aa4:	40e66666 	.word	0x40e66666
 8004aa8:	c0e66666 	.word	0xc0e66666
 8004aac:	24000000 	.word	0x24000000
 8004ab0:	240022f8 	.word	0x240022f8
 8004ab4:	2400000c 	.word	0x2400000c
 8004ab8:	24002300 	.word	0x24002300
 8004abc:	24000028 	.word	0x24000028
 8004ac0:	24002308 	.word	0x24002308
 8004ac4:	bf800000 	.word	0xbf800000
 8004ac8:	40490fd8 	.word	0x40490fd8
 8004acc:	43340000 	.word	0x43340000
 8004ad0:	42aa0000 	.word	0x42aa0000
 8004ad4:	c3200000 	.word	0xc3200000
 8004ad8:	c2200000 	.word	0xc2200000
 8004adc:	3e343958 	.word	0x3e343958
 8004ae0:	3eeb851f 	.word	0x3eeb851f
 8004ae4:	4074bd66 	.word	0x4074bd66
 8004ae8:	3d9c5825 	.word	0x3d9c5825
 8004aec:	3fa15da2 	.word	0x3fa15da2
 8004af0:	3e6b851f 	.word	0x3e6b851f
 8004af4:	3e3cbe62 	.word	0x3e3cbe62
 8004af8:	3cc8c465 	.word	0x3cc8c465
 8004afc:	3c04feda 	.word	0x3c04feda
 8004b00:	3de2e851 	.word	0x3de2e851
 8004b04:	24002500 	.word	0x24002500
 8004b08:	240024f8 	.word	0x240024f8
 8004b0c:	2400252c 	.word	0x2400252c
 8004b10:	24002524 	.word	0x24002524
 8004b14:	24002540 	.word	0x24002540
 8004b18:	24002538 	.word	0x24002538
 8004b1c:	24002554 	.word	0x24002554
 8004b20:	2400254c 	.word	0x2400254c
 8004b24:	24002568 	.word	0x24002568
 8004b28:	24002560 	.word	0x24002560
 8004b2c:	2400257c 	.word	0x2400257c
 8004b30:	24002574 	.word	0x24002574
 8004b34:	24002590 	.word	0x24002590
 8004b38:	24002588 	.word	0x24002588
 8004b3c:	240025a4 	.word	0x240025a4
 8004b40:	2400259c 	.word	0x2400259c
 8004b44:	240025b8 	.word	0x240025b8
 8004b48:	240025b0 	.word	0x240025b0
 8004b4c:	240025cc 	.word	0x240025cc
 8004b50:	240025c4 	.word	0x240025c4
 8004b54:	240025e0 	.word	0x240025e0
 8004b58:	240025d8 	.word	0x240025d8
 8004b5c:	240025f4 	.word	0x240025f4
 8004b60:	240025ec 	.word	0x240025ec
 8004b64:	24002608 	.word	0x24002608
 8004b68:	24002600 	.word	0x24002600
 8004b6c:	2400261c 	.word	0x2400261c
 8004b70:	24002614 	.word	0x24002614
 8004b74:	24002630 	.word	0x24002630
 8004b78:	24002628 	.word	0x24002628
 8004b7c:	24002670 	.word	0x24002670
 8004b80:	24002668 	.word	0x24002668
 8004b84:	2400269c 	.word	0x2400269c
 8004b88:	24002694 	.word	0x24002694
 8004b8c:	240026c8 	.word	0x240026c8
 8004b90:	240026c0 	.word	0x240026c0
 8004b94:	240026f4 	.word	0x240026f4
 8004b98:	240026ec 	.word	0x240026ec
 8004b9c:	24002720 	.word	0x24002720
 8004ba0:	24002718 	.word	0x24002718
 8004ba4:	2400274c 	.word	0x2400274c
 8004ba8:	24002744 	.word	0x24002744
 8004bac:	24002760 	.word	0x24002760
 8004bb0:	24002758 	.word	0x24002758
 8004bb4:	24002774 	.word	0x24002774
 8004bb8:	485c      	ldr	r0, [pc, #368]	@ (8004d2c <main+0x5a0>)
 8004bba:	f00e ff05 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004d30 <main+0x5a4>)
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	2103      	movs	r1, #3
 8004bc4:	485b      	ldr	r0, [pc, #364]	@ (8004d34 <main+0x5a8>)
 8004bc6:	f00e feff 	bl	80139c8 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 8004bca:	4b5b      	ldr	r3, [pc, #364]	@ (8004d38 <main+0x5ac>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2103      	movs	r1, #3
 8004bd0:	485a      	ldr	r0, [pc, #360]	@ (8004d3c <main+0x5b0>)
 8004bd2:	f00e fef9 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d40 <main+0x5b4>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2103      	movs	r1, #3
 8004bdc:	4859      	ldr	r0, [pc, #356]	@ (8004d44 <main+0x5b8>)
 8004bde:	f00e fef3 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 8004be2:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <main+0x5bc>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	2103      	movs	r1, #3
 8004be8:	4858      	ldr	r0, [pc, #352]	@ (8004d4c <main+0x5c0>)
 8004bea:	f00e feed 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8004bee:	4b58      	ldr	r3, [pc, #352]	@ (8004d50 <main+0x5c4>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2103      	movs	r1, #3
 8004bf4:	4857      	ldr	r0, [pc, #348]	@ (8004d54 <main+0x5c8>)
 8004bf6:	f00e fee7 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8004bfa:	4b57      	ldr	r3, [pc, #348]	@ (8004d58 <main+0x5cc>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	2103      	movs	r1, #3
 8004c00:	4856      	ldr	r0, [pc, #344]	@ (8004d5c <main+0x5d0>)
 8004c02:	f00e fee1 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8004c06:	4b56      	ldr	r3, [pc, #344]	@ (8004d60 <main+0x5d4>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2103      	movs	r1, #3
 8004c0c:	4855      	ldr	r0, [pc, #340]	@ (8004d64 <main+0x5d8>)
 8004c0e:	f00e fedb 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 8004c12:	4b55      	ldr	r3, [pc, #340]	@ (8004d68 <main+0x5dc>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	2103      	movs	r1, #3
 8004c18:	4854      	ldr	r0, [pc, #336]	@ (8004d6c <main+0x5e0>)
 8004c1a:	f00e fed5 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8004c1e:	4b54      	ldr	r3, [pc, #336]	@ (8004d70 <main+0x5e4>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	2103      	movs	r1, #3
 8004c24:	4853      	ldr	r0, [pc, #332]	@ (8004d74 <main+0x5e8>)
 8004c26:	f00e fecf 	bl	80139c8 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8004c2a:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <main+0x5ec>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	2103      	movs	r1, #3
 8004c30:	4852      	ldr	r0, [pc, #328]	@ (8004d7c <main+0x5f0>)
 8004c32:	f00e fec9 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 8004c36:	4b52      	ldr	r3, [pc, #328]	@ (8004d80 <main+0x5f4>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	4851      	ldr	r0, [pc, #324]	@ (8004d84 <main+0x5f8>)
 8004c3e:	f00e fec3 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 8004c42:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <main+0x5fc>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	2103      	movs	r1, #3
 8004c48:	4850      	ldr	r0, [pc, #320]	@ (8004d8c <main+0x600>)
 8004c4a:	f00e febd 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8004c4e:	4b50      	ldr	r3, [pc, #320]	@ (8004d90 <main+0x604>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	2103      	movs	r1, #3
 8004c54:	484f      	ldr	r0, [pc, #316]	@ (8004d94 <main+0x608>)
 8004c56:	f00e feb7 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <main+0x60c>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2103      	movs	r1, #3
 8004c60:	484e      	ldr	r0, [pc, #312]	@ (8004d9c <main+0x610>)
 8004c62:	f00e feb1 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 8004c66:	4b4e      	ldr	r3, [pc, #312]	@ (8004da0 <main+0x614>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	484d      	ldr	r0, [pc, #308]	@ (8004da4 <main+0x618>)
 8004c6e:	f00e feab 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 8004c72:	4b4d      	ldr	r3, [pc, #308]	@ (8004da8 <main+0x61c>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	2103      	movs	r1, #3
 8004c78:	484c      	ldr	r0, [pc, #304]	@ (8004dac <main+0x620>)
 8004c7a:	f00e fea5 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004db0 <main+0x624>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	2103      	movs	r1, #3
 8004c84:	484b      	ldr	r0, [pc, #300]	@ (8004db4 <main+0x628>)
 8004c86:	f00e fe9f 	bl	80139c8 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 8004c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004db8 <main+0x62c>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2103      	movs	r1, #3
 8004c90:	484a      	ldr	r0, [pc, #296]	@ (8004dbc <main+0x630>)
 8004c92:	f00e fe99 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 8004c96:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc0 <main+0x634>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	4849      	ldr	r0, [pc, #292]	@ (8004dc4 <main+0x638>)
 8004c9e:	f00e fe93 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 8004ca2:	4b49      	ldr	r3, [pc, #292]	@ (8004dc8 <main+0x63c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	4848      	ldr	r0, [pc, #288]	@ (8004dcc <main+0x640>)
 8004caa:	f00e fe8d 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 8004cae:	4b48      	ldr	r3, [pc, #288]	@ (8004dd0 <main+0x644>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	4847      	ldr	r0, [pc, #284]	@ (8004dd4 <main+0x648>)
 8004cb6:	f00e fe87 	bl	80139c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <main+0x64c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2103      	movs	r1, #3
 8004cc0:	4846      	ldr	r0, [pc, #280]	@ (8004ddc <main+0x650>)
 8004cc2:	f00e fe81 	bl	80139c8 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004cc6:	f001 f87b 	bl	8005dc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cca:	f001 fe55 	bl	8006978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cce:	f000 f893 	bl	8004df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cd2:	f000 fa31 	bl	8005138 <MX_GPIO_Init>
  MX_DMA_Init();
 8004cd6:	f000 f9ff 	bl	80050d8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004cda:	f000 f907 	bl	8004eec <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8004cde:	f000 f9ad 	bl	800503c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  uart3_rx_start_normal();
 8004ce2:	f7fc f859 	bl	8000d98 <uart3_rx_start_normal>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004ce6:	f00b fe55 	bl	8010994 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8004cea:	4a3d      	ldr	r2, [pc, #244]	@ (8004de0 <main+0x654>)
 8004cec:	2100      	movs	r1, #0
 8004cee:	483d      	ldr	r0, [pc, #244]	@ (8004de4 <main+0x658>)
 8004cf0:	f00b fe9a 	bl	8010a28 <osThreadNew>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8004de8 <main+0x65c>)
 8004cf8:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8004dec <main+0x660>)
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	483c      	ldr	r0, [pc, #240]	@ (8004df0 <main+0x664>)
 8004d00:	f00b fe92 	bl	8010a28 <osThreadNew>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a3b      	ldr	r2, [pc, #236]	@ (8004df4 <main+0x668>)
 8004d08:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f001 fd32 	bl	8006774 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f001 fd2f 	bl	8006774 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004d16:	2002      	movs	r0, #2
 8004d18:	f001 fd2c 	bl	8006774 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f001 fd9e 	bl	8006860 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8004d24:	f00b fe5a 	bl	80109dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <main+0x59c>
 8004d2c:	2400276c 	.word	0x2400276c
 8004d30:	240027a0 	.word	0x240027a0
 8004d34:	24002798 	.word	0x24002798
 8004d38:	24002808 	.word	0x24002808
 8004d3c:	24002800 	.word	0x24002800
 8004d40:	2400281c 	.word	0x2400281c
 8004d44:	24002814 	.word	0x24002814
 8004d48:	24002830 	.word	0x24002830
 8004d4c:	24002828 	.word	0x24002828
 8004d50:	24002844 	.word	0x24002844
 8004d54:	2400283c 	.word	0x2400283c
 8004d58:	24002858 	.word	0x24002858
 8004d5c:	24002850 	.word	0x24002850
 8004d60:	2400286c 	.word	0x2400286c
 8004d64:	24002864 	.word	0x24002864
 8004d68:	24002880 	.word	0x24002880
 8004d6c:	24002878 	.word	0x24002878
 8004d70:	24002894 	.word	0x24002894
 8004d74:	2400288c 	.word	0x2400288c
 8004d78:	240028b4 	.word	0x240028b4
 8004d7c:	240028ac 	.word	0x240028ac
 8004d80:	240028c8 	.word	0x240028c8
 8004d84:	240028c0 	.word	0x240028c0
 8004d88:	240028dc 	.word	0x240028dc
 8004d8c:	240028d4 	.word	0x240028d4
 8004d90:	240028f0 	.word	0x240028f0
 8004d94:	240028e8 	.word	0x240028e8
 8004d98:	24002904 	.word	0x24002904
 8004d9c:	240028fc 	.word	0x240028fc
 8004da0:	24002918 	.word	0x24002918
 8004da4:	24002910 	.word	0x24002910
 8004da8:	2400292c 	.word	0x2400292c
 8004dac:	24002924 	.word	0x24002924
 8004db0:	24002940 	.word	0x24002940
 8004db4:	24002938 	.word	0x24002938
 8004db8:	24002954 	.word	0x24002954
 8004dbc:	2400294c 	.word	0x2400294c
 8004dc0:	24002968 	.word	0x24002968
 8004dc4:	24002960 	.word	0x24002960
 8004dc8:	2400297c 	.word	0x2400297c
 8004dcc:	24002974 	.word	0x24002974
 8004dd0:	24002990 	.word	0x24002990
 8004dd4:	24002988 	.word	0x24002988
 8004dd8:	240029a4 	.word	0x240029a4
 8004ddc:	2400299c 	.word	0x2400299c
 8004de0:	08017e84 	.word	0x08017e84
 8004de4:	08005285 	.word	0x08005285
 8004de8:	240004bc 	.word	0x240004bc
 8004dec:	08017ea8 	.word	0x08017ea8
 8004df0:	08005acd 	.word	0x08005acd
 8004df4:	240004c0 	.word	0x240004c0

08004df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b09c      	sub	sp, #112	@ 0x70
 8004dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e02:	224c      	movs	r2, #76	@ 0x4c
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f010 f933 	bl	8015072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	2220      	movs	r2, #32
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f010 f92d 	bl	8015072 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004e18:	2002      	movs	r0, #2
 8004e1a:	f006 fb41 	bl	800b4a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4b30      	ldr	r3, [pc, #192]	@ (8004ee4 <SystemClock_Config+0xec>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee4 <SystemClock_Config+0xec>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee4 <SystemClock_Config+0xec>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <SystemClock_Config+0xf0>)
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee8 <SystemClock_Config+0xf0>)
 8004e3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e42:	6193      	str	r3, [r2, #24]
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <SystemClock_Config+0xf0>)
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004e50:	bf00      	nop
 8004e52:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <SystemClock_Config+0xf0>)
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e5e:	d1f8      	bne.n	8004e52 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004e76:	2364      	movs	r3, #100	@ 0x64
 8004e78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8004e7e:	2310      	movs	r3, #16
 8004e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004e82:	2302      	movs	r3, #2
 8004e84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004e86:	230c      	movs	r3, #12
 8004e88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f006 fb3c 	bl	800b514 <HAL_RCC_OscConfig>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004ea2:	f000 ffcb 	bl	8005e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ea6:	233f      	movs	r3, #63	@ 0x3f
 8004ea8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004eb6:	2340      	movs	r3, #64	@ 0x40
 8004eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004eba:	2340      	movs	r3, #64	@ 0x40
 8004ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ec2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004ec4:	2340      	movs	r3, #64	@ 0x40
 8004ec6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	2102      	movs	r1, #2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f006 ff7b 	bl	800bdc8 <HAL_RCC_ClockConfig>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004ed8:	f000 ffb0 	bl	8005e3c <Error_Handler>
  }
}
 8004edc:	bf00      	nop
 8004ede:	3770      	adds	r7, #112	@ 0x70
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	58000400 	.word	0x58000400
 8004ee8:	58024800 	.word	0x58024800

08004eec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8005030 <MX_FDCAN1_Init+0x144>)
 8004ef6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004efe:	4b4b      	ldr	r3, [pc, #300]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8004f04:	4b49      	ldr	r3, [pc, #292]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004f0a:	4b48      	ldr	r3, [pc, #288]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004f10:	4b46      	ldr	r3, [pc, #280]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004f16:	4b45      	ldr	r3, [pc, #276]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8004f1c:	4b43      	ldr	r3, [pc, #268]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f1e:	2208      	movs	r2, #8
 8004f20:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8004f22:	4b42      	ldr	r3, [pc, #264]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f24:	221f      	movs	r2, #31
 8004f26:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8004f28:	4b40      	ldr	r3, [pc, #256]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8004f34:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f36:	2204      	movs	r2, #4
 8004f38:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8004f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f3c:	2205      	movs	r2, #5
 8004f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8004f40:	4b3a      	ldr	r3, [pc, #232]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f42:	2204      	movs	r2, #4
 8004f44:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8004f46:	4b39      	ldr	r3, [pc, #228]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8004f4c:	4b37      	ldr	r3, [pc, #220]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004f52:	4b36      	ldr	r3, [pc, #216]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f5a:	2240      	movs	r2, #64	@ 0x40
 8004f5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8004f5e:	4b33      	ldr	r3, [pc, #204]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f60:	2204      	movs	r2, #4
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8004f64:	4b31      	ldr	r3, [pc, #196]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8004f6a:	4b30      	ldr	r3, [pc, #192]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8004f70:	4b2e      	ldr	r3, [pc, #184]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f72:	2204      	movs	r2, #4
 8004f74:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f78:	2204      	movs	r2, #4
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f7e:	2210      	movs	r2, #16
 8004f80:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f84:	2210      	movs	r2, #16
 8004f86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004f8e:	4b27      	ldr	r3, [pc, #156]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f96:	2204      	movs	r2, #4
 8004f98:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004f9a:	4824      	ldr	r0, [pc, #144]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004f9c:	f004 ff32 	bl	8009e04 <HAL_FDCAN_Init>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8004fa6:	f000 ff49 	bl	8005e3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8004faa:	2200      	movs	r2, #0
 8004fac:	2101      	movs	r1, #1
 8004fae:	481f      	ldr	r0, [pc, #124]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004fb0:	f005 fb0a 	bl	800a5c8 <HAL_FDCAN_ActivateNotification>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8004fba:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <MX_FDCAN1_Init+0x148>)
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004fc0:	f000 ff3c 	bl	8005e3c <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8004fc4:	4819      	ldr	r0, [pc, #100]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004fc6:	f005 f8fb 	bl	800a1c0 <HAL_FDCAN_Start>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8004fd0:	4b18      	ldr	r3, [pc, #96]	@ (8005034 <MX_FDCAN1_Init+0x148>)
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004fd6:	f000 ff31 	bl	8005e3c <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	e01d      	b.n	800501c <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004fe0:	4812      	ldr	r0, [pc, #72]	@ (800502c <MX_FDCAN1_Init+0x140>)
 8004fe2:	f005 fadf 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d014      	beq.n	8005016 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004fec:	4a12      	ldr	r2, [pc, #72]	@ (8005038 <MX_FDCAN1_Init+0x14c>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2198      	movs	r1, #152	@ 0x98
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fcc6 	bl	8001990 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8005004:	4a0c      	ldr	r2, [pc, #48]	@ (8005038 <MX_FDCAN1_Init+0x14c>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2198      	movs	r1, #152	@ 0x98
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	330c      	adds	r3, #12
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3301      	adds	r3, #1
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	ddde      	ble.n	8004fe0 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	24000298 	.word	0x24000298
 8005030:	4000a000 	.word	0x4000a000
 8005034:	24002a4c 	.word	0x24002a4c
 8005038:	2400231c 	.word	0x2400231c

0800503c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005040:	4b23      	ldr	r3, [pc, #140]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005042:	4a24      	ldr	r2, [pc, #144]	@ (80050d4 <MX_USART3_UART_Init+0x98>)
 8005044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005048:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800504c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800504e:	4b20      	ldr	r3, [pc, #128]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005054:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005056:	2200      	movs	r2, #0
 8005058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800505a:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 800505c:	2200      	movs	r2, #0
 800505e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005060:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005062:	220c      	movs	r2, #12
 8005064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005066:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005068:	2200      	movs	r2, #0
 800506a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 800506e:	2200      	movs	r2, #0
 8005070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005072:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005074:	2200      	movs	r2, #0
 8005076:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 800507a:	2200      	movs	r2, #0
 800507c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005080:	2200      	movs	r2, #0
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005084:	4812      	ldr	r0, [pc, #72]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 8005086:	f009 fb61 	bl	800e74c <HAL_UART_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005090:	f000 fed4 	bl	8005e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8005094:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005098:	480d      	ldr	r0, [pc, #52]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 800509a:	f00b fb19 	bl	80106d0 <HAL_UARTEx_SetTxFifoThreshold>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80050a4:	f000 feca 	bl	8005e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 80050a8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80050ac:	4808      	ldr	r0, [pc, #32]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 80050ae:	f00b fb4d 	bl	801074c <HAL_UARTEx_SetRxFifoThreshold>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 80050b8:	f000 fec0 	bl	8005e3c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80050bc:	4804      	ldr	r0, [pc, #16]	@ (80050d0 <MX_USART3_UART_Init+0x94>)
 80050be:	f00b facc 	bl	801065a <HAL_UARTEx_EnableFifoMode>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 80050c8:	f000 feb8 	bl	8005e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	24000338 	.word	0x24000338
 80050d4:	40004800 	.word	0x40004800

080050d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80050de:	4b15      	ldr	r3, [pc, #84]	@ (8005134 <MX_DMA_Init+0x5c>)
 80050e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050e4:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <MX_DMA_Init+0x5c>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050ee:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <MX_DMA_Init+0x5c>)
 80050f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 8, 0);
 80050fc:	2200      	movs	r2, #0
 80050fe:	2108      	movs	r1, #8
 8005100:	200b      	movs	r0, #11
 8005102:	f001 fd7d 	bl	8006c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005106:	200b      	movs	r0, #11
 8005108:	f001 fd94 	bl	8006c34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 8, 0);
 800510c:	2200      	movs	r2, #0
 800510e:	2108      	movs	r1, #8
 8005110:	200c      	movs	r0, #12
 8005112:	f001 fd75 	bl	8006c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005116:	200c      	movs	r0, #12
 8005118:	f001 fd8c 	bl	8006c34 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
 800511c:	2200      	movs	r2, #0
 800511e:	2105      	movs	r1, #5
 8005120:	2066      	movs	r0, #102	@ 0x66
 8005122:	f001 fd6d 	bl	8006c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8005126:	2066      	movs	r0, #102	@ 0x66
 8005128:	f001 fd84 	bl	8006c34 <HAL_NVIC_EnableIRQ>

}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400

08005138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	@ 0x30
 800513c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513e:	f107 031c 	add.w	r3, r7, #28
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	609a      	str	r2, [r3, #8]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800514e:	4b49      	ldr	r3, [pc, #292]	@ (8005274 <MX_GPIO_Init+0x13c>)
 8005150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005154:	4a47      	ldr	r2, [pc, #284]	@ (8005274 <MX_GPIO_Init+0x13c>)
 8005156:	f043 0304 	orr.w	r3, r3, #4
 800515a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800515e:	4b45      	ldr	r3, [pc, #276]	@ (8005274 <MX_GPIO_Init+0x13c>)
 8005160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800516c:	4b41      	ldr	r3, [pc, #260]	@ (8005274 <MX_GPIO_Init+0x13c>)
 800516e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005172:	4a40      	ldr	r2, [pc, #256]	@ (8005274 <MX_GPIO_Init+0x13c>)
 8005174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800517c:	4b3d      	ldr	r3, [pc, #244]	@ (8005274 <MX_GPIO_Init+0x13c>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800518a:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <MX_GPIO_Init+0x13c>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005190:	4a38      	ldr	r2, [pc, #224]	@ (8005274 <MX_GPIO_Init+0x13c>)
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800519a:	4b36      	ldr	r3, [pc, #216]	@ (8005274 <MX_GPIO_Init+0x13c>)
 800519c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051a8:	4b32      	ldr	r3, [pc, #200]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ae:	4a31      	ldr	r2, [pc, #196]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051b0:	f043 0308 	orr.w	r3, r3, #8
 80051b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051cc:	4a29      	ldr	r2, [pc, #164]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051d6:	4b27      	ldr	r3, [pc, #156]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80051e4:	4b23      	ldr	r3, [pc, #140]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051ec:	f043 0310 	orr.w	r3, r3, #16
 80051f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005274 <MX_GPIO_Init+0x13c>)
 80051f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8005202:	2200      	movs	r2, #0
 8005204:	f244 0101 	movw	r1, #16385	@ 0x4001
 8005208:	481b      	ldr	r0, [pc, #108]	@ (8005278 <MX_GPIO_Init+0x140>)
 800520a:	f006 f915 	bl	800b438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800520e:	2200      	movs	r2, #0
 8005210:	2102      	movs	r1, #2
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <MX_GPIO_Init+0x144>)
 8005214:	f006 f910 	bl	800b438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800521c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800521e:	2300      	movs	r3, #0
 8005220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005226:	f107 031c 	add.w	r3, r7, #28
 800522a:	4619      	mov	r1, r3
 800522c:	4814      	ldr	r0, [pc, #80]	@ (8005280 <MX_GPIO_Init+0x148>)
 800522e:	f005 ff53 	bl	800b0d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8005232:	f244 0301 	movw	r3, #16385	@ 0x4001
 8005236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005238:	2301      	movs	r3, #1
 800523a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005240:	2300      	movs	r3, #0
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005244:	f107 031c 	add.w	r3, r7, #28
 8005248:	4619      	mov	r1, r3
 800524a:	480b      	ldr	r0, [pc, #44]	@ (8005278 <MX_GPIO_Init+0x140>)
 800524c:	f005 ff44 	bl	800b0d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005250:	2302      	movs	r3, #2
 8005252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005254:	2301      	movs	r3, #1
 8005256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005260:	f107 031c 	add.w	r3, r7, #28
 8005264:	4619      	mov	r1, r3
 8005266:	4805      	ldr	r0, [pc, #20]	@ (800527c <MX_GPIO_Init+0x144>)
 8005268:	f005 ff36 	bl	800b0d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800526c:	bf00      	nop
 800526e:	3730      	adds	r7, #48	@ 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	58024400 	.word	0x58024400
 8005278:	58020400 	.word	0x58020400
 800527c:	58021000 	.word	0x58021000
 8005280:	58020800 	.word	0x58020800

08005284 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	ed2d 8b02 	vpush	{d8}
 800528a:	b090      	sub	sp, #64	@ 0x40
 800528c:	af02      	add	r7, sp, #8
 800528e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 8005290:	f00c fdd4 	bl	8011e3c <xTaskGetTickCount>
 8005294:	4603      	mov	r3, r0
 8005296:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8005298:	2301      	movs	r3, #1
 800529a:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f00c fc2e 	bl	8011b04 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 80052a8:	4b83      	ldr	r3, [pc, #524]	@ (80054b8 <ControlTask+0x234>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a83      	ldr	r2, [pc, #524]	@ (80054bc <ControlTask+0x238>)
 80052ae:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	005a      	lsls	r2, r3, #1
 80052b4:	4b80      	ldr	r3, [pc, #512]	@ (80054b8 <ControlTask+0x234>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4413      	add	r3, r2
 80052ba:	4a7f      	ldr	r2, [pc, #508]	@ (80054b8 <ControlTask+0x234>)
 80052bc:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 80052be:	2101      	movs	r1, #1
 80052c0:	487f      	ldr	r0, [pc, #508]	@ (80054c0 <ControlTask+0x23c>)
 80052c2:	f006 f8d2 	bl	800b46a <HAL_GPIO_TogglePin>

		// 6) 여기서 PC로부터 들어온 task space PID Gain값과 Target Trajectory를 반영
		uart3_poll_and_process_lines();
 80052c6:	f7fc f9ab 	bl	8001620 <uart3_poll_and_process_lines>

		// 7) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 80052ca:	4b7e      	ldr	r3, [pc, #504]	@ (80054c4 <ControlTask+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f040 80e9 	bne.w	80054a6 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 80052d4:	4b7b      	ldr	r3, [pc, #492]	@ (80054c4 <ControlTask+0x240>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d152      	bne.n	8005382 <ControlTask+0xfe>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 80052dc:	2300      	movs	r3, #0
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e0:	e048      	b.n	8005374 <ControlTask+0xf0>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 80052e2:	2180      	movs	r1, #128	@ 0x80
 80052e4:	4876      	ldr	r0, [pc, #472]	@ (80054c0 <ControlTask+0x23c>)
 80052e6:	f006 f8c0 	bl	800b46a <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 80052ea:	4a76      	ldr	r2, [pc, #472]	@ (80054c4 <ControlTask+0x240>)
 80052ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ee:	2198      	movs	r1, #152	@ 0x98
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4413      	add	r3, r2
 80052f6:	338c      	adds	r3, #140	@ 0x8c
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80052fe:	4872      	ldr	r0, [pc, #456]	@ (80054c8 <ControlTask+0x244>)
 8005300:	f005 f950 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <ControlTask+0xb4>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 800530a:	4a6e      	ldr	r2, [pc, #440]	@ (80054c4 <ControlTask+0x240>)
 800530c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530e:	2198      	movs	r1, #152	@ 0x98
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3308      	adds	r3, #8
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29a      	uxth	r2, r3
 800531c:	4969      	ldr	r1, [pc, #420]	@ (80054c4 <ControlTask+0x240>)
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	2098      	movs	r0, #152	@ 0x98
 8005322:	fb00 f303 	mul.w	r3, r0, r3
 8005326:	440b      	add	r3, r1
 8005328:	338c      	adds	r3, #140	@ 0x8c
 800532a:	edd3 7a00 	vldr	s15, [r3]
 800532e:	eeb0 0a67 	vmov.f32	s0, s15
 8005332:	4610      	mov	r0, r2
 8005334:	f7fc fba8 	bl	8001a88 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005338:	4863      	ldr	r0, [pc, #396]	@ (80054c8 <ControlTask+0x244>)
 800533a:	f005 f933 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d014      	beq.n	800536e <ControlTask+0xea>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005344:	4a5f      	ldr	r2, [pc, #380]	@ (80054c4 <ControlTask+0x240>)
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	2198      	movs	r1, #152	@ 0x98
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	4413      	add	r3, r2
 8005350:	3308      	adds	r3, #8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	4618      	mov	r0, r3
 8005358:	f7fc fb1a 	bl	8001990 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 800535c:	4a59      	ldr	r2, [pc, #356]	@ (80054c4 <ControlTask+0x240>)
 800535e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005360:	2198      	movs	r1, #152	@ 0x98
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	330c      	adds	r3, #12
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	3301      	adds	r3, #1
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34
 8005374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005376:	2b02      	cmp	r3, #2
 8005378:	ddb3      	ble.n	80052e2 <ControlTask+0x5e>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 800537a:	4b52      	ldr	r3, [pc, #328]	@ (80054c4 <ControlTask+0x240>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e78c      	b.n	800529c <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 8005382:	2300      	movs	r3, #0
 8005384:	633b      	str	r3, [r7, #48]	@ 0x30
 8005386:	e00e      	b.n	80053a6 <ControlTask+0x122>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	2298      	movs	r2, #152	@ 0x98
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	3308      	adds	r3, #8
 8005392:	4a4c      	ldr	r2, [pc, #304]	@ (80054c4 <ControlTask+0x240>)
 8005394:	4413      	add	r3, r2
 8005396:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80054cc <ControlTask+0x248>
 800539a:	4618      	mov	r0, r3
 800539c:	f7fc fc98 	bl	8001cd0 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	3301      	adds	r3, #1
 80053a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	dded      	ble.n	8005388 <ControlTask+0x104>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 80053ac:	4845      	ldr	r0, [pc, #276]	@ (80054c4 <ControlTask+0x240>)
 80053ae:	f7fe f94d 	bl	800364c <robot_state_update>
				// 2. 로봇의 reference 업데이트
//				set_trajectory(&strawberry_robot, &quintic_traj, taskTime, desired_posXYZ);
//				get_target_point(&quintic_traj, target_posXYZ);
				// 3. 로봇의 Control Input 계산
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <ControlTask+0x24c>)
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	4b47      	ldr	r3, [pc, #284]	@ (80054d4 <ControlTask+0x250>)
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4b47      	ldr	r3, [pc, #284]	@ (80054d8 <ControlTask+0x254>)
 80053bc:	4a47      	ldr	r2, [pc, #284]	@ (80054dc <ControlTask+0x258>)
 80053be:	4948      	ldr	r1, [pc, #288]	@ (80054e0 <ControlTask+0x25c>)
 80053c0:	4840      	ldr	r0, [pc, #256]	@ (80054c4 <ControlTask+0x240>)
 80053c2:	f7fe fb3b 	bl	8003a3c <robot_pos_pid_gain_setting>
				target_posXYZ.pData[1] = homing_posXYZ.pData[1] + 0.2f * sinf(2.0f * pi * 1.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 80053c6:	4b47      	ldr	r3, [pc, #284]	@ (80054e4 <ControlTask+0x260>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	ed93 8a00 	vldr	s16, [r3]
 80053d0:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80054e8 <ControlTask+0x264>
 80053d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80053d8:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <ControlTask+0x234>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e8:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80054ec <ControlTask+0x268>
 80053ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80053f0:	eeb0 0a47 	vmov.f32	s0, s14
 80053f4:	f012 fac0 	bl	8017978 <sinf>
 80053f8:	eef0 7a40 	vmov.f32	s15, s0
 80053fc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80054f0 <ControlTask+0x26c>
 8005400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005404:	4b3b      	ldr	r3, [pc, #236]	@ (80054f4 <ControlTask+0x270>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800540e:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 8005412:	4b38      	ldr	r3, [pc, #224]	@ (80054f4 <ControlTask+0x270>)
 8005414:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005418:	482a      	ldr	r0, [pc, #168]	@ (80054c4 <ControlTask+0x240>)
 800541a:	f7fe fb65 	bl	8003ae8 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 800541e:	2300      	movs	r3, #0
 8005420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005422:	e03c      	b.n	800549e <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	2298      	movs	r2, #152	@ 0x98
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	3308      	adds	r3, #8
 800542e:	4a25      	ldr	r2, [pc, #148]	@ (80054c4 <ControlTask+0x240>)
 8005430:	1899      	adds	r1, r3, r2
 8005432:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <ControlTask+0x240>)
 8005434:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	ed93 7a00 	vldr	s14, [r3]
 8005442:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <ControlTask+0x240>)
 8005444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005446:	3374      	adds	r3, #116	@ 0x74
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	edd3 7a00 	vldr	s15, [r3]
 8005450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005454:	eeb0 0a67 	vmov.f32	s0, s15
 8005458:	4608      	mov	r0, r1
 800545a:	f7fc fce9 	bl	8001e30 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800545e:	481a      	ldr	r0, [pc, #104]	@ (80054c8 <ControlTask+0x244>)
 8005460:	f005 f8a0 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <ControlTask+0x214>
						//MIT_Mode(strawberry_robot.motors[i].id, 0.0f);
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 800546a:	4a16      	ldr	r2, [pc, #88]	@ (80054c4 <ControlTask+0x240>)
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	2198      	movs	r1, #152	@ 0x98
 8005470:	fb01 f303 	mul.w	r3, r1, r3
 8005474:	4413      	add	r3, r2
 8005476:	3308      	adds	r3, #8
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
 800547c:	4911      	ldr	r1, [pc, #68]	@ (80054c4 <ControlTask+0x240>)
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	2098      	movs	r0, #152	@ 0x98
 8005482:	fb00 f303 	mul.w	r3, r0, r3
 8005486:	440b      	add	r3, r1
 8005488:	338c      	adds	r3, #140	@ 0x8c
 800548a:	edd3 7a00 	vldr	s15, [r3]
 800548e:	eeb0 0a67 	vmov.f32	s0, s15
 8005492:	4610      	mov	r0, r2
 8005494:	f7fc faf8 	bl	8001a88 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	3301      	adds	r3, #1
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	ddbf      	ble.n	8005424 <ControlTask+0x1a0>
 80054a4:	e6fa      	b.n	800529c <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <ControlTask+0x240>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	f47f aef6 	bne.w	800529c <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 80054b0:	2300      	movs	r3, #0
 80054b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b4:	e1ed      	b.n	8005892 <ControlTask+0x60e>
 80054b6:	bf00      	nop
 80054b8:	240022d4 	.word	0x240022d4
 80054bc:	240022d8 	.word	0x240022d8
 80054c0:	58020400 	.word	0x58020400
 80054c4:	2400231c 	.word	0x2400231c
 80054c8:	24000298 	.word	0x24000298
 80054cc:	428c0000 	.word	0x428c0000
 80054d0:	24000058 	.word	0x24000058
 80054d4:	24002310 	.word	0x24002310
 80054d8:	24000040 	.word	0x24000040
 80054dc:	2400004c 	.word	0x2400004c
 80054e0:	24000034 	.word	0x24000034
 80054e4:	24002300 	.word	0x24002300
 80054e8:	40490fd8 	.word	0x40490fd8
 80054ec:	447a0000 	.word	0x447a0000
 80054f0:	3e4ccccd 	.word	0x3e4ccccd
 80054f4:	24002308 	.word	0x24002308
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 80054f8:	2180      	movs	r1, #128	@ 0x80
 80054fa:	48bf      	ldr	r0, [pc, #764]	@ (80057f8 <ControlTask+0x574>)
 80054fc:	f005 ffb5 	bl	800b46a <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8005500:	4bbe      	ldr	r3, [pc, #760]	@ (80057fc <ControlTask+0x578>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8005506:	4bbe      	ldr	r3, [pc, #760]	@ (8005800 <ControlTask+0x57c>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800550c:	48bd      	ldr	r0, [pc, #756]	@ (8005804 <ControlTask+0x580>)
 800550e:	f005 f849 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8005518:	4abb      	ldr	r2, [pc, #748]	@ (8005808 <ControlTask+0x584>)
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	2198      	movs	r1, #152	@ 0x98
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3308      	adds	r3, #8
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4618      	mov	r0, r3
 800552c:	f7fc f99c 	bl	8001868 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8005530:	bf00      	nop
 8005532:	4ab5      	ldr	r2, [pc, #724]	@ (8005808 <ControlTask+0x584>)
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2198      	movs	r1, #152	@ 0x98
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	4413      	add	r3, r2
 800553e:	3310      	adds	r3, #16
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f107 010c 	add.w	r1, r7, #12
 8005546:	2200      	movs	r2, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f00b fecd 	bl	80112e8 <xQueueReceive>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d0ee      	beq.n	8005532 <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005554:	48ab      	ldr	r0, [pc, #684]	@ (8005804 <ControlTask+0x580>)
 8005556:	f005 f825 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d014      	beq.n	800558a <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8005560:	4aa9      	ldr	r2, [pc, #676]	@ (8005808 <ControlTask+0x584>)
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	2198      	movs	r1, #152	@ 0x98
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	3308      	adds	r3, #8
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc f9c2 	bl	80018fc <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8005578:	4aa3      	ldr	r2, [pc, #652]	@ (8005808 <ControlTask+0x584>)
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	2198      	movs	r1, #152	@ 0x98
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	330c      	adds	r3, #12
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 800558a:	4a9f      	ldr	r2, [pc, #636]	@ (8005808 <ControlTask+0x584>)
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	2198      	movs	r1, #152	@ 0x98
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	338c      	adds	r3, #140	@ 0x8c
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 800559e:	4a9a      	ldr	r2, [pc, #616]	@ (8005808 <ControlTask+0x584>)
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	2198      	movs	r1, #152	@ 0x98
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	3390      	adds	r3, #144	@ 0x90
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 80055b2:	4a95      	ldr	r2, [pc, #596]	@ (8005808 <ControlTask+0x584>)
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	3301      	adds	r3, #1
 80055b8:	2198      	movs	r1, #152	@ 0x98
 80055ba:	fb01 f303 	mul.w	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	3304      	adds	r3, #4
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 80055c8:	4a8f      	ldr	r2, [pc, #572]	@ (8005808 <ControlTask+0x584>)
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	2198      	movs	r1, #152	@ 0x98
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	4413      	add	r3, r2
 80055d4:	332c      	adds	r3, #44	@ 0x2c
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 80055dc:	4a8a      	ldr	r2, [pc, #552]	@ (8005808 <ControlTask+0x584>)
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	2198      	movs	r1, #152	@ 0x98
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	332c      	adds	r3, #44	@ 0x2c
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4986      	ldr	r1, [pc, #536]	@ (8005808 <ControlTask+0x584>)
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	2098      	movs	r0, #152	@ 0x98
 80055f2:	fb00 f303 	mul.w	r3, r0, r3
 80055f6:	440b      	add	r3, r1
 80055f8:	3330      	adds	r3, #48	@ 0x30
 80055fa:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 80055fc:	4a82      	ldr	r2, [pc, #520]	@ (8005808 <ControlTask+0x584>)
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	2198      	movs	r1, #152	@ 0x98
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	3334      	adds	r3, #52	@ 0x34
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 8005610:	4a7d      	ldr	r2, [pc, #500]	@ (8005808 <ControlTask+0x584>)
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	2198      	movs	r1, #152	@ 0x98
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3334      	adds	r3, #52	@ 0x34
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4979      	ldr	r1, [pc, #484]	@ (8005808 <ControlTask+0x584>)
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2098      	movs	r0, #152	@ 0x98
 8005626:	fb00 f303 	mul.w	r3, r0, r3
 800562a:	440b      	add	r3, r1
 800562c:	3338      	adds	r3, #56	@ 0x38
 800562e:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 8005630:	4a76      	ldr	r2, [pc, #472]	@ (800580c <ControlTask+0x588>)
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4973      	ldr	r1, [pc, #460]	@ (8005808 <ControlTask+0x584>)
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	2098      	movs	r0, #152	@ 0x98
 8005640:	fb00 f303 	mul.w	r3, r0, r3
 8005644:	440b      	add	r3, r1
 8005646:	3324      	adds	r3, #36	@ 0x24
 8005648:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 800564a:	4a71      	ldr	r2, [pc, #452]	@ (8005810 <ControlTask+0x58c>)
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	496c      	ldr	r1, [pc, #432]	@ (8005808 <ControlTask+0x584>)
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	2098      	movs	r0, #152	@ 0x98
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	440b      	add	r3, r1
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 8005664:	4a68      	ldr	r2, [pc, #416]	@ (8005808 <ControlTask+0x584>)
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	2198      	movs	r1, #152	@ 0x98
 800566a:	fb01 f303 	mul.w	r3, r1, r3
 800566e:	4413      	add	r3, r2
 8005670:	3324      	adds	r3, #36	@ 0x24
 8005672:	ed93 7a00 	vldr	s14, [r3]
 8005676:	4a64      	ldr	r2, [pc, #400]	@ (8005808 <ControlTask+0x584>)
 8005678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567a:	2198      	movs	r1, #152	@ 0x98
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	332c      	adds	r3, #44	@ 0x2c
 8005684:	edd3 7a00 	vldr	s15, [r3]
 8005688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800568c:	4a5e      	ldr	r2, [pc, #376]	@ (8005808 <ControlTask+0x584>)
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	2198      	movs	r1, #152	@ 0x98
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3344      	adds	r3, #68	@ 0x44
 800569a:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 800569e:	4a5a      	ldr	r2, [pc, #360]	@ (8005808 <ControlTask+0x584>)
 80056a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a2:	2198      	movs	r1, #152	@ 0x98
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	3344      	adds	r3, #68	@ 0x44
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4956      	ldr	r1, [pc, #344]	@ (8005808 <ControlTask+0x584>)
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2098      	movs	r0, #152	@ 0x98
 80056b4:	fb00 f303 	mul.w	r3, r0, r3
 80056b8:	440b      	add	r3, r1
 80056ba:	3348      	adds	r3, #72	@ 0x48
 80056bc:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 80056be:	4a52      	ldr	r2, [pc, #328]	@ (8005808 <ControlTask+0x584>)
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	2198      	movs	r1, #152	@ 0x98
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	334c      	adds	r3, #76	@ 0x4c
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 80056d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005808 <ControlTask+0x584>)
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2198      	movs	r1, #152	@ 0x98
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3350      	adds	r3, #80	@ 0x50
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 80056e6:	4a48      	ldr	r2, [pc, #288]	@ (8005808 <ControlTask+0x584>)
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	2198      	movs	r1, #152	@ 0x98
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3350      	adds	r3, #80	@ 0x50
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4944      	ldr	r1, [pc, #272]	@ (8005808 <ControlTask+0x584>)
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	2098      	movs	r0, #152	@ 0x98
 80056fc:	fb00 f303 	mul.w	r3, r0, r3
 8005700:	440b      	add	r3, r1
 8005702:	3354      	adds	r3, #84	@ 0x54
 8005704:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8005706:	4a40      	ldr	r2, [pc, #256]	@ (8005808 <ControlTask+0x584>)
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2198      	movs	r1, #152	@ 0x98
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	3358      	adds	r3, #88	@ 0x58
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 800571a:	4a3b      	ldr	r2, [pc, #236]	@ (8005808 <ControlTask+0x584>)
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	2198      	movs	r1, #152	@ 0x98
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	3358      	adds	r3, #88	@ 0x58
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4937      	ldr	r1, [pc, #220]	@ (8005808 <ControlTask+0x584>)
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	2098      	movs	r0, #152	@ 0x98
 8005730:	fb00 f303 	mul.w	r3, r0, r3
 8005734:	440b      	add	r3, r1
 8005736:	335c      	adds	r3, #92	@ 0x5c
 8005738:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 800573a:	4a33      	ldr	r2, [pc, #204]	@ (8005808 <ControlTask+0x584>)
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2198      	movs	r1, #152	@ 0x98
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	3328      	adds	r3, #40	@ 0x28
 8005748:	ed93 7a00 	vldr	s14, [r3]
 800574c:	4a2e      	ldr	r2, [pc, #184]	@ (8005808 <ControlTask+0x584>)
 800574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005750:	2198      	movs	r1, #152	@ 0x98
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	4413      	add	r3, r2
 8005758:	3334      	adds	r3, #52	@ 0x34
 800575a:	edd3 7a00 	vldr	s15, [r3]
 800575e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005762:	4a29      	ldr	r2, [pc, #164]	@ (8005808 <ControlTask+0x584>)
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	2198      	movs	r1, #152	@ 0x98
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	3360      	adds	r3, #96	@ 0x60
 8005770:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 8005774:	4a24      	ldr	r2, [pc, #144]	@ (8005808 <ControlTask+0x584>)
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	2198      	movs	r1, #152	@ 0x98
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4413      	add	r3, r2
 8005780:	3360      	adds	r3, #96	@ 0x60
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4920      	ldr	r1, [pc, #128]	@ (8005808 <ControlTask+0x584>)
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	2098      	movs	r0, #152	@ 0x98
 800578a:	fb00 f303 	mul.w	r3, r0, r3
 800578e:	440b      	add	r3, r1
 8005790:	3364      	adds	r3, #100	@ 0x64
 8005792:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8005794:	4a1c      	ldr	r2, [pc, #112]	@ (8005808 <ControlTask+0x584>)
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	2198      	movs	r1, #152	@ 0x98
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	3368      	adds	r3, #104	@ 0x68
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 80057a8:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <ControlTask+0x584>)
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	2198      	movs	r1, #152	@ 0x98
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	4413      	add	r3, r2
 80057b4:	336c      	adds	r3, #108	@ 0x6c
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 80057bc:	4a12      	ldr	r2, [pc, #72]	@ (8005808 <ControlTask+0x584>)
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	2198      	movs	r1, #152	@ 0x98
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	336c      	adds	r3, #108	@ 0x6c
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	490e      	ldr	r1, [pc, #56]	@ (8005808 <ControlTask+0x584>)
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	2098      	movs	r0, #152	@ 0x98
 80057d2:	fb00 f303 	mul.w	r3, r0, r3
 80057d6:	440b      	add	r3, r1
 80057d8:	3370      	adds	r3, #112	@ 0x70
 80057da:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <ControlTask+0x584>)
 80057de:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <ControlTask+0x584>)
 80057f0:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 80057f4:	e00e      	b.n	8005814 <ControlTask+0x590>
 80057f6:	bf00      	nop
 80057f8:	58020400 	.word	0x58020400
 80057fc:	240022d4 	.word	0x240022d4
 8005800:	240022d8 	.word	0x240022d8
 8005804:	24000298 	.word	0x24000298
 8005808:	2400231c 	.word	0x2400231c
 800580c:	240022e0 	.word	0x240022e0
 8005810:	240022ec 	.word	0x240022ec
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 8005820:	4ba2      	ldr	r3, [pc, #648]	@ (8005aac <ControlTask+0x828>)
 8005822:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 8005832:	4b9e      	ldr	r3, [pc, #632]	@ (8005aac <ControlTask+0x828>)
 8005834:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 8005844:	4b99      	ldr	r3, [pc, #612]	@ (8005aac <ControlTask+0x828>)
 8005846:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 8005856:	4b95      	ldr	r3, [pc, #596]	@ (8005aac <ControlTask+0x828>)
 8005858:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 8005868:	4b90      	ldr	r3, [pc, #576]	@ (8005aac <ControlTask+0x828>)
 800586a:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 800586e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 800587a:	4b8c      	ldr	r3, [pc, #560]	@ (8005aac <ControlTask+0x828>)
 800587c:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 800588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588e:	3301      	adds	r3, #1
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	2b02      	cmp	r3, #2
 8005896:	f77f ae2f 	ble.w	80054f8 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 800589a:	2300      	movs	r3, #0
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
 800589e:	e069      	b.n	8005974 <ControlTask+0x6f0>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = homing_posXYZ.pData[i];
 80058a0:	4b83      	ldr	r3, [pc, #524]	@ (8005ab0 <ControlTask+0x82c>)
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	4b80      	ldr	r3, [pc, #512]	@ (8005aac <ControlTask+0x828>)
 80058ac:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 80058ba:	4b7c      	ldr	r3, [pc, #496]	@ (8005aac <ControlTask+0x828>)
 80058bc:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 80058cc:	4b77      	ldr	r3, [pc, #476]	@ (8005aac <ControlTask+0x828>)
 80058ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
					strawberry_robot.accXYZ.pData[i] = 0.0;
 80058de:	4b73      	ldr	r3, [pc, #460]	@ (8005aac <ControlTask+0x828>)
 80058e0:	f8d3 22fc 	ldr.w	r2, [r3, #764]	@ 0x2fc
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 80058f0:	4b6e      	ldr	r3, [pc, #440]	@ (8005aac <ControlTask+0x828>)
 80058f2:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 8005902:	4b6a      	ldr	r3, [pc, #424]	@ (8005aac <ControlTask+0x828>)
 8005904:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 8005914:	4b65      	ldr	r3, [pc, #404]	@ (8005aac <ControlTask+0x828>)
 8005916:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8005926:	4b61      	ldr	r3, [pc, #388]	@ (8005aac <ControlTask+0x828>)
 8005928:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8005938:	4b5c      	ldr	r3, [pc, #368]	@ (8005aac <ControlTask+0x828>)
 800593a:	f8d3 2574 	ldr.w	r2, [r3, #1396]	@ 0x574
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 800594a:	4b58      	ldr	r3, [pc, #352]	@ (8005aac <ControlTask+0x828>)
 800594c:	f8d3 2670 	ldr.w	r2, [r3, #1648]	@ 0x670
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 800595c:	4b53      	ldr	r3, [pc, #332]	@ (8005aac <ControlTask+0x828>)
 800595e:	f8d3 2684 	ldr.w	r2, [r3, #1668]	@ 0x684
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	2b02      	cmp	r3, #2
 8005978:	dd92      	ble.n	80058a0 <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 800597a:	2300      	movs	r3, #0
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	e00b      	b.n	8005998 <ControlTask+0x714>
 8005980:	4b4a      	ldr	r3, [pc, #296]	@ (8005aac <ControlTask+0x828>)
 8005982:	f8d3 2454 	ldr.w	r2, [r3, #1108]	@ 0x454
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	3301      	adds	r3, #1
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2b08      	cmp	r3, #8
 800599c:	ddf0      	ble.n	8005980 <ControlTask+0x6fc>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 800599e:	4b43      	ldr	r3, [pc, #268]	@ (8005aac <ControlTask+0x828>)
 80059a0:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059a8:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 80059aa:	4b40      	ldr	r3, [pc, #256]	@ (8005aac <ControlTask+0x828>)
 80059ac:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059b0:	3310      	adds	r3, #16
 80059b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059b6:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 80059b8:	4b3c      	ldr	r3, [pc, #240]	@ (8005aac <ControlTask+0x828>)
 80059ba:	f8d3 3454 	ldr.w	r3, [r3, #1108]	@ 0x454
 80059be:	3320      	adds	r3, #32
 80059c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059c4:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e00b      	b.n	80059e4 <ControlTask+0x760>
 80059cc:	4b37      	ldr	r3, [pc, #220]	@ (8005aac <ControlTask+0x828>)
 80059ce:	f8d3 2480 	ldr.w	r2, [r3, #1152]	@ 0x480
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	ddf0      	ble.n	80059cc <ControlTask+0x748>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 80059ea:	4b30      	ldr	r3, [pc, #192]	@ (8005aac <ControlTask+0x828>)
 80059ec:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80059f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059f4:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 80059f6:	4b2d      	ldr	r3, [pc, #180]	@ (8005aac <ControlTask+0x828>)
 80059f8:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80059fc:	3310      	adds	r3, #16
 80059fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a02:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 8005a04:	4b29      	ldr	r3, [pc, #164]	@ (8005aac <ControlTask+0x828>)
 8005a06:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8005a0a:	3320      	adds	r3, #32
 8005a0c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a10:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 8005a12:	4826      	ldr	r0, [pc, #152]	@ (8005aac <ControlTask+0x828>)
 8005a14:	f7fd fe1a 	bl	800364c <robot_state_update>
				// 15. 로봇의 Trajectory 파라미터 초기화
				quintic_traj.initial_time = (float32_t) ctrl_time_ms / 1000.0f;
 8005a18:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <ControlTask+0x830>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a24:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8005ab8 <ControlTask+0x834>
 8005a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a2c:	4b23      	ldr	r3, [pc, #140]	@ (8005abc <ControlTask+0x838>)
 8005a2e:	edc3 7a01 	vstr	s15, [r3, #4]
				quintic_traj.initial_pos[0] = homing_posXYZ.pData[0];
 8005a32:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <ControlTask+0x82c>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a20      	ldr	r2, [pc, #128]	@ (8005abc <ControlTask+0x838>)
 8005a3a:	60d3      	str	r3, [r2, #12]
				quintic_traj.initial_pos[1] = homing_posXYZ.pData[1];
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <ControlTask+0x82c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <ControlTask+0x838>)
 8005a44:	6113      	str	r3, [r2, #16]
				quintic_traj.initial_pos[2] = homing_posXYZ.pData[2];
 8005a46:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <ControlTask+0x82c>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <ControlTask+0x838>)
 8005a4e:	6153      	str	r3, [r2, #20]
				quintic_traj.initial_vel[0] = 0.0f;
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <ControlTask+0x838>)
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	619a      	str	r2, [r3, #24]
				quintic_traj.initial_vel[1] = 0.0f;
 8005a58:	4b18      	ldr	r3, [pc, #96]	@ (8005abc <ControlTask+0x838>)
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	61da      	str	r2, [r3, #28]
				quintic_traj.initial_vel[2] = 0.0f;
 8005a60:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <ControlTask+0x838>)
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	621a      	str	r2, [r3, #32]
				quintic_traj.initial_acc[0] = 0.0f;
 8005a68:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <ControlTask+0x838>)
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24
				quintic_traj.initial_acc[1] = 0.0f;
 8005a70:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <ControlTask+0x838>)
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	629a      	str	r2, [r3, #40]	@ 0x28
				quintic_traj.initial_acc[2] = 0.0f;
 8005a78:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <ControlTask+0x838>)
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
				set_trajectory(&strawberry_robot, &quintic_traj, taskTime, homing_posXYZ_buffer);
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <ControlTask+0x83c>)
 8005a82:	edd3 7a00 	vldr	s15, [r3]
 8005a86:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac4 <ControlTask+0x840>)
 8005a88:	eeb0 0a67 	vmov.f32	s0, s15
 8005a8c:	490b      	ldr	r1, [pc, #44]	@ (8005abc <ControlTask+0x838>)
 8005a8e:	4807      	ldr	r0, [pc, #28]	@ (8005aac <ControlTask+0x828>)
 8005a90:	f7fe f99c 	bl	8003dcc <set_trajectory>
				get_target_point(&quintic_traj, target_posXYZ);
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <ControlTask+0x844>)
 8005a96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a9a:	4808      	ldr	r0, [pc, #32]	@ (8005abc <ControlTask+0x838>)
 8005a9c:	f7fe fd20 	bl	80044e0 <get_target_point>
				// 16. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8005aa0:	4b02      	ldr	r3, [pc, #8]	@ (8005aac <ControlTask+0x828>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8005aa6:	f7ff bbf9 	b.w	800529c <ControlTask+0x18>
 8005aaa:	bf00      	nop
 8005aac:	2400231c 	.word	0x2400231c
 8005ab0:	24002300 	.word	0x24002300
 8005ab4:	240022d4 	.word	0x240022d4
 8005ab8:	447a0000 	.word	0x447a0000
 8005abc:	240029b0 	.word	0x240029b0
 8005ac0:	24000018 	.word	0x24000018
 8005ac4:	2400000c 	.word	0x2400000c
 8005ac8:	24002308 	.word	0x24002308

08005acc <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	ed2d 8b10 	vpush	{d8-d15}
 8005ad2:	b0a9      	sub	sp, #164	@ 0xa4
 8005ad4:	af24      	add	r7, sp, #144	@ 0x90
 8005ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8005ad8:	f00c f9b0 	bl	8011e3c <xTaskGetTickCount>
 8005adc:	4603      	mov	r3, r0
 8005ade:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(5);  // 5 ms
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 10 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	68f9      	ldr	r1, [r7, #12]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f00c f80a 	bl	8011b04 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	005a      	lsls	r2, r3, #1
 8005af4:	4bad      	ldr	r3, [pc, #692]	@ (8005dac <DataLoggingTask+0x2e0>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	4aac      	ldr	r2, [pc, #688]	@ (8005dac <DataLoggingTask+0x2e0>)
 8005afc:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 8005afe:	4bac      	ldr	r3, [pc, #688]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	f040 80a9 	bne.w	8005c5a <DataLoggingTask+0x18e>
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8005b08:	4baa      	ldr	r3, [pc, #680]	@ (8005db4 <DataLoggingTask+0x2e8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b14:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8005db8 <DataLoggingTask+0x2ec>
 8005b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b1c:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8005b20:	4ba3      	ldr	r3, [pc, #652]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4aa2      	ldr	r2, [pc, #648]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b26:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 8005b28:	49a1      	ldr	r1, [pc, #644]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b2a:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005b32:	499f      	ldr	r1, [pc, #636]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b34:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 8005b38:	489d      	ldr	r0, [pc, #628]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b3a:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b3e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005b42:	489b      	ldr	r0, [pc, #620]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b44:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8005b48:	4c99      	ldr	r4, [pc, #612]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b4a:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b4e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b52:	4c97      	ldr	r4, [pc, #604]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b54:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005b58:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b5c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b60:	4c93      	ldr	r4, [pc, #588]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b62:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005b66:	3404      	adds	r4, #4
 8005b68:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b6c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005b70:	4c8f      	ldr	r4, [pc, #572]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b72:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005b76:	3408      	adds	r4, #8
 8005b78:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b7c:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005b80:	4c8b      	ldr	r4, [pc, #556]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b82:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005b86:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b8a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005b8e:	4c88      	ldr	r4, [pc, #544]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005b90:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005b94:	3404      	adds	r4, #4
 8005b96:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005b9a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005b9e:	4c84      	ldr	r4, [pc, #528]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005ba0:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005ba4:	3408      	adds	r4, #8
 8005ba6:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005baa:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bae:	4c80      	ldr	r4, [pc, #512]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bb0:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005bb4:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bb8:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bbc:	4c7c      	ldr	r4, [pc, #496]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bbe:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005bc2:	3404      	adds	r4, #4
 8005bc4:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bc8:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005bcc:	4c78      	ldr	r4, [pc, #480]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bce:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005bd2:	3408      	adds	r4, #8
 8005bd4:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bd8:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005bdc:	4c74      	ldr	r4, [pc, #464]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bde:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005be2:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005be6:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005bea:	4c71      	ldr	r4, [pc, #452]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bec:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005bf0:	3404      	adds	r4, #4
 8005bf2:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005bf6:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005bfa:	4c6d      	ldr	r4, [pc, #436]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005bfc:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005c00:	3408      	adds	r4, #8
 8005c02:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c06:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8005c0a:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005c0e:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005c12:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8005c16:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8005c1a:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005c1e:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005c22:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8005c26:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8005c2a:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005c2e:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005c32:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8005c36:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8005c3a:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005c3e:	9008      	str	r0, [sp, #32]
 8005c40:	ed8d 6b06 	vstr	d6, [sp, #24]
 8005c44:	9104      	str	r1, [sp, #16]
 8005c46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	ec53 2b1f 	vmov	r2, r3, d15
 8005c52:	485a      	ldr	r0, [pc, #360]	@ (8005dbc <DataLoggingTask+0x2f0>)
 8005c54:	f00f f9b8 	bl	8014fc8 <iprintf>
 8005c58:	e744      	b.n	8005ae4 <DataLoggingTask+0x18>
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8005c5a:	4b56      	ldr	r3, [pc, #344]	@ (8005db4 <DataLoggingTask+0x2e8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c66:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8005db8 <DataLoggingTask+0x2ec>
 8005c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c6e:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8005c72:	4b4f      	ldr	r3, [pc, #316]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4e      	ldr	r2, [pc, #312]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c78:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 8005c7a:	494d      	ldr	r1, [pc, #308]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c7c:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005c84:	494a      	ldr	r1, [pc, #296]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c86:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 8005c8a:	4849      	ldr	r0, [pc, #292]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c8c:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005c90:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005c94:	4846      	ldr	r0, [pc, #280]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c96:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8005c9a:	4c45      	ldr	r4, [pc, #276]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005c9c:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005ca0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005ca4:	4c42      	ldr	r4, [pc, #264]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005ca6:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005caa:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cae:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005cb2:	4c3f      	ldr	r4, [pc, #252]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005cb4:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005cb8:	3404      	adds	r4, #4
 8005cba:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cbe:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005cc2:	4c3b      	ldr	r4, [pc, #236]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005cc4:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8005cc8:	3408      	adds	r4, #8
 8005cca:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cce:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005cd2:	4c37      	ldr	r4, [pc, #220]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005cd4:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005cd8:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cdc:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005ce0:	4c33      	ldr	r4, [pc, #204]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005ce2:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005ce6:	3404      	adds	r4, #4
 8005ce8:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cec:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005cf0:	4c2f      	ldr	r4, [pc, #188]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005cf2:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005cf6:	3408      	adds	r4, #8
 8005cf8:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005cfc:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d00:	4c2b      	ldr	r4, [pc, #172]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d02:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d06:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d0a:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d0e:	4c28      	ldr	r4, [pc, #160]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d10:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d14:	3404      	adds	r4, #4
 8005d16:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d1a:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005d1e:	4c24      	ldr	r4, [pc, #144]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d20:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005d24:	3408      	adds	r4, #8
 8005d26:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d2a:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d2e:	4c20      	ldr	r4, [pc, #128]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d30:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d34:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d38:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d3c:	4c1c      	ldr	r4, [pc, #112]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d3e:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d42:	3404      	adds	r4, #4
 8005d44:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d48:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005d4c:	4c18      	ldr	r4, [pc, #96]	@ (8005db0 <DataLoggingTask+0x2e4>)
 8005d4e:	f8d4 4524 	ldr.w	r4, [r4, #1316]	@ 0x524
 8005d52:	3408      	adds	r4, #8
 8005d54:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005d58:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8005d5c:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005d60:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005d64:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8005d68:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8005d6c:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005d70:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005d74:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8005d78:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8005d7c:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005d80:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005d84:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8005d88:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8005d8c:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005d90:	9008      	str	r0, [sp, #32]
 8005d92:	ed8d 6b06 	vstr	d6, [sp, #24]
 8005d96:	9104      	str	r1, [sp, #16]
 8005d98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	ec53 2b1f 	vmov	r2, r3, d15
 8005da4:	4805      	ldr	r0, [pc, #20]	@ (8005dbc <DataLoggingTask+0x2f0>)
 8005da6:	f00f f90f 	bl	8014fc8 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8005daa:	e69b      	b.n	8005ae4 <DataLoggingTask+0x18>
 8005dac:	240022dc 	.word	0x240022dc
 8005db0:	2400231c 	.word	0x2400231c
 8005db4:	240022d4 	.word	0x240022d4
 8005db8:	447a0000 	.word	0x447a0000
 8005dbc:	08017cac 	.word	0x08017cac

08005dc0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005dd2:	f000 ff3d 	bl	8006c50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005de2:	231f      	movs	r3, #31
 8005de4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005de6:	2387      	movs	r3, #135	@ 0x87
 8005de8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005dee:	2300      	movs	r3, #0
 8005df0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005df6:	2301      	movs	r3, #1
 8005df8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e02:	463b      	mov	r3, r7
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 ff5b 	bl	8006cc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005e0a:	2004      	movs	r0, #4
 8005e0c:	f000 ff38 	bl	8006c80 <HAL_MPU_Enable>

}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a04      	ldr	r2, [pc, #16]	@ (8005e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8005e2a:	f000 fde1 	bl	80069f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40001400 	.word	0x40001400

08005e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8005e42:	4b52      	ldr	r3, [pc, #328]	@ (8005f8c <Error_Handler+0x150>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d148      	bne.n	8005edc <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	e03f      	b.n	8005ed0 <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8005e50:	2180      	movs	r1, #128	@ 0x80
 8005e52:	484f      	ldr	r0, [pc, #316]	@ (8005f90 <Error_Handler+0x154>)
 8005e54:	f005 fb09 	bl	800b46a <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8005e58:	4a4c      	ldr	r2, [pc, #304]	@ (8005f8c <Error_Handler+0x150>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2198      	movs	r1, #152	@ 0x98
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	338c      	adds	r3, #140	@ 0x8c
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005e6c:	4849      	ldr	r0, [pc, #292]	@ (8005f94 <Error_Handler+0x158>)
 8005e6e:	f004 fb99 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d016      	beq.n	8005ea6 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8005e78:	4a44      	ldr	r2, [pc, #272]	@ (8005f8c <Error_Handler+0x150>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2198      	movs	r1, #152	@ 0x98
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	3308      	adds	r3, #8
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	4940      	ldr	r1, [pc, #256]	@ (8005f8c <Error_Handler+0x150>)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2098      	movs	r0, #152	@ 0x98
 8005e90:	fb00 f303 	mul.w	r3, r0, r3
 8005e94:	440b      	add	r3, r1
 8005e96:	338c      	adds	r3, #140	@ 0x8c
 8005e98:	edd3 7a00 	vldr	s15, [r3]
 8005e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f7fb fdf1 	bl	8001a88 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005ea6:	483b      	ldr	r0, [pc, #236]	@ (8005f94 <Error_Handler+0x158>)
 8005ea8:	f004 fb7c 	bl	800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005eb2:	4a36      	ldr	r2, [pc, #216]	@ (8005f8c <Error_Handler+0x150>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2198      	movs	r1, #152	@ 0x98
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fb fd63 	bl	8001990 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	ddbc      	ble.n	8005e50 <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <Error_Handler+0x150>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8005edc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f98 <Error_Handler+0x15c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d82f      	bhi.n	8005f46 <Error_Handler+0x10a>
 8005ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <Error_Handler+0xb0>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005f01 	.word	0x08005f01
 8005ef0:	08005f0f 	.word	0x08005f0f
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f2b 	.word	0x08005f2b
 8005efc:	08005f39 	.word	0x08005f39
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 8005f00:	4b25      	ldr	r3, [pc, #148]	@ (8005f98 <Error_Handler+0x15c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	4825      	ldr	r0, [pc, #148]	@ (8005f9c <Error_Handler+0x160>)
 8005f08:	f00f f85e 	bl	8014fc8 <iprintf>
 8005f0c:	e01e      	b.n	8005f4c <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 8005f0e:	4b22      	ldr	r3, [pc, #136]	@ (8005f98 <Error_Handler+0x15c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4822      	ldr	r0, [pc, #136]	@ (8005fa0 <Error_Handler+0x164>)
 8005f16:	f00f f857 	bl	8014fc8 <iprintf>
 8005f1a:	e017      	b.n	8005f4c <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <Error_Handler+0x15c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	4820      	ldr	r0, [pc, #128]	@ (8005fa4 <Error_Handler+0x168>)
 8005f24:	f00f f850 	bl	8014fc8 <iprintf>
 8005f28:	e010      	b.n	8005f4c <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <Error_Handler+0x15c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	481d      	ldr	r0, [pc, #116]	@ (8005fa8 <Error_Handler+0x16c>)
 8005f32:	f00f f849 	bl	8014fc8 <iprintf>
 8005f36:	e009      	b.n	8005f4c <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8005f38:	4b17      	ldr	r3, [pc, #92]	@ (8005f98 <Error_Handler+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	481b      	ldr	r0, [pc, #108]	@ (8005fac <Error_Handler+0x170>)
 8005f40:	f00f f842 	bl	8014fc8 <iprintf>
 8005f44:	e002      	b.n	8005f4c <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8005f46:	481a      	ldr	r0, [pc, #104]	@ (8005fb0 <Error_Handler+0x174>)
 8005f48:	f00f f83e 	bl	8014fc8 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	e012      	b.n	8005f78 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8005f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f56:	480e      	ldr	r0, [pc, #56]	@ (8005f90 <Error_Handler+0x154>)
 8005f58:	f005 fa87 	bl	800b46a <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8005f5c:	20c8      	movs	r0, #200	@ 0xc8
 8005f5e:	f000 fd67 	bl	8006a30 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8005f62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f66:	480a      	ldr	r0, [pc, #40]	@ (8005f90 <Error_Handler+0x154>)
 8005f68:	f005 fa7f 	bl	800b46a <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8005f6c:	20c8      	movs	r0, #200	@ 0xc8
 8005f6e:	f000 fd5f 	bl	8006a30 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <Error_Handler+0x15c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	dbe7      	blt.n	8005f52 <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8005f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f86:	f000 fd53 	bl	8006a30 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8005f8a:	e7df      	b.n	8005f4c <Error_Handler+0x110>
 8005f8c:	2400231c 	.word	0x2400231c
 8005f90:	58020400 	.word	0x58020400
 8005f94:	24000298 	.word	0x24000298
 8005f98:	24002a4c 	.word	0x24002a4c
 8005f9c:	08017d20 	.word	0x08017d20
 8005fa0:	08017d48 	.word	0x08017d48
 8005fa4:	08017d70 	.word	0x08017d70
 8005fa8:	08017da4 	.word	0x08017da4
 8005fac:	08017dd8 	.word	0x08017dd8
 8005fb0:	08017e0c 	.word	0x08017e0c

08005fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fba:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <HAL_MspInit+0x38>)
 8005fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fec <HAL_MspInit+0x38>)
 8005fc2:	f043 0302 	orr.w	r3, r3, #2
 8005fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <HAL_MspInit+0x38>)
 8005fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	210f      	movs	r1, #15
 8005fdc:	f06f 0001 	mvn.w	r0, #1
 8005fe0:	f000 fe0e 	bl	8006c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	58024400 	.word	0x58024400

08005ff0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	22c0      	movs	r2, #192	@ 0xc0
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f00f f82e 	bl	8015072 <memset>
  if(hfdcan->Instance==FDCAN1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a37      	ldr	r2, [pc, #220]	@ (80060f8 <HAL_FDCAN_MspInit+0x108>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d166      	bne.n	80060ee <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8006020:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800602c:	2301      	movs	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8006030:	2364      	movs	r3, #100	@ 0x64
 8006032:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8006034:	2302      	movs	r3, #2
 8006036:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8006038:	2314      	movs	r3, #20
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800603c:	2302      	movs	r3, #2
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8006040:	23c0      	movs	r3, #192	@ 0xc0
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006044:	2300      	movs	r3, #0
 8006046:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800604c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	4618      	mov	r0, r3
 800605a:	f006 fa83 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8006064:	f7ff feea 	bl	8005e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8006068:	4b24      	ldr	r3, [pc, #144]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 800606a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800606e:	4a23      	ldr	r2, [pc, #140]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 8006070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006074:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8006078:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 800607a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006086:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 8006088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800608c:	4a1b      	ldr	r2, [pc, #108]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 800608e:	f043 0308 	orr.w	r3, r3, #8
 8006092:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006096:	4b19      	ldr	r3, [pc, #100]	@ (80060fc <HAL_FDCAN_MspInit+0x10c>)
 8006098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060a4:	2303      	movs	r3, #3
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060aa:	2302      	movs	r3, #2
 80060ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060b6:	2302      	movs	r3, #2
 80060b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80060bc:	2309      	movs	r3, #9
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80060c6:	4619      	mov	r1, r3
 80060c8:	480d      	ldr	r0, [pc, #52]	@ (8006100 <HAL_FDCAN_MspInit+0x110>)
 80060ca:	f005 f805 	bl	800b0d8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 80060ce:	2200      	movs	r2, #0
 80060d0:	2106      	movs	r1, #6
 80060d2:	2013      	movs	r0, #19
 80060d4:	f000 fd94 	bl	8006c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80060d8:	2013      	movs	r0, #19
 80060da:	f000 fdab 	bl	8006c34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2106      	movs	r1, #6
 80060e2:	2015      	movs	r0, #21
 80060e4:	f000 fd8c 	bl	8006c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80060e8:	2015      	movs	r0, #21
 80060ea:	f000 fda3 	bl	8006c34 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80060ee:	bf00      	nop
 80060f0:	37e8      	adds	r7, #232	@ 0xe8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	4000a000 	.word	0x4000a000
 80060fc:	58024400 	.word	0x58024400
 8006100:	58020c00 	.word	0x58020c00

08006104 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b0ba      	sub	sp, #232	@ 0xe8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800610c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	22c0      	movs	r2, #192	@ 0xc0
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f00e ffa4 	bl	8015072 <memset>
  if(huart->Instance==USART3)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a59      	ldr	r2, [pc, #356]	@ (8006294 <HAL_UART_MspInit+0x190>)
 8006130:	4293      	cmp	r3, r2
 8006132:	f040 80aa 	bne.w	800628a <HAL_UART_MspInit+0x186>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006136:	f04f 0202 	mov.w	r2, #2
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	4618      	mov	r0, r3
 800614e:	f006 fa09 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8006158:	f7ff fe70 	bl	8005e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800615c:	4b4e      	ldr	r3, [pc, #312]	@ (8006298 <HAL_UART_MspInit+0x194>)
 800615e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006162:	4a4d      	ldr	r2, [pc, #308]	@ (8006298 <HAL_UART_MspInit+0x194>)
 8006164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006168:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800616c:	4b4a      	ldr	r3, [pc, #296]	@ (8006298 <HAL_UART_MspInit+0x194>)
 800616e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800617a:	4b47      	ldr	r3, [pc, #284]	@ (8006298 <HAL_UART_MspInit+0x194>)
 800617c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006180:	4a45      	ldr	r2, [pc, #276]	@ (8006298 <HAL_UART_MspInit+0x194>)
 8006182:	f043 0308 	orr.w	r3, r3, #8
 8006186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800618a:	4b43      	ldr	r3, [pc, #268]	@ (8006298 <HAL_UART_MspInit+0x194>)
 800618c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006198:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800619c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a0:	2302      	movs	r3, #2
 80061a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061b2:	2307      	movs	r3, #7
 80061b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80061bc:	4619      	mov	r1, r3
 80061be:	4837      	ldr	r0, [pc, #220]	@ (800629c <HAL_UART_MspInit+0x198>)
 80061c0:	f004 ff8a 	bl	800b0d8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80061c4:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061c6:	4a37      	ldr	r2, [pc, #220]	@ (80062a4 <HAL_UART_MspInit+0x1a0>)
 80061c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80061ca:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061cc:	222d      	movs	r2, #45	@ 0x2d
 80061ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061d0:	4b33      	ldr	r3, [pc, #204]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061d6:	4b32      	ldr	r3, [pc, #200]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061dc:	4b30      	ldr	r3, [pc, #192]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061e4:	4b2e      	ldr	r3, [pc, #184]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061ea:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80061f0:	4b2b      	ldr	r3, [pc, #172]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061fc:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006202:	4827      	ldr	r0, [pc, #156]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 8006204:	f000 fd9c 	bl	8006d40 <HAL_DMA_Init>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800620e:	f7ff fe15 	bl	8005e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a22      	ldr	r2, [pc, #136]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 8006216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800621a:	4a21      	ldr	r2, [pc, #132]	@ (80062a0 <HAL_UART_MspInit+0x19c>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8006220:	4b21      	ldr	r3, [pc, #132]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006222:	4a22      	ldr	r2, [pc, #136]	@ (80062ac <HAL_UART_MspInit+0x1a8>)
 8006224:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006226:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006228:	222e      	movs	r2, #46	@ 0x2e
 800622a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800622c:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 800622e:	2240      	movs	r2, #64	@ 0x40
 8006230:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006232:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006234:	2200      	movs	r2, #0
 8006236:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 800623a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800623e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006240:	4b19      	ldr	r3, [pc, #100]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006242:	2200      	movs	r2, #0
 8006244:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006246:	4b18      	ldr	r3, [pc, #96]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800624c:	4b16      	ldr	r3, [pc, #88]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006252:	4b15      	ldr	r3, [pc, #84]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006254:	2200      	movs	r2, #0
 8006256:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006258:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 800625a:	2200      	movs	r2, #0
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800625e:	4812      	ldr	r0, [pc, #72]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006260:	f000 fd6e 	bl	8006d40 <HAL_DMA_Init>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800626a:	f7ff fde7 	bl	8005e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0d      	ldr	r2, [pc, #52]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006272:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006274:	4a0c      	ldr	r2, [pc, #48]	@ (80062a8 <HAL_UART_MspInit+0x1a4>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800627a:	2200      	movs	r2, #0
 800627c:	2108      	movs	r1, #8
 800627e:	2027      	movs	r0, #39	@ 0x27
 8006280:	f000 fcbe 	bl	8006c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006284:	2027      	movs	r0, #39	@ 0x27
 8006286:	f000 fcd5 	bl	8006c34 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800628a:	bf00      	nop
 800628c:	37e8      	adds	r7, #232	@ 0xe8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40004800 	.word	0x40004800
 8006298:	58024400 	.word	0x58024400
 800629c:	58020c00 	.word	0x58020c00
 80062a0:	240003cc 	.word	0x240003cc
 80062a4:	40020010 	.word	0x40020010
 80062a8:	24000444 	.word	0x24000444
 80062ac:	40020028 	.word	0x40020028

080062b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	@ 0x40
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d827      	bhi.n	800630e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80062be:	2200      	movs	r2, #0
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	2037      	movs	r0, #55	@ 0x37
 80062c4:	f000 fc9c 	bl	8006c00 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062c8:	2037      	movs	r0, #55	@ 0x37
 80062ca:	f000 fcb3 	bl	8006c34 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80062ce:	4a29      	ldr	r2, [pc, #164]	@ (8006374 <HAL_InitTick+0xc4>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80062d4:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <HAL_InitTick+0xc8>)
 80062d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062da:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <HAL_InitTick+0xc8>)
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80062e4:	4b24      	ldr	r3, [pc, #144]	@ (8006378 <HAL_InitTick+0xc8>)
 80062e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80062f2:	f107 0210 	add.w	r2, r7, #16
 80062f6:	f107 0314 	add.w	r3, r7, #20
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f006 f8ef 	bl	800c4e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <HAL_InitTick+0x6a>
 800630c:	e001      	b.n	8006312 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02b      	b.n	800636a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006312:	f006 f8b9 	bl	800c488 <HAL_RCC_GetPCLK1Freq>
 8006316:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8006318:	e004      	b.n	8006324 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800631a:	f006 f8b5 	bl	800c488 <HAL_RCC_GetPCLK1Freq>
 800631e:	4603      	mov	r3, r0
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006326:	4a15      	ldr	r2, [pc, #84]	@ (800637c <HAL_InitTick+0xcc>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	0c9b      	lsrs	r3, r3, #18
 800632e:	3b01      	subs	r3, #1
 8006330:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8006332:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <HAL_InitTick+0xd0>)
 8006334:	4a13      	ldr	r2, [pc, #76]	@ (8006384 <HAL_InitTick+0xd4>)
 8006336:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8006338:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <HAL_InitTick+0xd0>)
 800633a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800633e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8006340:	4a0f      	ldr	r2, [pc, #60]	@ (8006380 <HAL_InitTick+0xd0>)
 8006342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006344:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8006346:	4b0e      	ldr	r3, [pc, #56]	@ (8006380 <HAL_InitTick+0xd0>)
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800634c:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_InitTick+0xd0>)
 800634e:	2200      	movs	r2, #0
 8006350:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8006352:	480b      	ldr	r0, [pc, #44]	@ (8006380 <HAL_InitTick+0xd0>)
 8006354:	f007 ff32 	bl	800e1bc <HAL_TIM_Base_Init>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800635e:	4808      	ldr	r0, [pc, #32]	@ (8006380 <HAL_InitTick+0xd0>)
 8006360:	f007 ff8e 	bl	800e280 <HAL_TIM_Base_Start_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	e000      	b.n	800636a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
}
 800636a:	4618      	mov	r0, r3
 800636c:	3740      	adds	r7, #64	@ 0x40
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	24000084 	.word	0x24000084
 8006378:	58024400 	.word	0x58024400
 800637c:	431bde83 	.word	0x431bde83
 8006380:	24002a50 	.word	0x24002a50
 8006384:	40001400 	.word	0x40001400

08006388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <NMI_Handler+0x4>

08006390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <HardFault_Handler+0x4>

08006398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <MemManage_Handler+0x4>

080063a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <BusFault_Handler+0x4>

080063a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <UsageFault_Handler+0x4>

080063b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80063c4:	4802      	ldr	r0, [pc, #8]	@ (80063d0 <DMA1_Stream0_IRQHandler+0x10>)
 80063c6:	f002 f99b 	bl	8008700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	240003cc 	.word	0x240003cc

080063d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80063d8:	4802      	ldr	r0, [pc, #8]	@ (80063e4 <DMA1_Stream1_IRQHandler+0x10>)
 80063da:	f002 f991 	bl	8008700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80063de:	bf00      	nop
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	24000444 	.word	0x24000444

080063e8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80063ec:	4802      	ldr	r0, [pc, #8]	@ (80063f8 <FDCAN1_IT0_IRQHandler+0x10>)
 80063ee:	f004 f965 	bl	800a6bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	24000298 	.word	0x24000298

080063fc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8006400:	4802      	ldr	r0, [pc, #8]	@ (800640c <FDCAN1_IT1_IRQHandler+0x10>)
 8006402:	f004 f95b 	bl	800a6bc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	24000298 	.word	0x24000298

08006410 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006414:	4802      	ldr	r0, [pc, #8]	@ (8006420 <USART3_IRQHandler+0x10>)
 8006416:	f008 fb1f 	bl	800ea58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800641a:	bf00      	nop
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	24000338 	.word	0x24000338

08006424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8006428:	2000      	movs	r0, #0
 800642a:	f000 fa8b 	bl	8006944 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800642e:	bf00      	nop
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006438:	4802      	ldr	r0, [pc, #8]	@ (8006444 <TIM7_IRQHandler+0x10>)
 800643a:	f007 ff99 	bl	800e370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	24002a50 	.word	0x24002a50

08006448 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006456:	b480      	push	{r7}
 8006458:	af00      	add	r7, sp, #0
  return 1;
 800645a:	2301      	movs	r3, #1
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <_kill>:

int _kill(int pid, int sig)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006470:	f00e fee4 	bl	801523c <__errno>
 8006474:	4603      	mov	r3, r0
 8006476:	2216      	movs	r2, #22
 8006478:	601a      	str	r2, [r3, #0]
  return -1;
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <_exit>:

void _exit (int status)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800648e:	f04f 31ff 	mov.w	r1, #4294967295
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ffe7 	bl	8006466 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <_exit+0x12>

0800649c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e00a      	b.n	80064c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80064ae:	f3af 8000 	nop.w
 80064b2:	4601      	mov	r1, r0
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	60ba      	str	r2, [r7, #8]
 80064ba:	b2ca      	uxtb	r2, r1
 80064bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	3301      	adds	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dbf0      	blt.n	80064ae <_read+0x12>
  }

  return len;
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064fe:	605a      	str	r2, [r3, #4]
  return 0;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <_isatty>:

int _isatty(int file)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006516:	2301      	movs	r3, #1
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006548:	4a14      	ldr	r2, [pc, #80]	@ (800659c <_sbrk+0x5c>)
 800654a:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <_sbrk+0x60>)
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006554:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <_sbrk+0x64>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800655c:	4b11      	ldr	r3, [pc, #68]	@ (80065a4 <_sbrk+0x64>)
 800655e:	4a12      	ldr	r2, [pc, #72]	@ (80065a8 <_sbrk+0x68>)
 8006560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006562:	4b10      	ldr	r3, [pc, #64]	@ (80065a4 <_sbrk+0x64>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d207      	bcs.n	8006580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006570:	f00e fe64 	bl	801523c <__errno>
 8006574:	4603      	mov	r3, r0
 8006576:	220c      	movs	r2, #12
 8006578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295
 800657e:	e009      	b.n	8006594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006580:	4b08      	ldr	r3, [pc, #32]	@ (80065a4 <_sbrk+0x64>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006586:	4b07      	ldr	r3, [pc, #28]	@ (80065a4 <_sbrk+0x64>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	4a05      	ldr	r2, [pc, #20]	@ (80065a4 <_sbrk+0x64>)
 8006590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006592:	68fb      	ldr	r3, [r7, #12]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	24080000 	.word	0x24080000
 80065a0:	00000400 	.word	0x00000400
 80065a4:	24002a9c 	.word	0x24002a9c
 80065a8:	240075e0 	.word	0x240075e0

080065ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80065b0:	4b43      	ldr	r3, [pc, #268]	@ (80066c0 <SystemInit+0x114>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b6:	4a42      	ldr	r2, [pc, #264]	@ (80066c0 <SystemInit+0x114>)
 80065b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065c0:	4b40      	ldr	r3, [pc, #256]	@ (80066c4 <SystemInit+0x118>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2b06      	cmp	r3, #6
 80065ca:	d807      	bhi.n	80065dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065cc:	4b3d      	ldr	r3, [pc, #244]	@ (80066c4 <SystemInit+0x118>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f023 030f 	bic.w	r3, r3, #15
 80065d4:	4a3b      	ldr	r2, [pc, #236]	@ (80066c4 <SystemInit+0x118>)
 80065d6:	f043 0307 	orr.w	r3, r3, #7
 80065da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80065dc:	4b3a      	ldr	r3, [pc, #232]	@ (80066c8 <SystemInit+0x11c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a39      	ldr	r2, [pc, #228]	@ (80066c8 <SystemInit+0x11c>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065e8:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <SystemInit+0x11c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80065ee:	4b36      	ldr	r3, [pc, #216]	@ (80066c8 <SystemInit+0x11c>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4935      	ldr	r1, [pc, #212]	@ (80066c8 <SystemInit+0x11c>)
 80065f4:	4b35      	ldr	r3, [pc, #212]	@ (80066cc <SystemInit+0x120>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065fa:	4b32      	ldr	r3, [pc, #200]	@ (80066c4 <SystemInit+0x118>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006606:	4b2f      	ldr	r3, [pc, #188]	@ (80066c4 <SystemInit+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 030f 	bic.w	r3, r3, #15
 800660e:	4a2d      	ldr	r2, [pc, #180]	@ (80066c4 <SystemInit+0x118>)
 8006610:	f043 0307 	orr.w	r3, r3, #7
 8006614:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006616:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <SystemInit+0x11c>)
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800661c:	4b2a      	ldr	r3, [pc, #168]	@ (80066c8 <SystemInit+0x11c>)
 800661e:	2200      	movs	r2, #0
 8006620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006622:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <SystemInit+0x11c>)
 8006624:	2200      	movs	r2, #0
 8006626:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006628:	4b27      	ldr	r3, [pc, #156]	@ (80066c8 <SystemInit+0x11c>)
 800662a:	4a29      	ldr	r2, [pc, #164]	@ (80066d0 <SystemInit+0x124>)
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800662e:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <SystemInit+0x11c>)
 8006630:	4a28      	ldr	r2, [pc, #160]	@ (80066d4 <SystemInit+0x128>)
 8006632:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006634:	4b24      	ldr	r3, [pc, #144]	@ (80066c8 <SystemInit+0x11c>)
 8006636:	4a28      	ldr	r2, [pc, #160]	@ (80066d8 <SystemInit+0x12c>)
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800663a:	4b23      	ldr	r3, [pc, #140]	@ (80066c8 <SystemInit+0x11c>)
 800663c:	2200      	movs	r2, #0
 800663e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006640:	4b21      	ldr	r3, [pc, #132]	@ (80066c8 <SystemInit+0x11c>)
 8006642:	4a25      	ldr	r2, [pc, #148]	@ (80066d8 <SystemInit+0x12c>)
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006646:	4b20      	ldr	r3, [pc, #128]	@ (80066c8 <SystemInit+0x11c>)
 8006648:	2200      	movs	r2, #0
 800664a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800664c:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <SystemInit+0x11c>)
 800664e:	4a22      	ldr	r2, [pc, #136]	@ (80066d8 <SystemInit+0x12c>)
 8006650:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006652:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <SystemInit+0x11c>)
 8006654:	2200      	movs	r2, #0
 8006656:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <SystemInit+0x11c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1a      	ldr	r2, [pc, #104]	@ (80066c8 <SystemInit+0x11c>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006664:	4b18      	ldr	r3, [pc, #96]	@ (80066c8 <SystemInit+0x11c>)
 8006666:	2200      	movs	r2, #0
 8006668:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800666a:	4b1c      	ldr	r3, [pc, #112]	@ (80066dc <SystemInit+0x130>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b1c      	ldr	r3, [pc, #112]	@ (80066e0 <SystemInit+0x134>)
 8006670:	4013      	ands	r3, r2
 8006672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006676:	d202      	bcs.n	800667e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006678:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <SystemInit+0x138>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800667e:	4b12      	ldr	r3, [pc, #72]	@ (80066c8 <SystemInit+0x11c>)
 8006680:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d113      	bne.n	80066b4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800668c:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <SystemInit+0x11c>)
 800668e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006692:	4a0d      	ldr	r2, [pc, #52]	@ (80066c8 <SystemInit+0x11c>)
 8006694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006698:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800669c:	4b12      	ldr	r3, [pc, #72]	@ (80066e8 <SystemInit+0x13c>)
 800669e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80066a2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80066a4:	4b08      	ldr	r3, [pc, #32]	@ (80066c8 <SystemInit+0x11c>)
 80066a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80066aa:	4a07      	ldr	r2, [pc, #28]	@ (80066c8 <SystemInit+0x11c>)
 80066ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80066b4:	bf00      	nop
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	e000ed00 	.word	0xe000ed00
 80066c4:	52002000 	.word	0x52002000
 80066c8:	58024400 	.word	0x58024400
 80066cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80066d0:	02020200 	.word	0x02020200
 80066d4:	01ff0000 	.word	0x01ff0000
 80066d8:	01010280 	.word	0x01010280
 80066dc:	5c001000 	.word	0x5c001000
 80066e0:	ffff0000 	.word	0xffff0000
 80066e4:	51008108 	.word	0x51008108
 80066e8:	52004000 	.word	0x52004000

080066ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80066f0:	4b09      	ldr	r3, [pc, #36]	@ (8006718 <ExitRun0Mode+0x2c>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	4a08      	ldr	r2, [pc, #32]	@ (8006718 <ExitRun0Mode+0x2c>)
 80066f6:	f043 0302 	orr.w	r3, r3, #2
 80066fa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80066fc:	bf00      	nop
 80066fe:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <ExitRun0Mode+0x2c>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f9      	beq.n	80066fe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	58024800 	.word	0x58024800

0800671c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800671c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8006758 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8006720:	f7ff ffe4 	bl	80066ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006724:	f7ff ff42 	bl	80065ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006728:	480c      	ldr	r0, [pc, #48]	@ (800675c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800672a:	490d      	ldr	r1, [pc, #52]	@ (8006760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800672c:	4a0d      	ldr	r2, [pc, #52]	@ (8006764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800672e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006730:	e002      	b.n	8006738 <LoopCopyDataInit>

08006732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006736:	3304      	adds	r3, #4

08006738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800673a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800673c:	d3f9      	bcc.n	8006732 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800673e:	4a0a      	ldr	r2, [pc, #40]	@ (8006768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006740:	4c0a      	ldr	r4, [pc, #40]	@ (800676c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006744:	e001      	b.n	800674a <LoopFillZerobss>

08006746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006748:	3204      	adds	r2, #4

0800674a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800674a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800674c:	d3fb      	bcc.n	8006746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800674e:	f00e fd7b 	bl	8015248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006752:	f7fe f81b 	bl	800478c <main>
  bx  lr
 8006756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006758:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800675c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006760:	24000258 	.word	0x24000258
  ldr r2, =_sidata
 8006764:	080184a8 	.word	0x080184a8
  ldr r2, =_sbss
 8006768:	24000258 	.word	0x24000258
  ldr r4, =_ebss
 800676c:	240075e0 	.word	0x240075e0

08006770 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006770:	e7fe      	b.n	8006770 <ADC3_IRQHandler>
	...

08006774 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	@ 0x30
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800677e:	2300      	movs	r3, #0
 8006780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <BSP_LED_Init+0x28>
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d006      	beq.n	800679c <BSP_LED_Init+0x28>
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d003      	beq.n	800679c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006794:	f06f 0301 	mvn.w	r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679a:	e055      	b.n	8006848 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80067a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067b2:	4b28      	ldr	r3, [pc, #160]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	e021      	b.n	8006806 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d10f      	bne.n	80067e8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80067c8:	4b22      	ldr	r3, [pc, #136]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067ce:	4a21      	ldr	r2, [pc, #132]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e00e      	b.n	8006806 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80067e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067ee:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067f8:	4b16      	ldr	r3, [pc, #88]	@ (8006854 <BSP_LED_Init+0xe0>)
 80067fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <BSP_LED_Init+0xe4>)
 800680a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800680e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8006810:	2301      	movs	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006818:	2303      	movs	r3, #3
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	4a0f      	ldr	r2, [pc, #60]	@ (800685c <BSP_LED_Init+0xe8>)
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	f107 0218 	add.w	r2, r7, #24
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f004 fc54 	bl	800b0d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	4a0a      	ldr	r2, [pc, #40]	@ (800685c <BSP_LED_Init+0xe8>)
 8006834:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	4a07      	ldr	r2, [pc, #28]	@ (8006858 <BSP_LED_Init+0xe4>)
 800683c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006840:	2200      	movs	r2, #0
 8006842:	4619      	mov	r1, r3
 8006844:	f004 fdf8 	bl	800b438 <HAL_GPIO_WritePin>
  }

  return ret;
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800684a:	4618      	mov	r0, r3
 800684c:	3730      	adds	r7, #48	@ 0x30
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	08017edc 	.word	0x08017edc
 800685c:	2400006c 	.word	0x2400006c

08006860 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	460a      	mov	r2, r1
 800686a:	71fb      	strb	r3, [r7, #7]
 800686c:	4613      	mov	r3, r2
 800686e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8006870:	4b2e      	ldr	r3, [pc, #184]	@ (800692c <BSP_PB_Init+0xcc>)
 8006872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006876:	4a2d      	ldr	r2, [pc, #180]	@ (800692c <BSP_PB_Init+0xcc>)
 8006878:	f043 0304 	orr.w	r3, r3, #4
 800687c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006880:	4b2a      	ldr	r3, [pc, #168]	@ (800692c <BSP_PB_Init+0xcc>)
 8006882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	60bb      	str	r3, [r7, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800688e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006892:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8006894:	2302      	movs	r3, #2
 8006896:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006898:	2302      	movs	r3, #2
 800689a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800689c:	79bb      	ldrb	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10c      	bne.n	80068bc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	4a21      	ldr	r2, [pc, #132]	@ (8006930 <BSP_PB_Init+0xd0>)
 80068aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ae:	f107 020c 	add.w	r2, r7, #12
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f004 fc0f 	bl	800b0d8 <HAL_GPIO_Init>
 80068ba:	e031      	b.n	8006920 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80068bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80068c0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006930 <BSP_PB_Init+0xd0>)
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	f107 020c 	add.w	r2, r7, #12
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f004 fc01 	bl	800b0d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4a16      	ldr	r2, [pc, #88]	@ (8006934 <BSP_PB_Init+0xd4>)
 80068dc:	441a      	add	r2, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	4915      	ldr	r1, [pc, #84]	@ (8006938 <BSP_PB_Init+0xd8>)
 80068e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f003 fa46 	bl	8009d7a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4a10      	ldr	r2, [pc, #64]	@ (8006934 <BSP_PB_Init+0xd4>)
 80068f4:	1898      	adds	r0, r3, r2
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	4a10      	ldr	r2, [pc, #64]	@ (800693c <BSP_PB_Init+0xdc>)
 80068fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fe:	461a      	mov	r2, r3
 8006900:	2100      	movs	r1, #0
 8006902:	f003 fa1b 	bl	8009d3c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8006906:	2028      	movs	r0, #40	@ 0x28
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	4a0d      	ldr	r2, [pc, #52]	@ (8006940 <BSP_PB_Init+0xe0>)
 800690c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006910:	2200      	movs	r2, #0
 8006912:	4619      	mov	r1, r3
 8006914:	f000 f974 	bl	8006c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8006918:	2328      	movs	r3, #40	@ 0x28
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f98a 	bl	8006c34 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
 8006930:	24000078 	.word	0x24000078
 8006934:	24002aa0 	.word	0x24002aa0
 8006938:	08017ee4 	.word	0x08017ee4
 800693c:	2400007c 	.word	0x2400007c
 8006940:	24000080 	.word	0x24000080

08006944 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <BSP_PB_IRQHandler+0x20>)
 8006954:	4413      	add	r3, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f003 fa24 	bl	8009da4 <HAL_EXTI_IRQHandler>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	24002aa0 	.word	0x24002aa0

08006968 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800696c:	2000      	movs	r0, #0
 800696e:	f7fa fec1 	bl	80016f4 <BSP_PB_Callback>
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800697e:	2003      	movs	r0, #3
 8006980:	f000 f933 	bl	8006bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006984:	f005 fbd6 	bl	800c134 <HAL_RCC_GetSysClockFreq>
 8006988:	4602      	mov	r2, r0
 800698a:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <HAL_Init+0x68>)
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	4913      	ldr	r1, [pc, #76]	@ (80069e4 <HAL_Init+0x6c>)
 8006996:	5ccb      	ldrb	r3, [r1, r3]
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
 80069a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069a2:	4b0f      	ldr	r3, [pc, #60]	@ (80069e0 <HAL_Init+0x68>)
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <HAL_Init+0x6c>)
 80069ac:	5cd3      	ldrb	r3, [r2, r3]
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	4a0b      	ldr	r2, [pc, #44]	@ (80069e8 <HAL_Init+0x70>)
 80069ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069bc:	4a0b      	ldr	r2, [pc, #44]	@ (80069ec <HAL_Init+0x74>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069c2:	200f      	movs	r0, #15
 80069c4:	f7ff fc74 	bl	80062b0 <HAL_InitTick>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e002      	b.n	80069d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80069d2:	f7ff faef 	bl	8005fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58024400 	.word	0x58024400
 80069e4:	08017ecc 	.word	0x08017ecc
 80069e8:	24000068 	.word	0x24000068
 80069ec:	24000064 	.word	0x24000064

080069f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069f4:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <HAL_IncTick+0x20>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <HAL_IncTick+0x24>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	4a04      	ldr	r2, [pc, #16]	@ (8006a14 <HAL_IncTick+0x24>)
 8006a02:	6013      	str	r3, [r2, #0]
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	24000088 	.word	0x24000088
 8006a14:	24002aa8 	.word	0x24002aa8

08006a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a1c:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <HAL_GetTick+0x14>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	24002aa8 	.word	0x24002aa8

08006a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a38:	f7ff ffee 	bl	8006a18 <HAL_GetTick>
 8006a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d005      	beq.n	8006a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <HAL_Delay+0x44>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a56:	bf00      	nop
 8006a58:	f7ff ffde 	bl	8006a18 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d8f7      	bhi.n	8006a58 <HAL_Delay+0x28>
  {
  }
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	24000088 	.word	0x24000088

08006a78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006a7c:	4b03      	ldr	r3, [pc, #12]	@ (8006a8c <HAL_GetREVID+0x14>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	0c1b      	lsrs	r3, r3, #16
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	5c001000 	.word	0x5c001000

08006a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006aac:	4013      	ands	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006abe:	4a04      	ldr	r2, [pc, #16]	@ (8006ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	60d3      	str	r3, [r2, #12]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	e000ed00 	.word	0xe000ed00
 8006ad4:	05fa0000 	.word	0x05fa0000

08006ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006adc:	4b04      	ldr	r3, [pc, #16]	@ (8006af0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	f003 0307 	and.w	r3, r3, #7
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	db0b      	blt.n	8006b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	f003 021f 	and.w	r2, r3, #31
 8006b0c:	4907      	ldr	r1, [pc, #28]	@ (8006b2c <__NVIC_EnableIRQ+0x38>)
 8006b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	2001      	movs	r0, #1
 8006b16:	fa00 f202 	lsl.w	r2, r0, r2
 8006b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	e000e100 	.word	0xe000e100

08006b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	db0a      	blt.n	8006b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	490c      	ldr	r1, [pc, #48]	@ (8006b7c <__NVIC_SetPriority+0x4c>)
 8006b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b4e:	0112      	lsls	r2, r2, #4
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	440b      	add	r3, r1
 8006b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b58:	e00a      	b.n	8006b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	4908      	ldr	r1, [pc, #32]	@ (8006b80 <__NVIC_SetPriority+0x50>)
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	3b04      	subs	r3, #4
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	761a      	strb	r2, [r3, #24]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	e000e100 	.word	0xe000e100
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	@ 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f1c3 0307 	rsb	r3, r3, #7
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	bf28      	it	cs
 8006ba2:	2304      	movcs	r3, #4
 8006ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d902      	bls.n	8006bb4 <NVIC_EncodePriority+0x30>
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3b03      	subs	r3, #3
 8006bb2:	e000      	b.n	8006bb6 <NVIC_EncodePriority+0x32>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	43da      	mvns	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	43d9      	mvns	r1, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bdc:	4313      	orrs	r3, r2
         );
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3724      	adds	r7, #36	@ 0x24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff ff4c 	bl	8006a90 <__NVIC_SetPriorityGrouping>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c0e:	f7ff ff63 	bl	8006ad8 <__NVIC_GetPriorityGrouping>
 8006c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	6978      	ldr	r0, [r7, #20]
 8006c1a:	f7ff ffb3 	bl	8006b84 <NVIC_EncodePriority>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c24:	4611      	mov	r1, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff ff82 	bl	8006b30 <__NVIC_SetPriority>
}
 8006c2c:	bf00      	nop
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ff56 	bl	8006af4 <__NVIC_EnableIRQ>
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006c54:	f3bf 8f5f 	dmb	sy
}
 8006c58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006c5a:	4b07      	ldr	r3, [pc, #28]	@ (8006c78 <HAL_MPU_Disable+0x28>)
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	4a06      	ldr	r2, [pc, #24]	@ (8006c78 <HAL_MPU_Disable+0x28>)
 8006c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c64:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006c66:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <HAL_MPU_Disable+0x2c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	605a      	str	r2, [r3, #4]
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	e000ed00 	.word	0xe000ed00
 8006c7c:	e000ed90 	.word	0xe000ed90

08006c80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006c88:	4a0b      	ldr	r2, [pc, #44]	@ (8006cb8 <HAL_MPU_Enable+0x38>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006c92:	4b0a      	ldr	r3, [pc, #40]	@ (8006cbc <HAL_MPU_Enable+0x3c>)
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	4a09      	ldr	r2, [pc, #36]	@ (8006cbc <HAL_MPU_Enable+0x3c>)
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c9c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006c9e:	f3bf 8f4f 	dsb	sy
}
 8006ca2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ca4:	f3bf 8f6f 	isb	sy
}
 8006ca8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	e000ed90 	.word	0xe000ed90
 8006cbc:	e000ed00 	.word	0xe000ed00

08006cc0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	785a      	ldrb	r2, [r3, #1]
 8006ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d3c <HAL_MPU_ConfigRegion+0x7c>)
 8006cce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d3c <HAL_MPU_ConfigRegion+0x7c>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	@ (8006d3c <HAL_MPU_ConfigRegion+0x7c>)
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006cdc:	4a17      	ldr	r2, [pc, #92]	@ (8006d3c <HAL_MPU_ConfigRegion+0x7c>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7b1b      	ldrb	r3, [r3, #12]
 8006ce8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	7adb      	ldrb	r3, [r3, #11]
 8006cee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7a9b      	ldrb	r3, [r3, #10]
 8006cf6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7b5b      	ldrb	r3, [r3, #13]
 8006cfe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7b9b      	ldrb	r3, [r3, #14]
 8006d06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	7bdb      	ldrb	r3, [r3, #15]
 8006d0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7a5b      	ldrb	r3, [r3, #9]
 8006d16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7a1b      	ldrb	r3, [r3, #8]
 8006d1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d28:	4a04      	ldr	r2, [pc, #16]	@ (8006d3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d2c:	6113      	str	r3, [r2, #16]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000ed90 	.word	0xe000ed90

08006d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006d48:	f7ff fe66 	bl	8006a18 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e316      	b.n	8007386 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a66      	ldr	r2, [pc, #408]	@ (8006ef8 <HAL_DMA_Init+0x1b8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d04a      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a65      	ldr	r2, [pc, #404]	@ (8006efc <HAL_DMA_Init+0x1bc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d045      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a63      	ldr	r2, [pc, #396]	@ (8006f00 <HAL_DMA_Init+0x1c0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d040      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a62      	ldr	r2, [pc, #392]	@ (8006f04 <HAL_DMA_Init+0x1c4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d03b      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a60      	ldr	r2, [pc, #384]	@ (8006f08 <HAL_DMA_Init+0x1c8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d036      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a5f      	ldr	r2, [pc, #380]	@ (8006f0c <HAL_DMA_Init+0x1cc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d031      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a5d      	ldr	r2, [pc, #372]	@ (8006f10 <HAL_DMA_Init+0x1d0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02c      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a5c      	ldr	r2, [pc, #368]	@ (8006f14 <HAL_DMA_Init+0x1d4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d027      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a5a      	ldr	r2, [pc, #360]	@ (8006f18 <HAL_DMA_Init+0x1d8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d022      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a59      	ldr	r2, [pc, #356]	@ (8006f1c <HAL_DMA_Init+0x1dc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d01d      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a57      	ldr	r2, [pc, #348]	@ (8006f20 <HAL_DMA_Init+0x1e0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d018      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a56      	ldr	r2, [pc, #344]	@ (8006f24 <HAL_DMA_Init+0x1e4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d013      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a54      	ldr	r2, [pc, #336]	@ (8006f28 <HAL_DMA_Init+0x1e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00e      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a53      	ldr	r2, [pc, #332]	@ (8006f2c <HAL_DMA_Init+0x1ec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a51      	ldr	r2, [pc, #324]	@ (8006f30 <HAL_DMA_Init+0x1f0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_DMA_Init+0xb8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a50      	ldr	r2, [pc, #320]	@ (8006f34 <HAL_DMA_Init+0x1f4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d101      	bne.n	8006dfc <HAL_DMA_Init+0xbc>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <HAL_DMA_Init+0xbe>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 813b 	beq.w	800707a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a37      	ldr	r2, [pc, #220]	@ (8006ef8 <HAL_DMA_Init+0x1b8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d04a      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a36      	ldr	r2, [pc, #216]	@ (8006efc <HAL_DMA_Init+0x1bc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d045      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a34      	ldr	r2, [pc, #208]	@ (8006f00 <HAL_DMA_Init+0x1c0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d040      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a33      	ldr	r2, [pc, #204]	@ (8006f04 <HAL_DMA_Init+0x1c4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d03b      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a31      	ldr	r2, [pc, #196]	@ (8006f08 <HAL_DMA_Init+0x1c8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d036      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a30      	ldr	r2, [pc, #192]	@ (8006f0c <HAL_DMA_Init+0x1cc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d031      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2e      	ldr	r2, [pc, #184]	@ (8006f10 <HAL_DMA_Init+0x1d0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d02c      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f14 <HAL_DMA_Init+0x1d4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d027      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a2b      	ldr	r2, [pc, #172]	@ (8006f18 <HAL_DMA_Init+0x1d8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d022      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a2a      	ldr	r2, [pc, #168]	@ (8006f1c <HAL_DMA_Init+0x1dc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01d      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a28      	ldr	r2, [pc, #160]	@ (8006f20 <HAL_DMA_Init+0x1e0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d018      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a27      	ldr	r2, [pc, #156]	@ (8006f24 <HAL_DMA_Init+0x1e4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a25      	ldr	r2, [pc, #148]	@ (8006f28 <HAL_DMA_Init+0x1e8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00e      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a24      	ldr	r2, [pc, #144]	@ (8006f2c <HAL_DMA_Init+0x1ec>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d009      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a22      	ldr	r2, [pc, #136]	@ (8006f30 <HAL_DMA_Init+0x1f0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_DMA_Init+0x174>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a21      	ldr	r2, [pc, #132]	@ (8006f34 <HAL_DMA_Init+0x1f4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <HAL_DMA_Init+0x186>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e007      	b.n	8006ed6 <HAL_DMA_Init+0x196>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ed6:	e02f      	b.n	8006f38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ed8:	f7ff fd9e 	bl	8006a18 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d928      	bls.n	8006f38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2203      	movs	r2, #3
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e246      	b.n	8007386 <HAL_DMA_Init+0x646>
 8006ef8:	40020010 	.word	0x40020010
 8006efc:	40020028 	.word	0x40020028
 8006f00:	40020040 	.word	0x40020040
 8006f04:	40020058 	.word	0x40020058
 8006f08:	40020070 	.word	0x40020070
 8006f0c:	40020088 	.word	0x40020088
 8006f10:	400200a0 	.word	0x400200a0
 8006f14:	400200b8 	.word	0x400200b8
 8006f18:	40020410 	.word	0x40020410
 8006f1c:	40020428 	.word	0x40020428
 8006f20:	40020440 	.word	0x40020440
 8006f24:	40020458 	.word	0x40020458
 8006f28:	40020470 	.word	0x40020470
 8006f2c:	40020488 	.word	0x40020488
 8006f30:	400204a0 	.word	0x400204a0
 8006f34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1c8      	bne.n	8006ed8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4b83      	ldr	r3, [pc, #524]	@ (8007160 <HAL_DMA_Init+0x420>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d107      	bne.n	8006f9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	4313      	orrs	r3, r2
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006f9c:	4b71      	ldr	r3, [pc, #452]	@ (8007164 <HAL_DMA_Init+0x424>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b71      	ldr	r3, [pc, #452]	@ (8007168 <HAL_DMA_Init+0x428>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fa8:	d328      	bcc.n	8006ffc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b28      	cmp	r3, #40	@ 0x28
 8006fb0:	d903      	bls.n	8006fba <HAL_DMA_Init+0x27a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fb8:	d917      	bls.n	8006fea <HAL_DMA_Init+0x2aa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fc0:	d903      	bls.n	8006fca <HAL_DMA_Init+0x28a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b42      	cmp	r3, #66	@ 0x42
 8006fc8:	d90f      	bls.n	8006fea <HAL_DMA_Init+0x2aa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b46      	cmp	r3, #70	@ 0x46
 8006fd0:	d903      	bls.n	8006fda <HAL_DMA_Init+0x29a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b48      	cmp	r3, #72	@ 0x48
 8006fd8:	d907      	bls.n	8006fea <HAL_DMA_Init+0x2aa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b4e      	cmp	r3, #78	@ 0x4e
 8006fe0:	d905      	bls.n	8006fee <HAL_DMA_Init+0x2ae>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b52      	cmp	r3, #82	@ 0x52
 8006fe8:	d801      	bhi.n	8006fee <HAL_DMA_Init+0x2ae>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_DMA_Init+0x2b0>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0307 	bic.w	r3, r3, #7
 8007012:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	2b04      	cmp	r3, #4
 8007024:	d117      	bne.n	8007056 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00e      	beq.n	8007056 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f002 fcf5 	bl	8009a28 <DMA_CheckFifoParam>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2240      	movs	r2, #64	@ 0x40
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e197      	b.n	8007386 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f002 fc30 	bl	80098c4 <DMA_CalcBaseAndBitshift>
 8007064:	4603      	mov	r3, r0
 8007066:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	223f      	movs	r2, #63	@ 0x3f
 8007072:	409a      	lsls	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]
 8007078:	e0cd      	b.n	8007216 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3b      	ldr	r2, [pc, #236]	@ (800716c <HAL_DMA_Init+0x42c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d022      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a39      	ldr	r2, [pc, #228]	@ (8007170 <HAL_DMA_Init+0x430>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a38      	ldr	r2, [pc, #224]	@ (8007174 <HAL_DMA_Init+0x434>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d018      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a36      	ldr	r2, [pc, #216]	@ (8007178 <HAL_DMA_Init+0x438>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a35      	ldr	r2, [pc, #212]	@ (800717c <HAL_DMA_Init+0x43c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a33      	ldr	r2, [pc, #204]	@ (8007180 <HAL_DMA_Init+0x440>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a32      	ldr	r2, [pc, #200]	@ (8007184 <HAL_DMA_Init+0x444>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_DMA_Init+0x38a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a30      	ldr	r2, [pc, #192]	@ (8007188 <HAL_DMA_Init+0x448>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d101      	bne.n	80070ce <HAL_DMA_Init+0x38e>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <HAL_DMA_Init+0x390>
 80070ce:	2300      	movs	r3, #0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8097 	beq.w	8007204 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a24      	ldr	r2, [pc, #144]	@ (800716c <HAL_DMA_Init+0x42c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d021      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a22      	ldr	r2, [pc, #136]	@ (8007170 <HAL_DMA_Init+0x430>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01c      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a21      	ldr	r2, [pc, #132]	@ (8007174 <HAL_DMA_Init+0x434>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d017      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007178 <HAL_DMA_Init+0x438>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d012      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1e      	ldr	r2, [pc, #120]	@ (800717c <HAL_DMA_Init+0x43c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00d      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <HAL_DMA_Init+0x440>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d008      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1b      	ldr	r2, [pc, #108]	@ (8007184 <HAL_DMA_Init+0x444>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <HAL_DMA_Init+0x3e4>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <HAL_DMA_Init+0x448>)
 8007122:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4b13      	ldr	r3, [pc, #76]	@ (800718c <HAL_DMA_Init+0x44c>)
 8007140:	4013      	ands	r3, r2
 8007142:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b40      	cmp	r3, #64	@ 0x40
 800714a:	d021      	beq.n	8007190 <HAL_DMA_Init+0x450>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b80      	cmp	r3, #128	@ 0x80
 8007152:	d102      	bne.n	800715a <HAL_DMA_Init+0x41a>
 8007154:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007158:	e01b      	b.n	8007192 <HAL_DMA_Init+0x452>
 800715a:	2300      	movs	r3, #0
 800715c:	e019      	b.n	8007192 <HAL_DMA_Init+0x452>
 800715e:	bf00      	nop
 8007160:	fe10803f 	.word	0xfe10803f
 8007164:	5c001000 	.word	0x5c001000
 8007168:	ffff0000 	.word	0xffff0000
 800716c:	58025408 	.word	0x58025408
 8007170:	5802541c 	.word	0x5802541c
 8007174:	58025430 	.word	0x58025430
 8007178:	58025444 	.word	0x58025444
 800717c:	58025458 	.word	0x58025458
 8007180:	5802546c 	.word	0x5802546c
 8007184:	58025480 	.word	0x58025480
 8007188:	58025494 	.word	0x58025494
 800718c:	fffe000f 	.word	0xfffe000f
 8007190:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68d2      	ldr	r2, [r2, #12]
 8007196:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007390 <HAL_DMA_Init+0x650>)
 80071d8:	4413      	add	r3, r2
 80071da:	4a6e      	ldr	r2, [pc, #440]	@ (8007394 <HAL_DMA_Init+0x654>)
 80071dc:	fba2 2303 	umull	r2, r3, r2, r3
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	009a      	lsls	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f002 fb6b 	bl	80098c4 <DMA_CalcBaseAndBitshift>
 80071ee:	4603      	mov	r3, r0
 80071f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2201      	movs	r2, #1
 80071fc:	409a      	lsls	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	e008      	b.n	8007216 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2240      	movs	r2, #64	@ 0x40
 8007208:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2203      	movs	r2, #3
 800720e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e0b7      	b.n	8007386 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5f      	ldr	r2, [pc, #380]	@ (8007398 <HAL_DMA_Init+0x658>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d072      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5d      	ldr	r2, [pc, #372]	@ (800739c <HAL_DMA_Init+0x65c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d06d      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a5c      	ldr	r2, [pc, #368]	@ (80073a0 <HAL_DMA_Init+0x660>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d068      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a5a      	ldr	r2, [pc, #360]	@ (80073a4 <HAL_DMA_Init+0x664>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d063      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a59      	ldr	r2, [pc, #356]	@ (80073a8 <HAL_DMA_Init+0x668>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d05e      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a57      	ldr	r2, [pc, #348]	@ (80073ac <HAL_DMA_Init+0x66c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d059      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a56      	ldr	r2, [pc, #344]	@ (80073b0 <HAL_DMA_Init+0x670>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d054      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a54      	ldr	r2, [pc, #336]	@ (80073b4 <HAL_DMA_Init+0x674>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d04f      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a53      	ldr	r2, [pc, #332]	@ (80073b8 <HAL_DMA_Init+0x678>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d04a      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a51      	ldr	r2, [pc, #324]	@ (80073bc <HAL_DMA_Init+0x67c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d045      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a50      	ldr	r2, [pc, #320]	@ (80073c0 <HAL_DMA_Init+0x680>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d040      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a4e      	ldr	r2, [pc, #312]	@ (80073c4 <HAL_DMA_Init+0x684>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d03b      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a4d      	ldr	r2, [pc, #308]	@ (80073c8 <HAL_DMA_Init+0x688>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d036      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a4b      	ldr	r2, [pc, #300]	@ (80073cc <HAL_DMA_Init+0x68c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d031      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a4a      	ldr	r2, [pc, #296]	@ (80073d0 <HAL_DMA_Init+0x690>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d02c      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a48      	ldr	r2, [pc, #288]	@ (80073d4 <HAL_DMA_Init+0x694>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d027      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a47      	ldr	r2, [pc, #284]	@ (80073d8 <HAL_DMA_Init+0x698>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a45      	ldr	r2, [pc, #276]	@ (80073dc <HAL_DMA_Init+0x69c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01d      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a44      	ldr	r2, [pc, #272]	@ (80073e0 <HAL_DMA_Init+0x6a0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d018      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a42      	ldr	r2, [pc, #264]	@ (80073e4 <HAL_DMA_Init+0x6a4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a41      	ldr	r2, [pc, #260]	@ (80073e8 <HAL_DMA_Init+0x6a8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00e      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <HAL_DMA_Init+0x6ac>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d009      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3e      	ldr	r2, [pc, #248]	@ (80073f0 <HAL_DMA_Init+0x6b0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_DMA_Init+0x5c6>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a3c      	ldr	r2, [pc, #240]	@ (80073f4 <HAL_DMA_Init+0x6b4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d101      	bne.n	800730a <HAL_DMA_Init+0x5ca>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <HAL_DMA_Init+0x5cc>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d032      	beq.n	8007376 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f002 fc05 	bl	8009b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b80      	cmp	r3, #128	@ 0x80
 800731c:	d102      	bne.n	8007324 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007338:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d010      	beq.n	8007364 <HAL_DMA_Init+0x624>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b08      	cmp	r3, #8
 8007348:	d80c      	bhi.n	8007364 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 fc82 	bl	8009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	e008      	b.n	8007376 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	a7fdabf8 	.word	0xa7fdabf8
 8007394:	cccccccd 	.word	0xcccccccd
 8007398:	40020010 	.word	0x40020010
 800739c:	40020028 	.word	0x40020028
 80073a0:	40020040 	.word	0x40020040
 80073a4:	40020058 	.word	0x40020058
 80073a8:	40020070 	.word	0x40020070
 80073ac:	40020088 	.word	0x40020088
 80073b0:	400200a0 	.word	0x400200a0
 80073b4:	400200b8 	.word	0x400200b8
 80073b8:	40020410 	.word	0x40020410
 80073bc:	40020428 	.word	0x40020428
 80073c0:	40020440 	.word	0x40020440
 80073c4:	40020458 	.word	0x40020458
 80073c8:	40020470 	.word	0x40020470
 80073cc:	40020488 	.word	0x40020488
 80073d0:	400204a0 	.word	0x400204a0
 80073d4:	400204b8 	.word	0x400204b8
 80073d8:	58025408 	.word	0x58025408
 80073dc:	5802541c 	.word	0x5802541c
 80073e0:	58025430 	.word	0x58025430
 80073e4:	58025444 	.word	0x58025444
 80073e8:	58025458 	.word	0x58025458
 80073ec:	5802546c 	.word	0x5802546c
 80073f0:	58025480 	.word	0x58025480
 80073f4:	58025494 	.word	0x58025494

080073f8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e1a8      	b.n	800775c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a82      	ldr	r2, [pc, #520]	@ (8007618 <HAL_DMA_DeInit+0x220>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d04a      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a80      	ldr	r2, [pc, #512]	@ (800761c <HAL_DMA_DeInit+0x224>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d045      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a7f      	ldr	r2, [pc, #508]	@ (8007620 <HAL_DMA_DeInit+0x228>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d040      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a7d      	ldr	r2, [pc, #500]	@ (8007624 <HAL_DMA_DeInit+0x22c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d03b      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7c      	ldr	r2, [pc, #496]	@ (8007628 <HAL_DMA_DeInit+0x230>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d036      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7a      	ldr	r2, [pc, #488]	@ (800762c <HAL_DMA_DeInit+0x234>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d031      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a79      	ldr	r2, [pc, #484]	@ (8007630 <HAL_DMA_DeInit+0x238>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d02c      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a77      	ldr	r2, [pc, #476]	@ (8007634 <HAL_DMA_DeInit+0x23c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a76      	ldr	r2, [pc, #472]	@ (8007638 <HAL_DMA_DeInit+0x240>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d022      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a74      	ldr	r2, [pc, #464]	@ (800763c <HAL_DMA_DeInit+0x244>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a73      	ldr	r2, [pc, #460]	@ (8007640 <HAL_DMA_DeInit+0x248>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a71      	ldr	r2, [pc, #452]	@ (8007644 <HAL_DMA_DeInit+0x24c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a70      	ldr	r2, [pc, #448]	@ (8007648 <HAL_DMA_DeInit+0x250>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6e      	ldr	r2, [pc, #440]	@ (800764c <HAL_DMA_DeInit+0x254>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6d      	ldr	r2, [pc, #436]	@ (8007650 <HAL_DMA_DeInit+0x258>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_DMA_DeInit+0xb2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6b      	ldr	r2, [pc, #428]	@ (8007654 <HAL_DMA_DeInit+0x25c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d108      	bne.n	80074bc <HAL_DMA_DeInit+0xc4>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e007      	b.n	80074cc <HAL_DMA_DeInit+0xd4>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a51      	ldr	r2, [pc, #324]	@ (8007618 <HAL_DMA_DeInit+0x220>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d04a      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a50      	ldr	r2, [pc, #320]	@ (800761c <HAL_DMA_DeInit+0x224>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d045      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a4e      	ldr	r2, [pc, #312]	@ (8007620 <HAL_DMA_DeInit+0x228>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d040      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a4d      	ldr	r2, [pc, #308]	@ (8007624 <HAL_DMA_DeInit+0x22c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d03b      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007628 <HAL_DMA_DeInit+0x230>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d036      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a4a      	ldr	r2, [pc, #296]	@ (800762c <HAL_DMA_DeInit+0x234>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d031      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a48      	ldr	r2, [pc, #288]	@ (8007630 <HAL_DMA_DeInit+0x238>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d02c      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a47      	ldr	r2, [pc, #284]	@ (8007634 <HAL_DMA_DeInit+0x23c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d027      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a45      	ldr	r2, [pc, #276]	@ (8007638 <HAL_DMA_DeInit+0x240>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d022      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a44      	ldr	r2, [pc, #272]	@ (800763c <HAL_DMA_DeInit+0x244>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d01d      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a42      	ldr	r2, [pc, #264]	@ (8007640 <HAL_DMA_DeInit+0x248>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d018      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a41      	ldr	r2, [pc, #260]	@ (8007644 <HAL_DMA_DeInit+0x24c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d013      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a3f      	ldr	r2, [pc, #252]	@ (8007648 <HAL_DMA_DeInit+0x250>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00e      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a3e      	ldr	r2, [pc, #248]	@ (800764c <HAL_DMA_DeInit+0x254>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d009      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a3c      	ldr	r2, [pc, #240]	@ (8007650 <HAL_DMA_DeInit+0x258>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d004      	beq.n	800756c <HAL_DMA_DeInit+0x174>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a3b      	ldr	r2, [pc, #236]	@ (8007654 <HAL_DMA_DeInit+0x25c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d101      	bne.n	8007570 <HAL_DMA_DeInit+0x178>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <HAL_DMA_DeInit+0x17a>
 8007570:	2300      	movs	r3, #0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d025      	beq.n	80075c2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2221      	movs	r2, #33	@ 0x21
 80075a4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f002 f98c 	bl	80098c4 <DMA_CalcBaseAndBitshift>
 80075ac:	4603      	mov	r3, r0
 80075ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	223f      	movs	r2, #63	@ 0x3f
 80075ba:	409a      	lsls	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	e081      	b.n	80076c6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a24      	ldr	r2, [pc, #144]	@ (8007658 <HAL_DMA_DeInit+0x260>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d022      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a22      	ldr	r2, [pc, #136]	@ (800765c <HAL_DMA_DeInit+0x264>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d01d      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a21      	ldr	r2, [pc, #132]	@ (8007660 <HAL_DMA_DeInit+0x268>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d018      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007664 <HAL_DMA_DeInit+0x26c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <HAL_DMA_DeInit+0x270>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1c      	ldr	r2, [pc, #112]	@ (800766c <HAL_DMA_DeInit+0x274>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1b      	ldr	r2, [pc, #108]	@ (8007670 <HAL_DMA_DeInit+0x278>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_DMA_DeInit+0x21a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a19      	ldr	r2, [pc, #100]	@ (8007674 <HAL_DMA_DeInit+0x27c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d132      	bne.n	8007678 <HAL_DMA_DeInit+0x280>
 8007612:	2301      	movs	r3, #1
 8007614:	e031      	b.n	800767a <HAL_DMA_DeInit+0x282>
 8007616:	bf00      	nop
 8007618:	40020010 	.word	0x40020010
 800761c:	40020028 	.word	0x40020028
 8007620:	40020040 	.word	0x40020040
 8007624:	40020058 	.word	0x40020058
 8007628:	40020070 	.word	0x40020070
 800762c:	40020088 	.word	0x40020088
 8007630:	400200a0 	.word	0x400200a0
 8007634:	400200b8 	.word	0x400200b8
 8007638:	40020410 	.word	0x40020410
 800763c:	40020428 	.word	0x40020428
 8007640:	40020440 	.word	0x40020440
 8007644:	40020458 	.word	0x40020458
 8007648:	40020470 	.word	0x40020470
 800764c:	40020488 	.word	0x40020488
 8007650:	400204a0 	.word	0x400204a0
 8007654:	400204b8 	.word	0x400204b8
 8007658:	58025408 	.word	0x58025408
 800765c:	5802541c 	.word	0x5802541c
 8007660:	58025430 	.word	0x58025430
 8007664:	58025444 	.word	0x58025444
 8007668:	58025458 	.word	0x58025458
 800766c:	5802546c 	.word	0x5802546c
 8007670:	58025480 	.word	0x58025480
 8007674:	58025494 	.word	0x58025494
 8007678:	2300      	movs	r3, #0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f002 f90c 	bl	80098c4 <DMA_CalcBaseAndBitshift>
 80076ac:	4603      	mov	r3, r0
 80076ae:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	e001      	b.n	80076c6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e04a      	b.n	800775c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f002 fa2a 	bl	8009b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80076e4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00f      	beq.n	800770e <HAL_DMA_DeInit+0x316>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d80b      	bhi.n	800770e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f002 faac 	bl	8009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800770c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e226      	b.n	8007bce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_DMA_Start_IT+0x2a>
 800778a:	2302      	movs	r3, #2
 800778c:	e21f      	b.n	8007bce <HAL_DMA_Start_IT+0x46a>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b01      	cmp	r3, #1
 80077a0:	f040 820a 	bne.w	8007bb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a68      	ldr	r2, [pc, #416]	@ (8007958 <HAL_DMA_Start_IT+0x1f4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d04a      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a66      	ldr	r2, [pc, #408]	@ (800795c <HAL_DMA_Start_IT+0x1f8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d045      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a65      	ldr	r2, [pc, #404]	@ (8007960 <HAL_DMA_Start_IT+0x1fc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d040      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a63      	ldr	r2, [pc, #396]	@ (8007964 <HAL_DMA_Start_IT+0x200>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d03b      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a62      	ldr	r2, [pc, #392]	@ (8007968 <HAL_DMA_Start_IT+0x204>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d036      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a60      	ldr	r2, [pc, #384]	@ (800796c <HAL_DMA_Start_IT+0x208>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d031      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5f      	ldr	r2, [pc, #380]	@ (8007970 <HAL_DMA_Start_IT+0x20c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d02c      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a5d      	ldr	r2, [pc, #372]	@ (8007974 <HAL_DMA_Start_IT+0x210>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d027      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a5c      	ldr	r2, [pc, #368]	@ (8007978 <HAL_DMA_Start_IT+0x214>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d022      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5a      	ldr	r2, [pc, #360]	@ (800797c <HAL_DMA_Start_IT+0x218>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01d      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a59      	ldr	r2, [pc, #356]	@ (8007980 <HAL_DMA_Start_IT+0x21c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d018      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a57      	ldr	r2, [pc, #348]	@ (8007984 <HAL_DMA_Start_IT+0x220>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a56      	ldr	r2, [pc, #344]	@ (8007988 <HAL_DMA_Start_IT+0x224>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00e      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a54      	ldr	r2, [pc, #336]	@ (800798c <HAL_DMA_Start_IT+0x228>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d009      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a53      	ldr	r2, [pc, #332]	@ (8007990 <HAL_DMA_Start_IT+0x22c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d004      	beq.n	8007852 <HAL_DMA_Start_IT+0xee>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a51      	ldr	r2, [pc, #324]	@ (8007994 <HAL_DMA_Start_IT+0x230>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d108      	bne.n	8007864 <HAL_DMA_Start_IT+0x100>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e007      	b.n	8007874 <HAL_DMA_Start_IT+0x110>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f001 fe76 	bl	800956c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a34      	ldr	r2, [pc, #208]	@ (8007958 <HAL_DMA_Start_IT+0x1f4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d04a      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a33      	ldr	r2, [pc, #204]	@ (800795c <HAL_DMA_Start_IT+0x1f8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d045      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a31      	ldr	r2, [pc, #196]	@ (8007960 <HAL_DMA_Start_IT+0x1fc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d040      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a30      	ldr	r2, [pc, #192]	@ (8007964 <HAL_DMA_Start_IT+0x200>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d03b      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007968 <HAL_DMA_Start_IT+0x204>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d036      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2d      	ldr	r2, [pc, #180]	@ (800796c <HAL_DMA_Start_IT+0x208>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d031      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007970 <HAL_DMA_Start_IT+0x20c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d02c      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007974 <HAL_DMA_Start_IT+0x210>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d027      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a28      	ldr	r2, [pc, #160]	@ (8007978 <HAL_DMA_Start_IT+0x214>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d022      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a27      	ldr	r2, [pc, #156]	@ (800797c <HAL_DMA_Start_IT+0x218>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d01d      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a25      	ldr	r2, [pc, #148]	@ (8007980 <HAL_DMA_Start_IT+0x21c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d018      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a24      	ldr	r2, [pc, #144]	@ (8007984 <HAL_DMA_Start_IT+0x220>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a22      	ldr	r2, [pc, #136]	@ (8007988 <HAL_DMA_Start_IT+0x224>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00e      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a21      	ldr	r2, [pc, #132]	@ (800798c <HAL_DMA_Start_IT+0x228>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d009      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1f      	ldr	r2, [pc, #124]	@ (8007990 <HAL_DMA_Start_IT+0x22c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d004      	beq.n	8007920 <HAL_DMA_Start_IT+0x1bc>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1e      	ldr	r2, [pc, #120]	@ (8007994 <HAL_DMA_Start_IT+0x230>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d101      	bne.n	8007924 <HAL_DMA_Start_IT+0x1c0>
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <HAL_DMA_Start_IT+0x1c2>
 8007924:	2300      	movs	r3, #0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d036      	beq.n	8007998 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f023 021e 	bic.w	r2, r3, #30
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0216 	orr.w	r2, r2, #22
 800793c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03e      	beq.n	80079c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0208 	orr.w	r2, r2, #8
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e035      	b.n	80079c4 <HAL_DMA_Start_IT+0x260>
 8007958:	40020010 	.word	0x40020010
 800795c:	40020028 	.word	0x40020028
 8007960:	40020040 	.word	0x40020040
 8007964:	40020058 	.word	0x40020058
 8007968:	40020070 	.word	0x40020070
 800796c:	40020088 	.word	0x40020088
 8007970:	400200a0 	.word	0x400200a0
 8007974:	400200b8 	.word	0x400200b8
 8007978:	40020410 	.word	0x40020410
 800797c:	40020428 	.word	0x40020428
 8007980:	40020440 	.word	0x40020440
 8007984:	40020458 	.word	0x40020458
 8007988:	40020470 	.word	0x40020470
 800798c:	40020488 	.word	0x40020488
 8007990:	400204a0 	.word	0x400204a0
 8007994:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f023 020e 	bic.w	r2, r3, #14
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 020a 	orr.w	r2, r2, #10
 80079aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0204 	orr.w	r2, r2, #4
 80079c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a83      	ldr	r2, [pc, #524]	@ (8007bd8 <HAL_DMA_Start_IT+0x474>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d072      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a82      	ldr	r2, [pc, #520]	@ (8007bdc <HAL_DMA_Start_IT+0x478>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d06d      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a80      	ldr	r2, [pc, #512]	@ (8007be0 <HAL_DMA_Start_IT+0x47c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d068      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a7f      	ldr	r2, [pc, #508]	@ (8007be4 <HAL_DMA_Start_IT+0x480>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d063      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a7d      	ldr	r2, [pc, #500]	@ (8007be8 <HAL_DMA_Start_IT+0x484>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d05e      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a7c      	ldr	r2, [pc, #496]	@ (8007bec <HAL_DMA_Start_IT+0x488>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d059      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a7a      	ldr	r2, [pc, #488]	@ (8007bf0 <HAL_DMA_Start_IT+0x48c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d054      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a79      	ldr	r2, [pc, #484]	@ (8007bf4 <HAL_DMA_Start_IT+0x490>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d04f      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a77      	ldr	r2, [pc, #476]	@ (8007bf8 <HAL_DMA_Start_IT+0x494>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d04a      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a76      	ldr	r2, [pc, #472]	@ (8007bfc <HAL_DMA_Start_IT+0x498>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d045      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a74      	ldr	r2, [pc, #464]	@ (8007c00 <HAL_DMA_Start_IT+0x49c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d040      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a73      	ldr	r2, [pc, #460]	@ (8007c04 <HAL_DMA_Start_IT+0x4a0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d03b      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a71      	ldr	r2, [pc, #452]	@ (8007c08 <HAL_DMA_Start_IT+0x4a4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d036      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a70      	ldr	r2, [pc, #448]	@ (8007c0c <HAL_DMA_Start_IT+0x4a8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d031      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a6e      	ldr	r2, [pc, #440]	@ (8007c10 <HAL_DMA_Start_IT+0x4ac>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d02c      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8007c14 <HAL_DMA_Start_IT+0x4b0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d027      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a6b      	ldr	r2, [pc, #428]	@ (8007c18 <HAL_DMA_Start_IT+0x4b4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6a      	ldr	r2, [pc, #424]	@ (8007c1c <HAL_DMA_Start_IT+0x4b8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d01d      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a68      	ldr	r2, [pc, #416]	@ (8007c20 <HAL_DMA_Start_IT+0x4bc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a67      	ldr	r2, [pc, #412]	@ (8007c24 <HAL_DMA_Start_IT+0x4c0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a65      	ldr	r2, [pc, #404]	@ (8007c28 <HAL_DMA_Start_IT+0x4c4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a64      	ldr	r2, [pc, #400]	@ (8007c2c <HAL_DMA_Start_IT+0x4c8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a62      	ldr	r2, [pc, #392]	@ (8007c30 <HAL_DMA_Start_IT+0x4cc>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_DMA_Start_IT+0x350>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a61      	ldr	r2, [pc, #388]	@ (8007c34 <HAL_DMA_Start_IT+0x4d0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d101      	bne.n	8007ab8 <HAL_DMA_Start_IT+0x354>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <HAL_DMA_Start_IT+0x356>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01a      	beq.n	8007af4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ada:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007af2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a37      	ldr	r2, [pc, #220]	@ (8007bd8 <HAL_DMA_Start_IT+0x474>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d04a      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a36      	ldr	r2, [pc, #216]	@ (8007bdc <HAL_DMA_Start_IT+0x478>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d045      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a34      	ldr	r2, [pc, #208]	@ (8007be0 <HAL_DMA_Start_IT+0x47c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d040      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a33      	ldr	r2, [pc, #204]	@ (8007be4 <HAL_DMA_Start_IT+0x480>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d03b      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a31      	ldr	r2, [pc, #196]	@ (8007be8 <HAL_DMA_Start_IT+0x484>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d036      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a30      	ldr	r2, [pc, #192]	@ (8007bec <HAL_DMA_Start_IT+0x488>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d031      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a2e      	ldr	r2, [pc, #184]	@ (8007bf0 <HAL_DMA_Start_IT+0x48c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d02c      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf4 <HAL_DMA_Start_IT+0x490>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d027      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf8 <HAL_DMA_Start_IT+0x494>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d022      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a2a      	ldr	r2, [pc, #168]	@ (8007bfc <HAL_DMA_Start_IT+0x498>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d01d      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a28      	ldr	r2, [pc, #160]	@ (8007c00 <HAL_DMA_Start_IT+0x49c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d018      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a27      	ldr	r2, [pc, #156]	@ (8007c04 <HAL_DMA_Start_IT+0x4a0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d013      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a25      	ldr	r2, [pc, #148]	@ (8007c08 <HAL_DMA_Start_IT+0x4a4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00e      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a24      	ldr	r2, [pc, #144]	@ (8007c0c <HAL_DMA_Start_IT+0x4a8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a22      	ldr	r2, [pc, #136]	@ (8007c10 <HAL_DMA_Start_IT+0x4ac>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_DMA_Start_IT+0x430>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a21      	ldr	r2, [pc, #132]	@ (8007c14 <HAL_DMA_Start_IT+0x4b0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d108      	bne.n	8007ba6 <HAL_DMA_Start_IT+0x442>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e012      	b.n	8007bcc <HAL_DMA_Start_IT+0x468>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e009      	b.n	8007bcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40020010 	.word	0x40020010
 8007bdc:	40020028 	.word	0x40020028
 8007be0:	40020040 	.word	0x40020040
 8007be4:	40020058 	.word	0x40020058
 8007be8:	40020070 	.word	0x40020070
 8007bec:	40020088 	.word	0x40020088
 8007bf0:	400200a0 	.word	0x400200a0
 8007bf4:	400200b8 	.word	0x400200b8
 8007bf8:	40020410 	.word	0x40020410
 8007bfc:	40020428 	.word	0x40020428
 8007c00:	40020440 	.word	0x40020440
 8007c04:	40020458 	.word	0x40020458
 8007c08:	40020470 	.word	0x40020470
 8007c0c:	40020488 	.word	0x40020488
 8007c10:	400204a0 	.word	0x400204a0
 8007c14:	400204b8 	.word	0x400204b8
 8007c18:	58025408 	.word	0x58025408
 8007c1c:	5802541c 	.word	0x5802541c
 8007c20:	58025430 	.word	0x58025430
 8007c24:	58025444 	.word	0x58025444
 8007c28:	58025458 	.word	0x58025458
 8007c2c:	5802546c 	.word	0x5802546c
 8007c30:	58025480 	.word	0x58025480
 8007c34:	58025494 	.word	0x58025494

08007c38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007c40:	f7fe feea 	bl	8006a18 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e2dc      	b.n	800820a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d008      	beq.n	8007c6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2280      	movs	r2, #128	@ 0x80
 8007c60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e2cd      	b.n	800820a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a76      	ldr	r2, [pc, #472]	@ (8007e4c <HAL_DMA_Abort+0x214>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d04a      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a74      	ldr	r2, [pc, #464]	@ (8007e50 <HAL_DMA_Abort+0x218>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d045      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a73      	ldr	r2, [pc, #460]	@ (8007e54 <HAL_DMA_Abort+0x21c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d040      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a71      	ldr	r2, [pc, #452]	@ (8007e58 <HAL_DMA_Abort+0x220>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d03b      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a70      	ldr	r2, [pc, #448]	@ (8007e5c <HAL_DMA_Abort+0x224>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d036      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a6e      	ldr	r2, [pc, #440]	@ (8007e60 <HAL_DMA_Abort+0x228>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d031      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a6d      	ldr	r2, [pc, #436]	@ (8007e64 <HAL_DMA_Abort+0x22c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d02c      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8007e68 <HAL_DMA_Abort+0x230>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d027      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a6a      	ldr	r2, [pc, #424]	@ (8007e6c <HAL_DMA_Abort+0x234>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d022      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a68      	ldr	r2, [pc, #416]	@ (8007e70 <HAL_DMA_Abort+0x238>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01d      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a67      	ldr	r2, [pc, #412]	@ (8007e74 <HAL_DMA_Abort+0x23c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d018      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a65      	ldr	r2, [pc, #404]	@ (8007e78 <HAL_DMA_Abort+0x240>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a64      	ldr	r2, [pc, #400]	@ (8007e7c <HAL_DMA_Abort+0x244>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a62      	ldr	r2, [pc, #392]	@ (8007e80 <HAL_DMA_Abort+0x248>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a61      	ldr	r2, [pc, #388]	@ (8007e84 <HAL_DMA_Abort+0x24c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_DMA_Abort+0xd6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a5f      	ldr	r2, [pc, #380]	@ (8007e88 <HAL_DMA_Abort+0x250>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d101      	bne.n	8007d12 <HAL_DMA_Abort+0xda>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <HAL_DMA_Abort+0xdc>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d013      	beq.n	8007d40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 021e 	bic.w	r2, r2, #30
 8007d26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e00a      	b.n	8007d56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 020e 	bic.w	r2, r2, #14
 8007d4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a3c      	ldr	r2, [pc, #240]	@ (8007e4c <HAL_DMA_Abort+0x214>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d072      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a3a      	ldr	r2, [pc, #232]	@ (8007e50 <HAL_DMA_Abort+0x218>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d06d      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a39      	ldr	r2, [pc, #228]	@ (8007e54 <HAL_DMA_Abort+0x21c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d068      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a37      	ldr	r2, [pc, #220]	@ (8007e58 <HAL_DMA_Abort+0x220>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d063      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a36      	ldr	r2, [pc, #216]	@ (8007e5c <HAL_DMA_Abort+0x224>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d05e      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a34      	ldr	r2, [pc, #208]	@ (8007e60 <HAL_DMA_Abort+0x228>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d059      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a33      	ldr	r2, [pc, #204]	@ (8007e64 <HAL_DMA_Abort+0x22c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d054      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a31      	ldr	r2, [pc, #196]	@ (8007e68 <HAL_DMA_Abort+0x230>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d04f      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a30      	ldr	r2, [pc, #192]	@ (8007e6c <HAL_DMA_Abort+0x234>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d04a      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2e      	ldr	r2, [pc, #184]	@ (8007e70 <HAL_DMA_Abort+0x238>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d045      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8007e74 <HAL_DMA_Abort+0x23c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d040      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e78 <HAL_DMA_Abort+0x240>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d03b      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e7c <HAL_DMA_Abort+0x244>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d036      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <HAL_DMA_Abort+0x248>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d031      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a27      	ldr	r2, [pc, #156]	@ (8007e84 <HAL_DMA_Abort+0x24c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d02c      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a25      	ldr	r2, [pc, #148]	@ (8007e88 <HAL_DMA_Abort+0x250>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d027      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a24      	ldr	r2, [pc, #144]	@ (8007e8c <HAL_DMA_Abort+0x254>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d022      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a22      	ldr	r2, [pc, #136]	@ (8007e90 <HAL_DMA_Abort+0x258>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a21      	ldr	r2, [pc, #132]	@ (8007e94 <HAL_DMA_Abort+0x25c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1f      	ldr	r2, [pc, #124]	@ (8007e98 <HAL_DMA_Abort+0x260>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1e      	ldr	r2, [pc, #120]	@ (8007e9c <HAL_DMA_Abort+0x264>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea0 <HAL_DMA_Abort+0x268>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea4 <HAL_DMA_Abort+0x26c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_DMA_Abort+0x20e>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a19      	ldr	r2, [pc, #100]	@ (8007ea8 <HAL_DMA_Abort+0x270>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d132      	bne.n	8007eac <HAL_DMA_Abort+0x274>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e031      	b.n	8007eae <HAL_DMA_Abort+0x276>
 8007e4a:	bf00      	nop
 8007e4c:	40020010 	.word	0x40020010
 8007e50:	40020028 	.word	0x40020028
 8007e54:	40020040 	.word	0x40020040
 8007e58:	40020058 	.word	0x40020058
 8007e5c:	40020070 	.word	0x40020070
 8007e60:	40020088 	.word	0x40020088
 8007e64:	400200a0 	.word	0x400200a0
 8007e68:	400200b8 	.word	0x400200b8
 8007e6c:	40020410 	.word	0x40020410
 8007e70:	40020428 	.word	0x40020428
 8007e74:	40020440 	.word	0x40020440
 8007e78:	40020458 	.word	0x40020458
 8007e7c:	40020470 	.word	0x40020470
 8007e80:	40020488 	.word	0x40020488
 8007e84:	400204a0 	.word	0x400204a0
 8007e88:	400204b8 	.word	0x400204b8
 8007e8c:	58025408 	.word	0x58025408
 8007e90:	5802541c 	.word	0x5802541c
 8007e94:	58025430 	.word	0x58025430
 8007e98:	58025444 	.word	0x58025444
 8007e9c:	58025458 	.word	0x58025458
 8007ea0:	5802546c 	.word	0x5802546c
 8007ea4:	58025480 	.word	0x58025480
 8007ea8:	58025494 	.word	0x58025494
 8007eac:	2300      	movs	r3, #0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800807c <HAL_DMA_Abort+0x444>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d04a      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8008080 <HAL_DMA_Abort+0x448>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d045      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a6a      	ldr	r2, [pc, #424]	@ (8008084 <HAL_DMA_Abort+0x44c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d040      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a68      	ldr	r2, [pc, #416]	@ (8008088 <HAL_DMA_Abort+0x450>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d03b      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a67      	ldr	r2, [pc, #412]	@ (800808c <HAL_DMA_Abort+0x454>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d036      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a65      	ldr	r2, [pc, #404]	@ (8008090 <HAL_DMA_Abort+0x458>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d031      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a64      	ldr	r2, [pc, #400]	@ (8008094 <HAL_DMA_Abort+0x45c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d02c      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a62      	ldr	r2, [pc, #392]	@ (8008098 <HAL_DMA_Abort+0x460>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d027      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a61      	ldr	r2, [pc, #388]	@ (800809c <HAL_DMA_Abort+0x464>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d022      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a5f      	ldr	r2, [pc, #380]	@ (80080a0 <HAL_DMA_Abort+0x468>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01d      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a5e      	ldr	r2, [pc, #376]	@ (80080a4 <HAL_DMA_Abort+0x46c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d018      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a5c      	ldr	r2, [pc, #368]	@ (80080a8 <HAL_DMA_Abort+0x470>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80080ac <HAL_DMA_Abort+0x474>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d00e      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a59      	ldr	r2, [pc, #356]	@ (80080b0 <HAL_DMA_Abort+0x478>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d009      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a58      	ldr	r2, [pc, #352]	@ (80080b4 <HAL_DMA_Abort+0x47c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d004      	beq.n	8007f62 <HAL_DMA_Abort+0x32a>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a56      	ldr	r2, [pc, #344]	@ (80080b8 <HAL_DMA_Abort+0x480>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d108      	bne.n	8007f74 <HAL_DMA_Abort+0x33c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e007      	b.n	8007f84 <HAL_DMA_Abort+0x34c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0201 	bic.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007f84:	e013      	b.n	8007fae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f86:	f7fe fd47 	bl	8006a18 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b05      	cmp	r3, #5
 8007f92:	d90c      	bls.n	8007fae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e12d      	b.n	800820a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800807c <HAL_DMA_Abort+0x444>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d04a      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008080 <HAL_DMA_Abort+0x448>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d045      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8008084 <HAL_DMA_Abort+0x44c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d040      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8008088 <HAL_DMA_Abort+0x450>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d03b      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a29      	ldr	r2, [pc, #164]	@ (800808c <HAL_DMA_Abort+0x454>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d036      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a27      	ldr	r2, [pc, #156]	@ (8008090 <HAL_DMA_Abort+0x458>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d031      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a26      	ldr	r2, [pc, #152]	@ (8008094 <HAL_DMA_Abort+0x45c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d02c      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a24      	ldr	r2, [pc, #144]	@ (8008098 <HAL_DMA_Abort+0x460>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d027      	beq.n	800805a <HAL_DMA_Abort+0x422>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a23      	ldr	r2, [pc, #140]	@ (800809c <HAL_DMA_Abort+0x464>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d022      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a21      	ldr	r2, [pc, #132]	@ (80080a0 <HAL_DMA_Abort+0x468>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d01d      	beq.n	800805a <HAL_DMA_Abort+0x422>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a20      	ldr	r2, [pc, #128]	@ (80080a4 <HAL_DMA_Abort+0x46c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d018      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <HAL_DMA_Abort+0x470>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d013      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <HAL_DMA_Abort+0x474>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_DMA_Abort+0x422>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1b      	ldr	r2, [pc, #108]	@ (80080b0 <HAL_DMA_Abort+0x478>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1a      	ldr	r2, [pc, #104]	@ (80080b4 <HAL_DMA_Abort+0x47c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_DMA_Abort+0x422>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a18      	ldr	r2, [pc, #96]	@ (80080b8 <HAL_DMA_Abort+0x480>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d101      	bne.n	800805e <HAL_DMA_Abort+0x426>
 800805a:	2301      	movs	r3, #1
 800805c:	e000      	b.n	8008060 <HAL_DMA_Abort+0x428>
 800805e:	2300      	movs	r3, #0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d02b      	beq.n	80080bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008068:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	223f      	movs	r2, #63	@ 0x3f
 8008074:	409a      	lsls	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	609a      	str	r2, [r3, #8]
 800807a:	e02a      	b.n	80080d2 <HAL_DMA_Abort+0x49a>
 800807c:	40020010 	.word	0x40020010
 8008080:	40020028 	.word	0x40020028
 8008084:	40020040 	.word	0x40020040
 8008088:	40020058 	.word	0x40020058
 800808c:	40020070 	.word	0x40020070
 8008090:	40020088 	.word	0x40020088
 8008094:	400200a0 	.word	0x400200a0
 8008098:	400200b8 	.word	0x400200b8
 800809c:	40020410 	.word	0x40020410
 80080a0:	40020428 	.word	0x40020428
 80080a4:	40020440 	.word	0x40020440
 80080a8:	40020458 	.word	0x40020458
 80080ac:	40020470 	.word	0x40020470
 80080b0:	40020488 	.word	0x40020488
 80080b4:	400204a0 	.word	0x400204a0
 80080b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c6:	f003 031f 	and.w	r3, r3, #31
 80080ca:	2201      	movs	r2, #1
 80080cc:	409a      	lsls	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a4f      	ldr	r2, [pc, #316]	@ (8008214 <HAL_DMA_Abort+0x5dc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d072      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008218 <HAL_DMA_Abort+0x5e0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d06d      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a4c      	ldr	r2, [pc, #304]	@ (800821c <HAL_DMA_Abort+0x5e4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d068      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a4a      	ldr	r2, [pc, #296]	@ (8008220 <HAL_DMA_Abort+0x5e8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d063      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a49      	ldr	r2, [pc, #292]	@ (8008224 <HAL_DMA_Abort+0x5ec>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d05e      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a47      	ldr	r2, [pc, #284]	@ (8008228 <HAL_DMA_Abort+0x5f0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d059      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a46      	ldr	r2, [pc, #280]	@ (800822c <HAL_DMA_Abort+0x5f4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d054      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a44      	ldr	r2, [pc, #272]	@ (8008230 <HAL_DMA_Abort+0x5f8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d04f      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a43      	ldr	r2, [pc, #268]	@ (8008234 <HAL_DMA_Abort+0x5fc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d04a      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a41      	ldr	r2, [pc, #260]	@ (8008238 <HAL_DMA_Abort+0x600>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d045      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a40      	ldr	r2, [pc, #256]	@ (800823c <HAL_DMA_Abort+0x604>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d040      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a3e      	ldr	r2, [pc, #248]	@ (8008240 <HAL_DMA_Abort+0x608>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d03b      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a3d      	ldr	r2, [pc, #244]	@ (8008244 <HAL_DMA_Abort+0x60c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d036      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a3b      	ldr	r2, [pc, #236]	@ (8008248 <HAL_DMA_Abort+0x610>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d031      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3a      	ldr	r2, [pc, #232]	@ (800824c <HAL_DMA_Abort+0x614>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d02c      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a38      	ldr	r2, [pc, #224]	@ (8008250 <HAL_DMA_Abort+0x618>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d027      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a37      	ldr	r2, [pc, #220]	@ (8008254 <HAL_DMA_Abort+0x61c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a35      	ldr	r2, [pc, #212]	@ (8008258 <HAL_DMA_Abort+0x620>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01d      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a34      	ldr	r2, [pc, #208]	@ (800825c <HAL_DMA_Abort+0x624>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a32      	ldr	r2, [pc, #200]	@ (8008260 <HAL_DMA_Abort+0x628>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a31      	ldr	r2, [pc, #196]	@ (8008264 <HAL_DMA_Abort+0x62c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008268 <HAL_DMA_Abort+0x630>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a2e      	ldr	r2, [pc, #184]	@ (800826c <HAL_DMA_Abort+0x634>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_DMA_Abort+0x58a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008270 <HAL_DMA_Abort+0x638>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d101      	bne.n	80081c6 <HAL_DMA_Abort+0x58e>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <HAL_DMA_Abort+0x590>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80081d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80081f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40020010 	.word	0x40020010
 8008218:	40020028 	.word	0x40020028
 800821c:	40020040 	.word	0x40020040
 8008220:	40020058 	.word	0x40020058
 8008224:	40020070 	.word	0x40020070
 8008228:	40020088 	.word	0x40020088
 800822c:	400200a0 	.word	0x400200a0
 8008230:	400200b8 	.word	0x400200b8
 8008234:	40020410 	.word	0x40020410
 8008238:	40020428 	.word	0x40020428
 800823c:	40020440 	.word	0x40020440
 8008240:	40020458 	.word	0x40020458
 8008244:	40020470 	.word	0x40020470
 8008248:	40020488 	.word	0x40020488
 800824c:	400204a0 	.word	0x400204a0
 8008250:	400204b8 	.word	0x400204b8
 8008254:	58025408 	.word	0x58025408
 8008258:	5802541c 	.word	0x5802541c
 800825c:	58025430 	.word	0x58025430
 8008260:	58025444 	.word	0x58025444
 8008264:	58025458 	.word	0x58025458
 8008268:	5802546c 	.word	0x5802546c
 800826c:	58025480 	.word	0x58025480
 8008270:	58025494 	.word	0x58025494

08008274 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e237      	b.n	80086f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d004      	beq.n	800829c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2280      	movs	r2, #128	@ 0x80
 8008296:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e22c      	b.n	80086f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a5c      	ldr	r2, [pc, #368]	@ (8008414 <HAL_DMA_Abort_IT+0x1a0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d04a      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a5b      	ldr	r2, [pc, #364]	@ (8008418 <HAL_DMA_Abort_IT+0x1a4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d045      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a59      	ldr	r2, [pc, #356]	@ (800841c <HAL_DMA_Abort_IT+0x1a8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d040      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a58      	ldr	r2, [pc, #352]	@ (8008420 <HAL_DMA_Abort_IT+0x1ac>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d03b      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a56      	ldr	r2, [pc, #344]	@ (8008424 <HAL_DMA_Abort_IT+0x1b0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d036      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a55      	ldr	r2, [pc, #340]	@ (8008428 <HAL_DMA_Abort_IT+0x1b4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d031      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a53      	ldr	r2, [pc, #332]	@ (800842c <HAL_DMA_Abort_IT+0x1b8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d02c      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a52      	ldr	r2, [pc, #328]	@ (8008430 <HAL_DMA_Abort_IT+0x1bc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d027      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a50      	ldr	r2, [pc, #320]	@ (8008434 <HAL_DMA_Abort_IT+0x1c0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d022      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a4f      	ldr	r2, [pc, #316]	@ (8008438 <HAL_DMA_Abort_IT+0x1c4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d01d      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a4d      	ldr	r2, [pc, #308]	@ (800843c <HAL_DMA_Abort_IT+0x1c8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a4c      	ldr	r2, [pc, #304]	@ (8008440 <HAL_DMA_Abort_IT+0x1cc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a4a      	ldr	r2, [pc, #296]	@ (8008444 <HAL_DMA_Abort_IT+0x1d0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a49      	ldr	r2, [pc, #292]	@ (8008448 <HAL_DMA_Abort_IT+0x1d4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a47      	ldr	r2, [pc, #284]	@ (800844c <HAL_DMA_Abort_IT+0x1d8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_DMA_Abort_IT+0xc8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a46      	ldr	r2, [pc, #280]	@ (8008450 <HAL_DMA_Abort_IT+0x1dc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d101      	bne.n	8008340 <HAL_DMA_Abort_IT+0xcc>
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <HAL_DMA_Abort_IT+0xce>
 8008340:	2300      	movs	r3, #0
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8086 	beq.w	8008454 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2204      	movs	r2, #4
 800834c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2f      	ldr	r2, [pc, #188]	@ (8008414 <HAL_DMA_Abort_IT+0x1a0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d04a      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2e      	ldr	r2, [pc, #184]	@ (8008418 <HAL_DMA_Abort_IT+0x1a4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d045      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2c      	ldr	r2, [pc, #176]	@ (800841c <HAL_DMA_Abort_IT+0x1a8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d040      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a2b      	ldr	r2, [pc, #172]	@ (8008420 <HAL_DMA_Abort_IT+0x1ac>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d03b      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a29      	ldr	r2, [pc, #164]	@ (8008424 <HAL_DMA_Abort_IT+0x1b0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d036      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a28      	ldr	r2, [pc, #160]	@ (8008428 <HAL_DMA_Abort_IT+0x1b4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d031      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a26      	ldr	r2, [pc, #152]	@ (800842c <HAL_DMA_Abort_IT+0x1b8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d02c      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a25      	ldr	r2, [pc, #148]	@ (8008430 <HAL_DMA_Abort_IT+0x1bc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d027      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a23      	ldr	r2, [pc, #140]	@ (8008434 <HAL_DMA_Abort_IT+0x1c0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d022      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a22      	ldr	r2, [pc, #136]	@ (8008438 <HAL_DMA_Abort_IT+0x1c4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d01d      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a20      	ldr	r2, [pc, #128]	@ (800843c <HAL_DMA_Abort_IT+0x1c8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d018      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008440 <HAL_DMA_Abort_IT+0x1cc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d013      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008444 <HAL_DMA_Abort_IT+0x1d0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00e      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008448 <HAL_DMA_Abort_IT+0x1d4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d009      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1a      	ldr	r2, [pc, #104]	@ (800844c <HAL_DMA_Abort_IT+0x1d8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d004      	beq.n	80083f0 <HAL_DMA_Abort_IT+0x17c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a19      	ldr	r2, [pc, #100]	@ (8008450 <HAL_DMA_Abort_IT+0x1dc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d108      	bne.n	8008402 <HAL_DMA_Abort_IT+0x18e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e178      	b.n	80086f4 <HAL_DMA_Abort_IT+0x480>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	e16f      	b.n	80086f4 <HAL_DMA_Abort_IT+0x480>
 8008414:	40020010 	.word	0x40020010
 8008418:	40020028 	.word	0x40020028
 800841c:	40020040 	.word	0x40020040
 8008420:	40020058 	.word	0x40020058
 8008424:	40020070 	.word	0x40020070
 8008428:	40020088 	.word	0x40020088
 800842c:	400200a0 	.word	0x400200a0
 8008430:	400200b8 	.word	0x400200b8
 8008434:	40020410 	.word	0x40020410
 8008438:	40020428 	.word	0x40020428
 800843c:	40020440 	.word	0x40020440
 8008440:	40020458 	.word	0x40020458
 8008444:	40020470 	.word	0x40020470
 8008448:	40020488 	.word	0x40020488
 800844c:	400204a0 	.word	0x400204a0
 8008450:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 020e 	bic.w	r2, r2, #14
 8008462:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6c      	ldr	r2, [pc, #432]	@ (800861c <HAL_DMA_Abort_IT+0x3a8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d04a      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a6b      	ldr	r2, [pc, #428]	@ (8008620 <HAL_DMA_Abort_IT+0x3ac>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d045      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a69      	ldr	r2, [pc, #420]	@ (8008624 <HAL_DMA_Abort_IT+0x3b0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d040      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a68      	ldr	r2, [pc, #416]	@ (8008628 <HAL_DMA_Abort_IT+0x3b4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d03b      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a66      	ldr	r2, [pc, #408]	@ (800862c <HAL_DMA_Abort_IT+0x3b8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d036      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a65      	ldr	r2, [pc, #404]	@ (8008630 <HAL_DMA_Abort_IT+0x3bc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d031      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a63      	ldr	r2, [pc, #396]	@ (8008634 <HAL_DMA_Abort_IT+0x3c0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d02c      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a62      	ldr	r2, [pc, #392]	@ (8008638 <HAL_DMA_Abort_IT+0x3c4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d027      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a60      	ldr	r2, [pc, #384]	@ (800863c <HAL_DMA_Abort_IT+0x3c8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d022      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a5f      	ldr	r2, [pc, #380]	@ (8008640 <HAL_DMA_Abort_IT+0x3cc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d01d      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a5d      	ldr	r2, [pc, #372]	@ (8008644 <HAL_DMA_Abort_IT+0x3d0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d018      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a5c      	ldr	r2, [pc, #368]	@ (8008648 <HAL_DMA_Abort_IT+0x3d4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5a      	ldr	r2, [pc, #360]	@ (800864c <HAL_DMA_Abort_IT+0x3d8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00e      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a59      	ldr	r2, [pc, #356]	@ (8008650 <HAL_DMA_Abort_IT+0x3dc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d009      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a57      	ldr	r2, [pc, #348]	@ (8008654 <HAL_DMA_Abort_IT+0x3e0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d004      	beq.n	8008504 <HAL_DMA_Abort_IT+0x290>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a56      	ldr	r2, [pc, #344]	@ (8008658 <HAL_DMA_Abort_IT+0x3e4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d108      	bne.n	8008516 <HAL_DMA_Abort_IT+0x2a2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e007      	b.n	8008526 <HAL_DMA_Abort_IT+0x2b2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3c      	ldr	r2, [pc, #240]	@ (800861c <HAL_DMA_Abort_IT+0x3a8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d072      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a3a      	ldr	r2, [pc, #232]	@ (8008620 <HAL_DMA_Abort_IT+0x3ac>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d06d      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a39      	ldr	r2, [pc, #228]	@ (8008624 <HAL_DMA_Abort_IT+0x3b0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d068      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a37      	ldr	r2, [pc, #220]	@ (8008628 <HAL_DMA_Abort_IT+0x3b4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d063      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a36      	ldr	r2, [pc, #216]	@ (800862c <HAL_DMA_Abort_IT+0x3b8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d05e      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a34      	ldr	r2, [pc, #208]	@ (8008630 <HAL_DMA_Abort_IT+0x3bc>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d059      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a33      	ldr	r2, [pc, #204]	@ (8008634 <HAL_DMA_Abort_IT+0x3c0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d054      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a31      	ldr	r2, [pc, #196]	@ (8008638 <HAL_DMA_Abort_IT+0x3c4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d04f      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a30      	ldr	r2, [pc, #192]	@ (800863c <HAL_DMA_Abort_IT+0x3c8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d04a      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2e      	ldr	r2, [pc, #184]	@ (8008640 <HAL_DMA_Abort_IT+0x3cc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d045      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2d      	ldr	r2, [pc, #180]	@ (8008644 <HAL_DMA_Abort_IT+0x3d0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d040      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a2b      	ldr	r2, [pc, #172]	@ (8008648 <HAL_DMA_Abort_IT+0x3d4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d03b      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a2a      	ldr	r2, [pc, #168]	@ (800864c <HAL_DMA_Abort_IT+0x3d8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d036      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a28      	ldr	r2, [pc, #160]	@ (8008650 <HAL_DMA_Abort_IT+0x3dc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d031      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a27      	ldr	r2, [pc, #156]	@ (8008654 <HAL_DMA_Abort_IT+0x3e0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d02c      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a25      	ldr	r2, [pc, #148]	@ (8008658 <HAL_DMA_Abort_IT+0x3e4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d027      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a24      	ldr	r2, [pc, #144]	@ (800865c <HAL_DMA_Abort_IT+0x3e8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d022      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a22      	ldr	r2, [pc, #136]	@ (8008660 <HAL_DMA_Abort_IT+0x3ec>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01d      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a21      	ldr	r2, [pc, #132]	@ (8008664 <HAL_DMA_Abort_IT+0x3f0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d018      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008668 <HAL_DMA_Abort_IT+0x3f4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d013      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1e      	ldr	r2, [pc, #120]	@ (800866c <HAL_DMA_Abort_IT+0x3f8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00e      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <HAL_DMA_Abort_IT+0x3fc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d009      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <HAL_DMA_Abort_IT+0x400>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d004      	beq.n	8008616 <HAL_DMA_Abort_IT+0x3a2>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a19      	ldr	r2, [pc, #100]	@ (8008678 <HAL_DMA_Abort_IT+0x404>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d132      	bne.n	800867c <HAL_DMA_Abort_IT+0x408>
 8008616:	2301      	movs	r3, #1
 8008618:	e031      	b.n	800867e <HAL_DMA_Abort_IT+0x40a>
 800861a:	bf00      	nop
 800861c:	40020010 	.word	0x40020010
 8008620:	40020028 	.word	0x40020028
 8008624:	40020040 	.word	0x40020040
 8008628:	40020058 	.word	0x40020058
 800862c:	40020070 	.word	0x40020070
 8008630:	40020088 	.word	0x40020088
 8008634:	400200a0 	.word	0x400200a0
 8008638:	400200b8 	.word	0x400200b8
 800863c:	40020410 	.word	0x40020410
 8008640:	40020428 	.word	0x40020428
 8008644:	40020440 	.word	0x40020440
 8008648:	40020458 	.word	0x40020458
 800864c:	40020470 	.word	0x40020470
 8008650:	40020488 	.word	0x40020488
 8008654:	400204a0 	.word	0x400204a0
 8008658:	400204b8 	.word	0x400204b8
 800865c:	58025408 	.word	0x58025408
 8008660:	5802541c 	.word	0x5802541c
 8008664:	58025430 	.word	0x58025430
 8008668:	58025444 	.word	0x58025444
 800866c:	58025458 	.word	0x58025458
 8008670:	5802546c 	.word	0x5802546c
 8008674:	58025480 	.word	0x58025480
 8008678:	58025494 	.word	0x58025494
 800867c:	2300      	movs	r3, #0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d028      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800868c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008690:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008696:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	2201      	movs	r2, #1
 80086a2:	409a      	lsls	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80086b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop

08008700 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	@ 0x28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800870c:	4b67      	ldr	r3, [pc, #412]	@ (80088ac <HAL_DMA_IRQHandler+0x1ac>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a67      	ldr	r2, [pc, #412]	@ (80088b0 <HAL_DMA_IRQHandler+0x1b0>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	0a9b      	lsrs	r3, r3, #10
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008724:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a5f      	ldr	r2, [pc, #380]	@ (80088b4 <HAL_DMA_IRQHandler+0x1b4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d04a      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a5d      	ldr	r2, [pc, #372]	@ (80088b8 <HAL_DMA_IRQHandler+0x1b8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d045      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a5c      	ldr	r2, [pc, #368]	@ (80088bc <HAL_DMA_IRQHandler+0x1bc>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d040      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a5a      	ldr	r2, [pc, #360]	@ (80088c0 <HAL_DMA_IRQHandler+0x1c0>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d03b      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a59      	ldr	r2, [pc, #356]	@ (80088c4 <HAL_DMA_IRQHandler+0x1c4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d036      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a57      	ldr	r2, [pc, #348]	@ (80088c8 <HAL_DMA_IRQHandler+0x1c8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d031      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a56      	ldr	r2, [pc, #344]	@ (80088cc <HAL_DMA_IRQHandler+0x1cc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d02c      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a54      	ldr	r2, [pc, #336]	@ (80088d0 <HAL_DMA_IRQHandler+0x1d0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d027      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a53      	ldr	r2, [pc, #332]	@ (80088d4 <HAL_DMA_IRQHandler+0x1d4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d022      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a51      	ldr	r2, [pc, #324]	@ (80088d8 <HAL_DMA_IRQHandler+0x1d8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d01d      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a50      	ldr	r2, [pc, #320]	@ (80088dc <HAL_DMA_IRQHandler+0x1dc>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d018      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a4e      	ldr	r2, [pc, #312]	@ (80088e0 <HAL_DMA_IRQHandler+0x1e0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a4d      	ldr	r2, [pc, #308]	@ (80088e4 <HAL_DMA_IRQHandler+0x1e4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00e      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a4b      	ldr	r2, [pc, #300]	@ (80088e8 <HAL_DMA_IRQHandler+0x1e8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d009      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a4a      	ldr	r2, [pc, #296]	@ (80088ec <HAL_DMA_IRQHandler+0x1ec>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d004      	beq.n	80087d2 <HAL_DMA_IRQHandler+0xd2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a48      	ldr	r2, [pc, #288]	@ (80088f0 <HAL_DMA_IRQHandler+0x1f0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d101      	bne.n	80087d6 <HAL_DMA_IRQHandler+0xd6>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <HAL_DMA_IRQHandler+0xd8>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 842b 	beq.w	8009034 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e2:	f003 031f 	and.w	r3, r3, #31
 80087e6:	2208      	movs	r2, #8
 80087e8:	409a      	lsls	r2, r3
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80a2 	beq.w	8008938 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	@ (80088b4 <HAL_DMA_IRQHandler+0x1b4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d04a      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2d      	ldr	r2, [pc, #180]	@ (80088b8 <HAL_DMA_IRQHandler+0x1b8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d045      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2b      	ldr	r2, [pc, #172]	@ (80088bc <HAL_DMA_IRQHandler+0x1bc>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d040      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2a      	ldr	r2, [pc, #168]	@ (80088c0 <HAL_DMA_IRQHandler+0x1c0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d03b      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a28      	ldr	r2, [pc, #160]	@ (80088c4 <HAL_DMA_IRQHandler+0x1c4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d036      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a27      	ldr	r2, [pc, #156]	@ (80088c8 <HAL_DMA_IRQHandler+0x1c8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d031      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a25      	ldr	r2, [pc, #148]	@ (80088cc <HAL_DMA_IRQHandler+0x1cc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d02c      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a24      	ldr	r2, [pc, #144]	@ (80088d0 <HAL_DMA_IRQHandler+0x1d0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d027      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a22      	ldr	r2, [pc, #136]	@ (80088d4 <HAL_DMA_IRQHandler+0x1d4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d022      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	@ (80088d8 <HAL_DMA_IRQHandler+0x1d8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d01d      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1f      	ldr	r2, [pc, #124]	@ (80088dc <HAL_DMA_IRQHandler+0x1dc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d018      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1e      	ldr	r2, [pc, #120]	@ (80088e0 <HAL_DMA_IRQHandler+0x1e0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d013      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1c      	ldr	r2, [pc, #112]	@ (80088e4 <HAL_DMA_IRQHandler+0x1e4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00e      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1b      	ldr	r2, [pc, #108]	@ (80088e8 <HAL_DMA_IRQHandler+0x1e8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a19      	ldr	r2, [pc, #100]	@ (80088ec <HAL_DMA_IRQHandler+0x1ec>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_DMA_IRQHandler+0x194>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a18      	ldr	r2, [pc, #96]	@ (80088f0 <HAL_DMA_IRQHandler+0x1f0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d12f      	bne.n	80088f4 <HAL_DMA_IRQHandler+0x1f4>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bf14      	ite	ne
 80088a2:	2301      	movne	r3, #1
 80088a4:	2300      	moveq	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	e02e      	b.n	8008908 <HAL_DMA_IRQHandler+0x208>
 80088aa:	bf00      	nop
 80088ac:	24000064 	.word	0x24000064
 80088b0:	1b4e81b5 	.word	0x1b4e81b5
 80088b4:	40020010 	.word	0x40020010
 80088b8:	40020028 	.word	0x40020028
 80088bc:	40020040 	.word	0x40020040
 80088c0:	40020058 	.word	0x40020058
 80088c4:	40020070 	.word	0x40020070
 80088c8:	40020088 	.word	0x40020088
 80088cc:	400200a0 	.word	0x400200a0
 80088d0:	400200b8 	.word	0x400200b8
 80088d4:	40020410 	.word	0x40020410
 80088d8:	40020428 	.word	0x40020428
 80088dc:	40020440 	.word	0x40020440
 80088e0:	40020458 	.word	0x40020458
 80088e4:	40020470 	.word	0x40020470
 80088e8:	40020488 	.word	0x40020488
 80088ec:	400204a0 	.word	0x400204a0
 80088f0:	400204b8 	.word	0x400204b8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bf14      	ite	ne
 8008902:	2301      	movne	r3, #1
 8008904:	2300      	moveq	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d015      	beq.n	8008938 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0204 	bic.w	r2, r2, #4
 800891a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	2208      	movs	r2, #8
 8008926:	409a      	lsls	r2, r3
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008930:	f043 0201 	orr.w	r2, r3, #1
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d06e      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a69      	ldr	r2, [pc, #420]	@ (8008af8 <HAL_DMA_IRQHandler+0x3f8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d04a      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a67      	ldr	r2, [pc, #412]	@ (8008afc <HAL_DMA_IRQHandler+0x3fc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d045      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a66      	ldr	r2, [pc, #408]	@ (8008b00 <HAL_DMA_IRQHandler+0x400>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d040      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a64      	ldr	r2, [pc, #400]	@ (8008b04 <HAL_DMA_IRQHandler+0x404>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d03b      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a63      	ldr	r2, [pc, #396]	@ (8008b08 <HAL_DMA_IRQHandler+0x408>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d036      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a61      	ldr	r2, [pc, #388]	@ (8008b0c <HAL_DMA_IRQHandler+0x40c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d031      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a60      	ldr	r2, [pc, #384]	@ (8008b10 <HAL_DMA_IRQHandler+0x410>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d02c      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a5e      	ldr	r2, [pc, #376]	@ (8008b14 <HAL_DMA_IRQHandler+0x414>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d027      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a5d      	ldr	r2, [pc, #372]	@ (8008b18 <HAL_DMA_IRQHandler+0x418>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d022      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a5b      	ldr	r2, [pc, #364]	@ (8008b1c <HAL_DMA_IRQHandler+0x41c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01d      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a5a      	ldr	r2, [pc, #360]	@ (8008b20 <HAL_DMA_IRQHandler+0x420>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d018      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a58      	ldr	r2, [pc, #352]	@ (8008b24 <HAL_DMA_IRQHandler+0x424>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a57      	ldr	r2, [pc, #348]	@ (8008b28 <HAL_DMA_IRQHandler+0x428>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a55      	ldr	r2, [pc, #340]	@ (8008b2c <HAL_DMA_IRQHandler+0x42c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a54      	ldr	r2, [pc, #336]	@ (8008b30 <HAL_DMA_IRQHandler+0x430>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <HAL_DMA_IRQHandler+0x2ee>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a52      	ldr	r2, [pc, #328]	@ (8008b34 <HAL_DMA_IRQHandler+0x434>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d10a      	bne.n	8008a04 <HAL_DMA_IRQHandler+0x304>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	bf14      	ite	ne
 80089fc:	2301      	movne	r3, #1
 80089fe:	2300      	moveq	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	e003      	b.n	8008a0c <HAL_DMA_IRQHandler+0x30c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00d      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a14:	f003 031f 	and.w	r3, r3, #31
 8008a18:	2201      	movs	r2, #1
 8008a1a:	409a      	lsls	r2, r3
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a24:	f043 0202 	orr.w	r2, r3, #2
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2204      	movs	r2, #4
 8008a36:	409a      	lsls	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 808f 	beq.w	8008b60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2c      	ldr	r2, [pc, #176]	@ (8008af8 <HAL_DMA_IRQHandler+0x3f8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d04a      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2a      	ldr	r2, [pc, #168]	@ (8008afc <HAL_DMA_IRQHandler+0x3fc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d045      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a29      	ldr	r2, [pc, #164]	@ (8008b00 <HAL_DMA_IRQHandler+0x400>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d040      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a27      	ldr	r2, [pc, #156]	@ (8008b04 <HAL_DMA_IRQHandler+0x404>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d03b      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	@ (8008b08 <HAL_DMA_IRQHandler+0x408>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d036      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a24      	ldr	r2, [pc, #144]	@ (8008b0c <HAL_DMA_IRQHandler+0x40c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d031      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a23      	ldr	r2, [pc, #140]	@ (8008b10 <HAL_DMA_IRQHandler+0x410>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d02c      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a21      	ldr	r2, [pc, #132]	@ (8008b14 <HAL_DMA_IRQHandler+0x414>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d027      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a20      	ldr	r2, [pc, #128]	@ (8008b18 <HAL_DMA_IRQHandler+0x418>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d022      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b1c <HAL_DMA_IRQHandler+0x41c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01d      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8008b20 <HAL_DMA_IRQHandler+0x420>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d018      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b24 <HAL_DMA_IRQHandler+0x424>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d013      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1a      	ldr	r2, [pc, #104]	@ (8008b28 <HAL_DMA_IRQHandler+0x428>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00e      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a18      	ldr	r2, [pc, #96]	@ (8008b2c <HAL_DMA_IRQHandler+0x42c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d009      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a17      	ldr	r2, [pc, #92]	@ (8008b30 <HAL_DMA_IRQHandler+0x430>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d004      	beq.n	8008ae2 <HAL_DMA_IRQHandler+0x3e2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <HAL_DMA_IRQHandler+0x434>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d12a      	bne.n	8008b38 <HAL_DMA_IRQHandler+0x438>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bf14      	ite	ne
 8008af0:	2301      	movne	r3, #1
 8008af2:	2300      	moveq	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	e023      	b.n	8008b40 <HAL_DMA_IRQHandler+0x440>
 8008af8:	40020010 	.word	0x40020010
 8008afc:	40020028 	.word	0x40020028
 8008b00:	40020040 	.word	0x40020040
 8008b04:	40020058 	.word	0x40020058
 8008b08:	40020070 	.word	0x40020070
 8008b0c:	40020088 	.word	0x40020088
 8008b10:	400200a0 	.word	0x400200a0
 8008b14:	400200b8 	.word	0x400200b8
 8008b18:	40020410 	.word	0x40020410
 8008b1c:	40020428 	.word	0x40020428
 8008b20:	40020440 	.word	0x40020440
 8008b24:	40020458 	.word	0x40020458
 8008b28:	40020470 	.word	0x40020470
 8008b2c:	40020488 	.word	0x40020488
 8008b30:	400204a0 	.word	0x400204a0
 8008b34:	400204b8 	.word	0x400204b8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00d      	beq.n	8008b60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b48:	f003 031f 	and.w	r3, r3, #31
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	409a      	lsls	r2, r3
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b58:	f043 0204 	orr.w	r2, r3, #4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	2210      	movs	r2, #16
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80a6 	beq.w	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a85      	ldr	r2, [pc, #532]	@ (8008d90 <HAL_DMA_IRQHandler+0x690>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d04a      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a83      	ldr	r2, [pc, #524]	@ (8008d94 <HAL_DMA_IRQHandler+0x694>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d045      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a82      	ldr	r2, [pc, #520]	@ (8008d98 <HAL_DMA_IRQHandler+0x698>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d040      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a80      	ldr	r2, [pc, #512]	@ (8008d9c <HAL_DMA_IRQHandler+0x69c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a7f      	ldr	r2, [pc, #508]	@ (8008da0 <HAL_DMA_IRQHandler+0x6a0>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d036      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a7d      	ldr	r2, [pc, #500]	@ (8008da4 <HAL_DMA_IRQHandler+0x6a4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d031      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8008da8 <HAL_DMA_IRQHandler+0x6a8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d02c      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8008dac <HAL_DMA_IRQHandler+0x6ac>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d027      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a79      	ldr	r2, [pc, #484]	@ (8008db0 <HAL_DMA_IRQHandler+0x6b0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d022      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a77      	ldr	r2, [pc, #476]	@ (8008db4 <HAL_DMA_IRQHandler+0x6b4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01d      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a76      	ldr	r2, [pc, #472]	@ (8008db8 <HAL_DMA_IRQHandler+0x6b8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d018      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a74      	ldr	r2, [pc, #464]	@ (8008dbc <HAL_DMA_IRQHandler+0x6bc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d013      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a73      	ldr	r2, [pc, #460]	@ (8008dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00e      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a71      	ldr	r2, [pc, #452]	@ (8008dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d009      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a70      	ldr	r2, [pc, #448]	@ (8008dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <HAL_DMA_IRQHandler+0x516>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a6e      	ldr	r2, [pc, #440]	@ (8008dcc <HAL_DMA_IRQHandler+0x6cc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d10a      	bne.n	8008c2c <HAL_DMA_IRQHandler+0x52c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	e009      	b.n	8008c40 <HAL_DMA_IRQHandler+0x540>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d03e      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2210      	movs	r2, #16
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d018      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d108      	bne.n	8008c82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d024      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
 8008c80:	e01f      	b.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01b      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
 8008c92:	e016      	b.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d107      	bne.n	8008cb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0208 	bic.w	r2, r2, #8
 8008cb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2220      	movs	r2, #32
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8110 	beq.w	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008d90 <HAL_DMA_IRQHandler+0x690>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d04a      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d94 <HAL_DMA_IRQHandler+0x694>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d045      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a29      	ldr	r2, [pc, #164]	@ (8008d98 <HAL_DMA_IRQHandler+0x698>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d040      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a28      	ldr	r2, [pc, #160]	@ (8008d9c <HAL_DMA_IRQHandler+0x69c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d03b      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a26      	ldr	r2, [pc, #152]	@ (8008da0 <HAL_DMA_IRQHandler+0x6a0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d036      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a25      	ldr	r2, [pc, #148]	@ (8008da4 <HAL_DMA_IRQHandler+0x6a4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d031      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a23      	ldr	r2, [pc, #140]	@ (8008da8 <HAL_DMA_IRQHandler+0x6a8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d02c      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a22      	ldr	r2, [pc, #136]	@ (8008dac <HAL_DMA_IRQHandler+0x6ac>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d027      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a20      	ldr	r2, [pc, #128]	@ (8008db0 <HAL_DMA_IRQHandler+0x6b0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d022      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1f      	ldr	r2, [pc, #124]	@ (8008db4 <HAL_DMA_IRQHandler+0x6b4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d01d      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <HAL_DMA_IRQHandler+0x6b8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dbc <HAL_DMA_IRQHandler+0x6bc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc0 <HAL_DMA_IRQHandler+0x6c0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a19      	ldr	r2, [pc, #100]	@ (8008dc4 <HAL_DMA_IRQHandler+0x6c4>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a17      	ldr	r2, [pc, #92]	@ (8008dc8 <HAL_DMA_IRQHandler+0x6c8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x678>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a16      	ldr	r2, [pc, #88]	@ (8008dcc <HAL_DMA_IRQHandler+0x6cc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d12b      	bne.n	8008dd0 <HAL_DMA_IRQHandler+0x6d0>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bf14      	ite	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	e02a      	b.n	8008de4 <HAL_DMA_IRQHandler+0x6e4>
 8008d8e:	bf00      	nop
 8008d90:	40020010 	.word	0x40020010
 8008d94:	40020028 	.word	0x40020028
 8008d98:	40020040 	.word	0x40020040
 8008d9c:	40020058 	.word	0x40020058
 8008da0:	40020070 	.word	0x40020070
 8008da4:	40020088 	.word	0x40020088
 8008da8:	400200a0 	.word	0x400200a0
 8008dac:	400200b8 	.word	0x400200b8
 8008db0:	40020410 	.word	0x40020410
 8008db4:	40020428 	.word	0x40020428
 8008db8:	40020440 	.word	0x40020440
 8008dbc:	40020458 	.word	0x40020458
 8008dc0:	40020470 	.word	0x40020470
 8008dc4:	40020488 	.word	0x40020488
 8008dc8:	400204a0 	.word	0x400204a0
 8008dcc:	400204b8 	.word	0x400204b8
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8087 	beq.w	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dee:	f003 031f 	and.w	r3, r3, #31
 8008df2:	2220      	movs	r2, #32
 8008df4:	409a      	lsls	r2, r3
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d139      	bne.n	8008e7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0216 	bic.w	r2, r2, #22
 8008e14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d103      	bne.n	8008e36 <HAL_DMA_IRQHandler+0x736>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0208 	bic.w	r2, r2, #8
 8008e44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e4a:	f003 031f 	and.w	r3, r3, #31
 8008e4e:	223f      	movs	r2, #63	@ 0x3f
 8008e50:	409a      	lsls	r2, r3
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 834a 	beq.w	8009504 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
          }
          return;
 8008e78:	e344      	b.n	8009504 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d018      	beq.n	8008eba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d108      	bne.n	8008ea8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d02c      	beq.n	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	4798      	blx	r3
 8008ea6:	e027      	b.n	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d023      	beq.n	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	e01e      	b.n	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0210 	bic.w	r2, r2, #16
 8008ed6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8306 	beq.w	800950e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8088 	beq.w	8009020 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2204      	movs	r2, #4
 8008f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8009108 <HAL_DMA_IRQHandler+0xa08>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d04a      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a79      	ldr	r2, [pc, #484]	@ (800910c <HAL_DMA_IRQHandler+0xa0c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d045      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a77      	ldr	r2, [pc, #476]	@ (8009110 <HAL_DMA_IRQHandler+0xa10>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d040      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a76      	ldr	r2, [pc, #472]	@ (8009114 <HAL_DMA_IRQHandler+0xa14>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d03b      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a74      	ldr	r2, [pc, #464]	@ (8009118 <HAL_DMA_IRQHandler+0xa18>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d036      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a73      	ldr	r2, [pc, #460]	@ (800911c <HAL_DMA_IRQHandler+0xa1c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d031      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a71      	ldr	r2, [pc, #452]	@ (8009120 <HAL_DMA_IRQHandler+0xa20>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d02c      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a70      	ldr	r2, [pc, #448]	@ (8009124 <HAL_DMA_IRQHandler+0xa24>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d027      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8009128 <HAL_DMA_IRQHandler+0xa28>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d022      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a6d      	ldr	r2, [pc, #436]	@ (800912c <HAL_DMA_IRQHandler+0xa2c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d01d      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a6b      	ldr	r2, [pc, #428]	@ (8009130 <HAL_DMA_IRQHandler+0xa30>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d018      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a6a      	ldr	r2, [pc, #424]	@ (8009134 <HAL_DMA_IRQHandler+0xa34>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a68      	ldr	r2, [pc, #416]	@ (8009138 <HAL_DMA_IRQHandler+0xa38>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00e      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a67      	ldr	r2, [pc, #412]	@ (800913c <HAL_DMA_IRQHandler+0xa3c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d009      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a65      	ldr	r2, [pc, #404]	@ (8009140 <HAL_DMA_IRQHandler+0xa40>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <HAL_DMA_IRQHandler+0x8b8>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a64      	ldr	r2, [pc, #400]	@ (8009144 <HAL_DMA_IRQHandler+0xa44>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d108      	bne.n	8008fca <HAL_DMA_IRQHandler+0x8ca>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e007      	b.n	8008fda <HAL_DMA_IRQHandler+0x8da>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d307      	bcc.n	8008ff6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1f2      	bne.n	8008fda <HAL_DMA_IRQHandler+0x8da>
 8008ff4:	e000      	b.n	8008ff8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008ff6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2203      	movs	r2, #3
 800900a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800900e:	e003      	b.n	8009018 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8272 	beq.w	800950e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
 8009032:	e26c      	b.n	800950e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a43      	ldr	r2, [pc, #268]	@ (8009148 <HAL_DMA_IRQHandler+0xa48>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d022      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a42      	ldr	r2, [pc, #264]	@ (800914c <HAL_DMA_IRQHandler+0xa4c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d01d      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a40      	ldr	r2, [pc, #256]	@ (8009150 <HAL_DMA_IRQHandler+0xa50>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d018      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a3f      	ldr	r2, [pc, #252]	@ (8009154 <HAL_DMA_IRQHandler+0xa54>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d013      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a3d      	ldr	r2, [pc, #244]	@ (8009158 <HAL_DMA_IRQHandler+0xa58>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a3c      	ldr	r2, [pc, #240]	@ (800915c <HAL_DMA_IRQHandler+0xa5c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a3a      	ldr	r2, [pc, #232]	@ (8009160 <HAL_DMA_IRQHandler+0xa60>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_DMA_IRQHandler+0x984>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a39      	ldr	r2, [pc, #228]	@ (8009164 <HAL_DMA_IRQHandler+0xa64>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d101      	bne.n	8009088 <HAL_DMA_IRQHandler+0x988>
 8009084:	2301      	movs	r3, #1
 8009086:	e000      	b.n	800908a <HAL_DMA_IRQHandler+0x98a>
 8009088:	2300      	movs	r3, #0
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 823f 	beq.w	800950e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2204      	movs	r2, #4
 80090a2:	409a      	lsls	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80cd 	beq.w	8009248 <HAL_DMA_IRQHandler+0xb48>
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80c7 	beq.w	8009248 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2204      	movs	r2, #4
 80090c4:	409a      	lsls	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d049      	beq.n	8009168 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 8210 	beq.w	8009508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090f0:	e20a      	b.n	8009508 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8206 	beq.w	8009508 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009104:	e200      	b.n	8009508 <HAL_DMA_IRQHandler+0xe08>
 8009106:	bf00      	nop
 8009108:	40020010 	.word	0x40020010
 800910c:	40020028 	.word	0x40020028
 8009110:	40020040 	.word	0x40020040
 8009114:	40020058 	.word	0x40020058
 8009118:	40020070 	.word	0x40020070
 800911c:	40020088 	.word	0x40020088
 8009120:	400200a0 	.word	0x400200a0
 8009124:	400200b8 	.word	0x400200b8
 8009128:	40020410 	.word	0x40020410
 800912c:	40020428 	.word	0x40020428
 8009130:	40020440 	.word	0x40020440
 8009134:	40020458 	.word	0x40020458
 8009138:	40020470 	.word	0x40020470
 800913c:	40020488 	.word	0x40020488
 8009140:	400204a0 	.word	0x400204a0
 8009144:	400204b8 	.word	0x400204b8
 8009148:	58025408 	.word	0x58025408
 800914c:	5802541c 	.word	0x5802541c
 8009150:	58025430 	.word	0x58025430
 8009154:	58025444 	.word	0x58025444
 8009158:	58025458 	.word	0x58025458
 800915c:	5802546c 	.word	0x5802546c
 8009160:	58025480 	.word	0x58025480
 8009164:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d160      	bne.n	8009234 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a7f      	ldr	r2, [pc, #508]	@ (8009374 <HAL_DMA_IRQHandler+0xc74>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d04a      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a7d      	ldr	r2, [pc, #500]	@ (8009378 <HAL_DMA_IRQHandler+0xc78>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d045      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a7c      	ldr	r2, [pc, #496]	@ (800937c <HAL_DMA_IRQHandler+0xc7c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d040      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a7a      	ldr	r2, [pc, #488]	@ (8009380 <HAL_DMA_IRQHandler+0xc80>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d03b      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a79      	ldr	r2, [pc, #484]	@ (8009384 <HAL_DMA_IRQHandler+0xc84>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d036      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a77      	ldr	r2, [pc, #476]	@ (8009388 <HAL_DMA_IRQHandler+0xc88>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d031      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a76      	ldr	r2, [pc, #472]	@ (800938c <HAL_DMA_IRQHandler+0xc8c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d02c      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a74      	ldr	r2, [pc, #464]	@ (8009390 <HAL_DMA_IRQHandler+0xc90>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d027      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a73      	ldr	r2, [pc, #460]	@ (8009394 <HAL_DMA_IRQHandler+0xc94>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d022      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a71      	ldr	r2, [pc, #452]	@ (8009398 <HAL_DMA_IRQHandler+0xc98>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d01d      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a70      	ldr	r2, [pc, #448]	@ (800939c <HAL_DMA_IRQHandler+0xc9c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d018      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a6e      	ldr	r2, [pc, #440]	@ (80093a0 <HAL_DMA_IRQHandler+0xca0>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a6d      	ldr	r2, [pc, #436]	@ (80093a4 <HAL_DMA_IRQHandler+0xca4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00e      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a6b      	ldr	r2, [pc, #428]	@ (80093a8 <HAL_DMA_IRQHandler+0xca8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d009      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a6a      	ldr	r2, [pc, #424]	@ (80093ac <HAL_DMA_IRQHandler+0xcac>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <HAL_DMA_IRQHandler+0xb12>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a68      	ldr	r2, [pc, #416]	@ (80093b0 <HAL_DMA_IRQHandler+0xcb0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d108      	bne.n	8009224 <HAL_DMA_IRQHandler+0xb24>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0208 	bic.w	r2, r2, #8
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	e007      	b.n	8009234 <HAL_DMA_IRQHandler+0xb34>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0204 	bic.w	r2, r2, #4
 8009232:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8165 	beq.w	8009508 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009246:	e15f      	b.n	8009508 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	2202      	movs	r2, #2
 8009252:	409a      	lsls	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4013      	ands	r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 80c5 	beq.w	80093e8 <HAL_DMA_IRQHandler+0xce8>
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80bf 	beq.w	80093e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	2202      	movs	r2, #2
 8009274:	409a      	lsls	r2, r3
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d018      	beq.n	80092b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 813a 	beq.w	800950c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092a0:	e134      	b.n	800950c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8130 	beq.w	800950c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092b4:	e12a      	b.n	800950c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 8089 	bne.w	80093d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009374 <HAL_DMA_IRQHandler+0xc74>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d04a      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a29      	ldr	r2, [pc, #164]	@ (8009378 <HAL_DMA_IRQHandler+0xc78>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d045      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a28      	ldr	r2, [pc, #160]	@ (800937c <HAL_DMA_IRQHandler+0xc7c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d040      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a26      	ldr	r2, [pc, #152]	@ (8009380 <HAL_DMA_IRQHandler+0xc80>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d03b      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a25      	ldr	r2, [pc, #148]	@ (8009384 <HAL_DMA_IRQHandler+0xc84>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d036      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a23      	ldr	r2, [pc, #140]	@ (8009388 <HAL_DMA_IRQHandler+0xc88>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d031      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a22      	ldr	r2, [pc, #136]	@ (800938c <HAL_DMA_IRQHandler+0xc8c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d02c      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a20      	ldr	r2, [pc, #128]	@ (8009390 <HAL_DMA_IRQHandler+0xc90>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d027      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1f      	ldr	r2, [pc, #124]	@ (8009394 <HAL_DMA_IRQHandler+0xc94>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d022      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <HAL_DMA_IRQHandler+0xc98>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d01d      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1c      	ldr	r2, [pc, #112]	@ (800939c <HAL_DMA_IRQHandler+0xc9c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d018      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a1a      	ldr	r2, [pc, #104]	@ (80093a0 <HAL_DMA_IRQHandler+0xca0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d013      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a19      	ldr	r2, [pc, #100]	@ (80093a4 <HAL_DMA_IRQHandler+0xca4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00e      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a17      	ldr	r2, [pc, #92]	@ (80093a8 <HAL_DMA_IRQHandler+0xca8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d009      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a16      	ldr	r2, [pc, #88]	@ (80093ac <HAL_DMA_IRQHandler+0xcac>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d004      	beq.n	8009362 <HAL_DMA_IRQHandler+0xc62>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a14      	ldr	r2, [pc, #80]	@ (80093b0 <HAL_DMA_IRQHandler+0xcb0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d128      	bne.n	80093b4 <HAL_DMA_IRQHandler+0xcb4>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0214 	bic.w	r2, r2, #20
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e027      	b.n	80093c4 <HAL_DMA_IRQHandler+0xcc4>
 8009374:	40020010 	.word	0x40020010
 8009378:	40020028 	.word	0x40020028
 800937c:	40020040 	.word	0x40020040
 8009380:	40020058 	.word	0x40020058
 8009384:	40020070 	.word	0x40020070
 8009388:	40020088 	.word	0x40020088
 800938c:	400200a0 	.word	0x400200a0
 8009390:	400200b8 	.word	0x400200b8
 8009394:	40020410 	.word	0x40020410
 8009398:	40020428 	.word	0x40020428
 800939c:	40020440 	.word	0x40020440
 80093a0:	40020458 	.word	0x40020458
 80093a4:	40020470 	.word	0x40020470
 80093a8:	40020488 	.word	0x40020488
 80093ac:	400204a0 	.word	0x400204a0
 80093b0:	400204b8 	.word	0x400204b8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 020a 	bic.w	r2, r2, #10
 80093c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8097 	beq.w	800950c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093e6:	e091      	b.n	800950c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ec:	f003 031f 	and.w	r3, r3, #31
 80093f0:	2208      	movs	r2, #8
 80093f2:	409a      	lsls	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 8088 	beq.w	800950e <HAL_DMA_IRQHandler+0xe0e>
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8082 	beq.w	800950e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a41      	ldr	r2, [pc, #260]	@ (8009514 <HAL_DMA_IRQHandler+0xe14>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d04a      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a3f      	ldr	r2, [pc, #252]	@ (8009518 <HAL_DMA_IRQHandler+0xe18>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d045      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a3e      	ldr	r2, [pc, #248]	@ (800951c <HAL_DMA_IRQHandler+0xe1c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d040      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a3c      	ldr	r2, [pc, #240]	@ (8009520 <HAL_DMA_IRQHandler+0xe20>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d03b      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a3b      	ldr	r2, [pc, #236]	@ (8009524 <HAL_DMA_IRQHandler+0xe24>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d036      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a39      	ldr	r2, [pc, #228]	@ (8009528 <HAL_DMA_IRQHandler+0xe28>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d031      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a38      	ldr	r2, [pc, #224]	@ (800952c <HAL_DMA_IRQHandler+0xe2c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d02c      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a36      	ldr	r2, [pc, #216]	@ (8009530 <HAL_DMA_IRQHandler+0xe30>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d027      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a35      	ldr	r2, [pc, #212]	@ (8009534 <HAL_DMA_IRQHandler+0xe34>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a33      	ldr	r2, [pc, #204]	@ (8009538 <HAL_DMA_IRQHandler+0xe38>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01d      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a32      	ldr	r2, [pc, #200]	@ (800953c <HAL_DMA_IRQHandler+0xe3c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a30      	ldr	r2, [pc, #192]	@ (8009540 <HAL_DMA_IRQHandler+0xe40>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a2f      	ldr	r2, [pc, #188]	@ (8009544 <HAL_DMA_IRQHandler+0xe44>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a2d      	ldr	r2, [pc, #180]	@ (8009548 <HAL_DMA_IRQHandler+0xe48>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a2c      	ldr	r2, [pc, #176]	@ (800954c <HAL_DMA_IRQHandler+0xe4c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_DMA_IRQHandler+0xdaa>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009550 <HAL_DMA_IRQHandler+0xe50>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d108      	bne.n	80094bc <HAL_DMA_IRQHandler+0xdbc>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 021c 	bic.w	r2, r2, #28
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e007      	b.n	80094cc <HAL_DMA_IRQHandler+0xdcc>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 020e 	bic.w	r2, r2, #14
 80094ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094d0:	f003 031f 	and.w	r3, r3, #31
 80094d4:	2201      	movs	r2, #1
 80094d6:	409a      	lsls	r2, r3
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	4798      	blx	r3
 8009502:	e004      	b.n	800950e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009504:	bf00      	nop
 8009506:	e002      	b.n	800950e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009508:	bf00      	nop
 800950a:	e000      	b.n	800950e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800950c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800950e:	3728      	adds	r7, #40	@ 0x28
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	40020010 	.word	0x40020010
 8009518:	40020028 	.word	0x40020028
 800951c:	40020040 	.word	0x40020040
 8009520:	40020058 	.word	0x40020058
 8009524:	40020070 	.word	0x40020070
 8009528:	40020088 	.word	0x40020088
 800952c:	400200a0 	.word	0x400200a0
 8009530:	400200b8 	.word	0x400200b8
 8009534:	40020410 	.word	0x40020410
 8009538:	40020428 	.word	0x40020428
 800953c:	40020440 	.word	0x40020440
 8009540:	40020458 	.word	0x40020458
 8009544:	40020470 	.word	0x40020470
 8009548:	40020488 	.word	0x40020488
 800954c:	400204a0 	.word	0x400204a0
 8009550:	400204b8 	.word	0x400204b8

08009554 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009584:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a7f      	ldr	r2, [pc, #508]	@ (8009788 <DMA_SetConfig+0x21c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d072      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a7d      	ldr	r2, [pc, #500]	@ (800978c <DMA_SetConfig+0x220>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d06d      	beq.n	8009676 <DMA_SetConfig+0x10a>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a7c      	ldr	r2, [pc, #496]	@ (8009790 <DMA_SetConfig+0x224>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d068      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a7a      	ldr	r2, [pc, #488]	@ (8009794 <DMA_SetConfig+0x228>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d063      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a79      	ldr	r2, [pc, #484]	@ (8009798 <DMA_SetConfig+0x22c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d05e      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a77      	ldr	r2, [pc, #476]	@ (800979c <DMA_SetConfig+0x230>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d059      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a76      	ldr	r2, [pc, #472]	@ (80097a0 <DMA_SetConfig+0x234>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d054      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a74      	ldr	r2, [pc, #464]	@ (80097a4 <DMA_SetConfig+0x238>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d04f      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a73      	ldr	r2, [pc, #460]	@ (80097a8 <DMA_SetConfig+0x23c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d04a      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a71      	ldr	r2, [pc, #452]	@ (80097ac <DMA_SetConfig+0x240>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d045      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a70      	ldr	r2, [pc, #448]	@ (80097b0 <DMA_SetConfig+0x244>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d040      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a6e      	ldr	r2, [pc, #440]	@ (80097b4 <DMA_SetConfig+0x248>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d03b      	beq.n	8009676 <DMA_SetConfig+0x10a>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a6d      	ldr	r2, [pc, #436]	@ (80097b8 <DMA_SetConfig+0x24c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d036      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a6b      	ldr	r2, [pc, #428]	@ (80097bc <DMA_SetConfig+0x250>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d031      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a6a      	ldr	r2, [pc, #424]	@ (80097c0 <DMA_SetConfig+0x254>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d02c      	beq.n	8009676 <DMA_SetConfig+0x10a>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a68      	ldr	r2, [pc, #416]	@ (80097c4 <DMA_SetConfig+0x258>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d027      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a67      	ldr	r2, [pc, #412]	@ (80097c8 <DMA_SetConfig+0x25c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d022      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a65      	ldr	r2, [pc, #404]	@ (80097cc <DMA_SetConfig+0x260>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d01d      	beq.n	8009676 <DMA_SetConfig+0x10a>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a64      	ldr	r2, [pc, #400]	@ (80097d0 <DMA_SetConfig+0x264>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d018      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a62      	ldr	r2, [pc, #392]	@ (80097d4 <DMA_SetConfig+0x268>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d013      	beq.n	8009676 <DMA_SetConfig+0x10a>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a61      	ldr	r2, [pc, #388]	@ (80097d8 <DMA_SetConfig+0x26c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00e      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a5f      	ldr	r2, [pc, #380]	@ (80097dc <DMA_SetConfig+0x270>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d009      	beq.n	8009676 <DMA_SetConfig+0x10a>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a5e      	ldr	r2, [pc, #376]	@ (80097e0 <DMA_SetConfig+0x274>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <DMA_SetConfig+0x10a>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a5c      	ldr	r2, [pc, #368]	@ (80097e4 <DMA_SetConfig+0x278>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d101      	bne.n	800967a <DMA_SetConfig+0x10e>
 8009676:	2301      	movs	r3, #1
 8009678:	e000      	b.n	800967c <DMA_SetConfig+0x110>
 800967a:	2300      	movs	r3, #0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00d      	beq.n	800969c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009688:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800968e:	2b00      	cmp	r3, #0
 8009690:	d004      	beq.n	800969c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800969a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a39      	ldr	r2, [pc, #228]	@ (8009788 <DMA_SetConfig+0x21c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d04a      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a38      	ldr	r2, [pc, #224]	@ (800978c <DMA_SetConfig+0x220>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d045      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a36      	ldr	r2, [pc, #216]	@ (8009790 <DMA_SetConfig+0x224>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d040      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a35      	ldr	r2, [pc, #212]	@ (8009794 <DMA_SetConfig+0x228>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d03b      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a33      	ldr	r2, [pc, #204]	@ (8009798 <DMA_SetConfig+0x22c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d036      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a32      	ldr	r2, [pc, #200]	@ (800979c <DMA_SetConfig+0x230>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d031      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a30      	ldr	r2, [pc, #192]	@ (80097a0 <DMA_SetConfig+0x234>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d02c      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a2f      	ldr	r2, [pc, #188]	@ (80097a4 <DMA_SetConfig+0x238>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d027      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a2d      	ldr	r2, [pc, #180]	@ (80097a8 <DMA_SetConfig+0x23c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d022      	beq.n	800973c <DMA_SetConfig+0x1d0>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a2c      	ldr	r2, [pc, #176]	@ (80097ac <DMA_SetConfig+0x240>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d01d      	beq.n	800973c <DMA_SetConfig+0x1d0>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a2a      	ldr	r2, [pc, #168]	@ (80097b0 <DMA_SetConfig+0x244>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d018      	beq.n	800973c <DMA_SetConfig+0x1d0>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a29      	ldr	r2, [pc, #164]	@ (80097b4 <DMA_SetConfig+0x248>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d013      	beq.n	800973c <DMA_SetConfig+0x1d0>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a27      	ldr	r2, [pc, #156]	@ (80097b8 <DMA_SetConfig+0x24c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <DMA_SetConfig+0x1d0>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a26      	ldr	r2, [pc, #152]	@ (80097bc <DMA_SetConfig+0x250>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d009      	beq.n	800973c <DMA_SetConfig+0x1d0>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a24      	ldr	r2, [pc, #144]	@ (80097c0 <DMA_SetConfig+0x254>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d004      	beq.n	800973c <DMA_SetConfig+0x1d0>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a23      	ldr	r2, [pc, #140]	@ (80097c4 <DMA_SetConfig+0x258>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d101      	bne.n	8009740 <DMA_SetConfig+0x1d4>
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <DMA_SetConfig+0x1d6>
 8009740:	2300      	movs	r3, #0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d059      	beq.n	80097fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800974a:	f003 031f 	and.w	r3, r3, #31
 800974e:	223f      	movs	r2, #63	@ 0x3f
 8009750:	409a      	lsls	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009764:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	2b40      	cmp	r3, #64	@ 0x40
 8009774:	d138      	bne.n	80097e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009786:	e086      	b.n	8009896 <DMA_SetConfig+0x32a>
 8009788:	40020010 	.word	0x40020010
 800978c:	40020028 	.word	0x40020028
 8009790:	40020040 	.word	0x40020040
 8009794:	40020058 	.word	0x40020058
 8009798:	40020070 	.word	0x40020070
 800979c:	40020088 	.word	0x40020088
 80097a0:	400200a0 	.word	0x400200a0
 80097a4:	400200b8 	.word	0x400200b8
 80097a8:	40020410 	.word	0x40020410
 80097ac:	40020428 	.word	0x40020428
 80097b0:	40020440 	.word	0x40020440
 80097b4:	40020458 	.word	0x40020458
 80097b8:	40020470 	.word	0x40020470
 80097bc:	40020488 	.word	0x40020488
 80097c0:	400204a0 	.word	0x400204a0
 80097c4:	400204b8 	.word	0x400204b8
 80097c8:	58025408 	.word	0x58025408
 80097cc:	5802541c 	.word	0x5802541c
 80097d0:	58025430 	.word	0x58025430
 80097d4:	58025444 	.word	0x58025444
 80097d8:	58025458 	.word	0x58025458
 80097dc:	5802546c 	.word	0x5802546c
 80097e0:	58025480 	.word	0x58025480
 80097e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	60da      	str	r2, [r3, #12]
}
 80097f8:	e04d      	b.n	8009896 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a29      	ldr	r2, [pc, #164]	@ (80098a4 <DMA_SetConfig+0x338>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d022      	beq.n	800984a <DMA_SetConfig+0x2de>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a27      	ldr	r2, [pc, #156]	@ (80098a8 <DMA_SetConfig+0x33c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d01d      	beq.n	800984a <DMA_SetConfig+0x2de>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a26      	ldr	r2, [pc, #152]	@ (80098ac <DMA_SetConfig+0x340>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d018      	beq.n	800984a <DMA_SetConfig+0x2de>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a24      	ldr	r2, [pc, #144]	@ (80098b0 <DMA_SetConfig+0x344>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <DMA_SetConfig+0x2de>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a23      	ldr	r2, [pc, #140]	@ (80098b4 <DMA_SetConfig+0x348>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00e      	beq.n	800984a <DMA_SetConfig+0x2de>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a21      	ldr	r2, [pc, #132]	@ (80098b8 <DMA_SetConfig+0x34c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d009      	beq.n	800984a <DMA_SetConfig+0x2de>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a20      	ldr	r2, [pc, #128]	@ (80098bc <DMA_SetConfig+0x350>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d004      	beq.n	800984a <DMA_SetConfig+0x2de>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1e      	ldr	r2, [pc, #120]	@ (80098c0 <DMA_SetConfig+0x354>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d101      	bne.n	800984e <DMA_SetConfig+0x2e2>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <DMA_SetConfig+0x2e4>
 800984e:	2300      	movs	r3, #0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d020      	beq.n	8009896 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2201      	movs	r2, #1
 800985e:	409a      	lsls	r2, r3
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	2b40      	cmp	r3, #64	@ 0x40
 8009872:	d108      	bne.n	8009886 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	60da      	str	r2, [r3, #12]
}
 8009884:	e007      	b.n	8009896 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	60da      	str	r2, [r3, #12]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	58025408 	.word	0x58025408
 80098a8:	5802541c 	.word	0x5802541c
 80098ac:	58025430 	.word	0x58025430
 80098b0:	58025444 	.word	0x58025444
 80098b4:	58025458 	.word	0x58025458
 80098b8:	5802546c 	.word	0x5802546c
 80098bc:	58025480 	.word	0x58025480
 80098c0:	58025494 	.word	0x58025494

080098c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a42      	ldr	r2, [pc, #264]	@ (80099dc <DMA_CalcBaseAndBitshift+0x118>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d04a      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a41      	ldr	r2, [pc, #260]	@ (80099e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d045      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a3f      	ldr	r2, [pc, #252]	@ (80099e4 <DMA_CalcBaseAndBitshift+0x120>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d040      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a3e      	ldr	r2, [pc, #248]	@ (80099e8 <DMA_CalcBaseAndBitshift+0x124>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d03b      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a3c      	ldr	r2, [pc, #240]	@ (80099ec <DMA_CalcBaseAndBitshift+0x128>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d036      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a3b      	ldr	r2, [pc, #236]	@ (80099f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d031      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a39      	ldr	r2, [pc, #228]	@ (80099f4 <DMA_CalcBaseAndBitshift+0x130>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d02c      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a38      	ldr	r2, [pc, #224]	@ (80099f8 <DMA_CalcBaseAndBitshift+0x134>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d027      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a36      	ldr	r2, [pc, #216]	@ (80099fc <DMA_CalcBaseAndBitshift+0x138>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d022      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a35      	ldr	r2, [pc, #212]	@ (8009a00 <DMA_CalcBaseAndBitshift+0x13c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d01d      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a33      	ldr	r2, [pc, #204]	@ (8009a04 <DMA_CalcBaseAndBitshift+0x140>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d018      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a32      	ldr	r2, [pc, #200]	@ (8009a08 <DMA_CalcBaseAndBitshift+0x144>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d013      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a30      	ldr	r2, [pc, #192]	@ (8009a0c <DMA_CalcBaseAndBitshift+0x148>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d00e      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a2f      	ldr	r2, [pc, #188]	@ (8009a10 <DMA_CalcBaseAndBitshift+0x14c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d009      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a2d      	ldr	r2, [pc, #180]	@ (8009a14 <DMA_CalcBaseAndBitshift+0x150>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <DMA_CalcBaseAndBitshift+0xa8>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a2c      	ldr	r2, [pc, #176]	@ (8009a18 <DMA_CalcBaseAndBitshift+0x154>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d101      	bne.n	8009970 <DMA_CalcBaseAndBitshift+0xac>
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <DMA_CalcBaseAndBitshift+0xae>
 8009970:	2300      	movs	r3, #0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d024      	beq.n	80099c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	3b10      	subs	r3, #16
 800997e:	4a27      	ldr	r2, [pc, #156]	@ (8009a1c <DMA_CalcBaseAndBitshift+0x158>)
 8009980:	fba2 2303 	umull	r2, r3, r2, r3
 8009984:	091b      	lsrs	r3, r3, #4
 8009986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	4a24      	ldr	r2, [pc, #144]	@ (8009a20 <DMA_CalcBaseAndBitshift+0x15c>)
 8009990:	5cd3      	ldrb	r3, [r2, r3]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b03      	cmp	r3, #3
 800999c:	d908      	bls.n	80099b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a24 <DMA_CalcBaseAndBitshift+0x160>)
 80099a6:	4013      	ands	r3, r2
 80099a8:	1d1a      	adds	r2, r3, #4
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80099ae:	e00d      	b.n	80099cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	461a      	mov	r2, r3
 80099b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a24 <DMA_CalcBaseAndBitshift+0x160>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80099be:	e005      	b.n	80099cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	40020010 	.word	0x40020010
 80099e0:	40020028 	.word	0x40020028
 80099e4:	40020040 	.word	0x40020040
 80099e8:	40020058 	.word	0x40020058
 80099ec:	40020070 	.word	0x40020070
 80099f0:	40020088 	.word	0x40020088
 80099f4:	400200a0 	.word	0x400200a0
 80099f8:	400200b8 	.word	0x400200b8
 80099fc:	40020410 	.word	0x40020410
 8009a00:	40020428 	.word	0x40020428
 8009a04:	40020440 	.word	0x40020440
 8009a08:	40020458 	.word	0x40020458
 8009a0c:	40020470 	.word	0x40020470
 8009a10:	40020488 	.word	0x40020488
 8009a14:	400204a0 	.word	0x400204a0
 8009a18:	400204b8 	.word	0x400204b8
 8009a1c:	aaaaaaab 	.word	0xaaaaaaab
 8009a20:	08017ee8 	.word	0x08017ee8
 8009a24:	fffffc00 	.word	0xfffffc00

08009a28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d120      	bne.n	8009a7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d858      	bhi.n	8009af6 <DMA_CheckFifoParam+0xce>
 8009a44:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <DMA_CheckFifoParam+0x24>)
 8009a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4a:	bf00      	nop
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009a6f 	.word	0x08009a6f
 8009a54:	08009a5d 	.word	0x08009a5d
 8009a58:	08009af7 	.word	0x08009af7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d048      	beq.n	8009afa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a6c:	e045      	b.n	8009afa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009a76:	d142      	bne.n	8009afe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009a7c:	e03f      	b.n	8009afe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a86:	d123      	bne.n	8009ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d838      	bhi.n	8009b02 <DMA_CheckFifoParam+0xda>
 8009a90:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <DMA_CheckFifoParam+0x70>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009aaf 	.word	0x08009aaf
 8009aa0:	08009aa9 	.word	0x08009aa9
 8009aa4:	08009ac1 	.word	0x08009ac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8009aac:	e030      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d025      	beq.n	8009b06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009abe:	e022      	b.n	8009b06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009ac8:	d11f      	bne.n	8009b0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ace:	e01c      	b.n	8009b0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d902      	bls.n	8009ade <DMA_CheckFifoParam+0xb6>
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d003      	beq.n	8009ae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009adc:	e018      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8009ae2:	e015      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00e      	beq.n	8009b0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	73fb      	strb	r3, [r7, #15]
    break;
 8009af4:	e00b      	b.n	8009b0e <DMA_CheckFifoParam+0xe6>
        break;
 8009af6:	bf00      	nop
 8009af8:	e00a      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        break;
 8009afa:	bf00      	nop
 8009afc:	e008      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        break;
 8009afe:	bf00      	nop
 8009b00:	e006      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        break;
 8009b02:	bf00      	nop
 8009b04:	e004      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        break;
 8009b06:	bf00      	nop
 8009b08:	e002      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
        break;
 8009b0a:	bf00      	nop
 8009b0c:	e000      	b.n	8009b10 <DMA_CheckFifoParam+0xe8>
    break;
 8009b0e:	bf00      	nop
    }
  }

  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a38      	ldr	r2, [pc, #224]	@ (8009c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d022      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a36      	ldr	r2, [pc, #216]	@ (8009c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d01d      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a35      	ldr	r2, [pc, #212]	@ (8009c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d018      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a33      	ldr	r2, [pc, #204]	@ (8009c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d013      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a32      	ldr	r2, [pc, #200]	@ (8009c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00e      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a30      	ldr	r2, [pc, #192]	@ (8009c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d009      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8009c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d004      	beq.n	8009b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a2d      	ldr	r2, [pc, #180]	@ (8009c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d101      	bne.n	8009b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e000      	b.n	8009b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009b82:	2300      	movs	r3, #0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01a      	beq.n	8009bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	3b08      	subs	r3, #8
 8009b90:	4a28      	ldr	r2, [pc, #160]	@ (8009c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	091b      	lsrs	r3, r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4b26      	ldr	r3, [pc, #152]	@ (8009c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a24      	ldr	r2, [pc, #144]	@ (8009c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009bac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f003 031f 	and.w	r3, r3, #31
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	409a      	lsls	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009bbc:	e024      	b.n	8009c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	3b10      	subs	r3, #16
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bcc:	091b      	lsrs	r3, r3, #4
 8009bce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d806      	bhi.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4a1b      	ldr	r2, [pc, #108]	@ (8009c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d902      	bls.n	8009be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3308      	adds	r3, #8
 8009be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4b18      	ldr	r3, [pc, #96]	@ (8009c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	@ (8009c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009bf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	2201      	movs	r2, #1
 8009c02:	409a      	lsls	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	58025408 	.word	0x58025408
 8009c18:	5802541c 	.word	0x5802541c
 8009c1c:	58025430 	.word	0x58025430
 8009c20:	58025444 	.word	0x58025444
 8009c24:	58025458 	.word	0x58025458
 8009c28:	5802546c 	.word	0x5802546c
 8009c2c:	58025480 	.word	0x58025480
 8009c30:	58025494 	.word	0x58025494
 8009c34:	cccccccd 	.word	0xcccccccd
 8009c38:	16009600 	.word	0x16009600
 8009c3c:	58025880 	.word	0x58025880
 8009c40:	aaaaaaab 	.word	0xaaaaaaab
 8009c44:	400204b8 	.word	0x400204b8
 8009c48:	4002040f 	.word	0x4002040f
 8009c4c:	10008200 	.word	0x10008200
 8009c50:	40020880 	.word	0x40020880

08009c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d04a      	beq.n	8009d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	d847      	bhi.n	8009d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a25      	ldr	r2, [pc, #148]	@ (8009d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d022      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a24      	ldr	r2, [pc, #144]	@ (8009d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d01d      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a22      	ldr	r2, [pc, #136]	@ (8009d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d018      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a21      	ldr	r2, [pc, #132]	@ (8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d013      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d00e      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8009d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d009      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d101      	bne.n	8009cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e000      	b.n	8009cc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a15      	ldr	r2, [pc, #84]	@ (8009d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009cdc:	671a      	str	r2, [r3, #112]	@ 0x70
 8009cde:	e009      	b.n	8009cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a11      	ldr	r2, [pc, #68]	@ (8009d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009cf2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	409a      	lsls	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009d00:	bf00      	nop
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	58025408 	.word	0x58025408
 8009d10:	5802541c 	.word	0x5802541c
 8009d14:	58025430 	.word	0x58025430
 8009d18:	58025444 	.word	0x58025444
 8009d1c:	58025458 	.word	0x58025458
 8009d20:	5802546c 	.word	0x5802546c
 8009d24:	58025480 	.word	0x58025480
 8009d28:	58025494 	.word	0x58025494
 8009d2c:	1600963f 	.word	0x1600963f
 8009d30:	58025940 	.word	0x58025940
 8009d34:	1000823f 	.word	0x1000823f
 8009d38:	40020940 	.word	0x40020940

08009d3c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	460b      	mov	r3, r1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e00a      	b.n	8009d6e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	605a      	str	r2, [r3, #4]
      break;
 8009d64:	e002      	b.n	8009d6c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	bf00      	nop
  }

  return status;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e003      	b.n	8009d96 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009d94:	2300      	movs	r3, #0
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	0c1b      	lsrs	r3, r3, #16
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	011a      	lsls	r2, r3, #4
 8009dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8009e00 <HAL_EXTI_IRQHandler+0x5c>)
 8009dce:	4413      	add	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d009      	beq.n	8009df6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4798      	blx	r3
    }
  }
}
 8009df6:	bf00      	nop
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	58000088 	.word	0x58000088

08009e04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b098      	sub	sp, #96	@ 0x60
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009e0c:	4a84      	ldr	r2, [pc, #528]	@ (800a020 <HAL_FDCAN_Init+0x21c>)
 8009e0e:	f107 030c 	add.w	r3, r7, #12
 8009e12:	4611      	mov	r1, r2
 8009e14:	224c      	movs	r2, #76	@ 0x4c
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00b fa3d 	bl	8015296 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e1c6      	b.n	800a1b4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a7e      	ldr	r2, [pc, #504]	@ (800a024 <HAL_FDCAN_Init+0x220>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d106      	bne.n	8009e3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7fc f8cc 	bl	8005ff0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0210 	bic.w	r2, r2, #16
 8009e66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e68:	f7fc fdd6 	bl	8006a18 <HAL_GetTick>
 8009e6c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009e6e:	e014      	b.n	8009e9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009e70:	f7fc fdd2 	bl	8006a18 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b0a      	cmp	r3, #10
 8009e7c:	d90d      	bls.n	8009e9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e84:	f043 0201 	orr.w	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2203      	movs	r2, #3
 8009e92:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e18c      	b.n	800a1b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f003 0308 	and.w	r3, r3, #8
 8009ea4:	2b08      	cmp	r3, #8
 8009ea6:	d0e3      	beq.n	8009e70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009eb8:	f7fc fdae 	bl	8006a18 <HAL_GetTick>
 8009ebc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009ebe:	e014      	b.n	8009eea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009ec0:	f7fc fdaa 	bl	8006a18 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b0a      	cmp	r3, #10
 8009ecc:	d90d      	bls.n	8009eea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ed4:	f043 0201 	orr.w	r2, r3, #1
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e164      	b.n	800a1b4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0e3      	beq.n	8009ec0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0202 	orr.w	r2, r2, #2
 8009f06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7c1b      	ldrb	r3, [r3, #16]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d108      	bne.n	8009f22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f1e:	619a      	str	r2, [r3, #24]
 8009f20:	e007      	b.n	8009f32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7c5b      	ldrb	r3, [r3, #17]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d108      	bne.n	8009f4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f48:	619a      	str	r2, [r3, #24]
 8009f4a:	e007      	b.n	8009f5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	699a      	ldr	r2, [r3, #24]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009f5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7c9b      	ldrb	r3, [r3, #18]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d108      	bne.n	8009f76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	699a      	ldr	r2, [r3, #24]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f72:	619a      	str	r2, [r3, #24]
 8009f74:	e007      	b.n	8009f86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	699a      	ldr	r2, [r3, #24]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009faa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f022 0210 	bic.w	r2, r2, #16
 8009fba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d108      	bne.n	8009fd6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0204 	orr.w	r2, r2, #4
 8009fd2:	619a      	str	r2, [r3, #24]
 8009fd4:	e030      	b.n	800a038 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d02c      	beq.n	800a038 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d020      	beq.n	800a028 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ff4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f042 0210 	orr.w	r2, r2, #16
 800a004:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d114      	bne.n	800a038 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0220 	orr.w	r2, r2, #32
 800a01c:	619a      	str	r2, [r3, #24]
 800a01e:	e00b      	b.n	800a038 <HAL_FDCAN_Init+0x234>
 800a020:	08017e20 	.word	0x08017e20
 800a024:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f042 0220 	orr.w	r2, r2, #32
 800a036:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	3b01      	subs	r3, #1
 800a046:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a048:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a050:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	3b01      	subs	r3, #1
 800a05a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a060:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a062:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a06c:	d115      	bne.n	800a09a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	3b01      	subs	r3, #1
 800a07a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a07c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a082:	3b01      	subs	r3, #1
 800a084:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a086:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08e:	3b01      	subs	r3, #1
 800a090:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a096:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a098:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c0:	4413      	add	r3, r2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d011      	beq.n	800a0ea <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a0ce:	f023 0107 	bic.w	r1, r3, #7
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	3360      	adds	r3, #96	@ 0x60
 800a0da:	443b      	add	r3, r7
 800a0dc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d011      	beq.n	800a116 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0fa:	f023 0107 	bic.w	r1, r3, #7
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	3360      	adds	r3, #96	@ 0x60
 800a106:	443b      	add	r3, r7
 800a108:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d012      	beq.n	800a144 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a126:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	3360      	adds	r3, #96	@ 0x60
 800a132:	443b      	add	r3, r7
 800a134:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a138:	011a      	lsls	r2, r3, #4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d012      	beq.n	800a172 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a154:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	3360      	adds	r3, #96	@ 0x60
 800a160:	443b      	add	r3, r7
 800a162:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a166:	021a      	lsls	r2, r3, #8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a11      	ldr	r2, [pc, #68]	@ (800a1bc <HAL_FDCAN_Init+0x3b8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d107      	bne.n	800a18c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f022 0203 	bic.w	r2, r2, #3
 800a18a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fd93 	bl	800acd0 <FDCAN_CalcultateRamBlockAddresses>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800a1b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3760      	adds	r7, #96	@ 0x60
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	4000a000 	.word	0x4000a000

0800a1c0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d111      	bne.n	800a1f8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699a      	ldr	r2, [r3, #24]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e008      	b.n	800a20a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a1fe:	f043 0204 	orr.w	r2, r3, #4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
  }
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d141      	bne.n	800a2b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a236:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a244:	f043 0220 	orr.w	r2, r3, #32
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e038      	b.n	800a2c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a25a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a268:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e026      	b.n	800a2c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	f003 031f 	and.w	r3, r3, #31
 800a284:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fea5 	bl	800afdc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2101      	movs	r1, #1
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	fa01 f202 	lsl.w	r2, r1, r2
 800a29e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	409a      	lsls	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e008      	b.n	800a2c4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2b8:	f043 0208 	orr.w	r2, r3, #8
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
  }
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b08b      	sub	sp, #44	@ 0x2c
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a2e4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800a2e6:	7efb      	ldrb	r3, [r7, #27]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	f040 8149 	bne.w	800a580 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b40      	cmp	r3, #64	@ 0x40
 800a2f2:	d14c      	bne.n	800a38e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a30a:	f043 0220 	orr.w	r2, r3, #32
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e13c      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a32e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e12a      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a34c:	d10a      	bne.n	800a364 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a35a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a35e:	d101      	bne.n	800a364 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a360:	2301      	movs	r3, #1
 800a362:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a36c:	0a1b      	lsrs	r3, r3, #8
 800a36e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a380:	69f9      	ldr	r1, [r7, #28]
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a38c:	e068      	b.n	800a460 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2b41      	cmp	r3, #65	@ 0x41
 800a392:	d14c      	bne.n	800a42e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a39c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d109      	bne.n	800a3b8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3aa:	f043 0220 	orr.w	r2, r3, #32
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0ec      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d109      	bne.n	800a3dc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e0da      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a3e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3ec:	d10a      	bne.n	800a404 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3fe:	d101      	bne.n	800a404 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800a400:	2301      	movs	r3, #1
 800a402:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a40c:	0a1b      	lsrs	r3, r3, #8
 800a40e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a420:	69f9      	ldr	r1, [r7, #28]
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a42c:	e018      	b.n	800a460 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	429a      	cmp	r2, r3
 800a436:	d309      	bcc.n	800a44c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a43e:	f043 0220 	orr.w	r2, r3, #32
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e0a2      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d107      	bne.n	800a484 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800a474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	0c9b      	lsrs	r3, r3, #18
 800a47a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	e005      	b.n	800a490 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	0c1b      	lsrs	r3, r3, #16
 800a4be:	f003 020f 	and.w	r2, r3, #15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	0e1b      	lsrs	r3, r3, #24
 800a4e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	0fda      	lsrs	r2, r3, #31
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a500:	2300      	movs	r3, #0
 800a502:	623b      	str	r3, [r7, #32]
 800a504:	e00a      	b.n	800a51c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	441a      	add	r2, r3
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	440b      	add	r3, r1
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	3301      	adds	r3, #1
 800a51a:	623b      	str	r3, [r7, #32]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	4a1f      	ldr	r2, [pc, #124]	@ (800a5a0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800a522:	5cd3      	ldrb	r3, [r2, r3]
 800a524:	461a      	mov	r2, r3
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	4293      	cmp	r3, r2
 800a52a:	d3ec      	bcc.n	800a506 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b40      	cmp	r3, #64	@ 0x40
 800a530:	d105      	bne.n	800a53e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800a53c:	e01e      	b.n	800a57c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	2b41      	cmp	r3, #65	@ 0x41
 800a542:	d105      	bne.n	800a550 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800a54e:	e015      	b.n	800a57c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b1f      	cmp	r3, #31
 800a554:	d808      	bhi.n	800a568 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2101      	movs	r1, #1
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	fa01 f202 	lsl.w	r2, r1, r2
 800a562:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a566:	e009      	b.n	800a57c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f003 021f 	and.w	r2, r3, #31
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2101      	movs	r1, #1
 800a574:	fa01 f202 	lsl.w	r2, r1, r2
 800a578:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e008      	b.n	800a592 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a586:	f043 0208 	orr.w	r2, r3, #8
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
  }
}
 800a592:	4618      	mov	r0, r3
 800a594:	372c      	adds	r7, #44	@ 0x2c
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	08017ef0 	.word	0x08017ef0

0800a5a4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a5b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a5da:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d002      	beq.n	800a5e8 <HAL_FDCAN_ActivateNotification+0x20>
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d155      	bne.n	800a694 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d108      	bne.n	800a608 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a606:	e014      	b.n	800a632 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4013      	ands	r3, r2
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	429a      	cmp	r2, r3
 800a616:	d108      	bne.n	800a62a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0202 	orr.w	r2, r2, #2
 800a626:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a628:	e003      	b.n	800a632 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2203      	movs	r2, #3
 800a630:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d009      	beq.n	800a650 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	430a      	orrs	r2, r1
 800a66a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b4 <HAL_FDCAN_ActivateNotification+0xec>)
 800a678:	4013      	ands	r3, r2
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	430b      	orrs	r3, r1
 800a680:	6553      	str	r3, [r2, #84]	@ 0x54
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a684:	695a      	ldr	r2, [r3, #20]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	0f9b      	lsrs	r3, r3, #30
 800a68a:	490b      	ldr	r1, [pc, #44]	@ (800a6b8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	e008      	b.n	800a6a6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a69a:	f043 0202 	orr.w	r2, r3, #2
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
  }
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	371c      	adds	r7, #28
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	3fcfffff 	.word	0x3fcfffff
 800a6b8:	4000a800 	.word	0x4000a800

0800a6bc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b096      	sub	sp, #88	@ 0x58
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800a6c4:	4b9a      	ldr	r3, [pc, #616]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	079b      	lsls	r3, r3, #30
 800a6ca:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800a6cc:	4b98      	ldr	r3, [pc, #608]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	079b      	lsls	r3, r3, #30
 800a6d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6de:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a6e2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6f6:	f003 030f 	and.w	r3, r3, #15
 800a6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a704:	4013      	ands	r3, r2
 800a706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a71c:	4013      	ands	r3, r2
 800a71e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a726:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800a72a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a734:	4013      	ands	r3, r2
 800a736:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800a742:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a74c:	4013      	ands	r3, r2
 800a74e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a75e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800a760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d010      	beq.n	800a78e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	0a1b      	lsrs	r3, r3, #8
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a780:	651a      	str	r2, [r3, #80]	@ 0x50
 800a782:	4b6b      	ldr	r3, [pc, #428]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a784:	2200      	movs	r2, #0
 800a786:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fa54 	bl	800ac36 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800a78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a790:	0a9b      	lsrs	r3, r3, #10
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01d      	beq.n	800a7d6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800a79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79c:	0a9b      	lsrs	r3, r3, #10
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d017      	beq.n	800a7d6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7ae:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a7c6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a7c8:	4b59      	ldr	r3, [pc, #356]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800a7ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa07 	bl	800abe4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800a7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00d      	beq.n	800a7f8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7e2:	4b54      	ldr	r3, [pc, #336]	@ (800a934 <HAL_FDCAN_IRQHandler+0x278>)
 800a7e4:	400b      	ands	r3, r1
 800a7e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7e8:	4a51      	ldr	r2, [pc, #324]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ec:	0f9b      	lsrs	r3, r3, #30
 800a7ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800a7f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f9c0 	bl	800ab78 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800a7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00d      	beq.n	800a81a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a804:	4b4b      	ldr	r3, [pc, #300]	@ (800a934 <HAL_FDCAN_IRQHandler+0x278>)
 800a806:	400b      	ands	r3, r1
 800a808:	6513      	str	r3, [r2, #80]	@ 0x50
 800a80a:	4a49      	ldr	r2, [pc, #292]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80e:	0f9b      	lsrs	r3, r3, #30
 800a810:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800a812:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f9ba 	bl	800ab8e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800a81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00d      	beq.n	800a83c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a826:	4b43      	ldr	r3, [pc, #268]	@ (800a934 <HAL_FDCAN_IRQHandler+0x278>)
 800a828:	400b      	ands	r3, r1
 800a82a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a82c:	4a40      	ldr	r2, [pc, #256]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a830:	0f9b      	lsrs	r3, r3, #30
 800a832:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800a834:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7f7 f99c 	bl	8001b74 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800a83c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00d      	beq.n	800a85e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a848:	4b3a      	ldr	r3, [pc, #232]	@ (800a934 <HAL_FDCAN_IRQHandler+0x278>)
 800a84a:	400b      	ands	r3, r1
 800a84c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a84e:	4a38      	ldr	r2, [pc, #224]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a852:	0f9b      	lsrs	r3, r3, #30
 800a854:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800a856:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f9a3 	bl	800aba4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800a85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a860:	0adb      	lsrs	r3, r3, #11
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d010      	beq.n	800a88c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	0adb      	lsrs	r3, r3, #11
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a87e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a880:	4b2b      	ldr	r3, [pc, #172]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a882:	2200      	movs	r2, #0
 800a884:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f997 	bl	800abba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800a88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88e:	0a5b      	lsrs	r3, r3, #9
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01d      	beq.n	800a8d4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800a898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89a:	0a5b      	lsrs	r3, r3, #9
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d017      	beq.n	800a8d4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8ac:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8c4:	651a      	str	r2, [r3, #80]	@ 0x50
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800a8cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f97d 	bl	800abce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d6:	0cdb      	lsrs	r3, r3, #19
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d010      	beq.n	800a902 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	0cdb      	lsrs	r3, r3, #19
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a8f4:	651a      	str	r2, [r3, #80]	@ 0x50
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f97c 	bl	800abfa <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800a902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a904:	0c1b      	lsrs	r3, r3, #16
 800a906:	f003 0301 	and.w	r3, r3, #1
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d016      	beq.n	800a93c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	0c1b      	lsrs	r3, r3, #16
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	d010      	beq.n	800a93c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a922:	651a      	str	r2, [r3, #80]	@ 0x50
 800a924:	4b02      	ldr	r3, [pc, #8]	@ (800a930 <HAL_FDCAN_IRQHandler+0x274>)
 800a926:	2200      	movs	r2, #0
 800a928:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	e004      	b.n	800a938 <HAL_FDCAN_IRQHandler+0x27c>
 800a92e:	bf00      	nop
 800a930:	4000a800 	.word	0x4000a800
 800a934:	3fcfffff 	.word	0x3fcfffff
 800a938:	f000 f969 	bl	800ac0e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a93e:	0c9b      	lsrs	r3, r3, #18
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	0c9b      	lsrs	r3, r3, #18
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00a      	beq.n	800a96a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a95c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a95e:	4b83      	ldr	r3, [pc, #524]	@ (800ab6c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a960:	2200      	movs	r2, #0
 800a962:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f95c 	bl	800ac22 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a96c:	0c5b      	lsrs	r3, r3, #17
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d015      	beq.n	800a9a2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a978:	0c5b      	lsrs	r3, r3, #17
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00f      	beq.n	800a9a2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a98a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a98c:	4b77      	ldr	r3, [pc, #476]	@ (800ab6c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a98e:	2200      	movs	r2, #0
 800a990:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a9a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9ae:	4b70      	ldr	r3, [pc, #448]	@ (800ab70 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a9b0:	400b      	ands	r3, r1
 800a9b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9b4:	4a6d      	ldr	r2, [pc, #436]	@ (800ab6c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	0f9b      	lsrs	r3, r3, #30
 800a9ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800a9bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f94d 	bl	800ac5e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800a9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d011      	beq.n	800a9ee <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a9d0:	4b67      	ldr	r3, [pc, #412]	@ (800ab70 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a9d2:	400b      	ands	r3, r1
 800a9d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a9d6:	4a65      	ldr	r2, [pc, #404]	@ (800ab6c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a9d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9da:	0f9b      	lsrs	r3, r3, #30
 800a9dc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a60      	ldr	r2, [pc, #384]	@ (800ab74 <HAL_FDCAN_IRQHandler+0x4b8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	f040 80ac 	bne.w	800ab52 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80a4 	beq.w	800ab52 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa1e:	4013      	ands	r3, r2
 800aa20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa36:	4013      	ands	r3, r2
 800aa38:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800aa44:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa4e:	4013      	ands	r3, r2
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800aa5c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa64:	6a3a      	ldr	r2, [r7, #32]
 800aa66:	4013      	ands	r3, r2
 800aa68:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800aa74:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7c:	69fa      	ldr	r2, [r7, #28]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa88:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800aa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800aaa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8e6 	bl	800ac74 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800aaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aab4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800aab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f8e6 	bl	800ac8a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	099b      	lsrs	r3, r3, #6
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01a      	beq.n	800ab00 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	099b      	lsrs	r3, r3, #6
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d014      	beq.n	800ab00 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aadc:	0c1b      	lsrs	r3, r3, #16
 800aade:	b29b      	uxth	r3, r3
 800aae0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaec:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2240      	movs	r2, #64	@ 0x40
 800aaf4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	6939      	ldr	r1, [r7, #16]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f8d0 	bl	800aca0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800ab0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f8d1 	bl	800acb8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	431a      	orrs	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f874 	bl	800ac4a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800ab62:	bf00      	nop
 800ab64:	3758      	adds	r7, #88	@ 0x58
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	4000a800 	.word	0x4000a800
 800ab70:	3fcfffff 	.word	0x3fcfffff
 800ab74:	4000a000 	.word	0x4000a000

0800ab78 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
 800ab96:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800abc2:	bf00      	nop
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800ac52:	bf00      	nop
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
	...

0800acd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acdc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ace6:	4ba7      	ldr	r3, [pc, #668]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ace8:	4013      	ands	r3, r2
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	0091      	lsls	r1, r2, #2
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	430b      	orrs	r3, r1
 800acf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad00:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad08:	041a      	lsls	r2, r3, #16
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ad26:	4b97      	ldr	r3, [pc, #604]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	0091      	lsls	r1, r2, #2
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	430b      	orrs	r3, r1
 800ad34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad40:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad48:	041a      	lsls	r2, r3, #16
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ad68:	4b86      	ldr	r3, [pc, #536]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	0091      	lsls	r1, r2, #2
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	430b      	orrs	r3, r1
 800ad76:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad82:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	041a      	lsls	r2, r3, #16
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	4413      	add	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800adb0:	4b74      	ldr	r3, [pc, #464]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800adb2:	4013      	ands	r3, r2
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	0091      	lsls	r1, r2, #2
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	430b      	orrs	r3, r1
 800adbe:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800add2:	041a      	lsls	r2, r3, #16
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ade6:	fb02 f303 	mul.w	r3, r2, r3
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4413      	add	r3, r2
 800adee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800adf8:	4b62      	ldr	r3, [pc, #392]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	0091      	lsls	r1, r2, #2
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	430b      	orrs	r3, r1
 800ae06:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ae24:	4b57      	ldr	r3, [pc, #348]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ae26:	4013      	ands	r3, r2
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	0091      	lsls	r1, r2, #2
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	430b      	orrs	r3, r1
 800ae32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae3e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae46:	041a      	lsls	r2, r3, #16
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800ae66:	4b47      	ldr	r3, [pc, #284]	@ (800af84 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800ae68:	4013      	ands	r3, r2
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	0091      	lsls	r1, r2, #2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6812      	ldr	r2, [r2, #0]
 800ae72:	430b      	orrs	r3, r1
 800ae74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ae80:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae88:	041a      	lsls	r2, r3, #16
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ae9c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aea4:	061a      	lsls	r2, r3, #24
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeb4:	4b34      	ldr	r3, [pc, #208]	@ (800af88 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009a      	lsls	r2, r3, #2
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	441a      	add	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	441a      	add	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800aeea:	fb01 f303 	mul.w	r3, r1, r3
 800aeee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800aef0:	441a      	add	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800af08:	441a      	add	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800af1a:	fb01 f303 	mul.w	r3, r1, r3
 800af1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	441a      	add	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800af4a:	fb01 f303 	mul.w	r3, r1, r3
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	441a      	add	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800af66:	fb01 f303 	mul.w	r3, r1, r3
 800af6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800af6c:	441a      	add	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af7a:	4a04      	ldr	r2, [pc, #16]	@ (800af8c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d915      	bls.n	800afac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800af80:	e006      	b.n	800af90 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800af82:	bf00      	nop
 800af84:	ffff0003 	.word	0xffff0003
 800af88:	10002b00 	.word	0x10002b00
 800af8c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af96:	f043 0220 	orr.w	r2, r3, #32
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2203      	movs	r2, #3
 800afa4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e010      	b.n	800afce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb0:	60fb      	str	r3, [r7, #12]
 800afb2:	e005      	b.n	800afc0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3304      	adds	r3, #4
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d3f3      	bcc.n	800afb4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop

0800afdc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800afdc:	b480      	push	{r7}
 800afde:	b089      	sub	sp, #36	@ 0x24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800affa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b002:	4313      	orrs	r3, r2
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e00a      	b.n	800b01e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b010:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b016:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b018:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b01c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b028:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b02e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b034:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	69fa      	ldr	r2, [r7, #28]
 800b05a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	3304      	adds	r3, #4
 800b060:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	3304      	adds	r3, #4
 800b06c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b06e:	2300      	movs	r3, #0
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	e020      	b.n	800b0b6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	3303      	adds	r3, #3
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	3302      	adds	r3, #2
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	440b      	add	r3, r1
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b08c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	3301      	adds	r3, #1
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	440b      	add	r3, r1
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b09a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	440a      	add	r2, r1
 800b0a2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b0a4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	4a06      	ldr	r2, [pc, #24]	@ (800b0d4 <FDCAN_CopyMessageToRAM+0xf8>)
 800b0bc:	5cd3      	ldrb	r3, [r2, r3]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d3d6      	bcc.n	800b074 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	3724      	adds	r7, #36	@ 0x24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	08017ef0 	.word	0x08017ef0

0800b0d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b089      	sub	sp, #36	@ 0x24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b0e6:	4b89      	ldr	r3, [pc, #548]	@ (800b30c <HAL_GPIO_Init+0x234>)
 800b0e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b0ea:	e194      	b.n	800b416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8186 	beq.w	800b410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d005      	beq.n	800b11c <HAL_GPIO_Init+0x44>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d130      	bne.n	800b17e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	005b      	lsls	r3, r3, #1
 800b126:	2203      	movs	r2, #3
 800b128:	fa02 f303 	lsl.w	r3, r2, r3
 800b12c:	43db      	mvns	r3, r3
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	4013      	ands	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	68da      	ldr	r2, [r3, #12]
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	fa02 f303 	lsl.w	r3, r2, r3
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	4313      	orrs	r3, r2
 800b144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b152:	2201      	movs	r2, #1
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	fa02 f303 	lsl.w	r3, r2, r3
 800b15a:	43db      	mvns	r3, r3
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	4013      	ands	r3, r2
 800b160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	091b      	lsrs	r3, r3, #4
 800b168:	f003 0201 	and.w	r2, r3, #1
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	fa02 f303 	lsl.w	r3, r2, r3
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	4313      	orrs	r3, r2
 800b176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	2b03      	cmp	r3, #3
 800b188:	d017      	beq.n	800b1ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	2203      	movs	r2, #3
 800b196:	fa02 f303 	lsl.w	r3, r2, r3
 800b19a:	43db      	mvns	r3, r3
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	4013      	ands	r3, r2
 800b1a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d123      	bne.n	800b20e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	08da      	lsrs	r2, r3, #3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3208      	adds	r2, #8
 800b1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	220f      	movs	r2, #15
 800b1de:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e2:	43db      	mvns	r3, r3
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	08da      	lsrs	r2, r3, #3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3208      	adds	r2, #8
 800b208:	69b9      	ldr	r1, [r7, #24]
 800b20a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	2203      	movs	r2, #3
 800b21a:	fa02 f303 	lsl.w	r3, r2, r3
 800b21e:	43db      	mvns	r3, r3
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	4013      	ands	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f003 0203 	and.w	r2, r3, #3
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	fa02 f303 	lsl.w	r3, r2, r3
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	4313      	orrs	r3, r2
 800b23a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 80e0 	beq.w	800b410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b250:	4b2f      	ldr	r3, [pc, #188]	@ (800b310 <HAL_GPIO_Init+0x238>)
 800b252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b256:	4a2e      	ldr	r2, [pc, #184]	@ (800b310 <HAL_GPIO_Init+0x238>)
 800b258:	f043 0302 	orr.w	r3, r3, #2
 800b25c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b260:	4b2b      	ldr	r3, [pc, #172]	@ (800b310 <HAL_GPIO_Init+0x238>)
 800b262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b26e:	4a29      	ldr	r2, [pc, #164]	@ (800b314 <HAL_GPIO_Init+0x23c>)
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	089b      	lsrs	r3, r3, #2
 800b274:	3302      	adds	r3, #2
 800b276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	220f      	movs	r2, #15
 800b286:	fa02 f303 	lsl.w	r3, r2, r3
 800b28a:	43db      	mvns	r3, r3
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	4013      	ands	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a20      	ldr	r2, [pc, #128]	@ (800b318 <HAL_GPIO_Init+0x240>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d052      	beq.n	800b340 <HAL_GPIO_Init+0x268>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a1f      	ldr	r2, [pc, #124]	@ (800b31c <HAL_GPIO_Init+0x244>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d031      	beq.n	800b306 <HAL_GPIO_Init+0x22e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b320 <HAL_GPIO_Init+0x248>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d02b      	beq.n	800b302 <HAL_GPIO_Init+0x22a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b324 <HAL_GPIO_Init+0x24c>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d025      	beq.n	800b2fe <HAL_GPIO_Init+0x226>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b328 <HAL_GPIO_Init+0x250>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d01f      	beq.n	800b2fa <HAL_GPIO_Init+0x222>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800b32c <HAL_GPIO_Init+0x254>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d019      	beq.n	800b2f6 <HAL_GPIO_Init+0x21e>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b330 <HAL_GPIO_Init+0x258>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d013      	beq.n	800b2f2 <HAL_GPIO_Init+0x21a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a19      	ldr	r2, [pc, #100]	@ (800b334 <HAL_GPIO_Init+0x25c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00d      	beq.n	800b2ee <HAL_GPIO_Init+0x216>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a18      	ldr	r2, [pc, #96]	@ (800b338 <HAL_GPIO_Init+0x260>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d007      	beq.n	800b2ea <HAL_GPIO_Init+0x212>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a17      	ldr	r2, [pc, #92]	@ (800b33c <HAL_GPIO_Init+0x264>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d101      	bne.n	800b2e6 <HAL_GPIO_Init+0x20e>
 800b2e2:	2309      	movs	r3, #9
 800b2e4:	e02d      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2e6:	230a      	movs	r3, #10
 800b2e8:	e02b      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	e029      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2ee:	2307      	movs	r3, #7
 800b2f0:	e027      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2f2:	2306      	movs	r3, #6
 800b2f4:	e025      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2f6:	2305      	movs	r3, #5
 800b2f8:	e023      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2fa:	2304      	movs	r3, #4
 800b2fc:	e021      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b2fe:	2303      	movs	r3, #3
 800b300:	e01f      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b302:	2302      	movs	r3, #2
 800b304:	e01d      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b306:	2301      	movs	r3, #1
 800b308:	e01b      	b.n	800b342 <HAL_GPIO_Init+0x26a>
 800b30a:	bf00      	nop
 800b30c:	58000080 	.word	0x58000080
 800b310:	58024400 	.word	0x58024400
 800b314:	58000400 	.word	0x58000400
 800b318:	58020000 	.word	0x58020000
 800b31c:	58020400 	.word	0x58020400
 800b320:	58020800 	.word	0x58020800
 800b324:	58020c00 	.word	0x58020c00
 800b328:	58021000 	.word	0x58021000
 800b32c:	58021400 	.word	0x58021400
 800b330:	58021800 	.word	0x58021800
 800b334:	58021c00 	.word	0x58021c00
 800b338:	58022000 	.word	0x58022000
 800b33c:	58022400 	.word	0x58022400
 800b340:	2300      	movs	r3, #0
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	f002 0203 	and.w	r2, r2, #3
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	4093      	lsls	r3, r2
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	4313      	orrs	r3, r2
 800b350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b352:	4938      	ldr	r1, [pc, #224]	@ (800b434 <HAL_GPIO_Init+0x35c>)
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	089b      	lsrs	r3, r3, #2
 800b358:	3302      	adds	r3, #2
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	43db      	mvns	r3, r3
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	4013      	ands	r3, r2
 800b370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	4313      	orrs	r3, r2
 800b384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b38e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	43db      	mvns	r3, r3
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	4013      	ands	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b3b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	43db      	mvns	r3, r3
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d003      	beq.n	800b3e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	43db      	mvns	r3, r3
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	4313      	orrs	r3, r2
 800b408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	69ba      	ldr	r2, [r7, #24]
 800b40e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	3301      	adds	r3, #1
 800b414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	fa22 f303 	lsr.w	r3, r2, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	f47f ae63 	bne.w	800b0ec <HAL_GPIO_Init+0x14>
  }
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	3724      	adds	r7, #36	@ 0x24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	58000400 	.word	0x58000400

0800b438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	807b      	strh	r3, [r7, #2]
 800b444:	4613      	mov	r3, r2
 800b446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b448:	787b      	ldrb	r3, [r7, #1]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b44e:	887a      	ldrh	r2, [r7, #2]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b454:	e003      	b.n	800b45e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b456:	887b      	ldrh	r3, [r7, #2]
 800b458:	041a      	lsls	r2, r3, #16
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	619a      	str	r2, [r3, #24]
}
 800b45e:	bf00      	nop
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	460b      	mov	r3, r1
 800b474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b47c:	887a      	ldrh	r2, [r7, #2]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4013      	ands	r3, r2
 800b482:	041a      	lsls	r2, r3, #16
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	43d9      	mvns	r1, r3
 800b488:	887b      	ldrh	r3, [r7, #2]
 800b48a:	400b      	ands	r3, r1
 800b48c:	431a      	orrs	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	619a      	str	r2, [r3, #24]
}
 800b492:	bf00      	nop
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
	...

0800b4a0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b4a8:	4b19      	ldr	r3, [pc, #100]	@ (800b510 <HAL_PWREx_ConfigSupply+0x70>)
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d00a      	beq.n	800b4ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b4b4:	4b16      	ldr	r3, [pc, #88]	@ (800b510 <HAL_PWREx_ConfigSupply+0x70>)
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d001      	beq.n	800b4c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e01f      	b.n	800b506 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e01d      	b.n	800b506 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b4ca:	4b11      	ldr	r3, [pc, #68]	@ (800b510 <HAL_PWREx_ConfigSupply+0x70>)
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	f023 0207 	bic.w	r2, r3, #7
 800b4d2:	490f      	ldr	r1, [pc, #60]	@ (800b510 <HAL_PWREx_ConfigSupply+0x70>)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b4da:	f7fb fa9d 	bl	8006a18 <HAL_GetTick>
 800b4de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4e0:	e009      	b.n	800b4f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b4e2:	f7fb fa99 	bl	8006a18 <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b4f0:	d901      	bls.n	800b4f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e007      	b.n	800b506 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4f6:	4b06      	ldr	r3, [pc, #24]	@ (800b510 <HAL_PWREx_ConfigSupply+0x70>)
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b502:	d1ee      	bne.n	800b4e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	58024800 	.word	0x58024800

0800b514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08c      	sub	sp, #48	@ 0x30
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d102      	bne.n	800b528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	f000 bc48 	b.w	800bdb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 8088 	beq.w	800b646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b536:	4b99      	ldr	r3, [pc, #612]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b540:	4b96      	ldr	r3, [pc, #600]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b544:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	2b10      	cmp	r3, #16
 800b54a:	d007      	beq.n	800b55c <HAL_RCC_OscConfig+0x48>
 800b54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54e:	2b18      	cmp	r3, #24
 800b550:	d111      	bne.n	800b576 <HAL_RCC_OscConfig+0x62>
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d10c      	bne.n	800b576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b55c:	4b8f      	ldr	r3, [pc, #572]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d06d      	beq.n	800b644 <HAL_RCC_OscConfig+0x130>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d169      	bne.n	800b644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	f000 bc21 	b.w	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b57e:	d106      	bne.n	800b58e <HAL_RCC_OscConfig+0x7a>
 800b580:	4b86      	ldr	r3, [pc, #536]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a85      	ldr	r2, [pc, #532]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	e02e      	b.n	800b5ec <HAL_RCC_OscConfig+0xd8>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10c      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x9c>
 800b596:	4b81      	ldr	r3, [pc, #516]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a80      	ldr	r2, [pc, #512]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b59c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4b7e      	ldr	r3, [pc, #504]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a7d      	ldr	r2, [pc, #500]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e01d      	b.n	800b5ec <HAL_RCC_OscConfig+0xd8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5b8:	d10c      	bne.n	800b5d4 <HAL_RCC_OscConfig+0xc0>
 800b5ba:	4b78      	ldr	r3, [pc, #480]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a77      	ldr	r2, [pc, #476]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	4b75      	ldr	r3, [pc, #468]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a74      	ldr	r2, [pc, #464]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	e00b      	b.n	800b5ec <HAL_RCC_OscConfig+0xd8>
 800b5d4:	4b71      	ldr	r3, [pc, #452]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a70      	ldr	r2, [pc, #448]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	4b6e      	ldr	r3, [pc, #440]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a6d      	ldr	r2, [pc, #436]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b5e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d013      	beq.n	800b61c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f4:	f7fb fa10 	bl	8006a18 <HAL_GetTick>
 800b5f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5fa:	e008      	b.n	800b60e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5fc:	f7fb fa0c 	bl	8006a18 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b64      	cmp	r3, #100	@ 0x64
 800b608:	d901      	bls.n	800b60e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e3d4      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b60e:	4b63      	ldr	r3, [pc, #396]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0f0      	beq.n	800b5fc <HAL_RCC_OscConfig+0xe8>
 800b61a:	e014      	b.n	800b646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b61c:	f7fb f9fc 	bl	8006a18 <HAL_GetTick>
 800b620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b622:	e008      	b.n	800b636 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b624:	f7fb f9f8 	bl	8006a18 <HAL_GetTick>
 800b628:	4602      	mov	r2, r0
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	2b64      	cmp	r3, #100	@ 0x64
 800b630:	d901      	bls.n	800b636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	e3c0      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b636:	4b59      	ldr	r3, [pc, #356]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1f0      	bne.n	800b624 <HAL_RCC_OscConfig+0x110>
 800b642:	e000      	b.n	800b646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80ca 	beq.w	800b7e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b654:	4b51      	ldr	r3, [pc, #324]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b65c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b65e:	4b4f      	ldr	r3, [pc, #316]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b662:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d007      	beq.n	800b67a <HAL_RCC_OscConfig+0x166>
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	2b18      	cmp	r3, #24
 800b66e:	d156      	bne.n	800b71e <HAL_RCC_OscConfig+0x20a>
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d151      	bne.n	800b71e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b67a:	4b48      	ldr	r3, [pc, #288]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0304 	and.w	r3, r3, #4
 800b682:	2b00      	cmp	r3, #0
 800b684:	d005      	beq.n	800b692 <HAL_RCC_OscConfig+0x17e>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e392      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b692:	4b42      	ldr	r3, [pc, #264]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f023 0219 	bic.w	r2, r3, #25
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	493f      	ldr	r1, [pc, #252]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a4:	f7fb f9b8 	bl	8006a18 <HAL_GetTick>
 800b6a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6aa:	e008      	b.n	800b6be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6ac:	f7fb f9b4 	bl	8006a18 <HAL_GetTick>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d901      	bls.n	800b6be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e37c      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6be:	4b37      	ldr	r3, [pc, #220]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d0f0      	beq.n	800b6ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ca:	f7fb f9d5 	bl	8006a78 <HAL_GetREVID>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d817      	bhi.n	800b708 <HAL_RCC_OscConfig+0x1f4>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	2b40      	cmp	r3, #64	@ 0x40
 800b6de:	d108      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x1de>
 800b6e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b6e8:	4a2c      	ldr	r2, [pc, #176]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6f0:	e07a      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6f2:	4b2a      	ldr	r3, [pc, #168]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	031b      	lsls	r3, r3, #12
 800b700:	4926      	ldr	r1, [pc, #152]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b702:	4313      	orrs	r3, r2
 800b704:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b706:	e06f      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b708:	4b24      	ldr	r3, [pc, #144]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	061b      	lsls	r3, r3, #24
 800b716:	4921      	ldr	r1, [pc, #132]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b71c:	e064      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d047      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b726:	4b1d      	ldr	r3, [pc, #116]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f023 0219 	bic.w	r2, r3, #25
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	491a      	ldr	r1, [pc, #104]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b734:	4313      	orrs	r3, r2
 800b736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b738:	f7fb f96e 	bl	8006a18 <HAL_GetTick>
 800b73c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b73e:	e008      	b.n	800b752 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b740:	f7fb f96a 	bl	8006a18 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d901      	bls.n	800b752 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e332      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b752:	4b12      	ldr	r3, [pc, #72]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d0f0      	beq.n	800b740 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b75e:	f7fb f98b 	bl	8006a78 <HAL_GetREVID>
 800b762:	4603      	mov	r3, r0
 800b764:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b768:	4293      	cmp	r3, r2
 800b76a:	d819      	bhi.n	800b7a0 <HAL_RCC_OscConfig+0x28c>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b40      	cmp	r3, #64	@ 0x40
 800b772:	d108      	bne.n	800b786 <HAL_RCC_OscConfig+0x272>
 800b774:	4b09      	ldr	r3, [pc, #36]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b77c:	4a07      	ldr	r2, [pc, #28]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b77e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b782:	6053      	str	r3, [r2, #4]
 800b784:	e030      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
 800b786:	4b05      	ldr	r3, [pc, #20]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	031b      	lsls	r3, r3, #12
 800b794:	4901      	ldr	r1, [pc, #4]	@ (800b79c <HAL_RCC_OscConfig+0x288>)
 800b796:	4313      	orrs	r3, r2
 800b798:	604b      	str	r3, [r1, #4]
 800b79a:	e025      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
 800b79c:	58024400 	.word	0x58024400
 800b7a0:	4b9a      	ldr	r3, [pc, #616]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	4997      	ldr	r1, [pc, #604]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	604b      	str	r3, [r1, #4]
 800b7b4:	e018      	b.n	800b7e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7b6:	4b95      	ldr	r3, [pc, #596]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a94      	ldr	r2, [pc, #592]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c2:	f7fb f929 	bl	8006a18 <HAL_GetTick>
 800b7c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7c8:	e008      	b.n	800b7dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7ca:	f7fb f925 	bl	8006a18 <HAL_GetTick>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d901      	bls.n	800b7dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e2ed      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7dc:	4b8b      	ldr	r3, [pc, #556]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1f0      	bne.n	800b7ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0310 	and.w	r3, r3, #16
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 80a9 	beq.w	800b948 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7f6:	4b85      	ldr	r3, [pc, #532]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b800:	4b82      	ldr	r3, [pc, #520]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b804:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d007      	beq.n	800b81c <HAL_RCC_OscConfig+0x308>
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	2b18      	cmp	r3, #24
 800b810:	d13a      	bne.n	800b888 <HAL_RCC_OscConfig+0x374>
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f003 0303 	and.w	r3, r3, #3
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d135      	bne.n	800b888 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b81c:	4b7b      	ldr	r3, [pc, #492]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <HAL_RCC_OscConfig+0x320>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	2b80      	cmp	r3, #128	@ 0x80
 800b82e:	d001      	beq.n	800b834 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e2c1      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b834:	f7fb f920 	bl	8006a78 <HAL_GetREVID>
 800b838:	4603      	mov	r3, r0
 800b83a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b83e:	4293      	cmp	r3, r2
 800b840:	d817      	bhi.n	800b872 <HAL_RCC_OscConfig+0x35e>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	2b20      	cmp	r3, #32
 800b848:	d108      	bne.n	800b85c <HAL_RCC_OscConfig+0x348>
 800b84a:	4b70      	ldr	r3, [pc, #448]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b852:	4a6e      	ldr	r2, [pc, #440]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b858:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b85a:	e075      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b85c:	4b6b      	ldr	r3, [pc, #428]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	069b      	lsls	r3, r3, #26
 800b86a:	4968      	ldr	r1, [pc, #416]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b86c:	4313      	orrs	r3, r2
 800b86e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b870:	e06a      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b872:	4b66      	ldr	r3, [pc, #408]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a1b      	ldr	r3, [r3, #32]
 800b87e:	061b      	lsls	r3, r3, #24
 800b880:	4962      	ldr	r1, [pc, #392]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b882:	4313      	orrs	r3, r2
 800b884:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b886:	e05f      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d042      	beq.n	800b916 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b890:	4b5e      	ldr	r3, [pc, #376]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a5d      	ldr	r2, [pc, #372]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b89c:	f7fb f8bc 	bl	8006a18 <HAL_GetTick>
 800b8a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b8a4:	f7fb f8b8 	bl	8006a18 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e280      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8b6:	4b55      	ldr	r3, [pc, #340]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d0f0      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8c2:	f7fb f8d9 	bl	8006a78 <HAL_GetREVID>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d817      	bhi.n	800b900 <HAL_RCC_OscConfig+0x3ec>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a1b      	ldr	r3, [r3, #32]
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d108      	bne.n	800b8ea <HAL_RCC_OscConfig+0x3d6>
 800b8d8:	4b4c      	ldr	r3, [pc, #304]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b8e0:	4a4a      	ldr	r2, [pc, #296]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b8e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8e6:	6053      	str	r3, [r2, #4]
 800b8e8:	e02e      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
 800b8ea:	4b48      	ldr	r3, [pc, #288]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	069b      	lsls	r3, r3, #26
 800b8f8:	4944      	ldr	r1, [pc, #272]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	604b      	str	r3, [r1, #4]
 800b8fe:	e023      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
 800b900:	4b42      	ldr	r3, [pc, #264]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	061b      	lsls	r3, r3, #24
 800b90e:	493f      	ldr	r1, [pc, #252]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b910:	4313      	orrs	r3, r2
 800b912:	60cb      	str	r3, [r1, #12]
 800b914:	e018      	b.n	800b948 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b916:	4b3d      	ldr	r3, [pc, #244]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a3c      	ldr	r2, [pc, #240]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b91c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b922:	f7fb f879 	bl	8006a18 <HAL_GetTick>
 800b926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b928:	e008      	b.n	800b93c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b92a:	f7fb f875 	bl	8006a18 <HAL_GetTick>
 800b92e:	4602      	mov	r2, r0
 800b930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	2b02      	cmp	r3, #2
 800b936:	d901      	bls.n	800b93c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e23d      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b93c:	4b33      	ldr	r3, [pc, #204]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f0      	bne.n	800b92a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0308 	and.w	r3, r3, #8
 800b950:	2b00      	cmp	r3, #0
 800b952:	d036      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d019      	beq.n	800b990 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b95c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b95e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b960:	4a2a      	ldr	r2, [pc, #168]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b968:	f7fb f856 	bl	8006a18 <HAL_GetTick>
 800b96c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b970:	f7fb f852 	bl	8006a18 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e21a      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b982:	4b22      	ldr	r3, [pc, #136]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b986:	f003 0302 	and.w	r3, r3, #2
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0f0      	beq.n	800b970 <HAL_RCC_OscConfig+0x45c>
 800b98e:	e018      	b.n	800b9c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b990:	4b1e      	ldr	r3, [pc, #120]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b994:	4a1d      	ldr	r2, [pc, #116]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b996:	f023 0301 	bic.w	r3, r3, #1
 800b99a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b99c:	f7fb f83c 	bl	8006a18 <HAL_GetTick>
 800b9a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9a4:	f7fb f838 	bl	8006a18 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d901      	bls.n	800b9b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e200      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b9b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f0      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0320 	and.w	r3, r3, #32
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d039      	beq.n	800ba42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d01c      	beq.n	800ba10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a0c      	ldr	r2, [pc, #48]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b9dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b9e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b9e2:	f7fb f819 	bl	8006a18 <HAL_GetTick>
 800b9e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9e8:	e008      	b.n	800b9fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b9ea:	f7fb f815 	bl	8006a18 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d901      	bls.n	800b9fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	e1dd      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ba0c <HAL_RCC_OscConfig+0x4f8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0f0      	beq.n	800b9ea <HAL_RCC_OscConfig+0x4d6>
 800ba08:	e01b      	b.n	800ba42 <HAL_RCC_OscConfig+0x52e>
 800ba0a:	bf00      	nop
 800ba0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba10:	4b9b      	ldr	r3, [pc, #620]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a9a      	ldr	r2, [pc, #616]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800ba16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba1c:	f7fa fffc 	bl	8006a18 <HAL_GetTick>
 800ba20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba22:	e008      	b.n	800ba36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba24:	f7fa fff8 	bl	8006a18 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d901      	bls.n	800ba36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e1c0      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba36:	4b92      	ldr	r3, [pc, #584]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f0      	bne.n	800ba24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0304 	and.w	r3, r3, #4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8081 	beq.w	800bb52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba50:	4b8c      	ldr	r3, [pc, #560]	@ (800bc84 <HAL_RCC_OscConfig+0x770>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a8b      	ldr	r2, [pc, #556]	@ (800bc84 <HAL_RCC_OscConfig+0x770>)
 800ba56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba5c:	f7fa ffdc 	bl	8006a18 <HAL_GetTick>
 800ba60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba62:	e008      	b.n	800ba76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba64:	f7fa ffd8 	bl	8006a18 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	2b64      	cmp	r3, #100	@ 0x64
 800ba70:	d901      	bls.n	800ba76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e1a0      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba76:	4b83      	ldr	r3, [pc, #524]	@ (800bc84 <HAL_RCC_OscConfig+0x770>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0f0      	beq.n	800ba64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d106      	bne.n	800ba98 <HAL_RCC_OscConfig+0x584>
 800ba8a:	4b7d      	ldr	r3, [pc, #500]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800ba8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba8e:	4a7c      	ldr	r2, [pc, #496]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800ba90:	f043 0301 	orr.w	r3, r3, #1
 800ba94:	6713      	str	r3, [r2, #112]	@ 0x70
 800ba96:	e02d      	b.n	800baf4 <HAL_RCC_OscConfig+0x5e0>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10c      	bne.n	800baba <HAL_RCC_OscConfig+0x5a6>
 800baa0:	4b77      	ldr	r3, [pc, #476]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800baa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baa4:	4a76      	ldr	r2, [pc, #472]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800baac:	4b74      	ldr	r3, [pc, #464]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800baae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bab0:	4a73      	ldr	r2, [pc, #460]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bab2:	f023 0304 	bic.w	r3, r3, #4
 800bab6:	6713      	str	r3, [r2, #112]	@ 0x70
 800bab8:	e01c      	b.n	800baf4 <HAL_RCC_OscConfig+0x5e0>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	2b05      	cmp	r3, #5
 800bac0:	d10c      	bne.n	800badc <HAL_RCC_OscConfig+0x5c8>
 800bac2:	4b6f      	ldr	r3, [pc, #444]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bac6:	4a6e      	ldr	r2, [pc, #440]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bac8:	f043 0304 	orr.w	r3, r3, #4
 800bacc:	6713      	str	r3, [r2, #112]	@ 0x70
 800bace:	4b6c      	ldr	r3, [pc, #432]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bad2:	4a6b      	ldr	r2, [pc, #428]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bad4:	f043 0301 	orr.w	r3, r3, #1
 800bad8:	6713      	str	r3, [r2, #112]	@ 0x70
 800bada:	e00b      	b.n	800baf4 <HAL_RCC_OscConfig+0x5e0>
 800badc:	4b68      	ldr	r3, [pc, #416]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bae0:	4a67      	ldr	r2, [pc, #412]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bae2:	f023 0301 	bic.w	r3, r3, #1
 800bae6:	6713      	str	r3, [r2, #112]	@ 0x70
 800bae8:	4b65      	ldr	r3, [pc, #404]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800baea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baec:	4a64      	ldr	r2, [pc, #400]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800baee:	f023 0304 	bic.w	r3, r3, #4
 800baf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d015      	beq.n	800bb28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bafc:	f7fa ff8c 	bl	8006a18 <HAL_GetTick>
 800bb00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb02:	e00a      	b.n	800bb1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb04:	f7fa ff88 	bl	8006a18 <HAL_GetTick>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d901      	bls.n	800bb1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e14e      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb1a:	4b59      	ldr	r3, [pc, #356]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb1e:	f003 0302 	and.w	r3, r3, #2
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0ee      	beq.n	800bb04 <HAL_RCC_OscConfig+0x5f0>
 800bb26:	e014      	b.n	800bb52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb28:	f7fa ff76 	bl	8006a18 <HAL_GetTick>
 800bb2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb2e:	e00a      	b.n	800bb46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb30:	f7fa ff72 	bl	8006a18 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d901      	bls.n	800bb46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e138      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb46:	4b4e      	ldr	r3, [pc, #312]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb4a:	f003 0302 	and.w	r3, r3, #2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1ee      	bne.n	800bb30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 812d 	beq.w	800bdb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bb5c:	4b48      	ldr	r3, [pc, #288]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb64:	2b18      	cmp	r3, #24
 800bb66:	f000 80bd 	beq.w	800bce4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	f040 809e 	bne.w	800bcb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb74:	4b42      	ldr	r3, [pc, #264]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a41      	ldr	r2, [pc, #260]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb80:	f7fa ff4a 	bl	8006a18 <HAL_GetTick>
 800bb84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb86:	e008      	b.n	800bb9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb88:	f7fa ff46 	bl	8006a18 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	d901      	bls.n	800bb9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bb96:	2303      	movs	r3, #3
 800bb98:	e10e      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb9a:	4b39      	ldr	r3, [pc, #228]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1f0      	bne.n	800bb88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bba6:	4b36      	ldr	r3, [pc, #216]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbaa:	4b37      	ldr	r3, [pc, #220]	@ (800bc88 <HAL_RCC_OscConfig+0x774>)
 800bbac:	4013      	ands	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bbb6:	0112      	lsls	r2, r2, #4
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	4931      	ldr	r1, [pc, #196]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	628b      	str	r3, [r1, #40]	@ 0x28
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	025b      	lsls	r3, r3, #9
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	061b      	lsls	r3, r3, #24
 800bbec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbf0:	4923      	ldr	r1, [pc, #140]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bbf6:	4b22      	ldr	r3, [pc, #136]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfa:	4a21      	ldr	r2, [pc, #132]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc02:	4b1f      	ldr	r3, [pc, #124]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc06:	4b21      	ldr	r3, [pc, #132]	@ (800bc8c <HAL_RCC_OscConfig+0x778>)
 800bc08:	4013      	ands	r3, r2
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bc0e:	00d2      	lsls	r2, r2, #3
 800bc10:	491b      	ldr	r1, [pc, #108]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc12:	4313      	orrs	r3, r2
 800bc14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc16:	4b1a      	ldr	r3, [pc, #104]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1a:	f023 020c 	bic.w	r2, r3, #12
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc22:	4917      	ldr	r1, [pc, #92]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc28:	4b15      	ldr	r3, [pc, #84]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	f023 0202 	bic.w	r2, r3, #2
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc34:	4912      	ldr	r1, [pc, #72]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc3a:	4b11      	ldr	r3, [pc, #68]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	4a10      	ldr	r2, [pc, #64]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc46:	4b0e      	ldr	r3, [pc, #56]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4a:	4a0d      	ldr	r2, [pc, #52]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bc52:	4b0b      	ldr	r3, [pc, #44]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	4a0a      	ldr	r2, [pc, #40]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bc5e:	4b08      	ldr	r3, [pc, #32]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc62:	4a07      	ldr	r2, [pc, #28]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc64:	f043 0301 	orr.w	r3, r3, #1
 800bc68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc6a:	4b05      	ldr	r3, [pc, #20]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a04      	ldr	r2, [pc, #16]	@ (800bc80 <HAL_RCC_OscConfig+0x76c>)
 800bc70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc76:	f7fa fecf 	bl	8006a18 <HAL_GetTick>
 800bc7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc7c:	e011      	b.n	800bca2 <HAL_RCC_OscConfig+0x78e>
 800bc7e:	bf00      	nop
 800bc80:	58024400 	.word	0x58024400
 800bc84:	58024800 	.word	0x58024800
 800bc88:	fffffc0c 	.word	0xfffffc0c
 800bc8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc90:	f7fa fec2 	bl	8006a18 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d901      	bls.n	800bca2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e08a      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bca2:	4b47      	ldr	r3, [pc, #284]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f0      	beq.n	800bc90 <HAL_RCC_OscConfig+0x77c>
 800bcae:	e082      	b.n	800bdb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb0:	4b43      	ldr	r3, [pc, #268]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a42      	ldr	r2, [pc, #264]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bcb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bcba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcbc:	f7fa feac 	bl	8006a18 <HAL_GetTick>
 800bcc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcc2:	e008      	b.n	800bcd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc4:	f7fa fea8 	bl	8006a18 <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d901      	bls.n	800bcd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e070      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcd6:	4b3a      	ldr	r3, [pc, #232]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1f0      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x7b0>
 800bce2:	e068      	b.n	800bdb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bce4:	4b36      	ldr	r3, [pc, #216]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bcea:	4b35      	ldr	r3, [pc, #212]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bcec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d031      	beq.n	800bd5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f003 0203 	and.w	r2, r3, #3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d12a      	bne.n	800bd5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	091b      	lsrs	r3, r3, #4
 800bd0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d122      	bne.n	800bd5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d11a      	bne.n	800bd5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	0a5b      	lsrs	r3, r3, #9
 800bd2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d111      	bne.n	800bd5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	0c1b      	lsrs	r3, r3, #16
 800bd3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d108      	bne.n	800bd5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	0e1b      	lsrs	r3, r3, #24
 800bd4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d001      	beq.n	800bd60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e02b      	b.n	800bdb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bd60:	4b17      	ldr	r3, [pc, #92]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd64:	08db      	lsrs	r3, r3, #3
 800bd66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d01f      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bd76:	4b12      	ldr	r3, [pc, #72]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7a:	4a11      	ldr	r2, [pc, #68]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bd7c:	f023 0301 	bic.w	r3, r3, #1
 800bd80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd82:	f7fa fe49 	bl	8006a18 <HAL_GetTick>
 800bd86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bd88:	bf00      	nop
 800bd8a:	f7fa fe45 	bl	8006a18 <HAL_GetTick>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d0f9      	beq.n	800bd8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd96:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bd98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <HAL_RCC_OscConfig+0x8b0>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bda2:	00d2      	lsls	r2, r2, #3
 800bda4:	4906      	ldr	r1, [pc, #24]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bda6:	4313      	orrs	r3, r2
 800bda8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bdaa:	4b05      	ldr	r3, [pc, #20]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdae:	4a04      	ldr	r2, [pc, #16]	@ (800bdc0 <HAL_RCC_OscConfig+0x8ac>)
 800bdb0:	f043 0301 	orr.w	r3, r3, #1
 800bdb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3730      	adds	r7, #48	@ 0x30
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	58024400 	.word	0x58024400
 800bdc4:	ffff0007 	.word	0xffff0007

0800bdc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e19c      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bddc:	4b8a      	ldr	r3, [pc, #552]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d910      	bls.n	800be0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdea:	4b87      	ldr	r3, [pc, #540]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f023 020f 	bic.w	r2, r3, #15
 800bdf2:	4985      	ldr	r1, [pc, #532]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdfa:	4b83      	ldr	r3, [pc, #524]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 030f 	and.w	r3, r3, #15
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d001      	beq.n	800be0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e184      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d010      	beq.n	800be3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691a      	ldr	r2, [r3, #16]
 800be1c:	4b7b      	ldr	r3, [pc, #492]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be24:	429a      	cmp	r2, r3
 800be26:	d908      	bls.n	800be3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be28:	4b78      	ldr	r3, [pc, #480]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	4975      	ldr	r1, [pc, #468]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be36:	4313      	orrs	r3, r2
 800be38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0308 	and.w	r3, r3, #8
 800be42:	2b00      	cmp	r3, #0
 800be44:	d010      	beq.n	800be68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695a      	ldr	r2, [r3, #20]
 800be4a:	4b70      	ldr	r3, [pc, #448]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be52:	429a      	cmp	r2, r3
 800be54:	d908      	bls.n	800be68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be56:	4b6d      	ldr	r3, [pc, #436]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be58:	69db      	ldr	r3, [r3, #28]
 800be5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	496a      	ldr	r1, [pc, #424]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be64:	4313      	orrs	r3, r2
 800be66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0310 	and.w	r3, r3, #16
 800be70:	2b00      	cmp	r3, #0
 800be72:	d010      	beq.n	800be96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	699a      	ldr	r2, [r3, #24]
 800be78:	4b64      	ldr	r3, [pc, #400]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be80:	429a      	cmp	r2, r3
 800be82:	d908      	bls.n	800be96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be84:	4b61      	ldr	r3, [pc, #388]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	495e      	ldr	r1, [pc, #376]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800be92:	4313      	orrs	r3, r2
 800be94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0320 	and.w	r3, r3, #32
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d010      	beq.n	800bec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	69da      	ldr	r2, [r3, #28]
 800bea6:	4b59      	ldr	r3, [pc, #356]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800beae:	429a      	cmp	r2, r3
 800beb0:	d908      	bls.n	800bec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800beb2:	4b56      	ldr	r3, [pc, #344]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	4953      	ldr	r1, [pc, #332]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d010      	beq.n	800bef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68da      	ldr	r2, [r3, #12]
 800bed4:	4b4d      	ldr	r3, [pc, #308]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	f003 030f 	and.w	r3, r3, #15
 800bedc:	429a      	cmp	r2, r3
 800bede:	d908      	bls.n	800bef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bee0:	4b4a      	ldr	r3, [pc, #296]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	f023 020f 	bic.w	r2, r3, #15
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	4947      	ldr	r1, [pc, #284]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d055      	beq.n	800bfaa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800befe:	4b43      	ldr	r3, [pc, #268]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	4940      	ldr	r1, [pc, #256]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d107      	bne.n	800bf28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf18:	4b3c      	ldr	r3, [pc, #240]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d121      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e0f6      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d107      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf30:	4b36      	ldr	r3, [pc, #216]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d115      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e0ea      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d107      	bne.n	800bf58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf48:	4b30      	ldr	r3, [pc, #192]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d109      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e0de      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf58:	4b2c      	ldr	r3, [pc, #176]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e0d6      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf68:	4b28      	ldr	r3, [pc, #160]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	f023 0207 	bic.w	r2, r3, #7
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	4925      	ldr	r1, [pc, #148]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf76:	4313      	orrs	r3, r2
 800bf78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf7a:	f7fa fd4d 	bl	8006a18 <HAL_GetTick>
 800bf7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf80:	e00a      	b.n	800bf98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf82:	f7fa fd49 	bl	8006a18 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d901      	bls.n	800bf98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e0be      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf98:	4b1c      	ldr	r3, [pc, #112]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d1eb      	bne.n	800bf82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d010      	beq.n	800bfd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	4b14      	ldr	r3, [pc, #80]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d208      	bcs.n	800bfd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfc6:	4b11      	ldr	r3, [pc, #68]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	f023 020f 	bic.w	r2, r3, #15
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	490e      	ldr	r1, [pc, #56]	@ (800c00c <HAL_RCC_ClockConfig+0x244>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfd8:	4b0b      	ldr	r3, [pc, #44]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d214      	bcs.n	800c010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfe6:	4b08      	ldr	r3, [pc, #32]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f023 020f 	bic.w	r2, r3, #15
 800bfee:	4906      	ldr	r1, [pc, #24]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bff6:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <HAL_RCC_ClockConfig+0x240>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d005      	beq.n	800c010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e086      	b.n	800c116 <HAL_RCC_ClockConfig+0x34e>
 800c008:	52002000 	.word	0x52002000
 800c00c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 0304 	and.w	r3, r3, #4
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d010      	beq.n	800c03e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	4b3f      	ldr	r3, [pc, #252]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c028:	429a      	cmp	r2, r3
 800c02a:	d208      	bcs.n	800c03e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c02c:	4b3c      	ldr	r3, [pc, #240]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	4939      	ldr	r1, [pc, #228]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f003 0308 	and.w	r3, r3, #8
 800c046:	2b00      	cmp	r3, #0
 800c048:	d010      	beq.n	800c06c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	695a      	ldr	r2, [r3, #20]
 800c04e:	4b34      	ldr	r3, [pc, #208]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c050:	69db      	ldr	r3, [r3, #28]
 800c052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c056:	429a      	cmp	r2, r3
 800c058:	d208      	bcs.n	800c06c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c05a:	4b31      	ldr	r3, [pc, #196]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	492e      	ldr	r1, [pc, #184]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b00      	cmp	r3, #0
 800c076:	d010      	beq.n	800c09a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	699a      	ldr	r2, [r3, #24]
 800c07c:	4b28      	ldr	r3, [pc, #160]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c084:	429a      	cmp	r2, r3
 800c086:	d208      	bcs.n	800c09a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c088:	4b25      	ldr	r3, [pc, #148]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	4922      	ldr	r1, [pc, #136]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c096:	4313      	orrs	r3, r2
 800c098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0320 	and.w	r3, r3, #32
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d010      	beq.n	800c0c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	69da      	ldr	r2, [r3, #28]
 800c0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d208      	bcs.n	800c0c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	4917      	ldr	r1, [pc, #92]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c0c8:	f000 f834 	bl	800c134 <HAL_RCC_GetSysClockFreq>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	4b14      	ldr	r3, [pc, #80]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	0a1b      	lsrs	r3, r3, #8
 800c0d4:	f003 030f 	and.w	r3, r3, #15
 800c0d8:	4912      	ldr	r1, [pc, #72]	@ (800c124 <HAL_RCC_ClockConfig+0x35c>)
 800c0da:	5ccb      	ldrb	r3, [r1, r3]
 800c0dc:	f003 031f 	and.w	r3, r3, #31
 800c0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c120 <HAL_RCC_ClockConfig+0x358>)
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	f003 030f 	and.w	r3, r3, #15
 800c0ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c124 <HAL_RCC_ClockConfig+0x35c>)
 800c0f0:	5cd3      	ldrb	r3, [r2, r3]
 800c0f2:	f003 031f 	and.w	r3, r3, #31
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c128 <HAL_RCC_ClockConfig+0x360>)
 800c0fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c100:	4a0a      	ldr	r2, [pc, #40]	@ (800c12c <HAL_RCC_ClockConfig+0x364>)
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c106:	4b0a      	ldr	r3, [pc, #40]	@ (800c130 <HAL_RCC_ClockConfig+0x368>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fa f8d0 	bl	80062b0 <HAL_InitTick>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	58024400 	.word	0x58024400
 800c124:	08017ecc 	.word	0x08017ecc
 800c128:	24000068 	.word	0x24000068
 800c12c:	24000064 	.word	0x24000064
 800c130:	24000084 	.word	0x24000084

0800c134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c134:	b480      	push	{r7}
 800c136:	b089      	sub	sp, #36	@ 0x24
 800c138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c13a:	4bb3      	ldr	r3, [pc, #716]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c142:	2b18      	cmp	r3, #24
 800c144:	f200 8155 	bhi.w	800c3f2 <HAL_RCC_GetSysClockFreq+0x2be>
 800c148:	a201      	add	r2, pc, #4	@ (adr r2, 800c150 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14e:	bf00      	nop
 800c150:	0800c1b5 	.word	0x0800c1b5
 800c154:	0800c3f3 	.word	0x0800c3f3
 800c158:	0800c3f3 	.word	0x0800c3f3
 800c15c:	0800c3f3 	.word	0x0800c3f3
 800c160:	0800c3f3 	.word	0x0800c3f3
 800c164:	0800c3f3 	.word	0x0800c3f3
 800c168:	0800c3f3 	.word	0x0800c3f3
 800c16c:	0800c3f3 	.word	0x0800c3f3
 800c170:	0800c1db 	.word	0x0800c1db
 800c174:	0800c3f3 	.word	0x0800c3f3
 800c178:	0800c3f3 	.word	0x0800c3f3
 800c17c:	0800c3f3 	.word	0x0800c3f3
 800c180:	0800c3f3 	.word	0x0800c3f3
 800c184:	0800c3f3 	.word	0x0800c3f3
 800c188:	0800c3f3 	.word	0x0800c3f3
 800c18c:	0800c3f3 	.word	0x0800c3f3
 800c190:	0800c1e1 	.word	0x0800c1e1
 800c194:	0800c3f3 	.word	0x0800c3f3
 800c198:	0800c3f3 	.word	0x0800c3f3
 800c19c:	0800c3f3 	.word	0x0800c3f3
 800c1a0:	0800c3f3 	.word	0x0800c3f3
 800c1a4:	0800c3f3 	.word	0x0800c3f3
 800c1a8:	0800c3f3 	.word	0x0800c3f3
 800c1ac:	0800c3f3 	.word	0x0800c3f3
 800c1b0:	0800c1e7 	.word	0x0800c1e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1b4:	4b94      	ldr	r3, [pc, #592]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0320 	and.w	r3, r3, #32
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d009      	beq.n	800c1d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c0:	4b91      	ldr	r3, [pc, #580]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	08db      	lsrs	r3, r3, #3
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	4a90      	ldr	r2, [pc, #576]	@ (800c40c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c1d2:	e111      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c1d4:	4b8d      	ldr	r3, [pc, #564]	@ (800c40c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1d6:	61bb      	str	r3, [r7, #24]
      break;
 800c1d8:	e10e      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c1da:	4b8d      	ldr	r3, [pc, #564]	@ (800c410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1dc:	61bb      	str	r3, [r7, #24]
      break;
 800c1de:	e10b      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c1e0:	4b8c      	ldr	r3, [pc, #560]	@ (800c414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c1e2:	61bb      	str	r3, [r7, #24]
      break;
 800c1e4:	e108      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1e6:	4b88      	ldr	r3, [pc, #544]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c1f0:	4b85      	ldr	r3, [pc, #532]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f4:	091b      	lsrs	r3, r3, #4
 800c1f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c1fc:	4b82      	ldr	r3, [pc, #520]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c206:	4b80      	ldr	r3, [pc, #512]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c20a:	08db      	lsrs	r3, r3, #3
 800c20c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	fb02 f303 	mul.w	r3, r2, r3
 800c216:	ee07 3a90 	vmov	s15, r3
 800c21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 80e1 	beq.w	800c3ec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	f000 8083 	beq.w	800c338 <HAL_RCC_GetSysClockFreq+0x204>
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2b02      	cmp	r3, #2
 800c236:	f200 80a1 	bhi.w	800c37c <HAL_RCC_GetSysClockFreq+0x248>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <HAL_RCC_GetSysClockFreq+0x114>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d056      	beq.n	800c2f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c246:	e099      	b.n	800c37c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c248:	4b6f      	ldr	r3, [pc, #444]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0320 	and.w	r3, r3, #32
 800c250:	2b00      	cmp	r3, #0
 800c252:	d02d      	beq.n	800c2b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c254:	4b6c      	ldr	r3, [pc, #432]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	08db      	lsrs	r3, r3, #3
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	4a6b      	ldr	r2, [pc, #428]	@ (800c40c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c260:	fa22 f303 	lsr.w	r3, r2, r3
 800c264:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	ee07 3a90 	vmov	s15, r3
 800c276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c27e:	4b62      	ldr	r3, [pc, #392]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c28e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c292:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c2ae:	e087      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c41c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2c2:	4b51      	ldr	r3, [pc, #324]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c2f2:	e065      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	ee07 3a90 	vmov	s15, r3
 800c2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c306:	4b40      	ldr	r3, [pc, #256]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c316:	ed97 6a02 	vldr	s12, [r7, #8]
 800c31a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c336:	e043      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c342:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c424 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c34a:	4b2f      	ldr	r3, [pc, #188]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c352:	ee07 3a90 	vmov	s15, r3
 800c356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c35a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c35e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c36a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c37a:	e021      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c386:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38e:	4b1e      	ldr	r3, [pc, #120]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c3c0:	4b11      	ldr	r3, [pc, #68]	@ (800c408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3c4:	0a5b      	lsrs	r3, r3, #9
 800c3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e4:	ee17 3a90 	vmov	r3, s15
 800c3e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c3ea:	e005      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
      break;
 800c3f0:	e002      	b.n	800c3f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c3f2:	4b07      	ldr	r3, [pc, #28]	@ (800c410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c3f4:	61bb      	str	r3, [r7, #24]
      break;
 800c3f6:	bf00      	nop
  }

  return sysclockfreq;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3724      	adds	r7, #36	@ 0x24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	58024400 	.word	0x58024400
 800c40c:	03d09000 	.word	0x03d09000
 800c410:	003d0900 	.word	0x003d0900
 800c414:	007a1200 	.word	0x007a1200
 800c418:	46000000 	.word	0x46000000
 800c41c:	4c742400 	.word	0x4c742400
 800c420:	4a742400 	.word	0x4a742400
 800c424:	4af42400 	.word	0x4af42400

0800c428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c42e:	f7ff fe81 	bl	800c134 <HAL_RCC_GetSysClockFreq>
 800c432:	4602      	mov	r2, r0
 800c434:	4b10      	ldr	r3, [pc, #64]	@ (800c478 <HAL_RCC_GetHCLKFreq+0x50>)
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	0a1b      	lsrs	r3, r3, #8
 800c43a:	f003 030f 	and.w	r3, r3, #15
 800c43e:	490f      	ldr	r1, [pc, #60]	@ (800c47c <HAL_RCC_GetHCLKFreq+0x54>)
 800c440:	5ccb      	ldrb	r3, [r1, r3]
 800c442:	f003 031f 	and.w	r3, r3, #31
 800c446:	fa22 f303 	lsr.w	r3, r2, r3
 800c44a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <HAL_RCC_GetHCLKFreq+0x50>)
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	f003 030f 	and.w	r3, r3, #15
 800c454:	4a09      	ldr	r2, [pc, #36]	@ (800c47c <HAL_RCC_GetHCLKFreq+0x54>)
 800c456:	5cd3      	ldrb	r3, [r2, r3]
 800c458:	f003 031f 	and.w	r3, r3, #31
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	fa22 f303 	lsr.w	r3, r2, r3
 800c462:	4a07      	ldr	r2, [pc, #28]	@ (800c480 <HAL_RCC_GetHCLKFreq+0x58>)
 800c464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c466:	4a07      	ldr	r2, [pc, #28]	@ (800c484 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c46c:	4b04      	ldr	r3, [pc, #16]	@ (800c480 <HAL_RCC_GetHCLKFreq+0x58>)
 800c46e:	681b      	ldr	r3, [r3, #0]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	58024400 	.word	0x58024400
 800c47c:	08017ecc 	.word	0x08017ecc
 800c480:	24000068 	.word	0x24000068
 800c484:	24000064 	.word	0x24000064

0800c488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c48c:	f7ff ffcc 	bl	800c428 <HAL_RCC_GetHCLKFreq>
 800c490:	4602      	mov	r2, r0
 800c492:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	091b      	lsrs	r3, r3, #4
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	4904      	ldr	r1, [pc, #16]	@ (800c4b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c49e:	5ccb      	ldrb	r3, [r1, r3]
 800c4a0:	f003 031f 	and.w	r3, r3, #31
 800c4a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	08017ecc 	.word	0x08017ecc

0800c4b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c4b8:	f7ff ffb6 	bl	800c428 <HAL_RCC_GetHCLKFreq>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	4b06      	ldr	r3, [pc, #24]	@ (800c4d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c4c0:	69db      	ldr	r3, [r3, #28]
 800c4c2:	0a1b      	lsrs	r3, r3, #8
 800c4c4:	f003 0307 	and.w	r3, r3, #7
 800c4c8:	4904      	ldr	r1, [pc, #16]	@ (800c4dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800c4ca:	5ccb      	ldrb	r3, [r1, r3]
 800c4cc:	f003 031f 	and.w	r3, r3, #31
 800c4d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	58024400 	.word	0x58024400
 800c4dc:	08017ecc 	.word	0x08017ecc

0800c4e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	223f      	movs	r2, #63	@ 0x3f
 800c4ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	f003 0207 	and.w	r2, r3, #7
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c4fc:	4b17      	ldr	r3, [pc, #92]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c508:	4b14      	ldr	r3, [pc, #80]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	f003 020f 	and.w	r2, r3, #15
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c514:	4b11      	ldr	r3, [pc, #68]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c520:	4b0e      	ldr	r3, [pc, #56]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c52c:	4b0b      	ldr	r3, [pc, #44]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c538:	4b08      	ldr	r3, [pc, #32]	@ (800c55c <HAL_RCC_GetClockConfig+0x7c>)
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c544:	4b06      	ldr	r3, [pc, #24]	@ (800c560 <HAL_RCC_GetClockConfig+0x80>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 020f 	and.w	r2, r3, #15
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	58024400 	.word	0x58024400
 800c560:	52002000 	.word	0x52002000

0800c564 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c568:	b0ca      	sub	sp, #296	@ 0x128
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c576:	2300      	movs	r3, #0
 800c578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c588:	2500      	movs	r5, #0
 800c58a:	ea54 0305 	orrs.w	r3, r4, r5
 800c58e:	d049      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c596:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c59a:	d02f      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c59c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5a0:	d828      	bhi.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5a6:	d01a      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c5a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5ac:	d822      	bhi.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c5b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5b6:	d007      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c5b8:	e01c      	b.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5ba:	4bb8      	ldr	r3, [pc, #736]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5be:	4ab7      	ldr	r2, [pc, #732]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5c6:	e01a      	b.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 fc8f 	bl	800def4 <RCCEx_PLL2_Config>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5dc:	e00f      	b.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5e2:	3328      	adds	r3, #40	@ 0x28
 800c5e4:	2102      	movs	r1, #2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f001 fd36 	bl	800e058 <RCCEx_PLL3_Config>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5f2:	e004      	b.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c5fa:	e000      	b.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10a      	bne.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c606:	4ba5      	ldr	r3, [pc, #660]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c60a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c614:	4aa1      	ldr	r2, [pc, #644]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c616:	430b      	orrs	r3, r1
 800c618:	6513      	str	r3, [r2, #80]	@ 0x50
 800c61a:	e003      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c61c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c630:	f04f 0900 	mov.w	r9, #0
 800c634:	ea58 0309 	orrs.w	r3, r8, r9
 800c638:	d047      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c640:	2b04      	cmp	r3, #4
 800c642:	d82a      	bhi.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c644:	a201      	add	r2, pc, #4	@ (adr r2, 800c64c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64a:	bf00      	nop
 800c64c:	0800c661 	.word	0x0800c661
 800c650:	0800c66f 	.word	0x0800c66f
 800c654:	0800c685 	.word	0x0800c685
 800c658:	0800c6a3 	.word	0x0800c6a3
 800c65c:	0800c6a3 	.word	0x0800c6a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c660:	4b8e      	ldr	r3, [pc, #568]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c664:	4a8d      	ldr	r2, [pc, #564]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c66a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c66c:	e01a      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c672:	3308      	adds	r3, #8
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f001 fc3c 	bl	800def4 <RCCEx_PLL2_Config>
 800c67c:	4603      	mov	r3, r0
 800c67e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c682:	e00f      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c688:	3328      	adds	r3, #40	@ 0x28
 800c68a:	2100      	movs	r1, #0
 800c68c:	4618      	mov	r0, r3
 800c68e:	f001 fce3 	bl	800e058 <RCCEx_PLL3_Config>
 800c692:	4603      	mov	r3, r0
 800c694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c698:	e004      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c6a0:	e000      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10a      	bne.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c6ac:	4b7b      	ldr	r3, [pc, #492]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b0:	f023 0107 	bic.w	r1, r3, #7
 800c6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ba:	4a78      	ldr	r2, [pc, #480]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	6513      	str	r3, [r2, #80]	@ 0x50
 800c6c0:	e003      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800c6d6:	f04f 0b00 	mov.w	fp, #0
 800c6da:	ea5a 030b 	orrs.w	r3, sl, fp
 800c6de:	d04c      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6ea:	d030      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c6ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6f0:	d829      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c6f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6f4:	d02d      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c6f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6f8:	d825      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c6fa:	2b80      	cmp	r3, #128	@ 0x80
 800c6fc:	d018      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c6fe:	2b80      	cmp	r3, #128	@ 0x80
 800c700:	d821      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c706:	2b40      	cmp	r3, #64	@ 0x40
 800c708:	d007      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c70a:	e01c      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c70c:	4b63      	ldr	r3, [pc, #396]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c710:	4a62      	ldr	r2, [pc, #392]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c718:	e01c      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c71e:	3308      	adds	r3, #8
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f001 fbe6 	bl	800def4 <RCCEx_PLL2_Config>
 800c728:	4603      	mov	r3, r0
 800c72a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c72e:	e011      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c734:	3328      	adds	r3, #40	@ 0x28
 800c736:	2100      	movs	r1, #0
 800c738:	4618      	mov	r0, r3
 800c73a:	f001 fc8d 	bl	800e058 <RCCEx_PLL3_Config>
 800c73e:	4603      	mov	r3, r0
 800c740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c744:	e006      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c74c:	e002      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c74e:	bf00      	nop
 800c750:	e000      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c752:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c75c:	4b4f      	ldr	r3, [pc, #316]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c75e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c760:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800c764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c76a:	4a4c      	ldr	r2, [pc, #304]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c76c:	430b      	orrs	r3, r1
 800c76e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c770:	e003      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800c786:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800c78a:	2300      	movs	r3, #0
 800c78c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c790:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800c794:	460b      	mov	r3, r1
 800c796:	4313      	orrs	r3, r2
 800c798:	d053      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c79e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c7a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7a6:	d035      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c7a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7ac:	d82e      	bhi.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c7ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c7b2:	d031      	beq.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c7b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c7b8:	d828      	bhi.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c7ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7be:	d01a      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c7c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7c4:	d822      	bhi.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d003      	beq.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c7ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7ce:	d007      	beq.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c7d0:	e01c      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7d2:	4b32      	ldr	r3, [pc, #200]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d6:	4a31      	ldr	r2, [pc, #196]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7de:	e01c      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 fb83 	bl	800def4 <RCCEx_PLL2_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c7f4:	e011      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7fa:	3328      	adds	r3, #40	@ 0x28
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 fc2a 	bl	800e058 <RCCEx_PLL3_Config>
 800c804:	4603      	mov	r3, r0
 800c806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c80a:	e006      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c812:	e002      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c814:	bf00      	nop
 800c816:	e000      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c81a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10b      	bne.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c822:	4b1e      	ldr	r3, [pc, #120]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c826:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c82e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c832:	4a1a      	ldr	r2, [pc, #104]	@ (800c89c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c834:	430b      	orrs	r3, r1
 800c836:	6593      	str	r3, [r2, #88]	@ 0x58
 800c838:	e003      	b.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c83e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c84e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c852:	2300      	movs	r3, #0
 800c854:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c858:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800c85c:	460b      	mov	r3, r1
 800c85e:	4313      	orrs	r3, r2
 800c860:	d056      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c86a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c86e:	d038      	beq.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c870:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c874:	d831      	bhi.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c876:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c87a:	d034      	beq.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c87c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c880:	d82b      	bhi.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c882:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c886:	d01d      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c88c:	d825      	bhi.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d006      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c896:	d00a      	beq.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c898:	e01f      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c89a:	bf00      	nop
 800c89c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8a0:	4ba2      	ldr	r3, [pc, #648]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a4:	4aa1      	ldr	r2, [pc, #644]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8ac:	e01c      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f001 fb1c 	bl	800def4 <RCCEx_PLL2_Config>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c8c2:	e011      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8c8:	3328      	adds	r3, #40	@ 0x28
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 fbc3 	bl	800e058 <RCCEx_PLL3_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8d8:	e006      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c8e0:	e002      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c8e2:	bf00      	nop
 800c8e4:	e000      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c8e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c8f0:	4b8e      	ldr	r3, [pc, #568]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c900:	4a8a      	ldr	r2, [pc, #552]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c902:	430b      	orrs	r3, r1
 800c904:	6593      	str	r3, [r2, #88]	@ 0x58
 800c906:	e003      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c90c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c91c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c920:	2300      	movs	r3, #0
 800c922:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c926:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c92a:	460b      	mov	r3, r1
 800c92c:	4313      	orrs	r3, r2
 800c92e:	d03a      	beq.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c936:	2b30      	cmp	r3, #48	@ 0x30
 800c938:	d01f      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c93a:	2b30      	cmp	r3, #48	@ 0x30
 800c93c:	d819      	bhi.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c93e:	2b20      	cmp	r3, #32
 800c940:	d00c      	beq.n	800c95c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c942:	2b20      	cmp	r3, #32
 800c944:	d815      	bhi.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d019      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c94a:	2b10      	cmp	r3, #16
 800c94c:	d111      	bne.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c94e:	4b77      	ldr	r3, [pc, #476]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c952:	4a76      	ldr	r2, [pc, #472]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c95a:	e011      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c960:	3308      	adds	r3, #8
 800c962:	2102      	movs	r1, #2
 800c964:	4618      	mov	r0, r3
 800c966:	f001 fac5 	bl	800def4 <RCCEx_PLL2_Config>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c970:	e006      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c978:	e002      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c97a:	bf00      	nop
 800c97c:	e000      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c97e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c988:	4b68      	ldr	r3, [pc, #416]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c98a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c98c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c996:	4a65      	ldr	r2, [pc, #404]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c998:	430b      	orrs	r3, r1
 800c99a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c99c:	e003      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c99e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c9b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c9bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	d051      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9d0:	d035      	beq.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c9d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9d6:	d82e      	bhi.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9dc:	d031      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c9de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9e2:	d828      	bhi.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9e8:	d01a      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c9ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9ee:	d822      	bhi.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d003      	beq.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c9f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9f8:	d007      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c9fa:	e01c      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9fc:	4b4b      	ldr	r3, [pc, #300]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca00:	4a4a      	ldr	r2, [pc, #296]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca08:	e01c      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca0e:	3308      	adds	r3, #8
 800ca10:	2100      	movs	r1, #0
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 fa6e 	bl	800def4 <RCCEx_PLL2_Config>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca1e:	e011      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca24:	3328      	adds	r3, #40	@ 0x28
 800ca26:	2100      	movs	r1, #0
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f001 fb15 	bl	800e058 <RCCEx_PLL3_Config>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca34:	e006      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca3c:	e002      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca3e:	bf00      	nop
 800ca40:	e000      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ca4c:	4b37      	ldr	r3, [pc, #220]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ca54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca5a:	4a34      	ldr	r2, [pc, #208]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca5c:	430b      	orrs	r3, r1
 800ca5e:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca60:	e003      	b.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ca6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ca76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ca80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ca84:	460b      	mov	r3, r1
 800ca86:	4313      	orrs	r3, r2
 800ca88:	d056      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca94:	d033      	beq.n	800cafe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ca96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca9a:	d82c      	bhi.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caa0:	d02f      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800caa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800caa6:	d826      	bhi.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800caa8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800caac:	d02b      	beq.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800caae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cab2:	d820      	bhi.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cab8:	d012      	beq.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800caba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cabe:	d81a      	bhi.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d022      	beq.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cac8:	d115      	bne.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800caca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cace:	3308      	adds	r3, #8
 800cad0:	2101      	movs	r1, #1
 800cad2:	4618      	mov	r0, r3
 800cad4:	f001 fa0e 	bl	800def4 <RCCEx_PLL2_Config>
 800cad8:	4603      	mov	r3, r0
 800cada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cade:	e015      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cae4:	3328      	adds	r3, #40	@ 0x28
 800cae6:	2101      	movs	r1, #1
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 fab5 	bl	800e058 <RCCEx_PLL3_Config>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800caf4:	e00a      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cafc:	e006      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cafe:	bf00      	nop
 800cb00:	e004      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb02:	bf00      	nop
 800cb04:	e002      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb06:	bf00      	nop
 800cb08:	e000      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cb0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10d      	bne.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cb14:	4b05      	ldr	r3, [pc, #20]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb22:	4a02      	ldr	r2, [pc, #8]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb24:	430b      	orrs	r3, r1
 800cb26:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb28:	e006      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb2a:	bf00      	nop
 800cb2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cb44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cb4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4313      	orrs	r3, r2
 800cb56:	d055      	beq.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb64:	d033      	beq.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cb66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb6a:	d82c      	bhi.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb70:	d02f      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cb72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb76:	d826      	bhi.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb7c:	d02b      	beq.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cb7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb82:	d820      	bhi.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb88:	d012      	beq.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cb8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb8e:	d81a      	bhi.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d022      	beq.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cb94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb98:	d115      	bne.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb9e:	3308      	adds	r3, #8
 800cba0:	2101      	movs	r1, #1
 800cba2:	4618      	mov	r0, r3
 800cba4:	f001 f9a6 	bl	800def4 <RCCEx_PLL2_Config>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cbae:	e015      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbb4:	3328      	adds	r3, #40	@ 0x28
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f001 fa4d 	bl	800e058 <RCCEx_PLL3_Config>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cbc4:	e00a      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cbcc:	e006      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbce:	bf00      	nop
 800cbd0:	e004      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbd2:	bf00      	nop
 800cbd4:	e002      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbd6:	bf00      	nop
 800cbd8:	e000      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10b      	bne.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cbe4:	4ba3      	ldr	r3, [pc, #652]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbe8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cbf4:	4a9f      	ldr	r2, [pc, #636]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbfa:	e003      	b.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cc10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cc14:	2300      	movs	r3, #0
 800cc16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cc1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4313      	orrs	r3, r2
 800cc22:	d037      	beq.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc2e:	d00e      	beq.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cc30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc34:	d816      	bhi.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d018      	beq.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cc3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc3e:	d111      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc40:	4b8c      	ldr	r3, [pc, #560]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc44:	4a8b      	ldr	r2, [pc, #556]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc4c:	e00f      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc52:	3308      	adds	r3, #8
 800cc54:	2101      	movs	r1, #1
 800cc56:	4618      	mov	r0, r3
 800cc58:	f001 f94c 	bl	800def4 <RCCEx_PLL2_Config>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc62:	e004      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc6a:	e000      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cc6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cc76:	4b7f      	ldr	r3, [pc, #508]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc84:	4a7b      	ldr	r2, [pc, #492]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc86:	430b      	orrs	r3, r1
 800cc88:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc8a:	e003      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cca4:	2300      	movs	r3, #0
 800cca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ccaa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	d039      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ccb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d81c      	bhi.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ccbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800cd01 	.word	0x0800cd01
 800ccc8:	0800ccd5 	.word	0x0800ccd5
 800cccc:	0800cce3 	.word	0x0800cce3
 800ccd0:	0800cd01 	.word	0x0800cd01
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccd4:	4b67      	ldr	r3, [pc, #412]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd8:	4a66      	ldr	r2, [pc, #408]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cce0:	e00f      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cce6:	3308      	adds	r3, #8
 800cce8:	2102      	movs	r1, #2
 800ccea:	4618      	mov	r0, r3
 800ccec:	f001 f902 	bl	800def4 <RCCEx_PLL2_Config>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ccf6:	e004      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ccfe:	e000      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800cd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10a      	bne.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cd0a:	4b5a      	ldr	r3, [pc, #360]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd0e:	f023 0103 	bic.w	r1, r3, #3
 800cd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd18:	4a56      	ldr	r2, [pc, #344]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cd1e:	e003      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cd34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cd42:	460b      	mov	r3, r1
 800cd44:	4313      	orrs	r3, r2
 800cd46:	f000 809f 	beq.w	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd4a:	4b4b      	ldr	r3, [pc, #300]	@ (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a4a      	ldr	r2, [pc, #296]	@ (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd56:	f7f9 fe5f 	bl	8006a18 <HAL_GetTick>
 800cd5a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd5e:	e00b      	b.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd60:	f7f9 fe5a 	bl	8006a18 <HAL_GetTick>
 800cd64:	4602      	mov	r2, r0
 800cd66:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	2b64      	cmp	r3, #100	@ 0x64
 800cd6e:	d903      	bls.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd76:	e005      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd78:	4b3f      	ldr	r3, [pc, #252]	@ (800ce78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0ed      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cd84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d179      	bne.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd8c:	4b39      	ldr	r3, [pc, #228]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cd98:	4053      	eors	r3, r2
 800cd9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d015      	beq.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cda2:	4b34      	ldr	r3, [pc, #208]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cda4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cda6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdaa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cdae:	4b31      	ldr	r3, [pc, #196]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdb2:	4a30      	ldr	r2, [pc, #192]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cdb8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cdba:	4b2e      	ldr	r3, [pc, #184]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdbe:	4a2d      	ldr	r2, [pc, #180]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdc4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cdc6:	4a2b      	ldr	r2, [pc, #172]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cdcc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cdd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdda:	d118      	bne.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cddc:	f7f9 fe1c 	bl	8006a18 <HAL_GetTick>
 800cde0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cde4:	e00d      	b.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cde6:	f7f9 fe17 	bl	8006a18 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cdf0:	1ad2      	subs	r2, r2, r3
 800cdf2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d903      	bls.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ce00:	e005      	b.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce02:	4b1c      	ldr	r3, [pc, #112]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce06:	f003 0302 	and.w	r3, r3, #2
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0eb      	beq.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ce0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d129      	bne.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce26:	d10e      	bne.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ce28:	4b12      	ldr	r3, [pc, #72]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ce30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce38:	091a      	lsrs	r2, r3, #4
 800ce3a:	4b10      	ldr	r3, [pc, #64]	@ (800ce7c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce40:	430b      	orrs	r3, r1
 800ce42:	6113      	str	r3, [r2, #16]
 800ce44:	e005      	b.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ce46:	4b0b      	ldr	r3, [pc, #44]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce50:	6113      	str	r3, [r2, #16]
 800ce52:	4b08      	ldr	r3, [pc, #32]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce54:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ce56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce62:	4a04      	ldr	r2, [pc, #16]	@ (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce64:	430b      	orrs	r3, r1
 800ce66:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce68:	e00e      	b.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ce72:	e009      	b.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ce74:	58024400 	.word	0x58024400
 800ce78:	58024800 	.word	0x58024800
 800ce7c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce90:	f002 0301 	and.w	r3, r2, #1
 800ce94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4313      	orrs	r3, r2
 800cea6:	f000 8089 	beq.w	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ceaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ceae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ceb0:	2b28      	cmp	r3, #40	@ 0x28
 800ceb2:	d86b      	bhi.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ceb4:	a201      	add	r2, pc, #4	@ (adr r2, 800cebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ceb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceba:	bf00      	nop
 800cebc:	0800cf95 	.word	0x0800cf95
 800cec0:	0800cf8d 	.word	0x0800cf8d
 800cec4:	0800cf8d 	.word	0x0800cf8d
 800cec8:	0800cf8d 	.word	0x0800cf8d
 800cecc:	0800cf8d 	.word	0x0800cf8d
 800ced0:	0800cf8d 	.word	0x0800cf8d
 800ced4:	0800cf8d 	.word	0x0800cf8d
 800ced8:	0800cf8d 	.word	0x0800cf8d
 800cedc:	0800cf61 	.word	0x0800cf61
 800cee0:	0800cf8d 	.word	0x0800cf8d
 800cee4:	0800cf8d 	.word	0x0800cf8d
 800cee8:	0800cf8d 	.word	0x0800cf8d
 800ceec:	0800cf8d 	.word	0x0800cf8d
 800cef0:	0800cf8d 	.word	0x0800cf8d
 800cef4:	0800cf8d 	.word	0x0800cf8d
 800cef8:	0800cf8d 	.word	0x0800cf8d
 800cefc:	0800cf77 	.word	0x0800cf77
 800cf00:	0800cf8d 	.word	0x0800cf8d
 800cf04:	0800cf8d 	.word	0x0800cf8d
 800cf08:	0800cf8d 	.word	0x0800cf8d
 800cf0c:	0800cf8d 	.word	0x0800cf8d
 800cf10:	0800cf8d 	.word	0x0800cf8d
 800cf14:	0800cf8d 	.word	0x0800cf8d
 800cf18:	0800cf8d 	.word	0x0800cf8d
 800cf1c:	0800cf95 	.word	0x0800cf95
 800cf20:	0800cf8d 	.word	0x0800cf8d
 800cf24:	0800cf8d 	.word	0x0800cf8d
 800cf28:	0800cf8d 	.word	0x0800cf8d
 800cf2c:	0800cf8d 	.word	0x0800cf8d
 800cf30:	0800cf8d 	.word	0x0800cf8d
 800cf34:	0800cf8d 	.word	0x0800cf8d
 800cf38:	0800cf8d 	.word	0x0800cf8d
 800cf3c:	0800cf95 	.word	0x0800cf95
 800cf40:	0800cf8d 	.word	0x0800cf8d
 800cf44:	0800cf8d 	.word	0x0800cf8d
 800cf48:	0800cf8d 	.word	0x0800cf8d
 800cf4c:	0800cf8d 	.word	0x0800cf8d
 800cf50:	0800cf8d 	.word	0x0800cf8d
 800cf54:	0800cf8d 	.word	0x0800cf8d
 800cf58:	0800cf8d 	.word	0x0800cf8d
 800cf5c:	0800cf95 	.word	0x0800cf95
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf64:	3308      	adds	r3, #8
 800cf66:	2101      	movs	r1, #1
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f000 ffc3 	bl	800def4 <RCCEx_PLL2_Config>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf74:	e00f      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf7a:	3328      	adds	r3, #40	@ 0x28
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 f86a 	bl	800e058 <RCCEx_PLL3_Config>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf8a:	e004      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf92:	e000      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cf94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf9e:	4bbf      	ldr	r3, [pc, #764]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfa2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cfac:	4abb      	ldr	r2, [pc, #748]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfae:	430b      	orrs	r3, r1
 800cfb0:	6553      	str	r3, [r2, #84]	@ 0x54
 800cfb2:	e003      	b.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cfbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f002 0302 	and.w	r3, r2, #2
 800cfc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cfd2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	d041      	beq.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d824      	bhi.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d039 	.word	0x0800d039
 800cff0:	0800d005 	.word	0x0800d005
 800cff4:	0800d01b 	.word	0x0800d01b
 800cff8:	0800d039 	.word	0x0800d039
 800cffc:	0800d039 	.word	0x0800d039
 800d000:	0800d039 	.word	0x0800d039
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d008:	3308      	adds	r3, #8
 800d00a:	2101      	movs	r1, #1
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 ff71 	bl	800def4 <RCCEx_PLL2_Config>
 800d012:	4603      	mov	r3, r0
 800d014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d018:	e00f      	b.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d01e:	3328      	adds	r3, #40	@ 0x28
 800d020:	2101      	movs	r1, #1
 800d022:	4618      	mov	r0, r3
 800d024:	f001 f818 	bl	800e058 <RCCEx_PLL3_Config>
 800d028:	4603      	mov	r3, r0
 800d02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d02e:	e004      	b.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d036:	e000      	b.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d03a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10a      	bne.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d042:	4b96      	ldr	r3, [pc, #600]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d046:	f023 0107 	bic.w	r1, r3, #7
 800d04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d050:	4a92      	ldr	r2, [pc, #584]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d052:	430b      	orrs	r3, r1
 800d054:	6553      	str	r3, [r2, #84]	@ 0x54
 800d056:	e003      	b.n	800d060 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d05c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	f002 0304 	and.w	r3, r2, #4
 800d06c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d070:	2300      	movs	r3, #0
 800d072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d076:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4313      	orrs	r3, r2
 800d07e:	d044      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d088:	2b05      	cmp	r3, #5
 800d08a:	d825      	bhi.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d08c:	a201      	add	r2, pc, #4	@ (adr r2, 800d094 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d092:	bf00      	nop
 800d094:	0800d0e1 	.word	0x0800d0e1
 800d098:	0800d0ad 	.word	0x0800d0ad
 800d09c:	0800d0c3 	.word	0x0800d0c3
 800d0a0:	0800d0e1 	.word	0x0800d0e1
 800d0a4:	0800d0e1 	.word	0x0800d0e1
 800d0a8:	0800d0e1 	.word	0x0800d0e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 ff1d 	bl	800def4 <RCCEx_PLL2_Config>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d0c0:	e00f      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0c6:	3328      	adds	r3, #40	@ 0x28
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 ffc4 	bl	800e058 <RCCEx_PLL3_Config>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d0d6:	e004      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d0de:	e000      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0ea:	4b6c      	ldr	r3, [pc, #432]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ee:	f023 0107 	bic.w	r1, r3, #7
 800d0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0fa:	4a68      	ldr	r2, [pc, #416]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800d100:	e003      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	f002 0320 	and.w	r3, r2, #32
 800d116:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d11a:	2300      	movs	r3, #0
 800d11c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d124:	460b      	mov	r3, r1
 800d126:	4313      	orrs	r3, r2
 800d128:	d055      	beq.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d136:	d033      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d13c:	d82c      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d142:	d02f      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d148:	d826      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d14a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d14e:	d02b      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d150:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d154:	d820      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d15a:	d012      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d15c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d160:	d81a      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d162:	2b00      	cmp	r3, #0
 800d164:	d022      	beq.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d16a:	d115      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d170:	3308      	adds	r3, #8
 800d172:	2100      	movs	r1, #0
 800d174:	4618      	mov	r0, r3
 800d176:	f000 febd 	bl	800def4 <RCCEx_PLL2_Config>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d180:	e015      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d186:	3328      	adds	r3, #40	@ 0x28
 800d188:	2102      	movs	r1, #2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 ff64 	bl	800e058 <RCCEx_PLL3_Config>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d196:	e00a      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d19e:	e006      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1a0:	bf00      	nop
 800d1a2:	e004      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1a4:	bf00      	nop
 800d1a6:	e002      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1a8:	bf00      	nop
 800d1aa:	e000      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1b6:	4b39      	ldr	r3, [pc, #228]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c6:	4a35      	ldr	r2, [pc, #212]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1c8:	430b      	orrs	r3, r1
 800d1ca:	6553      	str	r3, [r2, #84]	@ 0x54
 800d1cc:	e003      	b.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d1ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	d058      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d1fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d202:	d033      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d204:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d208:	d82c      	bhi.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d20a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d20e:	d02f      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d214:	d826      	bhi.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d21a:	d02b      	beq.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d21c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d220:	d820      	bhi.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d226:	d012      	beq.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d22c:	d81a      	bhi.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d022      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d236:	d115      	bne.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d23c:	3308      	adds	r3, #8
 800d23e:	2100      	movs	r1, #0
 800d240:	4618      	mov	r0, r3
 800d242:	f000 fe57 	bl	800def4 <RCCEx_PLL2_Config>
 800d246:	4603      	mov	r3, r0
 800d248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d24c:	e015      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d252:	3328      	adds	r3, #40	@ 0x28
 800d254:	2102      	movs	r1, #2
 800d256:	4618      	mov	r0, r3
 800d258:	f000 fefe 	bl	800e058 <RCCEx_PLL3_Config>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d262:	e00a      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d26a:	e006      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d26c:	bf00      	nop
 800d26e:	e004      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d270:	bf00      	nop
 800d272:	e002      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d274:	bf00      	nop
 800d276:	e000      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d27a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10e      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d282:	4b06      	ldr	r3, [pc, #24]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d286:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d28e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d292:	4a02      	ldr	r2, [pc, #8]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d294:	430b      	orrs	r3, r1
 800d296:	6593      	str	r3, [r2, #88]	@ 0x58
 800d298:	e006      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d29a:	bf00      	nop
 800d29c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d2b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d2be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	d055      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d2d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d2d4:	d033      	beq.n	800d33e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d2d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d2da:	d82c      	bhi.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2e0:	d02f      	beq.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d2e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2e6:	d826      	bhi.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2ec:	d02b      	beq.n	800d346 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d2ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2f2:	d820      	bhi.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2f8:	d012      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d2fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2fe:	d81a      	bhi.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d300:	2b00      	cmp	r3, #0
 800d302:	d022      	beq.n	800d34a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d308:	d115      	bne.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d30e:	3308      	adds	r3, #8
 800d310:	2100      	movs	r1, #0
 800d312:	4618      	mov	r0, r3
 800d314:	f000 fdee 	bl	800def4 <RCCEx_PLL2_Config>
 800d318:	4603      	mov	r3, r0
 800d31a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d31e:	e015      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d324:	3328      	adds	r3, #40	@ 0x28
 800d326:	2102      	movs	r1, #2
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 fe95 	bl	800e058 <RCCEx_PLL3_Config>
 800d32e:	4603      	mov	r3, r0
 800d330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d334:	e00a      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d33c:	e006      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d33e:	bf00      	nop
 800d340:	e004      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d342:	bf00      	nop
 800d344:	e002      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d346:	bf00      	nop
 800d348:	e000      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d34c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10b      	bne.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d354:	4ba1      	ldr	r3, [pc, #644]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d358:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d364:	4a9d      	ldr	r2, [pc, #628]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d366:	430b      	orrs	r3, r1
 800d368:	6593      	str	r3, [r2, #88]	@ 0x58
 800d36a:	e003      	b.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d36c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	f002 0308 	and.w	r3, r2, #8
 800d380:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d384:	2300      	movs	r3, #0
 800d386:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d38a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d38e:	460b      	mov	r3, r1
 800d390:	4313      	orrs	r3, r2
 800d392:	d01e      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d39c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3a0:	d10c      	bne.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3a6:	3328      	adds	r3, #40	@ 0x28
 800d3a8:	2102      	movs	r1, #2
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fe54 	bl	800e058 <RCCEx_PLL3_Config>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d002      	beq.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d3bc:	4b87      	ldr	r3, [pc, #540]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3cc:	4a83      	ldr	r2, [pc, #524]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3ce:	430b      	orrs	r3, r1
 800d3d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	f002 0310 	and.w	r3, r2, #16
 800d3de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	d01e      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3fe:	d10c      	bne.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d404:	3328      	adds	r3, #40	@ 0x28
 800d406:	2102      	movs	r1, #2
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 fe25 	bl	800e058 <RCCEx_PLL3_Config>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d41a:	4b70      	ldr	r3, [pc, #448]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d41e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d426:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d42a:	4a6c      	ldr	r2, [pc, #432]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d42c:	430b      	orrs	r3, r1
 800d42e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d43c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d440:	2300      	movs	r3, #0
 800d442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d446:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d44a:	460b      	mov	r3, r1
 800d44c:	4313      	orrs	r3, r2
 800d44e:	d03e      	beq.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d45c:	d022      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d45e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d462:	d81b      	bhi.n	800d49c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d46c:	d00b      	beq.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d46e:	e015      	b.n	800d49c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d474:	3308      	adds	r3, #8
 800d476:	2100      	movs	r1, #0
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fd3b 	bl	800def4 <RCCEx_PLL2_Config>
 800d47e:	4603      	mov	r3, r0
 800d480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d484:	e00f      	b.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d48a:	3328      	adds	r3, #40	@ 0x28
 800d48c:	2102      	movs	r1, #2
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fde2 	bl	800e058 <RCCEx_PLL3_Config>
 800d494:	4603      	mov	r3, r0
 800d496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d49a:	e004      	b.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4a2:	e000      	b.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10b      	bne.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d4ae:	4b4b      	ldr	r3, [pc, #300]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d4be:	4a47      	ldr	r2, [pc, #284]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4c0:	430b      	orrs	r3, r1
 800d4c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4c4:	e003      	b.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d4da:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4dc:	2300      	movs	r3, #0
 800d4de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	d03b      	beq.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4f6:	d01f      	beq.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d4f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4fc:	d818      	bhi.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d4fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d502:	d003      	beq.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d504:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d508:	d007      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d50a:	e011      	b.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d50c:	4b33      	ldr	r3, [pc, #204]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d510:	4a32      	ldr	r2, [pc, #200]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d518:	e00f      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d51e:	3328      	adds	r3, #40	@ 0x28
 800d520:	2101      	movs	r1, #1
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fd98 	bl	800e058 <RCCEx_PLL3_Config>
 800d528:	4603      	mov	r3, r0
 800d52a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d52e:	e004      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d536:	e000      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d53a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10b      	bne.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d542:	4b26      	ldr	r3, [pc, #152]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d546:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d552:	4a22      	ldr	r2, [pc, #136]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d554:	430b      	orrs	r3, r1
 800d556:	6553      	str	r3, [r2, #84]	@ 0x54
 800d558:	e003      	b.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d56e:	673b      	str	r3, [r7, #112]	@ 0x70
 800d570:	2300      	movs	r3, #0
 800d572:	677b      	str	r3, [r7, #116]	@ 0x74
 800d574:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d578:	460b      	mov	r3, r1
 800d57a:	4313      	orrs	r3, r2
 800d57c:	d034      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d58c:	d007      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d58e:	e011      	b.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d590:	4b12      	ldr	r3, [pc, #72]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d594:	4a11      	ldr	r2, [pc, #68]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d59a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d59c:	e00e      	b.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	2102      	movs	r1, #2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 fca4 	bl	800def4 <RCCEx_PLL2_Config>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d5b2:	e003      	b.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10d      	bne.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5d2:	4a02      	ldr	r2, [pc, #8]	@ (800d5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d5d8:	e006      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d5da:	bf00      	nop
 800d5dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d5f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d5fe:	460b      	mov	r3, r1
 800d600:	4313      	orrs	r3, r2
 800d602:	d00c      	beq.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d608:	3328      	adds	r3, #40	@ 0x28
 800d60a:	2102      	movs	r1, #2
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 fd23 	bl	800e058 <RCCEx_PLL3_Config>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d62a:	663b      	str	r3, [r7, #96]	@ 0x60
 800d62c:	2300      	movs	r3, #0
 800d62e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d630:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d634:	460b      	mov	r3, r1
 800d636:	4313      	orrs	r3, r2
 800d638:	d038      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d646:	d018      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d64c:	d811      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d64e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d652:	d014      	beq.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d658:	d80b      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d011      	beq.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d65e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d662:	d106      	bne.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d664:	4bc3      	ldr	r3, [pc, #780]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d668:	4ac2      	ldr	r2, [pc, #776]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d66a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d66e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d670:	e008      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d678:	e004      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d67a:	bf00      	nop
 800d67c:	e002      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d67e:	bf00      	nop
 800d680:	e000      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d682:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10b      	bne.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d68c:	4bb9      	ldr	r3, [pc, #740]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d68e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d690:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d69c:	4ab5      	ldr	r2, [pc, #724]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d6a2:	e003      	b.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d6b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	d009      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d6c8:	4baa      	ldr	r3, [pc, #680]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6d6:	4aa7      	ldr	r2, [pc, #668]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6d8:	430b      	orrs	r3, r1
 800d6da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800d6e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	d00a      	beq.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d6f8:	4b9e      	ldr	r3, [pc, #632]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800d700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d704:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d708:	4a9a      	ldr	r2, [pc, #616]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d70a:	430b      	orrs	r3, r1
 800d70c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d71a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d71c:	2300      	movs	r3, #0
 800d71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d720:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d724:	460b      	mov	r3, r1
 800d726:	4313      	orrs	r3, r2
 800d728:	d009      	beq.n	800d73e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d72a:	4b92      	ldr	r3, [pc, #584]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d72e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d738:	4a8e      	ldr	r2, [pc, #568]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d73a:	430b      	orrs	r3, r1
 800d73c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d74a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d74c:	2300      	movs	r3, #0
 800d74e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d750:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d754:	460b      	mov	r3, r1
 800d756:	4313      	orrs	r3, r2
 800d758:	d00e      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d75a:	4b86      	ldr	r3, [pc, #536]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	4a85      	ldr	r2, [pc, #532]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d760:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d764:	6113      	str	r3, [r2, #16]
 800d766:	4b83      	ldr	r3, [pc, #524]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d768:	6919      	ldr	r1, [r3, #16]
 800d76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d76e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d772:	4a80      	ldr	r2, [pc, #512]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d774:	430b      	orrs	r3, r1
 800d776:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d784:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d786:	2300      	movs	r3, #0
 800d788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d78a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d78e:	460b      	mov	r3, r1
 800d790:	4313      	orrs	r3, r2
 800d792:	d009      	beq.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d794:	4b77      	ldr	r3, [pc, #476]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d798:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a2:	4a74      	ldr	r2, [pc, #464]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7a4:	430b      	orrs	r3, r1
 800d7a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	d00a      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d7c4:	4b6b      	ldr	r3, [pc, #428]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d7d4:	4a67      	ldr	r2, [pc, #412]	@ (800d974 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7d6:	430b      	orrs	r3, r1
 800d7d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	d011      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fb78 	bl	800def4 <RCCEx_PLL2_Config>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d80a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	2100      	movs	r1, #0
 800d824:	6239      	str	r1, [r7, #32]
 800d826:	f003 0302 	and.w	r3, r3, #2
 800d82a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d82c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d830:	460b      	mov	r3, r1
 800d832:	4313      	orrs	r3, r2
 800d834:	d011      	beq.n	800d85a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d83a:	3308      	adds	r3, #8
 800d83c:	2101      	movs	r1, #1
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 fb58 	bl	800def4 <RCCEx_PLL2_Config>
 800d844:	4603      	mov	r3, r0
 800d846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d84a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	2100      	movs	r1, #0
 800d864:	61b9      	str	r1, [r7, #24]
 800d866:	f003 0304 	and.w	r3, r3, #4
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d870:	460b      	mov	r3, r1
 800d872:	4313      	orrs	r3, r2
 800d874:	d011      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d87a:	3308      	adds	r3, #8
 800d87c:	2102      	movs	r1, #2
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fb38 	bl	800def4 <RCCEx_PLL2_Config>
 800d884:	4603      	mov	r3, r0
 800d886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d88a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	6139      	str	r1, [r7, #16]
 800d8a6:	f003 0308 	and.w	r3, r3, #8
 800d8aa:	617b      	str	r3, [r7, #20]
 800d8ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	d011      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ba:	3328      	adds	r3, #40	@ 0x28
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fbca 	bl	800e058 <RCCEx_PLL3_Config>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800d8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	f003 0310 	and.w	r3, r3, #16
 800d8ea:	60fb      	str	r3, [r7, #12]
 800d8ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	d011      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8fa:	3328      	adds	r3, #40	@ 0x28
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 fbaa 	bl	800e058 <RCCEx_PLL3_Config>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d003      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	2100      	movs	r1, #0
 800d924:	6039      	str	r1, [r7, #0]
 800d926:	f003 0320 	and.w	r3, r3, #32
 800d92a:	607b      	str	r3, [r7, #4]
 800d92c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d930:	460b      	mov	r3, r1
 800d932:	4313      	orrs	r3, r2
 800d934:	d011      	beq.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d93a:	3328      	adds	r3, #40	@ 0x28
 800d93c:	2102      	movs	r1, #2
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 fb8a 	bl	800e058 <RCCEx_PLL3_Config>
 800d944:	4603      	mov	r3, r0
 800d946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800d95a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	e000      	b.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d966:	2301      	movs	r3, #1
}
 800d968:	4618      	mov	r0, r3
 800d96a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800d96e:	46bd      	mov	sp, r7
 800d970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d974:	58024400 	.word	0x58024400

0800d978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d97c:	f7fe fd54 	bl	800c428 <HAL_RCC_GetHCLKFreq>
 800d980:	4602      	mov	r2, r0
 800d982:	4b06      	ldr	r3, [pc, #24]	@ (800d99c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	091b      	lsrs	r3, r3, #4
 800d988:	f003 0307 	and.w	r3, r3, #7
 800d98c:	4904      	ldr	r1, [pc, #16]	@ (800d9a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d98e:	5ccb      	ldrb	r3, [r1, r3]
 800d990:	f003 031f 	and.w	r3, r3, #31
 800d994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d998:	4618      	mov	r0, r3
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	58024400 	.word	0x58024400
 800d9a0:	08017ecc 	.word	0x08017ecc

0800d9a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b089      	sub	sp, #36	@ 0x24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d9ac:	4ba1      	ldr	r3, [pc, #644]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b0:	f003 0303 	and.w	r3, r3, #3
 800d9b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d9b6:	4b9f      	ldr	r3, [pc, #636]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ba:	0b1b      	lsrs	r3, r3, #12
 800d9bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d9c2:	4b9c      	ldr	r3, [pc, #624]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c6:	091b      	lsrs	r3, r3, #4
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d9ce:	4b99      	ldr	r3, [pc, #612]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9d2:	08db      	lsrs	r3, r3, #3
 800d9d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	fb02 f303 	mul.w	r3, r2, r3
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 8111 	beq.w	800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	f000 8083 	beq.w	800db00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	f200 80a1 	bhi.w	800db44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d056      	beq.n	800dabc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800da0e:	e099      	b.n	800db44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da10:	4b88      	ldr	r3, [pc, #544]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 0320 	and.w	r3, r3, #32
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d02d      	beq.n	800da78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da1c:	4b85      	ldr	r3, [pc, #532]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	08db      	lsrs	r3, r3, #3
 800da22:	f003 0303 	and.w	r3, r3, #3
 800da26:	4a84      	ldr	r2, [pc, #528]	@ (800dc38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800da28:	fa22 f303 	lsr.w	r3, r2, r3
 800da2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	ee07 3a90 	vmov	s15, r3
 800da3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da46:	4b7b      	ldr	r3, [pc, #492]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da4e:	ee07 3a90 	vmov	s15, r3
 800da52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da56:	ed97 6a03 	vldr	s12, [r7, #12]
 800da5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da76:	e087      	b.n	800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	ee07 3a90 	vmov	s15, r3
 800da7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800da86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da8a:	4b6a      	ldr	r3, [pc, #424]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800daa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800daba:	e065      	b.n	800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	ee07 3a90 	vmov	s15, r3
 800dac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dc44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800daca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dace:	4b59      	ldr	r3, [pc, #356]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad6:	ee07 3a90 	vmov	s15, r3
 800dada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dade:	ed97 6a03 	vldr	s12, [r7, #12]
 800dae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800daea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800daee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dafa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dafe:	e043      	b.n	800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	ee07 3a90 	vmov	s15, r3
 800db06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800db0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db12:	4b48      	ldr	r3, [pc, #288]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1a:	ee07 3a90 	vmov	s15, r3
 800db1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db22:	ed97 6a03 	vldr	s12, [r7, #12]
 800db26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db42:	e021      	b.n	800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	ee07 3a90 	vmov	s15, r3
 800db4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dc44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800db52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db56:	4b37      	ldr	r3, [pc, #220]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db5e:	ee07 3a90 	vmov	s15, r3
 800db62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db66:	ed97 6a03 	vldr	s12, [r7, #12]
 800db6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dc3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800db88:	4b2a      	ldr	r3, [pc, #168]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db8c:	0a5b      	lsrs	r3, r3, #9
 800db8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db92:	ee07 3a90 	vmov	s15, r3
 800db96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbae:	ee17 2a90 	vmov	r2, s15
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dbb6:	4b1f      	ldr	r3, [pc, #124]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbba:	0c1b      	lsrs	r3, r3, #16
 800dbbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbc0:	ee07 3a90 	vmov	s15, r3
 800dbc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbdc:	ee17 2a90 	vmov	r2, s15
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800dbe4:	4b13      	ldr	r3, [pc, #76]	@ (800dc34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe8:	0e1b      	lsrs	r3, r3, #24
 800dbea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbee:	ee07 3a90 	vmov	s15, r3
 800dbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc0a:	ee17 2a90 	vmov	r2, s15
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dc12:	e008      	b.n	800dc26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	609a      	str	r2, [r3, #8]
}
 800dc26:	bf00      	nop
 800dc28:	3724      	adds	r7, #36	@ 0x24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	58024400 	.word	0x58024400
 800dc38:	03d09000 	.word	0x03d09000
 800dc3c:	46000000 	.word	0x46000000
 800dc40:	4c742400 	.word	0x4c742400
 800dc44:	4a742400 	.word	0x4a742400
 800dc48:	4af42400 	.word	0x4af42400

0800dc4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b089      	sub	sp, #36	@ 0x24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dc54:	4ba1      	ldr	r3, [pc, #644]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc58:	f003 0303 	and.w	r3, r3, #3
 800dc5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dc5e:	4b9f      	ldr	r3, [pc, #636]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc62:	0d1b      	lsrs	r3, r3, #20
 800dc64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dc6a:	4b9c      	ldr	r3, [pc, #624]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc6e:	0a1b      	lsrs	r3, r3, #8
 800dc70:	f003 0301 	and.w	r3, r3, #1
 800dc74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dc76:	4b99      	ldr	r3, [pc, #612]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc7a:	08db      	lsrs	r3, r3, #3
 800dc7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	fb02 f303 	mul.w	r3, r2, r3
 800dc86:	ee07 3a90 	vmov	s15, r3
 800dc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 8111 	beq.w	800debc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	f000 8083 	beq.w	800dda8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	f200 80a1 	bhi.w	800ddec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d056      	beq.n	800dd64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dcb6:	e099      	b.n	800ddec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcb8:	4b88      	ldr	r3, [pc, #544]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 0320 	and.w	r3, r3, #32
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d02d      	beq.n	800dd20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dcc4:	4b85      	ldr	r3, [pc, #532]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	08db      	lsrs	r3, r3, #3
 800dcca:	f003 0303 	and.w	r3, r3, #3
 800dcce:	4a84      	ldr	r2, [pc, #528]	@ (800dee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dcd0:	fa22 f303 	lsr.w	r3, r2, r3
 800dcd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	ee07 3a90 	vmov	s15, r3
 800dcdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	ee07 3a90 	vmov	s15, r3
 800dce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcee:	4b7b      	ldr	r3, [pc, #492]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcf6:	ee07 3a90 	vmov	s15, r3
 800dcfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dd1e:	e087      	b.n	800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	ee07 3a90 	vmov	s15, r3
 800dd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd32:	4b6a      	ldr	r3, [pc, #424]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd3a:	ee07 3a90 	vmov	s15, r3
 800dd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd62:	e065      	b.n	800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	ee07 3a90 	vmov	s15, r3
 800dd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800deec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd76:	4b59      	ldr	r3, [pc, #356]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd7e:	ee07 3a90 	vmov	s15, r3
 800dd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dda2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dda6:	e043      	b.n	800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	ee07 3a90 	vmov	s15, r3
 800ddae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800def0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ddb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddba:	4b48      	ldr	r3, [pc, #288]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc2:	ee07 3a90 	vmov	s15, r3
 800ddc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddea:	e021      	b.n	800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	ee07 3a90 	vmov	s15, r3
 800ddf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800deec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ddfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddfe:	4b37      	ldr	r3, [pc, #220]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de06:	ee07 3a90 	vmov	s15, r3
 800de0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800de12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800de30:	4b2a      	ldr	r3, [pc, #168]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de34:	0a5b      	lsrs	r3, r3, #9
 800de36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de3a:	ee07 3a90 	vmov	s15, r3
 800de3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800de4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de56:	ee17 2a90 	vmov	r2, s15
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800de5e:	4b1f      	ldr	r3, [pc, #124]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de62:	0c1b      	lsrs	r3, r3, #16
 800de64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de68:	ee07 3a90 	vmov	s15, r3
 800de6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de78:	edd7 6a07 	vldr	s13, [r7, #28]
 800de7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de84:	ee17 2a90 	vmov	r2, s15
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800de8c:	4b13      	ldr	r3, [pc, #76]	@ (800dedc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de90:	0e1b      	lsrs	r3, r3, #24
 800de92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de96:	ee07 3a90 	vmov	s15, r3
 800de9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800deaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800deae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800deb2:	ee17 2a90 	vmov	r2, s15
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800deba:	e008      	b.n	800dece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	609a      	str	r2, [r3, #8]
}
 800dece:	bf00      	nop
 800ded0:	3724      	adds	r7, #36	@ 0x24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	58024400 	.word	0x58024400
 800dee0:	03d09000 	.word	0x03d09000
 800dee4:	46000000 	.word	0x46000000
 800dee8:	4c742400 	.word	0x4c742400
 800deec:	4a742400 	.word	0x4a742400
 800def0:	4af42400 	.word	0x4af42400

0800def4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800df02:	4b53      	ldr	r3, [pc, #332]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d101      	bne.n	800df12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	e099      	b.n	800e046 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800df12:	4b4f      	ldr	r3, [pc, #316]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a4e      	ldr	r2, [pc, #312]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df1e:	f7f8 fd7b 	bl	8006a18 <HAL_GetTick>
 800df22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df24:	e008      	b.n	800df38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df26:	f7f8 fd77 	bl	8006a18 <HAL_GetTick>
 800df2a:	4602      	mov	r2, r0
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	2b02      	cmp	r3, #2
 800df32:	d901      	bls.n	800df38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df34:	2303      	movs	r3, #3
 800df36:	e086      	b.n	800e046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df38:	4b45      	ldr	r3, [pc, #276]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1f0      	bne.n	800df26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800df44:	4b42      	ldr	r3, [pc, #264]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	031b      	lsls	r3, r3, #12
 800df52:	493f      	ldr	r1, [pc, #252]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df54:	4313      	orrs	r3, r2
 800df56:	628b      	str	r3, [r1, #40]	@ 0x28
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	3b01      	subs	r3, #1
 800df68:	025b      	lsls	r3, r3, #9
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	431a      	orrs	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	3b01      	subs	r3, #1
 800df74:	041b      	lsls	r3, r3, #16
 800df76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800df7a:	431a      	orrs	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	3b01      	subs	r3, #1
 800df82:	061b      	lsls	r3, r3, #24
 800df84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800df88:	4931      	ldr	r1, [pc, #196]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df8a:	4313      	orrs	r3, r2
 800df8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800df8e:	4b30      	ldr	r3, [pc, #192]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	492d      	ldr	r1, [pc, #180]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800df9c:	4313      	orrs	r3, r2
 800df9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dfa0:	4b2b      	ldr	r3, [pc, #172]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa4:	f023 0220 	bic.w	r2, r3, #32
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	4928      	ldr	r1, [pc, #160]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dfb2:	4b27      	ldr	r3, [pc, #156]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb6:	4a26      	ldr	r2, [pc, #152]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfb8:	f023 0310 	bic.w	r3, r3, #16
 800dfbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dfbe:	4b24      	ldr	r3, [pc, #144]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfc2:	4b24      	ldr	r3, [pc, #144]	@ (800e054 <RCCEx_PLL2_Config+0x160>)
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	69d2      	ldr	r2, [r2, #28]
 800dfca:	00d2      	lsls	r2, r2, #3
 800dfcc:	4920      	ldr	r1, [pc, #128]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dfd2:	4b1f      	ldr	r3, [pc, #124]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfd8:	f043 0310 	orr.w	r3, r3, #16
 800dfdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d106      	bne.n	800dff2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dfe4:	4b1a      	ldr	r3, [pc, #104]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe8:	4a19      	ldr	r2, [pc, #100]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dfea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dfee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dff0:	e00f      	b.n	800e012 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d106      	bne.n	800e006 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dff8:	4b15      	ldr	r3, [pc, #84]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dffc:	4a14      	ldr	r2, [pc, #80]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800dffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e004:	e005      	b.n	800e012 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e006:	4b12      	ldr	r3, [pc, #72]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800e008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e00a:	4a11      	ldr	r2, [pc, #68]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800e00c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e010:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e012:	4b0f      	ldr	r3, [pc, #60]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a0e      	ldr	r2, [pc, #56]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800e018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e01c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e01e:	f7f8 fcfb 	bl	8006a18 <HAL_GetTick>
 800e022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e024:	e008      	b.n	800e038 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e026:	f7f8 fcf7 	bl	8006a18 <HAL_GetTick>
 800e02a:	4602      	mov	r2, r0
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	2b02      	cmp	r3, #2
 800e032:	d901      	bls.n	800e038 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e006      	b.n	800e046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e038:	4b05      	ldr	r3, [pc, #20]	@ (800e050 <RCCEx_PLL2_Config+0x15c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d0f0      	beq.n	800e026 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e044:	7bfb      	ldrb	r3, [r7, #15]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	58024400 	.word	0x58024400
 800e054:	ffff0007 	.word	0xffff0007

0800e058 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e062:	2300      	movs	r3, #0
 800e064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e066:	4b53      	ldr	r3, [pc, #332]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e06a:	f003 0303 	and.w	r3, r3, #3
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d101      	bne.n	800e076 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e099      	b.n	800e1aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e076:	4b4f      	ldr	r3, [pc, #316]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a4e      	ldr	r2, [pc, #312]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e07c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e082:	f7f8 fcc9 	bl	8006a18 <HAL_GetTick>
 800e086:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e088:	e008      	b.n	800e09c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e08a:	f7f8 fcc5 	bl	8006a18 <HAL_GetTick>
 800e08e:	4602      	mov	r2, r0
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	2b02      	cmp	r3, #2
 800e096:	d901      	bls.n	800e09c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e098:	2303      	movs	r3, #3
 800e09a:	e086      	b.n	800e1aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e09c:	4b45      	ldr	r3, [pc, #276]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1f0      	bne.n	800e08a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e0a8:	4b42      	ldr	r3, [pc, #264]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	051b      	lsls	r3, r3, #20
 800e0b6:	493f      	ldr	r1, [pc, #252]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	025b      	lsls	r3, r3, #9
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	041b      	lsls	r3, r3, #16
 800e0da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e0de:	431a      	orrs	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	061b      	lsls	r3, r3, #24
 800e0e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e0ec:	4931      	ldr	r1, [pc, #196]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e0f2:	4b30      	ldr	r3, [pc, #192]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	492d      	ldr	r1, [pc, #180]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e100:	4313      	orrs	r3, r2
 800e102:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e104:	4b2b      	ldr	r3, [pc, #172]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e108:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	4928      	ldr	r1, [pc, #160]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e112:	4313      	orrs	r3, r2
 800e114:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e116:	4b27      	ldr	r3, [pc, #156]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11a:	4a26      	ldr	r2, [pc, #152]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e11c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e120:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e122:	4b24      	ldr	r3, [pc, #144]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e126:	4b24      	ldr	r3, [pc, #144]	@ (800e1b8 <RCCEx_PLL3_Config+0x160>)
 800e128:	4013      	ands	r3, r2
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	69d2      	ldr	r2, [r2, #28]
 800e12e:	00d2      	lsls	r2, r2, #3
 800e130:	4920      	ldr	r1, [pc, #128]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e132:	4313      	orrs	r3, r2
 800e134:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e136:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13a:	4a1e      	ldr	r2, [pc, #120]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e13c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d106      	bne.n	800e156 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e148:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e14c:	4a19      	ldr	r2, [pc, #100]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e14e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e154:	e00f      	b.n	800e176 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d106      	bne.n	800e16a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e15c:	4b15      	ldr	r3, [pc, #84]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e160:	4a14      	ldr	r2, [pc, #80]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e168:	e005      	b.n	800e176 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e16a:	4b12      	ldr	r3, [pc, #72]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16e:	4a11      	ldr	r2, [pc, #68]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e174:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e176:	4b0f      	ldr	r3, [pc, #60]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a0e      	ldr	r2, [pc, #56]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e17c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e182:	f7f8 fc49 	bl	8006a18 <HAL_GetTick>
 800e186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e188:	e008      	b.n	800e19c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e18a:	f7f8 fc45 	bl	8006a18 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	2b02      	cmp	r3, #2
 800e196:	d901      	bls.n	800e19c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e198:	2303      	movs	r3, #3
 800e19a:	e006      	b.n	800e1aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e19c:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <RCCEx_PLL3_Config+0x15c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d0f0      	beq.n	800e18a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	58024400 	.word	0x58024400
 800e1b8:	ffff0007 	.word	0xffff0007

0800e1bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e049      	b.n	800e262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f841 	bl	800e26a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2202      	movs	r2, #2
 800e1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f000 f9e8 	bl	800e5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b083      	sub	sp, #12
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e272:	bf00      	nop
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
	...

0800e280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b01      	cmp	r3, #1
 800e292:	d001      	beq.n	800e298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	e054      	b.n	800e342 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68da      	ldr	r2, [r3, #12]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0201 	orr.w	r2, r2, #1
 800e2ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a26      	ldr	r2, [pc, #152]	@ (800e350 <HAL_TIM_Base_Start_IT+0xd0>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d022      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2c2:	d01d      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a22      	ldr	r2, [pc, #136]	@ (800e354 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d018      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a21      	ldr	r2, [pc, #132]	@ (800e358 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d013      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800e35c <HAL_TIM_Base_Start_IT+0xdc>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d00e      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	@ (800e360 <HAL_TIM_Base_Start_IT+0xe0>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d009      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800e364 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d004      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800e368 <HAL_TIM_Base_Start_IT+0xe8>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d115      	bne.n	800e32c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	4b19      	ldr	r3, [pc, #100]	@ (800e36c <HAL_TIM_Base_Start_IT+0xec>)
 800e308:	4013      	ands	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b06      	cmp	r3, #6
 800e310:	d015      	beq.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e318:	d011      	beq.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f042 0201 	orr.w	r2, r2, #1
 800e328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e32a:	e008      	b.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	e000      	b.n	800e340 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	40010000 	.word	0x40010000
 800e354:	40000400 	.word	0x40000400
 800e358:	40000800 	.word	0x40000800
 800e35c:	40000c00 	.word	0x40000c00
 800e360:	40010400 	.word	0x40010400
 800e364:	40001800 	.word	0x40001800
 800e368:	40014000 	.word	0x40014000
 800e36c:	00010007 	.word	0x00010007

0800e370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	f003 0302 	and.w	r3, r3, #2
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d020      	beq.n	800e3d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f003 0302 	and.w	r3, r3, #2
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d01b      	beq.n	800e3d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f06f 0202 	mvn.w	r2, #2
 800e3a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f003 0303 	and.w	r3, r3, #3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f8e9 	bl	800e592 <HAL_TIM_IC_CaptureCallback>
 800e3c0:	e005      	b.n	800e3ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f8db 	bl	800e57e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 f8ec 	bl	800e5a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	f003 0304 	and.w	r3, r3, #4
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d020      	beq.n	800e420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d01b      	beq.n	800e420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f06f 0204 	mvn.w	r2, #4
 800e3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2202      	movs	r2, #2
 800e3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e402:	2b00      	cmp	r3, #0
 800e404:	d003      	beq.n	800e40e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8c3 	bl	800e592 <HAL_TIM_IC_CaptureCallback>
 800e40c:	e005      	b.n	800e41a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f8b5 	bl	800e57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f8c6 	bl	800e5a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f003 0308 	and.w	r3, r3, #8
 800e426:	2b00      	cmp	r3, #0
 800e428:	d020      	beq.n	800e46c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f003 0308 	and.w	r3, r3, #8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d01b      	beq.n	800e46c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f06f 0208 	mvn.w	r2, #8
 800e43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2204      	movs	r2, #4
 800e442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	69db      	ldr	r3, [r3, #28]
 800e44a:	f003 0303 	and.w	r3, r3, #3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f89d 	bl	800e592 <HAL_TIM_IC_CaptureCallback>
 800e458:	e005      	b.n	800e466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f88f 	bl	800e57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f8a0 	bl	800e5a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f003 0310 	and.w	r3, r3, #16
 800e472:	2b00      	cmp	r3, #0
 800e474:	d020      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f003 0310 	and.w	r3, r3, #16
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d01b      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f06f 0210 	mvn.w	r2, #16
 800e488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2208      	movs	r2, #8
 800e48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f877 	bl	800e592 <HAL_TIM_IC_CaptureCallback>
 800e4a4:	e005      	b.n	800e4b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f869 	bl	800e57e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f87a 	bl	800e5a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00c      	beq.n	800e4dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f003 0301 	and.w	r3, r3, #1
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d007      	beq.n	800e4dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f06f 0201 	mvn.w	r2, #1
 800e4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7f7 fc9e 	bl	8005e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d104      	bne.n	800e4f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00c      	beq.n	800e50a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d007      	beq.n	800e50a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f90d 	bl	800e724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00c      	beq.n	800e52e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d007      	beq.n	800e52e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f905 	bl	800e738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00c      	beq.n	800e552 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d007      	beq.n	800e552 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e54a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f834 	bl	800e5ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	f003 0320 	and.w	r3, r3, #32
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00c      	beq.n	800e576 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d007      	beq.n	800e576 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f06f 0220 	mvn.w	r2, #32
 800e56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f8cd 	bl	800e710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e576:	bf00      	nop
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e586:	bf00      	nop
 800e588:	370c      	adds	r7, #12
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e592:	b480      	push	{r7}
 800e594:	b083      	sub	sp, #12
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e59a:	bf00      	nop
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e5a6:	b480      	push	{r7}
 800e5a8:	b083      	sub	sp, #12
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e5ae:	bf00      	nop
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e5c2:	bf00      	nop
 800e5c4:	370c      	adds	r7, #12
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
	...

0800e5d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a43      	ldr	r2, [pc, #268]	@ (800e6f0 <TIM_Base_SetConfig+0x120>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d013      	beq.n	800e610 <TIM_Base_SetConfig+0x40>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5ee:	d00f      	beq.n	800e610 <TIM_Base_SetConfig+0x40>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a40      	ldr	r2, [pc, #256]	@ (800e6f4 <TIM_Base_SetConfig+0x124>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d00b      	beq.n	800e610 <TIM_Base_SetConfig+0x40>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a3f      	ldr	r2, [pc, #252]	@ (800e6f8 <TIM_Base_SetConfig+0x128>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d007      	beq.n	800e610 <TIM_Base_SetConfig+0x40>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a3e      	ldr	r2, [pc, #248]	@ (800e6fc <TIM_Base_SetConfig+0x12c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d003      	beq.n	800e610 <TIM_Base_SetConfig+0x40>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a3d      	ldr	r2, [pc, #244]	@ (800e700 <TIM_Base_SetConfig+0x130>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d108      	bne.n	800e622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	4313      	orrs	r3, r2
 800e620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a32      	ldr	r2, [pc, #200]	@ (800e6f0 <TIM_Base_SetConfig+0x120>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d01f      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e630:	d01b      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a2f      	ldr	r2, [pc, #188]	@ (800e6f4 <TIM_Base_SetConfig+0x124>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d017      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4a2e      	ldr	r2, [pc, #184]	@ (800e6f8 <TIM_Base_SetConfig+0x128>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d013      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a2d      	ldr	r2, [pc, #180]	@ (800e6fc <TIM_Base_SetConfig+0x12c>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d00f      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a2c      	ldr	r2, [pc, #176]	@ (800e700 <TIM_Base_SetConfig+0x130>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d00b      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a2b      	ldr	r2, [pc, #172]	@ (800e704 <TIM_Base_SetConfig+0x134>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d007      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a2a      	ldr	r2, [pc, #168]	@ (800e708 <TIM_Base_SetConfig+0x138>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d003      	beq.n	800e66a <TIM_Base_SetConfig+0x9a>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a29      	ldr	r2, [pc, #164]	@ (800e70c <TIM_Base_SetConfig+0x13c>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d108      	bne.n	800e67c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	4313      	orrs	r3, r2
 800e67a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	4313      	orrs	r3, r2
 800e688:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	689a      	ldr	r2, [r3, #8]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4a14      	ldr	r2, [pc, #80]	@ (800e6f0 <TIM_Base_SetConfig+0x120>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d00f      	beq.n	800e6c2 <TIM_Base_SetConfig+0xf2>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4a16      	ldr	r2, [pc, #88]	@ (800e700 <TIM_Base_SetConfig+0x130>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d00b      	beq.n	800e6c2 <TIM_Base_SetConfig+0xf2>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a15      	ldr	r2, [pc, #84]	@ (800e704 <TIM_Base_SetConfig+0x134>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d007      	beq.n	800e6c2 <TIM_Base_SetConfig+0xf2>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a14      	ldr	r2, [pc, #80]	@ (800e708 <TIM_Base_SetConfig+0x138>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d003      	beq.n	800e6c2 <TIM_Base_SetConfig+0xf2>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a13      	ldr	r2, [pc, #76]	@ (800e70c <TIM_Base_SetConfig+0x13c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d103      	bne.n	800e6ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	691a      	ldr	r2, [r3, #16]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f043 0204 	orr.w	r2, r3, #4
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	601a      	str	r2, [r3, #0]
}
 800e6e2:	bf00      	nop
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	40010000 	.word	0x40010000
 800e6f4:	40000400 	.word	0x40000400
 800e6f8:	40000800 	.word	0x40000800
 800e6fc:	40000c00 	.word	0x40000c00
 800e700:	40010400 	.word	0x40010400
 800e704:	40014000 	.word	0x40014000
 800e708:	40014400 	.word	0x40014400
 800e70c:	40014800 	.word	0x40014800

0800e710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d101      	bne.n	800e75e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e042      	b.n	800e7e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7f7 fcc7 	bl	8006104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2224      	movs	r2, #36	@ 0x24
 800e77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f022 0201 	bic.w	r2, r2, #1
 800e78c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f001 fab0 	bl	800fcfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fd45 	bl	800f22c <UART_SetConfig>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d101      	bne.n	800e7ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e01b      	b.n	800e7e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e7ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e7ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f042 0201 	orr.w	r2, r2, #1
 800e7da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fb2f 	bl	800fe40 <UART_CheckIdleState>
 800e7e2:	4603      	mov	r3, r0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08a      	sub	sp, #40	@ 0x28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e800:	2b20      	cmp	r3, #32
 800e802:	d167      	bne.n	800e8d4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <HAL_UART_Transmit_DMA+0x24>
 800e80a:	88fb      	ldrh	r3, [r7, #6]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	e060      	b.n	800e8d6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	88fa      	ldrh	r2, [r7, #6]
 800e81e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	88fa      	ldrh	r2, [r7, #6]
 800e826:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2221      	movs	r2, #33	@ 0x21
 800e836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d028      	beq.n	800e894 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e846:	4a26      	ldr	r2, [pc, #152]	@ (800e8e0 <HAL_UART_Transmit_DMA+0xf4>)
 800e848:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e84e:	4a25      	ldr	r2, [pc, #148]	@ (800e8e4 <HAL_UART_Transmit_DMA+0xf8>)
 800e850:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e856:	4a24      	ldr	r2, [pc, #144]	@ (800e8e8 <HAL_UART_Transmit_DMA+0xfc>)
 800e858:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e85e:	2200      	movs	r2, #0
 800e860:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e86a:	4619      	mov	r1, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	3328      	adds	r3, #40	@ 0x28
 800e872:	461a      	mov	r2, r3
 800e874:	88fb      	ldrh	r3, [r7, #6]
 800e876:	f7f8 ff75 	bl	8007764 <HAL_DMA_Start_IT>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2210      	movs	r2, #16
 800e884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2220      	movs	r2, #32
 800e88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800e890:	2301      	movs	r3, #1
 800e892:	e020      	b.n	800e8d6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2240      	movs	r2, #64	@ 0x40
 800e89a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	e853 3f00 	ldrex	r3, [r3]
 800e8aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8bc:	623a      	str	r2, [r7, #32]
 800e8be:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c0:	69f9      	ldr	r1, [r7, #28]
 800e8c2:	6a3a      	ldr	r2, [r7, #32]
 800e8c4:	e841 2300 	strex	r3, r2, [r1]
 800e8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1e5      	bne.n	800e89c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	e000      	b.n	800e8d6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e8d4:	2302      	movs	r3, #2
  }
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3728      	adds	r7, #40	@ 0x28
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	0801030d 	.word	0x0801030d
 800e8e4:	080103a3 	.word	0x080103a3
 800e8e8:	08010525 	.word	0x08010525

0800e8ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b09a      	sub	sp, #104	@ 0x68
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8fc:	e853 3f00 	ldrex	r3, [r3]
 800e900:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e908:	667b      	str	r3, [r7, #100]	@ 0x64
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e912:	657b      	str	r3, [r7, #84]	@ 0x54
 800e914:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e916:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e918:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e91a:	e841 2300 	strex	r3, r2, [r1]
 800e91e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1e6      	bne.n	800e8f4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3308      	adds	r3, #8
 800e92c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e930:	e853 3f00 	ldrex	r3, [r3]
 800e934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e938:	4b46      	ldr	r3, [pc, #280]	@ (800ea54 <HAL_UART_AbortReceive+0x168>)
 800e93a:	4013      	ands	r3, r2
 800e93c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3308      	adds	r3, #8
 800e944:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e946:	643a      	str	r2, [r7, #64]	@ 0x40
 800e948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e94c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e5      	bne.n	800e926 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d118      	bne.n	800e994 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	f023 0310 	bic.w	r3, r3, #16
 800e976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e982:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e988:	e841 2300 	strex	r3, r2, [r1]
 800e98c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e6      	bne.n	800e962 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e99e:	2b40      	cmp	r3, #64	@ 0x40
 800e9a0:	d13b      	bne.n	800ea1a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	e853 3f00 	ldrex	r3, [r3]
 800e9b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3308      	adds	r3, #8
 800e9c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9c2:	61ba      	str	r2, [r7, #24]
 800e9c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c6:	6979      	ldr	r1, [r7, #20]
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	e841 2300 	strex	r3, r2, [r1]
 800e9ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1e5      	bne.n	800e9a2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01c      	beq.n	800ea1a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7f9 f921 	bl	8007c38 <HAL_DMA_Abort>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00e      	beq.n	800ea1a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fa fda6 	bl	8009554 <HAL_DMA_GetError>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b20      	cmp	r3, #32
 800ea0c:	d105      	bne.n	800ea1a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2210      	movs	r2, #16
 800ea12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e017      	b.n	800ea4a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	220f      	movs	r2, #15
 800ea28:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	699a      	ldr	r2, [r3, #24]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f042 0208 	orr.w	r2, r2, #8
 800ea38:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2220      	movs	r2, #32
 800ea3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3768      	adds	r7, #104	@ 0x68
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	effffffe 	.word	0xeffffffe

0800ea58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b0ba      	sub	sp, #232	@ 0xe8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ea82:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ea86:	4013      	ands	r3, r2
 800ea88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ea8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d11b      	bne.n	800eacc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea98:	f003 0320 	and.w	r3, r3, #32
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d015      	beq.n	800eacc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eaa4:	f003 0320 	and.w	r3, r3, #32
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d105      	bne.n	800eab8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d009      	beq.n	800eacc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 8393 	beq.w	800f1e8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	4798      	blx	r3
      }
      return;
 800eaca:	e38d      	b.n	800f1e8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eacc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f000 8123 	beq.w	800ed1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ead6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eada:	4b8d      	ldr	r3, [pc, #564]	@ (800ed10 <HAL_UART_IRQHandler+0x2b8>)
 800eadc:	4013      	ands	r3, r2
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eae6:	4b8b      	ldr	r3, [pc, #556]	@ (800ed14 <HAL_UART_IRQHandler+0x2bc>)
 800eae8:	4013      	ands	r3, r2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 8116 	beq.w	800ed1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d011      	beq.n	800eb20 <HAL_UART_IRQHandler+0xc8>
 800eafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00b      	beq.n	800eb20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb16:	f043 0201 	orr.w	r2, r3, #1
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb24:	f003 0302 	and.w	r3, r3, #2
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d011      	beq.n	800eb50 <HAL_UART_IRQHandler+0xf8>
 800eb2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb30:	f003 0301 	and.w	r3, r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00b      	beq.n	800eb50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2202      	movs	r2, #2
 800eb3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb46:	f043 0204 	orr.w	r2, r3, #4
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d011      	beq.n	800eb80 <HAL_UART_IRQHandler+0x128>
 800eb5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb60:	f003 0301 	and.w	r3, r3, #1
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00b      	beq.n	800eb80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2204      	movs	r2, #4
 800eb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb76:	f043 0202 	orr.w	r2, r3, #2
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb84:	f003 0308 	and.w	r3, r3, #8
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d017      	beq.n	800ebbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb90:	f003 0320 	and.w	r3, r3, #32
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d105      	bne.n	800eba4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ed10 <HAL_UART_IRQHandler+0x2b8>)
 800eb9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00b      	beq.n	800ebbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2208      	movs	r2, #8
 800ebaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb2:	f043 0208 	orr.w	r2, r3, #8
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ebbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d012      	beq.n	800ebee <HAL_UART_IRQHandler+0x196>
 800ebc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00c      	beq.n	800ebee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ebdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe4:	f043 0220 	orr.w	r2, r3, #32
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 82f9 	beq.w	800f1ec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebfe:	f003 0320 	and.w	r3, r3, #32
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d013      	beq.n	800ec2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d105      	bne.n	800ec1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d007      	beq.n	800ec2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec42:	2b40      	cmp	r3, #64	@ 0x40
 800ec44:	d005      	beq.n	800ec52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ec4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d054      	beq.n	800ecfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f001 faf4 	bl	8010240 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec62:	2b40      	cmp	r3, #64	@ 0x40
 800ec64:	d146      	bne.n	800ecf4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec74:	e853 3f00 	ldrex	r3, [r3]
 800ec78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ec7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ec92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ec96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ec9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800eca2:	e841 2300 	strex	r3, r2, [r1]
 800eca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ecaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1d9      	bne.n	800ec66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d017      	beq.n	800ecec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecc2:	4a15      	ldr	r2, [pc, #84]	@ (800ed18 <HAL_UART_IRQHandler+0x2c0>)
 800ecc4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f9 fad1 	bl	8008274 <HAL_DMA_Abort_IT>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d019      	beq.n	800ed0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ecde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ece6:	4610      	mov	r0, r2
 800ece8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecea:	e00f      	b.n	800ed0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7f2 f97f 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf2:	e00b      	b.n	800ed0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7f2 f97b 	bl	8000ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecfa:	e007      	b.n	800ed0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7f2 f977 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ed0a:	e26f      	b.n	800f1ec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed0c:	bf00      	nop
    return;
 800ed0e:	e26d      	b.n	800f1ec <HAL_UART_IRQHandler+0x794>
 800ed10:	10000001 	.word	0x10000001
 800ed14:	04000120 	.word	0x04000120
 800ed18:	080105a5 	.word	0x080105a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	f040 8203 	bne.w	800f12c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed2a:	f003 0310 	and.w	r3, r3, #16
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 81fc 	beq.w	800f12c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 81f5 	beq.w	800f12c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2210      	movs	r2, #16
 800ed48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed54:	2b40      	cmp	r3, #64	@ 0x40
 800ed56:	f040 816d 	bne.w	800f034 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4aa4      	ldr	r2, [pc, #656]	@ (800eff4 <HAL_UART_IRQHandler+0x59c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d068      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4aa1      	ldr	r2, [pc, #644]	@ (800eff8 <HAL_UART_IRQHandler+0x5a0>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d061      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4a9f      	ldr	r2, [pc, #636]	@ (800effc <HAL_UART_IRQHandler+0x5a4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d05a      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a9c      	ldr	r2, [pc, #624]	@ (800f000 <HAL_UART_IRQHandler+0x5a8>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d053      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a9a      	ldr	r2, [pc, #616]	@ (800f004 <HAL_UART_IRQHandler+0x5ac>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d04c      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a97      	ldr	r2, [pc, #604]	@ (800f008 <HAL_UART_IRQHandler+0x5b0>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d045      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a95      	ldr	r2, [pc, #596]	@ (800f00c <HAL_UART_IRQHandler+0x5b4>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d03e      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a92      	ldr	r2, [pc, #584]	@ (800f010 <HAL_UART_IRQHandler+0x5b8>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d037      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a90      	ldr	r2, [pc, #576]	@ (800f014 <HAL_UART_IRQHandler+0x5bc>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d030      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a8d      	ldr	r2, [pc, #564]	@ (800f018 <HAL_UART_IRQHandler+0x5c0>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d029      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a8b      	ldr	r2, [pc, #556]	@ (800f01c <HAL_UART_IRQHandler+0x5c4>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d022      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4a88      	ldr	r2, [pc, #544]	@ (800f020 <HAL_UART_IRQHandler+0x5c8>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d01b      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a86      	ldr	r2, [pc, #536]	@ (800f024 <HAL_UART_IRQHandler+0x5cc>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d014      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a83      	ldr	r2, [pc, #524]	@ (800f028 <HAL_UART_IRQHandler+0x5d0>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d00d      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a81      	ldr	r2, [pc, #516]	@ (800f02c <HAL_UART_IRQHandler+0x5d4>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d006      	beq.n	800ee3a <HAL_UART_IRQHandler+0x3e2>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a7e      	ldr	r2, [pc, #504]	@ (800f030 <HAL_UART_IRQHandler+0x5d8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d106      	bne.n	800ee48 <HAL_UART_IRQHandler+0x3f0>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	e005      	b.n	800ee54 <HAL_UART_IRQHandler+0x3fc>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 80ad 	beq.w	800efbc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	f080 80a5 	bcs.w	800efbc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ee78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee88:	f000 8087 	beq.w	800ef9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee98:	e853 3f00 	ldrex	r3, [r3]
 800ee9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eeb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eeba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eec6:	e841 2300 	strex	r3, r2, [r1]
 800eeca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800eece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1da      	bne.n	800ee8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	3308      	adds	r3, #8
 800eedc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eee0:	e853 3f00 	ldrex	r3, [r3]
 800eee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800eee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eee8:	f023 0301 	bic.w	r3, r3, #1
 800eeec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3308      	adds	r3, #8
 800eef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eefa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eefe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e1      	bne.n	800eed6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	3308      	adds	r3, #8
 800ef32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ef3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ef44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e3      	bne.n	800ef12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef60:	e853 3f00 	ldrex	r3, [r3]
 800ef64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ef66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef68:	f023 0310 	bic.w	r3, r3, #16
 800ef6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef82:	e841 2300 	strex	r3, r2, [r1]
 800ef86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ef88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1e4      	bne.n	800ef58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f8 fe4f 	bl	8007c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2202      	movs	r2, #2
 800ef9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800efac:	b29b      	uxth	r3, r3
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	4619      	mov	r1, r3
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7f1 ffe3 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800efba:	e119      	b.n	800f1f0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800efc6:	429a      	cmp	r2, r3
 800efc8:	f040 8112 	bne.w	800f1f0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800efd8:	f040 810a 	bne.w	800f1f0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2202      	movs	r2, #2
 800efe0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7f1 ffc8 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
      return;
 800eff0:	e0fe      	b.n	800f1f0 <HAL_UART_IRQHandler+0x798>
 800eff2:	bf00      	nop
 800eff4:	40020010 	.word	0x40020010
 800eff8:	40020028 	.word	0x40020028
 800effc:	40020040 	.word	0x40020040
 800f000:	40020058 	.word	0x40020058
 800f004:	40020070 	.word	0x40020070
 800f008:	40020088 	.word	0x40020088
 800f00c:	400200a0 	.word	0x400200a0
 800f010:	400200b8 	.word	0x400200b8
 800f014:	40020410 	.word	0x40020410
 800f018:	40020428 	.word	0x40020428
 800f01c:	40020440 	.word	0x40020440
 800f020:	40020458 	.word	0x40020458
 800f024:	40020470 	.word	0x40020470
 800f028:	40020488 	.word	0x40020488
 800f02c:	400204a0 	.word	0x400204a0
 800f030:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f040:	b29b      	uxth	r3, r3
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f04e:	b29b      	uxth	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 80cf 	beq.w	800f1f4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800f056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 80ca 	beq.w	800f1f4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f068:	e853 3f00 	ldrex	r3, [r3]
 800f06c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	461a      	mov	r2, r3
 800f07e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f082:	647b      	str	r3, [r7, #68]	@ 0x44
 800f084:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f086:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f08a:	e841 2300 	strex	r3, r2, [r1]
 800f08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1e4      	bne.n	800f060 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	3308      	adds	r3, #8
 800f09c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a0:	e853 3f00 	ldrex	r3, [r3]
 800f0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800f0a6:	6a3a      	ldr	r2, [r7, #32]
 800f0a8:	4b55      	ldr	r3, [pc, #340]	@ (800f200 <HAL_UART_IRQHandler+0x7a8>)
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f0ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800f0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0c2:	e841 2300 	strex	r3, r2, [r1]
 800f0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e3      	bne.n	800f096 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2220      	movs	r2, #32
 800f0d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f023 0310 	bic.w	r3, r3, #16
 800f0f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f104:	61fb      	str	r3, [r7, #28]
 800f106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	69b9      	ldr	r1, [r7, #24]
 800f10a:	69fa      	ldr	r2, [r7, #28]
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	617b      	str	r3, [r7, #20]
   return(result);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e4      	bne.n	800f0e2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2202      	movs	r2, #2
 800f11c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f11e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f122:	4619      	mov	r1, r3
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7f1 ff2b 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f12a:	e063      	b.n	800f1f4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f12c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f130:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00e      	beq.n	800f156 <HAL_UART_IRQHandler+0x6fe>
 800f138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f13c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f140:	2b00      	cmp	r3, #0
 800f142:	d008      	beq.n	800f156 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f14c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f001 fa65 	bl	801061e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f154:	e051      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d014      	beq.n	800f18c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d105      	bne.n	800f17a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f176:	2b00      	cmp	r3, #0
 800f178:	d008      	beq.n	800f18c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d03a      	beq.n	800f1f8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	4798      	blx	r3
    }
    return;
 800f18a:	e035      	b.n	800f1f8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f194:	2b00      	cmp	r3, #0
 800f196:	d009      	beq.n	800f1ac <HAL_UART_IRQHandler+0x754>
 800f198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f19c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d003      	beq.n	800f1ac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f001 fa0f 	bl	80105c8 <UART_EndTransmit_IT>
    return;
 800f1aa:	e026      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d009      	beq.n	800f1cc <HAL_UART_IRQHandler+0x774>
 800f1b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d003      	beq.n	800f1cc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f001 fa3e 	bl	8010646 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1ca:	e016      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d010      	beq.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
 800f1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	da0c      	bge.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f001 fa26 	bl	8010632 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1e6:	e008      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
      return;
 800f1e8:	bf00      	nop
 800f1ea:	e006      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
    return;
 800f1ec:	bf00      	nop
 800f1ee:	e004      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
      return;
 800f1f0:	bf00      	nop
 800f1f2:	e002      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
      return;
 800f1f4:	bf00      	nop
 800f1f6:	e000      	b.n	800f1fa <HAL_UART_IRQHandler+0x7a2>
    return;
 800f1f8:	bf00      	nop
  }
}
 800f1fa:	37e8      	adds	r7, #232	@ 0xe8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	effffffe 	.word	0xeffffffe

0800f204 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f230:	b092      	sub	sp, #72	@ 0x48
 800f232:	af00      	add	r7, sp, #0
 800f234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	689a      	ldr	r2, [r3, #8]
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	431a      	orrs	r2, r3
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	431a      	orrs	r2, r3
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	69db      	ldr	r3, [r3, #28]
 800f250:	4313      	orrs	r3, r2
 800f252:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	4bbe      	ldr	r3, [pc, #760]	@ (800f554 <UART_SetConfig+0x328>)
 800f25c:	4013      	ands	r3, r2
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	6812      	ldr	r2, [r2, #0]
 800f262:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f264:	430b      	orrs	r3, r1
 800f266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	68da      	ldr	r2, [r3, #12]
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	430a      	orrs	r2, r1
 800f27c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	699b      	ldr	r3, [r3, #24]
 800f282:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4ab3      	ldr	r2, [pc, #716]	@ (800f558 <UART_SetConfig+0x32c>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d004      	beq.n	800f298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f294:	4313      	orrs	r3, r2
 800f296:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	689a      	ldr	r2, [r3, #8]
 800f29e:	4baf      	ldr	r3, [pc, #700]	@ (800f55c <UART_SetConfig+0x330>)
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	6812      	ldr	r2, [r2, #0]
 800f2a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2a8:	430b      	orrs	r3, r1
 800f2aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b2:	f023 010f 	bic.w	r1, r3, #15
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	430a      	orrs	r2, r1
 800f2c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4aa6      	ldr	r2, [pc, #664]	@ (800f560 <UART_SetConfig+0x334>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d177      	bne.n	800f3bc <UART_SetConfig+0x190>
 800f2cc:	4ba5      	ldr	r3, [pc, #660]	@ (800f564 <UART_SetConfig+0x338>)
 800f2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f2d4:	2b28      	cmp	r3, #40	@ 0x28
 800f2d6:	d86d      	bhi.n	800f3b4 <UART_SetConfig+0x188>
 800f2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f2e0 <UART_SetConfig+0xb4>)
 800f2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2de:	bf00      	nop
 800f2e0:	0800f385 	.word	0x0800f385
 800f2e4:	0800f3b5 	.word	0x0800f3b5
 800f2e8:	0800f3b5 	.word	0x0800f3b5
 800f2ec:	0800f3b5 	.word	0x0800f3b5
 800f2f0:	0800f3b5 	.word	0x0800f3b5
 800f2f4:	0800f3b5 	.word	0x0800f3b5
 800f2f8:	0800f3b5 	.word	0x0800f3b5
 800f2fc:	0800f3b5 	.word	0x0800f3b5
 800f300:	0800f38d 	.word	0x0800f38d
 800f304:	0800f3b5 	.word	0x0800f3b5
 800f308:	0800f3b5 	.word	0x0800f3b5
 800f30c:	0800f3b5 	.word	0x0800f3b5
 800f310:	0800f3b5 	.word	0x0800f3b5
 800f314:	0800f3b5 	.word	0x0800f3b5
 800f318:	0800f3b5 	.word	0x0800f3b5
 800f31c:	0800f3b5 	.word	0x0800f3b5
 800f320:	0800f395 	.word	0x0800f395
 800f324:	0800f3b5 	.word	0x0800f3b5
 800f328:	0800f3b5 	.word	0x0800f3b5
 800f32c:	0800f3b5 	.word	0x0800f3b5
 800f330:	0800f3b5 	.word	0x0800f3b5
 800f334:	0800f3b5 	.word	0x0800f3b5
 800f338:	0800f3b5 	.word	0x0800f3b5
 800f33c:	0800f3b5 	.word	0x0800f3b5
 800f340:	0800f39d 	.word	0x0800f39d
 800f344:	0800f3b5 	.word	0x0800f3b5
 800f348:	0800f3b5 	.word	0x0800f3b5
 800f34c:	0800f3b5 	.word	0x0800f3b5
 800f350:	0800f3b5 	.word	0x0800f3b5
 800f354:	0800f3b5 	.word	0x0800f3b5
 800f358:	0800f3b5 	.word	0x0800f3b5
 800f35c:	0800f3b5 	.word	0x0800f3b5
 800f360:	0800f3a5 	.word	0x0800f3a5
 800f364:	0800f3b5 	.word	0x0800f3b5
 800f368:	0800f3b5 	.word	0x0800f3b5
 800f36c:	0800f3b5 	.word	0x0800f3b5
 800f370:	0800f3b5 	.word	0x0800f3b5
 800f374:	0800f3b5 	.word	0x0800f3b5
 800f378:	0800f3b5 	.word	0x0800f3b5
 800f37c:	0800f3b5 	.word	0x0800f3b5
 800f380:	0800f3ad 	.word	0x0800f3ad
 800f384:	2301      	movs	r3, #1
 800f386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38a:	e222      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f38c:	2304      	movs	r3, #4
 800f38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f392:	e21e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f394:	2308      	movs	r3, #8
 800f396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f39a:	e21a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f39c:	2310      	movs	r3, #16
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3a2:	e216      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f3a4:	2320      	movs	r3, #32
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3aa:	e212      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f3ac:	2340      	movs	r3, #64	@ 0x40
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3b2:	e20e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f3b4:	2380      	movs	r3, #128	@ 0x80
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ba:	e20a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a69      	ldr	r2, [pc, #420]	@ (800f568 <UART_SetConfig+0x33c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d130      	bne.n	800f428 <UART_SetConfig+0x1fc>
 800f3c6:	4b67      	ldr	r3, [pc, #412]	@ (800f564 <UART_SetConfig+0x338>)
 800f3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3ca:	f003 0307 	and.w	r3, r3, #7
 800f3ce:	2b05      	cmp	r3, #5
 800f3d0:	d826      	bhi.n	800f420 <UART_SetConfig+0x1f4>
 800f3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d8 <UART_SetConfig+0x1ac>)
 800f3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d8:	0800f3f1 	.word	0x0800f3f1
 800f3dc:	0800f3f9 	.word	0x0800f3f9
 800f3e0:	0800f401 	.word	0x0800f401
 800f3e4:	0800f409 	.word	0x0800f409
 800f3e8:	0800f411 	.word	0x0800f411
 800f3ec:	0800f419 	.word	0x0800f419
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e1ec      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f3f8:	2304      	movs	r3, #4
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e1e8      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f400:	2308      	movs	r3, #8
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f406:	e1e4      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f408:	2310      	movs	r3, #16
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40e:	e1e0      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f410:	2320      	movs	r3, #32
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f416:	e1dc      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f418:	2340      	movs	r3, #64	@ 0x40
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41e:	e1d8      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f420:	2380      	movs	r3, #128	@ 0x80
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f426:	e1d4      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a4f      	ldr	r2, [pc, #316]	@ (800f56c <UART_SetConfig+0x340>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d130      	bne.n	800f494 <UART_SetConfig+0x268>
 800f432:	4b4c      	ldr	r3, [pc, #304]	@ (800f564 <UART_SetConfig+0x338>)
 800f434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f436:	f003 0307 	and.w	r3, r3, #7
 800f43a:	2b05      	cmp	r3, #5
 800f43c:	d826      	bhi.n	800f48c <UART_SetConfig+0x260>
 800f43e:	a201      	add	r2, pc, #4	@ (adr r2, 800f444 <UART_SetConfig+0x218>)
 800f440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f444:	0800f45d 	.word	0x0800f45d
 800f448:	0800f465 	.word	0x0800f465
 800f44c:	0800f46d 	.word	0x0800f46d
 800f450:	0800f475 	.word	0x0800f475
 800f454:	0800f47d 	.word	0x0800f47d
 800f458:	0800f485 	.word	0x0800f485
 800f45c:	2300      	movs	r3, #0
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e1b6      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f464:	2304      	movs	r3, #4
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e1b2      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f46c:	2308      	movs	r3, #8
 800f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f472:	e1ae      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f474:	2310      	movs	r3, #16
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47a:	e1aa      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f47c:	2320      	movs	r3, #32
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f482:	e1a6      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f484:	2340      	movs	r3, #64	@ 0x40
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48a:	e1a2      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f48c:	2380      	movs	r3, #128	@ 0x80
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f492:	e19e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4a35      	ldr	r2, [pc, #212]	@ (800f570 <UART_SetConfig+0x344>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d130      	bne.n	800f500 <UART_SetConfig+0x2d4>
 800f49e:	4b31      	ldr	r3, [pc, #196]	@ (800f564 <UART_SetConfig+0x338>)
 800f4a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4a2:	f003 0307 	and.w	r3, r3, #7
 800f4a6:	2b05      	cmp	r3, #5
 800f4a8:	d826      	bhi.n	800f4f8 <UART_SetConfig+0x2cc>
 800f4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f4b0 <UART_SetConfig+0x284>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f4c9 	.word	0x0800f4c9
 800f4b4:	0800f4d1 	.word	0x0800f4d1
 800f4b8:	0800f4d9 	.word	0x0800f4d9
 800f4bc:	0800f4e1 	.word	0x0800f4e1
 800f4c0:	0800f4e9 	.word	0x0800f4e9
 800f4c4:	0800f4f1 	.word	0x0800f4f1
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ce:	e180      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d6:	e17c      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4d8:	2308      	movs	r3, #8
 800f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4de:	e178      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4e6:	e174      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4e8:	2320      	movs	r3, #32
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ee:	e170      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4f0:	2340      	movs	r3, #64	@ 0x40
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f6:	e16c      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f4f8:	2380      	movs	r3, #128	@ 0x80
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fe:	e168      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a1b      	ldr	r2, [pc, #108]	@ (800f574 <UART_SetConfig+0x348>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d142      	bne.n	800f590 <UART_SetConfig+0x364>
 800f50a:	4b16      	ldr	r3, [pc, #88]	@ (800f564 <UART_SetConfig+0x338>)
 800f50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f50e:	f003 0307 	and.w	r3, r3, #7
 800f512:	2b05      	cmp	r3, #5
 800f514:	d838      	bhi.n	800f588 <UART_SetConfig+0x35c>
 800f516:	a201      	add	r2, pc, #4	@ (adr r2, 800f51c <UART_SetConfig+0x2f0>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f535 	.word	0x0800f535
 800f520:	0800f53d 	.word	0x0800f53d
 800f524:	0800f545 	.word	0x0800f545
 800f528:	0800f54d 	.word	0x0800f54d
 800f52c:	0800f579 	.word	0x0800f579
 800f530:	0800f581 	.word	0x0800f581
 800f534:	2300      	movs	r3, #0
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53a:	e14a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f53c:	2304      	movs	r3, #4
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f542:	e146      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f544:	2308      	movs	r3, #8
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54a:	e142      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f54c:	2310      	movs	r3, #16
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f552:	e13e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f554:	cfff69f3 	.word	0xcfff69f3
 800f558:	58000c00 	.word	0x58000c00
 800f55c:	11fff4ff 	.word	0x11fff4ff
 800f560:	40011000 	.word	0x40011000
 800f564:	58024400 	.word	0x58024400
 800f568:	40004400 	.word	0x40004400
 800f56c:	40004800 	.word	0x40004800
 800f570:	40004c00 	.word	0x40004c00
 800f574:	40005000 	.word	0x40005000
 800f578:	2320      	movs	r3, #32
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e128      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f580:	2340      	movs	r3, #64	@ 0x40
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e124      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f588:	2380      	movs	r3, #128	@ 0x80
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e120      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4acb      	ldr	r2, [pc, #812]	@ (800f8c4 <UART_SetConfig+0x698>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d176      	bne.n	800f688 <UART_SetConfig+0x45c>
 800f59a:	4bcb      	ldr	r3, [pc, #812]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f59e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f5a2:	2b28      	cmp	r3, #40	@ 0x28
 800f5a4:	d86c      	bhi.n	800f680 <UART_SetConfig+0x454>
 800f5a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5ac <UART_SetConfig+0x380>)
 800f5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ac:	0800f651 	.word	0x0800f651
 800f5b0:	0800f681 	.word	0x0800f681
 800f5b4:	0800f681 	.word	0x0800f681
 800f5b8:	0800f681 	.word	0x0800f681
 800f5bc:	0800f681 	.word	0x0800f681
 800f5c0:	0800f681 	.word	0x0800f681
 800f5c4:	0800f681 	.word	0x0800f681
 800f5c8:	0800f681 	.word	0x0800f681
 800f5cc:	0800f659 	.word	0x0800f659
 800f5d0:	0800f681 	.word	0x0800f681
 800f5d4:	0800f681 	.word	0x0800f681
 800f5d8:	0800f681 	.word	0x0800f681
 800f5dc:	0800f681 	.word	0x0800f681
 800f5e0:	0800f681 	.word	0x0800f681
 800f5e4:	0800f681 	.word	0x0800f681
 800f5e8:	0800f681 	.word	0x0800f681
 800f5ec:	0800f661 	.word	0x0800f661
 800f5f0:	0800f681 	.word	0x0800f681
 800f5f4:	0800f681 	.word	0x0800f681
 800f5f8:	0800f681 	.word	0x0800f681
 800f5fc:	0800f681 	.word	0x0800f681
 800f600:	0800f681 	.word	0x0800f681
 800f604:	0800f681 	.word	0x0800f681
 800f608:	0800f681 	.word	0x0800f681
 800f60c:	0800f669 	.word	0x0800f669
 800f610:	0800f681 	.word	0x0800f681
 800f614:	0800f681 	.word	0x0800f681
 800f618:	0800f681 	.word	0x0800f681
 800f61c:	0800f681 	.word	0x0800f681
 800f620:	0800f681 	.word	0x0800f681
 800f624:	0800f681 	.word	0x0800f681
 800f628:	0800f681 	.word	0x0800f681
 800f62c:	0800f671 	.word	0x0800f671
 800f630:	0800f681 	.word	0x0800f681
 800f634:	0800f681 	.word	0x0800f681
 800f638:	0800f681 	.word	0x0800f681
 800f63c:	0800f681 	.word	0x0800f681
 800f640:	0800f681 	.word	0x0800f681
 800f644:	0800f681 	.word	0x0800f681
 800f648:	0800f681 	.word	0x0800f681
 800f64c:	0800f679 	.word	0x0800f679
 800f650:	2301      	movs	r3, #1
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f656:	e0bc      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f658:	2304      	movs	r3, #4
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65e:	e0b8      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f660:	2308      	movs	r3, #8
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f666:	e0b4      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f668:	2310      	movs	r3, #16
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f66e:	e0b0      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f670:	2320      	movs	r3, #32
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f676:	e0ac      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f678:	2340      	movs	r3, #64	@ 0x40
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f67e:	e0a8      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f680:	2380      	movs	r3, #128	@ 0x80
 800f682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f686:	e0a4      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a8f      	ldr	r2, [pc, #572]	@ (800f8cc <UART_SetConfig+0x6a0>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d130      	bne.n	800f6f4 <UART_SetConfig+0x4c8>
 800f692:	4b8d      	ldr	r3, [pc, #564]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f696:	f003 0307 	and.w	r3, r3, #7
 800f69a:	2b05      	cmp	r3, #5
 800f69c:	d826      	bhi.n	800f6ec <UART_SetConfig+0x4c0>
 800f69e:	a201      	add	r2, pc, #4	@ (adr r2, 800f6a4 <UART_SetConfig+0x478>)
 800f6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a4:	0800f6bd 	.word	0x0800f6bd
 800f6a8:	0800f6c5 	.word	0x0800f6c5
 800f6ac:	0800f6cd 	.word	0x0800f6cd
 800f6b0:	0800f6d5 	.word	0x0800f6d5
 800f6b4:	0800f6dd 	.word	0x0800f6dd
 800f6b8:	0800f6e5 	.word	0x0800f6e5
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c2:	e086      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6c4:	2304      	movs	r3, #4
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ca:	e082      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6cc:	2308      	movs	r3, #8
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d2:	e07e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6d4:	2310      	movs	r3, #16
 800f6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6da:	e07a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6dc:	2320      	movs	r3, #32
 800f6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e2:	e076      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6e4:	2340      	movs	r3, #64	@ 0x40
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ea:	e072      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6ec:	2380      	movs	r3, #128	@ 0x80
 800f6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f2:	e06e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a75      	ldr	r2, [pc, #468]	@ (800f8d0 <UART_SetConfig+0x6a4>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d130      	bne.n	800f760 <UART_SetConfig+0x534>
 800f6fe:	4b72      	ldr	r3, [pc, #456]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f702:	f003 0307 	and.w	r3, r3, #7
 800f706:	2b05      	cmp	r3, #5
 800f708:	d826      	bhi.n	800f758 <UART_SetConfig+0x52c>
 800f70a:	a201      	add	r2, pc, #4	@ (adr r2, 800f710 <UART_SetConfig+0x4e4>)
 800f70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f710:	0800f729 	.word	0x0800f729
 800f714:	0800f731 	.word	0x0800f731
 800f718:	0800f739 	.word	0x0800f739
 800f71c:	0800f741 	.word	0x0800f741
 800f720:	0800f749 	.word	0x0800f749
 800f724:	0800f751 	.word	0x0800f751
 800f728:	2300      	movs	r3, #0
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e050      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f730:	2304      	movs	r3, #4
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f736:	e04c      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f738:	2308      	movs	r3, #8
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73e:	e048      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f740:	2310      	movs	r3, #16
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f746:	e044      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f748:	2320      	movs	r3, #32
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74e:	e040      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f750:	2340      	movs	r3, #64	@ 0x40
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f756:	e03c      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f758:	2380      	movs	r3, #128	@ 0x80
 800f75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75e:	e038      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a5b      	ldr	r2, [pc, #364]	@ (800f8d4 <UART_SetConfig+0x6a8>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d130      	bne.n	800f7cc <UART_SetConfig+0x5a0>
 800f76a:	4b57      	ldr	r3, [pc, #348]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f76e:	f003 0307 	and.w	r3, r3, #7
 800f772:	2b05      	cmp	r3, #5
 800f774:	d826      	bhi.n	800f7c4 <UART_SetConfig+0x598>
 800f776:	a201      	add	r2, pc, #4	@ (adr r2, 800f77c <UART_SetConfig+0x550>)
 800f778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f77c:	0800f795 	.word	0x0800f795
 800f780:	0800f79d 	.word	0x0800f79d
 800f784:	0800f7a5 	.word	0x0800f7a5
 800f788:	0800f7ad 	.word	0x0800f7ad
 800f78c:	0800f7b5 	.word	0x0800f7b5
 800f790:	0800f7bd 	.word	0x0800f7bd
 800f794:	2302      	movs	r3, #2
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e01a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f79c:	2304      	movs	r3, #4
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a2:	e016      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7aa:	e012      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7ac:	2310      	movs	r3, #16
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b2:	e00e      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7b4:	2320      	movs	r3, #32
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ba:	e00a      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7bc:	2340      	movs	r3, #64	@ 0x40
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c2:	e006      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7c4:	2380      	movs	r3, #128	@ 0x80
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ca:	e002      	b.n	800f7d2 <UART_SetConfig+0x5a6>
 800f7cc:	2380      	movs	r3, #128	@ 0x80
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a3f      	ldr	r2, [pc, #252]	@ (800f8d4 <UART_SetConfig+0x6a8>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	f040 80f8 	bne.w	800f9ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f7de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7e2:	2b20      	cmp	r3, #32
 800f7e4:	dc46      	bgt.n	800f874 <UART_SetConfig+0x648>
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	f2c0 8082 	blt.w	800f8f0 <UART_SetConfig+0x6c4>
 800f7ec:	3b02      	subs	r3, #2
 800f7ee:	2b1e      	cmp	r3, #30
 800f7f0:	d87e      	bhi.n	800f8f0 <UART_SetConfig+0x6c4>
 800f7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7f8 <UART_SetConfig+0x5cc>)
 800f7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f8:	0800f87b 	.word	0x0800f87b
 800f7fc:	0800f8f1 	.word	0x0800f8f1
 800f800:	0800f883 	.word	0x0800f883
 800f804:	0800f8f1 	.word	0x0800f8f1
 800f808:	0800f8f1 	.word	0x0800f8f1
 800f80c:	0800f8f1 	.word	0x0800f8f1
 800f810:	0800f893 	.word	0x0800f893
 800f814:	0800f8f1 	.word	0x0800f8f1
 800f818:	0800f8f1 	.word	0x0800f8f1
 800f81c:	0800f8f1 	.word	0x0800f8f1
 800f820:	0800f8f1 	.word	0x0800f8f1
 800f824:	0800f8f1 	.word	0x0800f8f1
 800f828:	0800f8f1 	.word	0x0800f8f1
 800f82c:	0800f8f1 	.word	0x0800f8f1
 800f830:	0800f8a3 	.word	0x0800f8a3
 800f834:	0800f8f1 	.word	0x0800f8f1
 800f838:	0800f8f1 	.word	0x0800f8f1
 800f83c:	0800f8f1 	.word	0x0800f8f1
 800f840:	0800f8f1 	.word	0x0800f8f1
 800f844:	0800f8f1 	.word	0x0800f8f1
 800f848:	0800f8f1 	.word	0x0800f8f1
 800f84c:	0800f8f1 	.word	0x0800f8f1
 800f850:	0800f8f1 	.word	0x0800f8f1
 800f854:	0800f8f1 	.word	0x0800f8f1
 800f858:	0800f8f1 	.word	0x0800f8f1
 800f85c:	0800f8f1 	.word	0x0800f8f1
 800f860:	0800f8f1 	.word	0x0800f8f1
 800f864:	0800f8f1 	.word	0x0800f8f1
 800f868:	0800f8f1 	.word	0x0800f8f1
 800f86c:	0800f8f1 	.word	0x0800f8f1
 800f870:	0800f8e3 	.word	0x0800f8e3
 800f874:	2b40      	cmp	r3, #64	@ 0x40
 800f876:	d037      	beq.n	800f8e8 <UART_SetConfig+0x6bc>
 800f878:	e03a      	b.n	800f8f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f87a:	f7fe f87d 	bl	800d978 <HAL_RCCEx_GetD3PCLK1Freq>
 800f87e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f880:	e03c      	b.n	800f8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe f88c 	bl	800d9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f890:	e034      	b.n	800f8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f892:	f107 0318 	add.w	r3, r7, #24
 800f896:	4618      	mov	r0, r3
 800f898:	f7fe f9d8 	bl	800dc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a0:	e02c      	b.n	800f8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8a2:	4b09      	ldr	r3, [pc, #36]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0320 	and.w	r3, r3, #32
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d016      	beq.n	800f8dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8ae:	4b06      	ldr	r3, [pc, #24]	@ (800f8c8 <UART_SetConfig+0x69c>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	08db      	lsrs	r3, r3, #3
 800f8b4:	f003 0303 	and.w	r3, r3, #3
 800f8b8:	4a07      	ldr	r2, [pc, #28]	@ (800f8d8 <UART_SetConfig+0x6ac>)
 800f8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8c0:	e01c      	b.n	800f8fc <UART_SetConfig+0x6d0>
 800f8c2:	bf00      	nop
 800f8c4:	40011400 	.word	0x40011400
 800f8c8:	58024400 	.word	0x58024400
 800f8cc:	40007800 	.word	0x40007800
 800f8d0:	40007c00 	.word	0x40007c00
 800f8d4:	58000c00 	.word	0x58000c00
 800f8d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f8dc:	4b9d      	ldr	r3, [pc, #628]	@ (800fb54 <UART_SetConfig+0x928>)
 800f8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8e0:	e00c      	b.n	800f8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8e2:	4b9d      	ldr	r3, [pc, #628]	@ (800fb58 <UART_SetConfig+0x92c>)
 800f8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8e6:	e009      	b.n	800f8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8ee:	e005      	b.n	800f8fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 81de 	beq.w	800fcc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f908:	4a94      	ldr	r2, [pc, #592]	@ (800fb5c <UART_SetConfig+0x930>)
 800f90a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f90e:	461a      	mov	r2, r3
 800f910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f912:	fbb3 f3f2 	udiv	r3, r3, r2
 800f916:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	4613      	mov	r3, r2
 800f91e:	005b      	lsls	r3, r3, #1
 800f920:	4413      	add	r3, r2
 800f922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f924:	429a      	cmp	r2, r3
 800f926:	d305      	bcc.n	800f934 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f930:	429a      	cmp	r2, r3
 800f932:	d903      	bls.n	800f93c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f934:	2301      	movs	r3, #1
 800f936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f93a:	e1c1      	b.n	800fcc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f93e:	2200      	movs	r2, #0
 800f940:	60bb      	str	r3, [r7, #8]
 800f942:	60fa      	str	r2, [r7, #12]
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f948:	4a84      	ldr	r2, [pc, #528]	@ (800fb5c <UART_SetConfig+0x930>)
 800f94a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f94e:	b29b      	uxth	r3, r3
 800f950:	2200      	movs	r2, #0
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	607a      	str	r2, [r7, #4]
 800f956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f95a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f95e:	f7f0 ffe1 	bl	8000924 <__aeabi_uldivmod>
 800f962:	4602      	mov	r2, r0
 800f964:	460b      	mov	r3, r1
 800f966:	4610      	mov	r0, r2
 800f968:	4619      	mov	r1, r3
 800f96a:	f04f 0200 	mov.w	r2, #0
 800f96e:	f04f 0300 	mov.w	r3, #0
 800f972:	020b      	lsls	r3, r1, #8
 800f974:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f978:	0202      	lsls	r2, r0, #8
 800f97a:	6979      	ldr	r1, [r7, #20]
 800f97c:	6849      	ldr	r1, [r1, #4]
 800f97e:	0849      	lsrs	r1, r1, #1
 800f980:	2000      	movs	r0, #0
 800f982:	460c      	mov	r4, r1
 800f984:	4605      	mov	r5, r0
 800f986:	eb12 0804 	adds.w	r8, r2, r4
 800f98a:	eb43 0905 	adc.w	r9, r3, r5
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	469a      	mov	sl, r3
 800f996:	4693      	mov	fp, r2
 800f998:	4652      	mov	r2, sl
 800f99a:	465b      	mov	r3, fp
 800f99c:	4640      	mov	r0, r8
 800f99e:	4649      	mov	r1, r9
 800f9a0:	f7f0 ffc0 	bl	8000924 <__aeabi_uldivmod>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9b2:	d308      	bcc.n	800f9c6 <UART_SetConfig+0x79a>
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f9ba:	d204      	bcs.n	800f9c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9c2:	60da      	str	r2, [r3, #12]
 800f9c4:	e17c      	b.n	800fcc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f9cc:	e178      	b.n	800fcc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9d6:	f040 80c5 	bne.w	800fb64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f9da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f9de:	2b20      	cmp	r3, #32
 800f9e0:	dc48      	bgt.n	800fa74 <UART_SetConfig+0x848>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	db7b      	blt.n	800fade <UART_SetConfig+0x8b2>
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	d879      	bhi.n	800fade <UART_SetConfig+0x8b2>
 800f9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f9f0 <UART_SetConfig+0x7c4>)
 800f9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f0:	0800fa7b 	.word	0x0800fa7b
 800f9f4:	0800fa83 	.word	0x0800fa83
 800f9f8:	0800fadf 	.word	0x0800fadf
 800f9fc:	0800fadf 	.word	0x0800fadf
 800fa00:	0800fa8b 	.word	0x0800fa8b
 800fa04:	0800fadf 	.word	0x0800fadf
 800fa08:	0800fadf 	.word	0x0800fadf
 800fa0c:	0800fadf 	.word	0x0800fadf
 800fa10:	0800fa9b 	.word	0x0800fa9b
 800fa14:	0800fadf 	.word	0x0800fadf
 800fa18:	0800fadf 	.word	0x0800fadf
 800fa1c:	0800fadf 	.word	0x0800fadf
 800fa20:	0800fadf 	.word	0x0800fadf
 800fa24:	0800fadf 	.word	0x0800fadf
 800fa28:	0800fadf 	.word	0x0800fadf
 800fa2c:	0800fadf 	.word	0x0800fadf
 800fa30:	0800faab 	.word	0x0800faab
 800fa34:	0800fadf 	.word	0x0800fadf
 800fa38:	0800fadf 	.word	0x0800fadf
 800fa3c:	0800fadf 	.word	0x0800fadf
 800fa40:	0800fadf 	.word	0x0800fadf
 800fa44:	0800fadf 	.word	0x0800fadf
 800fa48:	0800fadf 	.word	0x0800fadf
 800fa4c:	0800fadf 	.word	0x0800fadf
 800fa50:	0800fadf 	.word	0x0800fadf
 800fa54:	0800fadf 	.word	0x0800fadf
 800fa58:	0800fadf 	.word	0x0800fadf
 800fa5c:	0800fadf 	.word	0x0800fadf
 800fa60:	0800fadf 	.word	0x0800fadf
 800fa64:	0800fadf 	.word	0x0800fadf
 800fa68:	0800fadf 	.word	0x0800fadf
 800fa6c:	0800fadf 	.word	0x0800fadf
 800fa70:	0800fad1 	.word	0x0800fad1
 800fa74:	2b40      	cmp	r3, #64	@ 0x40
 800fa76:	d02e      	beq.n	800fad6 <UART_SetConfig+0x8aa>
 800fa78:	e031      	b.n	800fade <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa7a:	f7fc fd05 	bl	800c488 <HAL_RCC_GetPCLK1Freq>
 800fa7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa80:	e033      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa82:	f7fc fd17 	bl	800c4b4 <HAL_RCC_GetPCLK2Freq>
 800fa86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa88:	e02f      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fd ff88 	bl	800d9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa98:	e027      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa9a:	f107 0318 	add.w	r3, r7, #24
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe f8d4 	bl	800dc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faa8:	e01f      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faaa:	4b2d      	ldr	r3, [pc, #180]	@ (800fb60 <UART_SetConfig+0x934>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f003 0320 	and.w	r3, r3, #32
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d009      	beq.n	800faca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fab6:	4b2a      	ldr	r3, [pc, #168]	@ (800fb60 <UART_SetConfig+0x934>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	08db      	lsrs	r3, r3, #3
 800fabc:	f003 0303 	and.w	r3, r3, #3
 800fac0:	4a24      	ldr	r2, [pc, #144]	@ (800fb54 <UART_SetConfig+0x928>)
 800fac2:	fa22 f303 	lsr.w	r3, r2, r3
 800fac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fac8:	e00f      	b.n	800faea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800faca:	4b22      	ldr	r3, [pc, #136]	@ (800fb54 <UART_SetConfig+0x928>)
 800facc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800face:	e00c      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fad0:	4b21      	ldr	r3, [pc, #132]	@ (800fb58 <UART_SetConfig+0x92c>)
 800fad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fad4:	e009      	b.n	800faea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fadc:	e005      	b.n	800faea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fade:	2300      	movs	r3, #0
 800fae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fae2:	2301      	movs	r3, #1
 800fae4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800faea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 80e7 	beq.w	800fcc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf6:	4a19      	ldr	r2, [pc, #100]	@ (800fb5c <UART_SetConfig+0x930>)
 800faf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb00:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb04:	005a      	lsls	r2, r3, #1
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	085b      	lsrs	r3, r3, #1
 800fb0c:	441a      	add	r2, r3
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1a:	2b0f      	cmp	r3, #15
 800fb1c:	d916      	bls.n	800fb4c <UART_SetConfig+0x920>
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb24:	d212      	bcs.n	800fb4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	f023 030f 	bic.w	r3, r3, #15
 800fb2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb32:	085b      	lsrs	r3, r3, #1
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	f003 0307 	and.w	r3, r3, #7
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fb48:	60da      	str	r2, [r3, #12]
 800fb4a:	e0b9      	b.n	800fcc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb52:	e0b5      	b.n	800fcc0 <UART_SetConfig+0xa94>
 800fb54:	03d09000 	.word	0x03d09000
 800fb58:	003d0900 	.word	0x003d0900
 800fb5c:	08017f00 	.word	0x08017f00
 800fb60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb68:	2b20      	cmp	r3, #32
 800fb6a:	dc49      	bgt.n	800fc00 <UART_SetConfig+0x9d4>
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	db7c      	blt.n	800fc6a <UART_SetConfig+0xa3e>
 800fb70:	2b20      	cmp	r3, #32
 800fb72:	d87a      	bhi.n	800fc6a <UART_SetConfig+0xa3e>
 800fb74:	a201      	add	r2, pc, #4	@ (adr r2, 800fb7c <UART_SetConfig+0x950>)
 800fb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7a:	bf00      	nop
 800fb7c:	0800fc07 	.word	0x0800fc07
 800fb80:	0800fc0f 	.word	0x0800fc0f
 800fb84:	0800fc6b 	.word	0x0800fc6b
 800fb88:	0800fc6b 	.word	0x0800fc6b
 800fb8c:	0800fc17 	.word	0x0800fc17
 800fb90:	0800fc6b 	.word	0x0800fc6b
 800fb94:	0800fc6b 	.word	0x0800fc6b
 800fb98:	0800fc6b 	.word	0x0800fc6b
 800fb9c:	0800fc27 	.word	0x0800fc27
 800fba0:	0800fc6b 	.word	0x0800fc6b
 800fba4:	0800fc6b 	.word	0x0800fc6b
 800fba8:	0800fc6b 	.word	0x0800fc6b
 800fbac:	0800fc6b 	.word	0x0800fc6b
 800fbb0:	0800fc6b 	.word	0x0800fc6b
 800fbb4:	0800fc6b 	.word	0x0800fc6b
 800fbb8:	0800fc6b 	.word	0x0800fc6b
 800fbbc:	0800fc37 	.word	0x0800fc37
 800fbc0:	0800fc6b 	.word	0x0800fc6b
 800fbc4:	0800fc6b 	.word	0x0800fc6b
 800fbc8:	0800fc6b 	.word	0x0800fc6b
 800fbcc:	0800fc6b 	.word	0x0800fc6b
 800fbd0:	0800fc6b 	.word	0x0800fc6b
 800fbd4:	0800fc6b 	.word	0x0800fc6b
 800fbd8:	0800fc6b 	.word	0x0800fc6b
 800fbdc:	0800fc6b 	.word	0x0800fc6b
 800fbe0:	0800fc6b 	.word	0x0800fc6b
 800fbe4:	0800fc6b 	.word	0x0800fc6b
 800fbe8:	0800fc6b 	.word	0x0800fc6b
 800fbec:	0800fc6b 	.word	0x0800fc6b
 800fbf0:	0800fc6b 	.word	0x0800fc6b
 800fbf4:	0800fc6b 	.word	0x0800fc6b
 800fbf8:	0800fc6b 	.word	0x0800fc6b
 800fbfc:	0800fc5d 	.word	0x0800fc5d
 800fc00:	2b40      	cmp	r3, #64	@ 0x40
 800fc02:	d02e      	beq.n	800fc62 <UART_SetConfig+0xa36>
 800fc04:	e031      	b.n	800fc6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fc06:	f7fc fc3f 	bl	800c488 <HAL_RCC_GetPCLK1Freq>
 800fc0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc0c:	e033      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fc0e:	f7fc fc51 	bl	800c4b4 <HAL_RCC_GetPCLK2Freq>
 800fc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc14:	e02f      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fd fec2 	bl	800d9a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc24:	e027      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc26:	f107 0318 	add.w	r3, r7, #24
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fe f80e 	bl	800dc4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc34:	e01f      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc36:	4b2d      	ldr	r3, [pc, #180]	@ (800fcec <UART_SetConfig+0xac0>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f003 0320 	and.w	r3, r3, #32
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d009      	beq.n	800fc56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc42:	4b2a      	ldr	r3, [pc, #168]	@ (800fcec <UART_SetConfig+0xac0>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	08db      	lsrs	r3, r3, #3
 800fc48:	f003 0303 	and.w	r3, r3, #3
 800fc4c:	4a28      	ldr	r2, [pc, #160]	@ (800fcf0 <UART_SetConfig+0xac4>)
 800fc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc54:	e00f      	b.n	800fc76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fc56:	4b26      	ldr	r3, [pc, #152]	@ (800fcf0 <UART_SetConfig+0xac4>)
 800fc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc5a:	e00c      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc5c:	4b25      	ldr	r3, [pc, #148]	@ (800fcf4 <UART_SetConfig+0xac8>)
 800fc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc60:	e009      	b.n	800fc76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc68:	e005      	b.n	800fc76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc74:	bf00      	nop
    }

    if (pclk != 0U)
 800fc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d021      	beq.n	800fcc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc80:	4a1d      	ldr	r2, [pc, #116]	@ (800fcf8 <UART_SetConfig+0xacc>)
 800fc82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc86:	461a      	mov	r2, r3
 800fc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	085b      	lsrs	r3, r3, #1
 800fc94:	441a      	add	r2, r3
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca2:	2b0f      	cmp	r3, #15
 800fca4:	d909      	bls.n	800fcba <UART_SetConfig+0xa8e>
 800fca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fcac:	d205      	bcs.n	800fcba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	60da      	str	r2, [r3, #12]
 800fcb8:	e002      	b.n	800fcc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fcdc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3748      	adds	r7, #72	@ 0x48
 800fce4:	46bd      	mov	sp, r7
 800fce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcea:	bf00      	nop
 800fcec:	58024400 	.word	0x58024400
 800fcf0:	03d09000 	.word	0x03d09000
 800fcf4:	003d0900 	.word	0x003d0900
 800fcf8:	08017f00 	.word	0x08017f00

0800fcfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00a      	beq.n	800fd26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	430a      	orrs	r2, r1
 800fd24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd2a:	f003 0301 	and.w	r3, r3, #1
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00a      	beq.n	800fd48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	430a      	orrs	r2, r1
 800fd46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd4c:	f003 0302 	and.w	r3, r3, #2
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00a      	beq.n	800fd6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	430a      	orrs	r2, r1
 800fd68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd6e:	f003 0304 	and.w	r3, r3, #4
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00a      	beq.n	800fd8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd90:	f003 0310 	and.w	r3, r3, #16
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00a      	beq.n	800fdae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb2:	f003 0320 	and.w	r3, r3, #32
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00a      	beq.n	800fdd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	430a      	orrs	r2, r1
 800fdce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d01a      	beq.n	800fe12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	430a      	orrs	r2, r1
 800fdf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdfa:	d10a      	bne.n	800fe12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	430a      	orrs	r2, r1
 800fe10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00a      	beq.n	800fe34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	430a      	orrs	r2, r1
 800fe32:	605a      	str	r2, [r3, #4]
  }
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b098      	sub	sp, #96	@ 0x60
 800fe44:	af02      	add	r7, sp, #8
 800fe46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe50:	f7f6 fde2 	bl	8006a18 <HAL_GetTick>
 800fe54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f003 0308 	and.w	r3, r3, #8
 800fe60:	2b08      	cmp	r3, #8
 800fe62:	d12f      	bne.n	800fec4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 f88e 	bl	800ff94 <UART_WaitOnFlagUntilTimeout>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d022      	beq.n	800fec4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe86:	e853 3f00 	ldrex	r3, [r3]
 800fe8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe92:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fea4:	e841 2300 	strex	r3, r2, [r1]
 800fea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800feaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1e6      	bne.n	800fe7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2220      	movs	r2, #32
 800feb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fec0:	2303      	movs	r3, #3
 800fec2:	e063      	b.n	800ff8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b04      	cmp	r3, #4
 800fed0:	d149      	bne.n	800ff66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fed2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feda:	2200      	movs	r2, #0
 800fedc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f857 	bl	800ff94 <UART_WaitOnFlagUntilTimeout>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d03c      	beq.n	800ff66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	623b      	str	r3, [r7, #32]
   return(result);
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff12:	e841 2300 	strex	r3, r2, [r1]
 800ff16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1e6      	bne.n	800feec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3308      	adds	r3, #8
 800ff24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	e853 3f00 	ldrex	r3, [r3]
 800ff2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f023 0301 	bic.w	r3, r3, #1
 800ff34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	3308      	adds	r3, #8
 800ff3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff3e:	61fa      	str	r2, [r7, #28]
 800ff40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	69b9      	ldr	r1, [r7, #24]
 800ff44:	69fa      	ldr	r2, [r7, #28]
 800ff46:	e841 2300 	strex	r3, r2, [r1]
 800ff4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e5      	bne.n	800ff1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff62:	2303      	movs	r3, #3
 800ff64:	e012      	b.n	800ff8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2220      	movs	r2, #32
 800ff72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3758      	adds	r7, #88	@ 0x58
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	603b      	str	r3, [r7, #0]
 800ffa0:	4613      	mov	r3, r2
 800ffa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffa4:	e04f      	b.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffac:	d04b      	beq.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffae:	f7f6 fd33 	bl	8006a18 <HAL_GetTick>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	69ba      	ldr	r2, [r7, #24]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d302      	bcc.n	800ffc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e04e      	b.n	8010066 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f003 0304 	and.w	r3, r3, #4
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d037      	beq.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b80      	cmp	r3, #128	@ 0x80
 800ffda:	d034      	beq.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	2b40      	cmp	r3, #64	@ 0x40
 800ffe0:	d031      	beq.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	f003 0308 	and.w	r3, r3, #8
 800ffec:	2b08      	cmp	r3, #8
 800ffee:	d110      	bne.n	8010012 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2208      	movs	r2, #8
 800fff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f000 f921 	bl	8010240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2208      	movs	r2, #8
 8010002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801000e:	2301      	movs	r3, #1
 8010010:	e029      	b.n	8010066 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	69db      	ldr	r3, [r3, #28]
 8010018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801001c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010020:	d111      	bne.n	8010046 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801002a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f000 f907 	bl	8010240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2220      	movs	r2, #32
 8010036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010042:	2303      	movs	r3, #3
 8010044:	e00f      	b.n	8010066 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	69da      	ldr	r2, [r3, #28]
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	4013      	ands	r3, r2
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	429a      	cmp	r2, r3
 8010054:	bf0c      	ite	eq
 8010056:	2301      	moveq	r3, #1
 8010058:	2300      	movne	r3, #0
 801005a:	b2db      	uxtb	r3, r3
 801005c:	461a      	mov	r2, r3
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	429a      	cmp	r2, r3
 8010062:	d0a0      	beq.n	800ffa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b096      	sub	sp, #88	@ 0x58
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	4613      	mov	r3, r2
 801007c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	88fa      	ldrh	r2, [r7, #6]
 8010088:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2222      	movs	r2, #34	@ 0x22
 8010098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d02d      	beq.n	8010102 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ac:	4a40      	ldr	r2, [pc, #256]	@ (80101b0 <UART_Start_Receive_DMA+0x140>)
 80100ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100b6:	4a3f      	ldr	r2, [pc, #252]	@ (80101b4 <UART_Start_Receive_DMA+0x144>)
 80100b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100c0:	4a3d      	ldr	r2, [pc, #244]	@ (80101b8 <UART_Start_Receive_DMA+0x148>)
 80100c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100ca:	2200      	movs	r2, #0
 80100cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	3324      	adds	r3, #36	@ 0x24
 80100da:	4619      	mov	r1, r3
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100e0:	461a      	mov	r2, r3
 80100e2:	88fb      	ldrh	r3, [r7, #6]
 80100e4:	f7f7 fb3e 	bl	8007764 <HAL_DMA_Start_IT>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d009      	beq.n	8010102 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2210      	movs	r2, #16
 80100f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2220      	movs	r2, #32
 80100fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	e051      	b.n	80101a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d018      	beq.n	801013c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010112:	e853 3f00 	ldrex	r3, [r3]
 8010116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801011e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	461a      	mov	r2, r3
 8010126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010128:	64bb      	str	r3, [r7, #72]	@ 0x48
 801012a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801012e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010130:	e841 2300 	strex	r3, r2, [r1]
 8010134:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1e6      	bne.n	801010a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	3308      	adds	r3, #8
 8010142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010146:	e853 3f00 	ldrex	r3, [r3]
 801014a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801014c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801014e:	f043 0301 	orr.w	r3, r3, #1
 8010152:	653b      	str	r3, [r7, #80]	@ 0x50
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	3308      	adds	r3, #8
 801015a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801015c:	637a      	str	r2, [r7, #52]	@ 0x34
 801015e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010160:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010164:	e841 2300 	strex	r3, r2, [r1]
 8010168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801016a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1e5      	bne.n	801013c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3308      	adds	r3, #8
 8010176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	e853 3f00 	ldrex	r3, [r3]
 801017e:	613b      	str	r3, [r7, #16]
   return(result);
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	3308      	adds	r3, #8
 801018e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010190:	623a      	str	r2, [r7, #32]
 8010192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010194:	69f9      	ldr	r1, [r7, #28]
 8010196:	6a3a      	ldr	r2, [r7, #32]
 8010198:	e841 2300 	strex	r3, r2, [r1]
 801019c:	61bb      	str	r3, [r7, #24]
   return(result);
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e5      	bne.n	8010170 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3758      	adds	r7, #88	@ 0x58
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	080103bf 	.word	0x080103bf
 80101b4:	080104e7 	.word	0x080104e7
 80101b8:	08010525 	.word	0x08010525

080101bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80101bc:	b480      	push	{r7}
 80101be:	b08f      	sub	sp, #60	@ 0x3c
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ca:	6a3b      	ldr	r3, [r7, #32]
 80101cc:	e853 3f00 	ldrex	r3, [r3]
 80101d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80101d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	461a      	mov	r2, r3
 80101e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101ea:	e841 2300 	strex	r3, r2, [r1]
 80101ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d1e6      	bne.n	80101c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3308      	adds	r3, #8
 80101fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	e853 3f00 	ldrex	r3, [r3]
 8010204:	60bb      	str	r3, [r7, #8]
   return(result);
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801020c:	633b      	str	r3, [r7, #48]	@ 0x30
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3308      	adds	r3, #8
 8010214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010216:	61ba      	str	r2, [r7, #24]
 8010218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021a:	6979      	ldr	r1, [r7, #20]
 801021c:	69ba      	ldr	r2, [r7, #24]
 801021e:	e841 2300 	strex	r3, r2, [r1]
 8010222:	613b      	str	r3, [r7, #16]
   return(result);
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1e5      	bne.n	80101f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2220      	movs	r2, #32
 801022e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010232:	bf00      	nop
 8010234:	373c      	adds	r7, #60	@ 0x3c
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
	...

08010240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010240:	b480      	push	{r7}
 8010242:	b095      	sub	sp, #84	@ 0x54
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010250:	e853 3f00 	ldrex	r3, [r3]
 8010254:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801025c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	461a      	mov	r2, r3
 8010264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010266:	643b      	str	r3, [r7, #64]	@ 0x40
 8010268:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801026c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801026e:	e841 2300 	strex	r3, r2, [r1]
 8010272:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1e6      	bne.n	8010248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	3308      	adds	r3, #8
 8010280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010282:	6a3b      	ldr	r3, [r7, #32]
 8010284:	e853 3f00 	ldrex	r3, [r3]
 8010288:	61fb      	str	r3, [r7, #28]
   return(result);
 801028a:	69fa      	ldr	r2, [r7, #28]
 801028c:	4b1e      	ldr	r3, [pc, #120]	@ (8010308 <UART_EndRxTransfer+0xc8>)
 801028e:	4013      	ands	r3, r2
 8010290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	3308      	adds	r3, #8
 8010298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801029a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801029c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801029e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102a2:	e841 2300 	strex	r3, r2, [r1]
 80102a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d1e5      	bne.n	801027a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d118      	bne.n	80102e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	e853 3f00 	ldrex	r3, [r3]
 80102c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	f023 0310 	bic.w	r3, r3, #16
 80102ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	461a      	mov	r2, r3
 80102d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102d4:	61bb      	str	r3, [r7, #24]
 80102d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d8:	6979      	ldr	r1, [r7, #20]
 80102da:	69ba      	ldr	r2, [r7, #24]
 80102dc:	e841 2300 	strex	r3, r2, [r1]
 80102e0:	613b      	str	r3, [r7, #16]
   return(result);
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1e6      	bne.n	80102b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2220      	movs	r2, #32
 80102ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2200      	movs	r2, #0
 80102fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80102fc:	bf00      	nop
 80102fe:	3754      	adds	r7, #84	@ 0x54
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr
 8010308:	effffffe 	.word	0xeffffffe

0801030c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b090      	sub	sp, #64	@ 0x40
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	69db      	ldr	r3, [r3, #28]
 801031e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010322:	d037      	beq.n	8010394 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010326:	2200      	movs	r2, #0
 8010328:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801032c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	3308      	adds	r3, #8
 8010332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010336:	e853 3f00 	ldrex	r3, [r3]
 801033a:	623b      	str	r3, [r7, #32]
   return(result);
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	3308      	adds	r3, #8
 801034a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801034c:	633a      	str	r2, [r7, #48]	@ 0x30
 801034e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010354:	e841 2300 	strex	r3, r2, [r1]
 8010358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801035a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1e5      	bne.n	801032c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	e853 3f00 	ldrex	r3, [r3]
 801036c:	60fb      	str	r3, [r7, #12]
   return(result);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010374:	637b      	str	r3, [r7, #52]	@ 0x34
 8010376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	461a      	mov	r2, r3
 801037c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801037e:	61fb      	str	r3, [r7, #28]
 8010380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010382:	69b9      	ldr	r1, [r7, #24]
 8010384:	69fa      	ldr	r2, [r7, #28]
 8010386:	e841 2300 	strex	r3, r2, [r1]
 801038a:	617b      	str	r3, [r7, #20]
   return(result);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1e6      	bne.n	8010360 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010392:	e002      	b.n	801039a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010394:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010396:	f7f0 fea1 	bl	80010dc <HAL_UART_TxCpltCallback>
}
 801039a:	bf00      	nop
 801039c:	3740      	adds	r7, #64	@ 0x40
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b084      	sub	sp, #16
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f7fe ff27 	bl	800f204 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103b6:	bf00      	nop
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b09c      	sub	sp, #112	@ 0x70
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	69db      	ldr	r3, [r3, #28]
 80103d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103d4:	d071      	beq.n	80104ba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80103d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103d8:	2200      	movs	r2, #0
 80103da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80103ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80103f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80103f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	461a      	mov	r2, r3
 80103fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80103fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010400:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010404:	e841 2300 	strex	r3, r2, [r1]
 8010408:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801040a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1e6      	bne.n	80103de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	3308      	adds	r3, #8
 8010416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041a:	e853 3f00 	ldrex	r3, [r3]
 801041e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010422:	f023 0301 	bic.w	r3, r3, #1
 8010426:	667b      	str	r3, [r7, #100]	@ 0x64
 8010428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3308      	adds	r3, #8
 801042e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010430:	647a      	str	r2, [r7, #68]	@ 0x44
 8010432:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010438:	e841 2300 	strex	r3, r2, [r1]
 801043c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801043e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010440:	2b00      	cmp	r3, #0
 8010442:	d1e5      	bne.n	8010410 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	3308      	adds	r3, #8
 801044a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801044e:	e853 3f00 	ldrex	r3, [r3]
 8010452:	623b      	str	r3, [r7, #32]
   return(result);
 8010454:	6a3b      	ldr	r3, [r7, #32]
 8010456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801045a:	663b      	str	r3, [r7, #96]	@ 0x60
 801045c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3308      	adds	r3, #8
 8010462:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010464:	633a      	str	r2, [r7, #48]	@ 0x30
 8010466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801046a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801046c:	e841 2300 	strex	r3, r2, [r1]
 8010470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010474:	2b00      	cmp	r3, #0
 8010476:	d1e5      	bne.n	8010444 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801047a:	2220      	movs	r2, #32
 801047c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010484:	2b01      	cmp	r3, #1
 8010486:	d118      	bne.n	80104ba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	e853 3f00 	ldrex	r3, [r3]
 8010494:	60fb      	str	r3, [r7, #12]
   return(result);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f023 0310 	bic.w	r3, r3, #16
 801049c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801049e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104aa:	69b9      	ldr	r1, [r7, #24]
 80104ac:	69fa      	ldr	r2, [r7, #28]
 80104ae:	e841 2300 	strex	r3, r2, [r1]
 80104b2:	617b      	str	r3, [r7, #20]
   return(result);
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d1e6      	bne.n	8010488 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104bc:	2200      	movs	r2, #0
 80104be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d107      	bne.n	80104d8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80104c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80104ce:	4619      	mov	r1, r3
 80104d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80104d2:	f7f0 fd55 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80104d6:	e002      	b.n	80104de <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80104d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80104da:	f7f0 fd6f 	bl	8000fbc <HAL_UART_RxCpltCallback>
}
 80104de:	bf00      	nop
 80104e0:	3770      	adds	r7, #112	@ 0x70
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2201      	movs	r2, #1
 80104f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d109      	bne.n	8010516 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010508:	085b      	lsrs	r3, r3, #1
 801050a:	b29b      	uxth	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7f0 fd36 	bl	8000f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010514:	e002      	b.n	801051c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f7fe fe7e 	bl	800f218 <HAL_UART_RxHalfCpltCallback>
}
 801051c:	bf00      	nop
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010530:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010538:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010540:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801054c:	2b80      	cmp	r3, #128	@ 0x80
 801054e:	d109      	bne.n	8010564 <UART_DMAError+0x40>
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	2b21      	cmp	r3, #33	@ 0x21
 8010554:	d106      	bne.n	8010564 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	2200      	movs	r2, #0
 801055a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801055e:	6978      	ldr	r0, [r7, #20]
 8010560:	f7ff fe2c 	bl	80101bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801056e:	2b40      	cmp	r3, #64	@ 0x40
 8010570:	d109      	bne.n	8010586 <UART_DMAError+0x62>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2b22      	cmp	r3, #34	@ 0x22
 8010576:	d106      	bne.n	8010586 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	2200      	movs	r2, #0
 801057c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010580:	6978      	ldr	r0, [r7, #20]
 8010582:	f7ff fe5d 	bl	8010240 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801058c:	f043 0210 	orr.w	r2, r3, #16
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010596:	6978      	ldr	r0, [r7, #20]
 8010598:	f7f0 fd2a 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801059c:	bf00      	nop
 801059e:	3718      	adds	r7, #24
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f7f0 fd18 	bl	8000ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105c0:	bf00      	nop
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	e853 3f00 	ldrex	r3, [r3]
 80105dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105e4:	61fb      	str	r3, [r7, #28]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	461a      	mov	r2, r3
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	61bb      	str	r3, [r7, #24]
 80105f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f2:	6979      	ldr	r1, [r7, #20]
 80105f4:	69ba      	ldr	r2, [r7, #24]
 80105f6:	e841 2300 	strex	r3, r2, [r1]
 80105fa:	613b      	str	r3, [r7, #16]
   return(result);
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1e6      	bne.n	80105d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2220      	movs	r2, #32
 8010606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7f0 fd63 	bl	80010dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010616:	bf00      	nop
 8010618:	3720      	adds	r7, #32
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801061e:	b480      	push	{r7}
 8010620:	b083      	sub	sp, #12
 8010622:	af00      	add	r7, sp, #0
 8010624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010626:	bf00      	nop
 8010628:	370c      	adds	r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010632:	b480      	push	{r7}
 8010634:	b083      	sub	sp, #12
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801063a:	bf00      	nop
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801064e:	bf00      	nop
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr

0801065a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b084      	sub	sp, #16
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010668:	2b01      	cmp	r3, #1
 801066a:	d101      	bne.n	8010670 <HAL_UARTEx_EnableFifoMode+0x16>
 801066c:	2302      	movs	r3, #2
 801066e:	e02b      	b.n	80106c8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2224      	movs	r2, #36	@ 0x24
 801067c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f022 0201 	bic.w	r2, r2, #1
 8010696:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801069e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80106a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 f8dd 	bl	8010870 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2220      	movs	r2, #32
 80106ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3710      	adds	r7, #16
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d101      	bne.n	80106e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80106e4:	2302      	movs	r3, #2
 80106e6:	e02d      	b.n	8010744 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2201      	movs	r2, #1
 80106ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2224      	movs	r2, #36	@ 0x24
 80106f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f022 0201 	bic.w	r2, r2, #1
 801070e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	430a      	orrs	r2, r1
 8010722:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f8a3 	bl	8010870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801075c:	2b01      	cmp	r3, #1
 801075e:	d101      	bne.n	8010764 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010760:	2302      	movs	r3, #2
 8010762:	e02d      	b.n	80107c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2224      	movs	r2, #36	@ 0x24
 8010770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f022 0201 	bic.w	r2, r2, #1
 801078a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	683a      	ldr	r2, [r7, #0]
 801079c:	430a      	orrs	r2, r1
 801079e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 f865 	bl	8010870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2220      	movs	r2, #32
 80107b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b08c      	sub	sp, #48	@ 0x30
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	4613      	mov	r3, r2
 80107d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107dc:	2b20      	cmp	r3, #32
 80107de:	d142      	bne.n	8010866 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80107e6:	88fb      	ldrh	r3, [r7, #6]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80107ec:	2301      	movs	r3, #1
 80107ee:	e03b      	b.n	8010868 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2201      	movs	r2, #1
 80107f4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2200      	movs	r2, #0
 80107fa:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80107fc:	88fb      	ldrh	r3, [r7, #6]
 80107fe:	461a      	mov	r2, r3
 8010800:	68b9      	ldr	r1, [r7, #8]
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f7ff fc34 	bl	8010070 <UART_Start_Receive_DMA>
 8010808:	4603      	mov	r3, r0
 801080a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801080e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010812:	2b00      	cmp	r3, #0
 8010814:	d124      	bne.n	8010860 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801081a:	2b01      	cmp	r3, #1
 801081c:	d11d      	bne.n	801085a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2210      	movs	r2, #16
 8010824:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	617b      	str	r3, [r7, #20]
   return(result);
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	f043 0310 	orr.w	r3, r3, #16
 801083a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010844:	627b      	str	r3, [r7, #36]	@ 0x24
 8010846:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6a39      	ldr	r1, [r7, #32]
 801084a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	61fb      	str	r3, [r7, #28]
   return(result);
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e6      	bne.n	8010826 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8010858:	e002      	b.n	8010860 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801085a:	2301      	movs	r3, #1
 801085c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8010860:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010864:	e000      	b.n	8010868 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010866:	2302      	movs	r3, #2
  }
}
 8010868:	4618      	mov	r0, r3
 801086a:	3730      	adds	r7, #48	@ 0x30
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801087c:	2b00      	cmp	r3, #0
 801087e:	d108      	bne.n	8010892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2201      	movs	r2, #1
 801088c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010890:	e031      	b.n	80108f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010892:	2310      	movs	r3, #16
 8010894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010896:	2310      	movs	r3, #16
 8010898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	0e5b      	lsrs	r3, r3, #25
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	f003 0307 	and.w	r3, r3, #7
 80108a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	0f5b      	lsrs	r3, r3, #29
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	f003 0307 	and.w	r3, r3, #7
 80108b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80108ba:	7bbb      	ldrb	r3, [r7, #14]
 80108bc:	7b3a      	ldrb	r2, [r7, #12]
 80108be:	4911      	ldr	r1, [pc, #68]	@ (8010904 <UARTEx_SetNbDataToProcess+0x94>)
 80108c0:	5c8a      	ldrb	r2, [r1, r2]
 80108c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80108c6:	7b3a      	ldrb	r2, [r7, #12]
 80108c8:	490f      	ldr	r1, [pc, #60]	@ (8010908 <UARTEx_SetNbDataToProcess+0x98>)
 80108ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80108cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	7b7a      	ldrb	r2, [r7, #13]
 80108dc:	4909      	ldr	r1, [pc, #36]	@ (8010904 <UARTEx_SetNbDataToProcess+0x94>)
 80108de:	5c8a      	ldrb	r2, [r1, r2]
 80108e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80108e4:	7b7a      	ldrb	r2, [r7, #13]
 80108e6:	4908      	ldr	r1, [pc, #32]	@ (8010908 <UARTEx_SetNbDataToProcess+0x98>)
 80108e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80108ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80108f6:	bf00      	nop
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	08017f18 	.word	0x08017f18
 8010908:	08017f20 	.word	0x08017f20

0801090c <__NVIC_SetPriority>:
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	6039      	str	r1, [r7, #0]
 8010916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801091c:	2b00      	cmp	r3, #0
 801091e:	db0a      	blt.n	8010936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	b2da      	uxtb	r2, r3
 8010924:	490c      	ldr	r1, [pc, #48]	@ (8010958 <__NVIC_SetPriority+0x4c>)
 8010926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801092a:	0112      	lsls	r2, r2, #4
 801092c:	b2d2      	uxtb	r2, r2
 801092e:	440b      	add	r3, r1
 8010930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010934:	e00a      	b.n	801094c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	b2da      	uxtb	r2, r3
 801093a:	4908      	ldr	r1, [pc, #32]	@ (801095c <__NVIC_SetPriority+0x50>)
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	f003 030f 	and.w	r3, r3, #15
 8010942:	3b04      	subs	r3, #4
 8010944:	0112      	lsls	r2, r2, #4
 8010946:	b2d2      	uxtb	r2, r2
 8010948:	440b      	add	r3, r1
 801094a:	761a      	strb	r2, [r3, #24]
}
 801094c:	bf00      	nop
 801094e:	370c      	adds	r7, #12
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr
 8010958:	e000e100 	.word	0xe000e100
 801095c:	e000ed00 	.word	0xe000ed00

08010960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010964:	4b05      	ldr	r3, [pc, #20]	@ (801097c <SysTick_Handler+0x1c>)
 8010966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010968:	f001 fdb0 	bl	80124cc <xTaskGetSchedulerState>
 801096c:	4603      	mov	r3, r0
 801096e:	2b01      	cmp	r3, #1
 8010970:	d001      	beq.n	8010976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010972:	f002 fba9 	bl	80130c8 <xPortSysTickHandler>
  }
}
 8010976:	bf00      	nop
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	e000e010 	.word	0xe000e010

08010980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010980:	b580      	push	{r7, lr}
 8010982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010984:	2100      	movs	r1, #0
 8010986:	f06f 0004 	mvn.w	r0, #4
 801098a:	f7ff ffbf 	bl	801090c <__NVIC_SetPriority>
#endif
}
 801098e:	bf00      	nop
 8010990:	bd80      	pop	{r7, pc}
	...

08010994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801099a:	f3ef 8305 	mrs	r3, IPSR
 801099e:	603b      	str	r3, [r7, #0]
  return(result);
 80109a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80109a6:	f06f 0305 	mvn.w	r3, #5
 80109aa:	607b      	str	r3, [r7, #4]
 80109ac:	e00c      	b.n	80109c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80109ae:	4b0a      	ldr	r3, [pc, #40]	@ (80109d8 <osKernelInitialize+0x44>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d105      	bne.n	80109c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80109b6:	4b08      	ldr	r3, [pc, #32]	@ (80109d8 <osKernelInitialize+0x44>)
 80109b8:	2201      	movs	r2, #1
 80109ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80109bc:	2300      	movs	r3, #0
 80109be:	607b      	str	r3, [r7, #4]
 80109c0:	e002      	b.n	80109c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80109c8:	687b      	ldr	r3, [r7, #4]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	24002aac 	.word	0x24002aac

080109dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109e2:	f3ef 8305 	mrs	r3, IPSR
 80109e6:	603b      	str	r3, [r7, #0]
  return(result);
 80109e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d003      	beq.n	80109f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80109ee:	f06f 0305 	mvn.w	r3, #5
 80109f2:	607b      	str	r3, [r7, #4]
 80109f4:	e010      	b.n	8010a18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80109f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010a24 <osKernelStart+0x48>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d109      	bne.n	8010a12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80109fe:	f7ff ffbf 	bl	8010980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010a02:	4b08      	ldr	r3, [pc, #32]	@ (8010a24 <osKernelStart+0x48>)
 8010a04:	2202      	movs	r2, #2
 8010a06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010a08:	f001 f8fc 	bl	8011c04 <vTaskStartScheduler>
      stat = osOK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	607b      	str	r3, [r7, #4]
 8010a10:	e002      	b.n	8010a18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010a12:	f04f 33ff 	mov.w	r3, #4294967295
 8010a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010a18:	687b      	ldr	r3, [r7, #4]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3708      	adds	r7, #8
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	24002aac 	.word	0x24002aac

08010a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08e      	sub	sp, #56	@ 0x38
 8010a2c:	af04      	add	r7, sp, #16
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010a34:	2300      	movs	r3, #0
 8010a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a38:	f3ef 8305 	mrs	r3, IPSR
 8010a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8010a3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d17e      	bne.n	8010b42 <osThreadNew+0x11a>
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d07b      	beq.n	8010b42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010a4a:	2380      	movs	r3, #128	@ 0x80
 8010a4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010a4e:	2318      	movs	r3, #24
 8010a50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010a52:	2300      	movs	r3, #0
 8010a54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d045      	beq.n	8010aee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d002      	beq.n	8010a70 <osThreadNew+0x48>
        name = attr->name;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d008      	beq.n	8010a96 <osThreadNew+0x6e>
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	2b38      	cmp	r3, #56	@ 0x38
 8010a88:	d805      	bhi.n	8010a96 <osThreadNew+0x6e>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <osThreadNew+0x72>
        return (NULL);
 8010a96:	2300      	movs	r3, #0
 8010a98:	e054      	b.n	8010b44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d003      	beq.n	8010aaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	695b      	ldr	r3, [r3, #20]
 8010aa6:	089b      	lsrs	r3, r3, #2
 8010aa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00e      	beq.n	8010ad0 <osThreadNew+0xa8>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68db      	ldr	r3, [r3, #12]
 8010ab6:	2ba7      	cmp	r3, #167	@ 0xa7
 8010ab8:	d90a      	bls.n	8010ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d006      	beq.n	8010ad0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d002      	beq.n	8010ad0 <osThreadNew+0xa8>
        mem = 1;
 8010aca:	2301      	movs	r3, #1
 8010acc:	61bb      	str	r3, [r7, #24]
 8010ace:	e010      	b.n	8010af2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10c      	bne.n	8010af2 <osThreadNew+0xca>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d108      	bne.n	8010af2 <osThreadNew+0xca>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	691b      	ldr	r3, [r3, #16]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d104      	bne.n	8010af2 <osThreadNew+0xca>
          mem = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	61bb      	str	r3, [r7, #24]
 8010aec:	e001      	b.n	8010af2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d110      	bne.n	8010b1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010b00:	9202      	str	r2, [sp, #8]
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	6a3a      	ldr	r2, [r7, #32]
 8010b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f000 fe3a 	bl	8011788 <xTaskCreateStatic>
 8010b14:	4603      	mov	r3, r0
 8010b16:	613b      	str	r3, [r7, #16]
 8010b18:	e013      	b.n	8010b42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d110      	bne.n	8010b42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	f107 0310 	add.w	r3, r7, #16
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 fe88 	bl	8011848 <xTaskCreate>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d001      	beq.n	8010b42 <osThreadNew+0x11a>
            hTask = NULL;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010b42:	693b      	ldr	r3, [r7, #16]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3728      	adds	r7, #40	@ 0x28
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	4a07      	ldr	r2, [pc, #28]	@ (8010b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8010b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	4a06      	ldr	r2, [pc, #24]	@ (8010b7c <vApplicationGetIdleTaskMemory+0x30>)
 8010b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2280      	movs	r2, #128	@ 0x80
 8010b68:	601a      	str	r2, [r3, #0]
}
 8010b6a:	bf00      	nop
 8010b6c:	3714      	adds	r7, #20
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	24002ab0 	.word	0x24002ab0
 8010b7c:	24002b58 	.word	0x24002b58

08010b80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	4a07      	ldr	r2, [pc, #28]	@ (8010bac <vApplicationGetTimerTaskMemory+0x2c>)
 8010b90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	4a06      	ldr	r2, [pc, #24]	@ (8010bb0 <vApplicationGetTimerTaskMemory+0x30>)
 8010b96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010b9e:	601a      	str	r2, [r3, #0]
}
 8010ba0:	bf00      	nop
 8010ba2:	3714      	adds	r7, #20
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr
 8010bac:	24002d58 	.word	0x24002d58
 8010bb0:	24002e00 	.word	0x24002e00

08010bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f103 0208 	add.w	r2, r3, #8
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8010bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f103 0208 	add.w	r2, r3, #8
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f103 0208 	add.w	r2, r3, #8
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c02:	bf00      	nop
 8010c04:	370c      	adds	r7, #12
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr

08010c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c0e:	b480      	push	{r7}
 8010c10:	b085      	sub	sp, #20
 8010c12:	af00      	add	r7, sp, #0
 8010c14:	6078      	str	r0, [r7, #4]
 8010c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	689a      	ldr	r2, [r3, #8]
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
}
 8010c4a:	bf00      	nop
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c6c:	d103      	bne.n	8010c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	e00c      	b.n	8010c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3308      	adds	r3, #8
 8010c7a:	60fb      	str	r3, [r7, #12]
 8010c7c:	e002      	b.n	8010c84 <vListInsert+0x2e>
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	60fb      	str	r3, [r7, #12]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d2f6      	bcs.n	8010c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	683a      	ldr	r2, [r7, #0]
 8010caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	1c5a      	adds	r2, r3, #1
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	601a      	str	r2, [r3, #0]
}
 8010cbc:	bf00      	nop
 8010cbe:	3714      	adds	r7, #20
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc6:	4770      	bx	lr

08010cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	6892      	ldr	r2, [r2, #8]
 8010cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	6852      	ldr	r2, [r2, #4]
 8010ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d103      	bne.n	8010cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	689a      	ldr	r2, [r3, #8]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	1e5a      	subs	r2, r3, #1
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10b      	bne.n	8010d48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010d42:	bf00      	nop
 8010d44:	bf00      	nop
 8010d46:	e7fd      	b.n	8010d44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010d48:	f002 f92e 	bl	8012fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d54:	68f9      	ldr	r1, [r7, #12]
 8010d56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010d58:	fb01 f303 	mul.w	r3, r1, r3
 8010d5c:	441a      	add	r2, r3
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	68f9      	ldr	r1, [r7, #12]
 8010d7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010d7e:	fb01 f303 	mul.w	r3, r1, r3
 8010d82:	441a      	add	r2, r3
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	22ff      	movs	r2, #255	@ 0xff
 8010d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	22ff      	movs	r2, #255	@ 0xff
 8010d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d114      	bne.n	8010dc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	691b      	ldr	r3, [r3, #16]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d01a      	beq.n	8010ddc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3310      	adds	r3, #16
 8010daa:	4618      	mov	r0, r3
 8010dac:	f001 f9c8 	bl	8012140 <xTaskRemoveFromEventList>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d012      	beq.n	8010ddc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010db6:	4b0d      	ldr	r3, [pc, #52]	@ (8010dec <xQueueGenericReset+0xd0>)
 8010db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	e009      	b.n	8010ddc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	3310      	adds	r3, #16
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7ff fef1 	bl	8010bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	3324      	adds	r3, #36	@ 0x24
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7ff feec 	bl	8010bb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ddc:	f002 f916 	bl	801300c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010de0:	2301      	movs	r3, #1
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	e000ed04 	.word	0xe000ed04

08010df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b08e      	sub	sp, #56	@ 0x38
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10b      	bne.n	8010e1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e08:	f383 8811 	msr	BASEPRI, r3
 8010e0c:	f3bf 8f6f 	isb	sy
 8010e10:	f3bf 8f4f 	dsb	sy
 8010e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010e16:	bf00      	nop
 8010e18:	bf00      	nop
 8010e1a:	e7fd      	b.n	8010e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d10b      	bne.n	8010e3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010e34:	bf00      	nop
 8010e36:	bf00      	nop
 8010e38:	e7fd      	b.n	8010e36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <xQueueGenericCreateStatic+0x56>
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <xQueueGenericCreateStatic+0x5a>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e000      	b.n	8010e4c <xQueueGenericCreateStatic+0x5c>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d10b      	bne.n	8010e68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	623b      	str	r3, [r7, #32]
}
 8010e62:	bf00      	nop
 8010e64:	bf00      	nop
 8010e66:	e7fd      	b.n	8010e64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d102      	bne.n	8010e74 <xQueueGenericCreateStatic+0x84>
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d101      	bne.n	8010e78 <xQueueGenericCreateStatic+0x88>
 8010e74:	2301      	movs	r3, #1
 8010e76:	e000      	b.n	8010e7a <xQueueGenericCreateStatic+0x8a>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10b      	bne.n	8010e96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	61fb      	str	r3, [r7, #28]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010e96:	2350      	movs	r3, #80	@ 0x50
 8010e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	2b50      	cmp	r3, #80	@ 0x50
 8010e9e:	d00b      	beq.n	8010eb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	61bb      	str	r3, [r7, #24]
}
 8010eb2:	bf00      	nop
 8010eb4:	bf00      	nop
 8010eb6:	e7fd      	b.n	8010eb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010eb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00d      	beq.n	8010ee0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ecc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	68b9      	ldr	r1, [r7, #8]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f000 f840 	bl	8010f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3730      	adds	r7, #48	@ 0x30
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b08a      	sub	sp, #40	@ 0x28
 8010eee:	af02      	add	r7, sp, #8
 8010ef0:	60f8      	str	r0, [r7, #12]
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10b      	bne.n	8010f16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	613b      	str	r3, [r7, #16]
}
 8010f10:	bf00      	nop
 8010f12:	bf00      	nop
 8010f14:	e7fd      	b.n	8010f12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	fb02 f303 	mul.w	r3, r2, r3
 8010f1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	3350      	adds	r3, #80	@ 0x50
 8010f24:	4618      	mov	r0, r3
 8010f26:	f002 f961 	bl	80131ec <pvPortMalloc>
 8010f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d011      	beq.n	8010f56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	3350      	adds	r3, #80	@ 0x50
 8010f3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f44:	79fa      	ldrb	r2, [r7, #7]
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	68b9      	ldr	r1, [r7, #8]
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f000 f805 	bl	8010f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010f56:	69bb      	ldr	r3, [r7, #24]
	}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3720      	adds	r7, #32
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
 8010f6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d103      	bne.n	8010f7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	69ba      	ldr	r2, [r7, #24]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	e002      	b.n	8010f82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010f8e:	2101      	movs	r1, #1
 8010f90:	69b8      	ldr	r0, [r7, #24]
 8010f92:	f7ff fec3 	bl	8010d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	78fa      	ldrb	r2, [r7, #3]
 8010f9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010f9e:	bf00      	nop
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
	...

08010fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08e      	sub	sp, #56	@ 0x38
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]
 8010fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d10b      	bne.n	8010fdc <xQueueGenericSend+0x34>
	__asm volatile
 8010fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010fd6:	bf00      	nop
 8010fd8:	bf00      	nop
 8010fda:	e7fd      	b.n	8010fd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d103      	bne.n	8010fea <xQueueGenericSend+0x42>
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d101      	bne.n	8010fee <xQueueGenericSend+0x46>
 8010fea:	2301      	movs	r3, #1
 8010fec:	e000      	b.n	8010ff0 <xQueueGenericSend+0x48>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10b      	bne.n	801100c <xQueueGenericSend+0x64>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011006:	bf00      	nop
 8011008:	bf00      	nop
 801100a:	e7fd      	b.n	8011008 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	2b02      	cmp	r3, #2
 8011010:	d103      	bne.n	801101a <xQueueGenericSend+0x72>
 8011012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011016:	2b01      	cmp	r3, #1
 8011018:	d101      	bne.n	801101e <xQueueGenericSend+0x76>
 801101a:	2301      	movs	r3, #1
 801101c:	e000      	b.n	8011020 <xQueueGenericSend+0x78>
 801101e:	2300      	movs	r3, #0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d10b      	bne.n	801103c <xQueueGenericSend+0x94>
	__asm volatile
 8011024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	623b      	str	r3, [r7, #32]
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	e7fd      	b.n	8011038 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801103c:	f001 fa46 	bl	80124cc <xTaskGetSchedulerState>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d102      	bne.n	801104c <xQueueGenericSend+0xa4>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d101      	bne.n	8011050 <xQueueGenericSend+0xa8>
 801104c:	2301      	movs	r3, #1
 801104e:	e000      	b.n	8011052 <xQueueGenericSend+0xaa>
 8011050:	2300      	movs	r3, #0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10b      	bne.n	801106e <xQueueGenericSend+0xc6>
	__asm volatile
 8011056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801105a:	f383 8811 	msr	BASEPRI, r3
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f3bf 8f4f 	dsb	sy
 8011066:	61fb      	str	r3, [r7, #28]
}
 8011068:	bf00      	nop
 801106a:	bf00      	nop
 801106c:	e7fd      	b.n	801106a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801106e:	f001 ff9b 	bl	8012fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801107a:	429a      	cmp	r2, r3
 801107c:	d302      	bcc.n	8011084 <xQueueGenericSend+0xdc>
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	2b02      	cmp	r3, #2
 8011082:	d129      	bne.n	80110d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011084:	683a      	ldr	r2, [r7, #0]
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801108a:	f000 fa0f 	bl	80114ac <prvCopyDataToQueue>
 801108e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011094:	2b00      	cmp	r3, #0
 8011096:	d010      	beq.n	80110ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801109a:	3324      	adds	r3, #36	@ 0x24
 801109c:	4618      	mov	r0, r3
 801109e:	f001 f84f 	bl	8012140 <xTaskRemoveFromEventList>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d013      	beq.n	80110d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80110a8:	4b3f      	ldr	r3, [pc, #252]	@ (80111a8 <xQueueGenericSend+0x200>)
 80110aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	e00a      	b.n	80110d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80110ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d007      	beq.n	80110d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80110c0:	4b39      	ldr	r3, [pc, #228]	@ (80111a8 <xQueueGenericSend+0x200>)
 80110c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110c6:	601a      	str	r2, [r3, #0]
 80110c8:	f3bf 8f4f 	dsb	sy
 80110cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80110d0:	f001 ff9c 	bl	801300c <vPortExitCritical>
				return pdPASS;
 80110d4:	2301      	movs	r3, #1
 80110d6:	e063      	b.n	80111a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d103      	bne.n	80110e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80110de:	f001 ff95 	bl	801300c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80110e2:	2300      	movs	r3, #0
 80110e4:	e05c      	b.n	80111a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d106      	bne.n	80110fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110ec:	f107 0314 	add.w	r3, r7, #20
 80110f0:	4618      	mov	r0, r3
 80110f2:	f001 f889 	bl	8012208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110f6:	2301      	movs	r3, #1
 80110f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80110fa:	f001 ff87 	bl	801300c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80110fe:	f000 fdf1 	bl	8011ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011102:	f001 ff51 	bl	8012fa8 <vPortEnterCritical>
 8011106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801110c:	b25b      	sxtb	r3, r3
 801110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011112:	d103      	bne.n	801111c <xQueueGenericSend+0x174>
 8011114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011116:	2200      	movs	r2, #0
 8011118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801111c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801111e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011122:	b25b      	sxtb	r3, r3
 8011124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011128:	d103      	bne.n	8011132 <xQueueGenericSend+0x18a>
 801112a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801112c:	2200      	movs	r2, #0
 801112e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011132:	f001 ff6b 	bl	801300c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011136:	1d3a      	adds	r2, r7, #4
 8011138:	f107 0314 	add.w	r3, r7, #20
 801113c:	4611      	mov	r1, r2
 801113e:	4618      	mov	r0, r3
 8011140:	f001 f878 	bl	8012234 <xTaskCheckForTimeOut>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	d124      	bne.n	8011194 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801114a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801114c:	f000 faa6 	bl	801169c <prvIsQueueFull>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d018      	beq.n	8011188 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011158:	3310      	adds	r3, #16
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	4611      	mov	r1, r2
 801115e:	4618      	mov	r0, r3
 8011160:	f000 ff9c 	bl	801209c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011166:	f000 fa31 	bl	80115cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801116a:	f000 fdc9 	bl	8011d00 <xTaskResumeAll>
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	f47f af7c 	bne.w	801106e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011176:	4b0c      	ldr	r3, [pc, #48]	@ (80111a8 <xQueueGenericSend+0x200>)
 8011178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	f3bf 8f6f 	isb	sy
 8011186:	e772      	b.n	801106e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801118a:	f000 fa1f 	bl	80115cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801118e:	f000 fdb7 	bl	8011d00 <xTaskResumeAll>
 8011192:	e76c      	b.n	801106e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011196:	f000 fa19 	bl	80115cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801119a:	f000 fdb1 	bl	8011d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801119e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3738      	adds	r7, #56	@ 0x38
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	e000ed04 	.word	0xe000ed04

080111ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b090      	sub	sp, #64	@ 0x40
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
 80111b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80111be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10b      	bne.n	80111dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80111c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80111d6:	bf00      	nop
 80111d8:	bf00      	nop
 80111da:	e7fd      	b.n	80111d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d103      	bne.n	80111ea <xQueueGenericSendFromISR+0x3e>
 80111e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <xQueueGenericSendFromISR+0x42>
 80111ea:	2301      	movs	r3, #1
 80111ec:	e000      	b.n	80111f0 <xQueueGenericSendFromISR+0x44>
 80111ee:	2300      	movs	r3, #0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10b      	bne.n	801120c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80111f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111f8:	f383 8811 	msr	BASEPRI, r3
 80111fc:	f3bf 8f6f 	isb	sy
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011206:	bf00      	nop
 8011208:	bf00      	nop
 801120a:	e7fd      	b.n	8011208 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	2b02      	cmp	r3, #2
 8011210:	d103      	bne.n	801121a <xQueueGenericSendFromISR+0x6e>
 8011212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011216:	2b01      	cmp	r3, #1
 8011218:	d101      	bne.n	801121e <xQueueGenericSendFromISR+0x72>
 801121a:	2301      	movs	r3, #1
 801121c:	e000      	b.n	8011220 <xQueueGenericSendFromISR+0x74>
 801121e:	2300      	movs	r3, #0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10b      	bne.n	801123c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011228:	f383 8811 	msr	BASEPRI, r3
 801122c:	f3bf 8f6f 	isb	sy
 8011230:	f3bf 8f4f 	dsb	sy
 8011234:	623b      	str	r3, [r7, #32]
}
 8011236:	bf00      	nop
 8011238:	bf00      	nop
 801123a:	e7fd      	b.n	8011238 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801123c:	f001 ff94 	bl	8013168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011240:	f3ef 8211 	mrs	r2, BASEPRI
 8011244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011248:	f383 8811 	msr	BASEPRI, r3
 801124c:	f3bf 8f6f 	isb	sy
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	61fa      	str	r2, [r7, #28]
 8011256:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011258:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801125a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801125c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011264:	429a      	cmp	r2, r3
 8011266:	d302      	bcc.n	801126e <xQueueGenericSendFromISR+0xc2>
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	2b02      	cmp	r3, #2
 801126c:	d12f      	bne.n	80112ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011270:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011274:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801127e:	683a      	ldr	r2, [r7, #0]
 8011280:	68b9      	ldr	r1, [r7, #8]
 8011282:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011284:	f000 f912 	bl	80114ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011288:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011290:	d112      	bne.n	80112b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011296:	2b00      	cmp	r3, #0
 8011298:	d016      	beq.n	80112c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801129a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129c:	3324      	adds	r3, #36	@ 0x24
 801129e:	4618      	mov	r0, r3
 80112a0:	f000 ff4e 	bl	8012140 <xTaskRemoveFromEventList>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00e      	beq.n	80112c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00b      	beq.n	80112c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2201      	movs	r2, #1
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	e007      	b.n	80112c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80112bc:	3301      	adds	r3, #1
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	b25a      	sxtb	r2, r3
 80112c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80112c8:	2301      	movs	r3, #1
 80112ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80112cc:	e001      	b.n	80112d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112ce:	2300      	movs	r3, #0
 80112d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80112dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3740      	adds	r7, #64	@ 0x40
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b08c      	sub	sp, #48	@ 0x30
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80112f4:	2300      	movs	r3, #0
 80112f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80112fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10b      	bne.n	801131a <xQueueReceive+0x32>
	__asm volatile
 8011302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011306:	f383 8811 	msr	BASEPRI, r3
 801130a:	f3bf 8f6f 	isb	sy
 801130e:	f3bf 8f4f 	dsb	sy
 8011312:	623b      	str	r3, [r7, #32]
}
 8011314:	bf00      	nop
 8011316:	bf00      	nop
 8011318:	e7fd      	b.n	8011316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d103      	bne.n	8011328 <xQueueReceive+0x40>
 8011320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011324:	2b00      	cmp	r3, #0
 8011326:	d101      	bne.n	801132c <xQueueReceive+0x44>
 8011328:	2301      	movs	r3, #1
 801132a:	e000      	b.n	801132e <xQueueReceive+0x46>
 801132c:	2300      	movs	r3, #0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d10b      	bne.n	801134a <xQueueReceive+0x62>
	__asm volatile
 8011332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	61fb      	str	r3, [r7, #28]
}
 8011344:	bf00      	nop
 8011346:	bf00      	nop
 8011348:	e7fd      	b.n	8011346 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801134a:	f001 f8bf 	bl	80124cc <xTaskGetSchedulerState>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d102      	bne.n	801135a <xQueueReceive+0x72>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d101      	bne.n	801135e <xQueueReceive+0x76>
 801135a:	2301      	movs	r3, #1
 801135c:	e000      	b.n	8011360 <xQueueReceive+0x78>
 801135e:	2300      	movs	r3, #0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d10b      	bne.n	801137c <xQueueReceive+0x94>
	__asm volatile
 8011364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	61bb      	str	r3, [r7, #24]
}
 8011376:	bf00      	nop
 8011378:	bf00      	nop
 801137a:	e7fd      	b.n	8011378 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801137c:	f001 fe14 	bl	8012fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011384:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011388:	2b00      	cmp	r3, #0
 801138a:	d01f      	beq.n	80113cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801138c:	68b9      	ldr	r1, [r7, #8]
 801138e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011390:	f000 f8f6 	bl	8011580 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011396:	1e5a      	subs	r2, r3, #1
 8011398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801139a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801139c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d00f      	beq.n	80113c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113a6:	3310      	adds	r3, #16
 80113a8:	4618      	mov	r0, r3
 80113aa:	f000 fec9 	bl	8012140 <xTaskRemoveFromEventList>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d007      	beq.n	80113c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80113b4:	4b3c      	ldr	r3, [pc, #240]	@ (80114a8 <xQueueReceive+0x1c0>)
 80113b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80113c4:	f001 fe22 	bl	801300c <vPortExitCritical>
				return pdPASS;
 80113c8:	2301      	movs	r3, #1
 80113ca:	e069      	b.n	80114a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d103      	bne.n	80113da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80113d2:	f001 fe1b 	bl	801300c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80113d6:	2300      	movs	r3, #0
 80113d8:	e062      	b.n	80114a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80113da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d106      	bne.n	80113ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113e0:	f107 0310 	add.w	r3, r7, #16
 80113e4:	4618      	mov	r0, r3
 80113e6:	f000 ff0f 	bl	8012208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113ea:	2301      	movs	r3, #1
 80113ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113ee:	f001 fe0d 	bl	801300c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113f2:	f000 fc77 	bl	8011ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113f6:	f001 fdd7 	bl	8012fa8 <vPortEnterCritical>
 80113fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011400:	b25b      	sxtb	r3, r3
 8011402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011406:	d103      	bne.n	8011410 <xQueueReceive+0x128>
 8011408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801140a:	2200      	movs	r2, #0
 801140c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011412:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011416:	b25b      	sxtb	r3, r3
 8011418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801141c:	d103      	bne.n	8011426 <xQueueReceive+0x13e>
 801141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011420:	2200      	movs	r2, #0
 8011422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011426:	f001 fdf1 	bl	801300c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801142a:	1d3a      	adds	r2, r7, #4
 801142c:	f107 0310 	add.w	r3, r7, #16
 8011430:	4611      	mov	r1, r2
 8011432:	4618      	mov	r0, r3
 8011434:	f000 fefe 	bl	8012234 <xTaskCheckForTimeOut>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d123      	bne.n	8011486 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801143e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011440:	f000 f916 	bl	8011670 <prvIsQueueEmpty>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d017      	beq.n	801147a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801144a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801144c:	3324      	adds	r3, #36	@ 0x24
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	4611      	mov	r1, r2
 8011452:	4618      	mov	r0, r3
 8011454:	f000 fe22 	bl	801209c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801145a:	f000 f8b7 	bl	80115cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801145e:	f000 fc4f 	bl	8011d00 <xTaskResumeAll>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d189      	bne.n	801137c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011468:	4b0f      	ldr	r3, [pc, #60]	@ (80114a8 <xQueueReceive+0x1c0>)
 801146a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801146e:	601a      	str	r2, [r3, #0]
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	f3bf 8f6f 	isb	sy
 8011478:	e780      	b.n	801137c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801147a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801147c:	f000 f8a6 	bl	80115cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011480:	f000 fc3e 	bl	8011d00 <xTaskResumeAll>
 8011484:	e77a      	b.n	801137c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011488:	f000 f8a0 	bl	80115cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801148c:	f000 fc38 	bl	8011d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011492:	f000 f8ed 	bl	8011670 <prvIsQueueEmpty>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	f43f af6f 	beq.w	801137c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801149e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3730      	adds	r7, #48	@ 0x30
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	e000ed04 	.word	0xe000ed04

080114ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80114b8:	2300      	movs	r3, #0
 80114ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d10d      	bne.n	80114e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d14d      	bne.n	801156e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	689b      	ldr	r3, [r3, #8]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f001 f816 	bl	8012508 <xTaskPriorityDisinherit>
 80114dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	609a      	str	r2, [r3, #8]
 80114e4:	e043      	b.n	801156e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d119      	bne.n	8011520 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6858      	ldr	r0, [r3, #4]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114f4:	461a      	mov	r2, r3
 80114f6:	68b9      	ldr	r1, [r7, #8]
 80114f8:	f003 fecd 	bl	8015296 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011504:	441a      	add	r2, r3
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	685a      	ldr	r2, [r3, #4]
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	689b      	ldr	r3, [r3, #8]
 8011512:	429a      	cmp	r2, r3
 8011514:	d32b      	bcc.n	801156e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	605a      	str	r2, [r3, #4]
 801151e:	e026      	b.n	801156e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	68d8      	ldr	r0, [r3, #12]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011528:	461a      	mov	r2, r3
 801152a:	68b9      	ldr	r1, [r7, #8]
 801152c:	f003 feb3 	bl	8015296 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	68da      	ldr	r2, [r3, #12]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011538:	425b      	negs	r3, r3
 801153a:	441a      	add	r2, r3
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	68da      	ldr	r2, [r3, #12]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	429a      	cmp	r2, r3
 801154a:	d207      	bcs.n	801155c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	689a      	ldr	r2, [r3, #8]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011554:	425b      	negs	r3, r3
 8011556:	441a      	add	r2, r3
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b02      	cmp	r3, #2
 8011560:	d105      	bne.n	801156e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	3b01      	subs	r3, #1
 801156c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011576:	697b      	ldr	r3, [r7, #20]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801158e:	2b00      	cmp	r3, #0
 8011590:	d018      	beq.n	80115c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	68da      	ldr	r2, [r3, #12]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801159a:	441a      	add	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68da      	ldr	r2, [r3, #12]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	689b      	ldr	r3, [r3, #8]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d303      	bcc.n	80115b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	68d9      	ldr	r1, [r3, #12]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115bc:	461a      	mov	r2, r3
 80115be:	6838      	ldr	r0, [r7, #0]
 80115c0:	f003 fe69 	bl	8015296 <memcpy>
	}
}
 80115c4:	bf00      	nop
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}

080115cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115d4:	f001 fce8 	bl	8012fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80115de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115e0:	e011      	b.n	8011606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d012      	beq.n	8011610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3324      	adds	r3, #36	@ 0x24
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 fda6 	bl	8012140 <xTaskRemoveFromEventList>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d001      	beq.n	80115fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80115fa:	f000 fe7f 	bl	80122fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80115fe:	7bfb      	ldrb	r3, [r7, #15]
 8011600:	3b01      	subs	r3, #1
 8011602:	b2db      	uxtb	r3, r3
 8011604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801160a:	2b00      	cmp	r3, #0
 801160c:	dce9      	bgt.n	80115e2 <prvUnlockQueue+0x16>
 801160e:	e000      	b.n	8011612 <prvUnlockQueue+0x46>
					break;
 8011610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	22ff      	movs	r2, #255	@ 0xff
 8011616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801161a:	f001 fcf7 	bl	801300c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801161e:	f001 fcc3 	bl	8012fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801162a:	e011      	b.n	8011650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d012      	beq.n	801165a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	3310      	adds	r3, #16
 8011638:	4618      	mov	r0, r3
 801163a:	f000 fd81 	bl	8012140 <xTaskRemoveFromEventList>
 801163e:	4603      	mov	r3, r0
 8011640:	2b00      	cmp	r3, #0
 8011642:	d001      	beq.n	8011648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011644:	f000 fe5a 	bl	80122fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011648:	7bbb      	ldrb	r3, [r7, #14]
 801164a:	3b01      	subs	r3, #1
 801164c:	b2db      	uxtb	r3, r3
 801164e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011654:	2b00      	cmp	r3, #0
 8011656:	dce9      	bgt.n	801162c <prvUnlockQueue+0x60>
 8011658:	e000      	b.n	801165c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801165a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	22ff      	movs	r2, #255	@ 0xff
 8011660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011664:	f001 fcd2 	bl	801300c <vPortExitCritical>
}
 8011668:	bf00      	nop
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011678:	f001 fc96 	bl	8012fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011684:	2301      	movs	r3, #1
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	e001      	b.n	801168e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801168e:	f001 fcbd 	bl	801300c <vPortExitCritical>

	return xReturn;
 8011692:	68fb      	ldr	r3, [r7, #12]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116a4:	f001 fc80 	bl	8012fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d102      	bne.n	80116ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80116b4:	2301      	movs	r3, #1
 80116b6:	60fb      	str	r3, [r7, #12]
 80116b8:	e001      	b.n	80116be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80116ba:	2300      	movs	r3, #0
 80116bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116be:	f001 fca5 	bl	801300c <vPortExitCritical>

	return xReturn;
 80116c2:	68fb      	ldr	r3, [r7, #12]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}

080116cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80116cc:	b480      	push	{r7}
 80116ce:	b085      	sub	sp, #20
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116d6:	2300      	movs	r3, #0
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	e014      	b.n	8011706 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80116dc:	4a0f      	ldr	r2, [pc, #60]	@ (801171c <vQueueAddToRegistry+0x50>)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10b      	bne.n	8011700 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80116e8:	490c      	ldr	r1, [pc, #48]	@ (801171c <vQueueAddToRegistry+0x50>)
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80116f2:	4a0a      	ldr	r2, [pc, #40]	@ (801171c <vQueueAddToRegistry+0x50>)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	4413      	add	r3, r2
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80116fe:	e006      	b.n	801170e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	3301      	adds	r3, #1
 8011704:	60fb      	str	r3, [r7, #12]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2b07      	cmp	r3, #7
 801170a:	d9e7      	bls.n	80116dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801170c:	bf00      	nop
 801170e:	bf00      	nop
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	24003200 	.word	0x24003200

08011720 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011730:	f001 fc3a 	bl	8012fa8 <vPortEnterCritical>
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801173a:	b25b      	sxtb	r3, r3
 801173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011740:	d103      	bne.n	801174a <vQueueWaitForMessageRestricted+0x2a>
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	2200      	movs	r2, #0
 8011746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011750:	b25b      	sxtb	r3, r3
 8011752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011756:	d103      	bne.n	8011760 <vQueueWaitForMessageRestricted+0x40>
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	2200      	movs	r2, #0
 801175c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011760:	f001 fc54 	bl	801300c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011768:	2b00      	cmp	r3, #0
 801176a:	d106      	bne.n	801177a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	3324      	adds	r3, #36	@ 0x24
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	68b9      	ldr	r1, [r7, #8]
 8011774:	4618      	mov	r0, r3
 8011776:	f000 fcb7 	bl	80120e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801177a:	6978      	ldr	r0, [r7, #20]
 801177c:	f7ff ff26 	bl	80115cc <prvUnlockQueue>
	}
 8011780:	bf00      	nop
 8011782:	3718      	adds	r7, #24
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011788:	b580      	push	{r7, lr}
 801178a:	b08e      	sub	sp, #56	@ 0x38
 801178c:	af04      	add	r7, sp, #16
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011798:	2b00      	cmp	r3, #0
 801179a:	d10b      	bne.n	80117b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801179c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	623b      	str	r3, [r7, #32]
}
 80117ae:	bf00      	nop
 80117b0:	bf00      	nop
 80117b2:	e7fd      	b.n	80117b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80117b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d10b      	bne.n	80117d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	61fb      	str	r3, [r7, #28]
}
 80117cc:	bf00      	nop
 80117ce:	bf00      	nop
 80117d0:	e7fd      	b.n	80117ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80117d2:	23a8      	movs	r3, #168	@ 0xa8
 80117d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80117da:	d00b      	beq.n	80117f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80117dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e0:	f383 8811 	msr	BASEPRI, r3
 80117e4:	f3bf 8f6f 	isb	sy
 80117e8:	f3bf 8f4f 	dsb	sy
 80117ec:	61bb      	str	r3, [r7, #24]
}
 80117ee:	bf00      	nop
 80117f0:	bf00      	nop
 80117f2:	e7fd      	b.n	80117f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80117f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80117f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d01e      	beq.n	801183a <xTaskCreateStatic+0xb2>
 80117fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d01b      	beq.n	801183a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011804:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801180a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180e:	2202      	movs	r2, #2
 8011810:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011814:	2300      	movs	r3, #0
 8011816:	9303      	str	r3, [sp, #12]
 8011818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181a:	9302      	str	r3, [sp, #8]
 801181c:	f107 0314 	add.w	r3, r7, #20
 8011820:	9301      	str	r3, [sp, #4]
 8011822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	68b9      	ldr	r1, [r7, #8]
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 f851 	bl	80118d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011832:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011834:	f000 f8f6 	bl	8011a24 <prvAddNewTaskToReadyList>
 8011838:	e001      	b.n	801183e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801183a:	2300      	movs	r3, #0
 801183c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801183e:	697b      	ldr	r3, [r7, #20]
	}
 8011840:	4618      	mov	r0, r3
 8011842:	3728      	adds	r7, #40	@ 0x28
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011848:	b580      	push	{r7, lr}
 801184a:	b08c      	sub	sp, #48	@ 0x30
 801184c:	af04      	add	r7, sp, #16
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	603b      	str	r3, [r7, #0]
 8011854:	4613      	mov	r3, r2
 8011856:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011858:	88fb      	ldrh	r3, [r7, #6]
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4618      	mov	r0, r3
 801185e:	f001 fcc5 	bl	80131ec <pvPortMalloc>
 8011862:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00e      	beq.n	8011888 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801186a:	20a8      	movs	r0, #168	@ 0xa8
 801186c:	f001 fcbe 	bl	80131ec <pvPortMalloc>
 8011870:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d003      	beq.n	8011880 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	697a      	ldr	r2, [r7, #20]
 801187c:	631a      	str	r2, [r3, #48]	@ 0x30
 801187e:	e005      	b.n	801188c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011880:	6978      	ldr	r0, [r7, #20]
 8011882:	f001 fd81 	bl	8013388 <vPortFree>
 8011886:	e001      	b.n	801188c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011888:	2300      	movs	r3, #0
 801188a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d017      	beq.n	80118c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	2200      	movs	r2, #0
 8011896:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801189a:	88fa      	ldrh	r2, [r7, #6]
 801189c:	2300      	movs	r3, #0
 801189e:	9303      	str	r3, [sp, #12]
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	9302      	str	r3, [sp, #8]
 80118a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	68b9      	ldr	r1, [r7, #8]
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f000 f80f 	bl	80118d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80118b6:	69f8      	ldr	r0, [r7, #28]
 80118b8:	f000 f8b4 	bl	8011a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80118bc:	2301      	movs	r3, #1
 80118be:	61bb      	str	r3, [r7, #24]
 80118c0:	e002      	b.n	80118c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118c2:	f04f 33ff 	mov.w	r3, #4294967295
 80118c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80118c8:	69bb      	ldr	r3, [r7, #24]
	}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3720      	adds	r7, #32
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
	...

080118d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b088      	sub	sp, #32
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
 80118e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80118e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	461a      	mov	r2, r3
 80118ec:	21a5      	movs	r1, #165	@ 0xa5
 80118ee:	f003 fbc0 	bl	8015072 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80118f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80118f6:	6879      	ldr	r1, [r7, #4]
 80118f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80118fc:	440b      	add	r3, r1
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	4413      	add	r3, r2
 8011902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	f023 0307 	bic.w	r3, r3, #7
 801190a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	f003 0307 	and.w	r3, r3, #7
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00b      	beq.n	801192e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	617b      	str	r3, [r7, #20]
}
 8011928:	bf00      	nop
 801192a:	bf00      	nop
 801192c:	e7fd      	b.n	801192a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d01f      	beq.n	8011974 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011934:	2300      	movs	r3, #0
 8011936:	61fb      	str	r3, [r7, #28]
 8011938:	e012      	b.n	8011960 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	4413      	add	r3, r2
 8011940:	7819      	ldrb	r1, [r3, #0]
 8011942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	4413      	add	r3, r2
 8011948:	3334      	adds	r3, #52	@ 0x34
 801194a:	460a      	mov	r2, r1
 801194c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	4413      	add	r3, r2
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d006      	beq.n	8011968 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	3301      	adds	r3, #1
 801195e:	61fb      	str	r3, [r7, #28]
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	2b0f      	cmp	r3, #15
 8011964:	d9e9      	bls.n	801193a <prvInitialiseNewTask+0x66>
 8011966:	e000      	b.n	801196a <prvInitialiseNewTask+0x96>
			{
				break;
 8011968:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801196a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801196c:	2200      	movs	r2, #0
 801196e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011972:	e003      	b.n	801197c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011976:	2200      	movs	r2, #0
 8011978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197e:	2b37      	cmp	r3, #55	@ 0x37
 8011980:	d901      	bls.n	8011986 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011982:	2337      	movs	r3, #55	@ 0x37
 8011984:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801198a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801198c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801198e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011990:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011994:	2200      	movs	r2, #0
 8011996:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801199a:	3304      	adds	r3, #4
 801199c:	4618      	mov	r0, r3
 801199e:	f7ff f929 	bl	8010bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119a4:	3318      	adds	r3, #24
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7ff f924 	bl	8010bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80119b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80119bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80119c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c4:	2200      	movs	r2, #0
 80119c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80119ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119cc:	2200      	movs	r2, #0
 80119ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80119d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d4:	3354      	adds	r3, #84	@ 0x54
 80119d6:	224c      	movs	r2, #76	@ 0x4c
 80119d8:	2100      	movs	r1, #0
 80119da:	4618      	mov	r0, r3
 80119dc:	f003 fb49 	bl	8015072 <memset>
 80119e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e2:	4a0d      	ldr	r2, [pc, #52]	@ (8011a18 <prvInitialiseNewTask+0x144>)
 80119e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80119e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e8:	4a0c      	ldr	r2, [pc, #48]	@ (8011a1c <prvInitialiseNewTask+0x148>)
 80119ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80119ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ee:	4a0c      	ldr	r2, [pc, #48]	@ (8011a20 <prvInitialiseNewTask+0x14c>)
 80119f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	68f9      	ldr	r1, [r7, #12]
 80119f6:	69b8      	ldr	r0, [r7, #24]
 80119f8:	f001 f9a4 	bl	8012d44 <pxPortInitialiseStack>
 80119fc:	4602      	mov	r2, r0
 80119fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d002      	beq.n	8011a0e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a0e:	bf00      	nop
 8011a10:	3720      	adds	r7, #32
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	24007494 	.word	0x24007494
 8011a1c:	240074fc 	.word	0x240074fc
 8011a20:	24007564 	.word	0x24007564

08011a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a2c:	f001 fabc 	bl	8012fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a30:	4b2d      	ldr	r3, [pc, #180]	@ (8011ae8 <prvAddNewTaskToReadyList+0xc4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	3301      	adds	r3, #1
 8011a36:	4a2c      	ldr	r2, [pc, #176]	@ (8011ae8 <prvAddNewTaskToReadyList+0xc4>)
 8011a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8011aec <prvAddNewTaskToReadyList+0xc8>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d109      	bne.n	8011a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a42:	4a2a      	ldr	r2, [pc, #168]	@ (8011aec <prvAddNewTaskToReadyList+0xc8>)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a48:	4b27      	ldr	r3, [pc, #156]	@ (8011ae8 <prvAddNewTaskToReadyList+0xc4>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d110      	bne.n	8011a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a50:	f000 fc78 	bl	8012344 <prvInitialiseTaskLists>
 8011a54:	e00d      	b.n	8011a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011a56:	4b26      	ldr	r3, [pc, #152]	@ (8011af0 <prvAddNewTaskToReadyList+0xcc>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d109      	bne.n	8011a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a5e:	4b23      	ldr	r3, [pc, #140]	@ (8011aec <prvAddNewTaskToReadyList+0xc8>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d802      	bhi.n	8011a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8011aec <prvAddNewTaskToReadyList+0xc8>)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a72:	4b20      	ldr	r3, [pc, #128]	@ (8011af4 <prvAddNewTaskToReadyList+0xd0>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	3301      	adds	r3, #1
 8011a78:	4a1e      	ldr	r2, [pc, #120]	@ (8011af4 <prvAddNewTaskToReadyList+0xd0>)
 8011a7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8011af4 <prvAddNewTaskToReadyList+0xd0>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a88:	4b1b      	ldr	r3, [pc, #108]	@ (8011af8 <prvAddNewTaskToReadyList+0xd4>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d903      	bls.n	8011a98 <prvAddNewTaskToReadyList+0x74>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a94:	4a18      	ldr	r2, [pc, #96]	@ (8011af8 <prvAddNewTaskToReadyList+0xd4>)
 8011a96:	6013      	str	r3, [r2, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4413      	add	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4a15      	ldr	r2, [pc, #84]	@ (8011afc <prvAddNewTaskToReadyList+0xd8>)
 8011aa6:	441a      	add	r2, r3
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	3304      	adds	r3, #4
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7ff f8ad 	bl	8010c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ab4:	f001 faaa 	bl	801300c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8011af0 <prvAddNewTaskToReadyList+0xcc>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00e      	beq.n	8011ade <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8011aec <prvAddNewTaskToReadyList+0xc8>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d207      	bcs.n	8011ade <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ace:	4b0c      	ldr	r3, [pc, #48]	@ (8011b00 <prvAddNewTaskToReadyList+0xdc>)
 8011ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ad4:	601a      	str	r2, [r3, #0]
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ade:	bf00      	nop
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	24003714 	.word	0x24003714
 8011aec:	24003240 	.word	0x24003240
 8011af0:	24003720 	.word	0x24003720
 8011af4:	24003730 	.word	0x24003730
 8011af8:	2400371c 	.word	0x2400371c
 8011afc:	24003244 	.word	0x24003244
 8011b00:	e000ed04 	.word	0xe000ed04

08011b04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08a      	sub	sp, #40	@ 0x28
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10b      	bne.n	8011b30 <vTaskDelayUntil+0x2c>
	__asm volatile
 8011b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	617b      	str	r3, [r7, #20]
}
 8011b2a:	bf00      	nop
 8011b2c:	bf00      	nop
 8011b2e:	e7fd      	b.n	8011b2c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d10b      	bne.n	8011b4e <vTaskDelayUntil+0x4a>
	__asm volatile
 8011b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b3a:	f383 8811 	msr	BASEPRI, r3
 8011b3e:	f3bf 8f6f 	isb	sy
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	613b      	str	r3, [r7, #16]
}
 8011b48:	bf00      	nop
 8011b4a:	bf00      	nop
 8011b4c:	e7fd      	b.n	8011b4a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8011b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8011bf8 <vTaskDelayUntil+0xf4>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00b      	beq.n	8011b6e <vTaskDelayUntil+0x6a>
	__asm volatile
 8011b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b5a:	f383 8811 	msr	BASEPRI, r3
 8011b5e:	f3bf 8f6f 	isb	sy
 8011b62:	f3bf 8f4f 	dsb	sy
 8011b66:	60fb      	str	r3, [r7, #12]
}
 8011b68:	bf00      	nop
 8011b6a:	bf00      	nop
 8011b6c:	e7fd      	b.n	8011b6a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8011b6e:	f000 f8b9 	bl	8011ce4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011b72:	4b22      	ldr	r3, [pc, #136]	@ (8011bfc <vTaskDelayUntil+0xf8>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	683a      	ldr	r2, [r7, #0]
 8011b7e:	4413      	add	r3, r2
 8011b80:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	6a3a      	ldr	r2, [r7, #32]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d20b      	bcs.n	8011ba4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	69fa      	ldr	r2, [r7, #28]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d211      	bcs.n	8011bba <vTaskDelayUntil+0xb6>
 8011b96:	69fa      	ldr	r2, [r7, #28]
 8011b98:	6a3b      	ldr	r3, [r7, #32]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d90d      	bls.n	8011bba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ba2:	e00a      	b.n	8011bba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	69fa      	ldr	r2, [r7, #28]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d303      	bcc.n	8011bb6 <vTaskDelayUntil+0xb2>
 8011bae:	69fa      	ldr	r2, [r7, #28]
 8011bb0:	6a3b      	ldr	r3, [r7, #32]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d901      	bls.n	8011bba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	69fa      	ldr	r2, [r7, #28]
 8011bbe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d006      	beq.n	8011bd4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011bc6:	69fa      	ldr	r2, [r7, #28]
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	2100      	movs	r1, #0
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f000 fd0a 	bl	80125e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011bd4:	f000 f894 	bl	8011d00 <xTaskResumeAll>
 8011bd8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d107      	bne.n	8011bf0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8011be0:	4b07      	ldr	r3, [pc, #28]	@ (8011c00 <vTaskDelayUntil+0xfc>)
 8011be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011be6:	601a      	str	r2, [r3, #0]
 8011be8:	f3bf 8f4f 	dsb	sy
 8011bec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bf0:	bf00      	nop
 8011bf2:	3728      	adds	r7, #40	@ 0x28
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	2400373c 	.word	0x2400373c
 8011bfc:	24003718 	.word	0x24003718
 8011c00:	e000ed04 	.word	0xe000ed04

08011c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b08a      	sub	sp, #40	@ 0x28
 8011c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011c12:	463a      	mov	r2, r7
 8011c14:	1d39      	adds	r1, r7, #4
 8011c16:	f107 0308 	add.w	r3, r7, #8
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe ff96 	bl	8010b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011c20:	6839      	ldr	r1, [r7, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	9202      	str	r2, [sp, #8]
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	9300      	str	r3, [sp, #0]
 8011c2e:	2300      	movs	r3, #0
 8011c30:	460a      	mov	r2, r1
 8011c32:	4924      	ldr	r1, [pc, #144]	@ (8011cc4 <vTaskStartScheduler+0xc0>)
 8011c34:	4824      	ldr	r0, [pc, #144]	@ (8011cc8 <vTaskStartScheduler+0xc4>)
 8011c36:	f7ff fda7 	bl	8011788 <xTaskCreateStatic>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	4a23      	ldr	r2, [pc, #140]	@ (8011ccc <vTaskStartScheduler+0xc8>)
 8011c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011c40:	4b22      	ldr	r3, [pc, #136]	@ (8011ccc <vTaskStartScheduler+0xc8>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d002      	beq.n	8011c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	617b      	str	r3, [r7, #20]
 8011c4c:	e001      	b.n	8011c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d102      	bne.n	8011c5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011c58:	f000 fd1a 	bl	8012690 <xTimerCreateTimerTask>
 8011c5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d11b      	bne.n	8011c9c <vTaskStartScheduler+0x98>
	__asm volatile
 8011c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c68:	f383 8811 	msr	BASEPRI, r3
 8011c6c:	f3bf 8f6f 	isb	sy
 8011c70:	f3bf 8f4f 	dsb	sy
 8011c74:	613b      	str	r3, [r7, #16]
}
 8011c76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c78:	4b15      	ldr	r3, [pc, #84]	@ (8011cd0 <vTaskStartScheduler+0xcc>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	3354      	adds	r3, #84	@ 0x54
 8011c7e:	4a15      	ldr	r2, [pc, #84]	@ (8011cd4 <vTaskStartScheduler+0xd0>)
 8011c80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011c82:	4b15      	ldr	r3, [pc, #84]	@ (8011cd8 <vTaskStartScheduler+0xd4>)
 8011c84:	f04f 32ff 	mov.w	r2, #4294967295
 8011c88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011c8a:	4b14      	ldr	r3, [pc, #80]	@ (8011cdc <vTaskStartScheduler+0xd8>)
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011c90:	4b13      	ldr	r3, [pc, #76]	@ (8011ce0 <vTaskStartScheduler+0xdc>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011c96:	f001 f8e3 	bl	8012e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011c9a:	e00f      	b.n	8011cbc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca2:	d10b      	bne.n	8011cbc <vTaskStartScheduler+0xb8>
	__asm volatile
 8011ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	60fb      	str	r3, [r7, #12]
}
 8011cb6:	bf00      	nop
 8011cb8:	bf00      	nop
 8011cba:	e7fd      	b.n	8011cb8 <vTaskStartScheduler+0xb4>
}
 8011cbc:	bf00      	nop
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	08017e6c 	.word	0x08017e6c
 8011cc8:	08012315 	.word	0x08012315
 8011ccc:	24003738 	.word	0x24003738
 8011cd0:	24003240 	.word	0x24003240
 8011cd4:	24000208 	.word	0x24000208
 8011cd8:	24003734 	.word	0x24003734
 8011cdc:	24003720 	.word	0x24003720
 8011ce0:	24003718 	.word	0x24003718

08011ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011ce8:	4b04      	ldr	r3, [pc, #16]	@ (8011cfc <vTaskSuspendAll+0x18>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	3301      	adds	r3, #1
 8011cee:	4a03      	ldr	r2, [pc, #12]	@ (8011cfc <vTaskSuspendAll+0x18>)
 8011cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011cf2:	bf00      	nop
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr
 8011cfc:	2400373c 	.word	0x2400373c

08011d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011d06:	2300      	movs	r3, #0
 8011d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011d0e:	4b42      	ldr	r3, [pc, #264]	@ (8011e18 <xTaskResumeAll+0x118>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d10b      	bne.n	8011d2e <xTaskResumeAll+0x2e>
	__asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	603b      	str	r3, [r7, #0]
}
 8011d28:	bf00      	nop
 8011d2a:	bf00      	nop
 8011d2c:	e7fd      	b.n	8011d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011d2e:	f001 f93b 	bl	8012fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011d32:	4b39      	ldr	r3, [pc, #228]	@ (8011e18 <xTaskResumeAll+0x118>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	3b01      	subs	r3, #1
 8011d38:	4a37      	ldr	r2, [pc, #220]	@ (8011e18 <xTaskResumeAll+0x118>)
 8011d3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d3c:	4b36      	ldr	r3, [pc, #216]	@ (8011e18 <xTaskResumeAll+0x118>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d162      	bne.n	8011e0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011d44:	4b35      	ldr	r3, [pc, #212]	@ (8011e1c <xTaskResumeAll+0x11c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d05e      	beq.n	8011e0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d4c:	e02f      	b.n	8011dae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d4e:	4b34      	ldr	r3, [pc, #208]	@ (8011e20 <xTaskResumeAll+0x120>)
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	3318      	adds	r3, #24
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fe ffb4 	bl	8010cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	3304      	adds	r3, #4
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7fe ffaf 	bl	8010cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8011e24 <xTaskResumeAll+0x124>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d903      	bls.n	8011d7e <xTaskResumeAll+0x7e>
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8011e24 <xTaskResumeAll+0x124>)
 8011d7c:	6013      	str	r3, [r2, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d82:	4613      	mov	r3, r2
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	4413      	add	r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4a27      	ldr	r2, [pc, #156]	@ (8011e28 <xTaskResumeAll+0x128>)
 8011d8c:	441a      	add	r2, r3
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	3304      	adds	r3, #4
 8011d92:	4619      	mov	r1, r3
 8011d94:	4610      	mov	r0, r2
 8011d96:	f7fe ff3a 	bl	8010c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d9e:	4b23      	ldr	r3, [pc, #140]	@ (8011e2c <xTaskResumeAll+0x12c>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d302      	bcc.n	8011dae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011da8:	4b21      	ldr	r3, [pc, #132]	@ (8011e30 <xTaskResumeAll+0x130>)
 8011daa:	2201      	movs	r2, #1
 8011dac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011dae:	4b1c      	ldr	r3, [pc, #112]	@ (8011e20 <xTaskResumeAll+0x120>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1cb      	bne.n	8011d4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011dbc:	f000 fb66 	bl	801248c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8011e34 <xTaskResumeAll+0x134>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d010      	beq.n	8011dee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011dcc:	f000 f846 	bl	8011e5c <xTaskIncrementTick>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011dd6:	4b16      	ldr	r3, [pc, #88]	@ (8011e30 <xTaskResumeAll+0x130>)
 8011dd8:	2201      	movs	r2, #1
 8011dda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	3b01      	subs	r3, #1
 8011de0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d1f1      	bne.n	8011dcc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011de8:	4b12      	ldr	r3, [pc, #72]	@ (8011e34 <xTaskResumeAll+0x134>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011dee:	4b10      	ldr	r3, [pc, #64]	@ (8011e30 <xTaskResumeAll+0x130>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d009      	beq.n	8011e0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011df6:	2301      	movs	r3, #1
 8011df8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011e38 <xTaskResumeAll+0x138>)
 8011dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	f3bf 8f4f 	dsb	sy
 8011e06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011e0a:	f001 f8ff 	bl	801300c <vPortExitCritical>

	return xAlreadyYielded;
 8011e0e:	68bb      	ldr	r3, [r7, #8]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	2400373c 	.word	0x2400373c
 8011e1c:	24003714 	.word	0x24003714
 8011e20:	240036d4 	.word	0x240036d4
 8011e24:	2400371c 	.word	0x2400371c
 8011e28:	24003244 	.word	0x24003244
 8011e2c:	24003240 	.word	0x24003240
 8011e30:	24003728 	.word	0x24003728
 8011e34:	24003724 	.word	0x24003724
 8011e38:	e000ed04 	.word	0xe000ed04

08011e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011e42:	4b05      	ldr	r3, [pc, #20]	@ (8011e58 <xTaskGetTickCount+0x1c>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011e48:	687b      	ldr	r3, [r7, #4]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	370c      	adds	r7, #12
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop
 8011e58:	24003718 	.word	0x24003718

08011e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b086      	sub	sp, #24
 8011e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011e62:	2300      	movs	r3, #0
 8011e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e66:	4b4f      	ldr	r3, [pc, #316]	@ (8011fa4 <xTaskIncrementTick+0x148>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f040 8090 	bne.w	8011f90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011e70:	4b4d      	ldr	r3, [pc, #308]	@ (8011fa8 <xTaskIncrementTick+0x14c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	3301      	adds	r3, #1
 8011e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011e78:	4a4b      	ldr	r2, [pc, #300]	@ (8011fa8 <xTaskIncrementTick+0x14c>)
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d121      	bne.n	8011ec8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011e84:	4b49      	ldr	r3, [pc, #292]	@ (8011fac <xTaskIncrementTick+0x150>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00b      	beq.n	8011ea6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e92:	f383 8811 	msr	BASEPRI, r3
 8011e96:	f3bf 8f6f 	isb	sy
 8011e9a:	f3bf 8f4f 	dsb	sy
 8011e9e:	603b      	str	r3, [r7, #0]
}
 8011ea0:	bf00      	nop
 8011ea2:	bf00      	nop
 8011ea4:	e7fd      	b.n	8011ea2 <xTaskIncrementTick+0x46>
 8011ea6:	4b41      	ldr	r3, [pc, #260]	@ (8011fac <xTaskIncrementTick+0x150>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	4b40      	ldr	r3, [pc, #256]	@ (8011fb0 <xTaskIncrementTick+0x154>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8011fac <xTaskIncrementTick+0x150>)
 8011eb2:	6013      	str	r3, [r2, #0]
 8011eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8011fb0 <xTaskIncrementTick+0x154>)
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6013      	str	r3, [r2, #0]
 8011eba:	4b3e      	ldr	r3, [pc, #248]	@ (8011fb4 <xTaskIncrementTick+0x158>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8011fb4 <xTaskIncrementTick+0x158>)
 8011ec2:	6013      	str	r3, [r2, #0]
 8011ec4:	f000 fae2 	bl	801248c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8011fb8 <xTaskIncrementTick+0x15c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	693a      	ldr	r2, [r7, #16]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d349      	bcc.n	8011f66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ed2:	4b36      	ldr	r3, [pc, #216]	@ (8011fac <xTaskIncrementTick+0x150>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d104      	bne.n	8011ee6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011edc:	4b36      	ldr	r3, [pc, #216]	@ (8011fb8 <xTaskIncrementTick+0x15c>)
 8011ede:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee2:	601a      	str	r2, [r3, #0]
					break;
 8011ee4:	e03f      	b.n	8011f66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ee6:	4b31      	ldr	r3, [pc, #196]	@ (8011fac <xTaskIncrementTick+0x150>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ef6:	693a      	ldr	r2, [r7, #16]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d203      	bcs.n	8011f06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011efe:	4a2e      	ldr	r2, [pc, #184]	@ (8011fb8 <xTaskIncrementTick+0x15c>)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011f04:	e02f      	b.n	8011f66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fe fedc 	bl	8010cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d004      	beq.n	8011f22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	3318      	adds	r3, #24
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fe fed3 	bl	8010cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f26:	4b25      	ldr	r3, [pc, #148]	@ (8011fbc <xTaskIncrementTick+0x160>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d903      	bls.n	8011f36 <xTaskIncrementTick+0xda>
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f32:	4a22      	ldr	r2, [pc, #136]	@ (8011fbc <xTaskIncrementTick+0x160>)
 8011f34:	6013      	str	r3, [r2, #0]
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	4413      	add	r3, r2
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	4a1f      	ldr	r2, [pc, #124]	@ (8011fc0 <xTaskIncrementTick+0x164>)
 8011f44:	441a      	add	r2, r3
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	3304      	adds	r3, #4
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f7fe fe5e 	bl	8010c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f56:	4b1b      	ldr	r3, [pc, #108]	@ (8011fc4 <xTaskIncrementTick+0x168>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d3b8      	bcc.n	8011ed2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011f60:	2301      	movs	r3, #1
 8011f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f64:	e7b5      	b.n	8011ed2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011f66:	4b17      	ldr	r3, [pc, #92]	@ (8011fc4 <xTaskIncrementTick+0x168>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f6c:	4914      	ldr	r1, [pc, #80]	@ (8011fc0 <xTaskIncrementTick+0x164>)
 8011f6e:	4613      	mov	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	440b      	add	r3, r1
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d901      	bls.n	8011f82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011f7e:	2301      	movs	r3, #1
 8011f80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011f82:	4b11      	ldr	r3, [pc, #68]	@ (8011fc8 <xTaskIncrementTick+0x16c>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d007      	beq.n	8011f9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	617b      	str	r3, [r7, #20]
 8011f8e:	e004      	b.n	8011f9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011f90:	4b0e      	ldr	r3, [pc, #56]	@ (8011fcc <xTaskIncrementTick+0x170>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3301      	adds	r3, #1
 8011f96:	4a0d      	ldr	r2, [pc, #52]	@ (8011fcc <xTaskIncrementTick+0x170>)
 8011f98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011f9a:	697b      	ldr	r3, [r7, #20]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3718      	adds	r7, #24
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	2400373c 	.word	0x2400373c
 8011fa8:	24003718 	.word	0x24003718
 8011fac:	240036cc 	.word	0x240036cc
 8011fb0:	240036d0 	.word	0x240036d0
 8011fb4:	2400372c 	.word	0x2400372c
 8011fb8:	24003734 	.word	0x24003734
 8011fbc:	2400371c 	.word	0x2400371c
 8011fc0:	24003244 	.word	0x24003244
 8011fc4:	24003240 	.word	0x24003240
 8011fc8:	24003728 	.word	0x24003728
 8011fcc:	24003724 	.word	0x24003724

08011fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8012084 <vTaskSwitchContext+0xb4>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d003      	beq.n	8011fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011fde:	4b2a      	ldr	r3, [pc, #168]	@ (8012088 <vTaskSwitchContext+0xb8>)
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011fe4:	e047      	b.n	8012076 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8011fe6:	4b28      	ldr	r3, [pc, #160]	@ (8012088 <vTaskSwitchContext+0xb8>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fec:	4b27      	ldr	r3, [pc, #156]	@ (801208c <vTaskSwitchContext+0xbc>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	60fb      	str	r3, [r7, #12]
 8011ff2:	e011      	b.n	8012018 <vTaskSwitchContext+0x48>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10b      	bne.n	8012012 <vTaskSwitchContext+0x42>
	__asm volatile
 8011ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ffe:	f383 8811 	msr	BASEPRI, r3
 8012002:	f3bf 8f6f 	isb	sy
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	607b      	str	r3, [r7, #4]
}
 801200c:	bf00      	nop
 801200e:	bf00      	nop
 8012010:	e7fd      	b.n	801200e <vTaskSwitchContext+0x3e>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3b01      	subs	r3, #1
 8012016:	60fb      	str	r3, [r7, #12]
 8012018:	491d      	ldr	r1, [pc, #116]	@ (8012090 <vTaskSwitchContext+0xc0>)
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	4613      	mov	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	4413      	add	r3, r2
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	440b      	add	r3, r1
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d0e3      	beq.n	8011ff4 <vTaskSwitchContext+0x24>
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	4613      	mov	r3, r2
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	4413      	add	r3, r2
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	4a16      	ldr	r2, [pc, #88]	@ (8012090 <vTaskSwitchContext+0xc0>)
 8012038:	4413      	add	r3, r2
 801203a:	60bb      	str	r3, [r7, #8]
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	605a      	str	r2, [r3, #4]
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	685a      	ldr	r2, [r3, #4]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	3308      	adds	r3, #8
 801204e:	429a      	cmp	r2, r3
 8012050:	d104      	bne.n	801205c <vTaskSwitchContext+0x8c>
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	685a      	ldr	r2, [r3, #4]
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	605a      	str	r2, [r3, #4]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	4a0c      	ldr	r2, [pc, #48]	@ (8012094 <vTaskSwitchContext+0xc4>)
 8012064:	6013      	str	r3, [r2, #0]
 8012066:	4a09      	ldr	r2, [pc, #36]	@ (801208c <vTaskSwitchContext+0xbc>)
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801206c:	4b09      	ldr	r3, [pc, #36]	@ (8012094 <vTaskSwitchContext+0xc4>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	3354      	adds	r3, #84	@ 0x54
 8012072:	4a09      	ldr	r2, [pc, #36]	@ (8012098 <vTaskSwitchContext+0xc8>)
 8012074:	6013      	str	r3, [r2, #0]
}
 8012076:	bf00      	nop
 8012078:	3714      	adds	r7, #20
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	2400373c 	.word	0x2400373c
 8012088:	24003728 	.word	0x24003728
 801208c:	2400371c 	.word	0x2400371c
 8012090:	24003244 	.word	0x24003244
 8012094:	24003240 	.word	0x24003240
 8012098:	24000208 	.word	0x24000208

0801209c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10b      	bne.n	80120c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80120ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b0:	f383 8811 	msr	BASEPRI, r3
 80120b4:	f3bf 8f6f 	isb	sy
 80120b8:	f3bf 8f4f 	dsb	sy
 80120bc:	60fb      	str	r3, [r7, #12]
}
 80120be:	bf00      	nop
 80120c0:	bf00      	nop
 80120c2:	e7fd      	b.n	80120c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80120c4:	4b07      	ldr	r3, [pc, #28]	@ (80120e4 <vTaskPlaceOnEventList+0x48>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	3318      	adds	r3, #24
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7fe fdc2 	bl	8010c56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80120d2:	2101      	movs	r1, #1
 80120d4:	6838      	ldr	r0, [r7, #0]
 80120d6:	f000 fa87 	bl	80125e8 <prvAddCurrentTaskToDelayedList>
}
 80120da:	bf00      	nop
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	24003240 	.word	0x24003240

080120e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b086      	sub	sp, #24
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d10b      	bne.n	8012112 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80120fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120fe:	f383 8811 	msr	BASEPRI, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	617b      	str	r3, [r7, #20]
}
 801210c:	bf00      	nop
 801210e:	bf00      	nop
 8012110:	e7fd      	b.n	801210e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012112:	4b0a      	ldr	r3, [pc, #40]	@ (801213c <vTaskPlaceOnEventListRestricted+0x54>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3318      	adds	r3, #24
 8012118:	4619      	mov	r1, r3
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f7fe fd77 	bl	8010c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d002      	beq.n	801212c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8012126:	f04f 33ff 	mov.w	r3, #4294967295
 801212a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	68b8      	ldr	r0, [r7, #8]
 8012130:	f000 fa5a 	bl	80125e8 <prvAddCurrentTaskToDelayedList>
	}
 8012134:	bf00      	nop
 8012136:	3718      	adds	r7, #24
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}
 801213c:	24003240 	.word	0x24003240

08012140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	68db      	ldr	r3, [r3, #12]
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d10b      	bne.n	801216e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801215a:	f383 8811 	msr	BASEPRI, r3
 801215e:	f3bf 8f6f 	isb	sy
 8012162:	f3bf 8f4f 	dsb	sy
 8012166:	60fb      	str	r3, [r7, #12]
}
 8012168:	bf00      	nop
 801216a:	bf00      	nop
 801216c:	e7fd      	b.n	801216a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	3318      	adds	r3, #24
 8012172:	4618      	mov	r0, r3
 8012174:	f7fe fda8 	bl	8010cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012178:	4b1d      	ldr	r3, [pc, #116]	@ (80121f0 <xTaskRemoveFromEventList+0xb0>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d11d      	bne.n	80121bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	3304      	adds	r3, #4
 8012184:	4618      	mov	r0, r3
 8012186:	f7fe fd9f 	bl	8010cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801218e:	4b19      	ldr	r3, [pc, #100]	@ (80121f4 <xTaskRemoveFromEventList+0xb4>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	429a      	cmp	r2, r3
 8012194:	d903      	bls.n	801219e <xTaskRemoveFromEventList+0x5e>
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801219a:	4a16      	ldr	r2, [pc, #88]	@ (80121f4 <xTaskRemoveFromEventList+0xb4>)
 801219c:	6013      	str	r3, [r2, #0]
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121a2:	4613      	mov	r3, r2
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	4413      	add	r3, r2
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	4a13      	ldr	r2, [pc, #76]	@ (80121f8 <xTaskRemoveFromEventList+0xb8>)
 80121ac:	441a      	add	r2, r3
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	3304      	adds	r3, #4
 80121b2:	4619      	mov	r1, r3
 80121b4:	4610      	mov	r0, r2
 80121b6:	f7fe fd2a 	bl	8010c0e <vListInsertEnd>
 80121ba:	e005      	b.n	80121c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	3318      	adds	r3, #24
 80121c0:	4619      	mov	r1, r3
 80121c2:	480e      	ldr	r0, [pc, #56]	@ (80121fc <xTaskRemoveFromEventList+0xbc>)
 80121c4:	f7fe fd23 	bl	8010c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121cc:	4b0c      	ldr	r3, [pc, #48]	@ (8012200 <xTaskRemoveFromEventList+0xc0>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d905      	bls.n	80121e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80121d6:	2301      	movs	r3, #1
 80121d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80121da:	4b0a      	ldr	r3, [pc, #40]	@ (8012204 <xTaskRemoveFromEventList+0xc4>)
 80121dc:	2201      	movs	r2, #1
 80121de:	601a      	str	r2, [r3, #0]
 80121e0:	e001      	b.n	80121e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80121e6:	697b      	ldr	r3, [r7, #20]
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3718      	adds	r7, #24
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	2400373c 	.word	0x2400373c
 80121f4:	2400371c 	.word	0x2400371c
 80121f8:	24003244 	.word	0x24003244
 80121fc:	240036d4 	.word	0x240036d4
 8012200:	24003240 	.word	0x24003240
 8012204:	24003728 	.word	0x24003728

08012208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012210:	4b06      	ldr	r3, [pc, #24]	@ (801222c <vTaskInternalSetTimeOutState+0x24>)
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012218:	4b05      	ldr	r3, [pc, #20]	@ (8012230 <vTaskInternalSetTimeOutState+0x28>)
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	605a      	str	r2, [r3, #4]
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	2400372c 	.word	0x2400372c
 8012230:	24003718 	.word	0x24003718

08012234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
 801223c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10b      	bne.n	801225c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012248:	f383 8811 	msr	BASEPRI, r3
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	613b      	str	r3, [r7, #16]
}
 8012256:	bf00      	nop
 8012258:	bf00      	nop
 801225a:	e7fd      	b.n	8012258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d10b      	bne.n	801227a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012266:	f383 8811 	msr	BASEPRI, r3
 801226a:	f3bf 8f6f 	isb	sy
 801226e:	f3bf 8f4f 	dsb	sy
 8012272:	60fb      	str	r3, [r7, #12]
}
 8012274:	bf00      	nop
 8012276:	bf00      	nop
 8012278:	e7fd      	b.n	8012276 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801227a:	f000 fe95 	bl	8012fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801227e:	4b1d      	ldr	r3, [pc, #116]	@ (80122f4 <xTaskCheckForTimeOut+0xc0>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	69ba      	ldr	r2, [r7, #24]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012296:	d102      	bne.n	801229e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012298:	2300      	movs	r3, #0
 801229a:	61fb      	str	r3, [r7, #28]
 801229c:	e023      	b.n	80122e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	4b15      	ldr	r3, [pc, #84]	@ (80122f8 <xTaskCheckForTimeOut+0xc4>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d007      	beq.n	80122ba <xTaskCheckForTimeOut+0x86>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	69ba      	ldr	r2, [r7, #24]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d302      	bcc.n	80122ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80122b4:	2301      	movs	r3, #1
 80122b6:	61fb      	str	r3, [r7, #28]
 80122b8:	e015      	b.n	80122e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	697a      	ldr	r2, [r7, #20]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d20b      	bcs.n	80122dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	1ad2      	subs	r2, r2, r3
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff ff99 	bl	8012208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80122d6:	2300      	movs	r3, #0
 80122d8:	61fb      	str	r3, [r7, #28]
 80122da:	e004      	b.n	80122e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	2200      	movs	r2, #0
 80122e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80122e2:	2301      	movs	r3, #1
 80122e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80122e6:	f000 fe91 	bl	801300c <vPortExitCritical>

	return xReturn;
 80122ea:	69fb      	ldr	r3, [r7, #28]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3720      	adds	r7, #32
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	24003718 	.word	0x24003718
 80122f8:	2400372c 	.word	0x2400372c

080122fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80122fc:	b480      	push	{r7}
 80122fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012300:	4b03      	ldr	r3, [pc, #12]	@ (8012310 <vTaskMissedYield+0x14>)
 8012302:	2201      	movs	r2, #1
 8012304:	601a      	str	r2, [r3, #0]
}
 8012306:	bf00      	nop
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	24003728 	.word	0x24003728

08012314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801231c:	f000 f852 	bl	80123c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012320:	4b06      	ldr	r3, [pc, #24]	@ (801233c <prvIdleTask+0x28>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2b01      	cmp	r3, #1
 8012326:	d9f9      	bls.n	801231c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012328:	4b05      	ldr	r3, [pc, #20]	@ (8012340 <prvIdleTask+0x2c>)
 801232a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801232e:	601a      	str	r2, [r3, #0]
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012338:	e7f0      	b.n	801231c <prvIdleTask+0x8>
 801233a:	bf00      	nop
 801233c:	24003244 	.word	0x24003244
 8012340:	e000ed04 	.word	0xe000ed04

08012344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801234a:	2300      	movs	r3, #0
 801234c:	607b      	str	r3, [r7, #4]
 801234e:	e00c      	b.n	801236a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	4613      	mov	r3, r2
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4a12      	ldr	r2, [pc, #72]	@ (80123a4 <prvInitialiseTaskLists+0x60>)
 801235c:	4413      	add	r3, r2
 801235e:	4618      	mov	r0, r3
 8012360:	f7fe fc28 	bl	8010bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	3301      	adds	r3, #1
 8012368:	607b      	str	r3, [r7, #4]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2b37      	cmp	r3, #55	@ 0x37
 801236e:	d9ef      	bls.n	8012350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012370:	480d      	ldr	r0, [pc, #52]	@ (80123a8 <prvInitialiseTaskLists+0x64>)
 8012372:	f7fe fc1f 	bl	8010bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012376:	480d      	ldr	r0, [pc, #52]	@ (80123ac <prvInitialiseTaskLists+0x68>)
 8012378:	f7fe fc1c 	bl	8010bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801237c:	480c      	ldr	r0, [pc, #48]	@ (80123b0 <prvInitialiseTaskLists+0x6c>)
 801237e:	f7fe fc19 	bl	8010bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012382:	480c      	ldr	r0, [pc, #48]	@ (80123b4 <prvInitialiseTaskLists+0x70>)
 8012384:	f7fe fc16 	bl	8010bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012388:	480b      	ldr	r0, [pc, #44]	@ (80123b8 <prvInitialiseTaskLists+0x74>)
 801238a:	f7fe fc13 	bl	8010bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801238e:	4b0b      	ldr	r3, [pc, #44]	@ (80123bc <prvInitialiseTaskLists+0x78>)
 8012390:	4a05      	ldr	r2, [pc, #20]	@ (80123a8 <prvInitialiseTaskLists+0x64>)
 8012392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012394:	4b0a      	ldr	r3, [pc, #40]	@ (80123c0 <prvInitialiseTaskLists+0x7c>)
 8012396:	4a05      	ldr	r2, [pc, #20]	@ (80123ac <prvInitialiseTaskLists+0x68>)
 8012398:	601a      	str	r2, [r3, #0]
}
 801239a:	bf00      	nop
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	24003244 	.word	0x24003244
 80123a8:	240036a4 	.word	0x240036a4
 80123ac:	240036b8 	.word	0x240036b8
 80123b0:	240036d4 	.word	0x240036d4
 80123b4:	240036e8 	.word	0x240036e8
 80123b8:	24003700 	.word	0x24003700
 80123bc:	240036cc 	.word	0x240036cc
 80123c0:	240036d0 	.word	0x240036d0

080123c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80123ca:	e019      	b.n	8012400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80123cc:	f000 fdec 	bl	8012fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123d0:	4b10      	ldr	r3, [pc, #64]	@ (8012414 <prvCheckTasksWaitingTermination+0x50>)
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3304      	adds	r3, #4
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fe fc73 	bl	8010cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80123e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012418 <prvCheckTasksWaitingTermination+0x54>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4a0b      	ldr	r2, [pc, #44]	@ (8012418 <prvCheckTasksWaitingTermination+0x54>)
 80123ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80123ec:	4b0b      	ldr	r3, [pc, #44]	@ (801241c <prvCheckTasksWaitingTermination+0x58>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	4a0a      	ldr	r2, [pc, #40]	@ (801241c <prvCheckTasksWaitingTermination+0x58>)
 80123f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80123f6:	f000 fe09 	bl	801300c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f810 	bl	8012420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012400:	4b06      	ldr	r3, [pc, #24]	@ (801241c <prvCheckTasksWaitingTermination+0x58>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d1e1      	bne.n	80123cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012408:	bf00      	nop
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	240036e8 	.word	0x240036e8
 8012418:	24003714 	.word	0x24003714
 801241c:	240036fc 	.word	0x240036fc

08012420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	3354      	adds	r3, #84	@ 0x54
 801242c:	4618      	mov	r0, r3
 801242e:	f002 fe71 	bl	8015114 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012438:	2b00      	cmp	r3, #0
 801243a:	d108      	bne.n	801244e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012440:	4618      	mov	r0, r3
 8012442:	f000 ffa1 	bl	8013388 <vPortFree>
				vPortFree( pxTCB );
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 ff9e 	bl	8013388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801244c:	e019      	b.n	8012482 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012454:	2b01      	cmp	r3, #1
 8012456:	d103      	bne.n	8012460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 ff95 	bl	8013388 <vPortFree>
	}
 801245e:	e010      	b.n	8012482 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012466:	2b02      	cmp	r3, #2
 8012468:	d00b      	beq.n	8012482 <prvDeleteTCB+0x62>
	__asm volatile
 801246a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246e:	f383 8811 	msr	BASEPRI, r3
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	f3bf 8f4f 	dsb	sy
 801247a:	60fb      	str	r3, [r7, #12]
}
 801247c:	bf00      	nop
 801247e:	bf00      	nop
 8012480:	e7fd      	b.n	801247e <prvDeleteTCB+0x5e>
	}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
	...

0801248c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012492:	4b0c      	ldr	r3, [pc, #48]	@ (80124c4 <prvResetNextTaskUnblockTime+0x38>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d104      	bne.n	80124a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801249c:	4b0a      	ldr	r3, [pc, #40]	@ (80124c8 <prvResetNextTaskUnblockTime+0x3c>)
 801249e:	f04f 32ff 	mov.w	r2, #4294967295
 80124a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80124a4:	e008      	b.n	80124b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124a6:	4b07      	ldr	r3, [pc, #28]	@ (80124c4 <prvResetNextTaskUnblockTime+0x38>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	4a04      	ldr	r2, [pc, #16]	@ (80124c8 <prvResetNextTaskUnblockTime+0x3c>)
 80124b6:	6013      	str	r3, [r2, #0]
}
 80124b8:	bf00      	nop
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr
 80124c4:	240036cc 	.word	0x240036cc
 80124c8:	24003734 	.word	0x24003734

080124cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80124d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012500 <xTaskGetSchedulerState+0x34>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d102      	bne.n	80124e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80124da:	2301      	movs	r3, #1
 80124dc:	607b      	str	r3, [r7, #4]
 80124de:	e008      	b.n	80124f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124e0:	4b08      	ldr	r3, [pc, #32]	@ (8012504 <xTaskGetSchedulerState+0x38>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d102      	bne.n	80124ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80124e8:	2302      	movs	r3, #2
 80124ea:	607b      	str	r3, [r7, #4]
 80124ec:	e001      	b.n	80124f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80124ee:	2300      	movs	r3, #0
 80124f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80124f2:	687b      	ldr	r3, [r7, #4]
	}
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr
 8012500:	24003720 	.word	0x24003720
 8012504:	2400373c 	.word	0x2400373c

08012508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d058      	beq.n	80125d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801251e:	4b2f      	ldr	r3, [pc, #188]	@ (80125dc <xTaskPriorityDisinherit+0xd4>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	693a      	ldr	r2, [r7, #16]
 8012524:	429a      	cmp	r2, r3
 8012526:	d00b      	beq.n	8012540 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	60fb      	str	r3, [r7, #12]
}
 801253a:	bf00      	nop
 801253c:	bf00      	nop
 801253e:	e7fd      	b.n	801253c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012544:	2b00      	cmp	r3, #0
 8012546:	d10b      	bne.n	8012560 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801254c:	f383 8811 	msr	BASEPRI, r3
 8012550:	f3bf 8f6f 	isb	sy
 8012554:	f3bf 8f4f 	dsb	sy
 8012558:	60bb      	str	r3, [r7, #8]
}
 801255a:	bf00      	nop
 801255c:	bf00      	nop
 801255e:	e7fd      	b.n	801255c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012564:	1e5a      	subs	r2, r3, #1
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012572:	429a      	cmp	r2, r3
 8012574:	d02c      	beq.n	80125d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801257a:	2b00      	cmp	r3, #0
 801257c:	d128      	bne.n	80125d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	3304      	adds	r3, #4
 8012582:	4618      	mov	r0, r3
 8012584:	f7fe fba0 	bl	8010cc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012594:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125a0:	4b0f      	ldr	r3, [pc, #60]	@ (80125e0 <xTaskPriorityDisinherit+0xd8>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d903      	bls.n	80125b0 <xTaskPriorityDisinherit+0xa8>
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125ac:	4a0c      	ldr	r2, [pc, #48]	@ (80125e0 <xTaskPriorityDisinherit+0xd8>)
 80125ae:	6013      	str	r3, [r2, #0]
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125b4:	4613      	mov	r3, r2
 80125b6:	009b      	lsls	r3, r3, #2
 80125b8:	4413      	add	r3, r2
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	4a09      	ldr	r2, [pc, #36]	@ (80125e4 <xTaskPriorityDisinherit+0xdc>)
 80125be:	441a      	add	r2, r3
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4619      	mov	r1, r3
 80125c6:	4610      	mov	r0, r2
 80125c8:	f7fe fb21 	bl	8010c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80125cc:	2301      	movs	r3, #1
 80125ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80125d0:	697b      	ldr	r3, [r7, #20]
	}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3718      	adds	r7, #24
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	24003240 	.word	0x24003240
 80125e0:	2400371c 	.word	0x2400371c
 80125e4:	24003244 	.word	0x24003244

080125e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125f2:	4b21      	ldr	r3, [pc, #132]	@ (8012678 <prvAddCurrentTaskToDelayedList+0x90>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125f8:	4b20      	ldr	r3, [pc, #128]	@ (801267c <prvAddCurrentTaskToDelayedList+0x94>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	3304      	adds	r3, #4
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fb62 	bl	8010cc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260a:	d10a      	bne.n	8012622 <prvAddCurrentTaskToDelayedList+0x3a>
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d007      	beq.n	8012622 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012612:	4b1a      	ldr	r3, [pc, #104]	@ (801267c <prvAddCurrentTaskToDelayedList+0x94>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	3304      	adds	r3, #4
 8012618:	4619      	mov	r1, r3
 801261a:	4819      	ldr	r0, [pc, #100]	@ (8012680 <prvAddCurrentTaskToDelayedList+0x98>)
 801261c:	f7fe faf7 	bl	8010c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012620:	e026      	b.n	8012670 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4413      	add	r3, r2
 8012628:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801262a:	4b14      	ldr	r3, [pc, #80]	@ (801267c <prvAddCurrentTaskToDelayedList+0x94>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68ba      	ldr	r2, [r7, #8]
 8012630:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	429a      	cmp	r2, r3
 8012638:	d209      	bcs.n	801264e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801263a:	4b12      	ldr	r3, [pc, #72]	@ (8012684 <prvAddCurrentTaskToDelayedList+0x9c>)
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	4b0f      	ldr	r3, [pc, #60]	@ (801267c <prvAddCurrentTaskToDelayedList+0x94>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	3304      	adds	r3, #4
 8012644:	4619      	mov	r1, r3
 8012646:	4610      	mov	r0, r2
 8012648:	f7fe fb05 	bl	8010c56 <vListInsert>
}
 801264c:	e010      	b.n	8012670 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801264e:	4b0e      	ldr	r3, [pc, #56]	@ (8012688 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	4b0a      	ldr	r3, [pc, #40]	@ (801267c <prvAddCurrentTaskToDelayedList+0x94>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	3304      	adds	r3, #4
 8012658:	4619      	mov	r1, r3
 801265a:	4610      	mov	r0, r2
 801265c:	f7fe fafb 	bl	8010c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012660:	4b0a      	ldr	r3, [pc, #40]	@ (801268c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	429a      	cmp	r2, r3
 8012668:	d202      	bcs.n	8012670 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801266a:	4a08      	ldr	r2, [pc, #32]	@ (801268c <prvAddCurrentTaskToDelayedList+0xa4>)
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	6013      	str	r3, [r2, #0]
}
 8012670:	bf00      	nop
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	24003718 	.word	0x24003718
 801267c:	24003240 	.word	0x24003240
 8012680:	24003700 	.word	0x24003700
 8012684:	240036d0 	.word	0x240036d0
 8012688:	240036cc 	.word	0x240036cc
 801268c:	24003734 	.word	0x24003734

08012690 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b08a      	sub	sp, #40	@ 0x28
 8012694:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012696:	2300      	movs	r3, #0
 8012698:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801269a:	f000 fb13 	bl	8012cc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801269e:	4b1d      	ldr	r3, [pc, #116]	@ (8012714 <xTimerCreateTimerTask+0x84>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d021      	beq.n	80126ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80126a6:	2300      	movs	r3, #0
 80126a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80126ae:	1d3a      	adds	r2, r7, #4
 80126b0:	f107 0108 	add.w	r1, r7, #8
 80126b4:	f107 030c 	add.w	r3, r7, #12
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fe fa61 	bl	8010b80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80126be:	6879      	ldr	r1, [r7, #4]
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	9202      	str	r2, [sp, #8]
 80126c6:	9301      	str	r3, [sp, #4]
 80126c8:	2302      	movs	r3, #2
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	2300      	movs	r3, #0
 80126ce:	460a      	mov	r2, r1
 80126d0:	4911      	ldr	r1, [pc, #68]	@ (8012718 <xTimerCreateTimerTask+0x88>)
 80126d2:	4812      	ldr	r0, [pc, #72]	@ (801271c <xTimerCreateTimerTask+0x8c>)
 80126d4:	f7ff f858 	bl	8011788 <xTaskCreateStatic>
 80126d8:	4603      	mov	r3, r0
 80126da:	4a11      	ldr	r2, [pc, #68]	@ (8012720 <xTimerCreateTimerTask+0x90>)
 80126dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80126de:	4b10      	ldr	r3, [pc, #64]	@ (8012720 <xTimerCreateTimerTask+0x90>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80126e6:	2301      	movs	r3, #1
 80126e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10b      	bne.n	8012708 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80126f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f4:	f383 8811 	msr	BASEPRI, r3
 80126f8:	f3bf 8f6f 	isb	sy
 80126fc:	f3bf 8f4f 	dsb	sy
 8012700:	613b      	str	r3, [r7, #16]
}
 8012702:	bf00      	nop
 8012704:	bf00      	nop
 8012706:	e7fd      	b.n	8012704 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012708:	697b      	ldr	r3, [r7, #20]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3718      	adds	r7, #24
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	24003770 	.word	0x24003770
 8012718:	08017e74 	.word	0x08017e74
 801271c:	0801285d 	.word	0x0801285d
 8012720:	24003774 	.word	0x24003774

08012724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08a      	sub	sp, #40	@ 0x28
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012732:	2300      	movs	r3, #0
 8012734:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10b      	bne.n	8012754 <xTimerGenericCommand+0x30>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	623b      	str	r3, [r7, #32]
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	e7fd      	b.n	8012750 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012754:	4b19      	ldr	r3, [pc, #100]	@ (80127bc <xTimerGenericCommand+0x98>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d02a      	beq.n	80127b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2b05      	cmp	r3, #5
 801276c:	dc18      	bgt.n	80127a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801276e:	f7ff fead 	bl	80124cc <xTaskGetSchedulerState>
 8012772:	4603      	mov	r3, r0
 8012774:	2b02      	cmp	r3, #2
 8012776:	d109      	bne.n	801278c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012778:	4b10      	ldr	r3, [pc, #64]	@ (80127bc <xTimerGenericCommand+0x98>)
 801277a:	6818      	ldr	r0, [r3, #0]
 801277c:	f107 0110 	add.w	r1, r7, #16
 8012780:	2300      	movs	r3, #0
 8012782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012784:	f7fe fc10 	bl	8010fa8 <xQueueGenericSend>
 8012788:	6278      	str	r0, [r7, #36]	@ 0x24
 801278a:	e012      	b.n	80127b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801278c:	4b0b      	ldr	r3, [pc, #44]	@ (80127bc <xTimerGenericCommand+0x98>)
 801278e:	6818      	ldr	r0, [r3, #0]
 8012790:	f107 0110 	add.w	r1, r7, #16
 8012794:	2300      	movs	r3, #0
 8012796:	2200      	movs	r2, #0
 8012798:	f7fe fc06 	bl	8010fa8 <xQueueGenericSend>
 801279c:	6278      	str	r0, [r7, #36]	@ 0x24
 801279e:	e008      	b.n	80127b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80127a0:	4b06      	ldr	r3, [pc, #24]	@ (80127bc <xTimerGenericCommand+0x98>)
 80127a2:	6818      	ldr	r0, [r3, #0]
 80127a4:	f107 0110 	add.w	r1, r7, #16
 80127a8:	2300      	movs	r3, #0
 80127aa:	683a      	ldr	r2, [r7, #0]
 80127ac:	f7fe fcfe 	bl	80111ac <xQueueGenericSendFromISR>
 80127b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80127b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3728      	adds	r7, #40	@ 0x28
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	24003770 	.word	0x24003770

080127c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b088      	sub	sp, #32
 80127c4:	af02      	add	r7, sp, #8
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127ca:	4b23      	ldr	r3, [pc, #140]	@ (8012858 <prvProcessExpiredTimer+0x98>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	68db      	ldr	r3, [r3, #12]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	3304      	adds	r3, #4
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fe fa75 	bl	8010cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80127e4:	f003 0304 	and.w	r3, r3, #4
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d023      	beq.n	8012834 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	699a      	ldr	r2, [r3, #24]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	18d1      	adds	r1, r2, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	6978      	ldr	r0, [r7, #20]
 80127fa:	f000 f8d5 	bl	80129a8 <prvInsertTimerInActiveList>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d020      	beq.n	8012846 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012804:	2300      	movs	r3, #0
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	2300      	movs	r3, #0
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	2100      	movs	r1, #0
 801280e:	6978      	ldr	r0, [r7, #20]
 8012810:	f7ff ff88 	bl	8012724 <xTimerGenericCommand>
 8012814:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d114      	bne.n	8012846 <prvProcessExpiredTimer+0x86>
	__asm volatile
 801281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012820:	f383 8811 	msr	BASEPRI, r3
 8012824:	f3bf 8f6f 	isb	sy
 8012828:	f3bf 8f4f 	dsb	sy
 801282c:	60fb      	str	r3, [r7, #12]
}
 801282e:	bf00      	nop
 8012830:	bf00      	nop
 8012832:	e7fd      	b.n	8012830 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801283a:	f023 0301 	bic.w	r3, r3, #1
 801283e:	b2da      	uxtb	r2, r3
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	6a1b      	ldr	r3, [r3, #32]
 801284a:	6978      	ldr	r0, [r7, #20]
 801284c:	4798      	blx	r3
}
 801284e:	bf00      	nop
 8012850:	3718      	adds	r7, #24
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	24003768 	.word	0x24003768

0801285c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012864:	f107 0308 	add.w	r3, r7, #8
 8012868:	4618      	mov	r0, r3
 801286a:	f000 f859 	bl	8012920 <prvGetNextExpireTime>
 801286e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	4619      	mov	r1, r3
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f000 f805 	bl	8012884 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801287a:	f000 f8d7 	bl	8012a2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801287e:	bf00      	nop
 8012880:	e7f0      	b.n	8012864 <prvTimerTask+0x8>
	...

08012884 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801288e:	f7ff fa29 	bl	8011ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012892:	f107 0308 	add.w	r3, r7, #8
 8012896:	4618      	mov	r0, r3
 8012898:	f000 f866 	bl	8012968 <prvSampleTimeNow>
 801289c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d130      	bne.n	8012906 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d10a      	bne.n	80128c0 <prvProcessTimerOrBlockTask+0x3c>
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d806      	bhi.n	80128c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80128b2:	f7ff fa25 	bl	8011d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80128b6:	68f9      	ldr	r1, [r7, #12]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff ff81 	bl	80127c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80128be:	e024      	b.n	801290a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d008      	beq.n	80128d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80128c6:	4b13      	ldr	r3, [pc, #76]	@ (8012914 <prvProcessTimerOrBlockTask+0x90>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d101      	bne.n	80128d4 <prvProcessTimerOrBlockTask+0x50>
 80128d0:	2301      	movs	r3, #1
 80128d2:	e000      	b.n	80128d6 <prvProcessTimerOrBlockTask+0x52>
 80128d4:	2300      	movs	r3, #0
 80128d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80128d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012918 <prvProcessTimerOrBlockTask+0x94>)
 80128da:	6818      	ldr	r0, [r3, #0]
 80128dc:	687a      	ldr	r2, [r7, #4]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	4619      	mov	r1, r3
 80128e6:	f7fe ff1b 	bl	8011720 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80128ea:	f7ff fa09 	bl	8011d00 <xTaskResumeAll>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10a      	bne.n	801290a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80128f4:	4b09      	ldr	r3, [pc, #36]	@ (801291c <prvProcessTimerOrBlockTask+0x98>)
 80128f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128fa:	601a      	str	r2, [r3, #0]
 80128fc:	f3bf 8f4f 	dsb	sy
 8012900:	f3bf 8f6f 	isb	sy
}
 8012904:	e001      	b.n	801290a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012906:	f7ff f9fb 	bl	8011d00 <xTaskResumeAll>
}
 801290a:	bf00      	nop
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	2400376c 	.word	0x2400376c
 8012918:	24003770 	.word	0x24003770
 801291c:	e000ed04 	.word	0xe000ed04

08012920 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012920:	b480      	push	{r7}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012928:	4b0e      	ldr	r3, [pc, #56]	@ (8012964 <prvGetNextExpireTime+0x44>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d101      	bne.n	8012936 <prvGetNextExpireTime+0x16>
 8012932:	2201      	movs	r2, #1
 8012934:	e000      	b.n	8012938 <prvGetNextExpireTime+0x18>
 8012936:	2200      	movs	r2, #0
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d105      	bne.n	8012950 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012944:	4b07      	ldr	r3, [pc, #28]	@ (8012964 <prvGetNextExpireTime+0x44>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	60fb      	str	r3, [r7, #12]
 801294e:	e001      	b.n	8012954 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012950:	2300      	movs	r3, #0
 8012952:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012954:	68fb      	ldr	r3, [r7, #12]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3714      	adds	r7, #20
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	24003768 	.word	0x24003768

08012968 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012970:	f7ff fa64 	bl	8011e3c <xTaskGetTickCount>
 8012974:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012976:	4b0b      	ldr	r3, [pc, #44]	@ (80129a4 <prvSampleTimeNow+0x3c>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	429a      	cmp	r2, r3
 801297e:	d205      	bcs.n	801298c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012980:	f000 f93a 	bl	8012bf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2201      	movs	r2, #1
 8012988:	601a      	str	r2, [r3, #0]
 801298a:	e002      	b.n	8012992 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012992:	4a04      	ldr	r2, [pc, #16]	@ (80129a4 <prvSampleTimeNow+0x3c>)
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012998:	68fb      	ldr	r3, [r7, #12]
}
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	24003778 	.word	0x24003778

080129a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	607a      	str	r2, [r7, #4]
 80129b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80129b6:	2300      	movs	r3, #0
 80129b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	68ba      	ldr	r2, [r7, #8]
 80129be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d812      	bhi.n	80129f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	1ad2      	subs	r2, r2, r3
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	699b      	ldr	r3, [r3, #24]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d302      	bcc.n	80129e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80129dc:	2301      	movs	r3, #1
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	e01b      	b.n	8012a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80129e2:	4b10      	ldr	r3, [pc, #64]	@ (8012a24 <prvInsertTimerInActiveList+0x7c>)
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	3304      	adds	r3, #4
 80129ea:	4619      	mov	r1, r3
 80129ec:	4610      	mov	r0, r2
 80129ee:	f7fe f932 	bl	8010c56 <vListInsert>
 80129f2:	e012      	b.n	8012a1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d206      	bcs.n	8012a0a <prvInsertTimerInActiveList+0x62>
 80129fc:	68ba      	ldr	r2, [r7, #8]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d302      	bcc.n	8012a0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012a04:	2301      	movs	r3, #1
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	e007      	b.n	8012a1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a0a:	4b07      	ldr	r3, [pc, #28]	@ (8012a28 <prvInsertTimerInActiveList+0x80>)
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3304      	adds	r3, #4
 8012a12:	4619      	mov	r1, r3
 8012a14:	4610      	mov	r0, r2
 8012a16:	f7fe f91e 	bl	8010c56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012a1a:	697b      	ldr	r3, [r7, #20]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3718      	adds	r7, #24
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	2400376c 	.word	0x2400376c
 8012a28:	24003768 	.word	0x24003768

08012a2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b08e      	sub	sp, #56	@ 0x38
 8012a30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a32:	e0ce      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	da19      	bge.n	8012a6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012a3a:	1d3b      	adds	r3, r7, #4
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d10b      	bne.n	8012a5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4a:	f383 8811 	msr	BASEPRI, r3
 8012a4e:	f3bf 8f6f 	isb	sy
 8012a52:	f3bf 8f4f 	dsb	sy
 8012a56:	61fb      	str	r3, [r7, #28]
}
 8012a58:	bf00      	nop
 8012a5a:	bf00      	nop
 8012a5c:	e7fd      	b.n	8012a5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a64:	6850      	ldr	r0, [r2, #4]
 8012a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a68:	6892      	ldr	r2, [r2, #8]
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	f2c0 80ae 	blt.w	8012bd2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a7c:	695b      	ldr	r3, [r3, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d004      	beq.n	8012a8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a84:	3304      	adds	r3, #4
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe f91e 	bl	8010cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a8c:	463b      	mov	r3, r7
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ff ff6a 	bl	8012968 <prvSampleTimeNow>
 8012a94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b09      	cmp	r3, #9
 8012a9a:	f200 8097 	bhi.w	8012bcc <prvProcessReceivedCommands+0x1a0>
 8012a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8012aa4 <prvProcessReceivedCommands+0x78>)
 8012aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa4:	08012acd 	.word	0x08012acd
 8012aa8:	08012acd 	.word	0x08012acd
 8012aac:	08012acd 	.word	0x08012acd
 8012ab0:	08012b43 	.word	0x08012b43
 8012ab4:	08012b57 	.word	0x08012b57
 8012ab8:	08012ba3 	.word	0x08012ba3
 8012abc:	08012acd 	.word	0x08012acd
 8012ac0:	08012acd 	.word	0x08012acd
 8012ac4:	08012b43 	.word	0x08012b43
 8012ac8:	08012b57 	.word	0x08012b57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ace:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ad2:	f043 0301 	orr.w	r3, r3, #1
 8012ad6:	b2da      	uxtb	r2, r3
 8012ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae2:	699b      	ldr	r3, [r3, #24]
 8012ae4:	18d1      	adds	r1, r2, r3
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012aec:	f7ff ff5c 	bl	80129a8 <prvInsertTimerInActiveList>
 8012af0:	4603      	mov	r3, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d06c      	beq.n	8012bd0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af8:	6a1b      	ldr	r3, [r3, #32]
 8012afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012afc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b04:	f003 0304 	and.w	r3, r3, #4
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d061      	beq.n	8012bd0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b10:	699b      	ldr	r3, [r3, #24]
 8012b12:	441a      	add	r2, r3
 8012b14:	2300      	movs	r3, #0
 8012b16:	9300      	str	r3, [sp, #0]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b1e:	f7ff fe01 	bl	8012724 <xTimerGenericCommand>
 8012b22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012b24:	6a3b      	ldr	r3, [r7, #32]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d152      	bne.n	8012bd0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8012b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b2e:	f383 8811 	msr	BASEPRI, r3
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	61bb      	str	r3, [r7, #24]
}
 8012b3c:	bf00      	nop
 8012b3e:	bf00      	nop
 8012b40:	e7fd      	b.n	8012b3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b48:	f023 0301 	bic.w	r3, r3, #1
 8012b4c:	b2da      	uxtb	r2, r3
 8012b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012b54:	e03d      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012b5c:	f043 0301 	orr.w	r3, r3, #1
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012b68:	68ba      	ldr	r2, [r7, #8]
 8012b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b70:	699b      	ldr	r3, [r3, #24]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10b      	bne.n	8012b8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7a:	f383 8811 	msr	BASEPRI, r3
 8012b7e:	f3bf 8f6f 	isb	sy
 8012b82:	f3bf 8f4f 	dsb	sy
 8012b86:	617b      	str	r3, [r7, #20]
}
 8012b88:	bf00      	nop
 8012b8a:	bf00      	nop
 8012b8c:	e7fd      	b.n	8012b8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b90:	699a      	ldr	r2, [r3, #24]
 8012b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b94:	18d1      	adds	r1, r2, r3
 8012b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012b9c:	f7ff ff04 	bl	80129a8 <prvInsertTimerInActiveList>
					break;
 8012ba0:	e017      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ba8:	f003 0302 	and.w	r3, r3, #2
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d103      	bne.n	8012bb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bb2:	f000 fbe9 	bl	8013388 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012bb6:	e00c      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012bbe:	f023 0301 	bic.w	r3, r3, #1
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012bca:	e002      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8012bcc:	bf00      	nop
 8012bce:	e000      	b.n	8012bd2 <prvProcessReceivedCommands+0x1a6>
					break;
 8012bd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012bd2:	4b08      	ldr	r3, [pc, #32]	@ (8012bf4 <prvProcessReceivedCommands+0x1c8>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	1d39      	adds	r1, r7, #4
 8012bd8:	2200      	movs	r2, #0
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fe fb84 	bl	80112e8 <xQueueReceive>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f47f af26 	bne.w	8012a34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012be8:	bf00      	nop
 8012bea:	bf00      	nop
 8012bec:	3730      	adds	r7, #48	@ 0x30
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	24003770 	.word	0x24003770

08012bf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b088      	sub	sp, #32
 8012bfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012bfe:	e049      	b.n	8012c94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012c00:	4b2e      	ldr	r3, [pc, #184]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	3304      	adds	r3, #4
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe f855 	bl	8010cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6a1b      	ldr	r3, [r3, #32]
 8012c22:	68f8      	ldr	r0, [r7, #12]
 8012c24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c2c:	f003 0304 	and.w	r3, r3, #4
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d02f      	beq.n	8012c94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	699b      	ldr	r3, [r3, #24]
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d90e      	bls.n	8012c64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	68ba      	ldr	r2, [r7, #8]
 8012c4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	68fa      	ldr	r2, [r7, #12]
 8012c50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c52:	4b1a      	ldr	r3, [pc, #104]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	f7fd fffa 	bl	8010c56 <vListInsert>
 8012c62:	e017      	b.n	8012c94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c64:	2300      	movs	r3, #0
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	2300      	movs	r3, #0
 8012c6a:	693a      	ldr	r2, [r7, #16]
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	f7ff fd58 	bl	8012724 <xTimerGenericCommand>
 8012c74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d10b      	bne.n	8012c94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8012c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c80:	f383 8811 	msr	BASEPRI, r3
 8012c84:	f3bf 8f6f 	isb	sy
 8012c88:	f3bf 8f4f 	dsb	sy
 8012c8c:	603b      	str	r3, [r7, #0]
}
 8012c8e:	bf00      	nop
 8012c90:	bf00      	nop
 8012c92:	e7fd      	b.n	8012c90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012c94:	4b09      	ldr	r3, [pc, #36]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d1b0      	bne.n	8012c00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012c9e:	4b07      	ldr	r3, [pc, #28]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012ca4:	4b06      	ldr	r3, [pc, #24]	@ (8012cc0 <prvSwitchTimerLists+0xc8>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4a04      	ldr	r2, [pc, #16]	@ (8012cbc <prvSwitchTimerLists+0xc4>)
 8012caa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012cac:	4a04      	ldr	r2, [pc, #16]	@ (8012cc0 <prvSwitchTimerLists+0xc8>)
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	6013      	str	r3, [r2, #0]
}
 8012cb2:	bf00      	nop
 8012cb4:	3718      	adds	r7, #24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	24003768 	.word	0x24003768
 8012cc0:	2400376c 	.word	0x2400376c

08012cc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012cca:	f000 f96d 	bl	8012fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012cce:	4b15      	ldr	r3, [pc, #84]	@ (8012d24 <prvCheckForValidListAndQueue+0x60>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d120      	bne.n	8012d18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012cd6:	4814      	ldr	r0, [pc, #80]	@ (8012d28 <prvCheckForValidListAndQueue+0x64>)
 8012cd8:	f7fd ff6c 	bl	8010bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012cdc:	4813      	ldr	r0, [pc, #76]	@ (8012d2c <prvCheckForValidListAndQueue+0x68>)
 8012cde:	f7fd ff69 	bl	8010bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012ce2:	4b13      	ldr	r3, [pc, #76]	@ (8012d30 <prvCheckForValidListAndQueue+0x6c>)
 8012ce4:	4a10      	ldr	r2, [pc, #64]	@ (8012d28 <prvCheckForValidListAndQueue+0x64>)
 8012ce6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ce8:	4b12      	ldr	r3, [pc, #72]	@ (8012d34 <prvCheckForValidListAndQueue+0x70>)
 8012cea:	4a10      	ldr	r2, [pc, #64]	@ (8012d2c <prvCheckForValidListAndQueue+0x68>)
 8012cec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012cee:	2300      	movs	r3, #0
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	4b11      	ldr	r3, [pc, #68]	@ (8012d38 <prvCheckForValidListAndQueue+0x74>)
 8012cf4:	4a11      	ldr	r2, [pc, #68]	@ (8012d3c <prvCheckForValidListAndQueue+0x78>)
 8012cf6:	2110      	movs	r1, #16
 8012cf8:	200a      	movs	r0, #10
 8012cfa:	f7fe f879 	bl	8010df0 <xQueueGenericCreateStatic>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	4a08      	ldr	r2, [pc, #32]	@ (8012d24 <prvCheckForValidListAndQueue+0x60>)
 8012d02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012d04:	4b07      	ldr	r3, [pc, #28]	@ (8012d24 <prvCheckForValidListAndQueue+0x60>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d005      	beq.n	8012d18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012d0c:	4b05      	ldr	r3, [pc, #20]	@ (8012d24 <prvCheckForValidListAndQueue+0x60>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	490b      	ldr	r1, [pc, #44]	@ (8012d40 <prvCheckForValidListAndQueue+0x7c>)
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fe fcda 	bl	80116cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d18:	f000 f978 	bl	801300c <vPortExitCritical>
}
 8012d1c:	bf00      	nop
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	24003770 	.word	0x24003770
 8012d28:	24003740 	.word	0x24003740
 8012d2c:	24003754 	.word	0x24003754
 8012d30:	24003768 	.word	0x24003768
 8012d34:	2400376c 	.word	0x2400376c
 8012d38:	2400381c 	.word	0x2400381c
 8012d3c:	2400377c 	.word	0x2400377c
 8012d40:	08017e7c 	.word	0x08017e7c

08012d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	3b04      	subs	r3, #4
 8012d54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	3b04      	subs	r3, #4
 8012d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	f023 0201 	bic.w	r2, r3, #1
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	3b04      	subs	r3, #4
 8012d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012d74:	4a0c      	ldr	r2, [pc, #48]	@ (8012da8 <pxPortInitialiseStack+0x64>)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	3b14      	subs	r3, #20
 8012d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012d80:	687a      	ldr	r2, [r7, #4]
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	3b04      	subs	r3, #4
 8012d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f06f 0202 	mvn.w	r2, #2
 8012d92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3b20      	subs	r3, #32
 8012d98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3714      	adds	r7, #20
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr
 8012da8:	08012dad 	.word	0x08012dad

08012dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012db2:	2300      	movs	r3, #0
 8012db4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012db6:	4b13      	ldr	r3, [pc, #76]	@ (8012e04 <prvTaskExitError+0x58>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dbe:	d00b      	beq.n	8012dd8 <prvTaskExitError+0x2c>
	__asm volatile
 8012dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dc4:	f383 8811 	msr	BASEPRI, r3
 8012dc8:	f3bf 8f6f 	isb	sy
 8012dcc:	f3bf 8f4f 	dsb	sy
 8012dd0:	60fb      	str	r3, [r7, #12]
}
 8012dd2:	bf00      	nop
 8012dd4:	bf00      	nop
 8012dd6:	e7fd      	b.n	8012dd4 <prvTaskExitError+0x28>
	__asm volatile
 8012dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ddc:	f383 8811 	msr	BASEPRI, r3
 8012de0:	f3bf 8f6f 	isb	sy
 8012de4:	f3bf 8f4f 	dsb	sy
 8012de8:	60bb      	str	r3, [r7, #8]
}
 8012dea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012dec:	bf00      	nop
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d0fc      	beq.n	8012dee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012df4:	bf00      	nop
 8012df6:	bf00      	nop
 8012df8:	3714      	adds	r7, #20
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	2400008c 	.word	0x2400008c
	...

08012e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012e10:	4b07      	ldr	r3, [pc, #28]	@ (8012e30 <pxCurrentTCBConst2>)
 8012e12:	6819      	ldr	r1, [r3, #0]
 8012e14:	6808      	ldr	r0, [r1, #0]
 8012e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1a:	f380 8809 	msr	PSP, r0
 8012e1e:	f3bf 8f6f 	isb	sy
 8012e22:	f04f 0000 	mov.w	r0, #0
 8012e26:	f380 8811 	msr	BASEPRI, r0
 8012e2a:	4770      	bx	lr
 8012e2c:	f3af 8000 	nop.w

08012e30 <pxCurrentTCBConst2>:
 8012e30:	24003240 	.word	0x24003240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012e34:	bf00      	nop
 8012e36:	bf00      	nop

08012e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012e38:	4808      	ldr	r0, [pc, #32]	@ (8012e5c <prvPortStartFirstTask+0x24>)
 8012e3a:	6800      	ldr	r0, [r0, #0]
 8012e3c:	6800      	ldr	r0, [r0, #0]
 8012e3e:	f380 8808 	msr	MSP, r0
 8012e42:	f04f 0000 	mov.w	r0, #0
 8012e46:	f380 8814 	msr	CONTROL, r0
 8012e4a:	b662      	cpsie	i
 8012e4c:	b661      	cpsie	f
 8012e4e:	f3bf 8f4f 	dsb	sy
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	df00      	svc	0
 8012e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012e5a:	bf00      	nop
 8012e5c:	e000ed08 	.word	0xe000ed08

08012e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012e66:	4b47      	ldr	r3, [pc, #284]	@ (8012f84 <xPortStartScheduler+0x124>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a47      	ldr	r2, [pc, #284]	@ (8012f88 <xPortStartScheduler+0x128>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d10b      	bne.n	8012e88 <xPortStartScheduler+0x28>
	__asm volatile
 8012e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	60fb      	str	r3, [r7, #12]
}
 8012e82:	bf00      	nop
 8012e84:	bf00      	nop
 8012e86:	e7fd      	b.n	8012e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012e88:	4b3e      	ldr	r3, [pc, #248]	@ (8012f84 <xPortStartScheduler+0x124>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8012f8c <xPortStartScheduler+0x12c>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d10b      	bne.n	8012eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8012e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	613b      	str	r3, [r7, #16]
}
 8012ea4:	bf00      	nop
 8012ea6:	bf00      	nop
 8012ea8:	e7fd      	b.n	8012ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012eaa:	4b39      	ldr	r3, [pc, #228]	@ (8012f90 <xPortStartScheduler+0x130>)
 8012eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	22ff      	movs	r2, #255	@ 0xff
 8012eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012ec4:	78fb      	ldrb	r3, [r7, #3]
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	4b31      	ldr	r3, [pc, #196]	@ (8012f94 <xPortStartScheduler+0x134>)
 8012ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012ed2:	4b31      	ldr	r3, [pc, #196]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012ed4:	2207      	movs	r2, #7
 8012ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ed8:	e009      	b.n	8012eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012eda:	4b2f      	ldr	r3, [pc, #188]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012ee4:	78fb      	ldrb	r3, [r7, #3]
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	005b      	lsls	r3, r3, #1
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012eee:	78fb      	ldrb	r3, [r7, #3]
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ef6:	2b80      	cmp	r3, #128	@ 0x80
 8012ef8:	d0ef      	beq.n	8012eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012efa:	4b27      	ldr	r3, [pc, #156]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f1c3 0307 	rsb	r3, r3, #7
 8012f02:	2b04      	cmp	r3, #4
 8012f04:	d00b      	beq.n	8012f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8012f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	60bb      	str	r3, [r7, #8]
}
 8012f18:	bf00      	nop
 8012f1a:	bf00      	nop
 8012f1c:	e7fd      	b.n	8012f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	021b      	lsls	r3, r3, #8
 8012f24:	4a1c      	ldr	r2, [pc, #112]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012f28:	4b1b      	ldr	r3, [pc, #108]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012f30:	4a19      	ldr	r2, [pc, #100]	@ (8012f98 <xPortStartScheduler+0x138>)
 8012f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012f3c:	4b17      	ldr	r3, [pc, #92]	@ (8012f9c <xPortStartScheduler+0x13c>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a16      	ldr	r2, [pc, #88]	@ (8012f9c <xPortStartScheduler+0x13c>)
 8012f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012f48:	4b14      	ldr	r3, [pc, #80]	@ (8012f9c <xPortStartScheduler+0x13c>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4a13      	ldr	r2, [pc, #76]	@ (8012f9c <xPortStartScheduler+0x13c>)
 8012f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012f54:	f000 f8da 	bl	801310c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012f58:	4b11      	ldr	r3, [pc, #68]	@ (8012fa0 <xPortStartScheduler+0x140>)
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012f5e:	f000 f8f9 	bl	8013154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012f62:	4b10      	ldr	r3, [pc, #64]	@ (8012fa4 <xPortStartScheduler+0x144>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	4a0f      	ldr	r2, [pc, #60]	@ (8012fa4 <xPortStartScheduler+0x144>)
 8012f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012f6e:	f7ff ff63 	bl	8012e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012f72:	f7ff f82d 	bl	8011fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8012f76:	f7ff ff19 	bl	8012dac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	e000ed00 	.word	0xe000ed00
 8012f88:	410fc271 	.word	0x410fc271
 8012f8c:	410fc270 	.word	0x410fc270
 8012f90:	e000e400 	.word	0xe000e400
 8012f94:	2400386c 	.word	0x2400386c
 8012f98:	24003870 	.word	0x24003870
 8012f9c:	e000ed20 	.word	0xe000ed20
 8012fa0:	2400008c 	.word	0x2400008c
 8012fa4:	e000ef34 	.word	0xe000ef34

08012fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
	__asm volatile
 8012fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb2:	f383 8811 	msr	BASEPRI, r3
 8012fb6:	f3bf 8f6f 	isb	sy
 8012fba:	f3bf 8f4f 	dsb	sy
 8012fbe:	607b      	str	r3, [r7, #4]
}
 8012fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012fc2:	4b10      	ldr	r3, [pc, #64]	@ (8013004 <vPortEnterCritical+0x5c>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8013004 <vPortEnterCritical+0x5c>)
 8012fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8013004 <vPortEnterCritical+0x5c>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d110      	bne.n	8012ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8013008 <vPortEnterCritical+0x60>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00b      	beq.n	8012ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8012fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	603b      	str	r3, [r7, #0]
}
 8012ff0:	bf00      	nop
 8012ff2:	bf00      	nop
 8012ff4:	e7fd      	b.n	8012ff2 <vPortEnterCritical+0x4a>
	}
}
 8012ff6:	bf00      	nop
 8012ff8:	370c      	adds	r7, #12
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop
 8013004:	2400008c 	.word	0x2400008c
 8013008:	e000ed04 	.word	0xe000ed04

0801300c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013012:	4b12      	ldr	r3, [pc, #72]	@ (801305c <vPortExitCritical+0x50>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d10b      	bne.n	8013032 <vPortExitCritical+0x26>
	__asm volatile
 801301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801301e:	f383 8811 	msr	BASEPRI, r3
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	607b      	str	r3, [r7, #4]
}
 801302c:	bf00      	nop
 801302e:	bf00      	nop
 8013030:	e7fd      	b.n	801302e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013032:	4b0a      	ldr	r3, [pc, #40]	@ (801305c <vPortExitCritical+0x50>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	3b01      	subs	r3, #1
 8013038:	4a08      	ldr	r2, [pc, #32]	@ (801305c <vPortExitCritical+0x50>)
 801303a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801303c:	4b07      	ldr	r3, [pc, #28]	@ (801305c <vPortExitCritical+0x50>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d105      	bne.n	8013050 <vPortExitCritical+0x44>
 8013044:	2300      	movs	r3, #0
 8013046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	f383 8811 	msr	BASEPRI, r3
}
 801304e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013050:	bf00      	nop
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr
 801305c:	2400008c 	.word	0x2400008c

08013060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013060:	f3ef 8009 	mrs	r0, PSP
 8013064:	f3bf 8f6f 	isb	sy
 8013068:	4b15      	ldr	r3, [pc, #84]	@ (80130c0 <pxCurrentTCBConst>)
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	f01e 0f10 	tst.w	lr, #16
 8013070:	bf08      	it	eq
 8013072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307a:	6010      	str	r0, [r2, #0]
 801307c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013084:	f380 8811 	msr	BASEPRI, r0
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	f3bf 8f6f 	isb	sy
 8013090:	f7fe ff9e 	bl	8011fd0 <vTaskSwitchContext>
 8013094:	f04f 0000 	mov.w	r0, #0
 8013098:	f380 8811 	msr	BASEPRI, r0
 801309c:	bc09      	pop	{r0, r3}
 801309e:	6819      	ldr	r1, [r3, #0]
 80130a0:	6808      	ldr	r0, [r1, #0]
 80130a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a6:	f01e 0f10 	tst.w	lr, #16
 80130aa:	bf08      	it	eq
 80130ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80130b0:	f380 8809 	msr	PSP, r0
 80130b4:	f3bf 8f6f 	isb	sy
 80130b8:	4770      	bx	lr
 80130ba:	bf00      	nop
 80130bc:	f3af 8000 	nop.w

080130c0 <pxCurrentTCBConst>:
 80130c0:	24003240 	.word	0x24003240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80130c4:	bf00      	nop
 80130c6:	bf00      	nop

080130c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
	__asm volatile
 80130ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	607b      	str	r3, [r7, #4]
}
 80130e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80130e2:	f7fe febb 	bl	8011e5c <xTaskIncrementTick>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d003      	beq.n	80130f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80130ec:	4b06      	ldr	r3, [pc, #24]	@ (8013108 <xPortSysTickHandler+0x40>)
 80130ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130f2:	601a      	str	r2, [r3, #0]
 80130f4:	2300      	movs	r3, #0
 80130f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	f383 8811 	msr	BASEPRI, r3
}
 80130fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013100:	bf00      	nop
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	e000ed04 	.word	0xe000ed04

0801310c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801310c:	b480      	push	{r7}
 801310e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013110:	4b0b      	ldr	r3, [pc, #44]	@ (8013140 <vPortSetupTimerInterrupt+0x34>)
 8013112:	2200      	movs	r2, #0
 8013114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013116:	4b0b      	ldr	r3, [pc, #44]	@ (8013144 <vPortSetupTimerInterrupt+0x38>)
 8013118:	2200      	movs	r2, #0
 801311a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801311c:	4b0a      	ldr	r3, [pc, #40]	@ (8013148 <vPortSetupTimerInterrupt+0x3c>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a0a      	ldr	r2, [pc, #40]	@ (801314c <vPortSetupTimerInterrupt+0x40>)
 8013122:	fba2 2303 	umull	r2, r3, r2, r3
 8013126:	095b      	lsrs	r3, r3, #5
 8013128:	4a09      	ldr	r2, [pc, #36]	@ (8013150 <vPortSetupTimerInterrupt+0x44>)
 801312a:	3b01      	subs	r3, #1
 801312c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801312e:	4b04      	ldr	r3, [pc, #16]	@ (8013140 <vPortSetupTimerInterrupt+0x34>)
 8013130:	2207      	movs	r2, #7
 8013132:	601a      	str	r2, [r3, #0]
}
 8013134:	bf00      	nop
 8013136:	46bd      	mov	sp, r7
 8013138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313c:	4770      	bx	lr
 801313e:	bf00      	nop
 8013140:	e000e010 	.word	0xe000e010
 8013144:	e000e018 	.word	0xe000e018
 8013148:	24000064 	.word	0x24000064
 801314c:	10624dd3 	.word	0x10624dd3
 8013150:	e000e014 	.word	0xe000e014

08013154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013164 <vPortEnableVFP+0x10>
 8013158:	6801      	ldr	r1, [r0, #0]
 801315a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801315e:	6001      	str	r1, [r0, #0]
 8013160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013162:	bf00      	nop
 8013164:	e000ed88 	.word	0xe000ed88

08013168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801316e:	f3ef 8305 	mrs	r3, IPSR
 8013172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2b0f      	cmp	r3, #15
 8013178:	d915      	bls.n	80131a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801317a:	4a18      	ldr	r2, [pc, #96]	@ (80131dc <vPortValidateInterruptPriority+0x74>)
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	4413      	add	r3, r2
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013184:	4b16      	ldr	r3, [pc, #88]	@ (80131e0 <vPortValidateInterruptPriority+0x78>)
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	7afa      	ldrb	r2, [r7, #11]
 801318a:	429a      	cmp	r2, r3
 801318c:	d20b      	bcs.n	80131a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	607b      	str	r3, [r7, #4]
}
 80131a0:	bf00      	nop
 80131a2:	bf00      	nop
 80131a4:	e7fd      	b.n	80131a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80131a6:	4b0f      	ldr	r3, [pc, #60]	@ (80131e4 <vPortValidateInterruptPriority+0x7c>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80131ae:	4b0e      	ldr	r3, [pc, #56]	@ (80131e8 <vPortValidateInterruptPriority+0x80>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d90b      	bls.n	80131ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	603b      	str	r3, [r7, #0]
}
 80131c8:	bf00      	nop
 80131ca:	bf00      	nop
 80131cc:	e7fd      	b.n	80131ca <vPortValidateInterruptPriority+0x62>
	}
 80131ce:	bf00      	nop
 80131d0:	3714      	adds	r7, #20
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	e000e3f0 	.word	0xe000e3f0
 80131e0:	2400386c 	.word	0x2400386c
 80131e4:	e000ed0c 	.word	0xe000ed0c
 80131e8:	24003870 	.word	0x24003870

080131ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b08a      	sub	sp, #40	@ 0x28
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80131f4:	2300      	movs	r3, #0
 80131f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80131f8:	f7fe fd74 	bl	8011ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80131fc:	4b5c      	ldr	r3, [pc, #368]	@ (8013370 <pvPortMalloc+0x184>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d101      	bne.n	8013208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013204:	f000 f924 	bl	8013450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013208:	4b5a      	ldr	r3, [pc, #360]	@ (8013374 <pvPortMalloc+0x188>)
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4013      	ands	r3, r2
 8013210:	2b00      	cmp	r3, #0
 8013212:	f040 8095 	bne.w	8013340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d01e      	beq.n	801325a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801321c:	2208      	movs	r2, #8
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	4413      	add	r3, r2
 8013222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f003 0307 	and.w	r3, r3, #7
 801322a:	2b00      	cmp	r3, #0
 801322c:	d015      	beq.n	801325a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f023 0307 	bic.w	r3, r3, #7
 8013234:	3308      	adds	r3, #8
 8013236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f003 0307 	and.w	r3, r3, #7
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00b      	beq.n	801325a <pvPortMalloc+0x6e>
	__asm volatile
 8013242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013246:	f383 8811 	msr	BASEPRI, r3
 801324a:	f3bf 8f6f 	isb	sy
 801324e:	f3bf 8f4f 	dsb	sy
 8013252:	617b      	str	r3, [r7, #20]
}
 8013254:	bf00      	nop
 8013256:	bf00      	nop
 8013258:	e7fd      	b.n	8013256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d06f      	beq.n	8013340 <pvPortMalloc+0x154>
 8013260:	4b45      	ldr	r3, [pc, #276]	@ (8013378 <pvPortMalloc+0x18c>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	687a      	ldr	r2, [r7, #4]
 8013266:	429a      	cmp	r2, r3
 8013268:	d86a      	bhi.n	8013340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801326a:	4b44      	ldr	r3, [pc, #272]	@ (801337c <pvPortMalloc+0x190>)
 801326c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801326e:	4b43      	ldr	r3, [pc, #268]	@ (801337c <pvPortMalloc+0x190>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013274:	e004      	b.n	8013280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	429a      	cmp	r2, r3
 8013288:	d903      	bls.n	8013292 <pvPortMalloc+0xa6>
 801328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d1f1      	bne.n	8013276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013292:	4b37      	ldr	r3, [pc, #220]	@ (8013370 <pvPortMalloc+0x184>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013298:	429a      	cmp	r2, r3
 801329a:	d051      	beq.n	8013340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2208      	movs	r2, #8
 80132a2:	4413      	add	r3, r2
 80132a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80132a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80132ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b0:	685a      	ldr	r2, [r3, #4]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	1ad2      	subs	r2, r2, r3
 80132b6:	2308      	movs	r3, #8
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d920      	bls.n	8013300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80132be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	4413      	add	r3, r2
 80132c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80132c6:	69bb      	ldr	r3, [r7, #24]
 80132c8:	f003 0307 	and.w	r3, r3, #7
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00b      	beq.n	80132e8 <pvPortMalloc+0xfc>
	__asm volatile
 80132d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132d4:	f383 8811 	msr	BASEPRI, r3
 80132d8:	f3bf 8f6f 	isb	sy
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	613b      	str	r3, [r7, #16]
}
 80132e2:	bf00      	nop
 80132e4:	bf00      	nop
 80132e6:	e7fd      	b.n	80132e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80132e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ea:	685a      	ldr	r2, [r3, #4]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	1ad2      	subs	r2, r2, r3
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80132f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80132fa:	69b8      	ldr	r0, [r7, #24]
 80132fc:	f000 f90a 	bl	8013514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013300:	4b1d      	ldr	r3, [pc, #116]	@ (8013378 <pvPortMalloc+0x18c>)
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	4a1b      	ldr	r2, [pc, #108]	@ (8013378 <pvPortMalloc+0x18c>)
 801330c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801330e:	4b1a      	ldr	r3, [pc, #104]	@ (8013378 <pvPortMalloc+0x18c>)
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	4b1b      	ldr	r3, [pc, #108]	@ (8013380 <pvPortMalloc+0x194>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	429a      	cmp	r2, r3
 8013318:	d203      	bcs.n	8013322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801331a:	4b17      	ldr	r3, [pc, #92]	@ (8013378 <pvPortMalloc+0x18c>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4a18      	ldr	r2, [pc, #96]	@ (8013380 <pvPortMalloc+0x194>)
 8013320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013324:	685a      	ldr	r2, [r3, #4]
 8013326:	4b13      	ldr	r3, [pc, #76]	@ (8013374 <pvPortMalloc+0x188>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	431a      	orrs	r2, r3
 801332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801332e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013336:	4b13      	ldr	r3, [pc, #76]	@ (8013384 <pvPortMalloc+0x198>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	3301      	adds	r3, #1
 801333c:	4a11      	ldr	r2, [pc, #68]	@ (8013384 <pvPortMalloc+0x198>)
 801333e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013340:	f7fe fcde 	bl	8011d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	f003 0307 	and.w	r3, r3, #7
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00b      	beq.n	8013366 <pvPortMalloc+0x17a>
	__asm volatile
 801334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013352:	f383 8811 	msr	BASEPRI, r3
 8013356:	f3bf 8f6f 	isb	sy
 801335a:	f3bf 8f4f 	dsb	sy
 801335e:	60fb      	str	r3, [r7, #12]
}
 8013360:	bf00      	nop
 8013362:	bf00      	nop
 8013364:	e7fd      	b.n	8013362 <pvPortMalloc+0x176>
	return pvReturn;
 8013366:	69fb      	ldr	r3, [r7, #28]
}
 8013368:	4618      	mov	r0, r3
 801336a:	3728      	adds	r7, #40	@ 0x28
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	2400747c 	.word	0x2400747c
 8013374:	24007490 	.word	0x24007490
 8013378:	24007480 	.word	0x24007480
 801337c:	24007474 	.word	0x24007474
 8013380:	24007484 	.word	0x24007484
 8013384:	24007488 	.word	0x24007488

08013388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d04f      	beq.n	801343a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801339a:	2308      	movs	r3, #8
 801339c:	425b      	negs	r3, r3
 801339e:	697a      	ldr	r2, [r7, #20]
 80133a0:	4413      	add	r3, r2
 80133a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	685a      	ldr	r2, [r3, #4]
 80133ac:	4b25      	ldr	r3, [pc, #148]	@ (8013444 <vPortFree+0xbc>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	4013      	ands	r3, r2
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d10b      	bne.n	80133ce <vPortFree+0x46>
	__asm volatile
 80133b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ba:	f383 8811 	msr	BASEPRI, r3
 80133be:	f3bf 8f6f 	isb	sy
 80133c2:	f3bf 8f4f 	dsb	sy
 80133c6:	60fb      	str	r3, [r7, #12]
}
 80133c8:	bf00      	nop
 80133ca:	bf00      	nop
 80133cc:	e7fd      	b.n	80133ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00b      	beq.n	80133ee <vPortFree+0x66>
	__asm volatile
 80133d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133da:	f383 8811 	msr	BASEPRI, r3
 80133de:	f3bf 8f6f 	isb	sy
 80133e2:	f3bf 8f4f 	dsb	sy
 80133e6:	60bb      	str	r3, [r7, #8]
}
 80133e8:	bf00      	nop
 80133ea:	bf00      	nop
 80133ec:	e7fd      	b.n	80133ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	685a      	ldr	r2, [r3, #4]
 80133f2:	4b14      	ldr	r3, [pc, #80]	@ (8013444 <vPortFree+0xbc>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	4013      	ands	r3, r2
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d01e      	beq.n	801343a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d11a      	bne.n	801343a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	685a      	ldr	r2, [r3, #4]
 8013408:	4b0e      	ldr	r3, [pc, #56]	@ (8013444 <vPortFree+0xbc>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	43db      	mvns	r3, r3
 801340e:	401a      	ands	r2, r3
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013414:	f7fe fc66 	bl	8011ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	685a      	ldr	r2, [r3, #4]
 801341c:	4b0a      	ldr	r3, [pc, #40]	@ (8013448 <vPortFree+0xc0>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4413      	add	r3, r2
 8013422:	4a09      	ldr	r2, [pc, #36]	@ (8013448 <vPortFree+0xc0>)
 8013424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013426:	6938      	ldr	r0, [r7, #16]
 8013428:	f000 f874 	bl	8013514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801342c:	4b07      	ldr	r3, [pc, #28]	@ (801344c <vPortFree+0xc4>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3301      	adds	r3, #1
 8013432:	4a06      	ldr	r2, [pc, #24]	@ (801344c <vPortFree+0xc4>)
 8013434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013436:	f7fe fc63 	bl	8011d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801343a:	bf00      	nop
 801343c:	3718      	adds	r7, #24
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	24007490 	.word	0x24007490
 8013448:	24007480 	.word	0x24007480
 801344c:	2400748c 	.word	0x2400748c

08013450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013450:	b480      	push	{r7}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801345a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801345c:	4b27      	ldr	r3, [pc, #156]	@ (80134fc <prvHeapInit+0xac>)
 801345e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f003 0307 	and.w	r3, r3, #7
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00c      	beq.n	8013484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	3307      	adds	r3, #7
 801346e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f023 0307 	bic.w	r3, r3, #7
 8013476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	1ad3      	subs	r3, r2, r3
 801347e:	4a1f      	ldr	r2, [pc, #124]	@ (80134fc <prvHeapInit+0xac>)
 8013480:	4413      	add	r3, r2
 8013482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013488:	4a1d      	ldr	r2, [pc, #116]	@ (8013500 <prvHeapInit+0xb0>)
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801348e:	4b1c      	ldr	r3, [pc, #112]	@ (8013500 <prvHeapInit+0xb0>)
 8013490:	2200      	movs	r2, #0
 8013492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	68ba      	ldr	r2, [r7, #8]
 8013498:	4413      	add	r3, r2
 801349a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801349c:	2208      	movs	r2, #8
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	1a9b      	subs	r3, r3, r2
 80134a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f023 0307 	bic.w	r3, r3, #7
 80134aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	4a15      	ldr	r2, [pc, #84]	@ (8013504 <prvHeapInit+0xb4>)
 80134b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80134b2:	4b14      	ldr	r3, [pc, #80]	@ (8013504 <prvHeapInit+0xb4>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2200      	movs	r2, #0
 80134b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80134ba:	4b12      	ldr	r3, [pc, #72]	@ (8013504 <prvHeapInit+0xb4>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2200      	movs	r2, #0
 80134c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	68fa      	ldr	r2, [r7, #12]
 80134ca:	1ad2      	subs	r2, r2, r3
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80134d0:	4b0c      	ldr	r3, [pc, #48]	@ (8013504 <prvHeapInit+0xb4>)
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	4a0a      	ldr	r2, [pc, #40]	@ (8013508 <prvHeapInit+0xb8>)
 80134de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	4a09      	ldr	r2, [pc, #36]	@ (801350c <prvHeapInit+0xbc>)
 80134e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80134e8:	4b09      	ldr	r3, [pc, #36]	@ (8013510 <prvHeapInit+0xc0>)
 80134ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80134ee:	601a      	str	r2, [r3, #0]
}
 80134f0:	bf00      	nop
 80134f2:	3714      	adds	r7, #20
 80134f4:	46bd      	mov	sp, r7
 80134f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fa:	4770      	bx	lr
 80134fc:	24003874 	.word	0x24003874
 8013500:	24007474 	.word	0x24007474
 8013504:	2400747c 	.word	0x2400747c
 8013508:	24007484 	.word	0x24007484
 801350c:	24007480 	.word	0x24007480
 8013510:	24007490 	.word	0x24007490

08013514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013514:	b480      	push	{r7}
 8013516:	b085      	sub	sp, #20
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801351c:	4b28      	ldr	r3, [pc, #160]	@ (80135c0 <prvInsertBlockIntoFreeList+0xac>)
 801351e:	60fb      	str	r3, [r7, #12]
 8013520:	e002      	b.n	8013528 <prvInsertBlockIntoFreeList+0x14>
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	429a      	cmp	r2, r3
 8013530:	d8f7      	bhi.n	8013522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	68ba      	ldr	r2, [r7, #8]
 801353c:	4413      	add	r3, r2
 801353e:	687a      	ldr	r2, [r7, #4]
 8013540:	429a      	cmp	r2, r3
 8013542:	d108      	bne.n	8013556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	441a      	add	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	68ba      	ldr	r2, [r7, #8]
 8013560:	441a      	add	r2, r3
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	429a      	cmp	r2, r3
 8013568:	d118      	bne.n	801359c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	4b15      	ldr	r3, [pc, #84]	@ (80135c4 <prvInsertBlockIntoFreeList+0xb0>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	429a      	cmp	r2, r3
 8013574:	d00d      	beq.n	8013592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685a      	ldr	r2, [r3, #4]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	441a      	add	r2, r3
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	601a      	str	r2, [r3, #0]
 8013590:	e008      	b.n	80135a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013592:	4b0c      	ldr	r3, [pc, #48]	@ (80135c4 <prvInsertBlockIntoFreeList+0xb0>)
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	601a      	str	r2, [r3, #0]
 801359a:	e003      	b.n	80135a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80135a4:	68fa      	ldr	r2, [r7, #12]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d002      	beq.n	80135b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80135b2:	bf00      	nop
 80135b4:	3714      	adds	r7, #20
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr
 80135be:	bf00      	nop
 80135c0:	24007474 	.word	0x24007474
 80135c4:	2400747c 	.word	0x2400747c

080135c8 <arm_mat_trans_f32>:
 80135c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135cc:	8802      	ldrh	r2, [r0, #0]
 80135ce:	b085      	sub	sp, #20
 80135d0:	884b      	ldrh	r3, [r1, #2]
 80135d2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80135d6:	4293      	cmp	r3, r2
 80135d8:	8844      	ldrh	r4, [r0, #2]
 80135da:	6848      	ldr	r0, [r1, #4]
 80135dc:	d14e      	bne.n	801367c <arm_mat_trans_f32+0xb4>
 80135de:	f8b1 8000 	ldrh.w	r8, [r1]
 80135e2:	45a0      	cmp	r8, r4
 80135e4:	d14a      	bne.n	801367c <arm_mat_trans_f32+0xb4>
 80135e6:	ea4f 0998 	mov.w	r9, r8, lsr #2
 80135ea:	f008 0803 	and.w	r8, r8, #3
 80135ee:	009c      	lsls	r4, r3, #2
 80135f0:	4684      	mov	ip, r0
 80135f2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80135f6:	fb09 f204 	mul.w	r2, r9, r4
 80135fa:	011d      	lsls	r5, r3, #4
 80135fc:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8013600:	eb00 0a04 	add.w	sl, r0, r4
 8013604:	0092      	lsls	r2, r2, #2
 8013606:	9103      	str	r1, [sp, #12]
 8013608:	00db      	lsls	r3, r3, #3
 801360a:	9202      	str	r2, [sp, #8]
 801360c:	9301      	str	r3, [sp, #4]
 801360e:	4663      	mov	r3, ip
 8013610:	f1b9 0f00 	cmp.w	r9, #0
 8013614:	d01d      	beq.n	8013652 <arm_mat_trans_f32+0x8a>
 8013616:	9901      	ldr	r1, [sp, #4]
 8013618:	f10e 0210 	add.w	r2, lr, #16
 801361c:	4648      	mov	r0, r9
 801361e:	4461      	add	r1, ip
 8013620:	ed52 7a04 	vldr	s15, [r2, #-16]
 8013624:	191f      	adds	r7, r3, r4
 8013626:	190e      	adds	r6, r1, r4
 8013628:	3801      	subs	r0, #1
 801362a:	edc3 7a00 	vstr	s15, [r3]
 801362e:	f102 0210 	add.w	r2, r2, #16
 8013632:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 8013636:	442b      	add	r3, r5
 8013638:	edc7 7a00 	vstr	s15, [r7]
 801363c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8013640:	600f      	str	r7, [r1, #0]
 8013642:	4429      	add	r1, r5
 8013644:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8013648:	6037      	str	r7, [r6, #0]
 801364a:	d1e9      	bne.n	8013620 <arm_mat_trans_f32+0x58>
 801364c:	9b02      	ldr	r3, [sp, #8]
 801364e:	44de      	add	lr, fp
 8013650:	4463      	add	r3, ip
 8013652:	f1b8 0f00 	cmp.w	r8, #0
 8013656:	d009      	beq.n	801366c <arm_mat_trans_f32+0xa4>
 8013658:	4642      	mov	r2, r8
 801365a:	4671      	mov	r1, lr
 801365c:	f851 0b04 	ldr.w	r0, [r1], #4
 8013660:	3a01      	subs	r2, #1
 8013662:	6018      	str	r0, [r3, #0]
 8013664:	4423      	add	r3, r4
 8013666:	d1f9      	bne.n	801365c <arm_mat_trans_f32+0x94>
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	449e      	add	lr, r3
 801366c:	f10c 0c04 	add.w	ip, ip, #4
 8013670:	45d4      	cmp	ip, sl
 8013672:	d1cc      	bne.n	801360e <arm_mat_trans_f32+0x46>
 8013674:	2000      	movs	r0, #0
 8013676:	b005      	add	sp, #20
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	f06f 0002 	mvn.w	r0, #2
 8013680:	e7f9      	b.n	8013676 <arm_mat_trans_f32+0xae>
 8013682:	bf00      	nop

08013684 <arm_mat_mult_f32>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	8845      	ldrh	r5, [r0, #2]
 801368a:	b08b      	sub	sp, #44	@ 0x2c
 801368c:	880b      	ldrh	r3, [r1, #0]
 801368e:	8806      	ldrh	r6, [r0, #0]
 8013690:	42ab      	cmp	r3, r5
 8013692:	9109      	str	r1, [sp, #36]	@ 0x24
 8013694:	6847      	ldr	r7, [r0, #4]
 8013696:	9604      	str	r6, [sp, #16]
 8013698:	6848      	ldr	r0, [r1, #4]
 801369a:	6854      	ldr	r4, [r2, #4]
 801369c:	8849      	ldrh	r1, [r1, #2]
 801369e:	f040 808d 	bne.w	80137bc <arm_mat_mult_f32+0x138>
 80136a2:	8815      	ldrh	r5, [r2, #0]
 80136a4:	42b5      	cmp	r5, r6
 80136a6:	f040 8089 	bne.w	80137bc <arm_mat_mult_f32+0x138>
 80136aa:	8852      	ldrh	r2, [r2, #2]
 80136ac:	428a      	cmp	r2, r1
 80136ae:	f040 8085 	bne.w	80137bc <arm_mat_mult_f32+0x138>
 80136b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80136b6:	1d01      	adds	r1, r0, #4
 80136b8:	0116      	lsls	r6, r2, #4
 80136ba:	f003 0903 	and.w	r9, r3, #3
 80136be:	9108      	str	r1, [sp, #32]
 80136c0:	0095      	lsls	r5, r2, #2
 80136c2:	fb06 f108 	mul.w	r1, r6, r8
 80136c6:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	f107 0b10 	add.w	fp, r7, #16
 80136d0:	9103      	str	r1, [sp, #12]
 80136d2:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80136d6:	00d2      	lsls	r2, r2, #3
 80136d8:	eb04 0a05 	add.w	sl, r4, r5
 80136dc:	9101      	str	r1, [sp, #4]
 80136de:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80136e2:	9202      	str	r2, [sp, #8]
 80136e4:	9107      	str	r1, [sp, #28]
 80136e6:	9306      	str	r3, [sp, #24]
 80136e8:	f1ab 0310 	sub.w	r3, fp, #16
 80136ec:	f8dd e020 	ldr.w	lr, [sp, #32]
 80136f0:	9305      	str	r3, [sp, #20]
 80136f2:	9b07      	ldr	r3, [sp, #28]
 80136f4:	eb03 0c0a 	add.w	ip, r3, sl
 80136f8:	f1b8 0f00 	cmp.w	r8, #0
 80136fc:	d056      	beq.n	80137ac <arm_mat_mult_f32+0x128>
 80136fe:	9b02      	ldr	r3, [sp, #8]
 8013700:	4644      	mov	r4, r8
 8013702:	4602      	mov	r2, r0
 8013704:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80137c8 <arm_mat_mult_f32+0x144>
 8013708:	18c1      	adds	r1, r0, r3
 801370a:	465b      	mov	r3, fp
 801370c:	edd2 6a00 	vldr	s13, [r2]
 8013710:	1957      	adds	r7, r2, r5
 8013712:	ed13 7a04 	vldr	s14, [r3, #-16]
 8013716:	3c01      	subs	r4, #1
 8013718:	ed53 5a03 	vldr	s11, [r3, #-12]
 801371c:	4432      	add	r2, r6
 801371e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013722:	ed97 6a00 	vldr	s12, [r7]
 8013726:	ed53 6a02 	vldr	s13, [r3, #-8]
 801372a:	eb01 0705 	add.w	r7, r1, r5
 801372e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013732:	ed91 5a00 	vldr	s10, [r1]
 8013736:	ee77 7a27 	vadd.f32	s15, s14, s15
 801373a:	edd7 5a00 	vldr	s11, [r7]
 801373e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8013742:	ed53 6a01 	vldr	s13, [r3, #-4]
 8013746:	4431      	add	r1, r6
 8013748:	f103 0310 	add.w	r3, r3, #16
 801374c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013750:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8013754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801375c:	d1d6      	bne.n	801370c <arm_mat_mult_f32+0x88>
 801375e:	9b03      	ldr	r3, [sp, #12]
 8013760:	9a01      	ldr	r2, [sp, #4]
 8013762:	4418      	add	r0, r3
 8013764:	f1b9 0f00 	cmp.w	r9, #0
 8013768:	d00b      	beq.n	8013782 <arm_mat_mult_f32+0xfe>
 801376a:	464b      	mov	r3, r9
 801376c:	edd0 6a00 	vldr	s13, [r0]
 8013770:	3b01      	subs	r3, #1
 8013772:	ecb2 7a01 	vldmia	r2!, {s14}
 8013776:	4428      	add	r0, r5
 8013778:	ee27 7a26 	vmul.f32	s14, s14, s13
 801377c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013780:	d1f4      	bne.n	801376c <arm_mat_mult_f32+0xe8>
 8013782:	ecec 7a01 	vstmia	ip!, {s15}
 8013786:	45d4      	cmp	ip, sl
 8013788:	4670      	mov	r0, lr
 801378a:	f10e 0e04 	add.w	lr, lr, #4
 801378e:	d1b3      	bne.n	80136f8 <arm_mat_mult_f32+0x74>
 8013790:	9a01      	ldr	r2, [sp, #4]
 8013792:	44aa      	add	sl, r5
 8013794:	9b06      	ldr	r3, [sp, #24]
 8013796:	4611      	mov	r1, r2
 8013798:	449b      	add	fp, r3
 801379a:	4419      	add	r1, r3
 801379c:	9b04      	ldr	r3, [sp, #16]
 801379e:	3b01      	subs	r3, #1
 80137a0:	9101      	str	r1, [sp, #4]
 80137a2:	9304      	str	r3, [sp, #16]
 80137a4:	d006      	beq.n	80137b4 <arm_mat_mult_f32+0x130>
 80137a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137a8:	6858      	ldr	r0, [r3, #4]
 80137aa:	e79d      	b.n	80136e8 <arm_mat_mult_f32+0x64>
 80137ac:	9a05      	ldr	r2, [sp, #20]
 80137ae:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80137c8 <arm_mat_mult_f32+0x144>
 80137b2:	e7d7      	b.n	8013764 <arm_mat_mult_f32+0xe0>
 80137b4:	4618      	mov	r0, r3
 80137b6:	b00b      	add	sp, #44	@ 0x2c
 80137b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137bc:	f06f 0002 	mvn.w	r0, #2
 80137c0:	b00b      	add	sp, #44	@ 0x2c
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c6:	bf00      	nop
 80137c8:	00000000 	.word	0x00000000

080137cc <arm_mat_inverse_f32>:
 80137cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d0:	8843      	ldrh	r3, [r0, #2]
 80137d2:	b087      	sub	sp, #28
 80137d4:	8804      	ldrh	r4, [r0, #0]
 80137d6:	684d      	ldr	r5, [r1, #4]
 80137d8:	429c      	cmp	r4, r3
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80137e0:	9503      	str	r5, [sp, #12]
 80137e2:	f040 80e2 	bne.w	80139aa <arm_mat_inverse_f32+0x1de>
 80137e6:	880b      	ldrh	r3, [r1, #0]
 80137e8:	884a      	ldrh	r2, [r1, #2]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	f040 80dd 	bne.w	80139aa <arm_mat_inverse_f32+0x1de>
 80137f0:	429c      	cmp	r4, r3
 80137f2:	f040 80da 	bne.w	80139aa <arm_mat_inverse_f32+0x1de>
 80137f6:	9005      	str	r0, [sp, #20]
 80137f8:	b1fc      	cbz	r4, 801383a <arm_mat_inverse_f32+0x6e>
 80137fa:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 80137fe:	1e66      	subs	r6, r4, #1
 8013800:	f845 bb04 	str.w	fp, [r5], #4
 8013804:	d019      	beq.n	801383a <arm_mat_inverse_f32+0x6e>
 8013806:	2701      	movs	r7, #1
 8013808:	00b2      	lsls	r2, r6, #2
 801380a:	4628      	mov	r0, r5
 801380c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8013810:	2100      	movs	r1, #0
 8013812:	eb05 0a02 	add.w	sl, r5, r2
 8013816:	f001 fc2c 	bl	8015072 <memset>
 801381a:	4642      	mov	r2, r8
 801381c:	2100      	movs	r1, #0
 801381e:	eb0a 0508 	add.w	r5, sl, r8
 8013822:	4650      	mov	r0, sl
 8013824:	2f00      	cmp	r7, #0
 8013826:	f000 80c5 	beq.w	80139b4 <arm_mat_inverse_f32+0x1e8>
 801382a:	f001 fc22 	bl	8015072 <memset>
 801382e:	3e01      	subs	r6, #1
 8013830:	f107 0701 	add.w	r7, r7, #1
 8013834:	f845 bb04 	str.w	fp, [r5], #4
 8013838:	d1e6      	bne.n	8013808 <arm_mat_inverse_f32+0x3c>
 801383a:	9b01      	ldr	r3, [sp, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f000 80af 	beq.w	80139a0 <arm_mat_inverse_f32+0x1d4>
 8013842:	009d      	lsls	r5, r3, #2
 8013844:	46cc      	mov	ip, r9
 8013846:	469e      	mov	lr, r3
 8013848:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801384c:	eb0c 0305 	add.w	r3, ip, r5
 8013850:	462f      	mov	r7, r5
 8013852:	2600      	movs	r6, #0
 8013854:	9302      	str	r3, [sp, #8]
 8013856:	1d2b      	adds	r3, r5, #4
 8013858:	9304      	str	r3, [sp, #16]
 801385a:	9b02      	ldr	r3, [sp, #8]
 801385c:	42b4      	cmp	r4, r6
 801385e:	eddc 6a00 	vldr	s13, [ip]
 8013862:	eba3 0b07 	sub.w	fp, r3, r7
 8013866:	f000 809b 	beq.w	80139a0 <arm_mat_inverse_f32+0x1d4>
 801386a:	4632      	mov	r2, r6
 801386c:	4663      	mov	r3, ip
 801386e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80139c4 <arm_mat_inverse_f32+0x1f8>
 8013872:	e009      	b.n	8013888 <arm_mat_inverse_f32+0xbc>
 8013874:	eef4 7a47 	vcmp.f32	s15, s14
 8013878:	3201      	adds	r2, #1
 801387a:	442b      	add	r3, r5
 801387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013880:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8013884:	42a2      	cmp	r2, r4
 8013886:	d012      	beq.n	80138ae <arm_mat_inverse_f32+0xe2>
 8013888:	edd3 7a00 	vldr	s15, [r3]
 801388c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013890:	eeb1 6a67 	vneg.f32	s12, s15
 8013894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013898:	dcec      	bgt.n	8013874 <arm_mat_inverse_f32+0xa8>
 801389a:	eeb4 6a47 	vcmp.f32	s12, s14
 801389e:	3201      	adds	r2, #1
 80138a0:	442b      	add	r3, r5
 80138a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a6:	fe36 7a07 	vselgt.f32	s14, s12, s14
 80138aa:	42a2      	cmp	r2, r4
 80138ac:	d1ec      	bne.n	8013888 <arm_mat_inverse_f32+0xbc>
 80138ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80138b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b6:	d073      	beq.n	80139a0 <arm_mat_inverse_f32+0x1d4>
 80138b8:	eef5 6a40 	vcmp.f32	s13, #0.0
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	d06e      	beq.n	80139a0 <arm_mat_inverse_f32+0x1d4>
 80138c2:	4672      	mov	r2, lr
 80138c4:	4663      	mov	r3, ip
 80138c6:	ed93 7a00 	vldr	s14, [r3]
 80138ca:	3a01      	subs	r2, #1
 80138cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80138d0:	ece3 7a01 	vstmia	r3!, {s15}
 80138d4:	d1f7      	bne.n	80138c6 <arm_mat_inverse_f32+0xfa>
 80138d6:	9901      	ldr	r1, [sp, #4]
 80138d8:	464b      	mov	r3, r9
 80138da:	ed93 7a00 	vldr	s14, [r3]
 80138de:	3901      	subs	r1, #1
 80138e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80138e4:	ece3 7a01 	vstmia	r3!, {s15}
 80138e8:	d1f7      	bne.n	80138da <arm_mat_inverse_f32+0x10e>
 80138ea:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80138ee:	9803      	ldr	r0, [sp, #12]
 80138f0:	42b1      	cmp	r1, r6
 80138f2:	d038      	beq.n	8013966 <arm_mat_inverse_f32+0x19a>
 80138f4:	eddb 6a00 	vldr	s13, [fp]
 80138f8:	465a      	mov	r2, fp
 80138fa:	4673      	mov	r3, lr
 80138fc:	46e2      	mov	sl, ip
 80138fe:	ecba 7a01 	vldmia	sl!, {s14}
 8013902:	3b01      	subs	r3, #1
 8013904:	edd2 7a00 	vldr	s15, [r2]
 8013908:	ee26 7a87 	vmul.f32	s14, s13, s14
 801390c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013910:	ece2 7a01 	vstmia	r2!, {s15}
 8013914:	d1f3      	bne.n	80138fe <arm_mat_inverse_f32+0x132>
 8013916:	44bb      	add	fp, r7
 8013918:	4602      	mov	r2, r0
 801391a:	9b01      	ldr	r3, [sp, #4]
 801391c:	46ca      	mov	sl, r9
 801391e:	ecba 7a01 	vldmia	sl!, {s14}
 8013922:	3b01      	subs	r3, #1
 8013924:	edd2 7a00 	vldr	s15, [r2]
 8013928:	ee26 7a87 	vmul.f32	s14, s13, s14
 801392c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013930:	ece2 7a01 	vstmia	r2!, {s15}
 8013934:	d1f3      	bne.n	801391e <arm_mat_inverse_f32+0x152>
 8013936:	4428      	add	r0, r5
 8013938:	3101      	adds	r1, #1
 801393a:	44c3      	add	fp, r8
 801393c:	428c      	cmp	r4, r1
 801393e:	d1d7      	bne.n	80138f0 <arm_mat_inverse_f32+0x124>
 8013940:	9b04      	ldr	r3, [sp, #16]
 8013942:	f1be 0e01 	subs.w	lr, lr, #1
 8013946:	f106 0601 	add.w	r6, r6, #1
 801394a:	f1a7 0704 	sub.w	r7, r7, #4
 801394e:	449c      	add	ip, r3
 8013950:	44a9      	add	r9, r5
 8013952:	d182      	bne.n	801385a <arm_mat_inverse_f32+0x8e>
 8013954:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395c:	d006      	beq.n	801396c <arm_mat_inverse_f32+0x1a0>
 801395e:	2000      	movs	r0, #0
 8013960:	b007      	add	sp, #28
 8013962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013966:	44bb      	add	fp, r7
 8013968:	4428      	add	r0, r5
 801396a:	e7e5      	b.n	8013938 <arm_mat_inverse_f32+0x16c>
 801396c:	9b05      	ldr	r3, [sp, #20]
 801396e:	9a01      	ldr	r2, [sp, #4]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	fb02 f204 	mul.w	r2, r2, r4
 8013976:	edd3 7a00 	vldr	s15, [r3]
 801397a:	4614      	mov	r4, r2
 801397c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	d1eb      	bne.n	801395e <arm_mat_inverse_f32+0x192>
 8013986:	3304      	adds	r3, #4
 8013988:	e006      	b.n	8013998 <arm_mat_inverse_f32+0x1cc>
 801398a:	ecf3 7a01 	vldmia	r3!, {s15}
 801398e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013996:	d1e2      	bne.n	801395e <arm_mat_inverse_f32+0x192>
 8013998:	f10e 0e01 	add.w	lr, lr, #1
 801399c:	4574      	cmp	r4, lr
 801399e:	d1f4      	bne.n	801398a <arm_mat_inverse_f32+0x1be>
 80139a0:	f06f 0004 	mvn.w	r0, #4
 80139a4:	b007      	add	sp, #28
 80139a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139aa:	f06f 0002 	mvn.w	r0, #2
 80139ae:	b007      	add	sp, #28
 80139b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b4:	4655      	mov	r5, sl
 80139b6:	3e01      	subs	r6, #1
 80139b8:	f845 bb04 	str.w	fp, [r5], #4
 80139bc:	f47f af23 	bne.w	8013806 <arm_mat_inverse_f32+0x3a>
 80139c0:	e73b      	b.n	801383a <arm_mat_inverse_f32+0x6e>
 80139c2:	bf00      	nop
 80139c4:	00000000 	.word	0x00000000

080139c8 <arm_mat_init_f32>:
 80139c8:	8001      	strh	r1, [r0, #0]
 80139ca:	8042      	strh	r2, [r0, #2]
 80139cc:	6043      	str	r3, [r0, #4]
 80139ce:	4770      	bx	lr

080139d0 <sulp>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	4604      	mov	r4, r0
 80139d4:	460d      	mov	r5, r1
 80139d6:	4616      	mov	r6, r2
 80139d8:	ec45 4b10 	vmov	d0, r4, r5
 80139dc:	f003 fa1a 	bl	8016e14 <__ulp>
 80139e0:	b17e      	cbz	r6, 8013a02 <sulp+0x32>
 80139e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80139e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	dd09      	ble.n	8013a02 <sulp+0x32>
 80139ee:	051b      	lsls	r3, r3, #20
 80139f0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80139f4:	2000      	movs	r0, #0
 80139f6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80139fa:	ec41 0b17 	vmov	d7, r0, r1
 80139fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a02:	bd70      	pop	{r4, r5, r6, pc}
 8013a04:	0000      	movs	r0, r0
	...

08013a08 <_strtod_l>:
 8013a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a0c:	ed2d 8b0a 	vpush	{d8-d12}
 8013a10:	b097      	sub	sp, #92	@ 0x5c
 8013a12:	4688      	mov	r8, r1
 8013a14:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a16:	2200      	movs	r2, #0
 8013a18:	9212      	str	r2, [sp, #72]	@ 0x48
 8013a1a:	9005      	str	r0, [sp, #20]
 8013a1c:	f04f 0a00 	mov.w	sl, #0
 8013a20:	f04f 0b00 	mov.w	fp, #0
 8013a24:	460a      	mov	r2, r1
 8013a26:	9211      	str	r2, [sp, #68]	@ 0x44
 8013a28:	7811      	ldrb	r1, [r2, #0]
 8013a2a:	292b      	cmp	r1, #43	@ 0x2b
 8013a2c:	d04c      	beq.n	8013ac8 <_strtod_l+0xc0>
 8013a2e:	d839      	bhi.n	8013aa4 <_strtod_l+0x9c>
 8013a30:	290d      	cmp	r1, #13
 8013a32:	d833      	bhi.n	8013a9c <_strtod_l+0x94>
 8013a34:	2908      	cmp	r1, #8
 8013a36:	d833      	bhi.n	8013aa0 <_strtod_l+0x98>
 8013a38:	2900      	cmp	r1, #0
 8013a3a:	d03c      	beq.n	8013ab6 <_strtod_l+0xae>
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	9208      	str	r2, [sp, #32]
 8013a40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8013a42:	782a      	ldrb	r2, [r5, #0]
 8013a44:	2a30      	cmp	r2, #48	@ 0x30
 8013a46:	f040 80b7 	bne.w	8013bb8 <_strtod_l+0x1b0>
 8013a4a:	786a      	ldrb	r2, [r5, #1]
 8013a4c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013a50:	2a58      	cmp	r2, #88	@ 0x58
 8013a52:	d170      	bne.n	8013b36 <_strtod_l+0x12e>
 8013a54:	9302      	str	r3, [sp, #8]
 8013a56:	9b08      	ldr	r3, [sp, #32]
 8013a58:	9301      	str	r3, [sp, #4]
 8013a5a:	ab12      	add	r3, sp, #72	@ 0x48
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	4a90      	ldr	r2, [pc, #576]	@ (8013ca0 <_strtod_l+0x298>)
 8013a60:	9805      	ldr	r0, [sp, #20]
 8013a62:	ab13      	add	r3, sp, #76	@ 0x4c
 8013a64:	a911      	add	r1, sp, #68	@ 0x44
 8013a66:	f002 facf 	bl	8016008 <__gethex>
 8013a6a:	f010 060f 	ands.w	r6, r0, #15
 8013a6e:	4604      	mov	r4, r0
 8013a70:	d005      	beq.n	8013a7e <_strtod_l+0x76>
 8013a72:	2e06      	cmp	r6, #6
 8013a74:	d12a      	bne.n	8013acc <_strtod_l+0xc4>
 8013a76:	3501      	adds	r5, #1
 8013a78:	2300      	movs	r3, #0
 8013a7a:	9511      	str	r5, [sp, #68]	@ 0x44
 8013a7c:	9308      	str	r3, [sp, #32]
 8013a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f040 8537 	bne.w	80144f4 <_strtod_l+0xaec>
 8013a86:	9b08      	ldr	r3, [sp, #32]
 8013a88:	ec4b ab10 	vmov	d0, sl, fp
 8013a8c:	b1cb      	cbz	r3, 8013ac2 <_strtod_l+0xba>
 8013a8e:	eeb1 0b40 	vneg.f64	d0, d0
 8013a92:	b017      	add	sp, #92	@ 0x5c
 8013a94:	ecbd 8b0a 	vpop	{d8-d12}
 8013a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a9c:	2920      	cmp	r1, #32
 8013a9e:	d1cd      	bne.n	8013a3c <_strtod_l+0x34>
 8013aa0:	3201      	adds	r2, #1
 8013aa2:	e7c0      	b.n	8013a26 <_strtod_l+0x1e>
 8013aa4:	292d      	cmp	r1, #45	@ 0x2d
 8013aa6:	d1c9      	bne.n	8013a3c <_strtod_l+0x34>
 8013aa8:	2101      	movs	r1, #1
 8013aaa:	9108      	str	r1, [sp, #32]
 8013aac:	1c51      	adds	r1, r2, #1
 8013aae:	9111      	str	r1, [sp, #68]	@ 0x44
 8013ab0:	7852      	ldrb	r2, [r2, #1]
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	d1c4      	bne.n	8013a40 <_strtod_l+0x38>
 8013ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ab8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	f040 8517 	bne.w	80144f0 <_strtod_l+0xae8>
 8013ac2:	ec4b ab10 	vmov	d0, sl, fp
 8013ac6:	e7e4      	b.n	8013a92 <_strtod_l+0x8a>
 8013ac8:	2100      	movs	r1, #0
 8013aca:	e7ee      	b.n	8013aaa <_strtod_l+0xa2>
 8013acc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013ace:	b13a      	cbz	r2, 8013ae0 <_strtod_l+0xd8>
 8013ad0:	2135      	movs	r1, #53	@ 0x35
 8013ad2:	a814      	add	r0, sp, #80	@ 0x50
 8013ad4:	f003 fa95 	bl	8017002 <__copybits>
 8013ad8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013ada:	9805      	ldr	r0, [sp, #20]
 8013adc:	f002 fe6e 	bl	80167bc <_Bfree>
 8013ae0:	1e73      	subs	r3, r6, #1
 8013ae2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013ae4:	2b04      	cmp	r3, #4
 8013ae6:	d806      	bhi.n	8013af6 <_strtod_l+0xee>
 8013ae8:	e8df f003 	tbb	[pc, r3]
 8013aec:	201d0314 	.word	0x201d0314
 8013af0:	14          	.byte	0x14
 8013af1:	00          	.byte	0x00
 8013af2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8013af6:	05e3      	lsls	r3, r4, #23
 8013af8:	bf48      	it	mi
 8013afa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013afe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b02:	0d1b      	lsrs	r3, r3, #20
 8013b04:	051b      	lsls	r3, r3, #20
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d1b9      	bne.n	8013a7e <_strtod_l+0x76>
 8013b0a:	f001 fb97 	bl	801523c <__errno>
 8013b0e:	2322      	movs	r3, #34	@ 0x22
 8013b10:	6003      	str	r3, [r0, #0]
 8013b12:	e7b4      	b.n	8013a7e <_strtod_l+0x76>
 8013b14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8013b18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013b1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013b20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b24:	e7e7      	b.n	8013af6 <_strtod_l+0xee>
 8013b26:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013ca8 <_strtod_l+0x2a0>
 8013b2a:	e7e4      	b.n	8013af6 <_strtod_l+0xee>
 8013b2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013b30:	f04f 3aff 	mov.w	sl, #4294967295
 8013b34:	e7df      	b.n	8013af6 <_strtod_l+0xee>
 8013b36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b38:	1c5a      	adds	r2, r3, #1
 8013b3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8013b3c:	785b      	ldrb	r3, [r3, #1]
 8013b3e:	2b30      	cmp	r3, #48	@ 0x30
 8013b40:	d0f9      	beq.n	8013b36 <_strtod_l+0x12e>
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d09b      	beq.n	8013a7e <_strtod_l+0x76>
 8013b46:	2301      	movs	r3, #1
 8013b48:	9307      	str	r3, [sp, #28]
 8013b4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9306      	str	r3, [sp, #24]
 8013b52:	4699      	mov	r9, r3
 8013b54:	461d      	mov	r5, r3
 8013b56:	220a      	movs	r2, #10
 8013b58:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8013b5a:	7804      	ldrb	r4, [r0, #0]
 8013b5c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8013b60:	b2d9      	uxtb	r1, r3
 8013b62:	2909      	cmp	r1, #9
 8013b64:	d92a      	bls.n	8013bbc <_strtod_l+0x1b4>
 8013b66:	494f      	ldr	r1, [pc, #316]	@ (8013ca4 <_strtod_l+0x29c>)
 8013b68:	2201      	movs	r2, #1
 8013b6a:	f001 fa97 	bl	801509c <strncmp>
 8013b6e:	b398      	cbz	r0, 8013bd8 <_strtod_l+0x1d0>
 8013b70:	2000      	movs	r0, #0
 8013b72:	4622      	mov	r2, r4
 8013b74:	462b      	mov	r3, r5
 8013b76:	4607      	mov	r7, r0
 8013b78:	4601      	mov	r1, r0
 8013b7a:	2a65      	cmp	r2, #101	@ 0x65
 8013b7c:	d001      	beq.n	8013b82 <_strtod_l+0x17a>
 8013b7e:	2a45      	cmp	r2, #69	@ 0x45
 8013b80:	d118      	bne.n	8013bb4 <_strtod_l+0x1ac>
 8013b82:	b91b      	cbnz	r3, 8013b8c <_strtod_l+0x184>
 8013b84:	9b07      	ldr	r3, [sp, #28]
 8013b86:	4303      	orrs	r3, r0
 8013b88:	d095      	beq.n	8013ab6 <_strtod_l+0xae>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8013b90:	f108 0201 	add.w	r2, r8, #1
 8013b94:	9211      	str	r2, [sp, #68]	@ 0x44
 8013b96:	f898 2001 	ldrb.w	r2, [r8, #1]
 8013b9a:	2a2b      	cmp	r2, #43	@ 0x2b
 8013b9c:	d074      	beq.n	8013c88 <_strtod_l+0x280>
 8013b9e:	2a2d      	cmp	r2, #45	@ 0x2d
 8013ba0:	d07a      	beq.n	8013c98 <_strtod_l+0x290>
 8013ba2:	f04f 0e00 	mov.w	lr, #0
 8013ba6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8013baa:	2c09      	cmp	r4, #9
 8013bac:	f240 8082 	bls.w	8013cb4 <_strtod_l+0x2ac>
 8013bb0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8013bb4:	2400      	movs	r4, #0
 8013bb6:	e09d      	b.n	8013cf4 <_strtod_l+0x2ec>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	e7c5      	b.n	8013b48 <_strtod_l+0x140>
 8013bbc:	2d08      	cmp	r5, #8
 8013bbe:	bfc8      	it	gt
 8013bc0:	9906      	ldrgt	r1, [sp, #24]
 8013bc2:	f100 0001 	add.w	r0, r0, #1
 8013bc6:	bfca      	itet	gt
 8013bc8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013bcc:	fb02 3909 	mlale	r9, r2, r9, r3
 8013bd0:	9306      	strgt	r3, [sp, #24]
 8013bd2:	3501      	adds	r5, #1
 8013bd4:	9011      	str	r0, [sp, #68]	@ 0x44
 8013bd6:	e7bf      	b.n	8013b58 <_strtod_l+0x150>
 8013bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013bda:	1c5a      	adds	r2, r3, #1
 8013bdc:	9211      	str	r2, [sp, #68]	@ 0x44
 8013bde:	785a      	ldrb	r2, [r3, #1]
 8013be0:	b3bd      	cbz	r5, 8013c52 <_strtod_l+0x24a>
 8013be2:	4607      	mov	r7, r0
 8013be4:	462b      	mov	r3, r5
 8013be6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013bea:	2909      	cmp	r1, #9
 8013bec:	d912      	bls.n	8013c14 <_strtod_l+0x20c>
 8013bee:	2101      	movs	r1, #1
 8013bf0:	e7c3      	b.n	8013b7a <_strtod_l+0x172>
 8013bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013bf4:	1c5a      	adds	r2, r3, #1
 8013bf6:	9211      	str	r2, [sp, #68]	@ 0x44
 8013bf8:	785a      	ldrb	r2, [r3, #1]
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	2a30      	cmp	r2, #48	@ 0x30
 8013bfe:	d0f8      	beq.n	8013bf2 <_strtod_l+0x1ea>
 8013c00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013c04:	2b08      	cmp	r3, #8
 8013c06:	f200 847a 	bhi.w	80144fe <_strtod_l+0xaf6>
 8013c0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c0e:	4607      	mov	r7, r0
 8013c10:	2000      	movs	r0, #0
 8013c12:	4603      	mov	r3, r0
 8013c14:	3a30      	subs	r2, #48	@ 0x30
 8013c16:	f100 0101 	add.w	r1, r0, #1
 8013c1a:	d014      	beq.n	8013c46 <_strtod_l+0x23e>
 8013c1c:	440f      	add	r7, r1
 8013c1e:	469c      	mov	ip, r3
 8013c20:	f04f 0e0a 	mov.w	lr, #10
 8013c24:	f10c 0401 	add.w	r4, ip, #1
 8013c28:	1ae6      	subs	r6, r4, r3
 8013c2a:	42b1      	cmp	r1, r6
 8013c2c:	dc13      	bgt.n	8013c56 <_strtod_l+0x24e>
 8013c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013c32:	1819      	adds	r1, r3, r0
 8013c34:	2908      	cmp	r1, #8
 8013c36:	f103 0301 	add.w	r3, r3, #1
 8013c3a:	4403      	add	r3, r0
 8013c3c:	dc19      	bgt.n	8013c72 <_strtod_l+0x26a>
 8013c3e:	210a      	movs	r1, #10
 8013c40:	fb01 2909 	mla	r9, r1, r9, r2
 8013c44:	2100      	movs	r1, #0
 8013c46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013c48:	1c50      	adds	r0, r2, #1
 8013c4a:	9011      	str	r0, [sp, #68]	@ 0x44
 8013c4c:	7852      	ldrb	r2, [r2, #1]
 8013c4e:	4608      	mov	r0, r1
 8013c50:	e7c9      	b.n	8013be6 <_strtod_l+0x1de>
 8013c52:	4628      	mov	r0, r5
 8013c54:	e7d2      	b.n	8013bfc <_strtod_l+0x1f4>
 8013c56:	f1bc 0f08 	cmp.w	ip, #8
 8013c5a:	dc03      	bgt.n	8013c64 <_strtod_l+0x25c>
 8013c5c:	fb0e f909 	mul.w	r9, lr, r9
 8013c60:	46a4      	mov	ip, r4
 8013c62:	e7df      	b.n	8013c24 <_strtod_l+0x21c>
 8013c64:	2c10      	cmp	r4, #16
 8013c66:	bfde      	ittt	le
 8013c68:	9e06      	ldrle	r6, [sp, #24]
 8013c6a:	fb0e f606 	mulle.w	r6, lr, r6
 8013c6e:	9606      	strle	r6, [sp, #24]
 8013c70:	e7f6      	b.n	8013c60 <_strtod_l+0x258>
 8013c72:	290f      	cmp	r1, #15
 8013c74:	bfdf      	itttt	le
 8013c76:	9806      	ldrle	r0, [sp, #24]
 8013c78:	210a      	movle	r1, #10
 8013c7a:	fb01 2200 	mlale	r2, r1, r0, r2
 8013c7e:	9206      	strle	r2, [sp, #24]
 8013c80:	e7e0      	b.n	8013c44 <_strtod_l+0x23c>
 8013c82:	2700      	movs	r7, #0
 8013c84:	2101      	movs	r1, #1
 8013c86:	e77d      	b.n	8013b84 <_strtod_l+0x17c>
 8013c88:	f04f 0e00 	mov.w	lr, #0
 8013c8c:	f108 0202 	add.w	r2, r8, #2
 8013c90:	9211      	str	r2, [sp, #68]	@ 0x44
 8013c92:	f898 2002 	ldrb.w	r2, [r8, #2]
 8013c96:	e786      	b.n	8013ba6 <_strtod_l+0x19e>
 8013c98:	f04f 0e01 	mov.w	lr, #1
 8013c9c:	e7f6      	b.n	8013c8c <_strtod_l+0x284>
 8013c9e:	bf00      	nop
 8013ca0:	08018110 	.word	0x08018110
 8013ca4:	08017f28 	.word	0x08017f28
 8013ca8:	7ff00000 	.word	0x7ff00000
 8013cac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013cae:	1c54      	adds	r4, r2, #1
 8013cb0:	9411      	str	r4, [sp, #68]	@ 0x44
 8013cb2:	7852      	ldrb	r2, [r2, #1]
 8013cb4:	2a30      	cmp	r2, #48	@ 0x30
 8013cb6:	d0f9      	beq.n	8013cac <_strtod_l+0x2a4>
 8013cb8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8013cbc:	2c08      	cmp	r4, #8
 8013cbe:	f63f af79 	bhi.w	8013bb4 <_strtod_l+0x1ac>
 8013cc2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8013cc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013cca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013ccc:	1c54      	adds	r4, r2, #1
 8013cce:	9411      	str	r4, [sp, #68]	@ 0x44
 8013cd0:	7852      	ldrb	r2, [r2, #1]
 8013cd2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8013cd6:	2e09      	cmp	r6, #9
 8013cd8:	d937      	bls.n	8013d4a <_strtod_l+0x342>
 8013cda:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8013cdc:	1ba4      	subs	r4, r4, r6
 8013cde:	2c08      	cmp	r4, #8
 8013ce0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8013ce4:	dc02      	bgt.n	8013cec <_strtod_l+0x2e4>
 8013ce6:	4564      	cmp	r4, ip
 8013ce8:	bfa8      	it	ge
 8013cea:	4664      	movge	r4, ip
 8013cec:	f1be 0f00 	cmp.w	lr, #0
 8013cf0:	d000      	beq.n	8013cf4 <_strtod_l+0x2ec>
 8013cf2:	4264      	negs	r4, r4
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d14d      	bne.n	8013d94 <_strtod_l+0x38c>
 8013cf8:	9b07      	ldr	r3, [sp, #28]
 8013cfa:	4318      	orrs	r0, r3
 8013cfc:	f47f aebf 	bne.w	8013a7e <_strtod_l+0x76>
 8013d00:	2900      	cmp	r1, #0
 8013d02:	f47f aed8 	bne.w	8013ab6 <_strtod_l+0xae>
 8013d06:	2a69      	cmp	r2, #105	@ 0x69
 8013d08:	d027      	beq.n	8013d5a <_strtod_l+0x352>
 8013d0a:	dc24      	bgt.n	8013d56 <_strtod_l+0x34e>
 8013d0c:	2a49      	cmp	r2, #73	@ 0x49
 8013d0e:	d024      	beq.n	8013d5a <_strtod_l+0x352>
 8013d10:	2a4e      	cmp	r2, #78	@ 0x4e
 8013d12:	f47f aed0 	bne.w	8013ab6 <_strtod_l+0xae>
 8013d16:	4997      	ldr	r1, [pc, #604]	@ (8013f74 <_strtod_l+0x56c>)
 8013d18:	a811      	add	r0, sp, #68	@ 0x44
 8013d1a:	f002 fb97 	bl	801644c <__match>
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	f43f aec9 	beq.w	8013ab6 <_strtod_l+0xae>
 8013d24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2b28      	cmp	r3, #40	@ 0x28
 8013d2a:	d12d      	bne.n	8013d88 <_strtod_l+0x380>
 8013d2c:	4992      	ldr	r1, [pc, #584]	@ (8013f78 <_strtod_l+0x570>)
 8013d2e:	aa14      	add	r2, sp, #80	@ 0x50
 8013d30:	a811      	add	r0, sp, #68	@ 0x44
 8013d32:	f002 fb9f 	bl	8016474 <__hexnan>
 8013d36:	2805      	cmp	r0, #5
 8013d38:	d126      	bne.n	8013d88 <_strtod_l+0x380>
 8013d3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013d3c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013d40:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013d44:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013d48:	e699      	b.n	8013a7e <_strtod_l+0x76>
 8013d4a:	240a      	movs	r4, #10
 8013d4c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013d50:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013d54:	e7b9      	b.n	8013cca <_strtod_l+0x2c2>
 8013d56:	2a6e      	cmp	r2, #110	@ 0x6e
 8013d58:	e7db      	b.n	8013d12 <_strtod_l+0x30a>
 8013d5a:	4988      	ldr	r1, [pc, #544]	@ (8013f7c <_strtod_l+0x574>)
 8013d5c:	a811      	add	r0, sp, #68	@ 0x44
 8013d5e:	f002 fb75 	bl	801644c <__match>
 8013d62:	2800      	cmp	r0, #0
 8013d64:	f43f aea7 	beq.w	8013ab6 <_strtod_l+0xae>
 8013d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d6a:	4985      	ldr	r1, [pc, #532]	@ (8013f80 <_strtod_l+0x578>)
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	a811      	add	r0, sp, #68	@ 0x44
 8013d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8013d72:	f002 fb6b 	bl	801644c <__match>
 8013d76:	b910      	cbnz	r0, 8013d7e <_strtod_l+0x376>
 8013d78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	9311      	str	r3, [sp, #68]	@ 0x44
 8013d7e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013f94 <_strtod_l+0x58c>
 8013d82:	f04f 0a00 	mov.w	sl, #0
 8013d86:	e67a      	b.n	8013a7e <_strtod_l+0x76>
 8013d88:	487e      	ldr	r0, [pc, #504]	@ (8013f84 <_strtod_l+0x57c>)
 8013d8a:	f001 fa95 	bl	80152b8 <nan>
 8013d8e:	ec5b ab10 	vmov	sl, fp, d0
 8013d92:	e674      	b.n	8013a7e <_strtod_l+0x76>
 8013d94:	ee07 9a90 	vmov	s15, r9
 8013d98:	1be2      	subs	r2, r4, r7
 8013d9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013d9e:	2d00      	cmp	r5, #0
 8013da0:	bf08      	it	eq
 8013da2:	461d      	moveq	r5, r3
 8013da4:	2b10      	cmp	r3, #16
 8013da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013da8:	461a      	mov	r2, r3
 8013daa:	bfa8      	it	ge
 8013dac:	2210      	movge	r2, #16
 8013dae:	2b09      	cmp	r3, #9
 8013db0:	ec5b ab17 	vmov	sl, fp, d7
 8013db4:	dc15      	bgt.n	8013de2 <_strtod_l+0x3da>
 8013db6:	1be1      	subs	r1, r4, r7
 8013db8:	2900      	cmp	r1, #0
 8013dba:	f43f ae60 	beq.w	8013a7e <_strtod_l+0x76>
 8013dbe:	eba4 0107 	sub.w	r1, r4, r7
 8013dc2:	dd72      	ble.n	8013eaa <_strtod_l+0x4a2>
 8013dc4:	2916      	cmp	r1, #22
 8013dc6:	dc59      	bgt.n	8013e7c <_strtod_l+0x474>
 8013dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8013f88 <_strtod_l+0x580>)
 8013dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013dd0:	ed93 7b00 	vldr	d7, [r3]
 8013dd4:	ec4b ab16 	vmov	d6, sl, fp
 8013dd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ddc:	ec5b ab17 	vmov	sl, fp, d7
 8013de0:	e64d      	b.n	8013a7e <_strtod_l+0x76>
 8013de2:	4969      	ldr	r1, [pc, #420]	@ (8013f88 <_strtod_l+0x580>)
 8013de4:	eddd 6a06 	vldr	s13, [sp, #24]
 8013de8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013dec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8013df0:	2b0f      	cmp	r3, #15
 8013df2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013df6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013dfa:	ec5b ab16 	vmov	sl, fp, d6
 8013dfe:	ddda      	ble.n	8013db6 <_strtod_l+0x3ae>
 8013e00:	1a9a      	subs	r2, r3, r2
 8013e02:	1be1      	subs	r1, r4, r7
 8013e04:	440a      	add	r2, r1
 8013e06:	2a00      	cmp	r2, #0
 8013e08:	f340 8094 	ble.w	8013f34 <_strtod_l+0x52c>
 8013e0c:	f012 000f 	ands.w	r0, r2, #15
 8013e10:	d00a      	beq.n	8013e28 <_strtod_l+0x420>
 8013e12:	495d      	ldr	r1, [pc, #372]	@ (8013f88 <_strtod_l+0x580>)
 8013e14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013e18:	ed91 7b00 	vldr	d7, [r1]
 8013e1c:	ec4b ab16 	vmov	d6, sl, fp
 8013e20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e24:	ec5b ab17 	vmov	sl, fp, d7
 8013e28:	f032 020f 	bics.w	r2, r2, #15
 8013e2c:	d073      	beq.n	8013f16 <_strtod_l+0x50e>
 8013e2e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8013e32:	dd47      	ble.n	8013ec4 <_strtod_l+0x4bc>
 8013e34:	2400      	movs	r4, #0
 8013e36:	4625      	mov	r5, r4
 8013e38:	9407      	str	r4, [sp, #28]
 8013e3a:	4626      	mov	r6, r4
 8013e3c:	9a05      	ldr	r2, [sp, #20]
 8013e3e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013f94 <_strtod_l+0x58c>
 8013e42:	2322      	movs	r3, #34	@ 0x22
 8013e44:	6013      	str	r3, [r2, #0]
 8013e46:	f04f 0a00 	mov.w	sl, #0
 8013e4a:	9b07      	ldr	r3, [sp, #28]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f43f ae16 	beq.w	8013a7e <_strtod_l+0x76>
 8013e52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013e54:	9805      	ldr	r0, [sp, #20]
 8013e56:	f002 fcb1 	bl	80167bc <_Bfree>
 8013e5a:	9805      	ldr	r0, [sp, #20]
 8013e5c:	4631      	mov	r1, r6
 8013e5e:	f002 fcad 	bl	80167bc <_Bfree>
 8013e62:	9805      	ldr	r0, [sp, #20]
 8013e64:	4629      	mov	r1, r5
 8013e66:	f002 fca9 	bl	80167bc <_Bfree>
 8013e6a:	9907      	ldr	r1, [sp, #28]
 8013e6c:	9805      	ldr	r0, [sp, #20]
 8013e6e:	f002 fca5 	bl	80167bc <_Bfree>
 8013e72:	9805      	ldr	r0, [sp, #20]
 8013e74:	4621      	mov	r1, r4
 8013e76:	f002 fca1 	bl	80167bc <_Bfree>
 8013e7a:	e600      	b.n	8013a7e <_strtod_l+0x76>
 8013e7c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013e80:	1be0      	subs	r0, r4, r7
 8013e82:	4281      	cmp	r1, r0
 8013e84:	dbbc      	blt.n	8013e00 <_strtod_l+0x3f8>
 8013e86:	4a40      	ldr	r2, [pc, #256]	@ (8013f88 <_strtod_l+0x580>)
 8013e88:	f1c3 030f 	rsb	r3, r3, #15
 8013e8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013e90:	ed91 7b00 	vldr	d7, [r1]
 8013e94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013e96:	ec4b ab16 	vmov	d6, sl, fp
 8013e9a:	1acb      	subs	r3, r1, r3
 8013e9c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ea4:	ed92 6b00 	vldr	d6, [r2]
 8013ea8:	e796      	b.n	8013dd8 <_strtod_l+0x3d0>
 8013eaa:	3116      	adds	r1, #22
 8013eac:	dba8      	blt.n	8013e00 <_strtod_l+0x3f8>
 8013eae:	4b36      	ldr	r3, [pc, #216]	@ (8013f88 <_strtod_l+0x580>)
 8013eb0:	1b3c      	subs	r4, r7, r4
 8013eb2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013eb6:	ed94 7b00 	vldr	d7, [r4]
 8013eba:	ec4b ab16 	vmov	d6, sl, fp
 8013ebe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013ec2:	e78b      	b.n	8013ddc <_strtod_l+0x3d4>
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	ec4b ab17 	vmov	d7, sl, fp
 8013eca:	4e30      	ldr	r6, [pc, #192]	@ (8013f8c <_strtod_l+0x584>)
 8013ecc:	1112      	asrs	r2, r2, #4
 8013ece:	4601      	mov	r1, r0
 8013ed0:	2a01      	cmp	r2, #1
 8013ed2:	dc23      	bgt.n	8013f1c <_strtod_l+0x514>
 8013ed4:	b108      	cbz	r0, 8013eda <_strtod_l+0x4d2>
 8013ed6:	ec5b ab17 	vmov	sl, fp, d7
 8013eda:	4a2c      	ldr	r2, [pc, #176]	@ (8013f8c <_strtod_l+0x584>)
 8013edc:	482c      	ldr	r0, [pc, #176]	@ (8013f90 <_strtod_l+0x588>)
 8013ede:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013ee2:	ed92 7b00 	vldr	d7, [r2]
 8013ee6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013eea:	ec4b ab16 	vmov	d6, sl, fp
 8013eee:	4a29      	ldr	r2, [pc, #164]	@ (8013f94 <_strtod_l+0x58c>)
 8013ef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ef4:	ee17 1a90 	vmov	r1, s15
 8013ef8:	400a      	ands	r2, r1
 8013efa:	4282      	cmp	r2, r0
 8013efc:	ec5b ab17 	vmov	sl, fp, d7
 8013f00:	d898      	bhi.n	8013e34 <_strtod_l+0x42c>
 8013f02:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8013f06:	4282      	cmp	r2, r0
 8013f08:	bf86      	itte	hi
 8013f0a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013f98 <_strtod_l+0x590>
 8013f0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013f12:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8013f16:	2200      	movs	r2, #0
 8013f18:	9206      	str	r2, [sp, #24]
 8013f1a:	e076      	b.n	801400a <_strtod_l+0x602>
 8013f1c:	f012 0f01 	tst.w	r2, #1
 8013f20:	d004      	beq.n	8013f2c <_strtod_l+0x524>
 8013f22:	ed96 6b00 	vldr	d6, [r6]
 8013f26:	2001      	movs	r0, #1
 8013f28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f2c:	3101      	adds	r1, #1
 8013f2e:	1052      	asrs	r2, r2, #1
 8013f30:	3608      	adds	r6, #8
 8013f32:	e7cd      	b.n	8013ed0 <_strtod_l+0x4c8>
 8013f34:	d0ef      	beq.n	8013f16 <_strtod_l+0x50e>
 8013f36:	4252      	negs	r2, r2
 8013f38:	f012 000f 	ands.w	r0, r2, #15
 8013f3c:	d00a      	beq.n	8013f54 <_strtod_l+0x54c>
 8013f3e:	4912      	ldr	r1, [pc, #72]	@ (8013f88 <_strtod_l+0x580>)
 8013f40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013f44:	ed91 7b00 	vldr	d7, [r1]
 8013f48:	ec4b ab16 	vmov	d6, sl, fp
 8013f4c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013f50:	ec5b ab17 	vmov	sl, fp, d7
 8013f54:	1112      	asrs	r2, r2, #4
 8013f56:	d0de      	beq.n	8013f16 <_strtod_l+0x50e>
 8013f58:	2a1f      	cmp	r2, #31
 8013f5a:	dd1f      	ble.n	8013f9c <_strtod_l+0x594>
 8013f5c:	2400      	movs	r4, #0
 8013f5e:	4625      	mov	r5, r4
 8013f60:	9407      	str	r4, [sp, #28]
 8013f62:	4626      	mov	r6, r4
 8013f64:	9a05      	ldr	r2, [sp, #20]
 8013f66:	2322      	movs	r3, #34	@ 0x22
 8013f68:	f04f 0a00 	mov.w	sl, #0
 8013f6c:	f04f 0b00 	mov.w	fp, #0
 8013f70:	6013      	str	r3, [r2, #0]
 8013f72:	e76a      	b.n	8013e4a <_strtod_l+0x442>
 8013f74:	08017f37 	.word	0x08017f37
 8013f78:	080180fc 	.word	0x080180fc
 8013f7c:	08017f2f 	.word	0x08017f2f
 8013f80:	08017f69 	.word	0x08017f69
 8013f84:	080180f8 	.word	0x080180f8
 8013f88:	08018188 	.word	0x08018188
 8013f8c:	08018160 	.word	0x08018160
 8013f90:	7ca00000 	.word	0x7ca00000
 8013f94:	7ff00000 	.word	0x7ff00000
 8013f98:	7fefffff 	.word	0x7fefffff
 8013f9c:	f012 0110 	ands.w	r1, r2, #16
 8013fa0:	bf18      	it	ne
 8013fa2:	216a      	movne	r1, #106	@ 0x6a
 8013fa4:	9106      	str	r1, [sp, #24]
 8013fa6:	ec4b ab17 	vmov	d7, sl, fp
 8013faa:	49af      	ldr	r1, [pc, #700]	@ (8014268 <_strtod_l+0x860>)
 8013fac:	2000      	movs	r0, #0
 8013fae:	07d6      	lsls	r6, r2, #31
 8013fb0:	d504      	bpl.n	8013fbc <_strtod_l+0x5b4>
 8013fb2:	ed91 6b00 	vldr	d6, [r1]
 8013fb6:	2001      	movs	r0, #1
 8013fb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fbc:	1052      	asrs	r2, r2, #1
 8013fbe:	f101 0108 	add.w	r1, r1, #8
 8013fc2:	d1f4      	bne.n	8013fae <_strtod_l+0x5a6>
 8013fc4:	b108      	cbz	r0, 8013fca <_strtod_l+0x5c2>
 8013fc6:	ec5b ab17 	vmov	sl, fp, d7
 8013fca:	9a06      	ldr	r2, [sp, #24]
 8013fcc:	b1b2      	cbz	r2, 8013ffc <_strtod_l+0x5f4>
 8013fce:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013fd2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013fd6:	2a00      	cmp	r2, #0
 8013fd8:	4658      	mov	r0, fp
 8013fda:	dd0f      	ble.n	8013ffc <_strtod_l+0x5f4>
 8013fdc:	2a1f      	cmp	r2, #31
 8013fde:	dd55      	ble.n	801408c <_strtod_l+0x684>
 8013fe0:	2a34      	cmp	r2, #52	@ 0x34
 8013fe2:	bfde      	ittt	le
 8013fe4:	f04f 32ff 	movle.w	r2, #4294967295
 8013fe8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8013fec:	408a      	lslle	r2, r1
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	bfcc      	ite	gt
 8013ff4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013ff8:	ea02 0b00 	andle.w	fp, r2, r0
 8013ffc:	ec4b ab17 	vmov	d7, sl, fp
 8014000:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014008:	d0a8      	beq.n	8013f5c <_strtod_l+0x554>
 801400a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801400c:	9805      	ldr	r0, [sp, #20]
 801400e:	f8cd 9000 	str.w	r9, [sp]
 8014012:	462a      	mov	r2, r5
 8014014:	f002 fc3a 	bl	801688c <__s2b>
 8014018:	9007      	str	r0, [sp, #28]
 801401a:	2800      	cmp	r0, #0
 801401c:	f43f af0a 	beq.w	8013e34 <_strtod_l+0x42c>
 8014020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014022:	1b3f      	subs	r7, r7, r4
 8014024:	2b00      	cmp	r3, #0
 8014026:	bfb4      	ite	lt
 8014028:	463b      	movlt	r3, r7
 801402a:	2300      	movge	r3, #0
 801402c:	930a      	str	r3, [sp, #40]	@ 0x28
 801402e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014030:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8014258 <_strtod_l+0x850>
 8014034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014038:	2400      	movs	r4, #0
 801403a:	930d      	str	r3, [sp, #52]	@ 0x34
 801403c:	4625      	mov	r5, r4
 801403e:	9b07      	ldr	r3, [sp, #28]
 8014040:	9805      	ldr	r0, [sp, #20]
 8014042:	6859      	ldr	r1, [r3, #4]
 8014044:	f002 fb7a 	bl	801673c <_Balloc>
 8014048:	4606      	mov	r6, r0
 801404a:	2800      	cmp	r0, #0
 801404c:	f43f aef6 	beq.w	8013e3c <_strtod_l+0x434>
 8014050:	9b07      	ldr	r3, [sp, #28]
 8014052:	691a      	ldr	r2, [r3, #16]
 8014054:	ec4b ab19 	vmov	d9, sl, fp
 8014058:	3202      	adds	r2, #2
 801405a:	f103 010c 	add.w	r1, r3, #12
 801405e:	0092      	lsls	r2, r2, #2
 8014060:	300c      	adds	r0, #12
 8014062:	f001 f918 	bl	8015296 <memcpy>
 8014066:	eeb0 0b49 	vmov.f64	d0, d9
 801406a:	9805      	ldr	r0, [sp, #20]
 801406c:	aa14      	add	r2, sp, #80	@ 0x50
 801406e:	a913      	add	r1, sp, #76	@ 0x4c
 8014070:	f002 ff40 	bl	8016ef4 <__d2b>
 8014074:	9012      	str	r0, [sp, #72]	@ 0x48
 8014076:	2800      	cmp	r0, #0
 8014078:	f43f aee0 	beq.w	8013e3c <_strtod_l+0x434>
 801407c:	9805      	ldr	r0, [sp, #20]
 801407e:	2101      	movs	r1, #1
 8014080:	f002 fc9a 	bl	80169b8 <__i2b>
 8014084:	4605      	mov	r5, r0
 8014086:	b940      	cbnz	r0, 801409a <_strtod_l+0x692>
 8014088:	2500      	movs	r5, #0
 801408a:	e6d7      	b.n	8013e3c <_strtod_l+0x434>
 801408c:	f04f 31ff 	mov.w	r1, #4294967295
 8014090:	fa01 f202 	lsl.w	r2, r1, r2
 8014094:	ea02 0a0a 	and.w	sl, r2, sl
 8014098:	e7b0      	b.n	8013ffc <_strtod_l+0x5f4>
 801409a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801409c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801409e:	2f00      	cmp	r7, #0
 80140a0:	bfab      	itete	ge
 80140a2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80140a4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80140a6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80140aa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80140ae:	bfac      	ite	ge
 80140b0:	eb07 0903 	addge.w	r9, r7, r3
 80140b4:	eba3 0807 	sublt.w	r8, r3, r7
 80140b8:	9b06      	ldr	r3, [sp, #24]
 80140ba:	1aff      	subs	r7, r7, r3
 80140bc:	4417      	add	r7, r2
 80140be:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80140c2:	4a6a      	ldr	r2, [pc, #424]	@ (801426c <_strtod_l+0x864>)
 80140c4:	3f01      	subs	r7, #1
 80140c6:	4297      	cmp	r7, r2
 80140c8:	da51      	bge.n	801416e <_strtod_l+0x766>
 80140ca:	1bd1      	subs	r1, r2, r7
 80140cc:	291f      	cmp	r1, #31
 80140ce:	eba3 0301 	sub.w	r3, r3, r1
 80140d2:	f04f 0201 	mov.w	r2, #1
 80140d6:	dc3e      	bgt.n	8014156 <_strtod_l+0x74e>
 80140d8:	408a      	lsls	r2, r1
 80140da:	920c      	str	r2, [sp, #48]	@ 0x30
 80140dc:	2200      	movs	r2, #0
 80140de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80140e0:	eb09 0703 	add.w	r7, r9, r3
 80140e4:	4498      	add	r8, r3
 80140e6:	9b06      	ldr	r3, [sp, #24]
 80140e8:	45b9      	cmp	r9, r7
 80140ea:	4498      	add	r8, r3
 80140ec:	464b      	mov	r3, r9
 80140ee:	bfa8      	it	ge
 80140f0:	463b      	movge	r3, r7
 80140f2:	4543      	cmp	r3, r8
 80140f4:	bfa8      	it	ge
 80140f6:	4643      	movge	r3, r8
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	bfc2      	ittt	gt
 80140fc:	1aff      	subgt	r7, r7, r3
 80140fe:	eba8 0803 	subgt.w	r8, r8, r3
 8014102:	eba9 0903 	subgt.w	r9, r9, r3
 8014106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014108:	2b00      	cmp	r3, #0
 801410a:	dd16      	ble.n	801413a <_strtod_l+0x732>
 801410c:	4629      	mov	r1, r5
 801410e:	9805      	ldr	r0, [sp, #20]
 8014110:	461a      	mov	r2, r3
 8014112:	f002 fd09 	bl	8016b28 <__pow5mult>
 8014116:	4605      	mov	r5, r0
 8014118:	2800      	cmp	r0, #0
 801411a:	d0b5      	beq.n	8014088 <_strtod_l+0x680>
 801411c:	4601      	mov	r1, r0
 801411e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014120:	9805      	ldr	r0, [sp, #20]
 8014122:	f002 fc5f 	bl	80169e4 <__multiply>
 8014126:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014128:	2800      	cmp	r0, #0
 801412a:	f43f ae87 	beq.w	8013e3c <_strtod_l+0x434>
 801412e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014130:	9805      	ldr	r0, [sp, #20]
 8014132:	f002 fb43 	bl	80167bc <_Bfree>
 8014136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014138:	9312      	str	r3, [sp, #72]	@ 0x48
 801413a:	2f00      	cmp	r7, #0
 801413c:	dc1b      	bgt.n	8014176 <_strtod_l+0x76e>
 801413e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014140:	2b00      	cmp	r3, #0
 8014142:	dd21      	ble.n	8014188 <_strtod_l+0x780>
 8014144:	4631      	mov	r1, r6
 8014146:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014148:	9805      	ldr	r0, [sp, #20]
 801414a:	f002 fced 	bl	8016b28 <__pow5mult>
 801414e:	4606      	mov	r6, r0
 8014150:	b9d0      	cbnz	r0, 8014188 <_strtod_l+0x780>
 8014152:	2600      	movs	r6, #0
 8014154:	e672      	b.n	8013e3c <_strtod_l+0x434>
 8014156:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801415a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801415e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8014162:	37e2      	adds	r7, #226	@ 0xe2
 8014164:	fa02 f107 	lsl.w	r1, r2, r7
 8014168:	910b      	str	r1, [sp, #44]	@ 0x2c
 801416a:	920c      	str	r2, [sp, #48]	@ 0x30
 801416c:	e7b8      	b.n	80140e0 <_strtod_l+0x6d8>
 801416e:	2200      	movs	r2, #0
 8014170:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014172:	2201      	movs	r2, #1
 8014174:	e7f9      	b.n	801416a <_strtod_l+0x762>
 8014176:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014178:	9805      	ldr	r0, [sp, #20]
 801417a:	463a      	mov	r2, r7
 801417c:	f002 fd2e 	bl	8016bdc <__lshift>
 8014180:	9012      	str	r0, [sp, #72]	@ 0x48
 8014182:	2800      	cmp	r0, #0
 8014184:	d1db      	bne.n	801413e <_strtod_l+0x736>
 8014186:	e659      	b.n	8013e3c <_strtod_l+0x434>
 8014188:	f1b8 0f00 	cmp.w	r8, #0
 801418c:	dd07      	ble.n	801419e <_strtod_l+0x796>
 801418e:	4631      	mov	r1, r6
 8014190:	9805      	ldr	r0, [sp, #20]
 8014192:	4642      	mov	r2, r8
 8014194:	f002 fd22 	bl	8016bdc <__lshift>
 8014198:	4606      	mov	r6, r0
 801419a:	2800      	cmp	r0, #0
 801419c:	d0d9      	beq.n	8014152 <_strtod_l+0x74a>
 801419e:	f1b9 0f00 	cmp.w	r9, #0
 80141a2:	dd08      	ble.n	80141b6 <_strtod_l+0x7ae>
 80141a4:	4629      	mov	r1, r5
 80141a6:	9805      	ldr	r0, [sp, #20]
 80141a8:	464a      	mov	r2, r9
 80141aa:	f002 fd17 	bl	8016bdc <__lshift>
 80141ae:	4605      	mov	r5, r0
 80141b0:	2800      	cmp	r0, #0
 80141b2:	f43f ae43 	beq.w	8013e3c <_strtod_l+0x434>
 80141b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80141b8:	9805      	ldr	r0, [sp, #20]
 80141ba:	4632      	mov	r2, r6
 80141bc:	f002 fd96 	bl	8016cec <__mdiff>
 80141c0:	4604      	mov	r4, r0
 80141c2:	2800      	cmp	r0, #0
 80141c4:	f43f ae3a 	beq.w	8013e3c <_strtod_l+0x434>
 80141c8:	2300      	movs	r3, #0
 80141ca:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80141ce:	60c3      	str	r3, [r0, #12]
 80141d0:	4629      	mov	r1, r5
 80141d2:	f002 fd6f 	bl	8016cb4 <__mcmp>
 80141d6:	2800      	cmp	r0, #0
 80141d8:	da4c      	bge.n	8014274 <_strtod_l+0x86c>
 80141da:	ea58 080a 	orrs.w	r8, r8, sl
 80141de:	d172      	bne.n	80142c6 <_strtod_l+0x8be>
 80141e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d16e      	bne.n	80142c6 <_strtod_l+0x8be>
 80141e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80141ec:	0d1b      	lsrs	r3, r3, #20
 80141ee:	051b      	lsls	r3, r3, #20
 80141f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80141f4:	d967      	bls.n	80142c6 <_strtod_l+0x8be>
 80141f6:	6963      	ldr	r3, [r4, #20]
 80141f8:	b913      	cbnz	r3, 8014200 <_strtod_l+0x7f8>
 80141fa:	6923      	ldr	r3, [r4, #16]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	dd62      	ble.n	80142c6 <_strtod_l+0x8be>
 8014200:	4621      	mov	r1, r4
 8014202:	2201      	movs	r2, #1
 8014204:	9805      	ldr	r0, [sp, #20]
 8014206:	f002 fce9 	bl	8016bdc <__lshift>
 801420a:	4629      	mov	r1, r5
 801420c:	4604      	mov	r4, r0
 801420e:	f002 fd51 	bl	8016cb4 <__mcmp>
 8014212:	2800      	cmp	r0, #0
 8014214:	dd57      	ble.n	80142c6 <_strtod_l+0x8be>
 8014216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801421a:	9a06      	ldr	r2, [sp, #24]
 801421c:	0d1b      	lsrs	r3, r3, #20
 801421e:	051b      	lsls	r3, r3, #20
 8014220:	2a00      	cmp	r2, #0
 8014222:	d06e      	beq.n	8014302 <_strtod_l+0x8fa>
 8014224:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014228:	d86b      	bhi.n	8014302 <_strtod_l+0x8fa>
 801422a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801422e:	f67f ae99 	bls.w	8013f64 <_strtod_l+0x55c>
 8014232:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8014260 <_strtod_l+0x858>
 8014236:	ec4b ab16 	vmov	d6, sl, fp
 801423a:	4b0d      	ldr	r3, [pc, #52]	@ (8014270 <_strtod_l+0x868>)
 801423c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014240:	ee17 2a90 	vmov	r2, s15
 8014244:	4013      	ands	r3, r2
 8014246:	ec5b ab17 	vmov	sl, fp, d7
 801424a:	2b00      	cmp	r3, #0
 801424c:	f47f ae01 	bne.w	8013e52 <_strtod_l+0x44a>
 8014250:	9a05      	ldr	r2, [sp, #20]
 8014252:	2322      	movs	r3, #34	@ 0x22
 8014254:	6013      	str	r3, [r2, #0]
 8014256:	e5fc      	b.n	8013e52 <_strtod_l+0x44a>
 8014258:	ffc00000 	.word	0xffc00000
 801425c:	41dfffff 	.word	0x41dfffff
 8014260:	00000000 	.word	0x00000000
 8014264:	39500000 	.word	0x39500000
 8014268:	08018128 	.word	0x08018128
 801426c:	fffffc02 	.word	0xfffffc02
 8014270:	7ff00000 	.word	0x7ff00000
 8014274:	46d9      	mov	r9, fp
 8014276:	d15d      	bne.n	8014334 <_strtod_l+0x92c>
 8014278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801427c:	f1b8 0f00 	cmp.w	r8, #0
 8014280:	d02a      	beq.n	80142d8 <_strtod_l+0x8d0>
 8014282:	4aa9      	ldr	r2, [pc, #676]	@ (8014528 <_strtod_l+0xb20>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d12a      	bne.n	80142de <_strtod_l+0x8d6>
 8014288:	9b06      	ldr	r3, [sp, #24]
 801428a:	4652      	mov	r2, sl
 801428c:	b1fb      	cbz	r3, 80142ce <_strtod_l+0x8c6>
 801428e:	4ba7      	ldr	r3, [pc, #668]	@ (801452c <_strtod_l+0xb24>)
 8014290:	ea0b 0303 	and.w	r3, fp, r3
 8014294:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014298:	f04f 31ff 	mov.w	r1, #4294967295
 801429c:	d81a      	bhi.n	80142d4 <_strtod_l+0x8cc>
 801429e:	0d1b      	lsrs	r3, r3, #20
 80142a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80142a4:	fa01 f303 	lsl.w	r3, r1, r3
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d118      	bne.n	80142de <_strtod_l+0x8d6>
 80142ac:	4ba0      	ldr	r3, [pc, #640]	@ (8014530 <_strtod_l+0xb28>)
 80142ae:	4599      	cmp	r9, r3
 80142b0:	d102      	bne.n	80142b8 <_strtod_l+0x8b0>
 80142b2:	3201      	adds	r2, #1
 80142b4:	f43f adc2 	beq.w	8013e3c <_strtod_l+0x434>
 80142b8:	4b9c      	ldr	r3, [pc, #624]	@ (801452c <_strtod_l+0xb24>)
 80142ba:	ea09 0303 	and.w	r3, r9, r3
 80142be:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80142c2:	f04f 0a00 	mov.w	sl, #0
 80142c6:	9b06      	ldr	r3, [sp, #24]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1b2      	bne.n	8014232 <_strtod_l+0x82a>
 80142cc:	e5c1      	b.n	8013e52 <_strtod_l+0x44a>
 80142ce:	f04f 33ff 	mov.w	r3, #4294967295
 80142d2:	e7e9      	b.n	80142a8 <_strtod_l+0x8a0>
 80142d4:	460b      	mov	r3, r1
 80142d6:	e7e7      	b.n	80142a8 <_strtod_l+0x8a0>
 80142d8:	ea53 030a 	orrs.w	r3, r3, sl
 80142dc:	d09b      	beq.n	8014216 <_strtod_l+0x80e>
 80142de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142e0:	b1c3      	cbz	r3, 8014314 <_strtod_l+0x90c>
 80142e2:	ea13 0f09 	tst.w	r3, r9
 80142e6:	d0ee      	beq.n	80142c6 <_strtod_l+0x8be>
 80142e8:	9a06      	ldr	r2, [sp, #24]
 80142ea:	4650      	mov	r0, sl
 80142ec:	4659      	mov	r1, fp
 80142ee:	f1b8 0f00 	cmp.w	r8, #0
 80142f2:	d013      	beq.n	801431c <_strtod_l+0x914>
 80142f4:	f7ff fb6c 	bl	80139d0 <sulp>
 80142f8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80142fc:	ec5b ab17 	vmov	sl, fp, d7
 8014300:	e7e1      	b.n	80142c6 <_strtod_l+0x8be>
 8014302:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014306:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801430a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801430e:	f04f 3aff 	mov.w	sl, #4294967295
 8014312:	e7d8      	b.n	80142c6 <_strtod_l+0x8be>
 8014314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014316:	ea13 0f0a 	tst.w	r3, sl
 801431a:	e7e4      	b.n	80142e6 <_strtod_l+0x8de>
 801431c:	f7ff fb58 	bl	80139d0 <sulp>
 8014320:	ee39 0b40 	vsub.f64	d0, d9, d0
 8014324:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432c:	ec5b ab10 	vmov	sl, fp, d0
 8014330:	d1c9      	bne.n	80142c6 <_strtod_l+0x8be>
 8014332:	e617      	b.n	8013f64 <_strtod_l+0x55c>
 8014334:	4629      	mov	r1, r5
 8014336:	4620      	mov	r0, r4
 8014338:	f002 fe34 	bl	8016fa4 <__ratio>
 801433c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8014340:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014348:	d85d      	bhi.n	8014406 <_strtod_l+0x9fe>
 801434a:	f1b8 0f00 	cmp.w	r8, #0
 801434e:	d164      	bne.n	801441a <_strtod_l+0xa12>
 8014350:	f1ba 0f00 	cmp.w	sl, #0
 8014354:	d14b      	bne.n	80143ee <_strtod_l+0x9e6>
 8014356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801435a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d160      	bne.n	8014424 <_strtod_l+0xa1c>
 8014362:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8014366:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436e:	d401      	bmi.n	8014374 <_strtod_l+0x96c>
 8014370:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014374:	eeb1 ab48 	vneg.f64	d10, d8
 8014378:	486c      	ldr	r0, [pc, #432]	@ (801452c <_strtod_l+0xb24>)
 801437a:	496e      	ldr	r1, [pc, #440]	@ (8014534 <_strtod_l+0xb2c>)
 801437c:	ea09 0700 	and.w	r7, r9, r0
 8014380:	428f      	cmp	r7, r1
 8014382:	ec53 2b1a 	vmov	r2, r3, d10
 8014386:	d17d      	bne.n	8014484 <_strtod_l+0xa7c>
 8014388:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801438c:	ec4b ab1c 	vmov	d12, sl, fp
 8014390:	eeb0 0b4c 	vmov.f64	d0, d12
 8014394:	f002 fd3e 	bl	8016e14 <__ulp>
 8014398:	4864      	ldr	r0, [pc, #400]	@ (801452c <_strtod_l+0xb24>)
 801439a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801439e:	ee1c 3a90 	vmov	r3, s25
 80143a2:	4a65      	ldr	r2, [pc, #404]	@ (8014538 <_strtod_l+0xb30>)
 80143a4:	ea03 0100 	and.w	r1, r3, r0
 80143a8:	4291      	cmp	r1, r2
 80143aa:	ec5b ab1c 	vmov	sl, fp, d12
 80143ae:	d93c      	bls.n	801442a <_strtod_l+0xa22>
 80143b0:	ee19 2a90 	vmov	r2, s19
 80143b4:	4b5e      	ldr	r3, [pc, #376]	@ (8014530 <_strtod_l+0xb28>)
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d104      	bne.n	80143c4 <_strtod_l+0x9bc>
 80143ba:	ee19 3a10 	vmov	r3, s18
 80143be:	3301      	adds	r3, #1
 80143c0:	f43f ad3c 	beq.w	8013e3c <_strtod_l+0x434>
 80143c4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8014530 <_strtod_l+0xb28>
 80143c8:	f04f 3aff 	mov.w	sl, #4294967295
 80143cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80143ce:	9805      	ldr	r0, [sp, #20]
 80143d0:	f002 f9f4 	bl	80167bc <_Bfree>
 80143d4:	9805      	ldr	r0, [sp, #20]
 80143d6:	4631      	mov	r1, r6
 80143d8:	f002 f9f0 	bl	80167bc <_Bfree>
 80143dc:	9805      	ldr	r0, [sp, #20]
 80143de:	4629      	mov	r1, r5
 80143e0:	f002 f9ec 	bl	80167bc <_Bfree>
 80143e4:	9805      	ldr	r0, [sp, #20]
 80143e6:	4621      	mov	r1, r4
 80143e8:	f002 f9e8 	bl	80167bc <_Bfree>
 80143ec:	e627      	b.n	801403e <_strtod_l+0x636>
 80143ee:	f1ba 0f01 	cmp.w	sl, #1
 80143f2:	d103      	bne.n	80143fc <_strtod_l+0x9f4>
 80143f4:	f1bb 0f00 	cmp.w	fp, #0
 80143f8:	f43f adb4 	beq.w	8013f64 <_strtod_l+0x55c>
 80143fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014400:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8014404:	e7b8      	b.n	8014378 <_strtod_l+0x970>
 8014406:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801440a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801440e:	f1b8 0f00 	cmp.w	r8, #0
 8014412:	d0af      	beq.n	8014374 <_strtod_l+0x96c>
 8014414:	eeb0 ab48 	vmov.f64	d10, d8
 8014418:	e7ae      	b.n	8014378 <_strtod_l+0x970>
 801441a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801441e:	eeb0 8b4a 	vmov.f64	d8, d10
 8014422:	e7a9      	b.n	8014378 <_strtod_l+0x970>
 8014424:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8014428:	e7a6      	b.n	8014378 <_strtod_l+0x970>
 801442a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801442e:	9b06      	ldr	r3, [sp, #24]
 8014430:	46d9      	mov	r9, fp
 8014432:	2b00      	cmp	r3, #0
 8014434:	d1ca      	bne.n	80143cc <_strtod_l+0x9c4>
 8014436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801443a:	0d1b      	lsrs	r3, r3, #20
 801443c:	051b      	lsls	r3, r3, #20
 801443e:	429f      	cmp	r7, r3
 8014440:	d1c4      	bne.n	80143cc <_strtod_l+0x9c4>
 8014442:	ec51 0b18 	vmov	r0, r1, d8
 8014446:	f7ec fa85 	bl	8000954 <__aeabi_d2lz>
 801444a:	f7ec f92f 	bl	80006ac <__aeabi_l2d>
 801444e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8014452:	ec41 0b17 	vmov	d7, r0, r1
 8014456:	ea49 090a 	orr.w	r9, r9, sl
 801445a:	ea59 0908 	orrs.w	r9, r9, r8
 801445e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014462:	d03c      	beq.n	80144de <_strtod_l+0xad6>
 8014464:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014510 <_strtod_l+0xb08>
 8014468:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014470:	f53f acef 	bmi.w	8013e52 <_strtod_l+0x44a>
 8014474:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8014518 <_strtod_l+0xb10>
 8014478:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014480:	dda4      	ble.n	80143cc <_strtod_l+0x9c4>
 8014482:	e4e6      	b.n	8013e52 <_strtod_l+0x44a>
 8014484:	9906      	ldr	r1, [sp, #24]
 8014486:	b1e1      	cbz	r1, 80144c2 <_strtod_l+0xaba>
 8014488:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801448c:	d819      	bhi.n	80144c2 <_strtod_l+0xaba>
 801448e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014496:	d811      	bhi.n	80144bc <_strtod_l+0xab4>
 8014498:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801449c:	ee18 3a10 	vmov	r3, s16
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	bf38      	it	cc
 80144a4:	2301      	movcc	r3, #1
 80144a6:	ee08 3a10 	vmov	s16, r3
 80144aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80144ae:	f1b8 0f00 	cmp.w	r8, #0
 80144b2:	d111      	bne.n	80144d8 <_strtod_l+0xad0>
 80144b4:	eeb1 7b48 	vneg.f64	d7, d8
 80144b8:	ec53 2b17 	vmov	r2, r3, d7
 80144bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80144c0:	1bcb      	subs	r3, r1, r7
 80144c2:	eeb0 0b49 	vmov.f64	d0, d9
 80144c6:	ec43 2b1a 	vmov	d10, r2, r3
 80144ca:	f002 fca3 	bl	8016e14 <__ulp>
 80144ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80144d2:	ec5b ab19 	vmov	sl, fp, d9
 80144d6:	e7aa      	b.n	801442e <_strtod_l+0xa26>
 80144d8:	eeb0 7b48 	vmov.f64	d7, d8
 80144dc:	e7ec      	b.n	80144b8 <_strtod_l+0xab0>
 80144de:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014520 <_strtod_l+0xb18>
 80144e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80144e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ea:	f57f af6f 	bpl.w	80143cc <_strtod_l+0x9c4>
 80144ee:	e4b0      	b.n	8013e52 <_strtod_l+0x44a>
 80144f0:	2300      	movs	r3, #0
 80144f2:	9308      	str	r3, [sp, #32]
 80144f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	f7ff bac4 	b.w	8013a86 <_strtod_l+0x7e>
 80144fe:	2a65      	cmp	r2, #101	@ 0x65
 8014500:	f43f abbf 	beq.w	8013c82 <_strtod_l+0x27a>
 8014504:	2a45      	cmp	r2, #69	@ 0x45
 8014506:	f43f abbc 	beq.w	8013c82 <_strtod_l+0x27a>
 801450a:	2101      	movs	r1, #1
 801450c:	f7ff bbf4 	b.w	8013cf8 <_strtod_l+0x2f0>
 8014510:	94a03595 	.word	0x94a03595
 8014514:	3fdfffff 	.word	0x3fdfffff
 8014518:	35afe535 	.word	0x35afe535
 801451c:	3fe00000 	.word	0x3fe00000
 8014520:	94a03595 	.word	0x94a03595
 8014524:	3fcfffff 	.word	0x3fcfffff
 8014528:	000fffff 	.word	0x000fffff
 801452c:	7ff00000 	.word	0x7ff00000
 8014530:	7fefffff 	.word	0x7fefffff
 8014534:	7fe00000 	.word	0x7fe00000
 8014538:	7c9fffff 	.word	0x7c9fffff
 801453c:	00000000 	.word	0x00000000

08014540 <strtof>:
 8014540:	b510      	push	{r4, lr}
 8014542:	4c21      	ldr	r4, [pc, #132]	@ (80145c8 <strtof+0x88>)
 8014544:	4b21      	ldr	r3, [pc, #132]	@ (80145cc <strtof+0x8c>)
 8014546:	460a      	mov	r2, r1
 8014548:	4601      	mov	r1, r0
 801454a:	6820      	ldr	r0, [r4, #0]
 801454c:	f7ff fa5c 	bl	8013a08 <_strtod_l>
 8014550:	eeb4 0b40 	vcmp.f64	d0, d0
 8014554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014558:	eeb0 7b40 	vmov.f64	d7, d0
 801455c:	d70d      	bvc.n	801457a <strtof+0x3a>
 801455e:	ee17 3a90 	vmov	r3, s15
 8014562:	2b00      	cmp	r3, #0
 8014564:	481a      	ldr	r0, [pc, #104]	@ (80145d0 <strtof+0x90>)
 8014566:	da04      	bge.n	8014572 <strtof+0x32>
 8014568:	f000 feae 	bl	80152c8 <nanf>
 801456c:	eeb1 0a40 	vneg.f32	s0, s0
 8014570:	bd10      	pop	{r4, pc}
 8014572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014576:	f000 bea7 	b.w	80152c8 <nanf>
 801457a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801457e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80145d4 <strtof+0x94>
 8014582:	eeb0 6ac0 	vabs.f32	s12, s0
 8014586:	eeb4 6a66 	vcmp.f32	s12, s13
 801458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458e:	dd08      	ble.n	80145a2 <strtof+0x62>
 8014590:	eeb0 6bc7 	vabs.f64	d6, d7
 8014594:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80145c0 <strtof+0x80>
 8014598:	eeb4 6b45 	vcmp.f64	d6, d5
 801459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a0:	dd0a      	ble.n	80145b8 <strtof+0x78>
 80145a2:	ee10 3a10 	vmov	r3, s0
 80145a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80145aa:	d1e1      	bne.n	8014570 <strtof+0x30>
 80145ac:	ee17 2a90 	vmov	r2, s15
 80145b0:	4b09      	ldr	r3, [pc, #36]	@ (80145d8 <strtof+0x98>)
 80145b2:	4013      	ands	r3, r2
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d0db      	beq.n	8014570 <strtof+0x30>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	2222      	movs	r2, #34	@ 0x22
 80145bc:	601a      	str	r2, [r3, #0]
 80145be:	e7d7      	b.n	8014570 <strtof+0x30>
 80145c0:	ffffffff 	.word	0xffffffff
 80145c4:	7fefffff 	.word	0x7fefffff
 80145c8:	24000208 	.word	0x24000208
 80145cc:	2400009c 	.word	0x2400009c
 80145d0:	080180f8 	.word	0x080180f8
 80145d4:	7f7fffff 	.word	0x7f7fffff
 80145d8:	7ff00000 	.word	0x7ff00000

080145dc <__cvt>:
 80145dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145de:	ed2d 8b02 	vpush	{d8}
 80145e2:	eeb0 8b40 	vmov.f64	d8, d0
 80145e6:	b085      	sub	sp, #20
 80145e8:	4617      	mov	r7, r2
 80145ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80145ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80145ee:	ee18 2a90 	vmov	r2, s17
 80145f2:	f025 0520 	bic.w	r5, r5, #32
 80145f6:	2a00      	cmp	r2, #0
 80145f8:	bfb6      	itet	lt
 80145fa:	222d      	movlt	r2, #45	@ 0x2d
 80145fc:	2200      	movge	r2, #0
 80145fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8014602:	2d46      	cmp	r5, #70	@ 0x46
 8014604:	460c      	mov	r4, r1
 8014606:	701a      	strb	r2, [r3, #0]
 8014608:	d004      	beq.n	8014614 <__cvt+0x38>
 801460a:	2d45      	cmp	r5, #69	@ 0x45
 801460c:	d100      	bne.n	8014610 <__cvt+0x34>
 801460e:	3401      	adds	r4, #1
 8014610:	2102      	movs	r1, #2
 8014612:	e000      	b.n	8014616 <__cvt+0x3a>
 8014614:	2103      	movs	r1, #3
 8014616:	ab03      	add	r3, sp, #12
 8014618:	9301      	str	r3, [sp, #4]
 801461a:	ab02      	add	r3, sp, #8
 801461c:	9300      	str	r3, [sp, #0]
 801461e:	4622      	mov	r2, r4
 8014620:	4633      	mov	r3, r6
 8014622:	eeb0 0b48 	vmov.f64	d0, d8
 8014626:	f000 fedf 	bl	80153e8 <_dtoa_r>
 801462a:	2d47      	cmp	r5, #71	@ 0x47
 801462c:	d114      	bne.n	8014658 <__cvt+0x7c>
 801462e:	07fb      	lsls	r3, r7, #31
 8014630:	d50a      	bpl.n	8014648 <__cvt+0x6c>
 8014632:	1902      	adds	r2, r0, r4
 8014634:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801463c:	bf08      	it	eq
 801463e:	9203      	streq	r2, [sp, #12]
 8014640:	2130      	movs	r1, #48	@ 0x30
 8014642:	9b03      	ldr	r3, [sp, #12]
 8014644:	4293      	cmp	r3, r2
 8014646:	d319      	bcc.n	801467c <__cvt+0xa0>
 8014648:	9b03      	ldr	r3, [sp, #12]
 801464a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801464c:	1a1b      	subs	r3, r3, r0
 801464e:	6013      	str	r3, [r2, #0]
 8014650:	b005      	add	sp, #20
 8014652:	ecbd 8b02 	vpop	{d8}
 8014656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014658:	2d46      	cmp	r5, #70	@ 0x46
 801465a:	eb00 0204 	add.w	r2, r0, r4
 801465e:	d1e9      	bne.n	8014634 <__cvt+0x58>
 8014660:	7803      	ldrb	r3, [r0, #0]
 8014662:	2b30      	cmp	r3, #48	@ 0x30
 8014664:	d107      	bne.n	8014676 <__cvt+0x9a>
 8014666:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466e:	bf1c      	itt	ne
 8014670:	f1c4 0401 	rsbne	r4, r4, #1
 8014674:	6034      	strne	r4, [r6, #0]
 8014676:	6833      	ldr	r3, [r6, #0]
 8014678:	441a      	add	r2, r3
 801467a:	e7db      	b.n	8014634 <__cvt+0x58>
 801467c:	1c5c      	adds	r4, r3, #1
 801467e:	9403      	str	r4, [sp, #12]
 8014680:	7019      	strb	r1, [r3, #0]
 8014682:	e7de      	b.n	8014642 <__cvt+0x66>

08014684 <__exponent>:
 8014684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014686:	2900      	cmp	r1, #0
 8014688:	bfba      	itte	lt
 801468a:	4249      	neglt	r1, r1
 801468c:	232d      	movlt	r3, #45	@ 0x2d
 801468e:	232b      	movge	r3, #43	@ 0x2b
 8014690:	2909      	cmp	r1, #9
 8014692:	7002      	strb	r2, [r0, #0]
 8014694:	7043      	strb	r3, [r0, #1]
 8014696:	dd29      	ble.n	80146ec <__exponent+0x68>
 8014698:	f10d 0307 	add.w	r3, sp, #7
 801469c:	461d      	mov	r5, r3
 801469e:	270a      	movs	r7, #10
 80146a0:	461a      	mov	r2, r3
 80146a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80146a6:	fb07 1416 	mls	r4, r7, r6, r1
 80146aa:	3430      	adds	r4, #48	@ 0x30
 80146ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80146b0:	460c      	mov	r4, r1
 80146b2:	2c63      	cmp	r4, #99	@ 0x63
 80146b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80146b8:	4631      	mov	r1, r6
 80146ba:	dcf1      	bgt.n	80146a0 <__exponent+0x1c>
 80146bc:	3130      	adds	r1, #48	@ 0x30
 80146be:	1e94      	subs	r4, r2, #2
 80146c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80146c4:	1c41      	adds	r1, r0, #1
 80146c6:	4623      	mov	r3, r4
 80146c8:	42ab      	cmp	r3, r5
 80146ca:	d30a      	bcc.n	80146e2 <__exponent+0x5e>
 80146cc:	f10d 0309 	add.w	r3, sp, #9
 80146d0:	1a9b      	subs	r3, r3, r2
 80146d2:	42ac      	cmp	r4, r5
 80146d4:	bf88      	it	hi
 80146d6:	2300      	movhi	r3, #0
 80146d8:	3302      	adds	r3, #2
 80146da:	4403      	add	r3, r0
 80146dc:	1a18      	subs	r0, r3, r0
 80146de:	b003      	add	sp, #12
 80146e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80146e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80146ea:	e7ed      	b.n	80146c8 <__exponent+0x44>
 80146ec:	2330      	movs	r3, #48	@ 0x30
 80146ee:	3130      	adds	r1, #48	@ 0x30
 80146f0:	7083      	strb	r3, [r0, #2]
 80146f2:	70c1      	strb	r1, [r0, #3]
 80146f4:	1d03      	adds	r3, r0, #4
 80146f6:	e7f1      	b.n	80146dc <__exponent+0x58>

080146f8 <_printf_float>:
 80146f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fc:	b08d      	sub	sp, #52	@ 0x34
 80146fe:	460c      	mov	r4, r1
 8014700:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014704:	4616      	mov	r6, r2
 8014706:	461f      	mov	r7, r3
 8014708:	4605      	mov	r5, r0
 801470a:	f000 fcef 	bl	80150ec <_localeconv_r>
 801470e:	f8d0 b000 	ldr.w	fp, [r0]
 8014712:	4658      	mov	r0, fp
 8014714:	f7eb fe34 	bl	8000380 <strlen>
 8014718:	2300      	movs	r3, #0
 801471a:	930a      	str	r3, [sp, #40]	@ 0x28
 801471c:	f8d8 3000 	ldr.w	r3, [r8]
 8014720:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014724:	6822      	ldr	r2, [r4, #0]
 8014726:	9005      	str	r0, [sp, #20]
 8014728:	3307      	adds	r3, #7
 801472a:	f023 0307 	bic.w	r3, r3, #7
 801472e:	f103 0108 	add.w	r1, r3, #8
 8014732:	f8c8 1000 	str.w	r1, [r8]
 8014736:	ed93 0b00 	vldr	d0, [r3]
 801473a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014998 <_printf_float+0x2a0>
 801473e:	eeb0 7bc0 	vabs.f64	d7, d0
 8014742:	eeb4 7b46 	vcmp.f64	d7, d6
 8014746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801474a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801474e:	dd24      	ble.n	801479a <_printf_float+0xa2>
 8014750:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	d502      	bpl.n	8014760 <_printf_float+0x68>
 801475a:	232d      	movs	r3, #45	@ 0x2d
 801475c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014760:	498f      	ldr	r1, [pc, #572]	@ (80149a0 <_printf_float+0x2a8>)
 8014762:	4b90      	ldr	r3, [pc, #576]	@ (80149a4 <_printf_float+0x2ac>)
 8014764:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014768:	bf8c      	ite	hi
 801476a:	4688      	movhi	r8, r1
 801476c:	4698      	movls	r8, r3
 801476e:	f022 0204 	bic.w	r2, r2, #4
 8014772:	2303      	movs	r3, #3
 8014774:	6123      	str	r3, [r4, #16]
 8014776:	6022      	str	r2, [r4, #0]
 8014778:	f04f 0a00 	mov.w	sl, #0
 801477c:	9700      	str	r7, [sp, #0]
 801477e:	4633      	mov	r3, r6
 8014780:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014782:	4621      	mov	r1, r4
 8014784:	4628      	mov	r0, r5
 8014786:	f000 f9d1 	bl	8014b2c <_printf_common>
 801478a:	3001      	adds	r0, #1
 801478c:	f040 8089 	bne.w	80148a2 <_printf_float+0x1aa>
 8014790:	f04f 30ff 	mov.w	r0, #4294967295
 8014794:	b00d      	add	sp, #52	@ 0x34
 8014796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479a:	eeb4 0b40 	vcmp.f64	d0, d0
 801479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a2:	d709      	bvc.n	80147b8 <_printf_float+0xc0>
 80147a4:	ee10 3a90 	vmov	r3, s1
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	bfbc      	itt	lt
 80147ac:	232d      	movlt	r3, #45	@ 0x2d
 80147ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80147b2:	497d      	ldr	r1, [pc, #500]	@ (80149a8 <_printf_float+0x2b0>)
 80147b4:	4b7d      	ldr	r3, [pc, #500]	@ (80149ac <_printf_float+0x2b4>)
 80147b6:	e7d5      	b.n	8014764 <_printf_float+0x6c>
 80147b8:	6863      	ldr	r3, [r4, #4]
 80147ba:	1c59      	adds	r1, r3, #1
 80147bc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80147c0:	d139      	bne.n	8014836 <_printf_float+0x13e>
 80147c2:	2306      	movs	r3, #6
 80147c4:	6063      	str	r3, [r4, #4]
 80147c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80147ca:	2300      	movs	r3, #0
 80147cc:	6022      	str	r2, [r4, #0]
 80147ce:	9303      	str	r3, [sp, #12]
 80147d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80147d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80147d6:	ab09      	add	r3, sp, #36	@ 0x24
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	6861      	ldr	r1, [r4, #4]
 80147dc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80147e0:	4628      	mov	r0, r5
 80147e2:	f7ff fefb 	bl	80145dc <__cvt>
 80147e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80147ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80147ec:	4680      	mov	r8, r0
 80147ee:	d129      	bne.n	8014844 <_printf_float+0x14c>
 80147f0:	1cc8      	adds	r0, r1, #3
 80147f2:	db02      	blt.n	80147fa <_printf_float+0x102>
 80147f4:	6863      	ldr	r3, [r4, #4]
 80147f6:	4299      	cmp	r1, r3
 80147f8:	dd41      	ble.n	801487e <_printf_float+0x186>
 80147fa:	f1a9 0902 	sub.w	r9, r9, #2
 80147fe:	fa5f f989 	uxtb.w	r9, r9
 8014802:	3901      	subs	r1, #1
 8014804:	464a      	mov	r2, r9
 8014806:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801480a:	9109      	str	r1, [sp, #36]	@ 0x24
 801480c:	f7ff ff3a 	bl	8014684 <__exponent>
 8014810:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014812:	1813      	adds	r3, r2, r0
 8014814:	2a01      	cmp	r2, #1
 8014816:	4682      	mov	sl, r0
 8014818:	6123      	str	r3, [r4, #16]
 801481a:	dc02      	bgt.n	8014822 <_printf_float+0x12a>
 801481c:	6822      	ldr	r2, [r4, #0]
 801481e:	07d2      	lsls	r2, r2, #31
 8014820:	d501      	bpl.n	8014826 <_printf_float+0x12e>
 8014822:	3301      	adds	r3, #1
 8014824:	6123      	str	r3, [r4, #16]
 8014826:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801482a:	2b00      	cmp	r3, #0
 801482c:	d0a6      	beq.n	801477c <_printf_float+0x84>
 801482e:	232d      	movs	r3, #45	@ 0x2d
 8014830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014834:	e7a2      	b.n	801477c <_printf_float+0x84>
 8014836:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801483a:	d1c4      	bne.n	80147c6 <_printf_float+0xce>
 801483c:	2b00      	cmp	r3, #0
 801483e:	d1c2      	bne.n	80147c6 <_printf_float+0xce>
 8014840:	2301      	movs	r3, #1
 8014842:	e7bf      	b.n	80147c4 <_printf_float+0xcc>
 8014844:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014848:	d9db      	bls.n	8014802 <_printf_float+0x10a>
 801484a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801484e:	d118      	bne.n	8014882 <_printf_float+0x18a>
 8014850:	2900      	cmp	r1, #0
 8014852:	6863      	ldr	r3, [r4, #4]
 8014854:	dd0b      	ble.n	801486e <_printf_float+0x176>
 8014856:	6121      	str	r1, [r4, #16]
 8014858:	b913      	cbnz	r3, 8014860 <_printf_float+0x168>
 801485a:	6822      	ldr	r2, [r4, #0]
 801485c:	07d0      	lsls	r0, r2, #31
 801485e:	d502      	bpl.n	8014866 <_printf_float+0x16e>
 8014860:	3301      	adds	r3, #1
 8014862:	440b      	add	r3, r1
 8014864:	6123      	str	r3, [r4, #16]
 8014866:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014868:	f04f 0a00 	mov.w	sl, #0
 801486c:	e7db      	b.n	8014826 <_printf_float+0x12e>
 801486e:	b913      	cbnz	r3, 8014876 <_printf_float+0x17e>
 8014870:	6822      	ldr	r2, [r4, #0]
 8014872:	07d2      	lsls	r2, r2, #31
 8014874:	d501      	bpl.n	801487a <_printf_float+0x182>
 8014876:	3302      	adds	r3, #2
 8014878:	e7f4      	b.n	8014864 <_printf_float+0x16c>
 801487a:	2301      	movs	r3, #1
 801487c:	e7f2      	b.n	8014864 <_printf_float+0x16c>
 801487e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014884:	4299      	cmp	r1, r3
 8014886:	db05      	blt.n	8014894 <_printf_float+0x19c>
 8014888:	6823      	ldr	r3, [r4, #0]
 801488a:	6121      	str	r1, [r4, #16]
 801488c:	07d8      	lsls	r0, r3, #31
 801488e:	d5ea      	bpl.n	8014866 <_printf_float+0x16e>
 8014890:	1c4b      	adds	r3, r1, #1
 8014892:	e7e7      	b.n	8014864 <_printf_float+0x16c>
 8014894:	2900      	cmp	r1, #0
 8014896:	bfd4      	ite	le
 8014898:	f1c1 0202 	rsble	r2, r1, #2
 801489c:	2201      	movgt	r2, #1
 801489e:	4413      	add	r3, r2
 80148a0:	e7e0      	b.n	8014864 <_printf_float+0x16c>
 80148a2:	6823      	ldr	r3, [r4, #0]
 80148a4:	055a      	lsls	r2, r3, #21
 80148a6:	d407      	bmi.n	80148b8 <_printf_float+0x1c0>
 80148a8:	6923      	ldr	r3, [r4, #16]
 80148aa:	4642      	mov	r2, r8
 80148ac:	4631      	mov	r1, r6
 80148ae:	4628      	mov	r0, r5
 80148b0:	47b8      	blx	r7
 80148b2:	3001      	adds	r0, #1
 80148b4:	d12a      	bne.n	801490c <_printf_float+0x214>
 80148b6:	e76b      	b.n	8014790 <_printf_float+0x98>
 80148b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80148bc:	f240 80e0 	bls.w	8014a80 <_printf_float+0x388>
 80148c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80148c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80148c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148cc:	d133      	bne.n	8014936 <_printf_float+0x23e>
 80148ce:	4a38      	ldr	r2, [pc, #224]	@ (80149b0 <_printf_float+0x2b8>)
 80148d0:	2301      	movs	r3, #1
 80148d2:	4631      	mov	r1, r6
 80148d4:	4628      	mov	r0, r5
 80148d6:	47b8      	blx	r7
 80148d8:	3001      	adds	r0, #1
 80148da:	f43f af59 	beq.w	8014790 <_printf_float+0x98>
 80148de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80148e2:	4543      	cmp	r3, r8
 80148e4:	db02      	blt.n	80148ec <_printf_float+0x1f4>
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	07d8      	lsls	r0, r3, #31
 80148ea:	d50f      	bpl.n	801490c <_printf_float+0x214>
 80148ec:	9b05      	ldr	r3, [sp, #20]
 80148ee:	465a      	mov	r2, fp
 80148f0:	4631      	mov	r1, r6
 80148f2:	4628      	mov	r0, r5
 80148f4:	47b8      	blx	r7
 80148f6:	3001      	adds	r0, #1
 80148f8:	f43f af4a 	beq.w	8014790 <_printf_float+0x98>
 80148fc:	f04f 0900 	mov.w	r9, #0
 8014900:	f108 38ff 	add.w	r8, r8, #4294967295
 8014904:	f104 0a1a 	add.w	sl, r4, #26
 8014908:	45c8      	cmp	r8, r9
 801490a:	dc09      	bgt.n	8014920 <_printf_float+0x228>
 801490c:	6823      	ldr	r3, [r4, #0]
 801490e:	079b      	lsls	r3, r3, #30
 8014910:	f100 8107 	bmi.w	8014b22 <_printf_float+0x42a>
 8014914:	68e0      	ldr	r0, [r4, #12]
 8014916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014918:	4298      	cmp	r0, r3
 801491a:	bfb8      	it	lt
 801491c:	4618      	movlt	r0, r3
 801491e:	e739      	b.n	8014794 <_printf_float+0x9c>
 8014920:	2301      	movs	r3, #1
 8014922:	4652      	mov	r2, sl
 8014924:	4631      	mov	r1, r6
 8014926:	4628      	mov	r0, r5
 8014928:	47b8      	blx	r7
 801492a:	3001      	adds	r0, #1
 801492c:	f43f af30 	beq.w	8014790 <_printf_float+0x98>
 8014930:	f109 0901 	add.w	r9, r9, #1
 8014934:	e7e8      	b.n	8014908 <_printf_float+0x210>
 8014936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014938:	2b00      	cmp	r3, #0
 801493a:	dc3b      	bgt.n	80149b4 <_printf_float+0x2bc>
 801493c:	4a1c      	ldr	r2, [pc, #112]	@ (80149b0 <_printf_float+0x2b8>)
 801493e:	2301      	movs	r3, #1
 8014940:	4631      	mov	r1, r6
 8014942:	4628      	mov	r0, r5
 8014944:	47b8      	blx	r7
 8014946:	3001      	adds	r0, #1
 8014948:	f43f af22 	beq.w	8014790 <_printf_float+0x98>
 801494c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014950:	ea59 0303 	orrs.w	r3, r9, r3
 8014954:	d102      	bne.n	801495c <_printf_float+0x264>
 8014956:	6823      	ldr	r3, [r4, #0]
 8014958:	07d9      	lsls	r1, r3, #31
 801495a:	d5d7      	bpl.n	801490c <_printf_float+0x214>
 801495c:	9b05      	ldr	r3, [sp, #20]
 801495e:	465a      	mov	r2, fp
 8014960:	4631      	mov	r1, r6
 8014962:	4628      	mov	r0, r5
 8014964:	47b8      	blx	r7
 8014966:	3001      	adds	r0, #1
 8014968:	f43f af12 	beq.w	8014790 <_printf_float+0x98>
 801496c:	f04f 0a00 	mov.w	sl, #0
 8014970:	f104 0b1a 	add.w	fp, r4, #26
 8014974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014976:	425b      	negs	r3, r3
 8014978:	4553      	cmp	r3, sl
 801497a:	dc01      	bgt.n	8014980 <_printf_float+0x288>
 801497c:	464b      	mov	r3, r9
 801497e:	e794      	b.n	80148aa <_printf_float+0x1b2>
 8014980:	2301      	movs	r3, #1
 8014982:	465a      	mov	r2, fp
 8014984:	4631      	mov	r1, r6
 8014986:	4628      	mov	r0, r5
 8014988:	47b8      	blx	r7
 801498a:	3001      	adds	r0, #1
 801498c:	f43f af00 	beq.w	8014790 <_printf_float+0x98>
 8014990:	f10a 0a01 	add.w	sl, sl, #1
 8014994:	e7ee      	b.n	8014974 <_printf_float+0x27c>
 8014996:	bf00      	nop
 8014998:	ffffffff 	.word	0xffffffff
 801499c:	7fefffff 	.word	0x7fefffff
 80149a0:	08017f2e 	.word	0x08017f2e
 80149a4:	08017f2a 	.word	0x08017f2a
 80149a8:	08017f36 	.word	0x08017f36
 80149ac:	08017f32 	.word	0x08017f32
 80149b0:	08017f3a 	.word	0x08017f3a
 80149b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80149b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80149ba:	4553      	cmp	r3, sl
 80149bc:	bfa8      	it	ge
 80149be:	4653      	movge	r3, sl
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	4699      	mov	r9, r3
 80149c4:	dc37      	bgt.n	8014a36 <_printf_float+0x33e>
 80149c6:	2300      	movs	r3, #0
 80149c8:	9307      	str	r3, [sp, #28]
 80149ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149ce:	f104 021a 	add.w	r2, r4, #26
 80149d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80149d4:	9907      	ldr	r1, [sp, #28]
 80149d6:	9306      	str	r3, [sp, #24]
 80149d8:	eba3 0309 	sub.w	r3, r3, r9
 80149dc:	428b      	cmp	r3, r1
 80149de:	dc31      	bgt.n	8014a44 <_printf_float+0x34c>
 80149e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149e2:	459a      	cmp	sl, r3
 80149e4:	dc3b      	bgt.n	8014a5e <_printf_float+0x366>
 80149e6:	6823      	ldr	r3, [r4, #0]
 80149e8:	07da      	lsls	r2, r3, #31
 80149ea:	d438      	bmi.n	8014a5e <_printf_float+0x366>
 80149ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149ee:	ebaa 0903 	sub.w	r9, sl, r3
 80149f2:	9b06      	ldr	r3, [sp, #24]
 80149f4:	ebaa 0303 	sub.w	r3, sl, r3
 80149f8:	4599      	cmp	r9, r3
 80149fa:	bfa8      	it	ge
 80149fc:	4699      	movge	r9, r3
 80149fe:	f1b9 0f00 	cmp.w	r9, #0
 8014a02:	dc34      	bgt.n	8014a6e <_printf_float+0x376>
 8014a04:	f04f 0800 	mov.w	r8, #0
 8014a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a0c:	f104 0b1a 	add.w	fp, r4, #26
 8014a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a12:	ebaa 0303 	sub.w	r3, sl, r3
 8014a16:	eba3 0309 	sub.w	r3, r3, r9
 8014a1a:	4543      	cmp	r3, r8
 8014a1c:	f77f af76 	ble.w	801490c <_printf_float+0x214>
 8014a20:	2301      	movs	r3, #1
 8014a22:	465a      	mov	r2, fp
 8014a24:	4631      	mov	r1, r6
 8014a26:	4628      	mov	r0, r5
 8014a28:	47b8      	blx	r7
 8014a2a:	3001      	adds	r0, #1
 8014a2c:	f43f aeb0 	beq.w	8014790 <_printf_float+0x98>
 8014a30:	f108 0801 	add.w	r8, r8, #1
 8014a34:	e7ec      	b.n	8014a10 <_printf_float+0x318>
 8014a36:	4642      	mov	r2, r8
 8014a38:	4631      	mov	r1, r6
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	47b8      	blx	r7
 8014a3e:	3001      	adds	r0, #1
 8014a40:	d1c1      	bne.n	80149c6 <_printf_float+0x2ce>
 8014a42:	e6a5      	b.n	8014790 <_printf_float+0x98>
 8014a44:	2301      	movs	r3, #1
 8014a46:	4631      	mov	r1, r6
 8014a48:	4628      	mov	r0, r5
 8014a4a:	9206      	str	r2, [sp, #24]
 8014a4c:	47b8      	blx	r7
 8014a4e:	3001      	adds	r0, #1
 8014a50:	f43f ae9e 	beq.w	8014790 <_printf_float+0x98>
 8014a54:	9b07      	ldr	r3, [sp, #28]
 8014a56:	9a06      	ldr	r2, [sp, #24]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	9307      	str	r3, [sp, #28]
 8014a5c:	e7b9      	b.n	80149d2 <_printf_float+0x2da>
 8014a5e:	9b05      	ldr	r3, [sp, #20]
 8014a60:	465a      	mov	r2, fp
 8014a62:	4631      	mov	r1, r6
 8014a64:	4628      	mov	r0, r5
 8014a66:	47b8      	blx	r7
 8014a68:	3001      	adds	r0, #1
 8014a6a:	d1bf      	bne.n	80149ec <_printf_float+0x2f4>
 8014a6c:	e690      	b.n	8014790 <_printf_float+0x98>
 8014a6e:	9a06      	ldr	r2, [sp, #24]
 8014a70:	464b      	mov	r3, r9
 8014a72:	4442      	add	r2, r8
 8014a74:	4631      	mov	r1, r6
 8014a76:	4628      	mov	r0, r5
 8014a78:	47b8      	blx	r7
 8014a7a:	3001      	adds	r0, #1
 8014a7c:	d1c2      	bne.n	8014a04 <_printf_float+0x30c>
 8014a7e:	e687      	b.n	8014790 <_printf_float+0x98>
 8014a80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014a84:	f1b9 0f01 	cmp.w	r9, #1
 8014a88:	dc01      	bgt.n	8014a8e <_printf_float+0x396>
 8014a8a:	07db      	lsls	r3, r3, #31
 8014a8c:	d536      	bpl.n	8014afc <_printf_float+0x404>
 8014a8e:	2301      	movs	r3, #1
 8014a90:	4642      	mov	r2, r8
 8014a92:	4631      	mov	r1, r6
 8014a94:	4628      	mov	r0, r5
 8014a96:	47b8      	blx	r7
 8014a98:	3001      	adds	r0, #1
 8014a9a:	f43f ae79 	beq.w	8014790 <_printf_float+0x98>
 8014a9e:	9b05      	ldr	r3, [sp, #20]
 8014aa0:	465a      	mov	r2, fp
 8014aa2:	4631      	mov	r1, r6
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	47b8      	blx	r7
 8014aa8:	3001      	adds	r0, #1
 8014aaa:	f43f ae71 	beq.w	8014790 <_printf_float+0x98>
 8014aae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8014ab2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8014abe:	d018      	beq.n	8014af2 <_printf_float+0x3fa>
 8014ac0:	464b      	mov	r3, r9
 8014ac2:	f108 0201 	add.w	r2, r8, #1
 8014ac6:	4631      	mov	r1, r6
 8014ac8:	4628      	mov	r0, r5
 8014aca:	47b8      	blx	r7
 8014acc:	3001      	adds	r0, #1
 8014ace:	d10c      	bne.n	8014aea <_printf_float+0x3f2>
 8014ad0:	e65e      	b.n	8014790 <_printf_float+0x98>
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	465a      	mov	r2, fp
 8014ad6:	4631      	mov	r1, r6
 8014ad8:	4628      	mov	r0, r5
 8014ada:	47b8      	blx	r7
 8014adc:	3001      	adds	r0, #1
 8014ade:	f43f ae57 	beq.w	8014790 <_printf_float+0x98>
 8014ae2:	f108 0801 	add.w	r8, r8, #1
 8014ae6:	45c8      	cmp	r8, r9
 8014ae8:	dbf3      	blt.n	8014ad2 <_printf_float+0x3da>
 8014aea:	4653      	mov	r3, sl
 8014aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014af0:	e6dc      	b.n	80148ac <_printf_float+0x1b4>
 8014af2:	f04f 0800 	mov.w	r8, #0
 8014af6:	f104 0b1a 	add.w	fp, r4, #26
 8014afa:	e7f4      	b.n	8014ae6 <_printf_float+0x3ee>
 8014afc:	2301      	movs	r3, #1
 8014afe:	4642      	mov	r2, r8
 8014b00:	e7e1      	b.n	8014ac6 <_printf_float+0x3ce>
 8014b02:	2301      	movs	r3, #1
 8014b04:	464a      	mov	r2, r9
 8014b06:	4631      	mov	r1, r6
 8014b08:	4628      	mov	r0, r5
 8014b0a:	47b8      	blx	r7
 8014b0c:	3001      	adds	r0, #1
 8014b0e:	f43f ae3f 	beq.w	8014790 <_printf_float+0x98>
 8014b12:	f108 0801 	add.w	r8, r8, #1
 8014b16:	68e3      	ldr	r3, [r4, #12]
 8014b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014b1a:	1a5b      	subs	r3, r3, r1
 8014b1c:	4543      	cmp	r3, r8
 8014b1e:	dcf0      	bgt.n	8014b02 <_printf_float+0x40a>
 8014b20:	e6f8      	b.n	8014914 <_printf_float+0x21c>
 8014b22:	f04f 0800 	mov.w	r8, #0
 8014b26:	f104 0919 	add.w	r9, r4, #25
 8014b2a:	e7f4      	b.n	8014b16 <_printf_float+0x41e>

08014b2c <_printf_common>:
 8014b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b30:	4616      	mov	r6, r2
 8014b32:	4698      	mov	r8, r3
 8014b34:	688a      	ldr	r2, [r1, #8]
 8014b36:	690b      	ldr	r3, [r1, #16]
 8014b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	bfb8      	it	lt
 8014b40:	4613      	movlt	r3, r2
 8014b42:	6033      	str	r3, [r6, #0]
 8014b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014b48:	4607      	mov	r7, r0
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	b10a      	cbz	r2, 8014b52 <_printf_common+0x26>
 8014b4e:	3301      	adds	r3, #1
 8014b50:	6033      	str	r3, [r6, #0]
 8014b52:	6823      	ldr	r3, [r4, #0]
 8014b54:	0699      	lsls	r1, r3, #26
 8014b56:	bf42      	ittt	mi
 8014b58:	6833      	ldrmi	r3, [r6, #0]
 8014b5a:	3302      	addmi	r3, #2
 8014b5c:	6033      	strmi	r3, [r6, #0]
 8014b5e:	6825      	ldr	r5, [r4, #0]
 8014b60:	f015 0506 	ands.w	r5, r5, #6
 8014b64:	d106      	bne.n	8014b74 <_printf_common+0x48>
 8014b66:	f104 0a19 	add.w	sl, r4, #25
 8014b6a:	68e3      	ldr	r3, [r4, #12]
 8014b6c:	6832      	ldr	r2, [r6, #0]
 8014b6e:	1a9b      	subs	r3, r3, r2
 8014b70:	42ab      	cmp	r3, r5
 8014b72:	dc26      	bgt.n	8014bc2 <_printf_common+0x96>
 8014b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b78:	6822      	ldr	r2, [r4, #0]
 8014b7a:	3b00      	subs	r3, #0
 8014b7c:	bf18      	it	ne
 8014b7e:	2301      	movne	r3, #1
 8014b80:	0692      	lsls	r2, r2, #26
 8014b82:	d42b      	bmi.n	8014bdc <_printf_common+0xb0>
 8014b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b88:	4641      	mov	r1, r8
 8014b8a:	4638      	mov	r0, r7
 8014b8c:	47c8      	blx	r9
 8014b8e:	3001      	adds	r0, #1
 8014b90:	d01e      	beq.n	8014bd0 <_printf_common+0xa4>
 8014b92:	6823      	ldr	r3, [r4, #0]
 8014b94:	6922      	ldr	r2, [r4, #16]
 8014b96:	f003 0306 	and.w	r3, r3, #6
 8014b9a:	2b04      	cmp	r3, #4
 8014b9c:	bf02      	ittt	eq
 8014b9e:	68e5      	ldreq	r5, [r4, #12]
 8014ba0:	6833      	ldreq	r3, [r6, #0]
 8014ba2:	1aed      	subeq	r5, r5, r3
 8014ba4:	68a3      	ldr	r3, [r4, #8]
 8014ba6:	bf0c      	ite	eq
 8014ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bac:	2500      	movne	r5, #0
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	bfc4      	itt	gt
 8014bb2:	1a9b      	subgt	r3, r3, r2
 8014bb4:	18ed      	addgt	r5, r5, r3
 8014bb6:	2600      	movs	r6, #0
 8014bb8:	341a      	adds	r4, #26
 8014bba:	42b5      	cmp	r5, r6
 8014bbc:	d11a      	bne.n	8014bf4 <_printf_common+0xc8>
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	e008      	b.n	8014bd4 <_printf_common+0xa8>
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	4652      	mov	r2, sl
 8014bc6:	4641      	mov	r1, r8
 8014bc8:	4638      	mov	r0, r7
 8014bca:	47c8      	blx	r9
 8014bcc:	3001      	adds	r0, #1
 8014bce:	d103      	bne.n	8014bd8 <_printf_common+0xac>
 8014bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd8:	3501      	adds	r5, #1
 8014bda:	e7c6      	b.n	8014b6a <_printf_common+0x3e>
 8014bdc:	18e1      	adds	r1, r4, r3
 8014bde:	1c5a      	adds	r2, r3, #1
 8014be0:	2030      	movs	r0, #48	@ 0x30
 8014be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014be6:	4422      	add	r2, r4
 8014be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014bf0:	3302      	adds	r3, #2
 8014bf2:	e7c7      	b.n	8014b84 <_printf_common+0x58>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	4622      	mov	r2, r4
 8014bf8:	4641      	mov	r1, r8
 8014bfa:	4638      	mov	r0, r7
 8014bfc:	47c8      	blx	r9
 8014bfe:	3001      	adds	r0, #1
 8014c00:	d0e6      	beq.n	8014bd0 <_printf_common+0xa4>
 8014c02:	3601      	adds	r6, #1
 8014c04:	e7d9      	b.n	8014bba <_printf_common+0x8e>
	...

08014c08 <_printf_i>:
 8014c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c0c:	7e0f      	ldrb	r7, [r1, #24]
 8014c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014c10:	2f78      	cmp	r7, #120	@ 0x78
 8014c12:	4691      	mov	r9, r2
 8014c14:	4680      	mov	r8, r0
 8014c16:	460c      	mov	r4, r1
 8014c18:	469a      	mov	sl, r3
 8014c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014c1e:	d807      	bhi.n	8014c30 <_printf_i+0x28>
 8014c20:	2f62      	cmp	r7, #98	@ 0x62
 8014c22:	d80a      	bhi.n	8014c3a <_printf_i+0x32>
 8014c24:	2f00      	cmp	r7, #0
 8014c26:	f000 80d1 	beq.w	8014dcc <_printf_i+0x1c4>
 8014c2a:	2f58      	cmp	r7, #88	@ 0x58
 8014c2c:	f000 80b8 	beq.w	8014da0 <_printf_i+0x198>
 8014c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014c38:	e03a      	b.n	8014cb0 <_printf_i+0xa8>
 8014c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014c3e:	2b15      	cmp	r3, #21
 8014c40:	d8f6      	bhi.n	8014c30 <_printf_i+0x28>
 8014c42:	a101      	add	r1, pc, #4	@ (adr r1, 8014c48 <_printf_i+0x40>)
 8014c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014c48:	08014ca1 	.word	0x08014ca1
 8014c4c:	08014cb5 	.word	0x08014cb5
 8014c50:	08014c31 	.word	0x08014c31
 8014c54:	08014c31 	.word	0x08014c31
 8014c58:	08014c31 	.word	0x08014c31
 8014c5c:	08014c31 	.word	0x08014c31
 8014c60:	08014cb5 	.word	0x08014cb5
 8014c64:	08014c31 	.word	0x08014c31
 8014c68:	08014c31 	.word	0x08014c31
 8014c6c:	08014c31 	.word	0x08014c31
 8014c70:	08014c31 	.word	0x08014c31
 8014c74:	08014db3 	.word	0x08014db3
 8014c78:	08014cdf 	.word	0x08014cdf
 8014c7c:	08014d6d 	.word	0x08014d6d
 8014c80:	08014c31 	.word	0x08014c31
 8014c84:	08014c31 	.word	0x08014c31
 8014c88:	08014dd5 	.word	0x08014dd5
 8014c8c:	08014c31 	.word	0x08014c31
 8014c90:	08014cdf 	.word	0x08014cdf
 8014c94:	08014c31 	.word	0x08014c31
 8014c98:	08014c31 	.word	0x08014c31
 8014c9c:	08014d75 	.word	0x08014d75
 8014ca0:	6833      	ldr	r3, [r6, #0]
 8014ca2:	1d1a      	adds	r2, r3, #4
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	6032      	str	r2, [r6, #0]
 8014ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	e09c      	b.n	8014dee <_printf_i+0x1e6>
 8014cb4:	6833      	ldr	r3, [r6, #0]
 8014cb6:	6820      	ldr	r0, [r4, #0]
 8014cb8:	1d19      	adds	r1, r3, #4
 8014cba:	6031      	str	r1, [r6, #0]
 8014cbc:	0606      	lsls	r6, r0, #24
 8014cbe:	d501      	bpl.n	8014cc4 <_printf_i+0xbc>
 8014cc0:	681d      	ldr	r5, [r3, #0]
 8014cc2:	e003      	b.n	8014ccc <_printf_i+0xc4>
 8014cc4:	0645      	lsls	r5, r0, #25
 8014cc6:	d5fb      	bpl.n	8014cc0 <_printf_i+0xb8>
 8014cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014ccc:	2d00      	cmp	r5, #0
 8014cce:	da03      	bge.n	8014cd8 <_printf_i+0xd0>
 8014cd0:	232d      	movs	r3, #45	@ 0x2d
 8014cd2:	426d      	negs	r5, r5
 8014cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014cd8:	4858      	ldr	r0, [pc, #352]	@ (8014e3c <_printf_i+0x234>)
 8014cda:	230a      	movs	r3, #10
 8014cdc:	e011      	b.n	8014d02 <_printf_i+0xfa>
 8014cde:	6821      	ldr	r1, [r4, #0]
 8014ce0:	6833      	ldr	r3, [r6, #0]
 8014ce2:	0608      	lsls	r0, r1, #24
 8014ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8014ce8:	d402      	bmi.n	8014cf0 <_printf_i+0xe8>
 8014cea:	0649      	lsls	r1, r1, #25
 8014cec:	bf48      	it	mi
 8014cee:	b2ad      	uxthmi	r5, r5
 8014cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8014cf2:	4852      	ldr	r0, [pc, #328]	@ (8014e3c <_printf_i+0x234>)
 8014cf4:	6033      	str	r3, [r6, #0]
 8014cf6:	bf14      	ite	ne
 8014cf8:	230a      	movne	r3, #10
 8014cfa:	2308      	moveq	r3, #8
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014d02:	6866      	ldr	r6, [r4, #4]
 8014d04:	60a6      	str	r6, [r4, #8]
 8014d06:	2e00      	cmp	r6, #0
 8014d08:	db05      	blt.n	8014d16 <_printf_i+0x10e>
 8014d0a:	6821      	ldr	r1, [r4, #0]
 8014d0c:	432e      	orrs	r6, r5
 8014d0e:	f021 0104 	bic.w	r1, r1, #4
 8014d12:	6021      	str	r1, [r4, #0]
 8014d14:	d04b      	beq.n	8014dae <_printf_i+0x1a6>
 8014d16:	4616      	mov	r6, r2
 8014d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8014d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8014d20:	5dc7      	ldrb	r7, [r0, r7]
 8014d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014d26:	462f      	mov	r7, r5
 8014d28:	42bb      	cmp	r3, r7
 8014d2a:	460d      	mov	r5, r1
 8014d2c:	d9f4      	bls.n	8014d18 <_printf_i+0x110>
 8014d2e:	2b08      	cmp	r3, #8
 8014d30:	d10b      	bne.n	8014d4a <_printf_i+0x142>
 8014d32:	6823      	ldr	r3, [r4, #0]
 8014d34:	07df      	lsls	r7, r3, #31
 8014d36:	d508      	bpl.n	8014d4a <_printf_i+0x142>
 8014d38:	6923      	ldr	r3, [r4, #16]
 8014d3a:	6861      	ldr	r1, [r4, #4]
 8014d3c:	4299      	cmp	r1, r3
 8014d3e:	bfde      	ittt	le
 8014d40:	2330      	movle	r3, #48	@ 0x30
 8014d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014d4a:	1b92      	subs	r2, r2, r6
 8014d4c:	6122      	str	r2, [r4, #16]
 8014d4e:	f8cd a000 	str.w	sl, [sp]
 8014d52:	464b      	mov	r3, r9
 8014d54:	aa03      	add	r2, sp, #12
 8014d56:	4621      	mov	r1, r4
 8014d58:	4640      	mov	r0, r8
 8014d5a:	f7ff fee7 	bl	8014b2c <_printf_common>
 8014d5e:	3001      	adds	r0, #1
 8014d60:	d14a      	bne.n	8014df8 <_printf_i+0x1f0>
 8014d62:	f04f 30ff 	mov.w	r0, #4294967295
 8014d66:	b004      	add	sp, #16
 8014d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d6c:	6823      	ldr	r3, [r4, #0]
 8014d6e:	f043 0320 	orr.w	r3, r3, #32
 8014d72:	6023      	str	r3, [r4, #0]
 8014d74:	4832      	ldr	r0, [pc, #200]	@ (8014e40 <_printf_i+0x238>)
 8014d76:	2778      	movs	r7, #120	@ 0x78
 8014d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d7c:	6823      	ldr	r3, [r4, #0]
 8014d7e:	6831      	ldr	r1, [r6, #0]
 8014d80:	061f      	lsls	r7, r3, #24
 8014d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d86:	d402      	bmi.n	8014d8e <_printf_i+0x186>
 8014d88:	065f      	lsls	r7, r3, #25
 8014d8a:	bf48      	it	mi
 8014d8c:	b2ad      	uxthmi	r5, r5
 8014d8e:	6031      	str	r1, [r6, #0]
 8014d90:	07d9      	lsls	r1, r3, #31
 8014d92:	bf44      	itt	mi
 8014d94:	f043 0320 	orrmi.w	r3, r3, #32
 8014d98:	6023      	strmi	r3, [r4, #0]
 8014d9a:	b11d      	cbz	r5, 8014da4 <_printf_i+0x19c>
 8014d9c:	2310      	movs	r3, #16
 8014d9e:	e7ad      	b.n	8014cfc <_printf_i+0xf4>
 8014da0:	4826      	ldr	r0, [pc, #152]	@ (8014e3c <_printf_i+0x234>)
 8014da2:	e7e9      	b.n	8014d78 <_printf_i+0x170>
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	f023 0320 	bic.w	r3, r3, #32
 8014daa:	6023      	str	r3, [r4, #0]
 8014dac:	e7f6      	b.n	8014d9c <_printf_i+0x194>
 8014dae:	4616      	mov	r6, r2
 8014db0:	e7bd      	b.n	8014d2e <_printf_i+0x126>
 8014db2:	6833      	ldr	r3, [r6, #0]
 8014db4:	6825      	ldr	r5, [r4, #0]
 8014db6:	6961      	ldr	r1, [r4, #20]
 8014db8:	1d18      	adds	r0, r3, #4
 8014dba:	6030      	str	r0, [r6, #0]
 8014dbc:	062e      	lsls	r6, r5, #24
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	d501      	bpl.n	8014dc6 <_printf_i+0x1be>
 8014dc2:	6019      	str	r1, [r3, #0]
 8014dc4:	e002      	b.n	8014dcc <_printf_i+0x1c4>
 8014dc6:	0668      	lsls	r0, r5, #25
 8014dc8:	d5fb      	bpl.n	8014dc2 <_printf_i+0x1ba>
 8014dca:	8019      	strh	r1, [r3, #0]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	6123      	str	r3, [r4, #16]
 8014dd0:	4616      	mov	r6, r2
 8014dd2:	e7bc      	b.n	8014d4e <_printf_i+0x146>
 8014dd4:	6833      	ldr	r3, [r6, #0]
 8014dd6:	1d1a      	adds	r2, r3, #4
 8014dd8:	6032      	str	r2, [r6, #0]
 8014dda:	681e      	ldr	r6, [r3, #0]
 8014ddc:	6862      	ldr	r2, [r4, #4]
 8014dde:	2100      	movs	r1, #0
 8014de0:	4630      	mov	r0, r6
 8014de2:	f7eb fa7d 	bl	80002e0 <memchr>
 8014de6:	b108      	cbz	r0, 8014dec <_printf_i+0x1e4>
 8014de8:	1b80      	subs	r0, r0, r6
 8014dea:	6060      	str	r0, [r4, #4]
 8014dec:	6863      	ldr	r3, [r4, #4]
 8014dee:	6123      	str	r3, [r4, #16]
 8014df0:	2300      	movs	r3, #0
 8014df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014df6:	e7aa      	b.n	8014d4e <_printf_i+0x146>
 8014df8:	6923      	ldr	r3, [r4, #16]
 8014dfa:	4632      	mov	r2, r6
 8014dfc:	4649      	mov	r1, r9
 8014dfe:	4640      	mov	r0, r8
 8014e00:	47d0      	blx	sl
 8014e02:	3001      	adds	r0, #1
 8014e04:	d0ad      	beq.n	8014d62 <_printf_i+0x15a>
 8014e06:	6823      	ldr	r3, [r4, #0]
 8014e08:	079b      	lsls	r3, r3, #30
 8014e0a:	d413      	bmi.n	8014e34 <_printf_i+0x22c>
 8014e0c:	68e0      	ldr	r0, [r4, #12]
 8014e0e:	9b03      	ldr	r3, [sp, #12]
 8014e10:	4298      	cmp	r0, r3
 8014e12:	bfb8      	it	lt
 8014e14:	4618      	movlt	r0, r3
 8014e16:	e7a6      	b.n	8014d66 <_printf_i+0x15e>
 8014e18:	2301      	movs	r3, #1
 8014e1a:	4632      	mov	r2, r6
 8014e1c:	4649      	mov	r1, r9
 8014e1e:	4640      	mov	r0, r8
 8014e20:	47d0      	blx	sl
 8014e22:	3001      	adds	r0, #1
 8014e24:	d09d      	beq.n	8014d62 <_printf_i+0x15a>
 8014e26:	3501      	adds	r5, #1
 8014e28:	68e3      	ldr	r3, [r4, #12]
 8014e2a:	9903      	ldr	r1, [sp, #12]
 8014e2c:	1a5b      	subs	r3, r3, r1
 8014e2e:	42ab      	cmp	r3, r5
 8014e30:	dcf2      	bgt.n	8014e18 <_printf_i+0x210>
 8014e32:	e7eb      	b.n	8014e0c <_printf_i+0x204>
 8014e34:	2500      	movs	r5, #0
 8014e36:	f104 0619 	add.w	r6, r4, #25
 8014e3a:	e7f5      	b.n	8014e28 <_printf_i+0x220>
 8014e3c:	08017f3c 	.word	0x08017f3c
 8014e40:	08017f4d 	.word	0x08017f4d

08014e44 <std>:
 8014e44:	2300      	movs	r3, #0
 8014e46:	b510      	push	{r4, lr}
 8014e48:	4604      	mov	r4, r0
 8014e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8014e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e52:	6083      	str	r3, [r0, #8]
 8014e54:	8181      	strh	r1, [r0, #12]
 8014e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e58:	81c2      	strh	r2, [r0, #14]
 8014e5a:	6183      	str	r3, [r0, #24]
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	2208      	movs	r2, #8
 8014e60:	305c      	adds	r0, #92	@ 0x5c
 8014e62:	f000 f906 	bl	8015072 <memset>
 8014e66:	4b0d      	ldr	r3, [pc, #52]	@ (8014e9c <std+0x58>)
 8014e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8014e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea0 <std+0x5c>)
 8014e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea4 <std+0x60>)
 8014e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014e72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea8 <std+0x64>)
 8014e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8014e76:	4b0d      	ldr	r3, [pc, #52]	@ (8014eac <std+0x68>)
 8014e78:	6224      	str	r4, [r4, #32]
 8014e7a:	429c      	cmp	r4, r3
 8014e7c:	d006      	beq.n	8014e8c <std+0x48>
 8014e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014e82:	4294      	cmp	r4, r2
 8014e84:	d002      	beq.n	8014e8c <std+0x48>
 8014e86:	33d0      	adds	r3, #208	@ 0xd0
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	d105      	bne.n	8014e98 <std+0x54>
 8014e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e94:	f000 b9fc 	b.w	8015290 <__retarget_lock_init_recursive>
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	bf00      	nop
 8014e9c:	08014fed 	.word	0x08014fed
 8014ea0:	0801500f 	.word	0x0801500f
 8014ea4:	08015047 	.word	0x08015047
 8014ea8:	0801506b 	.word	0x0801506b
 8014eac:	24007494 	.word	0x24007494

08014eb0 <stdio_exit_handler>:
 8014eb0:	4a02      	ldr	r2, [pc, #8]	@ (8014ebc <stdio_exit_handler+0xc>)
 8014eb2:	4903      	ldr	r1, [pc, #12]	@ (8014ec0 <stdio_exit_handler+0x10>)
 8014eb4:	4803      	ldr	r0, [pc, #12]	@ (8014ec4 <stdio_exit_handler+0x14>)
 8014eb6:	f000 b869 	b.w	8014f8c <_fwalk_sglue>
 8014eba:	bf00      	nop
 8014ebc:	24000090 	.word	0x24000090
 8014ec0:	08017431 	.word	0x08017431
 8014ec4:	2400020c 	.word	0x2400020c

08014ec8 <cleanup_stdio>:
 8014ec8:	6841      	ldr	r1, [r0, #4]
 8014eca:	4b0c      	ldr	r3, [pc, #48]	@ (8014efc <cleanup_stdio+0x34>)
 8014ecc:	4299      	cmp	r1, r3
 8014ece:	b510      	push	{r4, lr}
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	d001      	beq.n	8014ed8 <cleanup_stdio+0x10>
 8014ed4:	f002 faac 	bl	8017430 <_fflush_r>
 8014ed8:	68a1      	ldr	r1, [r4, #8]
 8014eda:	4b09      	ldr	r3, [pc, #36]	@ (8014f00 <cleanup_stdio+0x38>)
 8014edc:	4299      	cmp	r1, r3
 8014ede:	d002      	beq.n	8014ee6 <cleanup_stdio+0x1e>
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f002 faa5 	bl	8017430 <_fflush_r>
 8014ee6:	68e1      	ldr	r1, [r4, #12]
 8014ee8:	4b06      	ldr	r3, [pc, #24]	@ (8014f04 <cleanup_stdio+0x3c>)
 8014eea:	4299      	cmp	r1, r3
 8014eec:	d004      	beq.n	8014ef8 <cleanup_stdio+0x30>
 8014eee:	4620      	mov	r0, r4
 8014ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ef4:	f002 ba9c 	b.w	8017430 <_fflush_r>
 8014ef8:	bd10      	pop	{r4, pc}
 8014efa:	bf00      	nop
 8014efc:	24007494 	.word	0x24007494
 8014f00:	240074fc 	.word	0x240074fc
 8014f04:	24007564 	.word	0x24007564

08014f08 <global_stdio_init.part.0>:
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f38 <global_stdio_init.part.0+0x30>)
 8014f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8014f3c <global_stdio_init.part.0+0x34>)
 8014f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8014f40 <global_stdio_init.part.0+0x38>)
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	4620      	mov	r0, r4
 8014f14:	2200      	movs	r2, #0
 8014f16:	2104      	movs	r1, #4
 8014f18:	f7ff ff94 	bl	8014e44 <std>
 8014f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f20:	2201      	movs	r2, #1
 8014f22:	2109      	movs	r1, #9
 8014f24:	f7ff ff8e 	bl	8014e44 <std>
 8014f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f2c:	2202      	movs	r2, #2
 8014f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f32:	2112      	movs	r1, #18
 8014f34:	f7ff bf86 	b.w	8014e44 <std>
 8014f38:	240075cc 	.word	0x240075cc
 8014f3c:	24007494 	.word	0x24007494
 8014f40:	08014eb1 	.word	0x08014eb1

08014f44 <__sfp_lock_acquire>:
 8014f44:	4801      	ldr	r0, [pc, #4]	@ (8014f4c <__sfp_lock_acquire+0x8>)
 8014f46:	f000 b9a4 	b.w	8015292 <__retarget_lock_acquire_recursive>
 8014f4a:	bf00      	nop
 8014f4c:	240075d5 	.word	0x240075d5

08014f50 <__sfp_lock_release>:
 8014f50:	4801      	ldr	r0, [pc, #4]	@ (8014f58 <__sfp_lock_release+0x8>)
 8014f52:	f000 b99f 	b.w	8015294 <__retarget_lock_release_recursive>
 8014f56:	bf00      	nop
 8014f58:	240075d5 	.word	0x240075d5

08014f5c <__sinit>:
 8014f5c:	b510      	push	{r4, lr}
 8014f5e:	4604      	mov	r4, r0
 8014f60:	f7ff fff0 	bl	8014f44 <__sfp_lock_acquire>
 8014f64:	6a23      	ldr	r3, [r4, #32]
 8014f66:	b11b      	cbz	r3, 8014f70 <__sinit+0x14>
 8014f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f6c:	f7ff bff0 	b.w	8014f50 <__sfp_lock_release>
 8014f70:	4b04      	ldr	r3, [pc, #16]	@ (8014f84 <__sinit+0x28>)
 8014f72:	6223      	str	r3, [r4, #32]
 8014f74:	4b04      	ldr	r3, [pc, #16]	@ (8014f88 <__sinit+0x2c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d1f5      	bne.n	8014f68 <__sinit+0xc>
 8014f7c:	f7ff ffc4 	bl	8014f08 <global_stdio_init.part.0>
 8014f80:	e7f2      	b.n	8014f68 <__sinit+0xc>
 8014f82:	bf00      	nop
 8014f84:	08014ec9 	.word	0x08014ec9
 8014f88:	240075cc 	.word	0x240075cc

08014f8c <_fwalk_sglue>:
 8014f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f90:	4607      	mov	r7, r0
 8014f92:	4688      	mov	r8, r1
 8014f94:	4614      	mov	r4, r2
 8014f96:	2600      	movs	r6, #0
 8014f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8014fa0:	d505      	bpl.n	8014fae <_fwalk_sglue+0x22>
 8014fa2:	6824      	ldr	r4, [r4, #0]
 8014fa4:	2c00      	cmp	r4, #0
 8014fa6:	d1f7      	bne.n	8014f98 <_fwalk_sglue+0xc>
 8014fa8:	4630      	mov	r0, r6
 8014faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fae:	89ab      	ldrh	r3, [r5, #12]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d907      	bls.n	8014fc4 <_fwalk_sglue+0x38>
 8014fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fb8:	3301      	adds	r3, #1
 8014fba:	d003      	beq.n	8014fc4 <_fwalk_sglue+0x38>
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	47c0      	blx	r8
 8014fc2:	4306      	orrs	r6, r0
 8014fc4:	3568      	adds	r5, #104	@ 0x68
 8014fc6:	e7e9      	b.n	8014f9c <_fwalk_sglue+0x10>

08014fc8 <iprintf>:
 8014fc8:	b40f      	push	{r0, r1, r2, r3}
 8014fca:	b507      	push	{r0, r1, r2, lr}
 8014fcc:	4906      	ldr	r1, [pc, #24]	@ (8014fe8 <iprintf+0x20>)
 8014fce:	ab04      	add	r3, sp, #16
 8014fd0:	6808      	ldr	r0, [r1, #0]
 8014fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fd6:	6881      	ldr	r1, [r0, #8]
 8014fd8:	9301      	str	r3, [sp, #4]
 8014fda:	f002 f88d 	bl	80170f8 <_vfiprintf_r>
 8014fde:	b003      	add	sp, #12
 8014fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fe4:	b004      	add	sp, #16
 8014fe6:	4770      	bx	lr
 8014fe8:	24000208 	.word	0x24000208

08014fec <__sread>:
 8014fec:	b510      	push	{r4, lr}
 8014fee:	460c      	mov	r4, r1
 8014ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff4:	f000 f8fe 	bl	80151f4 <_read_r>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	bfab      	itete	ge
 8014ffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8015000:	181b      	addge	r3, r3, r0
 8015002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015006:	bfac      	ite	ge
 8015008:	6563      	strge	r3, [r4, #84]	@ 0x54
 801500a:	81a3      	strhlt	r3, [r4, #12]
 801500c:	bd10      	pop	{r4, pc}

0801500e <__swrite>:
 801500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015012:	461f      	mov	r7, r3
 8015014:	898b      	ldrh	r3, [r1, #12]
 8015016:	05db      	lsls	r3, r3, #23
 8015018:	4605      	mov	r5, r0
 801501a:	460c      	mov	r4, r1
 801501c:	4616      	mov	r6, r2
 801501e:	d505      	bpl.n	801502c <__swrite+0x1e>
 8015020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015024:	2302      	movs	r3, #2
 8015026:	2200      	movs	r2, #0
 8015028:	f000 f8d2 	bl	80151d0 <_lseek_r>
 801502c:	89a3      	ldrh	r3, [r4, #12]
 801502e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015036:	81a3      	strh	r3, [r4, #12]
 8015038:	4632      	mov	r2, r6
 801503a:	463b      	mov	r3, r7
 801503c:	4628      	mov	r0, r5
 801503e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015042:	f000 b8e9 	b.w	8015218 <_write_r>

08015046 <__sseek>:
 8015046:	b510      	push	{r4, lr}
 8015048:	460c      	mov	r4, r1
 801504a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801504e:	f000 f8bf 	bl	80151d0 <_lseek_r>
 8015052:	1c43      	adds	r3, r0, #1
 8015054:	89a3      	ldrh	r3, [r4, #12]
 8015056:	bf15      	itete	ne
 8015058:	6560      	strne	r0, [r4, #84]	@ 0x54
 801505a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801505e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015062:	81a3      	strheq	r3, [r4, #12]
 8015064:	bf18      	it	ne
 8015066:	81a3      	strhne	r3, [r4, #12]
 8015068:	bd10      	pop	{r4, pc}

0801506a <__sclose>:
 801506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801506e:	f000 b841 	b.w	80150f4 <_close_r>

08015072 <memset>:
 8015072:	4402      	add	r2, r0
 8015074:	4603      	mov	r3, r0
 8015076:	4293      	cmp	r3, r2
 8015078:	d100      	bne.n	801507c <memset+0xa>
 801507a:	4770      	bx	lr
 801507c:	f803 1b01 	strb.w	r1, [r3], #1
 8015080:	e7f9      	b.n	8015076 <memset+0x4>

08015082 <strchr>:
 8015082:	b2c9      	uxtb	r1, r1
 8015084:	4603      	mov	r3, r0
 8015086:	4618      	mov	r0, r3
 8015088:	f813 2b01 	ldrb.w	r2, [r3], #1
 801508c:	b112      	cbz	r2, 8015094 <strchr+0x12>
 801508e:	428a      	cmp	r2, r1
 8015090:	d1f9      	bne.n	8015086 <strchr+0x4>
 8015092:	4770      	bx	lr
 8015094:	2900      	cmp	r1, #0
 8015096:	bf18      	it	ne
 8015098:	2000      	movne	r0, #0
 801509a:	4770      	bx	lr

0801509c <strncmp>:
 801509c:	b510      	push	{r4, lr}
 801509e:	b16a      	cbz	r2, 80150bc <strncmp+0x20>
 80150a0:	3901      	subs	r1, #1
 80150a2:	1884      	adds	r4, r0, r2
 80150a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d103      	bne.n	80150b8 <strncmp+0x1c>
 80150b0:	42a0      	cmp	r0, r4
 80150b2:	d001      	beq.n	80150b8 <strncmp+0x1c>
 80150b4:	2a00      	cmp	r2, #0
 80150b6:	d1f5      	bne.n	80150a4 <strncmp+0x8>
 80150b8:	1ad0      	subs	r0, r2, r3
 80150ba:	bd10      	pop	{r4, pc}
 80150bc:	4610      	mov	r0, r2
 80150be:	e7fc      	b.n	80150ba <strncmp+0x1e>

080150c0 <strrchr>:
 80150c0:	b538      	push	{r3, r4, r5, lr}
 80150c2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80150c6:	4603      	mov	r3, r0
 80150c8:	d10e      	bne.n	80150e8 <strrchr+0x28>
 80150ca:	4621      	mov	r1, r4
 80150cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150d0:	f7ff bfd7 	b.w	8015082 <strchr>
 80150d4:	1c43      	adds	r3, r0, #1
 80150d6:	4605      	mov	r5, r0
 80150d8:	4621      	mov	r1, r4
 80150da:	4618      	mov	r0, r3
 80150dc:	f7ff ffd1 	bl	8015082 <strchr>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d1f7      	bne.n	80150d4 <strrchr+0x14>
 80150e4:	4628      	mov	r0, r5
 80150e6:	bd38      	pop	{r3, r4, r5, pc}
 80150e8:	2500      	movs	r5, #0
 80150ea:	e7f5      	b.n	80150d8 <strrchr+0x18>

080150ec <_localeconv_r>:
 80150ec:	4800      	ldr	r0, [pc, #0]	@ (80150f0 <_localeconv_r+0x4>)
 80150ee:	4770      	bx	lr
 80150f0:	2400018c 	.word	0x2400018c

080150f4 <_close_r>:
 80150f4:	b538      	push	{r3, r4, r5, lr}
 80150f6:	4d06      	ldr	r5, [pc, #24]	@ (8015110 <_close_r+0x1c>)
 80150f8:	2300      	movs	r3, #0
 80150fa:	4604      	mov	r4, r0
 80150fc:	4608      	mov	r0, r1
 80150fe:	602b      	str	r3, [r5, #0]
 8015100:	f7f1 f9e9 	bl	80064d6 <_close>
 8015104:	1c43      	adds	r3, r0, #1
 8015106:	d102      	bne.n	801510e <_close_r+0x1a>
 8015108:	682b      	ldr	r3, [r5, #0]
 801510a:	b103      	cbz	r3, 801510e <_close_r+0x1a>
 801510c:	6023      	str	r3, [r4, #0]
 801510e:	bd38      	pop	{r3, r4, r5, pc}
 8015110:	240075d0 	.word	0x240075d0

08015114 <_reclaim_reent>:
 8015114:	4b2d      	ldr	r3, [pc, #180]	@ (80151cc <_reclaim_reent+0xb8>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4283      	cmp	r3, r0
 801511a:	b570      	push	{r4, r5, r6, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	d053      	beq.n	80151c8 <_reclaim_reent+0xb4>
 8015120:	69c3      	ldr	r3, [r0, #28]
 8015122:	b31b      	cbz	r3, 801516c <_reclaim_reent+0x58>
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	b163      	cbz	r3, 8015142 <_reclaim_reent+0x2e>
 8015128:	2500      	movs	r5, #0
 801512a:	69e3      	ldr	r3, [r4, #28]
 801512c:	68db      	ldr	r3, [r3, #12]
 801512e:	5959      	ldr	r1, [r3, r5]
 8015130:	b9b1      	cbnz	r1, 8015160 <_reclaim_reent+0x4c>
 8015132:	3504      	adds	r5, #4
 8015134:	2d80      	cmp	r5, #128	@ 0x80
 8015136:	d1f8      	bne.n	801512a <_reclaim_reent+0x16>
 8015138:	69e3      	ldr	r3, [r4, #28]
 801513a:	4620      	mov	r0, r4
 801513c:	68d9      	ldr	r1, [r3, #12]
 801513e:	f000 feb1 	bl	8015ea4 <_free_r>
 8015142:	69e3      	ldr	r3, [r4, #28]
 8015144:	6819      	ldr	r1, [r3, #0]
 8015146:	b111      	cbz	r1, 801514e <_reclaim_reent+0x3a>
 8015148:	4620      	mov	r0, r4
 801514a:	f000 feab 	bl	8015ea4 <_free_r>
 801514e:	69e3      	ldr	r3, [r4, #28]
 8015150:	689d      	ldr	r5, [r3, #8]
 8015152:	b15d      	cbz	r5, 801516c <_reclaim_reent+0x58>
 8015154:	4629      	mov	r1, r5
 8015156:	4620      	mov	r0, r4
 8015158:	682d      	ldr	r5, [r5, #0]
 801515a:	f000 fea3 	bl	8015ea4 <_free_r>
 801515e:	e7f8      	b.n	8015152 <_reclaim_reent+0x3e>
 8015160:	680e      	ldr	r6, [r1, #0]
 8015162:	4620      	mov	r0, r4
 8015164:	f000 fe9e 	bl	8015ea4 <_free_r>
 8015168:	4631      	mov	r1, r6
 801516a:	e7e1      	b.n	8015130 <_reclaim_reent+0x1c>
 801516c:	6961      	ldr	r1, [r4, #20]
 801516e:	b111      	cbz	r1, 8015176 <_reclaim_reent+0x62>
 8015170:	4620      	mov	r0, r4
 8015172:	f000 fe97 	bl	8015ea4 <_free_r>
 8015176:	69e1      	ldr	r1, [r4, #28]
 8015178:	b111      	cbz	r1, 8015180 <_reclaim_reent+0x6c>
 801517a:	4620      	mov	r0, r4
 801517c:	f000 fe92 	bl	8015ea4 <_free_r>
 8015180:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015182:	b111      	cbz	r1, 801518a <_reclaim_reent+0x76>
 8015184:	4620      	mov	r0, r4
 8015186:	f000 fe8d 	bl	8015ea4 <_free_r>
 801518a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801518c:	b111      	cbz	r1, 8015194 <_reclaim_reent+0x80>
 801518e:	4620      	mov	r0, r4
 8015190:	f000 fe88 	bl	8015ea4 <_free_r>
 8015194:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015196:	b111      	cbz	r1, 801519e <_reclaim_reent+0x8a>
 8015198:	4620      	mov	r0, r4
 801519a:	f000 fe83 	bl	8015ea4 <_free_r>
 801519e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80151a0:	b111      	cbz	r1, 80151a8 <_reclaim_reent+0x94>
 80151a2:	4620      	mov	r0, r4
 80151a4:	f000 fe7e 	bl	8015ea4 <_free_r>
 80151a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80151aa:	b111      	cbz	r1, 80151b2 <_reclaim_reent+0x9e>
 80151ac:	4620      	mov	r0, r4
 80151ae:	f000 fe79 	bl	8015ea4 <_free_r>
 80151b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80151b4:	b111      	cbz	r1, 80151bc <_reclaim_reent+0xa8>
 80151b6:	4620      	mov	r0, r4
 80151b8:	f000 fe74 	bl	8015ea4 <_free_r>
 80151bc:	6a23      	ldr	r3, [r4, #32]
 80151be:	b11b      	cbz	r3, 80151c8 <_reclaim_reent+0xb4>
 80151c0:	4620      	mov	r0, r4
 80151c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151c6:	4718      	bx	r3
 80151c8:	bd70      	pop	{r4, r5, r6, pc}
 80151ca:	bf00      	nop
 80151cc:	24000208 	.word	0x24000208

080151d0 <_lseek_r>:
 80151d0:	b538      	push	{r3, r4, r5, lr}
 80151d2:	4d07      	ldr	r5, [pc, #28]	@ (80151f0 <_lseek_r+0x20>)
 80151d4:	4604      	mov	r4, r0
 80151d6:	4608      	mov	r0, r1
 80151d8:	4611      	mov	r1, r2
 80151da:	2200      	movs	r2, #0
 80151dc:	602a      	str	r2, [r5, #0]
 80151de:	461a      	mov	r2, r3
 80151e0:	f7f1 f9a0 	bl	8006524 <_lseek>
 80151e4:	1c43      	adds	r3, r0, #1
 80151e6:	d102      	bne.n	80151ee <_lseek_r+0x1e>
 80151e8:	682b      	ldr	r3, [r5, #0]
 80151ea:	b103      	cbz	r3, 80151ee <_lseek_r+0x1e>
 80151ec:	6023      	str	r3, [r4, #0]
 80151ee:	bd38      	pop	{r3, r4, r5, pc}
 80151f0:	240075d0 	.word	0x240075d0

080151f4 <_read_r>:
 80151f4:	b538      	push	{r3, r4, r5, lr}
 80151f6:	4d07      	ldr	r5, [pc, #28]	@ (8015214 <_read_r+0x20>)
 80151f8:	4604      	mov	r4, r0
 80151fa:	4608      	mov	r0, r1
 80151fc:	4611      	mov	r1, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	602a      	str	r2, [r5, #0]
 8015202:	461a      	mov	r2, r3
 8015204:	f7f1 f94a 	bl	800649c <_read>
 8015208:	1c43      	adds	r3, r0, #1
 801520a:	d102      	bne.n	8015212 <_read_r+0x1e>
 801520c:	682b      	ldr	r3, [r5, #0]
 801520e:	b103      	cbz	r3, 8015212 <_read_r+0x1e>
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	bd38      	pop	{r3, r4, r5, pc}
 8015214:	240075d0 	.word	0x240075d0

08015218 <_write_r>:
 8015218:	b538      	push	{r3, r4, r5, lr}
 801521a:	4d07      	ldr	r5, [pc, #28]	@ (8015238 <_write_r+0x20>)
 801521c:	4604      	mov	r4, r0
 801521e:	4608      	mov	r0, r1
 8015220:	4611      	mov	r1, r2
 8015222:	2200      	movs	r2, #0
 8015224:	602a      	str	r2, [r5, #0]
 8015226:	461a      	mov	r2, r3
 8015228:	f7eb fff8 	bl	800121c <_write>
 801522c:	1c43      	adds	r3, r0, #1
 801522e:	d102      	bne.n	8015236 <_write_r+0x1e>
 8015230:	682b      	ldr	r3, [r5, #0]
 8015232:	b103      	cbz	r3, 8015236 <_write_r+0x1e>
 8015234:	6023      	str	r3, [r4, #0]
 8015236:	bd38      	pop	{r3, r4, r5, pc}
 8015238:	240075d0 	.word	0x240075d0

0801523c <__errno>:
 801523c:	4b01      	ldr	r3, [pc, #4]	@ (8015244 <__errno+0x8>)
 801523e:	6818      	ldr	r0, [r3, #0]
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	24000208 	.word	0x24000208

08015248 <__libc_init_array>:
 8015248:	b570      	push	{r4, r5, r6, lr}
 801524a:	4d0d      	ldr	r5, [pc, #52]	@ (8015280 <__libc_init_array+0x38>)
 801524c:	4c0d      	ldr	r4, [pc, #52]	@ (8015284 <__libc_init_array+0x3c>)
 801524e:	1b64      	subs	r4, r4, r5
 8015250:	10a4      	asrs	r4, r4, #2
 8015252:	2600      	movs	r6, #0
 8015254:	42a6      	cmp	r6, r4
 8015256:	d109      	bne.n	801526c <__libc_init_array+0x24>
 8015258:	4d0b      	ldr	r5, [pc, #44]	@ (8015288 <__libc_init_array+0x40>)
 801525a:	4c0c      	ldr	r4, [pc, #48]	@ (801528c <__libc_init_array+0x44>)
 801525c:	f002 fd0e 	bl	8017c7c <_init>
 8015260:	1b64      	subs	r4, r4, r5
 8015262:	10a4      	asrs	r4, r4, #2
 8015264:	2600      	movs	r6, #0
 8015266:	42a6      	cmp	r6, r4
 8015268:	d105      	bne.n	8015276 <__libc_init_array+0x2e>
 801526a:	bd70      	pop	{r4, r5, r6, pc}
 801526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015270:	4798      	blx	r3
 8015272:	3601      	adds	r6, #1
 8015274:	e7ee      	b.n	8015254 <__libc_init_array+0xc>
 8015276:	f855 3b04 	ldr.w	r3, [r5], #4
 801527a:	4798      	blx	r3
 801527c:	3601      	adds	r6, #1
 801527e:	e7f2      	b.n	8015266 <__libc_init_array+0x1e>
 8015280:	080184a0 	.word	0x080184a0
 8015284:	080184a0 	.word	0x080184a0
 8015288:	080184a0 	.word	0x080184a0
 801528c:	080184a4 	.word	0x080184a4

08015290 <__retarget_lock_init_recursive>:
 8015290:	4770      	bx	lr

08015292 <__retarget_lock_acquire_recursive>:
 8015292:	4770      	bx	lr

08015294 <__retarget_lock_release_recursive>:
 8015294:	4770      	bx	lr

08015296 <memcpy>:
 8015296:	440a      	add	r2, r1
 8015298:	4291      	cmp	r1, r2
 801529a:	f100 33ff 	add.w	r3, r0, #4294967295
 801529e:	d100      	bne.n	80152a2 <memcpy+0xc>
 80152a0:	4770      	bx	lr
 80152a2:	b510      	push	{r4, lr}
 80152a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152ac:	4291      	cmp	r1, r2
 80152ae:	d1f9      	bne.n	80152a4 <memcpy+0xe>
 80152b0:	bd10      	pop	{r4, pc}
 80152b2:	0000      	movs	r0, r0
 80152b4:	0000      	movs	r0, r0
	...

080152b8 <nan>:
 80152b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80152c0 <nan+0x8>
 80152bc:	4770      	bx	lr
 80152be:	bf00      	nop
 80152c0:	00000000 	.word	0x00000000
 80152c4:	7ff80000 	.word	0x7ff80000

080152c8 <nanf>:
 80152c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80152d0 <nanf+0x8>
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	7fc00000 	.word	0x7fc00000

080152d4 <quorem>:
 80152d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	6903      	ldr	r3, [r0, #16]
 80152da:	690c      	ldr	r4, [r1, #16]
 80152dc:	42a3      	cmp	r3, r4
 80152de:	4607      	mov	r7, r0
 80152e0:	db7e      	blt.n	80153e0 <quorem+0x10c>
 80152e2:	3c01      	subs	r4, #1
 80152e4:	f101 0814 	add.w	r8, r1, #20
 80152e8:	00a3      	lsls	r3, r4, #2
 80152ea:	f100 0514 	add.w	r5, r0, #20
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80152fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80152fe:	3301      	adds	r3, #1
 8015300:	429a      	cmp	r2, r3
 8015302:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015306:	fbb2 f6f3 	udiv	r6, r2, r3
 801530a:	d32e      	bcc.n	801536a <quorem+0x96>
 801530c:	f04f 0a00 	mov.w	sl, #0
 8015310:	46c4      	mov	ip, r8
 8015312:	46ae      	mov	lr, r5
 8015314:	46d3      	mov	fp, sl
 8015316:	f85c 3b04 	ldr.w	r3, [ip], #4
 801531a:	b298      	uxth	r0, r3
 801531c:	fb06 a000 	mla	r0, r6, r0, sl
 8015320:	0c02      	lsrs	r2, r0, #16
 8015322:	0c1b      	lsrs	r3, r3, #16
 8015324:	fb06 2303 	mla	r3, r6, r3, r2
 8015328:	f8de 2000 	ldr.w	r2, [lr]
 801532c:	b280      	uxth	r0, r0
 801532e:	b292      	uxth	r2, r2
 8015330:	1a12      	subs	r2, r2, r0
 8015332:	445a      	add	r2, fp
 8015334:	f8de 0000 	ldr.w	r0, [lr]
 8015338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801533c:	b29b      	uxth	r3, r3
 801533e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015342:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015346:	b292      	uxth	r2, r2
 8015348:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801534c:	45e1      	cmp	r9, ip
 801534e:	f84e 2b04 	str.w	r2, [lr], #4
 8015352:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015356:	d2de      	bcs.n	8015316 <quorem+0x42>
 8015358:	9b00      	ldr	r3, [sp, #0]
 801535a:	58eb      	ldr	r3, [r5, r3]
 801535c:	b92b      	cbnz	r3, 801536a <quorem+0x96>
 801535e:	9b01      	ldr	r3, [sp, #4]
 8015360:	3b04      	subs	r3, #4
 8015362:	429d      	cmp	r5, r3
 8015364:	461a      	mov	r2, r3
 8015366:	d32f      	bcc.n	80153c8 <quorem+0xf4>
 8015368:	613c      	str	r4, [r7, #16]
 801536a:	4638      	mov	r0, r7
 801536c:	f001 fca2 	bl	8016cb4 <__mcmp>
 8015370:	2800      	cmp	r0, #0
 8015372:	db25      	blt.n	80153c0 <quorem+0xec>
 8015374:	4629      	mov	r1, r5
 8015376:	2000      	movs	r0, #0
 8015378:	f858 2b04 	ldr.w	r2, [r8], #4
 801537c:	f8d1 c000 	ldr.w	ip, [r1]
 8015380:	fa1f fe82 	uxth.w	lr, r2
 8015384:	fa1f f38c 	uxth.w	r3, ip
 8015388:	eba3 030e 	sub.w	r3, r3, lr
 801538c:	4403      	add	r3, r0
 801538e:	0c12      	lsrs	r2, r2, #16
 8015390:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015394:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015398:	b29b      	uxth	r3, r3
 801539a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801539e:	45c1      	cmp	r9, r8
 80153a0:	f841 3b04 	str.w	r3, [r1], #4
 80153a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80153a8:	d2e6      	bcs.n	8015378 <quorem+0xa4>
 80153aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153b2:	b922      	cbnz	r2, 80153be <quorem+0xea>
 80153b4:	3b04      	subs	r3, #4
 80153b6:	429d      	cmp	r5, r3
 80153b8:	461a      	mov	r2, r3
 80153ba:	d30b      	bcc.n	80153d4 <quorem+0x100>
 80153bc:	613c      	str	r4, [r7, #16]
 80153be:	3601      	adds	r6, #1
 80153c0:	4630      	mov	r0, r6
 80153c2:	b003      	add	sp, #12
 80153c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c8:	6812      	ldr	r2, [r2, #0]
 80153ca:	3b04      	subs	r3, #4
 80153cc:	2a00      	cmp	r2, #0
 80153ce:	d1cb      	bne.n	8015368 <quorem+0x94>
 80153d0:	3c01      	subs	r4, #1
 80153d2:	e7c6      	b.n	8015362 <quorem+0x8e>
 80153d4:	6812      	ldr	r2, [r2, #0]
 80153d6:	3b04      	subs	r3, #4
 80153d8:	2a00      	cmp	r2, #0
 80153da:	d1ef      	bne.n	80153bc <quorem+0xe8>
 80153dc:	3c01      	subs	r4, #1
 80153de:	e7ea      	b.n	80153b6 <quorem+0xe2>
 80153e0:	2000      	movs	r0, #0
 80153e2:	e7ee      	b.n	80153c2 <quorem+0xee>
 80153e4:	0000      	movs	r0, r0
	...

080153e8 <_dtoa_r>:
 80153e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ec:	ed2d 8b02 	vpush	{d8}
 80153f0:	69c7      	ldr	r7, [r0, #28]
 80153f2:	b091      	sub	sp, #68	@ 0x44
 80153f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80153f8:	ec55 4b10 	vmov	r4, r5, d0
 80153fc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80153fe:	9107      	str	r1, [sp, #28]
 8015400:	4681      	mov	r9, r0
 8015402:	9209      	str	r2, [sp, #36]	@ 0x24
 8015404:	930d      	str	r3, [sp, #52]	@ 0x34
 8015406:	b97f      	cbnz	r7, 8015428 <_dtoa_r+0x40>
 8015408:	2010      	movs	r0, #16
 801540a:	f001 f8cf 	bl	80165ac <malloc>
 801540e:	4602      	mov	r2, r0
 8015410:	f8c9 001c 	str.w	r0, [r9, #28]
 8015414:	b920      	cbnz	r0, 8015420 <_dtoa_r+0x38>
 8015416:	4ba0      	ldr	r3, [pc, #640]	@ (8015698 <_dtoa_r+0x2b0>)
 8015418:	21ef      	movs	r1, #239	@ 0xef
 801541a:	48a0      	ldr	r0, [pc, #640]	@ (801569c <_dtoa_r+0x2b4>)
 801541c:	f002 f8d4 	bl	80175c8 <__assert_func>
 8015420:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015424:	6007      	str	r7, [r0, #0]
 8015426:	60c7      	str	r7, [r0, #12]
 8015428:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801542c:	6819      	ldr	r1, [r3, #0]
 801542e:	b159      	cbz	r1, 8015448 <_dtoa_r+0x60>
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	604a      	str	r2, [r1, #4]
 8015434:	2301      	movs	r3, #1
 8015436:	4093      	lsls	r3, r2
 8015438:	608b      	str	r3, [r1, #8]
 801543a:	4648      	mov	r0, r9
 801543c:	f001 f9be 	bl	80167bc <_Bfree>
 8015440:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015444:	2200      	movs	r2, #0
 8015446:	601a      	str	r2, [r3, #0]
 8015448:	1e2b      	subs	r3, r5, #0
 801544a:	bfbb      	ittet	lt
 801544c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015450:	9303      	strlt	r3, [sp, #12]
 8015452:	2300      	movge	r3, #0
 8015454:	2201      	movlt	r2, #1
 8015456:	bfac      	ite	ge
 8015458:	6033      	strge	r3, [r6, #0]
 801545a:	6032      	strlt	r2, [r6, #0]
 801545c:	4b90      	ldr	r3, [pc, #576]	@ (80156a0 <_dtoa_r+0x2b8>)
 801545e:	9e03      	ldr	r6, [sp, #12]
 8015460:	43b3      	bics	r3, r6
 8015462:	d110      	bne.n	8015486 <_dtoa_r+0x9e>
 8015464:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015466:	f242 730f 	movw	r3, #9999	@ 0x270f
 801546a:	6013      	str	r3, [r2, #0]
 801546c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015470:	4323      	orrs	r3, r4
 8015472:	f000 84e6 	beq.w	8015e42 <_dtoa_r+0xa5a>
 8015476:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015478:	4f8a      	ldr	r7, [pc, #552]	@ (80156a4 <_dtoa_r+0x2bc>)
 801547a:	2b00      	cmp	r3, #0
 801547c:	f000 84e8 	beq.w	8015e50 <_dtoa_r+0xa68>
 8015480:	1cfb      	adds	r3, r7, #3
 8015482:	f000 bce3 	b.w	8015e4c <_dtoa_r+0xa64>
 8015486:	ed9d 8b02 	vldr	d8, [sp, #8]
 801548a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015492:	d10a      	bne.n	80154aa <_dtoa_r+0xc2>
 8015494:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015496:	2301      	movs	r3, #1
 8015498:	6013      	str	r3, [r2, #0]
 801549a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801549c:	b113      	cbz	r3, 80154a4 <_dtoa_r+0xbc>
 801549e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80154a0:	4b81      	ldr	r3, [pc, #516]	@ (80156a8 <_dtoa_r+0x2c0>)
 80154a2:	6013      	str	r3, [r2, #0]
 80154a4:	4f81      	ldr	r7, [pc, #516]	@ (80156ac <_dtoa_r+0x2c4>)
 80154a6:	f000 bcd3 	b.w	8015e50 <_dtoa_r+0xa68>
 80154aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80154ac:	a90f      	add	r1, sp, #60	@ 0x3c
 80154ae:	4648      	mov	r0, r9
 80154b0:	eeb0 0b48 	vmov.f64	d0, d8
 80154b4:	f001 fd1e 	bl	8016ef4 <__d2b>
 80154b8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80154bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154be:	9001      	str	r0, [sp, #4]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d045      	beq.n	8015550 <_dtoa_r+0x168>
 80154c4:	eeb0 7b48 	vmov.f64	d7, d8
 80154c8:	ee18 1a90 	vmov	r1, s17
 80154cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80154d0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80154d4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80154d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80154dc:	2500      	movs	r5, #0
 80154de:	ee07 1a90 	vmov	s15, r1
 80154e2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80154e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015680 <_dtoa_r+0x298>
 80154ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80154ee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015688 <_dtoa_r+0x2a0>
 80154f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80154f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015690 <_dtoa_r+0x2a8>
 80154fa:	ee07 3a90 	vmov	s15, r3
 80154fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015502:	eeb0 7b46 	vmov.f64	d7, d6
 8015506:	eea4 7b05 	vfma.f64	d7, d4, d5
 801550a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801550e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015516:	ee16 8a90 	vmov	r8, s13
 801551a:	d508      	bpl.n	801552e <_dtoa_r+0x146>
 801551c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015520:	eeb4 6b47 	vcmp.f64	d6, d7
 8015524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015528:	bf18      	it	ne
 801552a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801552e:	f1b8 0f16 	cmp.w	r8, #22
 8015532:	d82b      	bhi.n	801558c <_dtoa_r+0x1a4>
 8015534:	495e      	ldr	r1, [pc, #376]	@ (80156b0 <_dtoa_r+0x2c8>)
 8015536:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801553a:	ed91 7b00 	vldr	d7, [r1]
 801553e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015546:	d501      	bpl.n	801554c <_dtoa_r+0x164>
 8015548:	f108 38ff 	add.w	r8, r8, #4294967295
 801554c:	2100      	movs	r1, #0
 801554e:	e01e      	b.n	801558e <_dtoa_r+0x1a6>
 8015550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015552:	4413      	add	r3, r2
 8015554:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015558:	2920      	cmp	r1, #32
 801555a:	bfc1      	itttt	gt
 801555c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015560:	408e      	lslgt	r6, r1
 8015562:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015566:	fa24 f101 	lsrgt.w	r1, r4, r1
 801556a:	bfd6      	itet	le
 801556c:	f1c1 0120 	rsble	r1, r1, #32
 8015570:	4331      	orrgt	r1, r6
 8015572:	fa04 f101 	lslle.w	r1, r4, r1
 8015576:	ee07 1a90 	vmov	s15, r1
 801557a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801557e:	3b01      	subs	r3, #1
 8015580:	ee17 1a90 	vmov	r1, s15
 8015584:	2501      	movs	r5, #1
 8015586:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801558a:	e7a8      	b.n	80154de <_dtoa_r+0xf6>
 801558c:	2101      	movs	r1, #1
 801558e:	1ad2      	subs	r2, r2, r3
 8015590:	1e53      	subs	r3, r2, #1
 8015592:	9306      	str	r3, [sp, #24]
 8015594:	bf45      	ittet	mi
 8015596:	f1c2 0301 	rsbmi	r3, r2, #1
 801559a:	9304      	strmi	r3, [sp, #16]
 801559c:	2300      	movpl	r3, #0
 801559e:	2300      	movmi	r3, #0
 80155a0:	bf4c      	ite	mi
 80155a2:	9306      	strmi	r3, [sp, #24]
 80155a4:	9304      	strpl	r3, [sp, #16]
 80155a6:	f1b8 0f00 	cmp.w	r8, #0
 80155aa:	910c      	str	r1, [sp, #48]	@ 0x30
 80155ac:	db18      	blt.n	80155e0 <_dtoa_r+0x1f8>
 80155ae:	9b06      	ldr	r3, [sp, #24]
 80155b0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80155b4:	4443      	add	r3, r8
 80155b6:	9306      	str	r3, [sp, #24]
 80155b8:	2300      	movs	r3, #0
 80155ba:	9a07      	ldr	r2, [sp, #28]
 80155bc:	2a09      	cmp	r2, #9
 80155be:	d845      	bhi.n	801564c <_dtoa_r+0x264>
 80155c0:	2a05      	cmp	r2, #5
 80155c2:	bfc4      	itt	gt
 80155c4:	3a04      	subgt	r2, #4
 80155c6:	9207      	strgt	r2, [sp, #28]
 80155c8:	9a07      	ldr	r2, [sp, #28]
 80155ca:	f1a2 0202 	sub.w	r2, r2, #2
 80155ce:	bfcc      	ite	gt
 80155d0:	2400      	movgt	r4, #0
 80155d2:	2401      	movle	r4, #1
 80155d4:	2a03      	cmp	r2, #3
 80155d6:	d844      	bhi.n	8015662 <_dtoa_r+0x27a>
 80155d8:	e8df f002 	tbb	[pc, r2]
 80155dc:	0b173634 	.word	0x0b173634
 80155e0:	9b04      	ldr	r3, [sp, #16]
 80155e2:	2200      	movs	r2, #0
 80155e4:	eba3 0308 	sub.w	r3, r3, r8
 80155e8:	9304      	str	r3, [sp, #16]
 80155ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80155ec:	f1c8 0300 	rsb	r3, r8, #0
 80155f0:	e7e3      	b.n	80155ba <_dtoa_r+0x1d2>
 80155f2:	2201      	movs	r2, #1
 80155f4:	9208      	str	r2, [sp, #32]
 80155f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155f8:	eb08 0b02 	add.w	fp, r8, r2
 80155fc:	f10b 0a01 	add.w	sl, fp, #1
 8015600:	4652      	mov	r2, sl
 8015602:	2a01      	cmp	r2, #1
 8015604:	bfb8      	it	lt
 8015606:	2201      	movlt	r2, #1
 8015608:	e006      	b.n	8015618 <_dtoa_r+0x230>
 801560a:	2201      	movs	r2, #1
 801560c:	9208      	str	r2, [sp, #32]
 801560e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015610:	2a00      	cmp	r2, #0
 8015612:	dd29      	ble.n	8015668 <_dtoa_r+0x280>
 8015614:	4693      	mov	fp, r2
 8015616:	4692      	mov	sl, r2
 8015618:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801561c:	2100      	movs	r1, #0
 801561e:	2004      	movs	r0, #4
 8015620:	f100 0614 	add.w	r6, r0, #20
 8015624:	4296      	cmp	r6, r2
 8015626:	d926      	bls.n	8015676 <_dtoa_r+0x28e>
 8015628:	6079      	str	r1, [r7, #4]
 801562a:	4648      	mov	r0, r9
 801562c:	9305      	str	r3, [sp, #20]
 801562e:	f001 f885 	bl	801673c <_Balloc>
 8015632:	9b05      	ldr	r3, [sp, #20]
 8015634:	4607      	mov	r7, r0
 8015636:	2800      	cmp	r0, #0
 8015638:	d13e      	bne.n	80156b8 <_dtoa_r+0x2d0>
 801563a:	4b1e      	ldr	r3, [pc, #120]	@ (80156b4 <_dtoa_r+0x2cc>)
 801563c:	4602      	mov	r2, r0
 801563e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015642:	e6ea      	b.n	801541a <_dtoa_r+0x32>
 8015644:	2200      	movs	r2, #0
 8015646:	e7e1      	b.n	801560c <_dtoa_r+0x224>
 8015648:	2200      	movs	r2, #0
 801564a:	e7d3      	b.n	80155f4 <_dtoa_r+0x20c>
 801564c:	2401      	movs	r4, #1
 801564e:	2200      	movs	r2, #0
 8015650:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015654:	f04f 3bff 	mov.w	fp, #4294967295
 8015658:	2100      	movs	r1, #0
 801565a:	46da      	mov	sl, fp
 801565c:	2212      	movs	r2, #18
 801565e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015660:	e7da      	b.n	8015618 <_dtoa_r+0x230>
 8015662:	2201      	movs	r2, #1
 8015664:	9208      	str	r2, [sp, #32]
 8015666:	e7f5      	b.n	8015654 <_dtoa_r+0x26c>
 8015668:	f04f 0b01 	mov.w	fp, #1
 801566c:	46da      	mov	sl, fp
 801566e:	465a      	mov	r2, fp
 8015670:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015674:	e7d0      	b.n	8015618 <_dtoa_r+0x230>
 8015676:	3101      	adds	r1, #1
 8015678:	0040      	lsls	r0, r0, #1
 801567a:	e7d1      	b.n	8015620 <_dtoa_r+0x238>
 801567c:	f3af 8000 	nop.w
 8015680:	636f4361 	.word	0x636f4361
 8015684:	3fd287a7 	.word	0x3fd287a7
 8015688:	8b60c8b3 	.word	0x8b60c8b3
 801568c:	3fc68a28 	.word	0x3fc68a28
 8015690:	509f79fb 	.word	0x509f79fb
 8015694:	3fd34413 	.word	0x3fd34413
 8015698:	08017f73 	.word	0x08017f73
 801569c:	08017f8a 	.word	0x08017f8a
 80156a0:	7ff00000 	.word	0x7ff00000
 80156a4:	08017f6f 	.word	0x08017f6f
 80156a8:	08017f3b 	.word	0x08017f3b
 80156ac:	08017f3a 	.word	0x08017f3a
 80156b0:	08018188 	.word	0x08018188
 80156b4:	08017fe2 	.word	0x08017fe2
 80156b8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80156bc:	f1ba 0f0e 	cmp.w	sl, #14
 80156c0:	6010      	str	r0, [r2, #0]
 80156c2:	d86e      	bhi.n	80157a2 <_dtoa_r+0x3ba>
 80156c4:	2c00      	cmp	r4, #0
 80156c6:	d06c      	beq.n	80157a2 <_dtoa_r+0x3ba>
 80156c8:	f1b8 0f00 	cmp.w	r8, #0
 80156cc:	f340 80b4 	ble.w	8015838 <_dtoa_r+0x450>
 80156d0:	4ac8      	ldr	r2, [pc, #800]	@ (80159f4 <_dtoa_r+0x60c>)
 80156d2:	f008 010f 	and.w	r1, r8, #15
 80156d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80156da:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80156de:	ed92 7b00 	vldr	d7, [r2]
 80156e2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80156e6:	f000 809b 	beq.w	8015820 <_dtoa_r+0x438>
 80156ea:	4ac3      	ldr	r2, [pc, #780]	@ (80159f8 <_dtoa_r+0x610>)
 80156ec:	ed92 6b08 	vldr	d6, [r2, #32]
 80156f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80156f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80156f8:	f001 010f 	and.w	r1, r1, #15
 80156fc:	2203      	movs	r2, #3
 80156fe:	48be      	ldr	r0, [pc, #760]	@ (80159f8 <_dtoa_r+0x610>)
 8015700:	2900      	cmp	r1, #0
 8015702:	f040 808f 	bne.w	8015824 <_dtoa_r+0x43c>
 8015706:	ed9d 6b02 	vldr	d6, [sp, #8]
 801570a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801570e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015712:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015718:	2900      	cmp	r1, #0
 801571a:	f000 80b3 	beq.w	8015884 <_dtoa_r+0x49c>
 801571e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015722:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572a:	f140 80ab 	bpl.w	8015884 <_dtoa_r+0x49c>
 801572e:	f1ba 0f00 	cmp.w	sl, #0
 8015732:	f000 80a7 	beq.w	8015884 <_dtoa_r+0x49c>
 8015736:	f1bb 0f00 	cmp.w	fp, #0
 801573a:	dd30      	ble.n	801579e <_dtoa_r+0x3b6>
 801573c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015748:	f108 31ff 	add.w	r1, r8, #4294967295
 801574c:	9105      	str	r1, [sp, #20]
 801574e:	3201      	adds	r2, #1
 8015750:	465c      	mov	r4, fp
 8015752:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015756:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801575a:	ee07 2a90 	vmov	s15, r2
 801575e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015762:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015766:	ee15 2a90 	vmov	r2, s11
 801576a:	ec51 0b15 	vmov	r0, r1, d5
 801576e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015772:	2c00      	cmp	r4, #0
 8015774:	f040 808a 	bne.w	801588c <_dtoa_r+0x4a4>
 8015778:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801577c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015780:	ec41 0b17 	vmov	d7, r0, r1
 8015784:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578c:	f300 826a 	bgt.w	8015c64 <_dtoa_r+0x87c>
 8015790:	eeb1 7b47 	vneg.f64	d7, d7
 8015794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579c:	d423      	bmi.n	80157e6 <_dtoa_r+0x3fe>
 801579e:	ed8d 8b02 	vstr	d8, [sp, #8]
 80157a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80157a4:	2a00      	cmp	r2, #0
 80157a6:	f2c0 8129 	blt.w	80159fc <_dtoa_r+0x614>
 80157aa:	f1b8 0f0e 	cmp.w	r8, #14
 80157ae:	f300 8125 	bgt.w	80159fc <_dtoa_r+0x614>
 80157b2:	4b90      	ldr	r3, [pc, #576]	@ (80159f4 <_dtoa_r+0x60c>)
 80157b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80157b8:	ed93 6b00 	vldr	d6, [r3]
 80157bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157be:	2b00      	cmp	r3, #0
 80157c0:	f280 80c8 	bge.w	8015954 <_dtoa_r+0x56c>
 80157c4:	f1ba 0f00 	cmp.w	sl, #0
 80157c8:	f300 80c4 	bgt.w	8015954 <_dtoa_r+0x56c>
 80157cc:	d10b      	bne.n	80157e6 <_dtoa_r+0x3fe>
 80157ce:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80157d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80157d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80157da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80157de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e2:	f2c0 823c 	blt.w	8015c5e <_dtoa_r+0x876>
 80157e6:	2400      	movs	r4, #0
 80157e8:	4625      	mov	r5, r4
 80157ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157ec:	43db      	mvns	r3, r3
 80157ee:	9305      	str	r3, [sp, #20]
 80157f0:	463e      	mov	r6, r7
 80157f2:	f04f 0800 	mov.w	r8, #0
 80157f6:	4621      	mov	r1, r4
 80157f8:	4648      	mov	r0, r9
 80157fa:	f000 ffdf 	bl	80167bc <_Bfree>
 80157fe:	2d00      	cmp	r5, #0
 8015800:	f000 80a2 	beq.w	8015948 <_dtoa_r+0x560>
 8015804:	f1b8 0f00 	cmp.w	r8, #0
 8015808:	d005      	beq.n	8015816 <_dtoa_r+0x42e>
 801580a:	45a8      	cmp	r8, r5
 801580c:	d003      	beq.n	8015816 <_dtoa_r+0x42e>
 801580e:	4641      	mov	r1, r8
 8015810:	4648      	mov	r0, r9
 8015812:	f000 ffd3 	bl	80167bc <_Bfree>
 8015816:	4629      	mov	r1, r5
 8015818:	4648      	mov	r0, r9
 801581a:	f000 ffcf 	bl	80167bc <_Bfree>
 801581e:	e093      	b.n	8015948 <_dtoa_r+0x560>
 8015820:	2202      	movs	r2, #2
 8015822:	e76c      	b.n	80156fe <_dtoa_r+0x316>
 8015824:	07cc      	lsls	r4, r1, #31
 8015826:	d504      	bpl.n	8015832 <_dtoa_r+0x44a>
 8015828:	ed90 6b00 	vldr	d6, [r0]
 801582c:	3201      	adds	r2, #1
 801582e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015832:	1049      	asrs	r1, r1, #1
 8015834:	3008      	adds	r0, #8
 8015836:	e763      	b.n	8015700 <_dtoa_r+0x318>
 8015838:	d022      	beq.n	8015880 <_dtoa_r+0x498>
 801583a:	f1c8 0100 	rsb	r1, r8, #0
 801583e:	4a6d      	ldr	r2, [pc, #436]	@ (80159f4 <_dtoa_r+0x60c>)
 8015840:	f001 000f 	and.w	r0, r1, #15
 8015844:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015848:	ed92 7b00 	vldr	d7, [r2]
 801584c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015850:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015854:	4868      	ldr	r0, [pc, #416]	@ (80159f8 <_dtoa_r+0x610>)
 8015856:	1109      	asrs	r1, r1, #4
 8015858:	2400      	movs	r4, #0
 801585a:	2202      	movs	r2, #2
 801585c:	b929      	cbnz	r1, 801586a <_dtoa_r+0x482>
 801585e:	2c00      	cmp	r4, #0
 8015860:	f43f af57 	beq.w	8015712 <_dtoa_r+0x32a>
 8015864:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015868:	e753      	b.n	8015712 <_dtoa_r+0x32a>
 801586a:	07ce      	lsls	r6, r1, #31
 801586c:	d505      	bpl.n	801587a <_dtoa_r+0x492>
 801586e:	ed90 6b00 	vldr	d6, [r0]
 8015872:	3201      	adds	r2, #1
 8015874:	2401      	movs	r4, #1
 8015876:	ee27 7b06 	vmul.f64	d7, d7, d6
 801587a:	1049      	asrs	r1, r1, #1
 801587c:	3008      	adds	r0, #8
 801587e:	e7ed      	b.n	801585c <_dtoa_r+0x474>
 8015880:	2202      	movs	r2, #2
 8015882:	e746      	b.n	8015712 <_dtoa_r+0x32a>
 8015884:	f8cd 8014 	str.w	r8, [sp, #20]
 8015888:	4654      	mov	r4, sl
 801588a:	e762      	b.n	8015752 <_dtoa_r+0x36a>
 801588c:	4a59      	ldr	r2, [pc, #356]	@ (80159f4 <_dtoa_r+0x60c>)
 801588e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015892:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015896:	9a08      	ldr	r2, [sp, #32]
 8015898:	ec41 0b17 	vmov	d7, r0, r1
 801589c:	443c      	add	r4, r7
 801589e:	b34a      	cbz	r2, 80158f4 <_dtoa_r+0x50c>
 80158a0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80158a4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80158a8:	463e      	mov	r6, r7
 80158aa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80158ae:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80158b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80158b6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80158ba:	ee14 2a90 	vmov	r2, s9
 80158be:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80158c2:	3230      	adds	r2, #48	@ 0x30
 80158c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80158c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80158cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d0:	f806 2b01 	strb.w	r2, [r6], #1
 80158d4:	d438      	bmi.n	8015948 <_dtoa_r+0x560>
 80158d6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80158da:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80158de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158e2:	d46e      	bmi.n	80159c2 <_dtoa_r+0x5da>
 80158e4:	42a6      	cmp	r6, r4
 80158e6:	f43f af5a 	beq.w	801579e <_dtoa_r+0x3b6>
 80158ea:	ee27 7b03 	vmul.f64	d7, d7, d3
 80158ee:	ee26 6b03 	vmul.f64	d6, d6, d3
 80158f2:	e7e0      	b.n	80158b6 <_dtoa_r+0x4ce>
 80158f4:	4621      	mov	r1, r4
 80158f6:	463e      	mov	r6, r7
 80158f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80158fc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015900:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015904:	ee14 2a90 	vmov	r2, s9
 8015908:	3230      	adds	r2, #48	@ 0x30
 801590a:	f806 2b01 	strb.w	r2, [r6], #1
 801590e:	42a6      	cmp	r6, r4
 8015910:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015914:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015918:	d119      	bne.n	801594e <_dtoa_r+0x566>
 801591a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801591e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015922:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801592a:	dc4a      	bgt.n	80159c2 <_dtoa_r+0x5da>
 801592c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015930:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015938:	f57f af31 	bpl.w	801579e <_dtoa_r+0x3b6>
 801593c:	460e      	mov	r6, r1
 801593e:	3901      	subs	r1, #1
 8015940:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015944:	2b30      	cmp	r3, #48	@ 0x30
 8015946:	d0f9      	beq.n	801593c <_dtoa_r+0x554>
 8015948:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801594c:	e027      	b.n	801599e <_dtoa_r+0x5b6>
 801594e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015952:	e7d5      	b.n	8015900 <_dtoa_r+0x518>
 8015954:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015958:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801595c:	463e      	mov	r6, r7
 801595e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015962:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015966:	ee15 3a10 	vmov	r3, s10
 801596a:	3330      	adds	r3, #48	@ 0x30
 801596c:	f806 3b01 	strb.w	r3, [r6], #1
 8015970:	1bf3      	subs	r3, r6, r7
 8015972:	459a      	cmp	sl, r3
 8015974:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015978:	eea3 7b46 	vfms.f64	d7, d3, d6
 801597c:	d132      	bne.n	80159e4 <_dtoa_r+0x5fc>
 801597e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015982:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801598a:	dc18      	bgt.n	80159be <_dtoa_r+0x5d6>
 801598c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015994:	d103      	bne.n	801599e <_dtoa_r+0x5b6>
 8015996:	ee15 3a10 	vmov	r3, s10
 801599a:	07db      	lsls	r3, r3, #31
 801599c:	d40f      	bmi.n	80159be <_dtoa_r+0x5d6>
 801599e:	9901      	ldr	r1, [sp, #4]
 80159a0:	4648      	mov	r0, r9
 80159a2:	f000 ff0b 	bl	80167bc <_Bfree>
 80159a6:	2300      	movs	r3, #0
 80159a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80159aa:	7033      	strb	r3, [r6, #0]
 80159ac:	f108 0301 	add.w	r3, r8, #1
 80159b0:	6013      	str	r3, [r2, #0]
 80159b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f000 824b 	beq.w	8015e50 <_dtoa_r+0xa68>
 80159ba:	601e      	str	r6, [r3, #0]
 80159bc:	e248      	b.n	8015e50 <_dtoa_r+0xa68>
 80159be:	f8cd 8014 	str.w	r8, [sp, #20]
 80159c2:	4633      	mov	r3, r6
 80159c4:	461e      	mov	r6, r3
 80159c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80159ca:	2a39      	cmp	r2, #57	@ 0x39
 80159cc:	d106      	bne.n	80159dc <_dtoa_r+0x5f4>
 80159ce:	429f      	cmp	r7, r3
 80159d0:	d1f8      	bne.n	80159c4 <_dtoa_r+0x5dc>
 80159d2:	9a05      	ldr	r2, [sp, #20]
 80159d4:	3201      	adds	r2, #1
 80159d6:	9205      	str	r2, [sp, #20]
 80159d8:	2230      	movs	r2, #48	@ 0x30
 80159da:	703a      	strb	r2, [r7, #0]
 80159dc:	781a      	ldrb	r2, [r3, #0]
 80159de:	3201      	adds	r2, #1
 80159e0:	701a      	strb	r2, [r3, #0]
 80159e2:	e7b1      	b.n	8015948 <_dtoa_r+0x560>
 80159e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80159e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80159ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f0:	d1b5      	bne.n	801595e <_dtoa_r+0x576>
 80159f2:	e7d4      	b.n	801599e <_dtoa_r+0x5b6>
 80159f4:	08018188 	.word	0x08018188
 80159f8:	08018160 	.word	0x08018160
 80159fc:	9908      	ldr	r1, [sp, #32]
 80159fe:	2900      	cmp	r1, #0
 8015a00:	f000 80e9 	beq.w	8015bd6 <_dtoa_r+0x7ee>
 8015a04:	9907      	ldr	r1, [sp, #28]
 8015a06:	2901      	cmp	r1, #1
 8015a08:	f300 80cb 	bgt.w	8015ba2 <_dtoa_r+0x7ba>
 8015a0c:	2d00      	cmp	r5, #0
 8015a0e:	f000 80c4 	beq.w	8015b9a <_dtoa_r+0x7b2>
 8015a12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015a16:	9e04      	ldr	r6, [sp, #16]
 8015a18:	461c      	mov	r4, r3
 8015a1a:	9305      	str	r3, [sp, #20]
 8015a1c:	9b04      	ldr	r3, [sp, #16]
 8015a1e:	4413      	add	r3, r2
 8015a20:	9304      	str	r3, [sp, #16]
 8015a22:	9b06      	ldr	r3, [sp, #24]
 8015a24:	2101      	movs	r1, #1
 8015a26:	4413      	add	r3, r2
 8015a28:	4648      	mov	r0, r9
 8015a2a:	9306      	str	r3, [sp, #24]
 8015a2c:	f000 ffc4 	bl	80169b8 <__i2b>
 8015a30:	9b05      	ldr	r3, [sp, #20]
 8015a32:	4605      	mov	r5, r0
 8015a34:	b166      	cbz	r6, 8015a50 <_dtoa_r+0x668>
 8015a36:	9a06      	ldr	r2, [sp, #24]
 8015a38:	2a00      	cmp	r2, #0
 8015a3a:	dd09      	ble.n	8015a50 <_dtoa_r+0x668>
 8015a3c:	42b2      	cmp	r2, r6
 8015a3e:	9904      	ldr	r1, [sp, #16]
 8015a40:	bfa8      	it	ge
 8015a42:	4632      	movge	r2, r6
 8015a44:	1a89      	subs	r1, r1, r2
 8015a46:	9104      	str	r1, [sp, #16]
 8015a48:	9906      	ldr	r1, [sp, #24]
 8015a4a:	1ab6      	subs	r6, r6, r2
 8015a4c:	1a8a      	subs	r2, r1, r2
 8015a4e:	9206      	str	r2, [sp, #24]
 8015a50:	b30b      	cbz	r3, 8015a96 <_dtoa_r+0x6ae>
 8015a52:	9a08      	ldr	r2, [sp, #32]
 8015a54:	2a00      	cmp	r2, #0
 8015a56:	f000 80c5 	beq.w	8015be4 <_dtoa_r+0x7fc>
 8015a5a:	2c00      	cmp	r4, #0
 8015a5c:	f000 80bf 	beq.w	8015bde <_dtoa_r+0x7f6>
 8015a60:	4629      	mov	r1, r5
 8015a62:	4622      	mov	r2, r4
 8015a64:	4648      	mov	r0, r9
 8015a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015a68:	f001 f85e 	bl	8016b28 <__pow5mult>
 8015a6c:	9a01      	ldr	r2, [sp, #4]
 8015a6e:	4601      	mov	r1, r0
 8015a70:	4605      	mov	r5, r0
 8015a72:	4648      	mov	r0, r9
 8015a74:	f000 ffb6 	bl	80169e4 <__multiply>
 8015a78:	9901      	ldr	r1, [sp, #4]
 8015a7a:	9005      	str	r0, [sp, #20]
 8015a7c:	4648      	mov	r0, r9
 8015a7e:	f000 fe9d 	bl	80167bc <_Bfree>
 8015a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015a84:	1b1b      	subs	r3, r3, r4
 8015a86:	f000 80b0 	beq.w	8015bea <_dtoa_r+0x802>
 8015a8a:	9905      	ldr	r1, [sp, #20]
 8015a8c:	461a      	mov	r2, r3
 8015a8e:	4648      	mov	r0, r9
 8015a90:	f001 f84a 	bl	8016b28 <__pow5mult>
 8015a94:	9001      	str	r0, [sp, #4]
 8015a96:	2101      	movs	r1, #1
 8015a98:	4648      	mov	r0, r9
 8015a9a:	f000 ff8d 	bl	80169b8 <__i2b>
 8015a9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f000 81da 	beq.w	8015e5c <_dtoa_r+0xa74>
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	4601      	mov	r1, r0
 8015aac:	4648      	mov	r0, r9
 8015aae:	f001 f83b 	bl	8016b28 <__pow5mult>
 8015ab2:	9b07      	ldr	r3, [sp, #28]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	f300 80a0 	bgt.w	8015bfc <_dtoa_r+0x814>
 8015abc:	9b02      	ldr	r3, [sp, #8]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	f040 8096 	bne.w	8015bf0 <_dtoa_r+0x808>
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015aca:	2a00      	cmp	r2, #0
 8015acc:	f040 8092 	bne.w	8015bf4 <_dtoa_r+0x80c>
 8015ad0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015ad4:	0d12      	lsrs	r2, r2, #20
 8015ad6:	0512      	lsls	r2, r2, #20
 8015ad8:	2a00      	cmp	r2, #0
 8015ada:	f000 808d 	beq.w	8015bf8 <_dtoa_r+0x810>
 8015ade:	9b04      	ldr	r3, [sp, #16]
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	9304      	str	r3, [sp, #16]
 8015ae4:	9b06      	ldr	r3, [sp, #24]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	9306      	str	r3, [sp, #24]
 8015aea:	2301      	movs	r3, #1
 8015aec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f000 81b9 	beq.w	8015e68 <_dtoa_r+0xa80>
 8015af6:	6922      	ldr	r2, [r4, #16]
 8015af8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015afc:	6910      	ldr	r0, [r2, #16]
 8015afe:	f000 ff0f 	bl	8016920 <__hi0bits>
 8015b02:	f1c0 0020 	rsb	r0, r0, #32
 8015b06:	9b06      	ldr	r3, [sp, #24]
 8015b08:	4418      	add	r0, r3
 8015b0a:	f010 001f 	ands.w	r0, r0, #31
 8015b0e:	f000 8081 	beq.w	8015c14 <_dtoa_r+0x82c>
 8015b12:	f1c0 0220 	rsb	r2, r0, #32
 8015b16:	2a04      	cmp	r2, #4
 8015b18:	dd73      	ble.n	8015c02 <_dtoa_r+0x81a>
 8015b1a:	9b04      	ldr	r3, [sp, #16]
 8015b1c:	f1c0 001c 	rsb	r0, r0, #28
 8015b20:	4403      	add	r3, r0
 8015b22:	9304      	str	r3, [sp, #16]
 8015b24:	9b06      	ldr	r3, [sp, #24]
 8015b26:	4406      	add	r6, r0
 8015b28:	4403      	add	r3, r0
 8015b2a:	9306      	str	r3, [sp, #24]
 8015b2c:	9b04      	ldr	r3, [sp, #16]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	dd05      	ble.n	8015b3e <_dtoa_r+0x756>
 8015b32:	9901      	ldr	r1, [sp, #4]
 8015b34:	461a      	mov	r2, r3
 8015b36:	4648      	mov	r0, r9
 8015b38:	f001 f850 	bl	8016bdc <__lshift>
 8015b3c:	9001      	str	r0, [sp, #4]
 8015b3e:	9b06      	ldr	r3, [sp, #24]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	dd05      	ble.n	8015b50 <_dtoa_r+0x768>
 8015b44:	4621      	mov	r1, r4
 8015b46:	461a      	mov	r2, r3
 8015b48:	4648      	mov	r0, r9
 8015b4a:	f001 f847 	bl	8016bdc <__lshift>
 8015b4e:	4604      	mov	r4, r0
 8015b50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d060      	beq.n	8015c18 <_dtoa_r+0x830>
 8015b56:	9801      	ldr	r0, [sp, #4]
 8015b58:	4621      	mov	r1, r4
 8015b5a:	f001 f8ab 	bl	8016cb4 <__mcmp>
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	da5a      	bge.n	8015c18 <_dtoa_r+0x830>
 8015b62:	f108 33ff 	add.w	r3, r8, #4294967295
 8015b66:	9305      	str	r3, [sp, #20]
 8015b68:	9901      	ldr	r1, [sp, #4]
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	220a      	movs	r2, #10
 8015b6e:	4648      	mov	r0, r9
 8015b70:	f000 fe46 	bl	8016800 <__multadd>
 8015b74:	9b08      	ldr	r3, [sp, #32]
 8015b76:	9001      	str	r0, [sp, #4]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	f000 8177 	beq.w	8015e6c <_dtoa_r+0xa84>
 8015b7e:	4629      	mov	r1, r5
 8015b80:	2300      	movs	r3, #0
 8015b82:	220a      	movs	r2, #10
 8015b84:	4648      	mov	r0, r9
 8015b86:	f000 fe3b 	bl	8016800 <__multadd>
 8015b8a:	f1bb 0f00 	cmp.w	fp, #0
 8015b8e:	4605      	mov	r5, r0
 8015b90:	dc6e      	bgt.n	8015c70 <_dtoa_r+0x888>
 8015b92:	9b07      	ldr	r3, [sp, #28]
 8015b94:	2b02      	cmp	r3, #2
 8015b96:	dc48      	bgt.n	8015c2a <_dtoa_r+0x842>
 8015b98:	e06a      	b.n	8015c70 <_dtoa_r+0x888>
 8015b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015ba0:	e739      	b.n	8015a16 <_dtoa_r+0x62e>
 8015ba2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015ba6:	42a3      	cmp	r3, r4
 8015ba8:	db07      	blt.n	8015bba <_dtoa_r+0x7d2>
 8015baa:	f1ba 0f00 	cmp.w	sl, #0
 8015bae:	eba3 0404 	sub.w	r4, r3, r4
 8015bb2:	db0b      	blt.n	8015bcc <_dtoa_r+0x7e4>
 8015bb4:	9e04      	ldr	r6, [sp, #16]
 8015bb6:	4652      	mov	r2, sl
 8015bb8:	e72f      	b.n	8015a1a <_dtoa_r+0x632>
 8015bba:	1ae2      	subs	r2, r4, r3
 8015bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bbe:	9e04      	ldr	r6, [sp, #16]
 8015bc0:	4413      	add	r3, r2
 8015bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8015bc4:	4652      	mov	r2, sl
 8015bc6:	4623      	mov	r3, r4
 8015bc8:	2400      	movs	r4, #0
 8015bca:	e726      	b.n	8015a1a <_dtoa_r+0x632>
 8015bcc:	9a04      	ldr	r2, [sp, #16]
 8015bce:	eba2 060a 	sub.w	r6, r2, sl
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	e721      	b.n	8015a1a <_dtoa_r+0x632>
 8015bd6:	9e04      	ldr	r6, [sp, #16]
 8015bd8:	9d08      	ldr	r5, [sp, #32]
 8015bda:	461c      	mov	r4, r3
 8015bdc:	e72a      	b.n	8015a34 <_dtoa_r+0x64c>
 8015bde:	9a01      	ldr	r2, [sp, #4]
 8015be0:	9205      	str	r2, [sp, #20]
 8015be2:	e752      	b.n	8015a8a <_dtoa_r+0x6a2>
 8015be4:	9901      	ldr	r1, [sp, #4]
 8015be6:	461a      	mov	r2, r3
 8015be8:	e751      	b.n	8015a8e <_dtoa_r+0x6a6>
 8015bea:	9b05      	ldr	r3, [sp, #20]
 8015bec:	9301      	str	r3, [sp, #4]
 8015bee:	e752      	b.n	8015a96 <_dtoa_r+0x6ae>
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e77b      	b.n	8015aec <_dtoa_r+0x704>
 8015bf4:	9b02      	ldr	r3, [sp, #8]
 8015bf6:	e779      	b.n	8015aec <_dtoa_r+0x704>
 8015bf8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015bfa:	e778      	b.n	8015aee <_dtoa_r+0x706>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015c00:	e779      	b.n	8015af6 <_dtoa_r+0x70e>
 8015c02:	d093      	beq.n	8015b2c <_dtoa_r+0x744>
 8015c04:	9b04      	ldr	r3, [sp, #16]
 8015c06:	321c      	adds	r2, #28
 8015c08:	4413      	add	r3, r2
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	9b06      	ldr	r3, [sp, #24]
 8015c0e:	4416      	add	r6, r2
 8015c10:	4413      	add	r3, r2
 8015c12:	e78a      	b.n	8015b2a <_dtoa_r+0x742>
 8015c14:	4602      	mov	r2, r0
 8015c16:	e7f5      	b.n	8015c04 <_dtoa_r+0x81c>
 8015c18:	f1ba 0f00 	cmp.w	sl, #0
 8015c1c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015c20:	46d3      	mov	fp, sl
 8015c22:	dc21      	bgt.n	8015c68 <_dtoa_r+0x880>
 8015c24:	9b07      	ldr	r3, [sp, #28]
 8015c26:	2b02      	cmp	r3, #2
 8015c28:	dd1e      	ble.n	8015c68 <_dtoa_r+0x880>
 8015c2a:	f1bb 0f00 	cmp.w	fp, #0
 8015c2e:	f47f addc 	bne.w	80157ea <_dtoa_r+0x402>
 8015c32:	4621      	mov	r1, r4
 8015c34:	465b      	mov	r3, fp
 8015c36:	2205      	movs	r2, #5
 8015c38:	4648      	mov	r0, r9
 8015c3a:	f000 fde1 	bl	8016800 <__multadd>
 8015c3e:	4601      	mov	r1, r0
 8015c40:	4604      	mov	r4, r0
 8015c42:	9801      	ldr	r0, [sp, #4]
 8015c44:	f001 f836 	bl	8016cb4 <__mcmp>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	f77f adce 	ble.w	80157ea <_dtoa_r+0x402>
 8015c4e:	463e      	mov	r6, r7
 8015c50:	2331      	movs	r3, #49	@ 0x31
 8015c52:	f806 3b01 	strb.w	r3, [r6], #1
 8015c56:	9b05      	ldr	r3, [sp, #20]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	9305      	str	r3, [sp, #20]
 8015c5c:	e5c9      	b.n	80157f2 <_dtoa_r+0x40a>
 8015c5e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015c62:	4654      	mov	r4, sl
 8015c64:	4625      	mov	r5, r4
 8015c66:	e7f2      	b.n	8015c4e <_dtoa_r+0x866>
 8015c68:	9b08      	ldr	r3, [sp, #32]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	f000 8102 	beq.w	8015e74 <_dtoa_r+0xa8c>
 8015c70:	2e00      	cmp	r6, #0
 8015c72:	dd05      	ble.n	8015c80 <_dtoa_r+0x898>
 8015c74:	4629      	mov	r1, r5
 8015c76:	4632      	mov	r2, r6
 8015c78:	4648      	mov	r0, r9
 8015c7a:	f000 ffaf 	bl	8016bdc <__lshift>
 8015c7e:	4605      	mov	r5, r0
 8015c80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d058      	beq.n	8015d38 <_dtoa_r+0x950>
 8015c86:	6869      	ldr	r1, [r5, #4]
 8015c88:	4648      	mov	r0, r9
 8015c8a:	f000 fd57 	bl	801673c <_Balloc>
 8015c8e:	4606      	mov	r6, r0
 8015c90:	b928      	cbnz	r0, 8015c9e <_dtoa_r+0x8b6>
 8015c92:	4b82      	ldr	r3, [pc, #520]	@ (8015e9c <_dtoa_r+0xab4>)
 8015c94:	4602      	mov	r2, r0
 8015c96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015c9a:	f7ff bbbe 	b.w	801541a <_dtoa_r+0x32>
 8015c9e:	692a      	ldr	r2, [r5, #16]
 8015ca0:	3202      	adds	r2, #2
 8015ca2:	0092      	lsls	r2, r2, #2
 8015ca4:	f105 010c 	add.w	r1, r5, #12
 8015ca8:	300c      	adds	r0, #12
 8015caa:	f7ff faf4 	bl	8015296 <memcpy>
 8015cae:	2201      	movs	r2, #1
 8015cb0:	4631      	mov	r1, r6
 8015cb2:	4648      	mov	r0, r9
 8015cb4:	f000 ff92 	bl	8016bdc <__lshift>
 8015cb8:	1c7b      	adds	r3, r7, #1
 8015cba:	9304      	str	r3, [sp, #16]
 8015cbc:	eb07 030b 	add.w	r3, r7, fp
 8015cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cc2:	9b02      	ldr	r3, [sp, #8]
 8015cc4:	f003 0301 	and.w	r3, r3, #1
 8015cc8:	46a8      	mov	r8, r5
 8015cca:	9308      	str	r3, [sp, #32]
 8015ccc:	4605      	mov	r5, r0
 8015cce:	9b04      	ldr	r3, [sp, #16]
 8015cd0:	9801      	ldr	r0, [sp, #4]
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	f103 3bff 	add.w	fp, r3, #4294967295
 8015cd8:	f7ff fafc 	bl	80152d4 <quorem>
 8015cdc:	4641      	mov	r1, r8
 8015cde:	9002      	str	r0, [sp, #8]
 8015ce0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015ce4:	9801      	ldr	r0, [sp, #4]
 8015ce6:	f000 ffe5 	bl	8016cb4 <__mcmp>
 8015cea:	462a      	mov	r2, r5
 8015cec:	9006      	str	r0, [sp, #24]
 8015cee:	4621      	mov	r1, r4
 8015cf0:	4648      	mov	r0, r9
 8015cf2:	f000 fffb 	bl	8016cec <__mdiff>
 8015cf6:	68c2      	ldr	r2, [r0, #12]
 8015cf8:	4606      	mov	r6, r0
 8015cfa:	b9fa      	cbnz	r2, 8015d3c <_dtoa_r+0x954>
 8015cfc:	4601      	mov	r1, r0
 8015cfe:	9801      	ldr	r0, [sp, #4]
 8015d00:	f000 ffd8 	bl	8016cb4 <__mcmp>
 8015d04:	4602      	mov	r2, r0
 8015d06:	4631      	mov	r1, r6
 8015d08:	4648      	mov	r0, r9
 8015d0a:	920a      	str	r2, [sp, #40]	@ 0x28
 8015d0c:	f000 fd56 	bl	80167bc <_Bfree>
 8015d10:	9b07      	ldr	r3, [sp, #28]
 8015d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015d14:	9e04      	ldr	r6, [sp, #16]
 8015d16:	ea42 0103 	orr.w	r1, r2, r3
 8015d1a:	9b08      	ldr	r3, [sp, #32]
 8015d1c:	4319      	orrs	r1, r3
 8015d1e:	d10f      	bne.n	8015d40 <_dtoa_r+0x958>
 8015d20:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015d24:	d028      	beq.n	8015d78 <_dtoa_r+0x990>
 8015d26:	9b06      	ldr	r3, [sp, #24]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	dd02      	ble.n	8015d32 <_dtoa_r+0x94a>
 8015d2c:	9b02      	ldr	r3, [sp, #8]
 8015d2e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015d32:	f88b a000 	strb.w	sl, [fp]
 8015d36:	e55e      	b.n	80157f6 <_dtoa_r+0x40e>
 8015d38:	4628      	mov	r0, r5
 8015d3a:	e7bd      	b.n	8015cb8 <_dtoa_r+0x8d0>
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	e7e2      	b.n	8015d06 <_dtoa_r+0x91e>
 8015d40:	9b06      	ldr	r3, [sp, #24]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	db04      	blt.n	8015d50 <_dtoa_r+0x968>
 8015d46:	9907      	ldr	r1, [sp, #28]
 8015d48:	430b      	orrs	r3, r1
 8015d4a:	9908      	ldr	r1, [sp, #32]
 8015d4c:	430b      	orrs	r3, r1
 8015d4e:	d120      	bne.n	8015d92 <_dtoa_r+0x9aa>
 8015d50:	2a00      	cmp	r2, #0
 8015d52:	ddee      	ble.n	8015d32 <_dtoa_r+0x94a>
 8015d54:	9901      	ldr	r1, [sp, #4]
 8015d56:	2201      	movs	r2, #1
 8015d58:	4648      	mov	r0, r9
 8015d5a:	f000 ff3f 	bl	8016bdc <__lshift>
 8015d5e:	4621      	mov	r1, r4
 8015d60:	9001      	str	r0, [sp, #4]
 8015d62:	f000 ffa7 	bl	8016cb4 <__mcmp>
 8015d66:	2800      	cmp	r0, #0
 8015d68:	dc03      	bgt.n	8015d72 <_dtoa_r+0x98a>
 8015d6a:	d1e2      	bne.n	8015d32 <_dtoa_r+0x94a>
 8015d6c:	f01a 0f01 	tst.w	sl, #1
 8015d70:	d0df      	beq.n	8015d32 <_dtoa_r+0x94a>
 8015d72:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015d76:	d1d9      	bne.n	8015d2c <_dtoa_r+0x944>
 8015d78:	2339      	movs	r3, #57	@ 0x39
 8015d7a:	f88b 3000 	strb.w	r3, [fp]
 8015d7e:	4633      	mov	r3, r6
 8015d80:	461e      	mov	r6, r3
 8015d82:	3b01      	subs	r3, #1
 8015d84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015d88:	2a39      	cmp	r2, #57	@ 0x39
 8015d8a:	d052      	beq.n	8015e32 <_dtoa_r+0xa4a>
 8015d8c:	3201      	adds	r2, #1
 8015d8e:	701a      	strb	r2, [r3, #0]
 8015d90:	e531      	b.n	80157f6 <_dtoa_r+0x40e>
 8015d92:	2a00      	cmp	r2, #0
 8015d94:	dd07      	ble.n	8015da6 <_dtoa_r+0x9be>
 8015d96:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015d9a:	d0ed      	beq.n	8015d78 <_dtoa_r+0x990>
 8015d9c:	f10a 0301 	add.w	r3, sl, #1
 8015da0:	f88b 3000 	strb.w	r3, [fp]
 8015da4:	e527      	b.n	80157f6 <_dtoa_r+0x40e>
 8015da6:	9b04      	ldr	r3, [sp, #16]
 8015da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015daa:	f803 ac01 	strb.w	sl, [r3, #-1]
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d029      	beq.n	8015e06 <_dtoa_r+0xa1e>
 8015db2:	9901      	ldr	r1, [sp, #4]
 8015db4:	2300      	movs	r3, #0
 8015db6:	220a      	movs	r2, #10
 8015db8:	4648      	mov	r0, r9
 8015dba:	f000 fd21 	bl	8016800 <__multadd>
 8015dbe:	45a8      	cmp	r8, r5
 8015dc0:	9001      	str	r0, [sp, #4]
 8015dc2:	f04f 0300 	mov.w	r3, #0
 8015dc6:	f04f 020a 	mov.w	r2, #10
 8015dca:	4641      	mov	r1, r8
 8015dcc:	4648      	mov	r0, r9
 8015dce:	d107      	bne.n	8015de0 <_dtoa_r+0x9f8>
 8015dd0:	f000 fd16 	bl	8016800 <__multadd>
 8015dd4:	4680      	mov	r8, r0
 8015dd6:	4605      	mov	r5, r0
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	3301      	adds	r3, #1
 8015ddc:	9304      	str	r3, [sp, #16]
 8015dde:	e776      	b.n	8015cce <_dtoa_r+0x8e6>
 8015de0:	f000 fd0e 	bl	8016800 <__multadd>
 8015de4:	4629      	mov	r1, r5
 8015de6:	4680      	mov	r8, r0
 8015de8:	2300      	movs	r3, #0
 8015dea:	220a      	movs	r2, #10
 8015dec:	4648      	mov	r0, r9
 8015dee:	f000 fd07 	bl	8016800 <__multadd>
 8015df2:	4605      	mov	r5, r0
 8015df4:	e7f0      	b.n	8015dd8 <_dtoa_r+0x9f0>
 8015df6:	f1bb 0f00 	cmp.w	fp, #0
 8015dfa:	bfcc      	ite	gt
 8015dfc:	465e      	movgt	r6, fp
 8015dfe:	2601      	movle	r6, #1
 8015e00:	443e      	add	r6, r7
 8015e02:	f04f 0800 	mov.w	r8, #0
 8015e06:	9901      	ldr	r1, [sp, #4]
 8015e08:	2201      	movs	r2, #1
 8015e0a:	4648      	mov	r0, r9
 8015e0c:	f000 fee6 	bl	8016bdc <__lshift>
 8015e10:	4621      	mov	r1, r4
 8015e12:	9001      	str	r0, [sp, #4]
 8015e14:	f000 ff4e 	bl	8016cb4 <__mcmp>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	dcb0      	bgt.n	8015d7e <_dtoa_r+0x996>
 8015e1c:	d102      	bne.n	8015e24 <_dtoa_r+0xa3c>
 8015e1e:	f01a 0f01 	tst.w	sl, #1
 8015e22:	d1ac      	bne.n	8015d7e <_dtoa_r+0x996>
 8015e24:	4633      	mov	r3, r6
 8015e26:	461e      	mov	r6, r3
 8015e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015e2c:	2a30      	cmp	r2, #48	@ 0x30
 8015e2e:	d0fa      	beq.n	8015e26 <_dtoa_r+0xa3e>
 8015e30:	e4e1      	b.n	80157f6 <_dtoa_r+0x40e>
 8015e32:	429f      	cmp	r7, r3
 8015e34:	d1a4      	bne.n	8015d80 <_dtoa_r+0x998>
 8015e36:	9b05      	ldr	r3, [sp, #20]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	9305      	str	r3, [sp, #20]
 8015e3c:	2331      	movs	r3, #49	@ 0x31
 8015e3e:	703b      	strb	r3, [r7, #0]
 8015e40:	e4d9      	b.n	80157f6 <_dtoa_r+0x40e>
 8015e42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015e44:	4f16      	ldr	r7, [pc, #88]	@ (8015ea0 <_dtoa_r+0xab8>)
 8015e46:	b11b      	cbz	r3, 8015e50 <_dtoa_r+0xa68>
 8015e48:	f107 0308 	add.w	r3, r7, #8
 8015e4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015e4e:	6013      	str	r3, [r2, #0]
 8015e50:	4638      	mov	r0, r7
 8015e52:	b011      	add	sp, #68	@ 0x44
 8015e54:	ecbd 8b02 	vpop	{d8}
 8015e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e5c:	9b07      	ldr	r3, [sp, #28]
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	f77f ae2c 	ble.w	8015abc <_dtoa_r+0x6d4>
 8015e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e68:	2001      	movs	r0, #1
 8015e6a:	e64c      	b.n	8015b06 <_dtoa_r+0x71e>
 8015e6c:	f1bb 0f00 	cmp.w	fp, #0
 8015e70:	f77f aed8 	ble.w	8015c24 <_dtoa_r+0x83c>
 8015e74:	463e      	mov	r6, r7
 8015e76:	9801      	ldr	r0, [sp, #4]
 8015e78:	4621      	mov	r1, r4
 8015e7a:	f7ff fa2b 	bl	80152d4 <quorem>
 8015e7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015e82:	f806 ab01 	strb.w	sl, [r6], #1
 8015e86:	1bf2      	subs	r2, r6, r7
 8015e88:	4593      	cmp	fp, r2
 8015e8a:	ddb4      	ble.n	8015df6 <_dtoa_r+0xa0e>
 8015e8c:	9901      	ldr	r1, [sp, #4]
 8015e8e:	2300      	movs	r3, #0
 8015e90:	220a      	movs	r2, #10
 8015e92:	4648      	mov	r0, r9
 8015e94:	f000 fcb4 	bl	8016800 <__multadd>
 8015e98:	9001      	str	r0, [sp, #4]
 8015e9a:	e7ec      	b.n	8015e76 <_dtoa_r+0xa8e>
 8015e9c:	08017fe2 	.word	0x08017fe2
 8015ea0:	08017f66 	.word	0x08017f66

08015ea4 <_free_r>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	2900      	cmp	r1, #0
 8015eaa:	d041      	beq.n	8015f30 <_free_r+0x8c>
 8015eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015eb0:	1f0c      	subs	r4, r1, #4
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	bfb8      	it	lt
 8015eb6:	18e4      	addlt	r4, r4, r3
 8015eb8:	f000 fc34 	bl	8016724 <__malloc_lock>
 8015ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8015f34 <_free_r+0x90>)
 8015ebe:	6813      	ldr	r3, [r2, #0]
 8015ec0:	b933      	cbnz	r3, 8015ed0 <_free_r+0x2c>
 8015ec2:	6063      	str	r3, [r4, #4]
 8015ec4:	6014      	str	r4, [r2, #0]
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ecc:	f000 bc30 	b.w	8016730 <__malloc_unlock>
 8015ed0:	42a3      	cmp	r3, r4
 8015ed2:	d908      	bls.n	8015ee6 <_free_r+0x42>
 8015ed4:	6820      	ldr	r0, [r4, #0]
 8015ed6:	1821      	adds	r1, r4, r0
 8015ed8:	428b      	cmp	r3, r1
 8015eda:	bf01      	itttt	eq
 8015edc:	6819      	ldreq	r1, [r3, #0]
 8015ede:	685b      	ldreq	r3, [r3, #4]
 8015ee0:	1809      	addeq	r1, r1, r0
 8015ee2:	6021      	streq	r1, [r4, #0]
 8015ee4:	e7ed      	b.n	8015ec2 <_free_r+0x1e>
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	b10b      	cbz	r3, 8015ef0 <_free_r+0x4c>
 8015eec:	42a3      	cmp	r3, r4
 8015eee:	d9fa      	bls.n	8015ee6 <_free_r+0x42>
 8015ef0:	6811      	ldr	r1, [r2, #0]
 8015ef2:	1850      	adds	r0, r2, r1
 8015ef4:	42a0      	cmp	r0, r4
 8015ef6:	d10b      	bne.n	8015f10 <_free_r+0x6c>
 8015ef8:	6820      	ldr	r0, [r4, #0]
 8015efa:	4401      	add	r1, r0
 8015efc:	1850      	adds	r0, r2, r1
 8015efe:	4283      	cmp	r3, r0
 8015f00:	6011      	str	r1, [r2, #0]
 8015f02:	d1e0      	bne.n	8015ec6 <_free_r+0x22>
 8015f04:	6818      	ldr	r0, [r3, #0]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	6053      	str	r3, [r2, #4]
 8015f0a:	4408      	add	r0, r1
 8015f0c:	6010      	str	r0, [r2, #0]
 8015f0e:	e7da      	b.n	8015ec6 <_free_r+0x22>
 8015f10:	d902      	bls.n	8015f18 <_free_r+0x74>
 8015f12:	230c      	movs	r3, #12
 8015f14:	602b      	str	r3, [r5, #0]
 8015f16:	e7d6      	b.n	8015ec6 <_free_r+0x22>
 8015f18:	6820      	ldr	r0, [r4, #0]
 8015f1a:	1821      	adds	r1, r4, r0
 8015f1c:	428b      	cmp	r3, r1
 8015f1e:	bf04      	itt	eq
 8015f20:	6819      	ldreq	r1, [r3, #0]
 8015f22:	685b      	ldreq	r3, [r3, #4]
 8015f24:	6063      	str	r3, [r4, #4]
 8015f26:	bf04      	itt	eq
 8015f28:	1809      	addeq	r1, r1, r0
 8015f2a:	6021      	streq	r1, [r4, #0]
 8015f2c:	6054      	str	r4, [r2, #4]
 8015f2e:	e7ca      	b.n	8015ec6 <_free_r+0x22>
 8015f30:	bd38      	pop	{r3, r4, r5, pc}
 8015f32:	bf00      	nop
 8015f34:	240075dc 	.word	0x240075dc

08015f38 <rshift>:
 8015f38:	6903      	ldr	r3, [r0, #16]
 8015f3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015f46:	f100 0414 	add.w	r4, r0, #20
 8015f4a:	dd45      	ble.n	8015fd8 <rshift+0xa0>
 8015f4c:	f011 011f 	ands.w	r1, r1, #31
 8015f50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015f54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015f58:	d10c      	bne.n	8015f74 <rshift+0x3c>
 8015f5a:	f100 0710 	add.w	r7, r0, #16
 8015f5e:	4629      	mov	r1, r5
 8015f60:	42b1      	cmp	r1, r6
 8015f62:	d334      	bcc.n	8015fce <rshift+0x96>
 8015f64:	1a9b      	subs	r3, r3, r2
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	1eea      	subs	r2, r5, #3
 8015f6a:	4296      	cmp	r6, r2
 8015f6c:	bf38      	it	cc
 8015f6e:	2300      	movcc	r3, #0
 8015f70:	4423      	add	r3, r4
 8015f72:	e015      	b.n	8015fa0 <rshift+0x68>
 8015f74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015f78:	f1c1 0820 	rsb	r8, r1, #32
 8015f7c:	40cf      	lsrs	r7, r1
 8015f7e:	f105 0e04 	add.w	lr, r5, #4
 8015f82:	46a1      	mov	r9, r4
 8015f84:	4576      	cmp	r6, lr
 8015f86:	46f4      	mov	ip, lr
 8015f88:	d815      	bhi.n	8015fb6 <rshift+0x7e>
 8015f8a:	1a9a      	subs	r2, r3, r2
 8015f8c:	0092      	lsls	r2, r2, #2
 8015f8e:	3a04      	subs	r2, #4
 8015f90:	3501      	adds	r5, #1
 8015f92:	42ae      	cmp	r6, r5
 8015f94:	bf38      	it	cc
 8015f96:	2200      	movcc	r2, #0
 8015f98:	18a3      	adds	r3, r4, r2
 8015f9a:	50a7      	str	r7, [r4, r2]
 8015f9c:	b107      	cbz	r7, 8015fa0 <rshift+0x68>
 8015f9e:	3304      	adds	r3, #4
 8015fa0:	1b1a      	subs	r2, r3, r4
 8015fa2:	42a3      	cmp	r3, r4
 8015fa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015fa8:	bf08      	it	eq
 8015faa:	2300      	moveq	r3, #0
 8015fac:	6102      	str	r2, [r0, #16]
 8015fae:	bf08      	it	eq
 8015fb0:	6143      	streq	r3, [r0, #20]
 8015fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fb6:	f8dc c000 	ldr.w	ip, [ip]
 8015fba:	fa0c fc08 	lsl.w	ip, ip, r8
 8015fbe:	ea4c 0707 	orr.w	r7, ip, r7
 8015fc2:	f849 7b04 	str.w	r7, [r9], #4
 8015fc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015fca:	40cf      	lsrs	r7, r1
 8015fcc:	e7da      	b.n	8015f84 <rshift+0x4c>
 8015fce:	f851 cb04 	ldr.w	ip, [r1], #4
 8015fd2:	f847 cf04 	str.w	ip, [r7, #4]!
 8015fd6:	e7c3      	b.n	8015f60 <rshift+0x28>
 8015fd8:	4623      	mov	r3, r4
 8015fda:	e7e1      	b.n	8015fa0 <rshift+0x68>

08015fdc <__hexdig_fun>:
 8015fdc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015fe0:	2b09      	cmp	r3, #9
 8015fe2:	d802      	bhi.n	8015fea <__hexdig_fun+0xe>
 8015fe4:	3820      	subs	r0, #32
 8015fe6:	b2c0      	uxtb	r0, r0
 8015fe8:	4770      	bx	lr
 8015fea:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015fee:	2b05      	cmp	r3, #5
 8015ff0:	d801      	bhi.n	8015ff6 <__hexdig_fun+0x1a>
 8015ff2:	3847      	subs	r0, #71	@ 0x47
 8015ff4:	e7f7      	b.n	8015fe6 <__hexdig_fun+0xa>
 8015ff6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015ffa:	2b05      	cmp	r3, #5
 8015ffc:	d801      	bhi.n	8016002 <__hexdig_fun+0x26>
 8015ffe:	3827      	subs	r0, #39	@ 0x27
 8016000:	e7f1      	b.n	8015fe6 <__hexdig_fun+0xa>
 8016002:	2000      	movs	r0, #0
 8016004:	4770      	bx	lr
	...

08016008 <__gethex>:
 8016008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801600c:	b085      	sub	sp, #20
 801600e:	468a      	mov	sl, r1
 8016010:	9302      	str	r3, [sp, #8]
 8016012:	680b      	ldr	r3, [r1, #0]
 8016014:	9001      	str	r0, [sp, #4]
 8016016:	4690      	mov	r8, r2
 8016018:	1c9c      	adds	r4, r3, #2
 801601a:	46a1      	mov	r9, r4
 801601c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016020:	2830      	cmp	r0, #48	@ 0x30
 8016022:	d0fa      	beq.n	801601a <__gethex+0x12>
 8016024:	eba9 0303 	sub.w	r3, r9, r3
 8016028:	f1a3 0b02 	sub.w	fp, r3, #2
 801602c:	f7ff ffd6 	bl	8015fdc <__hexdig_fun>
 8016030:	4605      	mov	r5, r0
 8016032:	2800      	cmp	r0, #0
 8016034:	d168      	bne.n	8016108 <__gethex+0x100>
 8016036:	49a0      	ldr	r1, [pc, #640]	@ (80162b8 <__gethex+0x2b0>)
 8016038:	2201      	movs	r2, #1
 801603a:	4648      	mov	r0, r9
 801603c:	f7ff f82e 	bl	801509c <strncmp>
 8016040:	4607      	mov	r7, r0
 8016042:	2800      	cmp	r0, #0
 8016044:	d167      	bne.n	8016116 <__gethex+0x10e>
 8016046:	f899 0001 	ldrb.w	r0, [r9, #1]
 801604a:	4626      	mov	r6, r4
 801604c:	f7ff ffc6 	bl	8015fdc <__hexdig_fun>
 8016050:	2800      	cmp	r0, #0
 8016052:	d062      	beq.n	801611a <__gethex+0x112>
 8016054:	4623      	mov	r3, r4
 8016056:	7818      	ldrb	r0, [r3, #0]
 8016058:	2830      	cmp	r0, #48	@ 0x30
 801605a:	4699      	mov	r9, r3
 801605c:	f103 0301 	add.w	r3, r3, #1
 8016060:	d0f9      	beq.n	8016056 <__gethex+0x4e>
 8016062:	f7ff ffbb 	bl	8015fdc <__hexdig_fun>
 8016066:	fab0 f580 	clz	r5, r0
 801606a:	096d      	lsrs	r5, r5, #5
 801606c:	f04f 0b01 	mov.w	fp, #1
 8016070:	464a      	mov	r2, r9
 8016072:	4616      	mov	r6, r2
 8016074:	3201      	adds	r2, #1
 8016076:	7830      	ldrb	r0, [r6, #0]
 8016078:	f7ff ffb0 	bl	8015fdc <__hexdig_fun>
 801607c:	2800      	cmp	r0, #0
 801607e:	d1f8      	bne.n	8016072 <__gethex+0x6a>
 8016080:	498d      	ldr	r1, [pc, #564]	@ (80162b8 <__gethex+0x2b0>)
 8016082:	2201      	movs	r2, #1
 8016084:	4630      	mov	r0, r6
 8016086:	f7ff f809 	bl	801509c <strncmp>
 801608a:	2800      	cmp	r0, #0
 801608c:	d13f      	bne.n	801610e <__gethex+0x106>
 801608e:	b944      	cbnz	r4, 80160a2 <__gethex+0x9a>
 8016090:	1c74      	adds	r4, r6, #1
 8016092:	4622      	mov	r2, r4
 8016094:	4616      	mov	r6, r2
 8016096:	3201      	adds	r2, #1
 8016098:	7830      	ldrb	r0, [r6, #0]
 801609a:	f7ff ff9f 	bl	8015fdc <__hexdig_fun>
 801609e:	2800      	cmp	r0, #0
 80160a0:	d1f8      	bne.n	8016094 <__gethex+0x8c>
 80160a2:	1ba4      	subs	r4, r4, r6
 80160a4:	00a7      	lsls	r7, r4, #2
 80160a6:	7833      	ldrb	r3, [r6, #0]
 80160a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80160ac:	2b50      	cmp	r3, #80	@ 0x50
 80160ae:	d13e      	bne.n	801612e <__gethex+0x126>
 80160b0:	7873      	ldrb	r3, [r6, #1]
 80160b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80160b4:	d033      	beq.n	801611e <__gethex+0x116>
 80160b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80160b8:	d034      	beq.n	8016124 <__gethex+0x11c>
 80160ba:	1c71      	adds	r1, r6, #1
 80160bc:	2400      	movs	r4, #0
 80160be:	7808      	ldrb	r0, [r1, #0]
 80160c0:	f7ff ff8c 	bl	8015fdc <__hexdig_fun>
 80160c4:	1e43      	subs	r3, r0, #1
 80160c6:	b2db      	uxtb	r3, r3
 80160c8:	2b18      	cmp	r3, #24
 80160ca:	d830      	bhi.n	801612e <__gethex+0x126>
 80160cc:	f1a0 0210 	sub.w	r2, r0, #16
 80160d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80160d4:	f7ff ff82 	bl	8015fdc <__hexdig_fun>
 80160d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80160dc:	fa5f fc8c 	uxtb.w	ip, ip
 80160e0:	f1bc 0f18 	cmp.w	ip, #24
 80160e4:	f04f 030a 	mov.w	r3, #10
 80160e8:	d91e      	bls.n	8016128 <__gethex+0x120>
 80160ea:	b104      	cbz	r4, 80160ee <__gethex+0xe6>
 80160ec:	4252      	negs	r2, r2
 80160ee:	4417      	add	r7, r2
 80160f0:	f8ca 1000 	str.w	r1, [sl]
 80160f4:	b1ed      	cbz	r5, 8016132 <__gethex+0x12a>
 80160f6:	f1bb 0f00 	cmp.w	fp, #0
 80160fa:	bf0c      	ite	eq
 80160fc:	2506      	moveq	r5, #6
 80160fe:	2500      	movne	r5, #0
 8016100:	4628      	mov	r0, r5
 8016102:	b005      	add	sp, #20
 8016104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016108:	2500      	movs	r5, #0
 801610a:	462c      	mov	r4, r5
 801610c:	e7b0      	b.n	8016070 <__gethex+0x68>
 801610e:	2c00      	cmp	r4, #0
 8016110:	d1c7      	bne.n	80160a2 <__gethex+0x9a>
 8016112:	4627      	mov	r7, r4
 8016114:	e7c7      	b.n	80160a6 <__gethex+0x9e>
 8016116:	464e      	mov	r6, r9
 8016118:	462f      	mov	r7, r5
 801611a:	2501      	movs	r5, #1
 801611c:	e7c3      	b.n	80160a6 <__gethex+0x9e>
 801611e:	2400      	movs	r4, #0
 8016120:	1cb1      	adds	r1, r6, #2
 8016122:	e7cc      	b.n	80160be <__gethex+0xb6>
 8016124:	2401      	movs	r4, #1
 8016126:	e7fb      	b.n	8016120 <__gethex+0x118>
 8016128:	fb03 0002 	mla	r0, r3, r2, r0
 801612c:	e7ce      	b.n	80160cc <__gethex+0xc4>
 801612e:	4631      	mov	r1, r6
 8016130:	e7de      	b.n	80160f0 <__gethex+0xe8>
 8016132:	eba6 0309 	sub.w	r3, r6, r9
 8016136:	3b01      	subs	r3, #1
 8016138:	4629      	mov	r1, r5
 801613a:	2b07      	cmp	r3, #7
 801613c:	dc0a      	bgt.n	8016154 <__gethex+0x14c>
 801613e:	9801      	ldr	r0, [sp, #4]
 8016140:	f000 fafc 	bl	801673c <_Balloc>
 8016144:	4604      	mov	r4, r0
 8016146:	b940      	cbnz	r0, 801615a <__gethex+0x152>
 8016148:	4b5c      	ldr	r3, [pc, #368]	@ (80162bc <__gethex+0x2b4>)
 801614a:	4602      	mov	r2, r0
 801614c:	21e4      	movs	r1, #228	@ 0xe4
 801614e:	485c      	ldr	r0, [pc, #368]	@ (80162c0 <__gethex+0x2b8>)
 8016150:	f001 fa3a 	bl	80175c8 <__assert_func>
 8016154:	3101      	adds	r1, #1
 8016156:	105b      	asrs	r3, r3, #1
 8016158:	e7ef      	b.n	801613a <__gethex+0x132>
 801615a:	f100 0a14 	add.w	sl, r0, #20
 801615e:	2300      	movs	r3, #0
 8016160:	4655      	mov	r5, sl
 8016162:	469b      	mov	fp, r3
 8016164:	45b1      	cmp	r9, r6
 8016166:	d337      	bcc.n	80161d8 <__gethex+0x1d0>
 8016168:	f845 bb04 	str.w	fp, [r5], #4
 801616c:	eba5 050a 	sub.w	r5, r5, sl
 8016170:	10ad      	asrs	r5, r5, #2
 8016172:	6125      	str	r5, [r4, #16]
 8016174:	4658      	mov	r0, fp
 8016176:	f000 fbd3 	bl	8016920 <__hi0bits>
 801617a:	016d      	lsls	r5, r5, #5
 801617c:	f8d8 6000 	ldr.w	r6, [r8]
 8016180:	1a2d      	subs	r5, r5, r0
 8016182:	42b5      	cmp	r5, r6
 8016184:	dd54      	ble.n	8016230 <__gethex+0x228>
 8016186:	1bad      	subs	r5, r5, r6
 8016188:	4629      	mov	r1, r5
 801618a:	4620      	mov	r0, r4
 801618c:	f000 ff5c 	bl	8017048 <__any_on>
 8016190:	4681      	mov	r9, r0
 8016192:	b178      	cbz	r0, 80161b4 <__gethex+0x1ac>
 8016194:	1e6b      	subs	r3, r5, #1
 8016196:	1159      	asrs	r1, r3, #5
 8016198:	f003 021f 	and.w	r2, r3, #31
 801619c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80161a0:	f04f 0901 	mov.w	r9, #1
 80161a4:	fa09 f202 	lsl.w	r2, r9, r2
 80161a8:	420a      	tst	r2, r1
 80161aa:	d003      	beq.n	80161b4 <__gethex+0x1ac>
 80161ac:	454b      	cmp	r3, r9
 80161ae:	dc36      	bgt.n	801621e <__gethex+0x216>
 80161b0:	f04f 0902 	mov.w	r9, #2
 80161b4:	4629      	mov	r1, r5
 80161b6:	4620      	mov	r0, r4
 80161b8:	f7ff febe 	bl	8015f38 <rshift>
 80161bc:	442f      	add	r7, r5
 80161be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80161c2:	42bb      	cmp	r3, r7
 80161c4:	da42      	bge.n	801624c <__gethex+0x244>
 80161c6:	9801      	ldr	r0, [sp, #4]
 80161c8:	4621      	mov	r1, r4
 80161ca:	f000 faf7 	bl	80167bc <_Bfree>
 80161ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80161d0:	2300      	movs	r3, #0
 80161d2:	6013      	str	r3, [r2, #0]
 80161d4:	25a3      	movs	r5, #163	@ 0xa3
 80161d6:	e793      	b.n	8016100 <__gethex+0xf8>
 80161d8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80161dc:	2a2e      	cmp	r2, #46	@ 0x2e
 80161de:	d012      	beq.n	8016206 <__gethex+0x1fe>
 80161e0:	2b20      	cmp	r3, #32
 80161e2:	d104      	bne.n	80161ee <__gethex+0x1e6>
 80161e4:	f845 bb04 	str.w	fp, [r5], #4
 80161e8:	f04f 0b00 	mov.w	fp, #0
 80161ec:	465b      	mov	r3, fp
 80161ee:	7830      	ldrb	r0, [r6, #0]
 80161f0:	9303      	str	r3, [sp, #12]
 80161f2:	f7ff fef3 	bl	8015fdc <__hexdig_fun>
 80161f6:	9b03      	ldr	r3, [sp, #12]
 80161f8:	f000 000f 	and.w	r0, r0, #15
 80161fc:	4098      	lsls	r0, r3
 80161fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8016202:	3304      	adds	r3, #4
 8016204:	e7ae      	b.n	8016164 <__gethex+0x15c>
 8016206:	45b1      	cmp	r9, r6
 8016208:	d8ea      	bhi.n	80161e0 <__gethex+0x1d8>
 801620a:	492b      	ldr	r1, [pc, #172]	@ (80162b8 <__gethex+0x2b0>)
 801620c:	9303      	str	r3, [sp, #12]
 801620e:	2201      	movs	r2, #1
 8016210:	4630      	mov	r0, r6
 8016212:	f7fe ff43 	bl	801509c <strncmp>
 8016216:	9b03      	ldr	r3, [sp, #12]
 8016218:	2800      	cmp	r0, #0
 801621a:	d1e1      	bne.n	80161e0 <__gethex+0x1d8>
 801621c:	e7a2      	b.n	8016164 <__gethex+0x15c>
 801621e:	1ea9      	subs	r1, r5, #2
 8016220:	4620      	mov	r0, r4
 8016222:	f000 ff11 	bl	8017048 <__any_on>
 8016226:	2800      	cmp	r0, #0
 8016228:	d0c2      	beq.n	80161b0 <__gethex+0x1a8>
 801622a:	f04f 0903 	mov.w	r9, #3
 801622e:	e7c1      	b.n	80161b4 <__gethex+0x1ac>
 8016230:	da09      	bge.n	8016246 <__gethex+0x23e>
 8016232:	1b75      	subs	r5, r6, r5
 8016234:	4621      	mov	r1, r4
 8016236:	9801      	ldr	r0, [sp, #4]
 8016238:	462a      	mov	r2, r5
 801623a:	f000 fccf 	bl	8016bdc <__lshift>
 801623e:	1b7f      	subs	r7, r7, r5
 8016240:	4604      	mov	r4, r0
 8016242:	f100 0a14 	add.w	sl, r0, #20
 8016246:	f04f 0900 	mov.w	r9, #0
 801624a:	e7b8      	b.n	80161be <__gethex+0x1b6>
 801624c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016250:	42bd      	cmp	r5, r7
 8016252:	dd6f      	ble.n	8016334 <__gethex+0x32c>
 8016254:	1bed      	subs	r5, r5, r7
 8016256:	42ae      	cmp	r6, r5
 8016258:	dc34      	bgt.n	80162c4 <__gethex+0x2bc>
 801625a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801625e:	2b02      	cmp	r3, #2
 8016260:	d022      	beq.n	80162a8 <__gethex+0x2a0>
 8016262:	2b03      	cmp	r3, #3
 8016264:	d024      	beq.n	80162b0 <__gethex+0x2a8>
 8016266:	2b01      	cmp	r3, #1
 8016268:	d115      	bne.n	8016296 <__gethex+0x28e>
 801626a:	42ae      	cmp	r6, r5
 801626c:	d113      	bne.n	8016296 <__gethex+0x28e>
 801626e:	2e01      	cmp	r6, #1
 8016270:	d10b      	bne.n	801628a <__gethex+0x282>
 8016272:	9a02      	ldr	r2, [sp, #8]
 8016274:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016278:	6013      	str	r3, [r2, #0]
 801627a:	2301      	movs	r3, #1
 801627c:	6123      	str	r3, [r4, #16]
 801627e:	f8ca 3000 	str.w	r3, [sl]
 8016282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016284:	2562      	movs	r5, #98	@ 0x62
 8016286:	601c      	str	r4, [r3, #0]
 8016288:	e73a      	b.n	8016100 <__gethex+0xf8>
 801628a:	1e71      	subs	r1, r6, #1
 801628c:	4620      	mov	r0, r4
 801628e:	f000 fedb 	bl	8017048 <__any_on>
 8016292:	2800      	cmp	r0, #0
 8016294:	d1ed      	bne.n	8016272 <__gethex+0x26a>
 8016296:	9801      	ldr	r0, [sp, #4]
 8016298:	4621      	mov	r1, r4
 801629a:	f000 fa8f 	bl	80167bc <_Bfree>
 801629e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80162a0:	2300      	movs	r3, #0
 80162a2:	6013      	str	r3, [r2, #0]
 80162a4:	2550      	movs	r5, #80	@ 0x50
 80162a6:	e72b      	b.n	8016100 <__gethex+0xf8>
 80162a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d1f3      	bne.n	8016296 <__gethex+0x28e>
 80162ae:	e7e0      	b.n	8016272 <__gethex+0x26a>
 80162b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d1dd      	bne.n	8016272 <__gethex+0x26a>
 80162b6:	e7ee      	b.n	8016296 <__gethex+0x28e>
 80162b8:	08017f28 	.word	0x08017f28
 80162bc:	08017fe2 	.word	0x08017fe2
 80162c0:	08017ff3 	.word	0x08017ff3
 80162c4:	1e6f      	subs	r7, r5, #1
 80162c6:	f1b9 0f00 	cmp.w	r9, #0
 80162ca:	d130      	bne.n	801632e <__gethex+0x326>
 80162cc:	b127      	cbz	r7, 80162d8 <__gethex+0x2d0>
 80162ce:	4639      	mov	r1, r7
 80162d0:	4620      	mov	r0, r4
 80162d2:	f000 feb9 	bl	8017048 <__any_on>
 80162d6:	4681      	mov	r9, r0
 80162d8:	117a      	asrs	r2, r7, #5
 80162da:	2301      	movs	r3, #1
 80162dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80162e0:	f007 071f 	and.w	r7, r7, #31
 80162e4:	40bb      	lsls	r3, r7
 80162e6:	4213      	tst	r3, r2
 80162e8:	4629      	mov	r1, r5
 80162ea:	4620      	mov	r0, r4
 80162ec:	bf18      	it	ne
 80162ee:	f049 0902 	orrne.w	r9, r9, #2
 80162f2:	f7ff fe21 	bl	8015f38 <rshift>
 80162f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80162fa:	1b76      	subs	r6, r6, r5
 80162fc:	2502      	movs	r5, #2
 80162fe:	f1b9 0f00 	cmp.w	r9, #0
 8016302:	d047      	beq.n	8016394 <__gethex+0x38c>
 8016304:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016308:	2b02      	cmp	r3, #2
 801630a:	d015      	beq.n	8016338 <__gethex+0x330>
 801630c:	2b03      	cmp	r3, #3
 801630e:	d017      	beq.n	8016340 <__gethex+0x338>
 8016310:	2b01      	cmp	r3, #1
 8016312:	d109      	bne.n	8016328 <__gethex+0x320>
 8016314:	f019 0f02 	tst.w	r9, #2
 8016318:	d006      	beq.n	8016328 <__gethex+0x320>
 801631a:	f8da 3000 	ldr.w	r3, [sl]
 801631e:	ea49 0903 	orr.w	r9, r9, r3
 8016322:	f019 0f01 	tst.w	r9, #1
 8016326:	d10e      	bne.n	8016346 <__gethex+0x33e>
 8016328:	f045 0510 	orr.w	r5, r5, #16
 801632c:	e032      	b.n	8016394 <__gethex+0x38c>
 801632e:	f04f 0901 	mov.w	r9, #1
 8016332:	e7d1      	b.n	80162d8 <__gethex+0x2d0>
 8016334:	2501      	movs	r5, #1
 8016336:	e7e2      	b.n	80162fe <__gethex+0x2f6>
 8016338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801633a:	f1c3 0301 	rsb	r3, r3, #1
 801633e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016342:	2b00      	cmp	r3, #0
 8016344:	d0f0      	beq.n	8016328 <__gethex+0x320>
 8016346:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801634a:	f104 0314 	add.w	r3, r4, #20
 801634e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016352:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016356:	f04f 0c00 	mov.w	ip, #0
 801635a:	4618      	mov	r0, r3
 801635c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016360:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016364:	d01b      	beq.n	801639e <__gethex+0x396>
 8016366:	3201      	adds	r2, #1
 8016368:	6002      	str	r2, [r0, #0]
 801636a:	2d02      	cmp	r5, #2
 801636c:	f104 0314 	add.w	r3, r4, #20
 8016370:	d13c      	bne.n	80163ec <__gethex+0x3e4>
 8016372:	f8d8 2000 	ldr.w	r2, [r8]
 8016376:	3a01      	subs	r2, #1
 8016378:	42b2      	cmp	r2, r6
 801637a:	d109      	bne.n	8016390 <__gethex+0x388>
 801637c:	1171      	asrs	r1, r6, #5
 801637e:	2201      	movs	r2, #1
 8016380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016384:	f006 061f 	and.w	r6, r6, #31
 8016388:	fa02 f606 	lsl.w	r6, r2, r6
 801638c:	421e      	tst	r6, r3
 801638e:	d13a      	bne.n	8016406 <__gethex+0x3fe>
 8016390:	f045 0520 	orr.w	r5, r5, #32
 8016394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016396:	601c      	str	r4, [r3, #0]
 8016398:	9b02      	ldr	r3, [sp, #8]
 801639a:	601f      	str	r7, [r3, #0]
 801639c:	e6b0      	b.n	8016100 <__gethex+0xf8>
 801639e:	4299      	cmp	r1, r3
 80163a0:	f843 cc04 	str.w	ip, [r3, #-4]
 80163a4:	d8d9      	bhi.n	801635a <__gethex+0x352>
 80163a6:	68a3      	ldr	r3, [r4, #8]
 80163a8:	459b      	cmp	fp, r3
 80163aa:	db17      	blt.n	80163dc <__gethex+0x3d4>
 80163ac:	6861      	ldr	r1, [r4, #4]
 80163ae:	9801      	ldr	r0, [sp, #4]
 80163b0:	3101      	adds	r1, #1
 80163b2:	f000 f9c3 	bl	801673c <_Balloc>
 80163b6:	4681      	mov	r9, r0
 80163b8:	b918      	cbnz	r0, 80163c2 <__gethex+0x3ba>
 80163ba:	4b1a      	ldr	r3, [pc, #104]	@ (8016424 <__gethex+0x41c>)
 80163bc:	4602      	mov	r2, r0
 80163be:	2184      	movs	r1, #132	@ 0x84
 80163c0:	e6c5      	b.n	801614e <__gethex+0x146>
 80163c2:	6922      	ldr	r2, [r4, #16]
 80163c4:	3202      	adds	r2, #2
 80163c6:	f104 010c 	add.w	r1, r4, #12
 80163ca:	0092      	lsls	r2, r2, #2
 80163cc:	300c      	adds	r0, #12
 80163ce:	f7fe ff62 	bl	8015296 <memcpy>
 80163d2:	4621      	mov	r1, r4
 80163d4:	9801      	ldr	r0, [sp, #4]
 80163d6:	f000 f9f1 	bl	80167bc <_Bfree>
 80163da:	464c      	mov	r4, r9
 80163dc:	6923      	ldr	r3, [r4, #16]
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80163e4:	6122      	str	r2, [r4, #16]
 80163e6:	2201      	movs	r2, #1
 80163e8:	615a      	str	r2, [r3, #20]
 80163ea:	e7be      	b.n	801636a <__gethex+0x362>
 80163ec:	6922      	ldr	r2, [r4, #16]
 80163ee:	455a      	cmp	r2, fp
 80163f0:	dd0b      	ble.n	801640a <__gethex+0x402>
 80163f2:	2101      	movs	r1, #1
 80163f4:	4620      	mov	r0, r4
 80163f6:	f7ff fd9f 	bl	8015f38 <rshift>
 80163fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80163fe:	3701      	adds	r7, #1
 8016400:	42bb      	cmp	r3, r7
 8016402:	f6ff aee0 	blt.w	80161c6 <__gethex+0x1be>
 8016406:	2501      	movs	r5, #1
 8016408:	e7c2      	b.n	8016390 <__gethex+0x388>
 801640a:	f016 061f 	ands.w	r6, r6, #31
 801640e:	d0fa      	beq.n	8016406 <__gethex+0x3fe>
 8016410:	4453      	add	r3, sl
 8016412:	f1c6 0620 	rsb	r6, r6, #32
 8016416:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801641a:	f000 fa81 	bl	8016920 <__hi0bits>
 801641e:	42b0      	cmp	r0, r6
 8016420:	dbe7      	blt.n	80163f2 <__gethex+0x3ea>
 8016422:	e7f0      	b.n	8016406 <__gethex+0x3fe>
 8016424:	08017fe2 	.word	0x08017fe2

08016428 <L_shift>:
 8016428:	f1c2 0208 	rsb	r2, r2, #8
 801642c:	0092      	lsls	r2, r2, #2
 801642e:	b570      	push	{r4, r5, r6, lr}
 8016430:	f1c2 0620 	rsb	r6, r2, #32
 8016434:	6843      	ldr	r3, [r0, #4]
 8016436:	6804      	ldr	r4, [r0, #0]
 8016438:	fa03 f506 	lsl.w	r5, r3, r6
 801643c:	432c      	orrs	r4, r5
 801643e:	40d3      	lsrs	r3, r2
 8016440:	6004      	str	r4, [r0, #0]
 8016442:	f840 3f04 	str.w	r3, [r0, #4]!
 8016446:	4288      	cmp	r0, r1
 8016448:	d3f4      	bcc.n	8016434 <L_shift+0xc>
 801644a:	bd70      	pop	{r4, r5, r6, pc}

0801644c <__match>:
 801644c:	b530      	push	{r4, r5, lr}
 801644e:	6803      	ldr	r3, [r0, #0]
 8016450:	3301      	adds	r3, #1
 8016452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016456:	b914      	cbnz	r4, 801645e <__match+0x12>
 8016458:	6003      	str	r3, [r0, #0]
 801645a:	2001      	movs	r0, #1
 801645c:	bd30      	pop	{r4, r5, pc}
 801645e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016462:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016466:	2d19      	cmp	r5, #25
 8016468:	bf98      	it	ls
 801646a:	3220      	addls	r2, #32
 801646c:	42a2      	cmp	r2, r4
 801646e:	d0f0      	beq.n	8016452 <__match+0x6>
 8016470:	2000      	movs	r0, #0
 8016472:	e7f3      	b.n	801645c <__match+0x10>

08016474 <__hexnan>:
 8016474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016478:	680b      	ldr	r3, [r1, #0]
 801647a:	6801      	ldr	r1, [r0, #0]
 801647c:	115e      	asrs	r6, r3, #5
 801647e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016482:	f013 031f 	ands.w	r3, r3, #31
 8016486:	b087      	sub	sp, #28
 8016488:	bf18      	it	ne
 801648a:	3604      	addne	r6, #4
 801648c:	2500      	movs	r5, #0
 801648e:	1f37      	subs	r7, r6, #4
 8016490:	4682      	mov	sl, r0
 8016492:	4690      	mov	r8, r2
 8016494:	9301      	str	r3, [sp, #4]
 8016496:	f846 5c04 	str.w	r5, [r6, #-4]
 801649a:	46b9      	mov	r9, r7
 801649c:	463c      	mov	r4, r7
 801649e:	9502      	str	r5, [sp, #8]
 80164a0:	46ab      	mov	fp, r5
 80164a2:	784a      	ldrb	r2, [r1, #1]
 80164a4:	1c4b      	adds	r3, r1, #1
 80164a6:	9303      	str	r3, [sp, #12]
 80164a8:	b342      	cbz	r2, 80164fc <__hexnan+0x88>
 80164aa:	4610      	mov	r0, r2
 80164ac:	9105      	str	r1, [sp, #20]
 80164ae:	9204      	str	r2, [sp, #16]
 80164b0:	f7ff fd94 	bl	8015fdc <__hexdig_fun>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d151      	bne.n	801655c <__hexnan+0xe8>
 80164b8:	9a04      	ldr	r2, [sp, #16]
 80164ba:	9905      	ldr	r1, [sp, #20]
 80164bc:	2a20      	cmp	r2, #32
 80164be:	d818      	bhi.n	80164f2 <__hexnan+0x7e>
 80164c0:	9b02      	ldr	r3, [sp, #8]
 80164c2:	459b      	cmp	fp, r3
 80164c4:	dd13      	ble.n	80164ee <__hexnan+0x7a>
 80164c6:	454c      	cmp	r4, r9
 80164c8:	d206      	bcs.n	80164d8 <__hexnan+0x64>
 80164ca:	2d07      	cmp	r5, #7
 80164cc:	dc04      	bgt.n	80164d8 <__hexnan+0x64>
 80164ce:	462a      	mov	r2, r5
 80164d0:	4649      	mov	r1, r9
 80164d2:	4620      	mov	r0, r4
 80164d4:	f7ff ffa8 	bl	8016428 <L_shift>
 80164d8:	4544      	cmp	r4, r8
 80164da:	d952      	bls.n	8016582 <__hexnan+0x10e>
 80164dc:	2300      	movs	r3, #0
 80164de:	f1a4 0904 	sub.w	r9, r4, #4
 80164e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80164e6:	f8cd b008 	str.w	fp, [sp, #8]
 80164ea:	464c      	mov	r4, r9
 80164ec:	461d      	mov	r5, r3
 80164ee:	9903      	ldr	r1, [sp, #12]
 80164f0:	e7d7      	b.n	80164a2 <__hexnan+0x2e>
 80164f2:	2a29      	cmp	r2, #41	@ 0x29
 80164f4:	d157      	bne.n	80165a6 <__hexnan+0x132>
 80164f6:	3102      	adds	r1, #2
 80164f8:	f8ca 1000 	str.w	r1, [sl]
 80164fc:	f1bb 0f00 	cmp.w	fp, #0
 8016500:	d051      	beq.n	80165a6 <__hexnan+0x132>
 8016502:	454c      	cmp	r4, r9
 8016504:	d206      	bcs.n	8016514 <__hexnan+0xa0>
 8016506:	2d07      	cmp	r5, #7
 8016508:	dc04      	bgt.n	8016514 <__hexnan+0xa0>
 801650a:	462a      	mov	r2, r5
 801650c:	4649      	mov	r1, r9
 801650e:	4620      	mov	r0, r4
 8016510:	f7ff ff8a 	bl	8016428 <L_shift>
 8016514:	4544      	cmp	r4, r8
 8016516:	d936      	bls.n	8016586 <__hexnan+0x112>
 8016518:	f1a8 0204 	sub.w	r2, r8, #4
 801651c:	4623      	mov	r3, r4
 801651e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016522:	f842 1f04 	str.w	r1, [r2, #4]!
 8016526:	429f      	cmp	r7, r3
 8016528:	d2f9      	bcs.n	801651e <__hexnan+0xaa>
 801652a:	1b3b      	subs	r3, r7, r4
 801652c:	f023 0303 	bic.w	r3, r3, #3
 8016530:	3304      	adds	r3, #4
 8016532:	3401      	adds	r4, #1
 8016534:	3e03      	subs	r6, #3
 8016536:	42b4      	cmp	r4, r6
 8016538:	bf88      	it	hi
 801653a:	2304      	movhi	r3, #4
 801653c:	4443      	add	r3, r8
 801653e:	2200      	movs	r2, #0
 8016540:	f843 2b04 	str.w	r2, [r3], #4
 8016544:	429f      	cmp	r7, r3
 8016546:	d2fb      	bcs.n	8016540 <__hexnan+0xcc>
 8016548:	683b      	ldr	r3, [r7, #0]
 801654a:	b91b      	cbnz	r3, 8016554 <__hexnan+0xe0>
 801654c:	4547      	cmp	r7, r8
 801654e:	d128      	bne.n	80165a2 <__hexnan+0x12e>
 8016550:	2301      	movs	r3, #1
 8016552:	603b      	str	r3, [r7, #0]
 8016554:	2005      	movs	r0, #5
 8016556:	b007      	add	sp, #28
 8016558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655c:	3501      	adds	r5, #1
 801655e:	2d08      	cmp	r5, #8
 8016560:	f10b 0b01 	add.w	fp, fp, #1
 8016564:	dd06      	ble.n	8016574 <__hexnan+0x100>
 8016566:	4544      	cmp	r4, r8
 8016568:	d9c1      	bls.n	80164ee <__hexnan+0x7a>
 801656a:	2300      	movs	r3, #0
 801656c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016570:	2501      	movs	r5, #1
 8016572:	3c04      	subs	r4, #4
 8016574:	6822      	ldr	r2, [r4, #0]
 8016576:	f000 000f 	and.w	r0, r0, #15
 801657a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801657e:	6020      	str	r0, [r4, #0]
 8016580:	e7b5      	b.n	80164ee <__hexnan+0x7a>
 8016582:	2508      	movs	r5, #8
 8016584:	e7b3      	b.n	80164ee <__hexnan+0x7a>
 8016586:	9b01      	ldr	r3, [sp, #4]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d0dd      	beq.n	8016548 <__hexnan+0xd4>
 801658c:	f1c3 0320 	rsb	r3, r3, #32
 8016590:	f04f 32ff 	mov.w	r2, #4294967295
 8016594:	40da      	lsrs	r2, r3
 8016596:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801659a:	4013      	ands	r3, r2
 801659c:	f846 3c04 	str.w	r3, [r6, #-4]
 80165a0:	e7d2      	b.n	8016548 <__hexnan+0xd4>
 80165a2:	3f04      	subs	r7, #4
 80165a4:	e7d0      	b.n	8016548 <__hexnan+0xd4>
 80165a6:	2004      	movs	r0, #4
 80165a8:	e7d5      	b.n	8016556 <__hexnan+0xe2>
	...

080165ac <malloc>:
 80165ac:	4b02      	ldr	r3, [pc, #8]	@ (80165b8 <malloc+0xc>)
 80165ae:	4601      	mov	r1, r0
 80165b0:	6818      	ldr	r0, [r3, #0]
 80165b2:	f000 b825 	b.w	8016600 <_malloc_r>
 80165b6:	bf00      	nop
 80165b8:	24000208 	.word	0x24000208

080165bc <sbrk_aligned>:
 80165bc:	b570      	push	{r4, r5, r6, lr}
 80165be:	4e0f      	ldr	r6, [pc, #60]	@ (80165fc <sbrk_aligned+0x40>)
 80165c0:	460c      	mov	r4, r1
 80165c2:	6831      	ldr	r1, [r6, #0]
 80165c4:	4605      	mov	r5, r0
 80165c6:	b911      	cbnz	r1, 80165ce <sbrk_aligned+0x12>
 80165c8:	f000 ffee 	bl	80175a8 <_sbrk_r>
 80165cc:	6030      	str	r0, [r6, #0]
 80165ce:	4621      	mov	r1, r4
 80165d0:	4628      	mov	r0, r5
 80165d2:	f000 ffe9 	bl	80175a8 <_sbrk_r>
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	d103      	bne.n	80165e2 <sbrk_aligned+0x26>
 80165da:	f04f 34ff 	mov.w	r4, #4294967295
 80165de:	4620      	mov	r0, r4
 80165e0:	bd70      	pop	{r4, r5, r6, pc}
 80165e2:	1cc4      	adds	r4, r0, #3
 80165e4:	f024 0403 	bic.w	r4, r4, #3
 80165e8:	42a0      	cmp	r0, r4
 80165ea:	d0f8      	beq.n	80165de <sbrk_aligned+0x22>
 80165ec:	1a21      	subs	r1, r4, r0
 80165ee:	4628      	mov	r0, r5
 80165f0:	f000 ffda 	bl	80175a8 <_sbrk_r>
 80165f4:	3001      	adds	r0, #1
 80165f6:	d1f2      	bne.n	80165de <sbrk_aligned+0x22>
 80165f8:	e7ef      	b.n	80165da <sbrk_aligned+0x1e>
 80165fa:	bf00      	nop
 80165fc:	240075d8 	.word	0x240075d8

08016600 <_malloc_r>:
 8016600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016604:	1ccd      	adds	r5, r1, #3
 8016606:	f025 0503 	bic.w	r5, r5, #3
 801660a:	3508      	adds	r5, #8
 801660c:	2d0c      	cmp	r5, #12
 801660e:	bf38      	it	cc
 8016610:	250c      	movcc	r5, #12
 8016612:	2d00      	cmp	r5, #0
 8016614:	4606      	mov	r6, r0
 8016616:	db01      	blt.n	801661c <_malloc_r+0x1c>
 8016618:	42a9      	cmp	r1, r5
 801661a:	d904      	bls.n	8016626 <_malloc_r+0x26>
 801661c:	230c      	movs	r3, #12
 801661e:	6033      	str	r3, [r6, #0]
 8016620:	2000      	movs	r0, #0
 8016622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80166fc <_malloc_r+0xfc>
 801662a:	f000 f87b 	bl	8016724 <__malloc_lock>
 801662e:	f8d8 3000 	ldr.w	r3, [r8]
 8016632:	461c      	mov	r4, r3
 8016634:	bb44      	cbnz	r4, 8016688 <_malloc_r+0x88>
 8016636:	4629      	mov	r1, r5
 8016638:	4630      	mov	r0, r6
 801663a:	f7ff ffbf 	bl	80165bc <sbrk_aligned>
 801663e:	1c43      	adds	r3, r0, #1
 8016640:	4604      	mov	r4, r0
 8016642:	d158      	bne.n	80166f6 <_malloc_r+0xf6>
 8016644:	f8d8 4000 	ldr.w	r4, [r8]
 8016648:	4627      	mov	r7, r4
 801664a:	2f00      	cmp	r7, #0
 801664c:	d143      	bne.n	80166d6 <_malloc_r+0xd6>
 801664e:	2c00      	cmp	r4, #0
 8016650:	d04b      	beq.n	80166ea <_malloc_r+0xea>
 8016652:	6823      	ldr	r3, [r4, #0]
 8016654:	4639      	mov	r1, r7
 8016656:	4630      	mov	r0, r6
 8016658:	eb04 0903 	add.w	r9, r4, r3
 801665c:	f000 ffa4 	bl	80175a8 <_sbrk_r>
 8016660:	4581      	cmp	r9, r0
 8016662:	d142      	bne.n	80166ea <_malloc_r+0xea>
 8016664:	6821      	ldr	r1, [r4, #0]
 8016666:	1a6d      	subs	r5, r5, r1
 8016668:	4629      	mov	r1, r5
 801666a:	4630      	mov	r0, r6
 801666c:	f7ff ffa6 	bl	80165bc <sbrk_aligned>
 8016670:	3001      	adds	r0, #1
 8016672:	d03a      	beq.n	80166ea <_malloc_r+0xea>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	442b      	add	r3, r5
 8016678:	6023      	str	r3, [r4, #0]
 801667a:	f8d8 3000 	ldr.w	r3, [r8]
 801667e:	685a      	ldr	r2, [r3, #4]
 8016680:	bb62      	cbnz	r2, 80166dc <_malloc_r+0xdc>
 8016682:	f8c8 7000 	str.w	r7, [r8]
 8016686:	e00f      	b.n	80166a8 <_malloc_r+0xa8>
 8016688:	6822      	ldr	r2, [r4, #0]
 801668a:	1b52      	subs	r2, r2, r5
 801668c:	d420      	bmi.n	80166d0 <_malloc_r+0xd0>
 801668e:	2a0b      	cmp	r2, #11
 8016690:	d917      	bls.n	80166c2 <_malloc_r+0xc2>
 8016692:	1961      	adds	r1, r4, r5
 8016694:	42a3      	cmp	r3, r4
 8016696:	6025      	str	r5, [r4, #0]
 8016698:	bf18      	it	ne
 801669a:	6059      	strne	r1, [r3, #4]
 801669c:	6863      	ldr	r3, [r4, #4]
 801669e:	bf08      	it	eq
 80166a0:	f8c8 1000 	streq.w	r1, [r8]
 80166a4:	5162      	str	r2, [r4, r5]
 80166a6:	604b      	str	r3, [r1, #4]
 80166a8:	4630      	mov	r0, r6
 80166aa:	f000 f841 	bl	8016730 <__malloc_unlock>
 80166ae:	f104 000b 	add.w	r0, r4, #11
 80166b2:	1d23      	adds	r3, r4, #4
 80166b4:	f020 0007 	bic.w	r0, r0, #7
 80166b8:	1ac2      	subs	r2, r0, r3
 80166ba:	bf1c      	itt	ne
 80166bc:	1a1b      	subne	r3, r3, r0
 80166be:	50a3      	strne	r3, [r4, r2]
 80166c0:	e7af      	b.n	8016622 <_malloc_r+0x22>
 80166c2:	6862      	ldr	r2, [r4, #4]
 80166c4:	42a3      	cmp	r3, r4
 80166c6:	bf0c      	ite	eq
 80166c8:	f8c8 2000 	streq.w	r2, [r8]
 80166cc:	605a      	strne	r2, [r3, #4]
 80166ce:	e7eb      	b.n	80166a8 <_malloc_r+0xa8>
 80166d0:	4623      	mov	r3, r4
 80166d2:	6864      	ldr	r4, [r4, #4]
 80166d4:	e7ae      	b.n	8016634 <_malloc_r+0x34>
 80166d6:	463c      	mov	r4, r7
 80166d8:	687f      	ldr	r7, [r7, #4]
 80166da:	e7b6      	b.n	801664a <_malloc_r+0x4a>
 80166dc:	461a      	mov	r2, r3
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	42a3      	cmp	r3, r4
 80166e2:	d1fb      	bne.n	80166dc <_malloc_r+0xdc>
 80166e4:	2300      	movs	r3, #0
 80166e6:	6053      	str	r3, [r2, #4]
 80166e8:	e7de      	b.n	80166a8 <_malloc_r+0xa8>
 80166ea:	230c      	movs	r3, #12
 80166ec:	6033      	str	r3, [r6, #0]
 80166ee:	4630      	mov	r0, r6
 80166f0:	f000 f81e 	bl	8016730 <__malloc_unlock>
 80166f4:	e794      	b.n	8016620 <_malloc_r+0x20>
 80166f6:	6005      	str	r5, [r0, #0]
 80166f8:	e7d6      	b.n	80166a8 <_malloc_r+0xa8>
 80166fa:	bf00      	nop
 80166fc:	240075dc 	.word	0x240075dc

08016700 <__ascii_mbtowc>:
 8016700:	b082      	sub	sp, #8
 8016702:	b901      	cbnz	r1, 8016706 <__ascii_mbtowc+0x6>
 8016704:	a901      	add	r1, sp, #4
 8016706:	b142      	cbz	r2, 801671a <__ascii_mbtowc+0x1a>
 8016708:	b14b      	cbz	r3, 801671e <__ascii_mbtowc+0x1e>
 801670a:	7813      	ldrb	r3, [r2, #0]
 801670c:	600b      	str	r3, [r1, #0]
 801670e:	7812      	ldrb	r2, [r2, #0]
 8016710:	1e10      	subs	r0, r2, #0
 8016712:	bf18      	it	ne
 8016714:	2001      	movne	r0, #1
 8016716:	b002      	add	sp, #8
 8016718:	4770      	bx	lr
 801671a:	4610      	mov	r0, r2
 801671c:	e7fb      	b.n	8016716 <__ascii_mbtowc+0x16>
 801671e:	f06f 0001 	mvn.w	r0, #1
 8016722:	e7f8      	b.n	8016716 <__ascii_mbtowc+0x16>

08016724 <__malloc_lock>:
 8016724:	4801      	ldr	r0, [pc, #4]	@ (801672c <__malloc_lock+0x8>)
 8016726:	f7fe bdb4 	b.w	8015292 <__retarget_lock_acquire_recursive>
 801672a:	bf00      	nop
 801672c:	240075d4 	.word	0x240075d4

08016730 <__malloc_unlock>:
 8016730:	4801      	ldr	r0, [pc, #4]	@ (8016738 <__malloc_unlock+0x8>)
 8016732:	f7fe bdaf 	b.w	8015294 <__retarget_lock_release_recursive>
 8016736:	bf00      	nop
 8016738:	240075d4 	.word	0x240075d4

0801673c <_Balloc>:
 801673c:	b570      	push	{r4, r5, r6, lr}
 801673e:	69c6      	ldr	r6, [r0, #28]
 8016740:	4604      	mov	r4, r0
 8016742:	460d      	mov	r5, r1
 8016744:	b976      	cbnz	r6, 8016764 <_Balloc+0x28>
 8016746:	2010      	movs	r0, #16
 8016748:	f7ff ff30 	bl	80165ac <malloc>
 801674c:	4602      	mov	r2, r0
 801674e:	61e0      	str	r0, [r4, #28]
 8016750:	b920      	cbnz	r0, 801675c <_Balloc+0x20>
 8016752:	4b18      	ldr	r3, [pc, #96]	@ (80167b4 <_Balloc+0x78>)
 8016754:	4818      	ldr	r0, [pc, #96]	@ (80167b8 <_Balloc+0x7c>)
 8016756:	216b      	movs	r1, #107	@ 0x6b
 8016758:	f000 ff36 	bl	80175c8 <__assert_func>
 801675c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016760:	6006      	str	r6, [r0, #0]
 8016762:	60c6      	str	r6, [r0, #12]
 8016764:	69e6      	ldr	r6, [r4, #28]
 8016766:	68f3      	ldr	r3, [r6, #12]
 8016768:	b183      	cbz	r3, 801678c <_Balloc+0x50>
 801676a:	69e3      	ldr	r3, [r4, #28]
 801676c:	68db      	ldr	r3, [r3, #12]
 801676e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016772:	b9b8      	cbnz	r0, 80167a4 <_Balloc+0x68>
 8016774:	2101      	movs	r1, #1
 8016776:	fa01 f605 	lsl.w	r6, r1, r5
 801677a:	1d72      	adds	r2, r6, #5
 801677c:	0092      	lsls	r2, r2, #2
 801677e:	4620      	mov	r0, r4
 8016780:	f000 ff40 	bl	8017604 <_calloc_r>
 8016784:	b160      	cbz	r0, 80167a0 <_Balloc+0x64>
 8016786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801678a:	e00e      	b.n	80167aa <_Balloc+0x6e>
 801678c:	2221      	movs	r2, #33	@ 0x21
 801678e:	2104      	movs	r1, #4
 8016790:	4620      	mov	r0, r4
 8016792:	f000 ff37 	bl	8017604 <_calloc_r>
 8016796:	69e3      	ldr	r3, [r4, #28]
 8016798:	60f0      	str	r0, [r6, #12]
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d1e4      	bne.n	801676a <_Balloc+0x2e>
 80167a0:	2000      	movs	r0, #0
 80167a2:	bd70      	pop	{r4, r5, r6, pc}
 80167a4:	6802      	ldr	r2, [r0, #0]
 80167a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80167aa:	2300      	movs	r3, #0
 80167ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167b0:	e7f7      	b.n	80167a2 <_Balloc+0x66>
 80167b2:	bf00      	nop
 80167b4:	08017f73 	.word	0x08017f73
 80167b8:	08018053 	.word	0x08018053

080167bc <_Bfree>:
 80167bc:	b570      	push	{r4, r5, r6, lr}
 80167be:	69c6      	ldr	r6, [r0, #28]
 80167c0:	4605      	mov	r5, r0
 80167c2:	460c      	mov	r4, r1
 80167c4:	b976      	cbnz	r6, 80167e4 <_Bfree+0x28>
 80167c6:	2010      	movs	r0, #16
 80167c8:	f7ff fef0 	bl	80165ac <malloc>
 80167cc:	4602      	mov	r2, r0
 80167ce:	61e8      	str	r0, [r5, #28]
 80167d0:	b920      	cbnz	r0, 80167dc <_Bfree+0x20>
 80167d2:	4b09      	ldr	r3, [pc, #36]	@ (80167f8 <_Bfree+0x3c>)
 80167d4:	4809      	ldr	r0, [pc, #36]	@ (80167fc <_Bfree+0x40>)
 80167d6:	218f      	movs	r1, #143	@ 0x8f
 80167d8:	f000 fef6 	bl	80175c8 <__assert_func>
 80167dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80167e0:	6006      	str	r6, [r0, #0]
 80167e2:	60c6      	str	r6, [r0, #12]
 80167e4:	b13c      	cbz	r4, 80167f6 <_Bfree+0x3a>
 80167e6:	69eb      	ldr	r3, [r5, #28]
 80167e8:	6862      	ldr	r2, [r4, #4]
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167f0:	6021      	str	r1, [r4, #0]
 80167f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80167f6:	bd70      	pop	{r4, r5, r6, pc}
 80167f8:	08017f73 	.word	0x08017f73
 80167fc:	08018053 	.word	0x08018053

08016800 <__multadd>:
 8016800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016804:	690d      	ldr	r5, [r1, #16]
 8016806:	4607      	mov	r7, r0
 8016808:	460c      	mov	r4, r1
 801680a:	461e      	mov	r6, r3
 801680c:	f101 0c14 	add.w	ip, r1, #20
 8016810:	2000      	movs	r0, #0
 8016812:	f8dc 3000 	ldr.w	r3, [ip]
 8016816:	b299      	uxth	r1, r3
 8016818:	fb02 6101 	mla	r1, r2, r1, r6
 801681c:	0c1e      	lsrs	r6, r3, #16
 801681e:	0c0b      	lsrs	r3, r1, #16
 8016820:	fb02 3306 	mla	r3, r2, r6, r3
 8016824:	b289      	uxth	r1, r1
 8016826:	3001      	adds	r0, #1
 8016828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801682c:	4285      	cmp	r5, r0
 801682e:	f84c 1b04 	str.w	r1, [ip], #4
 8016832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016836:	dcec      	bgt.n	8016812 <__multadd+0x12>
 8016838:	b30e      	cbz	r6, 801687e <__multadd+0x7e>
 801683a:	68a3      	ldr	r3, [r4, #8]
 801683c:	42ab      	cmp	r3, r5
 801683e:	dc19      	bgt.n	8016874 <__multadd+0x74>
 8016840:	6861      	ldr	r1, [r4, #4]
 8016842:	4638      	mov	r0, r7
 8016844:	3101      	adds	r1, #1
 8016846:	f7ff ff79 	bl	801673c <_Balloc>
 801684a:	4680      	mov	r8, r0
 801684c:	b928      	cbnz	r0, 801685a <__multadd+0x5a>
 801684e:	4602      	mov	r2, r0
 8016850:	4b0c      	ldr	r3, [pc, #48]	@ (8016884 <__multadd+0x84>)
 8016852:	480d      	ldr	r0, [pc, #52]	@ (8016888 <__multadd+0x88>)
 8016854:	21ba      	movs	r1, #186	@ 0xba
 8016856:	f000 feb7 	bl	80175c8 <__assert_func>
 801685a:	6922      	ldr	r2, [r4, #16]
 801685c:	3202      	adds	r2, #2
 801685e:	f104 010c 	add.w	r1, r4, #12
 8016862:	0092      	lsls	r2, r2, #2
 8016864:	300c      	adds	r0, #12
 8016866:	f7fe fd16 	bl	8015296 <memcpy>
 801686a:	4621      	mov	r1, r4
 801686c:	4638      	mov	r0, r7
 801686e:	f7ff ffa5 	bl	80167bc <_Bfree>
 8016872:	4644      	mov	r4, r8
 8016874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016878:	3501      	adds	r5, #1
 801687a:	615e      	str	r6, [r3, #20]
 801687c:	6125      	str	r5, [r4, #16]
 801687e:	4620      	mov	r0, r4
 8016880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016884:	08017fe2 	.word	0x08017fe2
 8016888:	08018053 	.word	0x08018053

0801688c <__s2b>:
 801688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016890:	460c      	mov	r4, r1
 8016892:	4615      	mov	r5, r2
 8016894:	461f      	mov	r7, r3
 8016896:	2209      	movs	r2, #9
 8016898:	3308      	adds	r3, #8
 801689a:	4606      	mov	r6, r0
 801689c:	fb93 f3f2 	sdiv	r3, r3, r2
 80168a0:	2100      	movs	r1, #0
 80168a2:	2201      	movs	r2, #1
 80168a4:	429a      	cmp	r2, r3
 80168a6:	db09      	blt.n	80168bc <__s2b+0x30>
 80168a8:	4630      	mov	r0, r6
 80168aa:	f7ff ff47 	bl	801673c <_Balloc>
 80168ae:	b940      	cbnz	r0, 80168c2 <__s2b+0x36>
 80168b0:	4602      	mov	r2, r0
 80168b2:	4b19      	ldr	r3, [pc, #100]	@ (8016918 <__s2b+0x8c>)
 80168b4:	4819      	ldr	r0, [pc, #100]	@ (801691c <__s2b+0x90>)
 80168b6:	21d3      	movs	r1, #211	@ 0xd3
 80168b8:	f000 fe86 	bl	80175c8 <__assert_func>
 80168bc:	0052      	lsls	r2, r2, #1
 80168be:	3101      	adds	r1, #1
 80168c0:	e7f0      	b.n	80168a4 <__s2b+0x18>
 80168c2:	9b08      	ldr	r3, [sp, #32]
 80168c4:	6143      	str	r3, [r0, #20]
 80168c6:	2d09      	cmp	r5, #9
 80168c8:	f04f 0301 	mov.w	r3, #1
 80168cc:	6103      	str	r3, [r0, #16]
 80168ce:	dd16      	ble.n	80168fe <__s2b+0x72>
 80168d0:	f104 0909 	add.w	r9, r4, #9
 80168d4:	46c8      	mov	r8, r9
 80168d6:	442c      	add	r4, r5
 80168d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80168dc:	4601      	mov	r1, r0
 80168de:	3b30      	subs	r3, #48	@ 0x30
 80168e0:	220a      	movs	r2, #10
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ff ff8c 	bl	8016800 <__multadd>
 80168e8:	45a0      	cmp	r8, r4
 80168ea:	d1f5      	bne.n	80168d8 <__s2b+0x4c>
 80168ec:	f1a5 0408 	sub.w	r4, r5, #8
 80168f0:	444c      	add	r4, r9
 80168f2:	1b2d      	subs	r5, r5, r4
 80168f4:	1963      	adds	r3, r4, r5
 80168f6:	42bb      	cmp	r3, r7
 80168f8:	db04      	blt.n	8016904 <__s2b+0x78>
 80168fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168fe:	340a      	adds	r4, #10
 8016900:	2509      	movs	r5, #9
 8016902:	e7f6      	b.n	80168f2 <__s2b+0x66>
 8016904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016908:	4601      	mov	r1, r0
 801690a:	3b30      	subs	r3, #48	@ 0x30
 801690c:	220a      	movs	r2, #10
 801690e:	4630      	mov	r0, r6
 8016910:	f7ff ff76 	bl	8016800 <__multadd>
 8016914:	e7ee      	b.n	80168f4 <__s2b+0x68>
 8016916:	bf00      	nop
 8016918:	08017fe2 	.word	0x08017fe2
 801691c:	08018053 	.word	0x08018053

08016920 <__hi0bits>:
 8016920:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016924:	4603      	mov	r3, r0
 8016926:	bf36      	itet	cc
 8016928:	0403      	lslcc	r3, r0, #16
 801692a:	2000      	movcs	r0, #0
 801692c:	2010      	movcc	r0, #16
 801692e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016932:	bf3c      	itt	cc
 8016934:	021b      	lslcc	r3, r3, #8
 8016936:	3008      	addcc	r0, #8
 8016938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801693c:	bf3c      	itt	cc
 801693e:	011b      	lslcc	r3, r3, #4
 8016940:	3004      	addcc	r0, #4
 8016942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016946:	bf3c      	itt	cc
 8016948:	009b      	lslcc	r3, r3, #2
 801694a:	3002      	addcc	r0, #2
 801694c:	2b00      	cmp	r3, #0
 801694e:	db05      	blt.n	801695c <__hi0bits+0x3c>
 8016950:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016954:	f100 0001 	add.w	r0, r0, #1
 8016958:	bf08      	it	eq
 801695a:	2020      	moveq	r0, #32
 801695c:	4770      	bx	lr

0801695e <__lo0bits>:
 801695e:	6803      	ldr	r3, [r0, #0]
 8016960:	4602      	mov	r2, r0
 8016962:	f013 0007 	ands.w	r0, r3, #7
 8016966:	d00b      	beq.n	8016980 <__lo0bits+0x22>
 8016968:	07d9      	lsls	r1, r3, #31
 801696a:	d421      	bmi.n	80169b0 <__lo0bits+0x52>
 801696c:	0798      	lsls	r0, r3, #30
 801696e:	bf49      	itett	mi
 8016970:	085b      	lsrmi	r3, r3, #1
 8016972:	089b      	lsrpl	r3, r3, #2
 8016974:	2001      	movmi	r0, #1
 8016976:	6013      	strmi	r3, [r2, #0]
 8016978:	bf5c      	itt	pl
 801697a:	6013      	strpl	r3, [r2, #0]
 801697c:	2002      	movpl	r0, #2
 801697e:	4770      	bx	lr
 8016980:	b299      	uxth	r1, r3
 8016982:	b909      	cbnz	r1, 8016988 <__lo0bits+0x2a>
 8016984:	0c1b      	lsrs	r3, r3, #16
 8016986:	2010      	movs	r0, #16
 8016988:	b2d9      	uxtb	r1, r3
 801698a:	b909      	cbnz	r1, 8016990 <__lo0bits+0x32>
 801698c:	3008      	adds	r0, #8
 801698e:	0a1b      	lsrs	r3, r3, #8
 8016990:	0719      	lsls	r1, r3, #28
 8016992:	bf04      	itt	eq
 8016994:	091b      	lsreq	r3, r3, #4
 8016996:	3004      	addeq	r0, #4
 8016998:	0799      	lsls	r1, r3, #30
 801699a:	bf04      	itt	eq
 801699c:	089b      	lsreq	r3, r3, #2
 801699e:	3002      	addeq	r0, #2
 80169a0:	07d9      	lsls	r1, r3, #31
 80169a2:	d403      	bmi.n	80169ac <__lo0bits+0x4e>
 80169a4:	085b      	lsrs	r3, r3, #1
 80169a6:	f100 0001 	add.w	r0, r0, #1
 80169aa:	d003      	beq.n	80169b4 <__lo0bits+0x56>
 80169ac:	6013      	str	r3, [r2, #0]
 80169ae:	4770      	bx	lr
 80169b0:	2000      	movs	r0, #0
 80169b2:	4770      	bx	lr
 80169b4:	2020      	movs	r0, #32
 80169b6:	4770      	bx	lr

080169b8 <__i2b>:
 80169b8:	b510      	push	{r4, lr}
 80169ba:	460c      	mov	r4, r1
 80169bc:	2101      	movs	r1, #1
 80169be:	f7ff febd 	bl	801673c <_Balloc>
 80169c2:	4602      	mov	r2, r0
 80169c4:	b928      	cbnz	r0, 80169d2 <__i2b+0x1a>
 80169c6:	4b05      	ldr	r3, [pc, #20]	@ (80169dc <__i2b+0x24>)
 80169c8:	4805      	ldr	r0, [pc, #20]	@ (80169e0 <__i2b+0x28>)
 80169ca:	f240 1145 	movw	r1, #325	@ 0x145
 80169ce:	f000 fdfb 	bl	80175c8 <__assert_func>
 80169d2:	2301      	movs	r3, #1
 80169d4:	6144      	str	r4, [r0, #20]
 80169d6:	6103      	str	r3, [r0, #16]
 80169d8:	bd10      	pop	{r4, pc}
 80169da:	bf00      	nop
 80169dc:	08017fe2 	.word	0x08017fe2
 80169e0:	08018053 	.word	0x08018053

080169e4 <__multiply>:
 80169e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e8:	4617      	mov	r7, r2
 80169ea:	690a      	ldr	r2, [r1, #16]
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	429a      	cmp	r2, r3
 80169f0:	bfa8      	it	ge
 80169f2:	463b      	movge	r3, r7
 80169f4:	4689      	mov	r9, r1
 80169f6:	bfa4      	itt	ge
 80169f8:	460f      	movge	r7, r1
 80169fa:	4699      	movge	r9, r3
 80169fc:	693d      	ldr	r5, [r7, #16]
 80169fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016a02:	68bb      	ldr	r3, [r7, #8]
 8016a04:	6879      	ldr	r1, [r7, #4]
 8016a06:	eb05 060a 	add.w	r6, r5, sl
 8016a0a:	42b3      	cmp	r3, r6
 8016a0c:	b085      	sub	sp, #20
 8016a0e:	bfb8      	it	lt
 8016a10:	3101      	addlt	r1, #1
 8016a12:	f7ff fe93 	bl	801673c <_Balloc>
 8016a16:	b930      	cbnz	r0, 8016a26 <__multiply+0x42>
 8016a18:	4602      	mov	r2, r0
 8016a1a:	4b41      	ldr	r3, [pc, #260]	@ (8016b20 <__multiply+0x13c>)
 8016a1c:	4841      	ldr	r0, [pc, #260]	@ (8016b24 <__multiply+0x140>)
 8016a1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016a22:	f000 fdd1 	bl	80175c8 <__assert_func>
 8016a26:	f100 0414 	add.w	r4, r0, #20
 8016a2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016a2e:	4623      	mov	r3, r4
 8016a30:	2200      	movs	r2, #0
 8016a32:	4573      	cmp	r3, lr
 8016a34:	d320      	bcc.n	8016a78 <__multiply+0x94>
 8016a36:	f107 0814 	add.w	r8, r7, #20
 8016a3a:	f109 0114 	add.w	r1, r9, #20
 8016a3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016a42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016a46:	9302      	str	r3, [sp, #8]
 8016a48:	1beb      	subs	r3, r5, r7
 8016a4a:	3b15      	subs	r3, #21
 8016a4c:	f023 0303 	bic.w	r3, r3, #3
 8016a50:	3304      	adds	r3, #4
 8016a52:	3715      	adds	r7, #21
 8016a54:	42bd      	cmp	r5, r7
 8016a56:	bf38      	it	cc
 8016a58:	2304      	movcc	r3, #4
 8016a5a:	9301      	str	r3, [sp, #4]
 8016a5c:	9b02      	ldr	r3, [sp, #8]
 8016a5e:	9103      	str	r1, [sp, #12]
 8016a60:	428b      	cmp	r3, r1
 8016a62:	d80c      	bhi.n	8016a7e <__multiply+0x9a>
 8016a64:	2e00      	cmp	r6, #0
 8016a66:	dd03      	ble.n	8016a70 <__multiply+0x8c>
 8016a68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d055      	beq.n	8016b1c <__multiply+0x138>
 8016a70:	6106      	str	r6, [r0, #16]
 8016a72:	b005      	add	sp, #20
 8016a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a78:	f843 2b04 	str.w	r2, [r3], #4
 8016a7c:	e7d9      	b.n	8016a32 <__multiply+0x4e>
 8016a7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016a82:	f1ba 0f00 	cmp.w	sl, #0
 8016a86:	d01f      	beq.n	8016ac8 <__multiply+0xe4>
 8016a88:	46c4      	mov	ip, r8
 8016a8a:	46a1      	mov	r9, r4
 8016a8c:	2700      	movs	r7, #0
 8016a8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a92:	f8d9 3000 	ldr.w	r3, [r9]
 8016a96:	fa1f fb82 	uxth.w	fp, r2
 8016a9a:	b29b      	uxth	r3, r3
 8016a9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016aa0:	443b      	add	r3, r7
 8016aa2:	f8d9 7000 	ldr.w	r7, [r9]
 8016aa6:	0c12      	lsrs	r2, r2, #16
 8016aa8:	0c3f      	lsrs	r7, r7, #16
 8016aaa:	fb0a 7202 	mla	r2, sl, r2, r7
 8016aae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ab8:	4565      	cmp	r5, ip
 8016aba:	f849 3b04 	str.w	r3, [r9], #4
 8016abe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016ac2:	d8e4      	bhi.n	8016a8e <__multiply+0xaa>
 8016ac4:	9b01      	ldr	r3, [sp, #4]
 8016ac6:	50e7      	str	r7, [r4, r3]
 8016ac8:	9b03      	ldr	r3, [sp, #12]
 8016aca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016ace:	3104      	adds	r1, #4
 8016ad0:	f1b9 0f00 	cmp.w	r9, #0
 8016ad4:	d020      	beq.n	8016b18 <__multiply+0x134>
 8016ad6:	6823      	ldr	r3, [r4, #0]
 8016ad8:	4647      	mov	r7, r8
 8016ada:	46a4      	mov	ip, r4
 8016adc:	f04f 0a00 	mov.w	sl, #0
 8016ae0:	f8b7 b000 	ldrh.w	fp, [r7]
 8016ae4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016ae8:	fb09 220b 	mla	r2, r9, fp, r2
 8016aec:	4452      	add	r2, sl
 8016aee:	b29b      	uxth	r3, r3
 8016af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016af4:	f84c 3b04 	str.w	r3, [ip], #4
 8016af8:	f857 3b04 	ldr.w	r3, [r7], #4
 8016afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b00:	f8bc 3000 	ldrh.w	r3, [ip]
 8016b04:	fb09 330a 	mla	r3, r9, sl, r3
 8016b08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016b0c:	42bd      	cmp	r5, r7
 8016b0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b12:	d8e5      	bhi.n	8016ae0 <__multiply+0xfc>
 8016b14:	9a01      	ldr	r2, [sp, #4]
 8016b16:	50a3      	str	r3, [r4, r2]
 8016b18:	3404      	adds	r4, #4
 8016b1a:	e79f      	b.n	8016a5c <__multiply+0x78>
 8016b1c:	3e01      	subs	r6, #1
 8016b1e:	e7a1      	b.n	8016a64 <__multiply+0x80>
 8016b20:	08017fe2 	.word	0x08017fe2
 8016b24:	08018053 	.word	0x08018053

08016b28 <__pow5mult>:
 8016b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b2c:	4615      	mov	r5, r2
 8016b2e:	f012 0203 	ands.w	r2, r2, #3
 8016b32:	4607      	mov	r7, r0
 8016b34:	460e      	mov	r6, r1
 8016b36:	d007      	beq.n	8016b48 <__pow5mult+0x20>
 8016b38:	4c25      	ldr	r4, [pc, #148]	@ (8016bd0 <__pow5mult+0xa8>)
 8016b3a:	3a01      	subs	r2, #1
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b42:	f7ff fe5d 	bl	8016800 <__multadd>
 8016b46:	4606      	mov	r6, r0
 8016b48:	10ad      	asrs	r5, r5, #2
 8016b4a:	d03d      	beq.n	8016bc8 <__pow5mult+0xa0>
 8016b4c:	69fc      	ldr	r4, [r7, #28]
 8016b4e:	b97c      	cbnz	r4, 8016b70 <__pow5mult+0x48>
 8016b50:	2010      	movs	r0, #16
 8016b52:	f7ff fd2b 	bl	80165ac <malloc>
 8016b56:	4602      	mov	r2, r0
 8016b58:	61f8      	str	r0, [r7, #28]
 8016b5a:	b928      	cbnz	r0, 8016b68 <__pow5mult+0x40>
 8016b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8016bd4 <__pow5mult+0xac>)
 8016b5e:	481e      	ldr	r0, [pc, #120]	@ (8016bd8 <__pow5mult+0xb0>)
 8016b60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016b64:	f000 fd30 	bl	80175c8 <__assert_func>
 8016b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b6c:	6004      	str	r4, [r0, #0]
 8016b6e:	60c4      	str	r4, [r0, #12]
 8016b70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b78:	b94c      	cbnz	r4, 8016b8e <__pow5mult+0x66>
 8016b7a:	f240 2171 	movw	r1, #625	@ 0x271
 8016b7e:	4638      	mov	r0, r7
 8016b80:	f7ff ff1a 	bl	80169b8 <__i2b>
 8016b84:	2300      	movs	r3, #0
 8016b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b8a:	4604      	mov	r4, r0
 8016b8c:	6003      	str	r3, [r0, #0]
 8016b8e:	f04f 0900 	mov.w	r9, #0
 8016b92:	07eb      	lsls	r3, r5, #31
 8016b94:	d50a      	bpl.n	8016bac <__pow5mult+0x84>
 8016b96:	4631      	mov	r1, r6
 8016b98:	4622      	mov	r2, r4
 8016b9a:	4638      	mov	r0, r7
 8016b9c:	f7ff ff22 	bl	80169e4 <__multiply>
 8016ba0:	4631      	mov	r1, r6
 8016ba2:	4680      	mov	r8, r0
 8016ba4:	4638      	mov	r0, r7
 8016ba6:	f7ff fe09 	bl	80167bc <_Bfree>
 8016baa:	4646      	mov	r6, r8
 8016bac:	106d      	asrs	r5, r5, #1
 8016bae:	d00b      	beq.n	8016bc8 <__pow5mult+0xa0>
 8016bb0:	6820      	ldr	r0, [r4, #0]
 8016bb2:	b938      	cbnz	r0, 8016bc4 <__pow5mult+0x9c>
 8016bb4:	4622      	mov	r2, r4
 8016bb6:	4621      	mov	r1, r4
 8016bb8:	4638      	mov	r0, r7
 8016bba:	f7ff ff13 	bl	80169e4 <__multiply>
 8016bbe:	6020      	str	r0, [r4, #0]
 8016bc0:	f8c0 9000 	str.w	r9, [r0]
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	e7e4      	b.n	8016b92 <__pow5mult+0x6a>
 8016bc8:	4630      	mov	r0, r6
 8016bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bce:	bf00      	nop
 8016bd0:	08018150 	.word	0x08018150
 8016bd4:	08017f73 	.word	0x08017f73
 8016bd8:	08018053 	.word	0x08018053

08016bdc <__lshift>:
 8016bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016be0:	460c      	mov	r4, r1
 8016be2:	6849      	ldr	r1, [r1, #4]
 8016be4:	6923      	ldr	r3, [r4, #16]
 8016be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016bea:	68a3      	ldr	r3, [r4, #8]
 8016bec:	4607      	mov	r7, r0
 8016bee:	4691      	mov	r9, r2
 8016bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016bf4:	f108 0601 	add.w	r6, r8, #1
 8016bf8:	42b3      	cmp	r3, r6
 8016bfa:	db0b      	blt.n	8016c14 <__lshift+0x38>
 8016bfc:	4638      	mov	r0, r7
 8016bfe:	f7ff fd9d 	bl	801673c <_Balloc>
 8016c02:	4605      	mov	r5, r0
 8016c04:	b948      	cbnz	r0, 8016c1a <__lshift+0x3e>
 8016c06:	4602      	mov	r2, r0
 8016c08:	4b28      	ldr	r3, [pc, #160]	@ (8016cac <__lshift+0xd0>)
 8016c0a:	4829      	ldr	r0, [pc, #164]	@ (8016cb0 <__lshift+0xd4>)
 8016c0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016c10:	f000 fcda 	bl	80175c8 <__assert_func>
 8016c14:	3101      	adds	r1, #1
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	e7ee      	b.n	8016bf8 <__lshift+0x1c>
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	f100 0114 	add.w	r1, r0, #20
 8016c20:	f100 0210 	add.w	r2, r0, #16
 8016c24:	4618      	mov	r0, r3
 8016c26:	4553      	cmp	r3, sl
 8016c28:	db33      	blt.n	8016c92 <__lshift+0xb6>
 8016c2a:	6920      	ldr	r0, [r4, #16]
 8016c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c30:	f104 0314 	add.w	r3, r4, #20
 8016c34:	f019 091f 	ands.w	r9, r9, #31
 8016c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c40:	d02b      	beq.n	8016c9a <__lshift+0xbe>
 8016c42:	f1c9 0e20 	rsb	lr, r9, #32
 8016c46:	468a      	mov	sl, r1
 8016c48:	2200      	movs	r2, #0
 8016c4a:	6818      	ldr	r0, [r3, #0]
 8016c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8016c50:	4310      	orrs	r0, r2
 8016c52:	f84a 0b04 	str.w	r0, [sl], #4
 8016c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c5a:	459c      	cmp	ip, r3
 8016c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c60:	d8f3      	bhi.n	8016c4a <__lshift+0x6e>
 8016c62:	ebac 0304 	sub.w	r3, ip, r4
 8016c66:	3b15      	subs	r3, #21
 8016c68:	f023 0303 	bic.w	r3, r3, #3
 8016c6c:	3304      	adds	r3, #4
 8016c6e:	f104 0015 	add.w	r0, r4, #21
 8016c72:	4560      	cmp	r0, ip
 8016c74:	bf88      	it	hi
 8016c76:	2304      	movhi	r3, #4
 8016c78:	50ca      	str	r2, [r1, r3]
 8016c7a:	b10a      	cbz	r2, 8016c80 <__lshift+0xa4>
 8016c7c:	f108 0602 	add.w	r6, r8, #2
 8016c80:	3e01      	subs	r6, #1
 8016c82:	4638      	mov	r0, r7
 8016c84:	612e      	str	r6, [r5, #16]
 8016c86:	4621      	mov	r1, r4
 8016c88:	f7ff fd98 	bl	80167bc <_Bfree>
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8016c96:	3301      	adds	r3, #1
 8016c98:	e7c5      	b.n	8016c26 <__lshift+0x4a>
 8016c9a:	3904      	subs	r1, #4
 8016c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ca4:	459c      	cmp	ip, r3
 8016ca6:	d8f9      	bhi.n	8016c9c <__lshift+0xc0>
 8016ca8:	e7ea      	b.n	8016c80 <__lshift+0xa4>
 8016caa:	bf00      	nop
 8016cac:	08017fe2 	.word	0x08017fe2
 8016cb0:	08018053 	.word	0x08018053

08016cb4 <__mcmp>:
 8016cb4:	690a      	ldr	r2, [r1, #16]
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	6900      	ldr	r0, [r0, #16]
 8016cba:	1a80      	subs	r0, r0, r2
 8016cbc:	b530      	push	{r4, r5, lr}
 8016cbe:	d10e      	bne.n	8016cde <__mcmp+0x2a>
 8016cc0:	3314      	adds	r3, #20
 8016cc2:	3114      	adds	r1, #20
 8016cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016cd4:	4295      	cmp	r5, r2
 8016cd6:	d003      	beq.n	8016ce0 <__mcmp+0x2c>
 8016cd8:	d205      	bcs.n	8016ce6 <__mcmp+0x32>
 8016cda:	f04f 30ff 	mov.w	r0, #4294967295
 8016cde:	bd30      	pop	{r4, r5, pc}
 8016ce0:	42a3      	cmp	r3, r4
 8016ce2:	d3f3      	bcc.n	8016ccc <__mcmp+0x18>
 8016ce4:	e7fb      	b.n	8016cde <__mcmp+0x2a>
 8016ce6:	2001      	movs	r0, #1
 8016ce8:	e7f9      	b.n	8016cde <__mcmp+0x2a>
	...

08016cec <__mdiff>:
 8016cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf0:	4689      	mov	r9, r1
 8016cf2:	4606      	mov	r6, r0
 8016cf4:	4611      	mov	r1, r2
 8016cf6:	4648      	mov	r0, r9
 8016cf8:	4614      	mov	r4, r2
 8016cfa:	f7ff ffdb 	bl	8016cb4 <__mcmp>
 8016cfe:	1e05      	subs	r5, r0, #0
 8016d00:	d112      	bne.n	8016d28 <__mdiff+0x3c>
 8016d02:	4629      	mov	r1, r5
 8016d04:	4630      	mov	r0, r6
 8016d06:	f7ff fd19 	bl	801673c <_Balloc>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	b928      	cbnz	r0, 8016d1a <__mdiff+0x2e>
 8016d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8016e0c <__mdiff+0x120>)
 8016d10:	f240 2137 	movw	r1, #567	@ 0x237
 8016d14:	483e      	ldr	r0, [pc, #248]	@ (8016e10 <__mdiff+0x124>)
 8016d16:	f000 fc57 	bl	80175c8 <__assert_func>
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d20:	4610      	mov	r0, r2
 8016d22:	b003      	add	sp, #12
 8016d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d28:	bfbc      	itt	lt
 8016d2a:	464b      	movlt	r3, r9
 8016d2c:	46a1      	movlt	r9, r4
 8016d2e:	4630      	mov	r0, r6
 8016d30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016d34:	bfba      	itte	lt
 8016d36:	461c      	movlt	r4, r3
 8016d38:	2501      	movlt	r5, #1
 8016d3a:	2500      	movge	r5, #0
 8016d3c:	f7ff fcfe 	bl	801673c <_Balloc>
 8016d40:	4602      	mov	r2, r0
 8016d42:	b918      	cbnz	r0, 8016d4c <__mdiff+0x60>
 8016d44:	4b31      	ldr	r3, [pc, #196]	@ (8016e0c <__mdiff+0x120>)
 8016d46:	f240 2145 	movw	r1, #581	@ 0x245
 8016d4a:	e7e3      	b.n	8016d14 <__mdiff+0x28>
 8016d4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016d50:	6926      	ldr	r6, [r4, #16]
 8016d52:	60c5      	str	r5, [r0, #12]
 8016d54:	f109 0310 	add.w	r3, r9, #16
 8016d58:	f109 0514 	add.w	r5, r9, #20
 8016d5c:	f104 0e14 	add.w	lr, r4, #20
 8016d60:	f100 0b14 	add.w	fp, r0, #20
 8016d64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016d68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016d6c:	9301      	str	r3, [sp, #4]
 8016d6e:	46d9      	mov	r9, fp
 8016d70:	f04f 0c00 	mov.w	ip, #0
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016d7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016d7e:	9301      	str	r3, [sp, #4]
 8016d80:	fa1f f38a 	uxth.w	r3, sl
 8016d84:	4619      	mov	r1, r3
 8016d86:	b283      	uxth	r3, r0
 8016d88:	1acb      	subs	r3, r1, r3
 8016d8a:	0c00      	lsrs	r0, r0, #16
 8016d8c:	4463      	add	r3, ip
 8016d8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016d92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016d9c:	4576      	cmp	r6, lr
 8016d9e:	f849 3b04 	str.w	r3, [r9], #4
 8016da2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016da6:	d8e5      	bhi.n	8016d74 <__mdiff+0x88>
 8016da8:	1b33      	subs	r3, r6, r4
 8016daa:	3b15      	subs	r3, #21
 8016dac:	f023 0303 	bic.w	r3, r3, #3
 8016db0:	3415      	adds	r4, #21
 8016db2:	3304      	adds	r3, #4
 8016db4:	42a6      	cmp	r6, r4
 8016db6:	bf38      	it	cc
 8016db8:	2304      	movcc	r3, #4
 8016dba:	441d      	add	r5, r3
 8016dbc:	445b      	add	r3, fp
 8016dbe:	461e      	mov	r6, r3
 8016dc0:	462c      	mov	r4, r5
 8016dc2:	4544      	cmp	r4, r8
 8016dc4:	d30e      	bcc.n	8016de4 <__mdiff+0xf8>
 8016dc6:	f108 0103 	add.w	r1, r8, #3
 8016dca:	1b49      	subs	r1, r1, r5
 8016dcc:	f021 0103 	bic.w	r1, r1, #3
 8016dd0:	3d03      	subs	r5, #3
 8016dd2:	45a8      	cmp	r8, r5
 8016dd4:	bf38      	it	cc
 8016dd6:	2100      	movcc	r1, #0
 8016dd8:	440b      	add	r3, r1
 8016dda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dde:	b191      	cbz	r1, 8016e06 <__mdiff+0x11a>
 8016de0:	6117      	str	r7, [r2, #16]
 8016de2:	e79d      	b.n	8016d20 <__mdiff+0x34>
 8016de4:	f854 1b04 	ldr.w	r1, [r4], #4
 8016de8:	46e6      	mov	lr, ip
 8016dea:	0c08      	lsrs	r0, r1, #16
 8016dec:	fa1c fc81 	uxtah	ip, ip, r1
 8016df0:	4471      	add	r1, lr
 8016df2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016df6:	b289      	uxth	r1, r1
 8016df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016dfc:	f846 1b04 	str.w	r1, [r6], #4
 8016e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e04:	e7dd      	b.n	8016dc2 <__mdiff+0xd6>
 8016e06:	3f01      	subs	r7, #1
 8016e08:	e7e7      	b.n	8016dda <__mdiff+0xee>
 8016e0a:	bf00      	nop
 8016e0c:	08017fe2 	.word	0x08017fe2
 8016e10:	08018053 	.word	0x08018053

08016e14 <__ulp>:
 8016e14:	b082      	sub	sp, #8
 8016e16:	ed8d 0b00 	vstr	d0, [sp]
 8016e1a:	9a01      	ldr	r2, [sp, #4]
 8016e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8016e5c <__ulp+0x48>)
 8016e1e:	4013      	ands	r3, r2
 8016e20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	dc08      	bgt.n	8016e3a <__ulp+0x26>
 8016e28:	425b      	negs	r3, r3
 8016e2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016e2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016e32:	da04      	bge.n	8016e3e <__ulp+0x2a>
 8016e34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016e38:	4113      	asrs	r3, r2
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	e008      	b.n	8016e50 <__ulp+0x3c>
 8016e3e:	f1a2 0314 	sub.w	r3, r2, #20
 8016e42:	2b1e      	cmp	r3, #30
 8016e44:	bfda      	itte	le
 8016e46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016e4a:	40da      	lsrle	r2, r3
 8016e4c:	2201      	movgt	r2, #1
 8016e4e:	2300      	movs	r3, #0
 8016e50:	4619      	mov	r1, r3
 8016e52:	4610      	mov	r0, r2
 8016e54:	ec41 0b10 	vmov	d0, r0, r1
 8016e58:	b002      	add	sp, #8
 8016e5a:	4770      	bx	lr
 8016e5c:	7ff00000 	.word	0x7ff00000

08016e60 <__b2d>:
 8016e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	6906      	ldr	r6, [r0, #16]
 8016e66:	f100 0814 	add.w	r8, r0, #20
 8016e6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016e6e:	1f37      	subs	r7, r6, #4
 8016e70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016e74:	4610      	mov	r0, r2
 8016e76:	f7ff fd53 	bl	8016920 <__hi0bits>
 8016e7a:	f1c0 0320 	rsb	r3, r0, #32
 8016e7e:	280a      	cmp	r0, #10
 8016e80:	600b      	str	r3, [r1, #0]
 8016e82:	491b      	ldr	r1, [pc, #108]	@ (8016ef0 <__b2d+0x90>)
 8016e84:	dc15      	bgt.n	8016eb2 <__b2d+0x52>
 8016e86:	f1c0 0c0b 	rsb	ip, r0, #11
 8016e8a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016e8e:	45b8      	cmp	r8, r7
 8016e90:	ea43 0501 	orr.w	r5, r3, r1
 8016e94:	bf34      	ite	cc
 8016e96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016e9a:	2300      	movcs	r3, #0
 8016e9c:	3015      	adds	r0, #21
 8016e9e:	fa02 f000 	lsl.w	r0, r2, r0
 8016ea2:	fa23 f30c 	lsr.w	r3, r3, ip
 8016ea6:	4303      	orrs	r3, r0
 8016ea8:	461c      	mov	r4, r3
 8016eaa:	ec45 4b10 	vmov	d0, r4, r5
 8016eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb2:	45b8      	cmp	r8, r7
 8016eb4:	bf3a      	itte	cc
 8016eb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016eba:	f1a6 0708 	subcc.w	r7, r6, #8
 8016ebe:	2300      	movcs	r3, #0
 8016ec0:	380b      	subs	r0, #11
 8016ec2:	d012      	beq.n	8016eea <__b2d+0x8a>
 8016ec4:	f1c0 0120 	rsb	r1, r0, #32
 8016ec8:	fa23 f401 	lsr.w	r4, r3, r1
 8016ecc:	4082      	lsls	r2, r0
 8016ece:	4322      	orrs	r2, r4
 8016ed0:	4547      	cmp	r7, r8
 8016ed2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016ed6:	bf8c      	ite	hi
 8016ed8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016edc:	2200      	movls	r2, #0
 8016ede:	4083      	lsls	r3, r0
 8016ee0:	40ca      	lsrs	r2, r1
 8016ee2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	e7de      	b.n	8016ea8 <__b2d+0x48>
 8016eea:	ea42 0501 	orr.w	r5, r2, r1
 8016eee:	e7db      	b.n	8016ea8 <__b2d+0x48>
 8016ef0:	3ff00000 	.word	0x3ff00000

08016ef4 <__d2b>:
 8016ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ef8:	460f      	mov	r7, r1
 8016efa:	2101      	movs	r1, #1
 8016efc:	ec59 8b10 	vmov	r8, r9, d0
 8016f00:	4616      	mov	r6, r2
 8016f02:	f7ff fc1b 	bl	801673c <_Balloc>
 8016f06:	4604      	mov	r4, r0
 8016f08:	b930      	cbnz	r0, 8016f18 <__d2b+0x24>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	4b23      	ldr	r3, [pc, #140]	@ (8016f9c <__d2b+0xa8>)
 8016f0e:	4824      	ldr	r0, [pc, #144]	@ (8016fa0 <__d2b+0xac>)
 8016f10:	f240 310f 	movw	r1, #783	@ 0x30f
 8016f14:	f000 fb58 	bl	80175c8 <__assert_func>
 8016f18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016f1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f20:	b10d      	cbz	r5, 8016f26 <__d2b+0x32>
 8016f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016f26:	9301      	str	r3, [sp, #4]
 8016f28:	f1b8 0300 	subs.w	r3, r8, #0
 8016f2c:	d023      	beq.n	8016f76 <__d2b+0x82>
 8016f2e:	4668      	mov	r0, sp
 8016f30:	9300      	str	r3, [sp, #0]
 8016f32:	f7ff fd14 	bl	801695e <__lo0bits>
 8016f36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016f3a:	b1d0      	cbz	r0, 8016f72 <__d2b+0x7e>
 8016f3c:	f1c0 0320 	rsb	r3, r0, #32
 8016f40:	fa02 f303 	lsl.w	r3, r2, r3
 8016f44:	430b      	orrs	r3, r1
 8016f46:	40c2      	lsrs	r2, r0
 8016f48:	6163      	str	r3, [r4, #20]
 8016f4a:	9201      	str	r2, [sp, #4]
 8016f4c:	9b01      	ldr	r3, [sp, #4]
 8016f4e:	61a3      	str	r3, [r4, #24]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	bf0c      	ite	eq
 8016f54:	2201      	moveq	r2, #1
 8016f56:	2202      	movne	r2, #2
 8016f58:	6122      	str	r2, [r4, #16]
 8016f5a:	b1a5      	cbz	r5, 8016f86 <__d2b+0x92>
 8016f5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016f60:	4405      	add	r5, r0
 8016f62:	603d      	str	r5, [r7, #0]
 8016f64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016f68:	6030      	str	r0, [r6, #0]
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	b003      	add	sp, #12
 8016f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f72:	6161      	str	r1, [r4, #20]
 8016f74:	e7ea      	b.n	8016f4c <__d2b+0x58>
 8016f76:	a801      	add	r0, sp, #4
 8016f78:	f7ff fcf1 	bl	801695e <__lo0bits>
 8016f7c:	9b01      	ldr	r3, [sp, #4]
 8016f7e:	6163      	str	r3, [r4, #20]
 8016f80:	3020      	adds	r0, #32
 8016f82:	2201      	movs	r2, #1
 8016f84:	e7e8      	b.n	8016f58 <__d2b+0x64>
 8016f86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016f8e:	6038      	str	r0, [r7, #0]
 8016f90:	6918      	ldr	r0, [r3, #16]
 8016f92:	f7ff fcc5 	bl	8016920 <__hi0bits>
 8016f96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016f9a:	e7e5      	b.n	8016f68 <__d2b+0x74>
 8016f9c:	08017fe2 	.word	0x08017fe2
 8016fa0:	08018053 	.word	0x08018053

08016fa4 <__ratio>:
 8016fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa8:	4688      	mov	r8, r1
 8016faa:	4669      	mov	r1, sp
 8016fac:	4681      	mov	r9, r0
 8016fae:	f7ff ff57 	bl	8016e60 <__b2d>
 8016fb2:	a901      	add	r1, sp, #4
 8016fb4:	4640      	mov	r0, r8
 8016fb6:	ec55 4b10 	vmov	r4, r5, d0
 8016fba:	f7ff ff51 	bl	8016e60 <__b2d>
 8016fbe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016fc2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016fc6:	1ad2      	subs	r2, r2, r3
 8016fc8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016fcc:	1a5b      	subs	r3, r3, r1
 8016fce:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016fd2:	ec57 6b10 	vmov	r6, r7, d0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	bfd6      	itet	le
 8016fda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016fde:	462a      	movgt	r2, r5
 8016fe0:	463a      	movle	r2, r7
 8016fe2:	46ab      	mov	fp, r5
 8016fe4:	46a2      	mov	sl, r4
 8016fe6:	bfce      	itee	gt
 8016fe8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016fec:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016ff0:	ee00 3a90 	vmovle	s1, r3
 8016ff4:	ec4b ab17 	vmov	d7, sl, fp
 8016ff8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016ffc:	b003      	add	sp, #12
 8016ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017002 <__copybits>:
 8017002:	3901      	subs	r1, #1
 8017004:	b570      	push	{r4, r5, r6, lr}
 8017006:	1149      	asrs	r1, r1, #5
 8017008:	6914      	ldr	r4, [r2, #16]
 801700a:	3101      	adds	r1, #1
 801700c:	f102 0314 	add.w	r3, r2, #20
 8017010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017018:	1f05      	subs	r5, r0, #4
 801701a:	42a3      	cmp	r3, r4
 801701c:	d30c      	bcc.n	8017038 <__copybits+0x36>
 801701e:	1aa3      	subs	r3, r4, r2
 8017020:	3b11      	subs	r3, #17
 8017022:	f023 0303 	bic.w	r3, r3, #3
 8017026:	3211      	adds	r2, #17
 8017028:	42a2      	cmp	r2, r4
 801702a:	bf88      	it	hi
 801702c:	2300      	movhi	r3, #0
 801702e:	4418      	add	r0, r3
 8017030:	2300      	movs	r3, #0
 8017032:	4288      	cmp	r0, r1
 8017034:	d305      	bcc.n	8017042 <__copybits+0x40>
 8017036:	bd70      	pop	{r4, r5, r6, pc}
 8017038:	f853 6b04 	ldr.w	r6, [r3], #4
 801703c:	f845 6f04 	str.w	r6, [r5, #4]!
 8017040:	e7eb      	b.n	801701a <__copybits+0x18>
 8017042:	f840 3b04 	str.w	r3, [r0], #4
 8017046:	e7f4      	b.n	8017032 <__copybits+0x30>

08017048 <__any_on>:
 8017048:	f100 0214 	add.w	r2, r0, #20
 801704c:	6900      	ldr	r0, [r0, #16]
 801704e:	114b      	asrs	r3, r1, #5
 8017050:	4298      	cmp	r0, r3
 8017052:	b510      	push	{r4, lr}
 8017054:	db11      	blt.n	801707a <__any_on+0x32>
 8017056:	dd0a      	ble.n	801706e <__any_on+0x26>
 8017058:	f011 011f 	ands.w	r1, r1, #31
 801705c:	d007      	beq.n	801706e <__any_on+0x26>
 801705e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017062:	fa24 f001 	lsr.w	r0, r4, r1
 8017066:	fa00 f101 	lsl.w	r1, r0, r1
 801706a:	428c      	cmp	r4, r1
 801706c:	d10b      	bne.n	8017086 <__any_on+0x3e>
 801706e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017072:	4293      	cmp	r3, r2
 8017074:	d803      	bhi.n	801707e <__any_on+0x36>
 8017076:	2000      	movs	r0, #0
 8017078:	bd10      	pop	{r4, pc}
 801707a:	4603      	mov	r3, r0
 801707c:	e7f7      	b.n	801706e <__any_on+0x26>
 801707e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017082:	2900      	cmp	r1, #0
 8017084:	d0f5      	beq.n	8017072 <__any_on+0x2a>
 8017086:	2001      	movs	r0, #1
 8017088:	e7f6      	b.n	8017078 <__any_on+0x30>

0801708a <__ascii_wctomb>:
 801708a:	4603      	mov	r3, r0
 801708c:	4608      	mov	r0, r1
 801708e:	b141      	cbz	r1, 80170a2 <__ascii_wctomb+0x18>
 8017090:	2aff      	cmp	r2, #255	@ 0xff
 8017092:	d904      	bls.n	801709e <__ascii_wctomb+0x14>
 8017094:	228a      	movs	r2, #138	@ 0x8a
 8017096:	601a      	str	r2, [r3, #0]
 8017098:	f04f 30ff 	mov.w	r0, #4294967295
 801709c:	4770      	bx	lr
 801709e:	700a      	strb	r2, [r1, #0]
 80170a0:	2001      	movs	r0, #1
 80170a2:	4770      	bx	lr

080170a4 <__sfputc_r>:
 80170a4:	6893      	ldr	r3, [r2, #8]
 80170a6:	3b01      	subs	r3, #1
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	b410      	push	{r4}
 80170ac:	6093      	str	r3, [r2, #8]
 80170ae:	da08      	bge.n	80170c2 <__sfputc_r+0x1e>
 80170b0:	6994      	ldr	r4, [r2, #24]
 80170b2:	42a3      	cmp	r3, r4
 80170b4:	db01      	blt.n	80170ba <__sfputc_r+0x16>
 80170b6:	290a      	cmp	r1, #10
 80170b8:	d103      	bne.n	80170c2 <__sfputc_r+0x1e>
 80170ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170be:	f000 b9df 	b.w	8017480 <__swbuf_r>
 80170c2:	6813      	ldr	r3, [r2, #0]
 80170c4:	1c58      	adds	r0, r3, #1
 80170c6:	6010      	str	r0, [r2, #0]
 80170c8:	7019      	strb	r1, [r3, #0]
 80170ca:	4608      	mov	r0, r1
 80170cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170d0:	4770      	bx	lr

080170d2 <__sfputs_r>:
 80170d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d4:	4606      	mov	r6, r0
 80170d6:	460f      	mov	r7, r1
 80170d8:	4614      	mov	r4, r2
 80170da:	18d5      	adds	r5, r2, r3
 80170dc:	42ac      	cmp	r4, r5
 80170de:	d101      	bne.n	80170e4 <__sfputs_r+0x12>
 80170e0:	2000      	movs	r0, #0
 80170e2:	e007      	b.n	80170f4 <__sfputs_r+0x22>
 80170e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170e8:	463a      	mov	r2, r7
 80170ea:	4630      	mov	r0, r6
 80170ec:	f7ff ffda 	bl	80170a4 <__sfputc_r>
 80170f0:	1c43      	adds	r3, r0, #1
 80170f2:	d1f3      	bne.n	80170dc <__sfputs_r+0xa>
 80170f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080170f8 <_vfiprintf_r>:
 80170f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170fc:	460d      	mov	r5, r1
 80170fe:	b09d      	sub	sp, #116	@ 0x74
 8017100:	4614      	mov	r4, r2
 8017102:	4698      	mov	r8, r3
 8017104:	4606      	mov	r6, r0
 8017106:	b118      	cbz	r0, 8017110 <_vfiprintf_r+0x18>
 8017108:	6a03      	ldr	r3, [r0, #32]
 801710a:	b90b      	cbnz	r3, 8017110 <_vfiprintf_r+0x18>
 801710c:	f7fd ff26 	bl	8014f5c <__sinit>
 8017110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017112:	07d9      	lsls	r1, r3, #31
 8017114:	d405      	bmi.n	8017122 <_vfiprintf_r+0x2a>
 8017116:	89ab      	ldrh	r3, [r5, #12]
 8017118:	059a      	lsls	r2, r3, #22
 801711a:	d402      	bmi.n	8017122 <_vfiprintf_r+0x2a>
 801711c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801711e:	f7fe f8b8 	bl	8015292 <__retarget_lock_acquire_recursive>
 8017122:	89ab      	ldrh	r3, [r5, #12]
 8017124:	071b      	lsls	r3, r3, #28
 8017126:	d501      	bpl.n	801712c <_vfiprintf_r+0x34>
 8017128:	692b      	ldr	r3, [r5, #16]
 801712a:	b99b      	cbnz	r3, 8017154 <_vfiprintf_r+0x5c>
 801712c:	4629      	mov	r1, r5
 801712e:	4630      	mov	r0, r6
 8017130:	f000 f9e4 	bl	80174fc <__swsetup_r>
 8017134:	b170      	cbz	r0, 8017154 <_vfiprintf_r+0x5c>
 8017136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017138:	07dc      	lsls	r4, r3, #31
 801713a:	d504      	bpl.n	8017146 <_vfiprintf_r+0x4e>
 801713c:	f04f 30ff 	mov.w	r0, #4294967295
 8017140:	b01d      	add	sp, #116	@ 0x74
 8017142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017146:	89ab      	ldrh	r3, [r5, #12]
 8017148:	0598      	lsls	r0, r3, #22
 801714a:	d4f7      	bmi.n	801713c <_vfiprintf_r+0x44>
 801714c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801714e:	f7fe f8a1 	bl	8015294 <__retarget_lock_release_recursive>
 8017152:	e7f3      	b.n	801713c <_vfiprintf_r+0x44>
 8017154:	2300      	movs	r3, #0
 8017156:	9309      	str	r3, [sp, #36]	@ 0x24
 8017158:	2320      	movs	r3, #32
 801715a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801715e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017162:	2330      	movs	r3, #48	@ 0x30
 8017164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017314 <_vfiprintf_r+0x21c>
 8017168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801716c:	f04f 0901 	mov.w	r9, #1
 8017170:	4623      	mov	r3, r4
 8017172:	469a      	mov	sl, r3
 8017174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017178:	b10a      	cbz	r2, 801717e <_vfiprintf_r+0x86>
 801717a:	2a25      	cmp	r2, #37	@ 0x25
 801717c:	d1f9      	bne.n	8017172 <_vfiprintf_r+0x7a>
 801717e:	ebba 0b04 	subs.w	fp, sl, r4
 8017182:	d00b      	beq.n	801719c <_vfiprintf_r+0xa4>
 8017184:	465b      	mov	r3, fp
 8017186:	4622      	mov	r2, r4
 8017188:	4629      	mov	r1, r5
 801718a:	4630      	mov	r0, r6
 801718c:	f7ff ffa1 	bl	80170d2 <__sfputs_r>
 8017190:	3001      	adds	r0, #1
 8017192:	f000 80a7 	beq.w	80172e4 <_vfiprintf_r+0x1ec>
 8017196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017198:	445a      	add	r2, fp
 801719a:	9209      	str	r2, [sp, #36]	@ 0x24
 801719c:	f89a 3000 	ldrb.w	r3, [sl]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	f000 809f 	beq.w	80172e4 <_vfiprintf_r+0x1ec>
 80171a6:	2300      	movs	r3, #0
 80171a8:	f04f 32ff 	mov.w	r2, #4294967295
 80171ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171b0:	f10a 0a01 	add.w	sl, sl, #1
 80171b4:	9304      	str	r3, [sp, #16]
 80171b6:	9307      	str	r3, [sp, #28]
 80171b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80171be:	4654      	mov	r4, sl
 80171c0:	2205      	movs	r2, #5
 80171c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171c6:	4853      	ldr	r0, [pc, #332]	@ (8017314 <_vfiprintf_r+0x21c>)
 80171c8:	f7e9 f88a 	bl	80002e0 <memchr>
 80171cc:	9a04      	ldr	r2, [sp, #16]
 80171ce:	b9d8      	cbnz	r0, 8017208 <_vfiprintf_r+0x110>
 80171d0:	06d1      	lsls	r1, r2, #27
 80171d2:	bf44      	itt	mi
 80171d4:	2320      	movmi	r3, #32
 80171d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171da:	0713      	lsls	r3, r2, #28
 80171dc:	bf44      	itt	mi
 80171de:	232b      	movmi	r3, #43	@ 0x2b
 80171e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171e4:	f89a 3000 	ldrb.w	r3, [sl]
 80171e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80171ea:	d015      	beq.n	8017218 <_vfiprintf_r+0x120>
 80171ec:	9a07      	ldr	r2, [sp, #28]
 80171ee:	4654      	mov	r4, sl
 80171f0:	2000      	movs	r0, #0
 80171f2:	f04f 0c0a 	mov.w	ip, #10
 80171f6:	4621      	mov	r1, r4
 80171f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171fc:	3b30      	subs	r3, #48	@ 0x30
 80171fe:	2b09      	cmp	r3, #9
 8017200:	d94b      	bls.n	801729a <_vfiprintf_r+0x1a2>
 8017202:	b1b0      	cbz	r0, 8017232 <_vfiprintf_r+0x13a>
 8017204:	9207      	str	r2, [sp, #28]
 8017206:	e014      	b.n	8017232 <_vfiprintf_r+0x13a>
 8017208:	eba0 0308 	sub.w	r3, r0, r8
 801720c:	fa09 f303 	lsl.w	r3, r9, r3
 8017210:	4313      	orrs	r3, r2
 8017212:	9304      	str	r3, [sp, #16]
 8017214:	46a2      	mov	sl, r4
 8017216:	e7d2      	b.n	80171be <_vfiprintf_r+0xc6>
 8017218:	9b03      	ldr	r3, [sp, #12]
 801721a:	1d19      	adds	r1, r3, #4
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	9103      	str	r1, [sp, #12]
 8017220:	2b00      	cmp	r3, #0
 8017222:	bfbb      	ittet	lt
 8017224:	425b      	neglt	r3, r3
 8017226:	f042 0202 	orrlt.w	r2, r2, #2
 801722a:	9307      	strge	r3, [sp, #28]
 801722c:	9307      	strlt	r3, [sp, #28]
 801722e:	bfb8      	it	lt
 8017230:	9204      	strlt	r2, [sp, #16]
 8017232:	7823      	ldrb	r3, [r4, #0]
 8017234:	2b2e      	cmp	r3, #46	@ 0x2e
 8017236:	d10a      	bne.n	801724e <_vfiprintf_r+0x156>
 8017238:	7863      	ldrb	r3, [r4, #1]
 801723a:	2b2a      	cmp	r3, #42	@ 0x2a
 801723c:	d132      	bne.n	80172a4 <_vfiprintf_r+0x1ac>
 801723e:	9b03      	ldr	r3, [sp, #12]
 8017240:	1d1a      	adds	r2, r3, #4
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	9203      	str	r2, [sp, #12]
 8017246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801724a:	3402      	adds	r4, #2
 801724c:	9305      	str	r3, [sp, #20]
 801724e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017324 <_vfiprintf_r+0x22c>
 8017252:	7821      	ldrb	r1, [r4, #0]
 8017254:	2203      	movs	r2, #3
 8017256:	4650      	mov	r0, sl
 8017258:	f7e9 f842 	bl	80002e0 <memchr>
 801725c:	b138      	cbz	r0, 801726e <_vfiprintf_r+0x176>
 801725e:	9b04      	ldr	r3, [sp, #16]
 8017260:	eba0 000a 	sub.w	r0, r0, sl
 8017264:	2240      	movs	r2, #64	@ 0x40
 8017266:	4082      	lsls	r2, r0
 8017268:	4313      	orrs	r3, r2
 801726a:	3401      	adds	r4, #1
 801726c:	9304      	str	r3, [sp, #16]
 801726e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017272:	4829      	ldr	r0, [pc, #164]	@ (8017318 <_vfiprintf_r+0x220>)
 8017274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017278:	2206      	movs	r2, #6
 801727a:	f7e9 f831 	bl	80002e0 <memchr>
 801727e:	2800      	cmp	r0, #0
 8017280:	d03f      	beq.n	8017302 <_vfiprintf_r+0x20a>
 8017282:	4b26      	ldr	r3, [pc, #152]	@ (801731c <_vfiprintf_r+0x224>)
 8017284:	bb1b      	cbnz	r3, 80172ce <_vfiprintf_r+0x1d6>
 8017286:	9b03      	ldr	r3, [sp, #12]
 8017288:	3307      	adds	r3, #7
 801728a:	f023 0307 	bic.w	r3, r3, #7
 801728e:	3308      	adds	r3, #8
 8017290:	9303      	str	r3, [sp, #12]
 8017292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017294:	443b      	add	r3, r7
 8017296:	9309      	str	r3, [sp, #36]	@ 0x24
 8017298:	e76a      	b.n	8017170 <_vfiprintf_r+0x78>
 801729a:	fb0c 3202 	mla	r2, ip, r2, r3
 801729e:	460c      	mov	r4, r1
 80172a0:	2001      	movs	r0, #1
 80172a2:	e7a8      	b.n	80171f6 <_vfiprintf_r+0xfe>
 80172a4:	2300      	movs	r3, #0
 80172a6:	3401      	adds	r4, #1
 80172a8:	9305      	str	r3, [sp, #20]
 80172aa:	4619      	mov	r1, r3
 80172ac:	f04f 0c0a 	mov.w	ip, #10
 80172b0:	4620      	mov	r0, r4
 80172b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172b6:	3a30      	subs	r2, #48	@ 0x30
 80172b8:	2a09      	cmp	r2, #9
 80172ba:	d903      	bls.n	80172c4 <_vfiprintf_r+0x1cc>
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d0c6      	beq.n	801724e <_vfiprintf_r+0x156>
 80172c0:	9105      	str	r1, [sp, #20]
 80172c2:	e7c4      	b.n	801724e <_vfiprintf_r+0x156>
 80172c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80172c8:	4604      	mov	r4, r0
 80172ca:	2301      	movs	r3, #1
 80172cc:	e7f0      	b.n	80172b0 <_vfiprintf_r+0x1b8>
 80172ce:	ab03      	add	r3, sp, #12
 80172d0:	9300      	str	r3, [sp, #0]
 80172d2:	462a      	mov	r2, r5
 80172d4:	4b12      	ldr	r3, [pc, #72]	@ (8017320 <_vfiprintf_r+0x228>)
 80172d6:	a904      	add	r1, sp, #16
 80172d8:	4630      	mov	r0, r6
 80172da:	f7fd fa0d 	bl	80146f8 <_printf_float>
 80172de:	4607      	mov	r7, r0
 80172e0:	1c78      	adds	r0, r7, #1
 80172e2:	d1d6      	bne.n	8017292 <_vfiprintf_r+0x19a>
 80172e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80172e6:	07d9      	lsls	r1, r3, #31
 80172e8:	d405      	bmi.n	80172f6 <_vfiprintf_r+0x1fe>
 80172ea:	89ab      	ldrh	r3, [r5, #12]
 80172ec:	059a      	lsls	r2, r3, #22
 80172ee:	d402      	bmi.n	80172f6 <_vfiprintf_r+0x1fe>
 80172f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172f2:	f7fd ffcf 	bl	8015294 <__retarget_lock_release_recursive>
 80172f6:	89ab      	ldrh	r3, [r5, #12]
 80172f8:	065b      	lsls	r3, r3, #25
 80172fa:	f53f af1f 	bmi.w	801713c <_vfiprintf_r+0x44>
 80172fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017300:	e71e      	b.n	8017140 <_vfiprintf_r+0x48>
 8017302:	ab03      	add	r3, sp, #12
 8017304:	9300      	str	r3, [sp, #0]
 8017306:	462a      	mov	r2, r5
 8017308:	4b05      	ldr	r3, [pc, #20]	@ (8017320 <_vfiprintf_r+0x228>)
 801730a:	a904      	add	r1, sp, #16
 801730c:	4630      	mov	r0, r6
 801730e:	f7fd fc7b 	bl	8014c08 <_printf_i>
 8017312:	e7e4      	b.n	80172de <_vfiprintf_r+0x1e6>
 8017314:	080180ac 	.word	0x080180ac
 8017318:	080180b6 	.word	0x080180b6
 801731c:	080146f9 	.word	0x080146f9
 8017320:	080170d3 	.word	0x080170d3
 8017324:	080180b2 	.word	0x080180b2

08017328 <__sflush_r>:
 8017328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017330:	0716      	lsls	r6, r2, #28
 8017332:	4605      	mov	r5, r0
 8017334:	460c      	mov	r4, r1
 8017336:	d454      	bmi.n	80173e2 <__sflush_r+0xba>
 8017338:	684b      	ldr	r3, [r1, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	dc02      	bgt.n	8017344 <__sflush_r+0x1c>
 801733e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017340:	2b00      	cmp	r3, #0
 8017342:	dd48      	ble.n	80173d6 <__sflush_r+0xae>
 8017344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017346:	2e00      	cmp	r6, #0
 8017348:	d045      	beq.n	80173d6 <__sflush_r+0xae>
 801734a:	2300      	movs	r3, #0
 801734c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017350:	682f      	ldr	r7, [r5, #0]
 8017352:	6a21      	ldr	r1, [r4, #32]
 8017354:	602b      	str	r3, [r5, #0]
 8017356:	d030      	beq.n	80173ba <__sflush_r+0x92>
 8017358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801735a:	89a3      	ldrh	r3, [r4, #12]
 801735c:	0759      	lsls	r1, r3, #29
 801735e:	d505      	bpl.n	801736c <__sflush_r+0x44>
 8017360:	6863      	ldr	r3, [r4, #4]
 8017362:	1ad2      	subs	r2, r2, r3
 8017364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017366:	b10b      	cbz	r3, 801736c <__sflush_r+0x44>
 8017368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801736a:	1ad2      	subs	r2, r2, r3
 801736c:	2300      	movs	r3, #0
 801736e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017370:	6a21      	ldr	r1, [r4, #32]
 8017372:	4628      	mov	r0, r5
 8017374:	47b0      	blx	r6
 8017376:	1c43      	adds	r3, r0, #1
 8017378:	89a3      	ldrh	r3, [r4, #12]
 801737a:	d106      	bne.n	801738a <__sflush_r+0x62>
 801737c:	6829      	ldr	r1, [r5, #0]
 801737e:	291d      	cmp	r1, #29
 8017380:	d82b      	bhi.n	80173da <__sflush_r+0xb2>
 8017382:	4a2a      	ldr	r2, [pc, #168]	@ (801742c <__sflush_r+0x104>)
 8017384:	40ca      	lsrs	r2, r1
 8017386:	07d6      	lsls	r6, r2, #31
 8017388:	d527      	bpl.n	80173da <__sflush_r+0xb2>
 801738a:	2200      	movs	r2, #0
 801738c:	6062      	str	r2, [r4, #4]
 801738e:	04d9      	lsls	r1, r3, #19
 8017390:	6922      	ldr	r2, [r4, #16]
 8017392:	6022      	str	r2, [r4, #0]
 8017394:	d504      	bpl.n	80173a0 <__sflush_r+0x78>
 8017396:	1c42      	adds	r2, r0, #1
 8017398:	d101      	bne.n	801739e <__sflush_r+0x76>
 801739a:	682b      	ldr	r3, [r5, #0]
 801739c:	b903      	cbnz	r3, 80173a0 <__sflush_r+0x78>
 801739e:	6560      	str	r0, [r4, #84]	@ 0x54
 80173a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173a2:	602f      	str	r7, [r5, #0]
 80173a4:	b1b9      	cbz	r1, 80173d6 <__sflush_r+0xae>
 80173a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173aa:	4299      	cmp	r1, r3
 80173ac:	d002      	beq.n	80173b4 <__sflush_r+0x8c>
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7fe fd78 	bl	8015ea4 <_free_r>
 80173b4:	2300      	movs	r3, #0
 80173b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80173b8:	e00d      	b.n	80173d6 <__sflush_r+0xae>
 80173ba:	2301      	movs	r3, #1
 80173bc:	4628      	mov	r0, r5
 80173be:	47b0      	blx	r6
 80173c0:	4602      	mov	r2, r0
 80173c2:	1c50      	adds	r0, r2, #1
 80173c4:	d1c9      	bne.n	801735a <__sflush_r+0x32>
 80173c6:	682b      	ldr	r3, [r5, #0]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d0c6      	beq.n	801735a <__sflush_r+0x32>
 80173cc:	2b1d      	cmp	r3, #29
 80173ce:	d001      	beq.n	80173d4 <__sflush_r+0xac>
 80173d0:	2b16      	cmp	r3, #22
 80173d2:	d11e      	bne.n	8017412 <__sflush_r+0xea>
 80173d4:	602f      	str	r7, [r5, #0]
 80173d6:	2000      	movs	r0, #0
 80173d8:	e022      	b.n	8017420 <__sflush_r+0xf8>
 80173da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173de:	b21b      	sxth	r3, r3
 80173e0:	e01b      	b.n	801741a <__sflush_r+0xf2>
 80173e2:	690f      	ldr	r7, [r1, #16]
 80173e4:	2f00      	cmp	r7, #0
 80173e6:	d0f6      	beq.n	80173d6 <__sflush_r+0xae>
 80173e8:	0793      	lsls	r3, r2, #30
 80173ea:	680e      	ldr	r6, [r1, #0]
 80173ec:	bf08      	it	eq
 80173ee:	694b      	ldreq	r3, [r1, #20]
 80173f0:	600f      	str	r7, [r1, #0]
 80173f2:	bf18      	it	ne
 80173f4:	2300      	movne	r3, #0
 80173f6:	eba6 0807 	sub.w	r8, r6, r7
 80173fa:	608b      	str	r3, [r1, #8]
 80173fc:	f1b8 0f00 	cmp.w	r8, #0
 8017400:	dde9      	ble.n	80173d6 <__sflush_r+0xae>
 8017402:	6a21      	ldr	r1, [r4, #32]
 8017404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017406:	4643      	mov	r3, r8
 8017408:	463a      	mov	r2, r7
 801740a:	4628      	mov	r0, r5
 801740c:	47b0      	blx	r6
 801740e:	2800      	cmp	r0, #0
 8017410:	dc08      	bgt.n	8017424 <__sflush_r+0xfc>
 8017412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801741a:	81a3      	strh	r3, [r4, #12]
 801741c:	f04f 30ff 	mov.w	r0, #4294967295
 8017420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017424:	4407      	add	r7, r0
 8017426:	eba8 0800 	sub.w	r8, r8, r0
 801742a:	e7e7      	b.n	80173fc <__sflush_r+0xd4>
 801742c:	20400001 	.word	0x20400001

08017430 <_fflush_r>:
 8017430:	b538      	push	{r3, r4, r5, lr}
 8017432:	690b      	ldr	r3, [r1, #16]
 8017434:	4605      	mov	r5, r0
 8017436:	460c      	mov	r4, r1
 8017438:	b913      	cbnz	r3, 8017440 <_fflush_r+0x10>
 801743a:	2500      	movs	r5, #0
 801743c:	4628      	mov	r0, r5
 801743e:	bd38      	pop	{r3, r4, r5, pc}
 8017440:	b118      	cbz	r0, 801744a <_fflush_r+0x1a>
 8017442:	6a03      	ldr	r3, [r0, #32]
 8017444:	b90b      	cbnz	r3, 801744a <_fflush_r+0x1a>
 8017446:	f7fd fd89 	bl	8014f5c <__sinit>
 801744a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d0f3      	beq.n	801743a <_fflush_r+0xa>
 8017452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017454:	07d0      	lsls	r0, r2, #31
 8017456:	d404      	bmi.n	8017462 <_fflush_r+0x32>
 8017458:	0599      	lsls	r1, r3, #22
 801745a:	d402      	bmi.n	8017462 <_fflush_r+0x32>
 801745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801745e:	f7fd ff18 	bl	8015292 <__retarget_lock_acquire_recursive>
 8017462:	4628      	mov	r0, r5
 8017464:	4621      	mov	r1, r4
 8017466:	f7ff ff5f 	bl	8017328 <__sflush_r>
 801746a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801746c:	07da      	lsls	r2, r3, #31
 801746e:	4605      	mov	r5, r0
 8017470:	d4e4      	bmi.n	801743c <_fflush_r+0xc>
 8017472:	89a3      	ldrh	r3, [r4, #12]
 8017474:	059b      	lsls	r3, r3, #22
 8017476:	d4e1      	bmi.n	801743c <_fflush_r+0xc>
 8017478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801747a:	f7fd ff0b 	bl	8015294 <__retarget_lock_release_recursive>
 801747e:	e7dd      	b.n	801743c <_fflush_r+0xc>

08017480 <__swbuf_r>:
 8017480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017482:	460e      	mov	r6, r1
 8017484:	4614      	mov	r4, r2
 8017486:	4605      	mov	r5, r0
 8017488:	b118      	cbz	r0, 8017492 <__swbuf_r+0x12>
 801748a:	6a03      	ldr	r3, [r0, #32]
 801748c:	b90b      	cbnz	r3, 8017492 <__swbuf_r+0x12>
 801748e:	f7fd fd65 	bl	8014f5c <__sinit>
 8017492:	69a3      	ldr	r3, [r4, #24]
 8017494:	60a3      	str	r3, [r4, #8]
 8017496:	89a3      	ldrh	r3, [r4, #12]
 8017498:	071a      	lsls	r2, r3, #28
 801749a:	d501      	bpl.n	80174a0 <__swbuf_r+0x20>
 801749c:	6923      	ldr	r3, [r4, #16]
 801749e:	b943      	cbnz	r3, 80174b2 <__swbuf_r+0x32>
 80174a0:	4621      	mov	r1, r4
 80174a2:	4628      	mov	r0, r5
 80174a4:	f000 f82a 	bl	80174fc <__swsetup_r>
 80174a8:	b118      	cbz	r0, 80174b2 <__swbuf_r+0x32>
 80174aa:	f04f 37ff 	mov.w	r7, #4294967295
 80174ae:	4638      	mov	r0, r7
 80174b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174b2:	6823      	ldr	r3, [r4, #0]
 80174b4:	6922      	ldr	r2, [r4, #16]
 80174b6:	1a98      	subs	r0, r3, r2
 80174b8:	6963      	ldr	r3, [r4, #20]
 80174ba:	b2f6      	uxtb	r6, r6
 80174bc:	4283      	cmp	r3, r0
 80174be:	4637      	mov	r7, r6
 80174c0:	dc05      	bgt.n	80174ce <__swbuf_r+0x4e>
 80174c2:	4621      	mov	r1, r4
 80174c4:	4628      	mov	r0, r5
 80174c6:	f7ff ffb3 	bl	8017430 <_fflush_r>
 80174ca:	2800      	cmp	r0, #0
 80174cc:	d1ed      	bne.n	80174aa <__swbuf_r+0x2a>
 80174ce:	68a3      	ldr	r3, [r4, #8]
 80174d0:	3b01      	subs	r3, #1
 80174d2:	60a3      	str	r3, [r4, #8]
 80174d4:	6823      	ldr	r3, [r4, #0]
 80174d6:	1c5a      	adds	r2, r3, #1
 80174d8:	6022      	str	r2, [r4, #0]
 80174da:	701e      	strb	r6, [r3, #0]
 80174dc:	6962      	ldr	r2, [r4, #20]
 80174de:	1c43      	adds	r3, r0, #1
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d004      	beq.n	80174ee <__swbuf_r+0x6e>
 80174e4:	89a3      	ldrh	r3, [r4, #12]
 80174e6:	07db      	lsls	r3, r3, #31
 80174e8:	d5e1      	bpl.n	80174ae <__swbuf_r+0x2e>
 80174ea:	2e0a      	cmp	r6, #10
 80174ec:	d1df      	bne.n	80174ae <__swbuf_r+0x2e>
 80174ee:	4621      	mov	r1, r4
 80174f0:	4628      	mov	r0, r5
 80174f2:	f7ff ff9d 	bl	8017430 <_fflush_r>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	d0d9      	beq.n	80174ae <__swbuf_r+0x2e>
 80174fa:	e7d6      	b.n	80174aa <__swbuf_r+0x2a>

080174fc <__swsetup_r>:
 80174fc:	b538      	push	{r3, r4, r5, lr}
 80174fe:	4b29      	ldr	r3, [pc, #164]	@ (80175a4 <__swsetup_r+0xa8>)
 8017500:	4605      	mov	r5, r0
 8017502:	6818      	ldr	r0, [r3, #0]
 8017504:	460c      	mov	r4, r1
 8017506:	b118      	cbz	r0, 8017510 <__swsetup_r+0x14>
 8017508:	6a03      	ldr	r3, [r0, #32]
 801750a:	b90b      	cbnz	r3, 8017510 <__swsetup_r+0x14>
 801750c:	f7fd fd26 	bl	8014f5c <__sinit>
 8017510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017514:	0719      	lsls	r1, r3, #28
 8017516:	d422      	bmi.n	801755e <__swsetup_r+0x62>
 8017518:	06da      	lsls	r2, r3, #27
 801751a:	d407      	bmi.n	801752c <__swsetup_r+0x30>
 801751c:	2209      	movs	r2, #9
 801751e:	602a      	str	r2, [r5, #0]
 8017520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017524:	81a3      	strh	r3, [r4, #12]
 8017526:	f04f 30ff 	mov.w	r0, #4294967295
 801752a:	e033      	b.n	8017594 <__swsetup_r+0x98>
 801752c:	0758      	lsls	r0, r3, #29
 801752e:	d512      	bpl.n	8017556 <__swsetup_r+0x5a>
 8017530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017532:	b141      	cbz	r1, 8017546 <__swsetup_r+0x4a>
 8017534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017538:	4299      	cmp	r1, r3
 801753a:	d002      	beq.n	8017542 <__swsetup_r+0x46>
 801753c:	4628      	mov	r0, r5
 801753e:	f7fe fcb1 	bl	8015ea4 <_free_r>
 8017542:	2300      	movs	r3, #0
 8017544:	6363      	str	r3, [r4, #52]	@ 0x34
 8017546:	89a3      	ldrh	r3, [r4, #12]
 8017548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801754c:	81a3      	strh	r3, [r4, #12]
 801754e:	2300      	movs	r3, #0
 8017550:	6063      	str	r3, [r4, #4]
 8017552:	6923      	ldr	r3, [r4, #16]
 8017554:	6023      	str	r3, [r4, #0]
 8017556:	89a3      	ldrh	r3, [r4, #12]
 8017558:	f043 0308 	orr.w	r3, r3, #8
 801755c:	81a3      	strh	r3, [r4, #12]
 801755e:	6923      	ldr	r3, [r4, #16]
 8017560:	b94b      	cbnz	r3, 8017576 <__swsetup_r+0x7a>
 8017562:	89a3      	ldrh	r3, [r4, #12]
 8017564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801756c:	d003      	beq.n	8017576 <__swsetup_r+0x7a>
 801756e:	4621      	mov	r1, r4
 8017570:	4628      	mov	r0, r5
 8017572:	f000 f893 	bl	801769c <__smakebuf_r>
 8017576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801757a:	f013 0201 	ands.w	r2, r3, #1
 801757e:	d00a      	beq.n	8017596 <__swsetup_r+0x9a>
 8017580:	2200      	movs	r2, #0
 8017582:	60a2      	str	r2, [r4, #8]
 8017584:	6962      	ldr	r2, [r4, #20]
 8017586:	4252      	negs	r2, r2
 8017588:	61a2      	str	r2, [r4, #24]
 801758a:	6922      	ldr	r2, [r4, #16]
 801758c:	b942      	cbnz	r2, 80175a0 <__swsetup_r+0xa4>
 801758e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017592:	d1c5      	bne.n	8017520 <__swsetup_r+0x24>
 8017594:	bd38      	pop	{r3, r4, r5, pc}
 8017596:	0799      	lsls	r1, r3, #30
 8017598:	bf58      	it	pl
 801759a:	6962      	ldrpl	r2, [r4, #20]
 801759c:	60a2      	str	r2, [r4, #8]
 801759e:	e7f4      	b.n	801758a <__swsetup_r+0x8e>
 80175a0:	2000      	movs	r0, #0
 80175a2:	e7f7      	b.n	8017594 <__swsetup_r+0x98>
 80175a4:	24000208 	.word	0x24000208

080175a8 <_sbrk_r>:
 80175a8:	b538      	push	{r3, r4, r5, lr}
 80175aa:	4d06      	ldr	r5, [pc, #24]	@ (80175c4 <_sbrk_r+0x1c>)
 80175ac:	2300      	movs	r3, #0
 80175ae:	4604      	mov	r4, r0
 80175b0:	4608      	mov	r0, r1
 80175b2:	602b      	str	r3, [r5, #0]
 80175b4:	f7ee ffc4 	bl	8006540 <_sbrk>
 80175b8:	1c43      	adds	r3, r0, #1
 80175ba:	d102      	bne.n	80175c2 <_sbrk_r+0x1a>
 80175bc:	682b      	ldr	r3, [r5, #0]
 80175be:	b103      	cbz	r3, 80175c2 <_sbrk_r+0x1a>
 80175c0:	6023      	str	r3, [r4, #0]
 80175c2:	bd38      	pop	{r3, r4, r5, pc}
 80175c4:	240075d0 	.word	0x240075d0

080175c8 <__assert_func>:
 80175c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175ca:	4614      	mov	r4, r2
 80175cc:	461a      	mov	r2, r3
 80175ce:	4b09      	ldr	r3, [pc, #36]	@ (80175f4 <__assert_func+0x2c>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	4605      	mov	r5, r0
 80175d4:	68d8      	ldr	r0, [r3, #12]
 80175d6:	b14c      	cbz	r4, 80175ec <__assert_func+0x24>
 80175d8:	4b07      	ldr	r3, [pc, #28]	@ (80175f8 <__assert_func+0x30>)
 80175da:	9100      	str	r1, [sp, #0]
 80175dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80175e0:	4906      	ldr	r1, [pc, #24]	@ (80175fc <__assert_func+0x34>)
 80175e2:	462b      	mov	r3, r5
 80175e4:	f000 f822 	bl	801762c <fiprintf>
 80175e8:	f000 f8b6 	bl	8017758 <abort>
 80175ec:	4b04      	ldr	r3, [pc, #16]	@ (8017600 <__assert_func+0x38>)
 80175ee:	461c      	mov	r4, r3
 80175f0:	e7f3      	b.n	80175da <__assert_func+0x12>
 80175f2:	bf00      	nop
 80175f4:	24000208 	.word	0x24000208
 80175f8:	080180bd 	.word	0x080180bd
 80175fc:	080180ca 	.word	0x080180ca
 8017600:	080180f8 	.word	0x080180f8

08017604 <_calloc_r>:
 8017604:	b570      	push	{r4, r5, r6, lr}
 8017606:	fba1 5402 	umull	r5, r4, r1, r2
 801760a:	b934      	cbnz	r4, 801761a <_calloc_r+0x16>
 801760c:	4629      	mov	r1, r5
 801760e:	f7fe fff7 	bl	8016600 <_malloc_r>
 8017612:	4606      	mov	r6, r0
 8017614:	b928      	cbnz	r0, 8017622 <_calloc_r+0x1e>
 8017616:	4630      	mov	r0, r6
 8017618:	bd70      	pop	{r4, r5, r6, pc}
 801761a:	220c      	movs	r2, #12
 801761c:	6002      	str	r2, [r0, #0]
 801761e:	2600      	movs	r6, #0
 8017620:	e7f9      	b.n	8017616 <_calloc_r+0x12>
 8017622:	462a      	mov	r2, r5
 8017624:	4621      	mov	r1, r4
 8017626:	f7fd fd24 	bl	8015072 <memset>
 801762a:	e7f4      	b.n	8017616 <_calloc_r+0x12>

0801762c <fiprintf>:
 801762c:	b40e      	push	{r1, r2, r3}
 801762e:	b503      	push	{r0, r1, lr}
 8017630:	4601      	mov	r1, r0
 8017632:	ab03      	add	r3, sp, #12
 8017634:	4805      	ldr	r0, [pc, #20]	@ (801764c <fiprintf+0x20>)
 8017636:	f853 2b04 	ldr.w	r2, [r3], #4
 801763a:	6800      	ldr	r0, [r0, #0]
 801763c:	9301      	str	r3, [sp, #4]
 801763e:	f7ff fd5b 	bl	80170f8 <_vfiprintf_r>
 8017642:	b002      	add	sp, #8
 8017644:	f85d eb04 	ldr.w	lr, [sp], #4
 8017648:	b003      	add	sp, #12
 801764a:	4770      	bx	lr
 801764c:	24000208 	.word	0x24000208

08017650 <__swhatbuf_r>:
 8017650:	b570      	push	{r4, r5, r6, lr}
 8017652:	460c      	mov	r4, r1
 8017654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017658:	2900      	cmp	r1, #0
 801765a:	b096      	sub	sp, #88	@ 0x58
 801765c:	4615      	mov	r5, r2
 801765e:	461e      	mov	r6, r3
 8017660:	da0d      	bge.n	801767e <__swhatbuf_r+0x2e>
 8017662:	89a3      	ldrh	r3, [r4, #12]
 8017664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017668:	f04f 0100 	mov.w	r1, #0
 801766c:	bf14      	ite	ne
 801766e:	2340      	movne	r3, #64	@ 0x40
 8017670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017674:	2000      	movs	r0, #0
 8017676:	6031      	str	r1, [r6, #0]
 8017678:	602b      	str	r3, [r5, #0]
 801767a:	b016      	add	sp, #88	@ 0x58
 801767c:	bd70      	pop	{r4, r5, r6, pc}
 801767e:	466a      	mov	r2, sp
 8017680:	f000 f848 	bl	8017714 <_fstat_r>
 8017684:	2800      	cmp	r0, #0
 8017686:	dbec      	blt.n	8017662 <__swhatbuf_r+0x12>
 8017688:	9901      	ldr	r1, [sp, #4]
 801768a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801768e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017692:	4259      	negs	r1, r3
 8017694:	4159      	adcs	r1, r3
 8017696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801769a:	e7eb      	b.n	8017674 <__swhatbuf_r+0x24>

0801769c <__smakebuf_r>:
 801769c:	898b      	ldrh	r3, [r1, #12]
 801769e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176a0:	079d      	lsls	r5, r3, #30
 80176a2:	4606      	mov	r6, r0
 80176a4:	460c      	mov	r4, r1
 80176a6:	d507      	bpl.n	80176b8 <__smakebuf_r+0x1c>
 80176a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176ac:	6023      	str	r3, [r4, #0]
 80176ae:	6123      	str	r3, [r4, #16]
 80176b0:	2301      	movs	r3, #1
 80176b2:	6163      	str	r3, [r4, #20]
 80176b4:	b003      	add	sp, #12
 80176b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176b8:	ab01      	add	r3, sp, #4
 80176ba:	466a      	mov	r2, sp
 80176bc:	f7ff ffc8 	bl	8017650 <__swhatbuf_r>
 80176c0:	9f00      	ldr	r7, [sp, #0]
 80176c2:	4605      	mov	r5, r0
 80176c4:	4639      	mov	r1, r7
 80176c6:	4630      	mov	r0, r6
 80176c8:	f7fe ff9a 	bl	8016600 <_malloc_r>
 80176cc:	b948      	cbnz	r0, 80176e2 <__smakebuf_r+0x46>
 80176ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176d2:	059a      	lsls	r2, r3, #22
 80176d4:	d4ee      	bmi.n	80176b4 <__smakebuf_r+0x18>
 80176d6:	f023 0303 	bic.w	r3, r3, #3
 80176da:	f043 0302 	orr.w	r3, r3, #2
 80176de:	81a3      	strh	r3, [r4, #12]
 80176e0:	e7e2      	b.n	80176a8 <__smakebuf_r+0xc>
 80176e2:	89a3      	ldrh	r3, [r4, #12]
 80176e4:	6020      	str	r0, [r4, #0]
 80176e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80176ea:	81a3      	strh	r3, [r4, #12]
 80176ec:	9b01      	ldr	r3, [sp, #4]
 80176ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80176f2:	b15b      	cbz	r3, 801770c <__smakebuf_r+0x70>
 80176f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176f8:	4630      	mov	r0, r6
 80176fa:	f000 f81d 	bl	8017738 <_isatty_r>
 80176fe:	b128      	cbz	r0, 801770c <__smakebuf_r+0x70>
 8017700:	89a3      	ldrh	r3, [r4, #12]
 8017702:	f023 0303 	bic.w	r3, r3, #3
 8017706:	f043 0301 	orr.w	r3, r3, #1
 801770a:	81a3      	strh	r3, [r4, #12]
 801770c:	89a3      	ldrh	r3, [r4, #12]
 801770e:	431d      	orrs	r5, r3
 8017710:	81a5      	strh	r5, [r4, #12]
 8017712:	e7cf      	b.n	80176b4 <__smakebuf_r+0x18>

08017714 <_fstat_r>:
 8017714:	b538      	push	{r3, r4, r5, lr}
 8017716:	4d07      	ldr	r5, [pc, #28]	@ (8017734 <_fstat_r+0x20>)
 8017718:	2300      	movs	r3, #0
 801771a:	4604      	mov	r4, r0
 801771c:	4608      	mov	r0, r1
 801771e:	4611      	mov	r1, r2
 8017720:	602b      	str	r3, [r5, #0]
 8017722:	f7ee fee4 	bl	80064ee <_fstat>
 8017726:	1c43      	adds	r3, r0, #1
 8017728:	d102      	bne.n	8017730 <_fstat_r+0x1c>
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	b103      	cbz	r3, 8017730 <_fstat_r+0x1c>
 801772e:	6023      	str	r3, [r4, #0]
 8017730:	bd38      	pop	{r3, r4, r5, pc}
 8017732:	bf00      	nop
 8017734:	240075d0 	.word	0x240075d0

08017738 <_isatty_r>:
 8017738:	b538      	push	{r3, r4, r5, lr}
 801773a:	4d06      	ldr	r5, [pc, #24]	@ (8017754 <_isatty_r+0x1c>)
 801773c:	2300      	movs	r3, #0
 801773e:	4604      	mov	r4, r0
 8017740:	4608      	mov	r0, r1
 8017742:	602b      	str	r3, [r5, #0]
 8017744:	f7ee fee3 	bl	800650e <_isatty>
 8017748:	1c43      	adds	r3, r0, #1
 801774a:	d102      	bne.n	8017752 <_isatty_r+0x1a>
 801774c:	682b      	ldr	r3, [r5, #0]
 801774e:	b103      	cbz	r3, 8017752 <_isatty_r+0x1a>
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	bd38      	pop	{r3, r4, r5, pc}
 8017754:	240075d0 	.word	0x240075d0

08017758 <abort>:
 8017758:	b508      	push	{r3, lr}
 801775a:	2006      	movs	r0, #6
 801775c:	f000 f82c 	bl	80177b8 <raise>
 8017760:	2001      	movs	r0, #1
 8017762:	f7ee fe90 	bl	8006486 <_exit>

08017766 <_raise_r>:
 8017766:	291f      	cmp	r1, #31
 8017768:	b538      	push	{r3, r4, r5, lr}
 801776a:	4605      	mov	r5, r0
 801776c:	460c      	mov	r4, r1
 801776e:	d904      	bls.n	801777a <_raise_r+0x14>
 8017770:	2316      	movs	r3, #22
 8017772:	6003      	str	r3, [r0, #0]
 8017774:	f04f 30ff 	mov.w	r0, #4294967295
 8017778:	bd38      	pop	{r3, r4, r5, pc}
 801777a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801777c:	b112      	cbz	r2, 8017784 <_raise_r+0x1e>
 801777e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017782:	b94b      	cbnz	r3, 8017798 <_raise_r+0x32>
 8017784:	4628      	mov	r0, r5
 8017786:	f000 f831 	bl	80177ec <_getpid_r>
 801778a:	4622      	mov	r2, r4
 801778c:	4601      	mov	r1, r0
 801778e:	4628      	mov	r0, r5
 8017790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017794:	f000 b818 	b.w	80177c8 <_kill_r>
 8017798:	2b01      	cmp	r3, #1
 801779a:	d00a      	beq.n	80177b2 <_raise_r+0x4c>
 801779c:	1c59      	adds	r1, r3, #1
 801779e:	d103      	bne.n	80177a8 <_raise_r+0x42>
 80177a0:	2316      	movs	r3, #22
 80177a2:	6003      	str	r3, [r0, #0]
 80177a4:	2001      	movs	r0, #1
 80177a6:	e7e7      	b.n	8017778 <_raise_r+0x12>
 80177a8:	2100      	movs	r1, #0
 80177aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80177ae:	4620      	mov	r0, r4
 80177b0:	4798      	blx	r3
 80177b2:	2000      	movs	r0, #0
 80177b4:	e7e0      	b.n	8017778 <_raise_r+0x12>
	...

080177b8 <raise>:
 80177b8:	4b02      	ldr	r3, [pc, #8]	@ (80177c4 <raise+0xc>)
 80177ba:	4601      	mov	r1, r0
 80177bc:	6818      	ldr	r0, [r3, #0]
 80177be:	f7ff bfd2 	b.w	8017766 <_raise_r>
 80177c2:	bf00      	nop
 80177c4:	24000208 	.word	0x24000208

080177c8 <_kill_r>:
 80177c8:	b538      	push	{r3, r4, r5, lr}
 80177ca:	4d07      	ldr	r5, [pc, #28]	@ (80177e8 <_kill_r+0x20>)
 80177cc:	2300      	movs	r3, #0
 80177ce:	4604      	mov	r4, r0
 80177d0:	4608      	mov	r0, r1
 80177d2:	4611      	mov	r1, r2
 80177d4:	602b      	str	r3, [r5, #0]
 80177d6:	f7ee fe46 	bl	8006466 <_kill>
 80177da:	1c43      	adds	r3, r0, #1
 80177dc:	d102      	bne.n	80177e4 <_kill_r+0x1c>
 80177de:	682b      	ldr	r3, [r5, #0]
 80177e0:	b103      	cbz	r3, 80177e4 <_kill_r+0x1c>
 80177e2:	6023      	str	r3, [r4, #0]
 80177e4:	bd38      	pop	{r3, r4, r5, pc}
 80177e6:	bf00      	nop
 80177e8:	240075d0 	.word	0x240075d0

080177ec <_getpid_r>:
 80177ec:	f7ee be33 	b.w	8006456 <_getpid>

080177f0 <fmax>:
 80177f0:	b508      	push	{r3, lr}
 80177f2:	ed2d 8b04 	vpush	{d8-d9}
 80177f6:	eeb0 8b40 	vmov.f64	d8, d0
 80177fa:	eeb0 9b41 	vmov.f64	d9, d1
 80177fe:	f000 f831 	bl	8017864 <__fpclassifyd>
 8017802:	b930      	cbnz	r0, 8017812 <fmax+0x22>
 8017804:	eeb0 8b49 	vmov.f64	d8, d9
 8017808:	eeb0 0b48 	vmov.f64	d0, d8
 801780c:	ecbd 8b04 	vpop	{d8-d9}
 8017810:	bd08      	pop	{r3, pc}
 8017812:	eeb0 0b49 	vmov.f64	d0, d9
 8017816:	f000 f825 	bl	8017864 <__fpclassifyd>
 801781a:	2800      	cmp	r0, #0
 801781c:	d0f4      	beq.n	8017808 <fmax+0x18>
 801781e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017826:	dded      	ble.n	8017804 <fmax+0x14>
 8017828:	e7ee      	b.n	8017808 <fmax+0x18>

0801782a <fmin>:
 801782a:	b508      	push	{r3, lr}
 801782c:	ed2d 8b04 	vpush	{d8-d9}
 8017830:	eeb0 8b40 	vmov.f64	d8, d0
 8017834:	eeb0 9b41 	vmov.f64	d9, d1
 8017838:	f000 f814 	bl	8017864 <__fpclassifyd>
 801783c:	b930      	cbnz	r0, 801784c <fmin+0x22>
 801783e:	eeb0 8b49 	vmov.f64	d8, d9
 8017842:	eeb0 0b48 	vmov.f64	d0, d8
 8017846:	ecbd 8b04 	vpop	{d8-d9}
 801784a:	bd08      	pop	{r3, pc}
 801784c:	eeb0 0b49 	vmov.f64	d0, d9
 8017850:	f000 f808 	bl	8017864 <__fpclassifyd>
 8017854:	2800      	cmp	r0, #0
 8017856:	d0f4      	beq.n	8017842 <fmin+0x18>
 8017858:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017860:	d5ed      	bpl.n	801783e <fmin+0x14>
 8017862:	e7ee      	b.n	8017842 <fmin+0x18>

08017864 <__fpclassifyd>:
 8017864:	ec51 0b10 	vmov	r0, r1, d0
 8017868:	460b      	mov	r3, r1
 801786a:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801786e:	b510      	push	{r4, lr}
 8017870:	d104      	bne.n	801787c <__fpclassifyd+0x18>
 8017872:	2800      	cmp	r0, #0
 8017874:	bf0c      	ite	eq
 8017876:	2002      	moveq	r0, #2
 8017878:	2003      	movne	r0, #3
 801787a:	bd10      	pop	{r4, pc}
 801787c:	4a09      	ldr	r2, [pc, #36]	@ (80178a4 <__fpclassifyd+0x40>)
 801787e:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8017882:	4294      	cmp	r4, r2
 8017884:	d908      	bls.n	8017898 <__fpclassifyd+0x34>
 8017886:	4a08      	ldr	r2, [pc, #32]	@ (80178a8 <__fpclassifyd+0x44>)
 8017888:	4213      	tst	r3, r2
 801788a:	d007      	beq.n	801789c <__fpclassifyd+0x38>
 801788c:	4291      	cmp	r1, r2
 801788e:	d107      	bne.n	80178a0 <__fpclassifyd+0x3c>
 8017890:	fab0 f080 	clz	r0, r0
 8017894:	0940      	lsrs	r0, r0, #5
 8017896:	e7f0      	b.n	801787a <__fpclassifyd+0x16>
 8017898:	2004      	movs	r0, #4
 801789a:	e7ee      	b.n	801787a <__fpclassifyd+0x16>
 801789c:	2003      	movs	r0, #3
 801789e:	e7ec      	b.n	801787a <__fpclassifyd+0x16>
 80178a0:	2000      	movs	r0, #0
 80178a2:	e7ea      	b.n	801787a <__fpclassifyd+0x16>
 80178a4:	7fdfffff 	.word	0x7fdfffff
 80178a8:	7ff00000 	.word	0x7ff00000

080178ac <fmaxf>:
 80178ac:	b508      	push	{r3, lr}
 80178ae:	ed2d 8b02 	vpush	{d8}
 80178b2:	eeb0 8a40 	vmov.f32	s16, s0
 80178b6:	eef0 8a60 	vmov.f32	s17, s1
 80178ba:	f000 f815 	bl	80178e8 <__fpclassifyf>
 80178be:	b930      	cbnz	r0, 80178ce <fmaxf+0x22>
 80178c0:	eeb0 8a68 	vmov.f32	s16, s17
 80178c4:	eeb0 0a48 	vmov.f32	s0, s16
 80178c8:	ecbd 8b02 	vpop	{d8}
 80178cc:	bd08      	pop	{r3, pc}
 80178ce:	eeb0 0a68 	vmov.f32	s0, s17
 80178d2:	f000 f809 	bl	80178e8 <__fpclassifyf>
 80178d6:	2800      	cmp	r0, #0
 80178d8:	d0f4      	beq.n	80178c4 <fmaxf+0x18>
 80178da:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80178de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e2:	dded      	ble.n	80178c0 <fmaxf+0x14>
 80178e4:	e7ee      	b.n	80178c4 <fmaxf+0x18>
	...

080178e8 <__fpclassifyf>:
 80178e8:	ee10 3a10 	vmov	r3, s0
 80178ec:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80178f0:	d00d      	beq.n	801790e <__fpclassifyf+0x26>
 80178f2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80178f6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80178fa:	d30a      	bcc.n	8017912 <__fpclassifyf+0x2a>
 80178fc:	4b07      	ldr	r3, [pc, #28]	@ (801791c <__fpclassifyf+0x34>)
 80178fe:	1e42      	subs	r2, r0, #1
 8017900:	429a      	cmp	r2, r3
 8017902:	d908      	bls.n	8017916 <__fpclassifyf+0x2e>
 8017904:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8017908:	4258      	negs	r0, r3
 801790a:	4158      	adcs	r0, r3
 801790c:	4770      	bx	lr
 801790e:	2002      	movs	r0, #2
 8017910:	4770      	bx	lr
 8017912:	2004      	movs	r0, #4
 8017914:	4770      	bx	lr
 8017916:	2003      	movs	r0, #3
 8017918:	4770      	bx	lr
 801791a:	bf00      	nop
 801791c:	007ffffe 	.word	0x007ffffe

08017920 <sinf_poly>:
 8017920:	07cb      	lsls	r3, r1, #31
 8017922:	d412      	bmi.n	801794a <sinf_poly+0x2a>
 8017924:	ee21 5b00 	vmul.f64	d5, d1, d0
 8017928:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801792c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8017930:	eea6 7b01 	vfma.f64	d7, d6, d1
 8017934:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8017938:	ee21 1b05 	vmul.f64	d1, d1, d5
 801793c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8017940:	eea7 0b01 	vfma.f64	d0, d7, d1
 8017944:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017948:	4770      	bx	lr
 801794a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801794e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8017952:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8017956:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801795a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801795e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8017962:	eea1 0b06 	vfma.f64	d0, d1, d6
 8017966:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801796a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801796e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8017972:	e7e5      	b.n	8017940 <sinf_poly+0x20>
 8017974:	0000      	movs	r0, r0
	...

08017978 <sinf>:
 8017978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801797a:	ee10 4a10 	vmov	r4, s0
 801797e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8017982:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8017986:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801798a:	eef0 7a40 	vmov.f32	s15, s0
 801798e:	d218      	bcs.n	80179c2 <sinf+0x4a>
 8017990:	ee26 1b06 	vmul.f64	d1, d6, d6
 8017994:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8017998:	d20a      	bcs.n	80179b0 <sinf+0x38>
 801799a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801799e:	d103      	bne.n	80179a8 <sinf+0x30>
 80179a0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80179a4:	ed8d 1a01 	vstr	s2, [sp, #4]
 80179a8:	eeb0 0a67 	vmov.f32	s0, s15
 80179ac:	b003      	add	sp, #12
 80179ae:	bd30      	pop	{r4, r5, pc}
 80179b0:	483b      	ldr	r0, [pc, #236]	@ (8017aa0 <sinf+0x128>)
 80179b2:	eeb0 0b46 	vmov.f64	d0, d6
 80179b6:	2100      	movs	r1, #0
 80179b8:	b003      	add	sp, #12
 80179ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179be:	f7ff bfaf 	b.w	8017920 <sinf_poly>
 80179c2:	f240 422e 	movw	r2, #1070	@ 0x42e
 80179c6:	4293      	cmp	r3, r2
 80179c8:	d824      	bhi.n	8017a14 <sinf+0x9c>
 80179ca:	4b35      	ldr	r3, [pc, #212]	@ (8017aa0 <sinf+0x128>)
 80179cc:	ed93 7b08 	vldr	d7, [r3, #32]
 80179d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80179d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80179d8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80179dc:	ee17 1a90 	vmov	r1, s15
 80179e0:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80179e4:	1609      	asrs	r1, r1, #24
 80179e6:	ee07 1a90 	vmov	s15, r1
 80179ea:	f001 0203 	and.w	r2, r1, #3
 80179ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80179f2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80179f6:	ed92 0b00 	vldr	d0, [r2]
 80179fa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80179fe:	f011 0f02 	tst.w	r1, #2
 8017a02:	eea5 6b47 	vfms.f64	d6, d5, d7
 8017a06:	bf08      	it	eq
 8017a08:	4618      	moveq	r0, r3
 8017a0a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8017a0e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017a12:	e7d1      	b.n	80179b8 <sinf+0x40>
 8017a14:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8017a18:	d237      	bcs.n	8017a8a <sinf+0x112>
 8017a1a:	4922      	ldr	r1, [pc, #136]	@ (8017aa4 <sinf+0x12c>)
 8017a1c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8017a20:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017a24:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017a28:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8017a2c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017a30:	6a10      	ldr	r0, [r2, #32]
 8017a32:	6912      	ldr	r2, [r2, #16]
 8017a34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017a38:	40ab      	lsls	r3, r5
 8017a3a:	fba0 5003 	umull	r5, r0, r0, r3
 8017a3e:	4359      	muls	r1, r3
 8017a40:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017a44:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017a48:	0f9d      	lsrs	r5, r3, #30
 8017a4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017a4e:	1ac9      	subs	r1, r1, r3
 8017a50:	f7e8 fe2c 	bl	80006ac <__aeabi_l2d>
 8017a54:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017a58:	4b11      	ldr	r3, [pc, #68]	@ (8017aa0 <sinf+0x128>)
 8017a5a:	f004 0203 	and.w	r2, r4, #3
 8017a5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017a62:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8017a98 <sinf+0x120>
 8017a66:	ed92 0b00 	vldr	d0, [r2]
 8017a6a:	ec41 0b17 	vmov	d7, r0, r1
 8017a6e:	f014 0f02 	tst.w	r4, #2
 8017a72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a76:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017a7a:	4629      	mov	r1, r5
 8017a7c:	bf08      	it	eq
 8017a7e:	4618      	moveq	r0, r3
 8017a80:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017a84:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017a88:	e796      	b.n	80179b8 <sinf+0x40>
 8017a8a:	b003      	add	sp, #12
 8017a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a90:	f000 b8e4 	b.w	8017c5c <__math_invalidf>
 8017a94:	f3af 8000 	nop.w
 8017a98:	54442d18 	.word	0x54442d18
 8017a9c:	3c1921fb 	.word	0x3c1921fb
 8017aa0:	080183b8 	.word	0x080183b8
 8017aa4:	08018354 	.word	0x08018354

08017aa8 <sinf_poly>:
 8017aa8:	07cb      	lsls	r3, r1, #31
 8017aaa:	d412      	bmi.n	8017ad2 <sinf_poly+0x2a>
 8017aac:	ee21 5b00 	vmul.f64	d5, d1, d0
 8017ab0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8017ab4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8017ab8:	eea6 7b01 	vfma.f64	d7, d6, d1
 8017abc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8017ac0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017ac4:	eea6 0b05 	vfma.f64	d0, d6, d5
 8017ac8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8017acc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017ad0:	4770      	bx	lr
 8017ad2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8017ad6:	ee21 5b01 	vmul.f64	d5, d1, d1
 8017ada:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8017ade:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8017ae2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8017ae6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8017aea:	eea1 0b06 	vfma.f64	d0, d1, d6
 8017aee:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8017af2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8017af6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8017afa:	e7e5      	b.n	8017ac8 <sinf_poly+0x20>
 8017afc:	0000      	movs	r0, r0
	...

08017b00 <cosf>:
 8017b00:	b538      	push	{r3, r4, r5, lr}
 8017b02:	ee10 4a10 	vmov	r4, s0
 8017b06:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8017b0a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8017b0e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8017b12:	d21f      	bcs.n	8017b54 <cosf+0x54>
 8017b14:	ee27 7b07 	vmul.f64	d7, d7, d7
 8017b18:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8017b1c:	f0c0 8082 	bcc.w	8017c24 <cosf+0x124>
 8017b20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017b24:	4b44      	ldr	r3, [pc, #272]	@ (8017c38 <cosf+0x138>)
 8017b26:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8017b2a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8017b2e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8017b32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017b36:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8017b3a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017b3e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8017b42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017b46:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017b4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8017b4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017b52:	bd38      	pop	{r3, r4, r5, pc}
 8017b54:	f240 422e 	movw	r2, #1070	@ 0x42e
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d829      	bhi.n	8017bb0 <cosf+0xb0>
 8017b5c:	4b36      	ldr	r3, [pc, #216]	@ (8017c38 <cosf+0x138>)
 8017b5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8017b62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8017b66:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8017b6a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017b6e:	ee16 1a90 	vmov	r1, s13
 8017b72:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8017b76:	1609      	asrs	r1, r1, #24
 8017b78:	ee06 1a90 	vmov	s13, r1
 8017b7c:	f001 0203 	and.w	r2, r1, #3
 8017b80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017b84:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8017b88:	ed92 0b00 	vldr	d0, [r2]
 8017b8c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8017b90:	f011 0f02 	tst.w	r1, #2
 8017b94:	f081 0101 	eor.w	r1, r1, #1
 8017b98:	eea5 7b46 	vfms.f64	d7, d5, d6
 8017b9c:	bf08      	it	eq
 8017b9e:	4618      	moveq	r0, r3
 8017ba0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8017ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ba8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017bac:	f7ff bf7c 	b.w	8017aa8 <sinf_poly>
 8017bb0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8017bb4:	d232      	bcs.n	8017c1c <cosf+0x11c>
 8017bb6:	4921      	ldr	r1, [pc, #132]	@ (8017c3c <cosf+0x13c>)
 8017bb8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8017bbc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8017bc0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8017bc4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8017bc8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017bcc:	6a10      	ldr	r0, [r2, #32]
 8017bce:	6912      	ldr	r2, [r2, #16]
 8017bd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017bd4:	40ab      	lsls	r3, r5
 8017bd6:	fba0 5003 	umull	r5, r0, r0, r3
 8017bda:	4359      	muls	r1, r3
 8017bdc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8017be0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8017be4:	0f9d      	lsrs	r5, r3, #30
 8017be6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8017bea:	1ac9      	subs	r1, r1, r3
 8017bec:	f7e8 fd5e 	bl	80006ac <__aeabi_l2d>
 8017bf0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8017bf4:	4b10      	ldr	r3, [pc, #64]	@ (8017c38 <cosf+0x138>)
 8017bf6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8017c30 <cosf+0x130>
 8017bfa:	ec41 0b17 	vmov	d7, r0, r1
 8017bfe:	f004 0203 	and.w	r2, r4, #3
 8017c02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017c06:	ed92 0b00 	vldr	d0, [r2]
 8017c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c0e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8017c12:	f014 0f02 	tst.w	r4, #2
 8017c16:	f085 0101 	eor.w	r1, r5, #1
 8017c1a:	e7bf      	b.n	8017b9c <cosf+0x9c>
 8017c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c20:	f000 b81c 	b.w	8017c5c <__math_invalidf>
 8017c24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017c28:	e793      	b.n	8017b52 <cosf+0x52>
 8017c2a:	bf00      	nop
 8017c2c:	f3af 8000 	nop.w
 8017c30:	54442d18 	.word	0x54442d18
 8017c34:	3c1921fb 	.word	0x3c1921fb
 8017c38:	080183b8 	.word	0x080183b8
 8017c3c:	08018354 	.word	0x08018354

08017c40 <with_errnof>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	ed2d 8b02 	vpush	{d8}
 8017c46:	eeb0 8a40 	vmov.f32	s16, s0
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	f7fd faf6 	bl	801523c <__errno>
 8017c50:	eeb0 0a48 	vmov.f32	s0, s16
 8017c54:	ecbd 8b02 	vpop	{d8}
 8017c58:	6004      	str	r4, [r0, #0]
 8017c5a:	bd10      	pop	{r4, pc}

08017c5c <__math_invalidf>:
 8017c5c:	eef0 7a40 	vmov.f32	s15, s0
 8017c60:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017c64:	eef4 7a67 	vcmp.f32	s15, s15
 8017c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c6c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017c70:	d602      	bvs.n	8017c78 <__math_invalidf+0x1c>
 8017c72:	2021      	movs	r0, #33	@ 0x21
 8017c74:	f7ff bfe4 	b.w	8017c40 <with_errnof>
 8017c78:	4770      	bx	lr
	...

08017c7c <_init>:
 8017c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c7e:	bf00      	nop
 8017c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c82:	bc08      	pop	{r3}
 8017c84:	469e      	mov	lr, r3
 8017c86:	4770      	bx	lr

08017c88 <_fini>:
 8017c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c8a:	bf00      	nop
 8017c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c8e:	bc08      	pop	{r3}
 8017c90:	469e      	mov	lr, r3
 8017c92:	4770      	bx	lr
