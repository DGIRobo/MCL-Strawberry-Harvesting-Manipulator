
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08014dc0  08014dc0  00015dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015610  08015610  00016610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015618  08015618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801561c  0801561c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08015620  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005fd0  24000248  08015868  00017248  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006218  08015868  00018218  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cdf9  00000000  00000000  00017276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005083  00000000  00000000  0004406f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f00  00000000  00000000  000490f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d8  00000000  00000000  0004aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006402  00000000  00000000  0004c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026f75  00000000  00000000  00052bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f173  00000000  00000000  00079b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001f8cba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000099a8  00000000  00000000  001f8d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  0020271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  00202799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  0020383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014da4 	.word	0x08014da4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08014da4 	.word	0x08014da4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
int _write(int file, char* p, int len){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	/*for(int i=0; i<len; i++){
		ITM_SendChar((*p++));
	}*/
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	4804      	ldr	r0, [pc, #16]	@ (8000cec <_write+0x28>)
 8000cdc:	f00a fa6a 	bl	800b1b4 <HAL_UART_Transmit>
	return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000328 	.word	0x24000328

08000cf0 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d103      	bne.n	8000d0a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8000d08:	e002      	b.n	8000d10 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	24001018 	.word	0x24001018

08000d20 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8000d30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d34:	f7ff ffdc 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
    }
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	ed2d 8b02 	vpush	{d8}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d50:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d54:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d58:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 8000d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d66:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 8000d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	d502      	bpl.n	8000d82 <float32_t_to_uint+0x42>
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	60f9      	str	r1, [r7, #12]
 8000d80:	e00a      	b.n	8000d98 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8000d82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	dd01      	ble.n	8000d98 <float32_t_to_uint+0x58>
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8000d98:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da0:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000da4:	f04f 0001 	mov.w	r0, #1
 8000da8:	f04f 0100 	mov.w	r1, #0
 8000dac:	683c      	ldr	r4, [r7, #0]
 8000dae:	f1a4 0620 	sub.w	r6, r4, #32
 8000db2:	f1c4 0520 	rsb	r5, r4, #32
 8000db6:	fa01 f304 	lsl.w	r3, r1, r4
 8000dba:	fa00 f606 	lsl.w	r6, r0, r6
 8000dbe:	4333      	orrs	r3, r6
 8000dc0:	fa20 f505 	lsr.w	r5, r0, r5
 8000dc4:	432b      	orrs	r3, r5
 8000dc6:	fa00 f204 	lsl.w	r2, r0, r4
 8000dca:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000dce:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	f7ff fd5f 	bl	8000898 <__aeabi_ul2f>
 8000dda:	ee06 0a90 	vmov	s13, r0
 8000dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	ecbd 8b02 	vpop	{d8}
 8000dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e00 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e04:	ed2d 8b02 	vpush	{d8}
 8000e08:	b087      	sub	sp, #28
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e12:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8000e18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e24:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	ee07 1a90 	vmov	s15, r1
 8000e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000e3e:	f04f 0001 	mov.w	r0, #1
 8000e42:	f04f 0100 	mov.w	r1, #0
 8000e46:	683c      	ldr	r4, [r7, #0]
 8000e48:	f1a4 0620 	sub.w	r6, r4, #32
 8000e4c:	f1c4 0520 	rsb	r5, r4, #32
 8000e50:	fa01 f304 	lsl.w	r3, r1, r4
 8000e54:	fa00 f606 	lsl.w	r6, r0, r6
 8000e58:	4333      	orrs	r3, r6
 8000e5a:	fa20 f505 	lsr.w	r5, r0, r5
 8000e5e:	432b      	orrs	r3, r5
 8000e60:	fa00 f204 	lsl.w	r2, r0, r4
 8000e64:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000e68:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	4649      	mov	r1, r9
 8000e70:	f7ff fd12 	bl	8000898 <__aeabi_ul2f>
 8000e74:	ee07 0a90 	vmov	s15, r0
 8000e78:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e80:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e84:	eeb0 0a67 	vmov.f32	s0, s15
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	ecbd 8b02 	vpop	{d8}
 8000e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e94 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8000e9e:	23ff      	movs	r3, #255	@ 0xff
 8000ea0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000ea2:	23ff      	movs	r3, #255	@ 0xff
 8000ea4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000ea6:	23ff      	movs	r3, #255	@ 0xff
 8000ea8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000eaa:	23ff      	movs	r3, #255	@ 0xff
 8000eac:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000eae:	23ff      	movs	r3, #255	@ 0xff
 8000eb0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000eb2:	23ff      	movs	r3, #255	@ 0xff
 8000eb4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000eb6:	23ff      	movs	r3, #255	@ 0xff
 8000eb8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 8000eba:	23fe      	movs	r3, #254	@ 0xfe
 8000ebc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ec2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <MIT_reset_origin+0x8c>)
 8000efe:	f005 fe6e 	bl	8006bde <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <MIT_reset_origin+0x7e>
		sta = 1;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MIT_reset_origin+0x90>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000f0e:	f003 ff93 	bl	8004e38 <Error_Handler>
	}
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000264 	.word	0x24000264
 8000f20:	24000288 	.word	0x24000288
 8000f24:	24001684 	.word	0x24001684

08000f28 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000f32:	23ff      	movs	r3, #255	@ 0xff
 8000f34:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000f3a:	23ff      	movs	r3, #255	@ 0xff
 8000f3c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000f3e:	23ff      	movs	r3, #255	@ 0xff
 8000f40:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000f42:	23ff      	movs	r3, #255	@ 0xff
 8000f44:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000f46:	23ff      	movs	r3, #255	@ 0xff
 8000f48:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000f4a:	23ff      	movs	r3, #255	@ 0xff
 8000f4c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8000f4e:	23fc      	movs	r3, #252	@ 0xfc
 8000f50:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f56:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f90:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <MIT_enter_control_mode+0x8c>)
 8000f92:	f005 fe24 	bl	8006bde <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <MIT_enter_control_mode+0x7e>
		sta = 1;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MIT_enter_control_mode+0x90>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000fa2:	f003 ff49 	bl	8004e38 <Error_Handler>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000264 	.word	0x24000264
 8000fb4:	24000288 	.word	0x24000288
 8000fb8:	24001684 	.word	0x24001684

08000fbc <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000fca:	23ff      	movs	r3, #255	@ 0xff
 8000fcc:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000fce:	23ff      	movs	r3, #255	@ 0xff
 8000fd0:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000fd2:	23ff      	movs	r3, #255	@ 0xff
 8000fd4:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000fda:	23ff      	movs	r3, #255	@ 0xff
 8000fdc:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8000fe2:	23fd      	movs	r3, #253	@ 0xfd
 8000fe4:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4a16      	ldr	r2, [pc, #88]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000fea:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MIT_exit_control_mode+0x88>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	461a      	mov	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MIT_exit_control_mode+0x8c>)
 8001026:	f005 fdda 	bl	8006bde <HAL_FDCAN_AddMessageToTxFifoQ>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <MIT_exit_control_mode+0x7e>
		sta = 1;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MIT_exit_control_mode+0x90>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001036:	f003 feff 	bl	8004e38 <Error_Handler>
	}
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	24000264 	.word	0x24000264
 8001048:	24000288 	.word	0x24000288
 800104c:	24001684 	.word	0x24001684

08001050 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3302      	adds	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3303      	adds	r3, #3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3305      	adds	r3, #5
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	121b      	asrs	r3, r3, #8
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3306      	adds	r3, #6
 8001094:	f002 020f 	and.w	r2, r2, #15
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3307      	adds	r3, #7
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	ed87 0a00 	vstr	s0, [r7]
 80010c0:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 80010c2:	4b32      	ldr	r3, [pc, #200]	@ (800118c <MIT_Mode+0xd8>)
 80010c4:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <MIT_Mode+0xdc>)
 80010c8:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 80010ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d2:	edd7 6a00 	vldr	s13, [r7]
 80010d6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80010da:	eeb0 1b46 	vmov.f64	d1, d6
 80010de:	eeb0 0b47 	vmov.f64	d0, d7
 80010e2:	f013 fc19 	bl	8014918 <fmax>
 80010e6:	eeb0 6b40 	vmov.f64	d6, d0
 80010ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f2:	eeb0 1b47 	vmov.f64	d1, d7
 80010f6:	eeb0 0b46 	vmov.f64	d0, d6
 80010fa:	f013 fc2a 	bl	8014952 <fmin>
 80010fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001106:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 800110a:	200c      	movs	r0, #12
 800110c:	ed97 1a06 	vldr	s2, [r7, #24]
 8001110:	edd7 0a07 	vldr	s1, [r7, #28]
 8001114:	ed97 0a00 	vldr	s0, [r7]
 8001118:	f7ff fe12 	bl	8000d40 <float32_t_to_uint>
 800111c:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	b21a      	sxth	r2, r3
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff91 	bl	8001050 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <MIT_Mode+0xe0>)
 8001132:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MIT_Mode+0xe0>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MIT_Mode+0xe0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MIT_Mode+0xe0>)
 8001142:	2208      	movs	r2, #8
 8001144:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <MIT_Mode+0xe0>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MIT_Mode+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <MIT_Mode+0xe0>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MIT_Mode+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <MIT_Mode+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	461a      	mov	r2, r3
 800116a:	490a      	ldr	r1, [pc, #40]	@ (8001194 <MIT_Mode+0xe0>)
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <MIT_Mode+0xe4>)
 800116e:	f005 fd36 	bl	8006bde <HAL_FDCAN_AddMessageToTxFifoQ>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <MIT_Mode+0xce>
		sta = 1;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MIT_Mode+0xe8>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800117e:	f003 fe5b 	bl	8004e38 <Error_Handler>
	}
}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	c1c80000 	.word	0xc1c80000
 8001190:	41c80000 	.word	0x41c80000
 8001194:	24000264 	.word	0x24000264
 8001198:	24000288 	.word	0x24000288
 800119c:	24001684 	.word	0x24001684

080011a0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d04b      	beq.n	800124c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80011b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011b8:	f107 020c 	add.w	r2, r7, #12
 80011bc:	2140      	movs	r1, #64	@ 0x40
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f005 fd68 	bl	8006c94 <HAL_FDCAN_GetRxMessage>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
            Error_Handler();
 80011d0:	f003 fe32 	bl	8004e38 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 80011d4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80011d8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
 80011e0:	e02b      	b.n	800123a <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80011e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e6:	2198      	movs	r1, #152	@ 0x98
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	3308      	adds	r3, #8
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11c      	bne.n	8001234 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 80011fe:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001202:	2198      	movs	r1, #152	@ 0x98
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3310      	adds	r3, #16
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001212:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001216:	2300      	movs	r3, #0
 8001218:	f00d f816 	bl	800e248 <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800121c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00f      	beq.n	8001242 <HAL_FDCAN_RxFifo0Callback+0xa2>
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	f3bf 8f6f 	isb	sy
                break;
 8001232:	e006      	b.n	8001242 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001236:	3301      	adds	r3, #1
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
 800123a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800123c:	2b02      	cmp	r3, #2
 800123e:	ddd0      	ble.n	80011e2 <HAL_FDCAN_RxFifo0Callback+0x42>
 8001240:	e000      	b.n	8001244 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 8001242:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001248:	f006 fdf3 	bl	8007e32 <HAL_GPIO_TogglePin>
    }
}
 800124c:	bf00      	nop
 800124e:	3748      	adds	r7, #72	@ 0x48
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24001684 	.word	0x24001684
 8001258:	24001018 	.word	0x24001018
 800125c:	e000ed04 	.word	0xe000ed04
 8001260:	58021000 	.word	0x58021000

08001264 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a03 	vstr	s0, [r7, #12]
 800126e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001272:	ed87 1a01 	vstr	s2, [r7, #4]
 8001276:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 800127a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80012f4 <tustin_derivative+0x90>
 800127e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001282:	edd7 7a00 	vldr	s15, [r7]
 8001286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800128e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001292:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 800129c:	ed97 7a03 	vldr	s14, [r7, #12]
 80012a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80012f8 <tustin_derivative+0x94>
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80012f8 <tustin_derivative+0x94>
 80012d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	ee07 3a90 	vmov	s15, r3
}
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40490fd8 	.word	0x40490fd8
 80012f8:	3b03126f 	.word	0x3b03126f

080012fc <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 800135a:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001364:	61bb      	str	r3, [r7, #24]
	uint8_t buf[8];
	if (xQueueReceive(m->canRxQueue, buf, pdMS_TO_TICKS(1)) == pdPASS)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f00d f807 	bl	800e384 <xQueueReceive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d11f      	bne.n	80013bc <motor_encoder_read+0xc0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((buf[1]<<8)|buf[2]);
 800137c:	7a7b      	ldrb	r3, [r7, #9]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	7aba      	ldrb	r2, [r7, #10]
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001386:	2110      	movs	r1, #16
 8001388:	edd7 0a06 	vldr	s1, [r7, #24]
 800138c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff fd35 	bl	8000e00 <uint_to_float32_t>
 8001396:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 800139a:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800143c <motor_encoder_read+0x140>
 800139e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 80013ba:	e004      	b.n	80013c6 <motor_encoder_read+0xca>
	}
	else
	{
		sta = 2;
 80013bc:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <motor_encoder_read+0x144>)
 80013be:	2202      	movs	r2, #2
 80013c0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80013c2:	f003 fd39 	bl	8004e38 <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	ed93 6a06 	vldr	s12, [r3, #24]
 80013de:	eef0 1a46 	vmov.f32	s3, s12
 80013e2:	eeb0 1a66 	vmov.f32	s2, s13
 80013e6:	eef0 0a47 	vmov.f32	s1, s14
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	f7ff ff39 	bl	8001264 <tustin_derivative>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ed93 6a06 	vldr	s12, [r3, #24]
 8001414:	eef0 1a46 	vmov.f32	s3, s12
 8001418:	eeb0 1a66 	vmov.f32	s2, s13
 800141c:	eef0 0a47 	vmov.f32	s1, s14
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	f7ff ff1e 	bl	8001264 <tustin_derivative>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40490fd8 	.word	0x40490fd8
 8001440:	24001684 	.word	0x24001684

08001444 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a04 	vldr	s15, [r3, #16]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed93 7a05 	vldr	s14, [r3, #20]
 8001464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd1a      	ble.n	80014c4 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800149a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80014d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d400      	bmi.n	80014dc <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 80014da:	e01a      	b.n	8001512 <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80014e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	f013 fab3 	bl	8014aa0 <sinf>
 800153a:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	f013 fb6c 	bl	8014c28 <cosf>
 8001550:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800155a:	3304      	adds	r3, #4
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	f013 fa9c 	bl	8014aa0 <sinf>
 8001568:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001572:	3304      	adds	r3, #4
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f013 fb54 	bl	8014c28 <cosf>
 8001580:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800158a:	3308      	adds	r3, #8
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	f013 fa84 	bl	8014aa0 <sinf>
 8001598:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80015a2:	3308      	adds	r3, #8
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f013 fb3c 	bl	8014c28 <cosf>
 80015b0:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b8:	e02c      	b.n	8001614 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	441a      	add	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	441a      	add	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	441a      	add	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	2b02      	cmp	r3, #2
 8001618:	ddcf      	ble.n	80015ba <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001620:	edd7 7a05 	vldr	s15, [r7, #20]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800162e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001640:	edd7 7a07 	vldr	s15, [r7, #28]
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001652:	edd7 7a05 	vldr	s15, [r7, #20]
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001660:	edd7 7a03 	vldr	s15, [r7, #12]
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001672:	3304      	adds	r3, #4
 8001674:	edd7 7a08 	vldr	s15, [r7, #32]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 800168c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800169e:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80016ac:	3308      	adds	r3, #8
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 80016c8:	461a      	mov	r2, r3
 80016ca:	f00f f82b 	bl	8010724 <arm_mat_mult_f32>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <robot_forward_kinematics_cal+0x1be>
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <robot_forward_kinematics_cal+0x1c8>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f003 fbad 	bl	8004e38 <Error_Handler>
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	@ 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24001684 	.word	0x24001684

080016ec <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0f0      	sub	sp, #448	@ 0x1c0
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016fa:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 80016fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001700:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	f013 f9c5 	bl	8014aa0 <sinf>
 8001716:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 800171a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800171e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	f013 fa7a 	bl	8014c28 <cosf>
 8001734:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001738:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800173c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001746:	3304      	adds	r3, #4
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	f013 f9a6 	bl	8014aa0 <sinf>
 8001754:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001758:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb0 0a67 	vmov.f32	s0, s15
 8001770:	f013 fa5a 	bl	8014c28 <cosf>
 8001774:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001778:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800177c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001786:	3308      	adds	r3, #8
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f013 f986 	bl	8014aa0 <sinf>
 8001794:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001798:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800179c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017a6:	3308      	adds	r3, #8
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	f013 fa3a 	bl	8014c28 <cosf>
 80017b4:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 80017b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017c6:	3308      	adds	r3, #8
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017da:	3304      	adds	r3, #4
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f013 f95a 	bl	8014aa0 <sinf>
 80017ec:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 80017f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017fe:	3308      	adds	r3, #8
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001808:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001812:	3304      	adds	r3, #4
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f013 fa02 	bl	8014c28 <cosf>
 8001824:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 8001828:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800182c:	eeb1 7a67 	vneg.f32	s14, s15
 8001830:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001834:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 800183e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001842:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001846:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800184a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 8001854:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001858:	ee66 7a27 	vmul.f32	s15, s12, s15
 800185c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001860:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001864:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800186e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001872:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001876:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800187a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001884:	eeb1 7a67 	vneg.f32	s14, s15
 8001888:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001894:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800189e:	3304      	adds	r3, #4
 80018a0:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 80018ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80018ba:	eeb1 7a67 	vneg.f32	s14, s15
 80018be:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80018c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80018d4:	3308      	adds	r3, #8
 80018d6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80018da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018de:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 80018e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80018f0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001906:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001920:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001924:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 800193e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001942:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 800194c:	eeb1 7a67 	vneg.f32	s14, s15
 8001950:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001958:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800195c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001966:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001974:	3301      	adds	r3, #1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001986:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800198a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001994:	eeb1 7a67 	vneg.f32	s14, s15
 8001998:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019bc:	3302      	adds	r3, #2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 80019ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 80019f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001a02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001a10:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	3304      	adds	r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 8001a30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8001a3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a42:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001a4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 8001a6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8001a7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f00e fdec 	bl	8010668 <arm_mat_trans_f32>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <robot_model_param_cal+0x3bc>
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <robot_model_param_cal+0x3b8>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f003 f9cc 	bl	8004e38 <Error_Handler>
 8001aa0:	e002      	b.n	8001aa8 <robot_model_param_cal+0x3bc>
 8001aa2:	bf00      	nop
 8001aa4:	24001684 	.word	0x24001684

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8001aa8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001ab6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ac2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8001acc:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001adc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ae0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8001aea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8001af8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001afc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001b06:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001b20:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001b30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001b3e:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b46:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001b4e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b52:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001b60:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b64:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001b72:	eeb1 7a67 	vneg.f32	s14, s15
 8001b76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001bb8:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001bbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd2:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001bda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001be8:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001bee:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8001bf2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bf6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001c00:	eeb1 7a67 	vneg.f32	s14, s15
 8001c04:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c22:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 8001c3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001c48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001c56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	6852      	ldr	r2, [r2, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8001c7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001c88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001cac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001cba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cbe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cc8:	3301      	adds	r3, #1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8001cd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001ce4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cfa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d0c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d24:	3302      	adds	r3, #2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8001d36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d44:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d52:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d56:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	6892      	ldr	r2, [r2, #8]
 8001d66:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8001d68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d84:	3302      	adds	r3, #2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	3304      	adds	r3, #4
 8001daa:	440b      	add	r3, r1
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8001db0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001dbe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dc2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001dcc:	3301      	adds	r3, #1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001dd6:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8001de0:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001de2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001de6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001df0:	eeb1 7a67 	vneg.f32	s14, s15
 8001df4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e36:	3304      	adds	r3, #4
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8001e40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001e4e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e52:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e5c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001e60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e64:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e72:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e7a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e90:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001ea6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001eaa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001eb2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ece:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001ed8:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001edc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001ee0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ee4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001eee:	3308      	adds	r3, #8
 8001ef0:	ed93 5a00 	vldr	s10, [r3]
 8001ef4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ef8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f02:	3304      	adds	r3, #4
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001f0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f10:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f18:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8001f20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f44:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8001f48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001f56:	eeb1 7a67 	vneg.f32	s14, s15
 8001f5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7e:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f94:	3308      	adds	r3, #8
 8001f96:	edd3 6a00 	vldr	s13, [r3]
 8001f9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fa8:	3304      	adds	r3, #4
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	edd3 6a00 	vldr	s13, [r3]
 8001fca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fd8:	3304      	adds	r3, #4
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fe2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fe6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8001ffa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ffe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8002008:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800200c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002034:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002038:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002042:	3304      	adds	r3, #4
 8002044:	edd3 6a00 	vldr	s13, [r3]
 8002048:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800204c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002056:	3304      	adds	r3, #4
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002064:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800206e:	3308      	adds	r3, #8
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002078:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800207c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 800208c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002090:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 800209a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80020ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80022ec <robot_model_param_cal+0xc00>
 80020d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80020e6:	3304      	adds	r3, #4
 80020e8:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 80020f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002102:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80022ec <robot_model_param_cal+0xc00>
 8002106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800210a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800210e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002120:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800212a:	3308      	adds	r3, #8
 800212c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002134:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 8002138:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800213c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002146:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800214a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002152:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800215c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 800216c:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 8002170:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002178:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 800217c:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 800218c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002190:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800219a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800219e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80022f0 <robot_model_param_cal+0xc04>
 80021b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80021b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80021c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022f4 <robot_model_param_cal+0xc08>
 80021d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021dc:	eef0 0a67 	vmov.f32	s1, s15
 80021e0:	eeb0 0a66 	vmov.f32	s0, s13
 80021e4:	f012 fbf6 	bl	80149d4 <fmaxf>
 80021e8:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 80021ec:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <robot_model_param_cal+0xc0c>)
 80021ee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 80021f2:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 80021f6:	eef0 7ae7 	vabs.f32	s15, s15
 80021fa:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	dc0b      	bgt.n	8002220 <robot_model_param_cal+0xb34>
 8002208:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800220c:	eef0 7ae7 	vabs.f32	s15, s15
 8002210:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8002214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	f340 82aa 	ble.w	8002774 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8002228:	2203      	movs	r2, #3
 800222a:	2103      	movs	r1, #3
 800222c:	f00e fc1c 	bl	8010a68 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 8002230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002234:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002238:	2203      	movs	r2, #3
 800223a:	2103      	movs	r1, #3
 800223c:	f00e fc14 	bl	8010a68 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 8002240:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002244:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002248:	2203      	movs	r2, #3
 800224a:	2103      	movs	r1, #3
 800224c:	f00e fc0c 	bl	8010a68 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002250:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002254:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800225e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002262:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 800226c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002270:	4619      	mov	r1, r3
 8002272:	f00e fa57 	bl	8010724 <arm_mat_mult_f32>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <robot_model_param_cal+0xb9a>
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <robot_model_param_cal+0xc10>)
 800227e:	2204      	movs	r2, #4
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f002 fdd9 	bl	8004e38 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002286:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800228a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002296:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800229a:	edd3 7a04 	vldr	s15, [r3, #16]
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 80022b6:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 80022ba:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80022f0 <robot_model_param_cal+0xc04>
 80022c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002300 <robot_model_param_cal+0xc14>
 80022ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d2:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 80022d6:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80022da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022de:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022e8:	e023      	b.n	8002332 <robot_model_param_cal+0xc46>
 80022ea:	bf00      	nop
 80022ec:	411ce80a 	.word	0x411ce80a
 80022f0:	358637bd 	.word	0x358637bd
 80022f4:	34000000 	.word	0x34000000
 80022f8:	358637bd 	.word	0x358637bd
 80022fc:	24001684 	.word	0x24001684
 8002300:	3d4ccccd 	.word	0x3d4ccccd
 8002304:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002308:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 800230c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800231a:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800231e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800232c:	3301      	adds	r3, #1
 800232e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002332:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002336:	2b08      	cmp	r3, #8
 8002338:	dde4      	ble.n	8002304 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 800233a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800233e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002352:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002356:	edc3 7a00 	vstr	s15, [r3]
 800235a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800235e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002362:	ed93 7a04 	vldr	s14, [r3, #16]
 8002366:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002372:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002376:	edc3 7a04 	vstr	s15, [r3, #16]
 800237a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800237e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002382:	ed93 7a08 	vldr	s14, [r3, #32]
 8002386:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002392:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002396:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800239a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800239e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f00e fa61 	bl	801086c <arm_mat_inverse_f32>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <robot_model_param_cal+0xcce>
 80023b0:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <robot_model_param_cal+0xed0>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f002 fd3f 	bl	8004e38 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80023ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80023c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80023d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80023da:	4619      	mov	r1, r3
 80023dc:	f00e f9a2 	bl	8010724 <arm_mat_mult_f32>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <robot_model_param_cal+0xd04>
 80023e6:	4b75      	ldr	r3, [pc, #468]	@ (80025bc <robot_model_param_cal+0xed0>)
 80023e8:	2204      	movs	r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f002 fd24 	bl	8004e38 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80023f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80023fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002402:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f00e f92a 	bl	8010668 <arm_mat_trans_f32>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <robot_model_param_cal+0xd38>
 800241a:	4b68      	ldr	r3, [pc, #416]	@ (80025bc <robot_model_param_cal+0xed0>)
 800241c:	2204      	movs	r2, #4
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f002 fd0a 	bl	8004e38 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 8002424:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002428:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 800242c:	2203      	movs	r2, #3
 800242e:	2103      	movs	r1, #3
 8002430:	f00e fb1a 	bl	8010a68 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 8002434:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002438:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800243c:	2203      	movs	r2, #3
 800243e:	2103      	movs	r1, #3
 8002440:	f00e fb12 	bl	8010a68 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 8002444:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002448:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800244c:	2203      	movs	r2, #3
 800244e:	2103      	movs	r1, #3
 8002450:	f00e fb0a 	bl	8010a68 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002454:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002458:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800245c:	2203      	movs	r2, #3
 800245e:	2103      	movs	r1, #3
 8002460:	f00e fb02 	bl	8010a68 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002464:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002468:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800246c:	2203      	movs	r2, #3
 800246e:	2103      	movs	r1, #3
 8002470:	f00e fafa 	bl	8010a68 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002474:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002478:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8002482:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f00e f9ef 	bl	801086c <arm_mat_inverse_f32>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 80b2 	bne.w	80025fa <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002496:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800249a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80024a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80024a8:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80024ac:	4618      	mov	r0, r3
 80024ae:	f00e f939 	bl	8010724 <arm_mat_mult_f32>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <robot_model_param_cal+0xdd6>
 80024b8:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <robot_model_param_cal+0xed0>)
 80024ba:	2204      	movs	r2, #4
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f002 fcbb 	bl	8004e38 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80024c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 80024d0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80024d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024d8:	4618      	mov	r0, r3
 80024da:	f00e f923 	bl	8010724 <arm_mat_mult_f32>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <robot_model_param_cal+0xe02>
 80024e4:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <robot_model_param_cal+0xed0>)
 80024e6:	2204      	movs	r2, #4
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f002 fca5 	bl	8004e38 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80024f4:	e016      	b.n	8002524 <robot_model_param_cal+0xe38>
 80024f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024fa:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80024fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800250c:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002510:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800251e:	3301      	adds	r3, #1
 8002520:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002524:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002528:	2b08      	cmp	r3, #8
 800252a:	dde4      	ble.n	80024f6 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002534:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002548:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800254c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002550:	edc3 7a00 	vstr	s15, [r3]
 8002554:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800255c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002560:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800256c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002570:	edc3 7a04 	vstr	s15, [r3, #16]
 8002574:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800257c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002580:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002590:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002594:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002598:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f00e f964 	bl	801086c <arm_mat_inverse_f32>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <robot_model_param_cal+0xec8>
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <robot_model_param_cal+0xed0>)
 80025ac:	2204      	movs	r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f002 fc42 	bl	8004e38 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80025ba:	e01a      	b.n	80025f2 <robot_model_param_cal+0xf06>
 80025bc:	24001684 	.word	0x24001684
 80025c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80025ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 80025e0:	443a      	add	r2, r7
 80025e2:	3ae0      	subs	r2, #224	@ 0xe0
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80025f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	dde2      	ble.n	80025c0 <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80025fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002608:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800260c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 800261a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002628:	3304      	adds	r3, #4
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002630:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002634:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800263e:	3308      	adds	r3, #8
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002646:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800264a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002654:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002658:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 800266c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002670:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 800267a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800267e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002688:	3301      	adds	r3, #1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800269c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026aa:	3301      	adds	r3, #1
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 80026b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80026c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026d0:	3302      	adds	r3, #2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 80026dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80026ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002702:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002706:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002710:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002714:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	3304      	adds	r3, #4
 8002722:	4413      	add	r3, r2
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 800272a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800272e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002738:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800273c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002746:	3301      	adds	r3, #1
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	441a      	add	r2, r3
 800274c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002750:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800275a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800275e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002768:	3301      	adds	r3, #1
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	601a      	str	r2, [r3, #0]
	{
 8002772:	e227      	b.n	8002bc4 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002774:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002778:	eef1 6a67 	vneg.f32	s13, s15
 800277c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800278a:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800278e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002792:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002796:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800279a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80027a4:	3304      	adds	r3, #4
 80027a6:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 80027aa:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80027ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 80027b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80027c4:	3308      	adds	r3, #8
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 80027cc:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80027d0:	eeb1 7a67 	vneg.f32	s14, s15
 80027d4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80027d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80027ea:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002800:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002804:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002816:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 800281a:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800281e:	eeb1 7a67 	vneg.f32	s14, s15
 8002822:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002826:	ee67 6a27 	vmul.f32	s13, s14, s15
 800282a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800282e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002838:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800283c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002840:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002844:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800284e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002852:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800285c:	3301      	adds	r3, #1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002866:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 800286a:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800286e:	eef1 6a67 	vneg.f32	s13, s15
 8002872:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002876:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002880:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002888:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800288c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002896:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800289a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028a4:	3302      	adds	r3, #2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ae:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 80028b2:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 80028b6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80028ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80028be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028cc:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f8:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 80028fc:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8002900:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002904:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002908:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800290c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002916:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800291a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002922:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800292c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	3304      	adds	r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002944:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 8002948:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800294c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002956:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800295a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002962:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800296c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002970:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800297a:	3301      	adds	r3, #1
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800298c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002990:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 800299a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800299e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f00d fe5c 	bl	8010668 <arm_mat_trans_f32>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <robot_model_param_cal+0x12d4>
 80029b6:	4b86      	ldr	r3, [pc, #536]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 80029b8:	2204      	movs	r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f002 fa3c 	bl	8004e38 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 80029c0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029c4:	2224      	movs	r2, #36	@ 0x24
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00f fbbc 	bl	8012146 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 80029ce:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029d2:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80029d6:	2203      	movs	r2, #3
 80029d8:	2103      	movs	r1, #3
 80029da:	f00e f845 	bl	8010a68 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80029de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 80029ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029fa:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80029fe:	4619      	mov	r1, r3
 8002a00:	f00d fe90 	bl	8010724 <arm_mat_mult_f32>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <robot_model_param_cal+0x1328>
 8002a0a:	4b71      	ldr	r3, [pc, #452]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f002 fa12 	bl	8004e38 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002a14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8002a30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a34:	4619      	mov	r1, r3
 8002a36:	f00d fe75 	bl	8010724 <arm_mat_mult_f32>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <robot_model_param_cal+0x135e>
 8002a40:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 8002a42:	2204      	movs	r2, #4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f002 f9f7 	bl	8004e38 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002a4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002a58:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002a6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a78:	3304      	adds	r3, #4
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a8e:	3308      	adds	r3, #8
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002a96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a9a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002aa4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002abc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002aca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ace:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002ad8:	3301      	adds	r3, #1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002afa:	3301      	adds	r3, #1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002b04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b20:	3302      	adds	r3, #2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002b2c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002b52:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b56:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	3304      	adds	r3, #4
 8002b72:	4413      	add	r3, r2
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002b7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002b96:	3301      	adds	r3, #1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	441a      	add	r2, r3
 8002b9c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ba0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002bb8:	3301      	adds	r3, #1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	24001684 	.word	0x24001684

08002bd4 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e0cb      	b.n	8002d7a <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3374      	adds	r3, #116	@ 0x74
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2198      	movs	r1, #152	@ 0x98
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	332c      	adds	r3, #44	@ 0x2c
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c06:	4bae      	ldr	r3, [pc, #696]	@ (8002ec0 <robot_state_update+0x2ec>)
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3374      	adds	r3, #116	@ 0x74
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2198      	movs	r1, #152	@ 0x98
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3330      	adds	r3, #48	@ 0x30
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec0 <robot_state_update+0x2ec>)
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3374      	adds	r3, #116	@ 0x74
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2198      	movs	r1, #152	@ 0x98
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3334      	adds	r3, #52	@ 0x34
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3374      	adds	r3, #116	@ 0x74
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	ed93 7a00 	vldr	s14, [r3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2198      	movs	r1, #152	@ 0x98
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3338      	adds	r3, #56	@ 0x38
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3374      	adds	r3, #116	@ 0x74
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	ed93 7a00 	vldr	s14, [r3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2198      	movs	r1, #152	@ 0x98
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	333c      	adds	r3, #60	@ 0x3c
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3374      	adds	r3, #116	@ 0x74
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2198      	movs	r1, #152	@ 0x98
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3340      	adds	r3, #64	@ 0x40
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3374      	adds	r3, #116	@ 0x74
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	2198      	movs	r1, #152	@ 0x98
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f77f af30 	ble.w	8002be2 <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d9e:	3304      	adds	r3, #4
 8002da0:	6852      	ldr	r2, [r2, #4]
 8002da2:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002daa:	3308      	adds	r3, #8
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002db6:	3304      	adds	r3, #4
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e036      	b.n	8002e40 <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	ed93 7a00 	vldr	s14, [r3]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	337c      	adds	r3, #124	@ 0x7c
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	dd05      	ble.n	8002e06 <robot_state_update+0x232>
 8002dfa:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <robot_state_update+0x2f0>)
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f002 f81a 	bl	8004e38 <Error_Handler>
 8002e04:	e019      	b.n	8002e3a <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	337e      	adds	r3, #126	@ 0x7e
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d504      	bpl.n	8002e3a <robot_state_update+0x266>
 8002e30:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <robot_state_update+0x2f0>)
 8002e32:	2205      	movs	r2, #5
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f001 ffff 	bl	8004e38 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	ddc5      	ble.n	8002dd2 <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fc50 	bl	80016ec <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe fb67 	bl	8001520 <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e02c      	b.n	8002eb2 <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	ddcf      	ble.n	8002e58 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e03f      	b.n	8002f3e <robot_state_update+0x36a>
 8002ebe:	bf00      	nop
 8002ec0:	24000ff4 	.word	0x24000ff4
 8002ec4:	24001684 	.word	0x24001684
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	ddc1      	ble.n	8002ec8 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e01e      	b.n	8002f88 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	441a      	add	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	dddd      	ble.n	8002f4a <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f00d fbbf 	bl	8010724 <arm_mat_mult_f32>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <robot_state_update+0x3e2>
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <robot_state_update+0x3ec>)
 8002fae:	2204      	movs	r2, #4
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f001 ff41 	bl	8004e38 <Error_Handler>
}
 8002fb6:	bf00      	nop
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	24001684 	.word	0x24001684

08002fc4 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e040      	b.n	800305a <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3304      	adds	r3, #4
 8003020:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003042:	4413      	add	r3, r2
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b02      	cmp	r3, #2
 800305e:	ddbb      	ble.n	8002fd8 <robot_pos_pid_gain_setting+0x14>
	}
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e145      	b.n	8003310 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003084:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003348 <robot_pos_pid+0x2d8>
 8003088:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a8:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	ed93 7a00 	vldr	s14, [r3]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003128:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800334c <robot_pos_pid+0x2dc>
 8003142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800314a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800314e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	ed93 7a00 	vldr	s14, [r3]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	edd3 5a00 	vldr	s11, [r3]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	edd3 5a00 	vldr	s11, [r3]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031fa:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003212:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003216:	edd7 7a04 	vldr	s15, [r7, #16]
 800321a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800321e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003222:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800334c <robot_pos_pid+0x2dc>
 8003226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800322a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800322e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800325a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800325e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800334c <robot_pos_pid+0x2dc>
 8003262:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003266:	edd7 7a04 	vldr	s15, [r7, #16]
 800326a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800326e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003272:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003276:	edd7 7a04 	vldr	s15, [r7, #16]
 800327a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800327e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003282:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800334c <robot_pos_pid+0x2dc>
 8003286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800328a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800328e:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032be:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	ed93 7a00 	vldr	s14, [r3]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b02      	cmp	r3, #2
 8003314:	f77f aeb6 	ble.w	8003084 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 800332a:	461a      	mov	r2, r3
 800332c:	f00d f9fa 	bl	8010724 <arm_mat_mult_f32>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <robot_pos_pid+0x2d0>
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <robot_pos_pid+0x2e0>)
 8003338:	2204      	movs	r2, #4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f001 fd7c 	bl	8004e38 <Error_Handler>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40490fd8 	.word	0x40490fd8
 800334c:	3b03126f 	.word	0x3b03126f
 8003350:	24001684 	.word	0x24001684

08003354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_UART_RxCpltCallback+0x6c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d127      	bne.n	80033b6 <HAL_UART_RxCpltCallback+0x62>
  {
    // 링버퍼에 바이트 저장 (넘치면 가장 오래된 바이트를 버림)
    uint16_t next = (uart3_widx + 1) & (UART3_RBUF_SIZE - 1);
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003374:	81fb      	strh	r3, [r7, #14]
    if (next == uart3_ridx) {
 8003376:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	89fa      	ldrh	r2, [r7, #14]
 800337e:	429a      	cmp	r2, r3
 8003380:	d109      	bne.n	8003396 <HAL_UART_RxCpltCallback+0x42>
      // 버퍼 풀 → reader를 한 칸 앞으로 밀어 가장 오래된 것 1바이트 drop
      uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8003382:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	b29b      	uxth	r3, r3
 800338c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003394:	801a      	strh	r2, [r3, #0]
    }
    uart3_rbuf[uart3_widx] = uart3_rx_byte;
 8003396:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_UART_RxCpltCallback+0x78>)
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_UART_RxCpltCallback+0x7c>)
 80033a4:	5499      	strb	r1, [r3, r2]
    uart3_widx = next;
 80033a6:	4a07      	ldr	r2, [pc, #28]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	8013      	strh	r3, [r2, #0]

    // 다음 바이트 수신 재개
    HAL_UART_Receive_IT(&huart3, &uart3_rx_byte, 1);
 80033ac:	2201      	movs	r2, #1
 80033ae:	4907      	ldr	r1, [pc, #28]	@ (80033cc <HAL_UART_RxCpltCallback+0x78>)
 80033b0:	4808      	ldr	r0, [pc, #32]	@ (80033d4 <HAL_UART_RxCpltCallback+0x80>)
 80033b2:	f007 ff8d 	bl	800b2d0 <HAL_UART_Receive_IT>
  }
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40004800 	.word	0x40004800
 80033c4:	24000bc4 	.word	0x24000bc4
 80033c8:	24000bc6 	.word	0x24000bc6
 80033cc:	24000bc8 	.word	0x24000bc8
 80033d0:	240003c4 	.word	0x240003c4
 80033d4:	24000328 	.word	0x24000328

080033d8 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <uart3_rb_pop+0x50>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <uart3_rb_pop+0x54>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d101      	bne.n	80033f4 <uart3_rb_pop+0x1c>
 80033f0:	2300      	movs	r3, #0
 80033f2:	e012      	b.n	800341a <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <uart3_rb_pop+0x50>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <uart3_rb_pop+0x58>)
 80033fe:	5c9a      	ldrb	r2, [r3, r2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <uart3_rb_pop+0x50>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	3301      	adds	r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <uart3_rb_pop+0x50>)
 8003416:	801a      	strh	r2, [r3, #0]
  return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	24000bc6 	.word	0x24000bc6
 800342c:	24000bc4 	.word	0x24000bc4
 8003430:	240003c4 	.word	0x240003c4

08003434 <trim_spaces>:

// 좌우 공백 제거
static inline void trim_spaces(char *s) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  char *p = s;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60fb      	str	r3, [r7, #12]
  while (*p==' ' || *p=='\t') ++p;
 8003440:	e002      	b.n	8003448 <trim_spaces+0x14>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d0f8      	beq.n	8003442 <trim_spaces+0xe>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d0f4      	beq.n	8003442 <trim_spaces+0xe>
  if (p!=s) memmove(s, p, strlen(p)+1);
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <trim_spaces+0x40>
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7fc ff8d 	bl	8000380 <strlen>
 8003466:	4603      	mov	r3, r0
 8003468:	3301      	adds	r3, #1
 800346a:	461a      	mov	r2, r3
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00e fe4f 	bl	8012112 <memmove>
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fc ff83 	bl	8000380 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e007      	b.n	8003492 <trim_spaces+0x5e>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3b01      	subs	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0b      	blt.n	80034b0 <trim_spaces+0x7c>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d0ee      	beq.n	8003482 <trim_spaces+0x4e>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d0e8      	beq.n	8003482 <trim_spaces+0x4e>
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <parse_pc_line_to_floats>:

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08b      	sub	sp, #44	@ 0x2c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  // 대괄호 범위 찾기
  char *L = strchr(line, '[');
 80034c4:	215b      	movs	r1, #91	@ 0x5b
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f00e fe45 	bl	8012156 <strchr>
 80034cc:	61f8      	str	r0, [r7, #28]
  char *R = strrchr(line, ']');
 80034ce:	215d      	movs	r1, #93	@ 0x5d
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f00e fe5f 	bl	8012194 <strrchr>
 80034d6:	61b8      	str	r0, [r7, #24]
  if (!L || !R || R <= L) return 0;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <parse_pc_line_to_floats+0x34>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <parse_pc_line_to_floats+0x34>
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d801      	bhi.n	80034f0 <parse_pc_line_to_floats+0x38>
 80034ec:	2300      	movs	r3, #0
 80034ee:	e033      	b.n	8003558 <parse_pc_line_to_floats+0xa0>

  *R = '\0';   // ']' 대신 문자열 끝
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  ++L;         // '[' 다음부터
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]

  int count = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
  char *save = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  char *tok = strtok_r(L, ",", &save);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	461a      	mov	r2, r3
 800350a:	4915      	ldr	r1, [pc, #84]	@ (8003560 <parse_pc_line_to_floats+0xa8>)
 800350c:	69f8      	ldr	r0, [r7, #28]
 800350e:	f00e fe7f 	bl	8012210 <strtok_r>
 8003512:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003514:	e018      	b.n	8003548 <parse_pc_line_to_floats+0x90>
    trim_spaces(tok);
 8003516:	6a38      	ldr	r0, [r7, #32]
 8003518:	f7ff ff8c 	bl	8003434 <trim_spaces>
    vals[count++] = strtof(tok, NULL);
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	627a      	str	r2, [r7, #36]	@ 0x24
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	18d4      	adds	r4, r2, r3
 8003528:	2100      	movs	r1, #0
 800352a:	6a38      	ldr	r0, [r7, #32]
 800352c:	f00e f858 	bl	80115e0 <strtof>
 8003530:	eef0 7a40 	vmov.f32	s15, s0
 8003534:	edc4 7a00 	vstr	s15, [r4]
    tok = strtok_r(NULL, ",", &save);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	461a      	mov	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	@ (8003560 <parse_pc_line_to_floats+0xa8>)
 8003540:	2000      	movs	r0, #0
 8003542:	f00e fe65 	bl	8012210 <strtok_r>
 8003546:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <parse_pc_line_to_floats+0x9e>
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	dbdf      	blt.n	8003516 <parse_pc_line_to_floats+0x5e>
  }
  return count;
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003558:	4618      	mov	r0, r3
 800355a:	372c      	adds	r7, #44	@ 0x2c
 800355c:	46bd      	mov	sp, r7
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	08014dd4 	.word	0x08014dd4

08003564 <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8003564:	b480      	push	{r7}
 8003566:	b097      	sub	sp, #92	@ 0x5c
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 8003570:	2301      	movs	r3, #1
 8003572:	653b      	str	r3, [r7, #80]	@ 0x50
 8003574:	2302      	movs	r3, #2
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003578:	2303      	movs	r3, #3
 800357a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 800357c:	2304      	movs	r3, #4
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003580:	2305      	movs	r3, #5
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40
 8003584:	2306      	movs	r3, #6
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003588:	2307      	movs	r3, #7
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800358c:	2308      	movs	r3, #8
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 8003590:	2309      	movs	r3, #9
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30
 8003594:	230a      	movs	r3, #10
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003598:	230b      	movs	r3, #11
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359c:	230c      	movs	r3, #12
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a0:	230d      	movs	r3, #13
 80035a2:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 80035a4:	230e      	movs	r3, #14
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	230f      	movs	r3, #15
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	2310      	movs	r3, #16
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	2311      	movs	r3, #17
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	2312      	movs	r3, #18
 80035b6:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d97f      	bls.n	80036ce <apply_pc_floats+0x16a>
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	d974      	bls.n	80036ce <apply_pc_floats+0x16a>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d969      	bls.n	80036ce <apply_pc_floats+0x16a>
	//  target_posXYZ.pData[0] = v[tx];
	//  target_posXYZ.pData[1] = v[ty];
	//  target_posXYZ.pData[2] = v[tz];

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 80035fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <apply_pc_floats+0x178>)
 8003606:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8003608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a33      	ldr	r2, [pc, #204]	@ (80036e0 <apply_pc_floats+0x17c>)
 8003614:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8003616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a30      	ldr	r2, [pc, #192]	@ (80036e4 <apply_pc_floats+0x180>)
 8003622:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 8003624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <apply_pc_floats+0x184>)
 8003630:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <apply_pc_floats+0x188>)
 800363e:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <apply_pc_floats+0x178>)
 800364c:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 800364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <apply_pc_floats+0x17c>)
 800365a:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <apply_pc_floats+0x180>)
 8003668:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <apply_pc_floats+0x184>)
 8003676:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1a      	ldr	r2, [pc, #104]	@ (80036ec <apply_pc_floats+0x188>)
 8003684:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <apply_pc_floats+0x178>)
 8003692:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a10      	ldr	r2, [pc, #64]	@ (80036e0 <apply_pc_floats+0x17c>)
 80036a0:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <apply_pc_floats+0x180>)
 80036ae:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	@ (80036e8 <apply_pc_floats+0x184>)
 80036bc:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <apply_pc_floats+0x188>)
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e000      	b.n	80036d0 <apply_pc_floats+0x16c>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80036ce:	bf00      	nop
}
 80036d0:	375c      	adds	r7, #92	@ 0x5c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	24000024 	.word	0x24000024
 80036e0:	24000030 	.word	0x24000030
 80036e4:	2400003c 	.word	0x2400003c
 80036e8:	24000048 	.word	0x24000048
 80036ec:	2400100c 	.word	0x2400100c

080036f0 <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b096      	sub	sp, #88	@ 0x58
 80036f4:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 80036f6:	e03b      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 80036f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8003700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003704:	2b0d      	cmp	r3, #13
 8003706:	d032      	beq.n	800376e <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8003708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800370c:	2b0a      	cmp	r3, #10
 800370e:	d11a      	bne.n	8003746 <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8003710:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02b      	beq.n	8003770 <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8003718:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800371e:	2100      	movs	r1, #0
 8003720:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8003722:	463b      	mov	r3, r7
 8003724:	2213      	movs	r2, #19
 8003726:	4619      	mov	r1, r3
 8003728:	4819      	ldr	r0, [pc, #100]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800372a:	f7ff fec5 	bl	80034b8 <parse_pc_line_to_floats>
 800372e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n == PC_MSG_FIELDS) {
 8003730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003732:	2b13      	cmp	r3, #19
 8003734:	d103      	bne.n	800373e <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8003736:	463b      	mov	r3, r7
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff13 	bl	8003564 <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e014      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800374e:	4293      	cmp	r3, r2
 8003750:	d809      	bhi.n	8003766 <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	490c      	ldr	r1, [pc, #48]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 800375a:	600a      	str	r2, [r1, #0]
 800375c:	490c      	ldr	r1, [pc, #48]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800375e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003762:	54ca      	strb	r2, [r1, r3]
 8003764:	e004      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e000      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 800376e:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 8003770:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fe2f 	bl	80033d8 <uart3_rb_pop>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1bb      	bne.n	80036f8 <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3758      	adds	r7, #88	@ 0x58
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	24000fcc 	.word	0x24000fcc
 8003790:	24000bcc 	.word	0x24000bcc

08003794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	e060      	b.n	8003862 <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	49bf      	ldr	r1, [pc, #764]	@ (8003aa4 <main+0x310>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2098      	movs	r0, #152	@ 0x98
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	440b      	add	r3, r1
 80037b0:	3308      	adds	r3, #8
 80037b2:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 80037b4:	4abb      	ldr	r2, [pc, #748]	@ (8003aa4 <main+0x310>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2198      	movs	r1, #152	@ 0x98
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	330c      	adds	r3, #12
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 80037c6:	4ab7      	ldr	r2, [pc, #732]	@ (8003aa4 <main+0x310>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2198      	movs	r1, #152	@ 0x98
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3314      	adds	r3, #20
 80037d4:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80037d8:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 80037da:	4ab2      	ldr	r2, [pc, #712]	@ (8003aa4 <main+0x310>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2198      	movs	r1, #152	@ 0x98
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3318      	adds	r3, #24
 80037e8:	4aaf      	ldr	r2, [pc, #700]	@ (8003aa8 <main+0x314>)
 80037ea:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 80037ec:	4aad      	ldr	r2, [pc, #692]	@ (8003aa4 <main+0x310>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2198      	movs	r1, #152	@ 0x98
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	331c      	adds	r3, #28
 80037fa:	4aac      	ldr	r2, [pc, #688]	@ (8003aac <main+0x318>)
 80037fc:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 80037fe:	2200      	movs	r2, #0
 8003800:	2108      	movs	r1, #8
 8003802:	2008      	movs	r0, #8
 8003804:	f00a fbbf 	bl	800df86 <xQueueGenericCreate>
 8003808:	4602      	mov	r2, r0
 800380a:	49a6      	ldr	r1, [pc, #664]	@ (8003aa4 <main+0x310>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2098      	movs	r0, #152	@ 0x98
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	3310      	adds	r3, #16
 8003818:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 800381a:	4aa2      	ldr	r2, [pc, #648]	@ (8003aa4 <main+0x310>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2198      	movs	r1, #152	@ 0x98
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3310      	adds	r3, #16
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <main+0xa4>
			sta = 3;
 800382e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ab0 <main+0x31c>)
 8003830:	2203      	movs	r2, #3
 8003832:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003834:	f001 fb00 	bl	8004e38 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8003838:	4a9a      	ldr	r2, [pc, #616]	@ (8003aa4 <main+0x310>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2198      	movs	r1, #152	@ 0x98
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3394      	adds	r3, #148	@ 0x94
 8003846:	4a9b      	ldr	r2, [pc, #620]	@ (8003ab4 <main+0x320>)
 8003848:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 800384a:	4a96      	ldr	r2, [pc, #600]	@ (8003aa4 <main+0x310>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3301      	adds	r3, #1
 8003850:	2198      	movs	r1, #152	@ 0x98
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	4a97      	ldr	r2, [pc, #604]	@ (8003ab8 <main+0x324>)
 800385a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b02      	cmp	r3, #2
 8003866:	dd9b      	ble.n	80037a0 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <main+0x328>)
 800386a:	2201      	movs	r2, #1
 800386c:	2103      	movs	r1, #3
 800386e:	4894      	ldr	r0, [pc, #592]	@ (8003ac0 <main+0x32c>)
 8003870:	f00d f8fa 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 8003874:	4b93      	ldr	r3, [pc, #588]	@ (8003ac4 <main+0x330>)
 8003876:	2201      	movs	r2, #1
 8003878:	2103      	movs	r1, #3
 800387a:	4893      	ldr	r0, [pc, #588]	@ (8003ac8 <main+0x334>)
 800387c:	f00d f8f4 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8003880:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <main+0x338>)
 8003882:	2201      	movs	r2, #1
 8003884:	2103      	movs	r1, #3
 8003886:	4892      	ldr	r0, [pc, #584]	@ (8003ad0 <main+0x33c>)
 8003888:	f00d f8ee 	bl	8010a68 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 800388c:	4b85      	ldr	r3, [pc, #532]	@ (8003aa4 <main+0x310>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 8003892:	4b84      	ldr	r3, [pc, #528]	@ (8003aa4 <main+0x310>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8003898:	4b82      	ldr	r3, [pc, #520]	@ (8003aa4 <main+0x310>)
 800389a:	4a8e      	ldr	r2, [pc, #568]	@ (8003ad4 <main+0x340>)
 800389c:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 80038a0:	4b80      	ldr	r3, [pc, #512]	@ (8003aa4 <main+0x310>)
 80038a2:	4a8c      	ldr	r2, [pc, #560]	@ (8003ad4 <main+0x340>)
 80038a4:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80038a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <main+0x310>)
 80038aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038ae:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 80038b2:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8003ad8 <main+0x344>
 80038b6:	eef1 7a67 	vneg.f32	s15, s15
 80038ba:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa4 <main+0x310>)
 80038bc:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 80038c0:	4a86      	ldr	r2, [pc, #536]	@ (8003adc <main+0x348>)
 80038c2:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <main+0x310>)
 80038c4:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 80038c8:	4b76      	ldr	r3, [pc, #472]	@ (8003aa4 <main+0x310>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 80038d2:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003ad8 <main+0x344>
 80038d6:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003ae0 <main+0x34c>
 80038da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038de:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003ae4 <main+0x350>
 80038e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038e6:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa4 <main+0x310>)
 80038e8:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 80038ec:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003ad8 <main+0x344>
 80038f0:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003ae0 <main+0x34c>
 80038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003ae8 <main+0x354>
 80038fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003900:	4b68      	ldr	r3, [pc, #416]	@ (8003aa4 <main+0x310>)
 8003902:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003906:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003ad8 <main+0x344>
 800390a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003ae0 <main+0x34c>
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003912:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003aec <main+0x358>
 8003916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391a:	4b62      	ldr	r3, [pc, #392]	@ (8003aa4 <main+0x310>)
 800391c:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 8003920:	4b60      	ldr	r3, [pc, #384]	@ (8003aa4 <main+0x310>)
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <main+0x35c>)
 8003924:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 8003928:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa4 <main+0x310>)
 800392a:	4a72      	ldr	r2, [pc, #456]	@ (8003af4 <main+0x360>)
 800392c:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 8003930:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa4 <main+0x310>)
 8003932:	4a70      	ldr	r2, [pc, #448]	@ (8003af4 <main+0x360>)
 8003934:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 8003938:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa4 <main+0x310>)
 800393a:	4a6f      	ldr	r2, [pc, #444]	@ (8003af8 <main+0x364>)
 800393c:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 8003940:	4b58      	ldr	r3, [pc, #352]	@ (8003aa4 <main+0x310>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 800394a:	4b56      	ldr	r3, [pc, #344]	@ (8003aa4 <main+0x310>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <main+0x310>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 800395e:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <main+0x310>)
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 8003968:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa4 <main+0x310>)
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 8003972:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa4 <main+0x310>)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 800397c:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <main+0x310>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8003986:	4b5d      	ldr	r3, [pc, #372]	@ (8003afc <main+0x368>)
 8003988:	2201      	movs	r2, #1
 800398a:	2103      	movs	r1, #3
 800398c:	485c      	ldr	r0, [pc, #368]	@ (8003b00 <main+0x36c>)
 800398e:	f00d f86b 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 8003992:	4b5c      	ldr	r3, [pc, #368]	@ (8003b04 <main+0x370>)
 8003994:	2201      	movs	r2, #1
 8003996:	2103      	movs	r1, #3
 8003998:	485b      	ldr	r0, [pc, #364]	@ (8003b08 <main+0x374>)
 800399a:	f00d f865 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <main+0x378>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	2103      	movs	r1, #3
 80039a4:	485a      	ldr	r0, [pc, #360]	@ (8003b10 <main+0x37c>)
 80039a6:	f00d f85f 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80039aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <main+0x380>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	2103      	movs	r1, #3
 80039b0:	4859      	ldr	r0, [pc, #356]	@ (8003b18 <main+0x384>)
 80039b2:	f00d f859 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 80039b6:	4b59      	ldr	r3, [pc, #356]	@ (8003b1c <main+0x388>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	2103      	movs	r1, #3
 80039bc:	4858      	ldr	r0, [pc, #352]	@ (8003b20 <main+0x38c>)
 80039be:	f00d f853 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 80039c2:	4b58      	ldr	r3, [pc, #352]	@ (8003b24 <main+0x390>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	2103      	movs	r1, #3
 80039c8:	4857      	ldr	r0, [pc, #348]	@ (8003b28 <main+0x394>)
 80039ca:	f00d f84d 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 80039ce:	4b57      	ldr	r3, [pc, #348]	@ (8003b2c <main+0x398>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	2103      	movs	r1, #3
 80039d4:	4856      	ldr	r0, [pc, #344]	@ (8003b30 <main+0x39c>)
 80039d6:	f00d f847 	bl	8010a68 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 80039da:	4b56      	ldr	r3, [pc, #344]	@ (8003b34 <main+0x3a0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	2103      	movs	r1, #3
 80039e0:	4855      	ldr	r0, [pc, #340]	@ (8003b38 <main+0x3a4>)
 80039e2:	f00d f841 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 80039e6:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <main+0x3a8>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	2103      	movs	r1, #3
 80039ec:	4854      	ldr	r0, [pc, #336]	@ (8003b40 <main+0x3ac>)
 80039ee:	f00d f83b 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 80039f2:	4b54      	ldr	r3, [pc, #336]	@ (8003b44 <main+0x3b0>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	2103      	movs	r1, #3
 80039f8:	4853      	ldr	r0, [pc, #332]	@ (8003b48 <main+0x3b4>)
 80039fa:	f00d f835 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 80039fe:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <main+0x3b8>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	2103      	movs	r1, #3
 8003a04:	4852      	ldr	r0, [pc, #328]	@ (8003b50 <main+0x3bc>)
 8003a06:	f00d f82f 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8003a0a:	4b52      	ldr	r3, [pc, #328]	@ (8003b54 <main+0x3c0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2103      	movs	r1, #3
 8003a10:	4851      	ldr	r0, [pc, #324]	@ (8003b58 <main+0x3c4>)
 8003a12:	f00d f829 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003a16:	4b51      	ldr	r3, [pc, #324]	@ (8003b5c <main+0x3c8>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4850      	ldr	r0, [pc, #320]	@ (8003b60 <main+0x3cc>)
 8003a1e:	f00d f823 	bl	8010a68 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 8003a22:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <main+0x3d0>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	2103      	movs	r1, #3
 8003a28:	484f      	ldr	r0, [pc, #316]	@ (8003b68 <main+0x3d4>)
 8003a2a:	f00d f81d 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b6c <main+0x3d8>)
 8003a30:	2203      	movs	r2, #3
 8003a32:	2103      	movs	r1, #3
 8003a34:	484e      	ldr	r0, [pc, #312]	@ (8003b70 <main+0x3dc>)
 8003a36:	f00d f817 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b74 <main+0x3e0>)
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	2103      	movs	r1, #3
 8003a40:	484d      	ldr	r0, [pc, #308]	@ (8003b78 <main+0x3e4>)
 8003a42:	f00d f811 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8003a46:	4b4d      	ldr	r3, [pc, #308]	@ (8003b7c <main+0x3e8>)
 8003a48:	2203      	movs	r2, #3
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	484c      	ldr	r0, [pc, #304]	@ (8003b80 <main+0x3ec>)
 8003a4e:	f00d f80b 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <main+0x3f0>)
 8003a54:	2203      	movs	r2, #3
 8003a56:	2103      	movs	r1, #3
 8003a58:	484b      	ldr	r0, [pc, #300]	@ (8003b88 <main+0x3f4>)
 8003a5a:	f00d f805 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b8c <main+0x3f8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	2103      	movs	r1, #3
 8003a64:	484a      	ldr	r0, [pc, #296]	@ (8003b90 <main+0x3fc>)
 8003a66:	f00c ffff 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <main+0x400>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2103      	movs	r1, #3
 8003a70:	4849      	ldr	r0, [pc, #292]	@ (8003b98 <main+0x404>)
 8003a72:	f00c fff9 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <main+0x408>)
 8003a78:	2203      	movs	r2, #3
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	4848      	ldr	r0, [pc, #288]	@ (8003ba0 <main+0x40c>)
 8003a7e:	f00c fff3 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8003a82:	4b48      	ldr	r3, [pc, #288]	@ (8003ba4 <main+0x410>)
 8003a84:	2203      	movs	r2, #3
 8003a86:	2103      	movs	r1, #3
 8003a88:	4847      	ldr	r0, [pc, #284]	@ (8003ba8 <main+0x414>)
 8003a8a:	f00c ffed 	bl	8010a68 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 8003a8e:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <main+0x418>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	2103      	movs	r1, #3
 8003a94:	4846      	ldr	r0, [pc, #280]	@ (8003bb0 <main+0x41c>)
 8003a96:	f00c ffe7 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 8003a9a:	4b46      	ldr	r3, [pc, #280]	@ (8003bb4 <main+0x420>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	e08a      	b.n	8003bb8 <main+0x424>
 8003aa2:	bf00      	nop
 8003aa4:	24001018 	.word	0x24001018
 8003aa8:	41200000 	.word	0x41200000
 8003aac:	3dfbe76d 	.word	0x3dfbe76d
 8003ab0:	24001684 	.word	0x24001684
 8003ab4:	40e66666 	.word	0x40e66666
 8003ab8:	c0e66666 	.word	0xc0e66666
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	24000ff4 	.word	0x24000ff4
 8003ac4:	2400000c 	.word	0x2400000c
 8003ac8:	24000ffc 	.word	0x24000ffc
 8003acc:	24000018 	.word	0x24000018
 8003ad0:	24001004 	.word	0x24001004
 8003ad4:	bf800000 	.word	0xbf800000
 8003ad8:	40490fd8 	.word	0x40490fd8
 8003adc:	40490fd8 	.word	0x40490fd8
 8003ae0:	43340000 	.word	0x43340000
 8003ae4:	42aa0000 	.word	0x42aa0000
 8003ae8:	c3200000 	.word	0xc3200000
 8003aec:	c2200000 	.word	0xc2200000
 8003af0:	3e343958 	.word	0x3e343958
 8003af4:	3eeb851f 	.word	0x3eeb851f
 8003af8:	407c209b 	.word	0x407c209b
 8003afc:	240011fc 	.word	0x240011fc
 8003b00:	240011f4 	.word	0x240011f4
 8003b04:	24001228 	.word	0x24001228
 8003b08:	24001220 	.word	0x24001220
 8003b0c:	2400123c 	.word	0x2400123c
 8003b10:	24001234 	.word	0x24001234
 8003b14:	24001250 	.word	0x24001250
 8003b18:	24001248 	.word	0x24001248
 8003b1c:	24001264 	.word	0x24001264
 8003b20:	2400125c 	.word	0x2400125c
 8003b24:	24001278 	.word	0x24001278
 8003b28:	24001270 	.word	0x24001270
 8003b2c:	2400128c 	.word	0x2400128c
 8003b30:	24001284 	.word	0x24001284
 8003b34:	240012a0 	.word	0x240012a0
 8003b38:	24001298 	.word	0x24001298
 8003b3c:	240012b4 	.word	0x240012b4
 8003b40:	240012ac 	.word	0x240012ac
 8003b44:	240012c8 	.word	0x240012c8
 8003b48:	240012c0 	.word	0x240012c0
 8003b4c:	240012dc 	.word	0x240012dc
 8003b50:	240012d4 	.word	0x240012d4
 8003b54:	240012f0 	.word	0x240012f0
 8003b58:	240012e8 	.word	0x240012e8
 8003b5c:	24001304 	.word	0x24001304
 8003b60:	240012fc 	.word	0x240012fc
 8003b64:	24001344 	.word	0x24001344
 8003b68:	2400133c 	.word	0x2400133c
 8003b6c:	24001370 	.word	0x24001370
 8003b70:	24001368 	.word	0x24001368
 8003b74:	2400139c 	.word	0x2400139c
 8003b78:	24001394 	.word	0x24001394
 8003b7c:	240013c8 	.word	0x240013c8
 8003b80:	240013c0 	.word	0x240013c0
 8003b84:	240013f4 	.word	0x240013f4
 8003b88:	240013ec 	.word	0x240013ec
 8003b8c:	24001420 	.word	0x24001420
 8003b90:	24001418 	.word	0x24001418
 8003b94:	24001434 	.word	0x24001434
 8003b98:	2400142c 	.word	0x2400142c
 8003b9c:	24001448 	.word	0x24001448
 8003ba0:	24001440 	.word	0x24001440
 8003ba4:	24001474 	.word	0x24001474
 8003ba8:	2400146c 	.word	0x2400146c
 8003bac:	240014dc 	.word	0x240014dc
 8003bb0:	240014d4 	.word	0x240014d4
 8003bb4:	240014f0 	.word	0x240014f0
 8003bb8:	4854      	ldr	r0, [pc, #336]	@ (8003d0c <main+0x578>)
 8003bba:	f00c ff55 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 8003bbe:	4b54      	ldr	r3, [pc, #336]	@ (8003d10 <main+0x57c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	4853      	ldr	r0, [pc, #332]	@ (8003d14 <main+0x580>)
 8003bc6:	f00c ff4f 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8003bca:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <main+0x584>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2103      	movs	r1, #3
 8003bd0:	4852      	ldr	r0, [pc, #328]	@ (8003d1c <main+0x588>)
 8003bd2:	f00c ff49 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8003bd6:	4b52      	ldr	r3, [pc, #328]	@ (8003d20 <main+0x58c>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2103      	movs	r1, #3
 8003bdc:	4851      	ldr	r0, [pc, #324]	@ (8003d24 <main+0x590>)
 8003bde:	f00c ff43 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8003be2:	4b51      	ldr	r3, [pc, #324]	@ (8003d28 <main+0x594>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	2103      	movs	r1, #3
 8003be8:	4850      	ldr	r0, [pc, #320]	@ (8003d2c <main+0x598>)
 8003bea:	f00c ff3d 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 8003bee:	4b50      	ldr	r3, [pc, #320]	@ (8003d30 <main+0x59c>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	484f      	ldr	r0, [pc, #316]	@ (8003d34 <main+0x5a0>)
 8003bf6:	f00c ff37 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8003d38 <main+0x5a4>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2103      	movs	r1, #3
 8003c00:	484e      	ldr	r0, [pc, #312]	@ (8003d3c <main+0x5a8>)
 8003c02:	f00c ff31 	bl	8010a68 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8003c06:	4b4e      	ldr	r3, [pc, #312]	@ (8003d40 <main+0x5ac>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	484d      	ldr	r0, [pc, #308]	@ (8003d44 <main+0x5b0>)
 8003c0e:	f00c ff2b 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 8003c12:	4b4d      	ldr	r3, [pc, #308]	@ (8003d48 <main+0x5b4>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	2103      	movs	r1, #3
 8003c18:	484c      	ldr	r0, [pc, #304]	@ (8003d4c <main+0x5b8>)
 8003c1a:	f00c ff25 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d50 <main+0x5bc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	2103      	movs	r1, #3
 8003c24:	484b      	ldr	r0, [pc, #300]	@ (8003d54 <main+0x5c0>)
 8003c26:	f00c ff1f 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d58 <main+0x5c4>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2103      	movs	r1, #3
 8003c30:	484a      	ldr	r0, [pc, #296]	@ (8003d5c <main+0x5c8>)
 8003c32:	f00c ff19 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8003c36:	4b4a      	ldr	r3, [pc, #296]	@ (8003d60 <main+0x5cc>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	4849      	ldr	r0, [pc, #292]	@ (8003d64 <main+0x5d0>)
 8003c3e:	f00c ff13 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 8003c42:	4b49      	ldr	r3, [pc, #292]	@ (8003d68 <main+0x5d4>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	2103      	movs	r1, #3
 8003c48:	4848      	ldr	r0, [pc, #288]	@ (8003d6c <main+0x5d8>)
 8003c4a:	f00c ff0d 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 8003c4e:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <main+0x5dc>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	2103      	movs	r1, #3
 8003c54:	4847      	ldr	r0, [pc, #284]	@ (8003d74 <main+0x5e0>)
 8003c56:	f00c ff07 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 8003c5a:	4b47      	ldr	r3, [pc, #284]	@ (8003d78 <main+0x5e4>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2103      	movs	r1, #3
 8003c60:	4846      	ldr	r0, [pc, #280]	@ (8003d7c <main+0x5e8>)
 8003c62:	f00c ff01 	bl	8010a68 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 8003c66:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <main+0x5ec>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	4845      	ldr	r0, [pc, #276]	@ (8003d84 <main+0x5f0>)
 8003c6e:	f00c fefb 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 8003c72:	4b45      	ldr	r3, [pc, #276]	@ (8003d88 <main+0x5f4>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	2103      	movs	r1, #3
 8003c78:	4844      	ldr	r0, [pc, #272]	@ (8003d8c <main+0x5f8>)
 8003c7a:	f00c fef5 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 8003c7e:	4b44      	ldr	r3, [pc, #272]	@ (8003d90 <main+0x5fc>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	2103      	movs	r1, #3
 8003c84:	4843      	ldr	r0, [pc, #268]	@ (8003d94 <main+0x600>)
 8003c86:	f00c feef 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 8003c8a:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <main+0x604>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2103      	movs	r1, #3
 8003c90:	4842      	ldr	r0, [pc, #264]	@ (8003d9c <main+0x608>)
 8003c92:	f00c fee9 	bl	8010a68 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8003c96:	4b42      	ldr	r3, [pc, #264]	@ (8003da0 <main+0x60c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	4841      	ldr	r0, [pc, #260]	@ (8003da4 <main+0x610>)
 8003c9e:	f00c fee3 	bl	8010a68 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003ca2:	f001 f88b 	bl	8004dbc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca6:	f001 fde5 	bl	8005874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003caa:	f000 f88d 	bl	8003dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cae:	f000 f9f9 	bl	80040a4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8003cb2:	f000 f903 	bl	8003ebc <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8003cb6:	f000 f9a9 	bl	800400c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  HAL_UART_Receive_IT(&huart3, &uart3_rx_byte, 1);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	493a      	ldr	r1, [pc, #232]	@ (8003da8 <main+0x614>)
 8003cbe:	483b      	ldr	r0, [pc, #236]	@ (8003dac <main+0x618>)
 8003cc0:	f007 fb06 	bl	800b2d0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003cc4:	f009 feb4 	bl	800da30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8003cc8:	4a39      	ldr	r2, [pc, #228]	@ (8003db0 <main+0x61c>)
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4839      	ldr	r0, [pc, #228]	@ (8003db4 <main+0x620>)
 8003cce:	f009 fef9 	bl	800dac4 <osThreadNew>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <main+0x624>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 8003cd8:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <main+0x628>)
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4838      	ldr	r0, [pc, #224]	@ (8003dc0 <main+0x62c>)
 8003cde:	f009 fef1 	bl	800dac4 <osThreadNew>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <main+0x630>)
 8003ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f001 fcc1 	bl	8005670 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f001 fcbe 	bl	8005670 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	f001 fcbb 	bl	8005670 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f001 fd2d 	bl	800575c <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8003d02:	f009 feb9 	bl	800da78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <main+0x572>
 8003d0a:	bf00      	nop
 8003d0c:	240014e8 	.word	0x240014e8
 8003d10:	24001504 	.word	0x24001504
 8003d14:	240014fc 	.word	0x240014fc
 8003d18:	24001518 	.word	0x24001518
 8003d1c:	24001510 	.word	0x24001510
 8003d20:	2400152c 	.word	0x2400152c
 8003d24:	24001524 	.word	0x24001524
 8003d28:	24001540 	.word	0x24001540
 8003d2c:	24001538 	.word	0x24001538
 8003d30:	24001554 	.word	0x24001554
 8003d34:	2400154c 	.word	0x2400154c
 8003d38:	24001568 	.word	0x24001568
 8003d3c:	24001560 	.word	0x24001560
 8003d40:	24001588 	.word	0x24001588
 8003d44:	24001580 	.word	0x24001580
 8003d48:	2400159c 	.word	0x2400159c
 8003d4c:	24001594 	.word	0x24001594
 8003d50:	240015b0 	.word	0x240015b0
 8003d54:	240015a8 	.word	0x240015a8
 8003d58:	240015c4 	.word	0x240015c4
 8003d5c:	240015bc 	.word	0x240015bc
 8003d60:	240015d8 	.word	0x240015d8
 8003d64:	240015d0 	.word	0x240015d0
 8003d68:	240015ec 	.word	0x240015ec
 8003d6c:	240015e4 	.word	0x240015e4
 8003d70:	24001600 	.word	0x24001600
 8003d74:	240015f8 	.word	0x240015f8
 8003d78:	24001614 	.word	0x24001614
 8003d7c:	2400160c 	.word	0x2400160c
 8003d80:	24001628 	.word	0x24001628
 8003d84:	24001620 	.word	0x24001620
 8003d88:	2400163c 	.word	0x2400163c
 8003d8c:	24001634 	.word	0x24001634
 8003d90:	24001650 	.word	0x24001650
 8003d94:	24001648 	.word	0x24001648
 8003d98:	24001664 	.word	0x24001664
 8003d9c:	2400165c 	.word	0x2400165c
 8003da0:	24001678 	.word	0x24001678
 8003da4:	24001670 	.word	0x24001670
 8003da8:	24000bc8 	.word	0x24000bc8
 8003dac:	24000328 	.word	0x24000328
 8003db0:	08015004 	.word	0x08015004
 8003db4:	080041f1 	.word	0x080041f1
 8003db8:	240003bc 	.word	0x240003bc
 8003dbc:	08015028 	.word	0x08015028
 8003dc0:	08004985 	.word	0x08004985
 8003dc4:	240003c0 	.word	0x240003c0

08003dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b09c      	sub	sp, #112	@ 0x70
 8003dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd2:	224c      	movs	r2, #76	@ 0x4c
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00e f9b5 	bl	8012146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2220      	movs	r2, #32
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f00e f9af 	bl	8012146 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003de8:	2002      	movs	r0, #2
 8003dea:	f004 f83d 	bl	8007e68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e12:	6193      	str	r3, [r2, #24]
 8003e14:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003e20:	bf00      	nop
 8003e22:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2e:	d1f8      	bne.n	8003e22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e46:	2364      	movs	r3, #100	@ 0x64
 8003e48:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8003e4e:	2310      	movs	r3, #16
 8003e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e52:	2302      	movs	r3, #2
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003e56:	230c      	movs	r3, #12
 8003e58:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 f838 	bl	8007edc <HAL_RCC_OscConfig>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e72:	f000 ffe1 	bl	8004e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e76:	233f      	movs	r3, #63	@ 0x3f
 8003e78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003e82:	2308      	movs	r3, #8
 8003e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003e86:	2340      	movs	r3, #64	@ 0x40
 8003e88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003e8a:	2340      	movs	r3, #64	@ 0x40
 8003e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003e94:	2340      	movs	r3, #64	@ 0x40
 8003e96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 fc77 	bl	8008790 <HAL_RCC_ClockConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003ea8:	f000 ffc6 	bl	8004e38 <Error_Handler>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3770      	adds	r7, #112	@ 0x70
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58000400 	.word	0x58000400
 8003eb8:	58024800 	.word	0x58024800

08003ebc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8004000 <MX_FDCAN1_Init+0x144>)
 8003ec6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003ece:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003ed4:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003eda:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003ee0:	4b46      	ldr	r3, [pc, #280]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003ee6:	4b45      	ldr	r3, [pc, #276]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8003eec:	4b43      	ldr	r3, [pc, #268]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003eee:	2208      	movs	r2, #8
 8003ef0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8003ef2:	4b42      	ldr	r3, [pc, #264]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ef4:	221f      	movs	r2, #31
 8003ef6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003efa:	2208      	movs	r2, #8
 8003efc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003efe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003f04:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f06:	2204      	movs	r2, #4
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003f10:	4b3a      	ldr	r3, [pc, #232]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f12:	2204      	movs	r2, #4
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003f16:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003f1c:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003f22:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003f28:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f2a:	2240      	movs	r2, #64	@ 0x40
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003f2e:	4b33      	ldr	r3, [pc, #204]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f30:	2204      	movs	r2, #4
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003f34:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003f3a:	4b30      	ldr	r3, [pc, #192]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8003f40:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f42:	2204      	movs	r2, #4
 8003f44:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003f46:	4b2d      	ldr	r3, [pc, #180]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f48:	2204      	movs	r2, #4
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f4e:	2210      	movs	r2, #16
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f54:	2210      	movs	r2, #16
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8003f58:	4b28      	ldr	r3, [pc, #160]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003f5e:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003f64:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f66:	2204      	movs	r2, #4
 8003f68:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003f6a:	4824      	ldr	r0, [pc, #144]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f6c:	f002 fc2e 	bl	80067cc <HAL_FDCAN_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003f76:	f000 ff5f 	bl	8004e38 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	481f      	ldr	r0, [pc, #124]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f80:	f003 f806 	bl	8006f90 <HAL_FDCAN_ActivateNotification>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <MX_FDCAN1_Init+0x148>)
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003f90:	f000 ff52 	bl	8004e38 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003f94:	4819      	ldr	r0, [pc, #100]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f96:	f002 fdf7 	bl	8006b88 <HAL_FDCAN_Start>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8003fa0:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <MX_FDCAN1_Init+0x148>)
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003fa6:	f000 ff47 	bl	8004e38 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	e01d      	b.n	8003fec <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003fb0:	4812      	ldr	r0, [pc, #72]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003fb2:	f002 ffdb 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d014      	beq.n	8003fe6 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003fbc:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <MX_FDCAN1_Init+0x14c>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2198      	movs	r1, #152	@ 0x98
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fff4 	bl	8000fbc <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <MX_FDCAN1_Init+0x14c>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2198      	movs	r1, #152	@ 0x98
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	ddde      	ble.n	8003fb0 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	24000288 	.word	0x24000288
 8004000:	4000a000 	.word	0x4000a000
 8004004:	24001684 	.word	0x24001684
 8004008:	24001018 	.word	0x24001018

0800400c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004010:	4b22      	ldr	r3, [pc, #136]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004012:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <MX_USART3_UART_Init+0x94>)
 8004014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004016:	4b21      	ldr	r3, [pc, #132]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004018:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800401c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800401e:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004020:	2200      	movs	r2, #0
 8004022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004026:	2200      	movs	r2, #0
 8004028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800402a:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004032:	220c      	movs	r2, #12
 8004034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004038:	2200      	movs	r2, #0
 800403a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800403c:	4b17      	ldr	r3, [pc, #92]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004042:	4b16      	ldr	r3, [pc, #88]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004044:	2200      	movs	r2, #0
 8004046:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004048:	4b14      	ldr	r3, [pc, #80]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800404a:	2200      	movs	r2, #0
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004050:	2200      	movs	r2, #0
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004054:	4811      	ldr	r0, [pc, #68]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004056:	f007 f85d 	bl	800b114 <HAL_UART_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004060:	f000 feea 	bl	8004e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004064:	2100      	movs	r1, #0
 8004066:	480d      	ldr	r0, [pc, #52]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004068:	f009 fbd3 	bl	800d812 <HAL_UARTEx_SetTxFifoThreshold>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004072:	f000 fee1 	bl	8004e38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004076:	2100      	movs	r1, #0
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800407a:	f009 fc08 	bl	800d88e <HAL_UARTEx_SetRxFifoThreshold>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004084:	f000 fed8 	bl	8004e38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004088:	4804      	ldr	r0, [pc, #16]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800408a:	f009 fb89 	bl	800d7a0 <HAL_UARTEx_DisableFifoMode>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004094:	f000 fed0 	bl	8004e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	24000328 	.word	0x24000328
 80040a0:	40004800 	.word	0x40004800

080040a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ba:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040c0:	4a47      	ldr	r2, [pc, #284]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040ca:	4b45      	ldr	r3, [pc, #276]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040d8:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040de:	4a40      	ldr	r2, [pc, #256]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e8:	4b3d      	ldr	r3, [pc, #244]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040fc:	4a38      	ldr	r2, [pc, #224]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004114:	4b32      	ldr	r3, [pc, #200]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800411a:	4a31      	ldr	r2, [pc, #196]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004124:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	4b2b      	ldr	r3, [pc, #172]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004150:	4b23      	ldr	r3, [pc, #140]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004156:	4a22      	ldr	r2, [pc, #136]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004158:	f043 0310 	orr.w	r3, r3, #16
 800415c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004160:	4b1f      	ldr	r3, [pc, #124]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004174:	481b      	ldr	r0, [pc, #108]	@ (80041e4 <MX_GPIO_Init+0x140>)
 8004176:	f003 fe43 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	2102      	movs	r1, #2
 800417e:	481a      	ldr	r0, [pc, #104]	@ (80041e8 <MX_GPIO_Init+0x144>)
 8004180:	f003 fe3e 	bl	8007e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	4814      	ldr	r0, [pc, #80]	@ (80041ec <MX_GPIO_Init+0x148>)
 800419a:	f003 fc81 	bl	8007aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 800419e:	f244 0301 	movw	r3, #16385	@ 0x4001
 80041a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a4:	2301      	movs	r3, #1
 80041a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	480b      	ldr	r0, [pc, #44]	@ (80041e4 <MX_GPIO_Init+0x140>)
 80041b8:	f003 fc72 	bl	8007aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80041bc:	2302      	movs	r3, #2
 80041be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	4619      	mov	r1, r3
 80041d2:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <MX_GPIO_Init+0x144>)
 80041d4:	f003 fc64 	bl	8007aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80041d8:	bf00      	nop
 80041da:	3730      	adds	r7, #48	@ 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58024400 	.word	0x58024400
 80041e4:	58020400 	.word	0x58020400
 80041e8:	58021000 	.word	0x58021000
 80041ec:	58020800 	.word	0x58020800

080041f0 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	ed2d 8b02 	vpush	{d8}
 80041f6:	b090      	sub	sp, #64	@ 0x40
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 80041fc:	f00a fe6c 	bl	800eed8 <xTaskGetTickCount>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004204:	2301      	movs	r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	4618      	mov	r0, r3
 8004210:	f00a fcc6 	bl	800eba0 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8004214:	4b83      	ldr	r3, [pc, #524]	@ (8004424 <ControlTask+0x234>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a83      	ldr	r2, [pc, #524]	@ (8004428 <ControlTask+0x238>)
 800421a:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	4b80      	ldr	r3, [pc, #512]	@ (8004424 <ControlTask+0x234>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4413      	add	r3, r2
 8004226:	4a7f      	ldr	r2, [pc, #508]	@ (8004424 <ControlTask+0x234>)
 8004228:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 800422a:	2101      	movs	r1, #1
 800422c:	487f      	ldr	r0, [pc, #508]	@ (800442c <ControlTask+0x23c>)
 800422e:	f003 fe00 	bl	8007e32 <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8004232:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <ControlTask+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	f040 80eb 	bne.w	8004412 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 800423c:	4b7c      	ldr	r3, [pc, #496]	@ (8004430 <ControlTask+0x240>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d152      	bne.n	80042ea <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004244:	2300      	movs	r3, #0
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
 8004248:	e048      	b.n	80042dc <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	4877      	ldr	r0, [pc, #476]	@ (800442c <ControlTask+0x23c>)
 800424e:	f003 fdf0 	bl	8007e32 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8004252:	4a77      	ldr	r2, [pc, #476]	@ (8004430 <ControlTask+0x240>)
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	2198      	movs	r1, #152	@ 0x98
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	338c      	adds	r3, #140	@ 0x8c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004266:	4873      	ldr	r0, [pc, #460]	@ (8004434 <ControlTask+0x244>)
 8004268:	f002 fe80 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004272:	4a6f      	ldr	r2, [pc, #444]	@ (8004430 <ControlTask+0x240>)
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	2198      	movs	r1, #152	@ 0x98
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3308      	adds	r3, #8
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	496a      	ldr	r1, [pc, #424]	@ (8004430 <ControlTask+0x240>)
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	2098      	movs	r0, #152	@ 0x98
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	440b      	add	r3, r1
 8004290:	338c      	adds	r3, #140	@ 0x8c
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	eeb0 0a67 	vmov.f32	s0, s15
 800429a:	4610      	mov	r0, r2
 800429c:	f7fc ff0a 	bl	80010b4 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80042a0:	4864      	ldr	r0, [pc, #400]	@ (8004434 <ControlTask+0x244>)
 80042a2:	f002 fe63 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 80042ac:	4a60      	ldr	r2, [pc, #384]	@ (8004430 <ControlTask+0x240>)
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	2198      	movs	r1, #152	@ 0x98
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3308      	adds	r3, #8
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fe7c 	bl	8000fbc <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 80042c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004430 <ControlTask+0x240>)
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	2198      	movs	r1, #152	@ 0x98
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	330c      	adds	r3, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d8:	3301      	adds	r3, #1
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042de:	2b02      	cmp	r3, #2
 80042e0:	ddb3      	ble.n	800424a <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <ControlTask+0x240>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e78e      	b.n	8004208 <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042ea:	2300      	movs	r3, #0
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ee:	e00e      	b.n	800430e <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	2298      	movs	r2, #152	@ 0x98
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	3308      	adds	r3, #8
 80042fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <ControlTask+0x240>)
 80042fc:	4413      	add	r3, r2
 80042fe:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8004438 <ControlTask+0x248>
 8004302:	4618      	mov	r0, r3
 8004304:	f7fc fffa 	bl	80012fc <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	3301      	adds	r3, #1
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2b02      	cmp	r3, #2
 8004312:	dded      	ble.n	80042f0 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8004314:	4846      	ldr	r0, [pc, #280]	@ (8004430 <ControlTask+0x240>)
 8004316:	f7fe fc5d 	bl	8002bd4 <robot_state_update>
				// 2. 로봇의 task space PID값 설정
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 800431a:	4b48      	ldr	r3, [pc, #288]	@ (800443c <ControlTask+0x24c>)
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <ControlTask+0x250>)
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4b48      	ldr	r3, [pc, #288]	@ (8004444 <ControlTask+0x254>)
 8004324:	4a48      	ldr	r2, [pc, #288]	@ (8004448 <ControlTask+0x258>)
 8004326:	4949      	ldr	r1, [pc, #292]	@ (800444c <ControlTask+0x25c>)
 8004328:	4841      	ldr	r0, [pc, #260]	@ (8004430 <ControlTask+0x240>)
 800432a:	f7fe fe4b 	bl	8002fc4 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 800432e:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <ControlTask+0x260>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	ed93 8a00 	vldr	s16, [r3]
 8004336:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8004454 <ControlTask+0x264>
 800433a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800433e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004346:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <ControlTask+0x234>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8004458 <ControlTask+0x268>
 800435a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800435e:	eeb0 0a47 	vmov.f32	s0, s14
 8004362:	f010 fb9d 	bl	8014aa0 <sinf>
 8004366:	eef0 7a40 	vmov.f32	s15, s0
 800436a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800445c <ControlTask+0x26c>
 800436e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004372:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <ControlTask+0x270>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	ee78 7a27 	vadd.f32	s15, s16, s15
 800437a:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 800437e:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <ControlTask+0x270>)
 8004380:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004384:	482a      	ldr	r0, [pc, #168]	@ (8004430 <ControlTask+0x240>)
 8004386:	f7fe fe73 	bl	8003070 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	e03c      	b.n	800440a <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004392:	2298      	movs	r2, #152	@ 0x98
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	3308      	adds	r3, #8
 800439a:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <ControlTask+0x240>)
 800439c:	1899      	adds	r1, r3, r2
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <ControlTask+0x240>)
 80043a0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80043a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <ControlTask+0x240>)
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	3374      	adds	r3, #116	@ 0x74
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	edd3 7a00 	vldr	s15, [r3]
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	eeb0 0a67 	vmov.f32	s0, s15
 80043c4:	4608      	mov	r0, r1
 80043c6:	f7fd f83d 	bl	8001444 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80043ca:	481a      	ldr	r0, [pc, #104]	@ (8004434 <ControlTask+0x244>)
 80043cc:	f002 fdce 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <ControlTask+0x214>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <ControlTask+0x240>)
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	2198      	movs	r1, #152	@ 0x98
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	3308      	adds	r3, #8
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	4911      	ldr	r1, [pc, #68]	@ (8004430 <ControlTask+0x240>)
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2098      	movs	r0, #152	@ 0x98
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	440b      	add	r3, r1
 80043f4:	338c      	adds	r3, #140	@ 0x8c
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eeb0 0a67 	vmov.f32	s0, s15
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fc fe58 	bl	80010b4 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	3301      	adds	r3, #1
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	2b02      	cmp	r3, #2
 800440e:	ddbf      	ble.n	8004390 <ControlTask+0x1a0>
 8004410:	e6fa      	b.n	8004208 <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <ControlTask+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f47f aef6 	bne.w	8004208 <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 800441c:	2300      	movs	r3, #0
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004420:	e1ed      	b.n	80047fe <ControlTask+0x60e>
 8004422:	bf00      	nop
 8004424:	24000fd0 	.word	0x24000fd0
 8004428:	24000fd4 	.word	0x24000fd4
 800442c:	58020400 	.word	0x58020400
 8004430:	24001018 	.word	0x24001018
 8004434:	24000288 	.word	0x24000288
 8004438:	428c0000 	.word	0x428c0000
 800443c:	24000048 	.word	0x24000048
 8004440:	2400100c 	.word	0x2400100c
 8004444:	24000030 	.word	0x24000030
 8004448:	2400003c 	.word	0x2400003c
 800444c:	24000024 	.word	0x24000024
 8004450:	24000ffc 	.word	0x24000ffc
 8004454:	40490fd8 	.word	0x40490fd8
 8004458:	447a0000 	.word	0x447a0000
 800445c:	3e4ccccd 	.word	0x3e4ccccd
 8004460:	24001004 	.word	0x24001004
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004464:	2180      	movs	r1, #128	@ 0x80
 8004466:	48bf      	ldr	r0, [pc, #764]	@ (8004764 <ControlTask+0x574>)
 8004468:	f003 fce3 	bl	8007e32 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 800446c:	4bbe      	ldr	r3, [pc, #760]	@ (8004768 <ControlTask+0x578>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8004472:	4bbe      	ldr	r3, [pc, #760]	@ (800476c <ControlTask+0x57c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004478:	48bd      	ldr	r0, [pc, #756]	@ (8004770 <ControlTask+0x580>)
 800447a:	f002 fd77 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8004484:	4abb      	ldr	r2, [pc, #748]	@ (8004774 <ControlTask+0x584>)
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2198      	movs	r1, #152	@ 0x98
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3308      	adds	r3, #8
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fcfc 	bl	8000e94 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 800449c:	bf00      	nop
 800449e:	4ab5      	ldr	r2, [pc, #724]	@ (8004774 <ControlTask+0x584>)
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	2198      	movs	r1, #152	@ 0x98
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3310      	adds	r3, #16
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f107 010c 	add.w	r1, r7, #12
 80044b2:	2200      	movs	r2, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f009 ff65 	bl	800e384 <xQueueReceive>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d0ee      	beq.n	800449e <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80044c0:	48ab      	ldr	r0, [pc, #684]	@ (8004770 <ControlTask+0x580>)
 80044c2:	f002 fd53 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d014      	beq.n	80044f6 <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 80044cc:	4aa9      	ldr	r2, [pc, #676]	@ (8004774 <ControlTask+0x584>)
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	2198      	movs	r1, #152	@ 0x98
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3308      	adds	r3, #8
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc fd22 	bl	8000f28 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 80044e4:	4aa3      	ldr	r2, [pc, #652]	@ (8004774 <ControlTask+0x584>)
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2198      	movs	r1, #152	@ 0x98
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	330c      	adds	r3, #12
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 80044f6:	4a9f      	ldr	r2, [pc, #636]	@ (8004774 <ControlTask+0x584>)
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	2198      	movs	r1, #152	@ 0x98
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	338c      	adds	r3, #140	@ 0x8c
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 800450a:	4a9a      	ldr	r2, [pc, #616]	@ (8004774 <ControlTask+0x584>)
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	2198      	movs	r1, #152	@ 0x98
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3390      	adds	r3, #144	@ 0x90
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 800451e:	4a95      	ldr	r2, [pc, #596]	@ (8004774 <ControlTask+0x584>)
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	3301      	adds	r3, #1
 8004524:	2198      	movs	r1, #152	@ 0x98
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004534:	4a8f      	ldr	r2, [pc, #572]	@ (8004774 <ControlTask+0x584>)
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	2198      	movs	r1, #152	@ 0x98
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	332c      	adds	r3, #44	@ 0x2c
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004548:	4a8a      	ldr	r2, [pc, #552]	@ (8004774 <ControlTask+0x584>)
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	2198      	movs	r1, #152	@ 0x98
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	332c      	adds	r3, #44	@ 0x2c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4986      	ldr	r1, [pc, #536]	@ (8004774 <ControlTask+0x584>)
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	2098      	movs	r0, #152	@ 0x98
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	440b      	add	r3, r1
 8004564:	3330      	adds	r3, #48	@ 0x30
 8004566:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004568:	4a82      	ldr	r2, [pc, #520]	@ (8004774 <ControlTask+0x584>)
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	2198      	movs	r1, #152	@ 0x98
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3334      	adds	r3, #52	@ 0x34
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 800457c:	4a7d      	ldr	r2, [pc, #500]	@ (8004774 <ControlTask+0x584>)
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	2198      	movs	r1, #152	@ 0x98
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3334      	adds	r3, #52	@ 0x34
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4979      	ldr	r1, [pc, #484]	@ (8004774 <ControlTask+0x584>)
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	2098      	movs	r0, #152	@ 0x98
 8004592:	fb00 f303 	mul.w	r3, r0, r3
 8004596:	440b      	add	r3, r1
 8004598:	3338      	adds	r3, #56	@ 0x38
 800459a:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 800459c:	4a76      	ldr	r2, [pc, #472]	@ (8004778 <ControlTask+0x588>)
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4973      	ldr	r1, [pc, #460]	@ (8004774 <ControlTask+0x584>)
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	2098      	movs	r0, #152	@ 0x98
 80045ac:	fb00 f303 	mul.w	r3, r0, r3
 80045b0:	440b      	add	r3, r1
 80045b2:	3324      	adds	r3, #36	@ 0x24
 80045b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 80045b6:	4a71      	ldr	r2, [pc, #452]	@ (800477c <ControlTask+0x58c>)
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	496c      	ldr	r1, [pc, #432]	@ (8004774 <ControlTask+0x584>)
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	2098      	movs	r0, #152	@ 0x98
 80045c6:	fb00 f303 	mul.w	r3, r0, r3
 80045ca:	440b      	add	r3, r1
 80045cc:	3328      	adds	r3, #40	@ 0x28
 80045ce:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 80045d0:	4a68      	ldr	r2, [pc, #416]	@ (8004774 <ControlTask+0x584>)
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	2198      	movs	r1, #152	@ 0x98
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	3324      	adds	r3, #36	@ 0x24
 80045de:	ed93 7a00 	vldr	s14, [r3]
 80045e2:	4a64      	ldr	r2, [pc, #400]	@ (8004774 <ControlTask+0x584>)
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	2198      	movs	r1, #152	@ 0x98
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	332c      	adds	r3, #44	@ 0x2c
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004774 <ControlTask+0x584>)
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	2198      	movs	r1, #152	@ 0x98
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3344      	adds	r3, #68	@ 0x44
 8004606:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 800460a:	4a5a      	ldr	r2, [pc, #360]	@ (8004774 <ControlTask+0x584>)
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	2198      	movs	r1, #152	@ 0x98
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3344      	adds	r3, #68	@ 0x44
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4956      	ldr	r1, [pc, #344]	@ (8004774 <ControlTask+0x584>)
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	2098      	movs	r0, #152	@ 0x98
 8004620:	fb00 f303 	mul.w	r3, r0, r3
 8004624:	440b      	add	r3, r1
 8004626:	3348      	adds	r3, #72	@ 0x48
 8004628:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 800462a:	4a52      	ldr	r2, [pc, #328]	@ (8004774 <ControlTask+0x584>)
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	2198      	movs	r1, #152	@ 0x98
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	334c      	adds	r3, #76	@ 0x4c
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 800463e:	4a4d      	ldr	r2, [pc, #308]	@ (8004774 <ControlTask+0x584>)
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2198      	movs	r1, #152	@ 0x98
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3350      	adds	r3, #80	@ 0x50
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 8004652:	4a48      	ldr	r2, [pc, #288]	@ (8004774 <ControlTask+0x584>)
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	2198      	movs	r1, #152	@ 0x98
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3350      	adds	r3, #80	@ 0x50
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4944      	ldr	r1, [pc, #272]	@ (8004774 <ControlTask+0x584>)
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2098      	movs	r0, #152	@ 0x98
 8004668:	fb00 f303 	mul.w	r3, r0, r3
 800466c:	440b      	add	r3, r1
 800466e:	3354      	adds	r3, #84	@ 0x54
 8004670:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004672:	4a40      	ldr	r2, [pc, #256]	@ (8004774 <ControlTask+0x584>)
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2198      	movs	r1, #152	@ 0x98
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3358      	adds	r3, #88	@ 0x58
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 8004686:	4a3b      	ldr	r2, [pc, #236]	@ (8004774 <ControlTask+0x584>)
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	2198      	movs	r1, #152	@ 0x98
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3358      	adds	r3, #88	@ 0x58
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4937      	ldr	r1, [pc, #220]	@ (8004774 <ControlTask+0x584>)
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	2098      	movs	r0, #152	@ 0x98
 800469c:	fb00 f303 	mul.w	r3, r0, r3
 80046a0:	440b      	add	r3, r1
 80046a2:	335c      	adds	r3, #92	@ 0x5c
 80046a4:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 80046a6:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <ControlTask+0x584>)
 80046a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046aa:	2198      	movs	r1, #152	@ 0x98
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004774 <ControlTask+0x584>)
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	2198      	movs	r1, #152	@ 0x98
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3334      	adds	r3, #52	@ 0x34
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <ControlTask+0x584>)
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	2198      	movs	r1, #152	@ 0x98
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3360      	adds	r3, #96	@ 0x60
 80046dc:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 80046e0:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <ControlTask+0x584>)
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	2198      	movs	r1, #152	@ 0x98
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3360      	adds	r3, #96	@ 0x60
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4920      	ldr	r1, [pc, #128]	@ (8004774 <ControlTask+0x584>)
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	2098      	movs	r0, #152	@ 0x98
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	440b      	add	r3, r1
 80046fc:	3364      	adds	r3, #100	@ 0x64
 80046fe:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8004700:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <ControlTask+0x584>)
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	2198      	movs	r1, #152	@ 0x98
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3368      	adds	r3, #104	@ 0x68
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <ControlTask+0x584>)
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2198      	movs	r1, #152	@ 0x98
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	336c      	adds	r3, #108	@ 0x6c
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 8004728:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <ControlTask+0x584>)
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	2198      	movs	r1, #152	@ 0x98
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	336c      	adds	r3, #108	@ 0x6c
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	490e      	ldr	r1, [pc, #56]	@ (8004774 <ControlTask+0x584>)
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	2098      	movs	r0, #152	@ 0x98
 800473e:	fb00 f303 	mul.w	r3, r0, r3
 8004742:	440b      	add	r3, r1
 8004744:	3370      	adds	r3, #112	@ 0x70
 8004746:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8004748:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <ControlTask+0x584>)
 800474a:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <ControlTask+0x584>)
 800475c:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004760:	e00e      	b.n	8004780 <ControlTask+0x590>
 8004762:	bf00      	nop
 8004764:	58020400 	.word	0x58020400
 8004768:	24000fd0 	.word	0x24000fd0
 800476c:	24000fd4 	.word	0x24000fd4
 8004770:	24000288 	.word	0x24000288
 8004774:	24001018 	.word	0x24001018
 8004778:	24000fdc 	.word	0x24000fdc
 800477c:	24000fe8 	.word	0x24000fe8
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 800478c:	4b7b      	ldr	r3, [pc, #492]	@ (800497c <ControlTask+0x78c>)
 800478e:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 800479e:	4b77      	ldr	r3, [pc, #476]	@ (800497c <ControlTask+0x78c>)
 80047a0:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 80047b0:	4b72      	ldr	r3, [pc, #456]	@ (800497c <ControlTask+0x78c>)
 80047b2:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 80047c2:	4b6e      	ldr	r3, [pc, #440]	@ (800497c <ControlTask+0x78c>)
 80047c4:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80047d4:	4b69      	ldr	r3, [pc, #420]	@ (800497c <ControlTask+0x78c>)
 80047d6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80047e6:	4b65      	ldr	r3, [pc, #404]	@ (800497c <ControlTask+0x78c>)
 80047e8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	3301      	adds	r3, #1
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	f77f ae2f 	ble.w	8004464 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
 800480a:	e060      	b.n	80048ce <ControlTask+0x6de>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 800480c:	4b5c      	ldr	r3, [pc, #368]	@ (8004980 <ControlTask+0x790>)
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	4b59      	ldr	r3, [pc, #356]	@ (800497c <ControlTask+0x78c>)
 8004818:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 8004826:	4b55      	ldr	r3, [pc, #340]	@ (800497c <ControlTask+0x78c>)
 8004828:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8004838:	4b50      	ldr	r3, [pc, #320]	@ (800497c <ControlTask+0x78c>)
 800483a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 800484a:	4b4c      	ldr	r3, [pc, #304]	@ (800497c <ControlTask+0x78c>)
 800484c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 800485c:	4b47      	ldr	r3, [pc, #284]	@ (800497c <ControlTask+0x78c>)
 800485e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 800486e:	4b43      	ldr	r3, [pc, #268]	@ (800497c <ControlTask+0x78c>)
 8004870:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004880:	4b3e      	ldr	r3, [pc, #248]	@ (800497c <ControlTask+0x78c>)
 8004882:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004892:	4b3a      	ldr	r3, [pc, #232]	@ (800497c <ControlTask+0x78c>)
 8004894:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 80048a4:	4b35      	ldr	r3, [pc, #212]	@ (800497c <ControlTask+0x78c>)
 80048a6:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 80048b6:	4b31      	ldr	r3, [pc, #196]	@ (800497c <ControlTask+0x78c>)
 80048b8:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	dd9b      	ble.n	800480c <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	e00b      	b.n	80048f2 <ControlTask+0x702>
 80048da:	4b28      	ldr	r3, [pc, #160]	@ (800497c <ControlTask+0x78c>)
 80048dc:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	3301      	adds	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	ddf0      	ble.n	80048da <ControlTask+0x6ea>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <ControlTask+0x78c>)
 80048fa:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80048fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004902:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 8004904:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <ControlTask+0x78c>)
 8004906:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 800490a:	3310      	adds	r3, #16
 800490c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004910:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 8004912:	4b1a      	ldr	r3, [pc, #104]	@ (800497c <ControlTask+0x78c>)
 8004914:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004918:	3320      	adds	r3, #32
 800491a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800491e:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e00b      	b.n	800493e <ControlTask+0x74e>
 8004926:	4b15      	ldr	r3, [pc, #84]	@ (800497c <ControlTask+0x78c>)
 8004928:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b08      	cmp	r3, #8
 8004942:	ddf0      	ble.n	8004926 <ControlTask+0x736>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004944:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <ControlTask+0x78c>)
 8004946:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800494a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800494e:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004950:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <ControlTask+0x78c>)
 8004952:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004956:	3310      	adds	r3, #16
 8004958:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800495c:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <ControlTask+0x78c>)
 8004960:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004964:	3320      	adds	r3, #32
 8004966:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800496a:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 800496c:	4803      	ldr	r0, [pc, #12]	@ (800497c <ControlTask+0x78c>)
 800496e:	f7fe f931 	bl	8002bd4 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004972:	4b02      	ldr	r3, [pc, #8]	@ (800497c <ControlTask+0x78c>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004978:	e446      	b.n	8004208 <ControlTask+0x18>
 800497a:	bf00      	nop
 800497c:	24001018 	.word	0x24001018
 8004980:	24001004 	.word	0x24001004

08004984 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	ed2d 8b10 	vpush	{d8-d15}
 800498a:	b0c7      	sub	sp, #284	@ 0x11c
 800498c:	af34      	add	r7, sp, #208	@ 0xd0
 800498e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8004990:	f00a faa2 	bl	800eed8 <xTaskGetTickCount>
 8004994:	4603      	mov	r3, r0
 8004996:	643b      	str	r3, [r7, #64]	@ 0x40

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004998:	2301      	movs	r3, #1
 800499a:	647b      	str	r3, [r7, #68]	@ 0x44

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 800499c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80049a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00a f8fc 	bl	800eba0 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 80049a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049aa:	005a      	lsls	r2, r3, #1
 80049ac:	4b99      	ldr	r3, [pc, #612]	@ (8004c14 <DataLoggingTask+0x290>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	4a98      	ldr	r2, [pc, #608]	@ (8004c14 <DataLoggingTask+0x290>)
 80049b4:	6013      	str	r3, [r2, #0]

			// 5) 여기서 PC로부터 들어온 명령을 처리
			uart3_poll_and_process_lines();
 80049b6:	f7fe fe9b 	bl	80036f0 <uart3_poll_and_process_lines>

			// 6) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 80049ba:	4b97      	ldr	r3, [pc, #604]	@ (8004c18 <DataLoggingTask+0x294>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	f040 8134 	bne.w	8004c2c <DataLoggingTask+0x2a8>
			{
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 80049c4:	4b95      	ldr	r3, [pc, #596]	@ (8004c1c <DataLoggingTask+0x298>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049d0:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8004c20 <DataLoggingTask+0x29c>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80049d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049dc:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
						(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 80049e0:	4b8e      	ldr	r3, [pc, #568]	@ (8004c1c <DataLoggingTask+0x298>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004c24 <DataLoggingTask+0x2a0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f2:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8004c20 <DataLoggingTask+0x29c>
 80049f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80049fa:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 80049fe:	4b86      	ldr	r3, [pc, #536]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a04:	4a84      	ldr	r2, [pc, #528]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a06:	6892      	ldr	r2, [r2, #8]
 8004a08:	4983      	ldr	r1, [pc, #524]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a0a:	68c9      	ldr	r1, [r1, #12]
						strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 8004a0c:	4882      	ldr	r0, [pc, #520]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a0e:	edd0 7a23 	vldr	s15, [r0, #140]	@ 0x8c
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a12:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8004a16:	4880      	ldr	r0, [pc, #512]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a18:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
 8004a1c:	4c7e      	ldr	r4, [pc, #504]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a1e:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
						strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 8004a22:	4d7d      	ldr	r5, [pc, #500]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a24:	edd5 7a49 	vldr	s15, [r5, #292]	@ 0x124
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a28:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8004a2c:	4d7a      	ldr	r5, [pc, #488]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a2e:	f8d5 5138 	ldr.w	r5, [r5, #312]	@ 0x138
 8004a32:	4e79      	ldr	r6, [pc, #484]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a34:	f8d6 613c 	ldr.w	r6, [r6, #316]	@ 0x13c
						strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8004a38:	4b77      	ldr	r3, [pc, #476]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a3a:	edd3 7a6f 	vldr	s15, [r3, #444]	@ 0x1bc
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a3e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a42:	4b75      	ldr	r3, [pc, #468]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a44:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004a48:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a4c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a50:	4b71      	ldr	r3, [pc, #452]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a52:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004a56:	f103 0c04 	add.w	ip, r3, #4
 8004a5a:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a5e:	eeb7 cae7 	vcvt.f64.f32	d12, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a62:	4b6d      	ldr	r3, [pc, #436]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a64:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004a68:	f103 0c08 	add.w	ip, r3, #8
 8004a6c:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a70:	eeb7 dae7 	vcvt.f64.f32	d13, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a74:	4b68      	ldr	r3, [pc, #416]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a76:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004a7a:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a7e:	eeb7 eae7 	vcvt.f64.f32	d14, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a82:	4b65      	ldr	r3, [pc, #404]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a84:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004a88:	f103 0c04 	add.w	ip, r3, #4
 8004a8c:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004a90:	eeb7 fae7 	vcvt.f64.f32	d15, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a94:	4b60      	ldr	r3, [pc, #384]	@ (8004c18 <DataLoggingTask+0x294>)
 8004a96:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004a9a:	f103 0c08 	add.w	ip, r3, #8
 8004a9e:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004aa2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004aa6:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8004c18 <DataLoggingTask+0x294>)
 8004aac:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004ab4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004ab8:	ed87 5b08 	vstr	d5, [r7, #32]
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004abc:	4b56      	ldr	r3, [pc, #344]	@ (8004c18 <DataLoggingTask+0x294>)
 8004abe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8004ac2:	f103 0c04 	add.w	ip, r3, #4
 8004ac6:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004aca:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8004ace:	ed87 4b06 	vstr	d4, [r7, #24]
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004ad2:	4b51      	ldr	r3, [pc, #324]	@ (8004c18 <DataLoggingTask+0x294>)
 8004ad4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8004ad8:	f103 0c08 	add.w	ip, r3, #8
 8004adc:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004ae0:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 8004ae4:	ed87 3b04 	vstr	d3, [r7, #16]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <DataLoggingTask+0x294>)
 8004aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aee:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004af2:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8004af6:	ed87 2b02 	vstr	d2, [r7, #8]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <DataLoggingTask+0x294>)
 8004afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b00:	f103 0c04 	add.w	ip, r3, #4
 8004b04:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b08:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 8004b0c:	ed87 1b00 	vstr	d1, [r7]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 8004b10:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b16:	f103 0c08 	add.w	ip, r3, #8
 8004b1a:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b1e:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 8004b22:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004b28:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b2c:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 8004b30:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004b36:	f103 0c04 	add.w	ip, r3, #4
 8004b3a:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b3e:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 8004b42:	4b35      	ldr	r3, [pc, #212]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004b48:	f103 0c08 	add.w	ip, r3, #8
 8004b4c:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b50:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 8004b54:	4b30      	ldr	r3, [pc, #192]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b56:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004b5a:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b5e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 8004b62:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b64:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004b68:	f103 0c04 	add.w	ip, r3, #4
 8004b6c:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b70:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 8004b74:	4b28      	ldr	r3, [pc, #160]	@ (8004c18 <DataLoggingTask+0x294>)
 8004b76:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004b7a:	f103 0c08 	add.w	ip, r3, #8
 8004b7e:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b86:	ed8d 7b32 	vstr	d7, [sp, #200]	@ 0xc8
 8004b8a:	ed8d 6b30 	vstr	d6, [sp, #192]	@ 0xc0
 8004b8e:	ed8d 5b2e 	vstr	d5, [sp, #184]	@ 0xb8
 8004b92:	ed8d 4b2c 	vstr	d4, [sp, #176]	@ 0xb0
 8004b96:	ed8d 3b2a 	vstr	d3, [sp, #168]	@ 0xa8
 8004b9a:	ed8d 2b28 	vstr	d2, [sp, #160]	@ 0xa0
 8004b9e:	ed8d 1b26 	vstr	d1, [sp, #152]	@ 0x98
 8004ba2:	ed97 1b00 	vldr	d1, [r7]
 8004ba6:	ed8d 1b24 	vstr	d1, [sp, #144]	@ 0x90
 8004baa:	ed97 2b02 	vldr	d2, [r7, #8]
 8004bae:	ed8d 2b22 	vstr	d2, [sp, #136]	@ 0x88
 8004bb2:	ed97 3b04 	vldr	d3, [r7, #16]
 8004bb6:	ed8d 3b20 	vstr	d3, [sp, #128]	@ 0x80
 8004bba:	ed97 4b06 	vldr	d4, [r7, #24]
 8004bbe:	ed8d 4b1e 	vstr	d4, [sp, #120]	@ 0x78
 8004bc2:	ed97 5b08 	vldr	d5, [r7, #32]
 8004bc6:	ed8d 5b1c 	vstr	d5, [sp, #112]	@ 0x70
 8004bca:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8004bce:	ed8d 6b1a 	vstr	d6, [sp, #104]	@ 0x68
 8004bd2:	ed8d fb18 	vstr	d15, [sp, #96]	@ 0x60
 8004bd6:	ed8d eb16 	vstr	d14, [sp, #88]	@ 0x58
 8004bda:	ed8d db14 	vstr	d13, [sp, #80]	@ 0x50
 8004bde:	ed8d cb12 	vstr	d12, [sp, #72]	@ 0x48
 8004be2:	ed8d bb10 	vstr	d11, [sp, #64]	@ 0x40
 8004be6:	ed8d ab0e 	vstr	d10, [sp, #56]	@ 0x38
 8004bea:	960d      	str	r6, [sp, #52]	@ 0x34
 8004bec:	950c      	str	r5, [sp, #48]	@ 0x30
 8004bee:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8004bf2:	9409      	str	r4, [sp, #36]	@ 0x24
 8004bf4:	9008      	str	r0, [sp, #32]
 8004bf6:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004bfa:	9104      	str	r1, [sp, #16]
 8004bfc:	9203      	str	r2, [sp, #12]
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	9302      	str	r3, [sp, #8]
 8004c02:	ed8d 0b00 	vstr	d0, [sp]
 8004c06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c0a:	4807      	ldr	r0, [pc, #28]	@ (8004c28 <DataLoggingTask+0x2a4>)
 8004c0c:	f00d fa2c 	bl	8012068 <iprintf>
 8004c10:	e6c4      	b.n	800499c <DataLoggingTask+0x18>
 8004c12:	bf00      	nop
 8004c14:	24000fd8 	.word	0x24000fd8
 8004c18:	24001018 	.word	0x24001018
 8004c1c:	24000fd0 	.word	0x24000fd0
 8004c20:	447a0000 	.word	0x447a0000
 8004c24:	24000fd4 	.word	0x24000fd4
 8004c28:	08014dd8 	.word	0x08014dd8
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
				(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8004da8 <DataLoggingTask+0x424>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c38:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004dac <DataLoggingTask+0x428>
 8004c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004c40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 8004c44:	4b58      	ldr	r3, [pc, #352]	@ (8004da8 <DataLoggingTask+0x424>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b59      	ldr	r3, [pc, #356]	@ (8004db0 <DataLoggingTask+0x42c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c56:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8004dac <DataLoggingTask+0x428>
 8004c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004c5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c62:	4b54      	ldr	r3, [pc, #336]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c68:	6898      	ldr	r0, [r3, #8]
 8004c6a:	4b52      	ldr	r3, [pc, #328]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c6c:	68dc      	ldr	r4, [r3, #12]
 8004c6e:	4b51      	ldr	r3, [pc, #324]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c70:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 8004c74:	4b4f      	ldr	r3, [pc, #316]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c76:	f8d3 60a4 	ldr.w	r6, [r3, #164]	@ 0xa4
 8004c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c7c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8004c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c82:	4b4c      	ldr	r3, [pc, #304]	@ (8004db4 <DataLoggingTask+0x430>)
 8004c84:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8004c88:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9cd 2332 	strd	r2, r3, [sp, #200]	@ 0xc8
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	e9cd 232e 	strd	r2, r3, [sp, #184]	@ 0xb8
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9cd 2328 	strd	r2, r3, [sp, #160]	@ 0xa0
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9cd 2326 	strd	r2, r3, [sp, #152]	@ 0x98
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9cd 2322 	strd	r2, r3, [sp, #136]	@ 0x88
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8004d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d70:	920d      	str	r2, [sp, #52]	@ 0x34
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8004d82:	9609      	str	r6, [sp, #36]	@ 0x24
 8004d84:	9508      	str	r5, [sp, #32]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d92:	9404      	str	r4, [sp, #16]
 8004d94:	9003      	str	r0, [sp, #12]
 8004d96:	9102      	str	r1, [sp, #8]
 8004d98:	ed8d 7b00 	vstr	d7, [sp]
 8004d9c:	ec53 2b15 	vmov	r2, r3, d5
 8004da0:	4805      	ldr	r0, [pc, #20]	@ (8004db8 <DataLoggingTask+0x434>)
 8004da2:	f00d f961 	bl	8012068 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004da6:	e5f9      	b.n	800499c <DataLoggingTask+0x18>
 8004da8:	24000fd0 	.word	0x24000fd0
 8004dac:	447a0000 	.word	0x447a0000
 8004db0:	24000fd4 	.word	0x24000fd4
 8004db4:	24001018 	.word	0x24001018
 8004db8:	08014dd8 	.word	0x08014dd8

08004dbc <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004dce:	f000 febd 	bl	8005b4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004dde:	231f      	movs	r3, #31
 8004de0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004de2:	2387      	movs	r3, #135	@ 0x87
 8004de4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004dea:	2300      	movs	r3, #0
 8004dec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004dee:	2301      	movs	r3, #1
 8004df0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fedb 	bl	8005bbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004e06:	2004      	movs	r0, #4
 8004e08:	f000 feb8 	bl	8005b7c <HAL_MPU_Enable>

}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004e26:	f000 fd61 	bl	80058ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40001400 	.word	0x40001400

08004e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8004e3e:	4b52      	ldr	r3, [pc, #328]	@ (8004f88 <Error_Handler+0x150>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d148      	bne.n	8004ed8 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	e03f      	b.n	8004ecc <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004e4c:	2180      	movs	r1, #128	@ 0x80
 8004e4e:	484f      	ldr	r0, [pc, #316]	@ (8004f8c <Error_Handler+0x154>)
 8004e50:	f002 ffef 	bl	8007e32 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8004e54:	4a4c      	ldr	r2, [pc, #304]	@ (8004f88 <Error_Handler+0x150>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2198      	movs	r1, #152	@ 0x98
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	338c      	adds	r3, #140	@ 0x8c
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004e68:	4849      	ldr	r0, [pc, #292]	@ (8004f90 <Error_Handler+0x158>)
 8004e6a:	f002 f87f 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004e74:	4a44      	ldr	r2, [pc, #272]	@ (8004f88 <Error_Handler+0x150>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2198      	movs	r1, #152	@ 0x98
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3308      	adds	r3, #8
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	4940      	ldr	r1, [pc, #256]	@ (8004f88 <Error_Handler+0x150>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2098      	movs	r0, #152	@ 0x98
 8004e8c:	fb00 f303 	mul.w	r3, r0, r3
 8004e90:	440b      	add	r3, r1
 8004e92:	338c      	adds	r3, #140	@ 0x8c
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fc f909 	bl	80010b4 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004ea2:	483b      	ldr	r0, [pc, #236]	@ (8004f90 <Error_Handler+0x158>)
 8004ea4:	f002 f862 	bl	8006f6c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004eae:	4a36      	ldr	r2, [pc, #216]	@ (8004f88 <Error_Handler+0x150>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2198      	movs	r1, #152	@ 0x98
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	3308      	adds	r3, #8
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fc f87b 	bl	8000fbc <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	ddbc      	ble.n	8004e4c <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f88 <Error_Handler+0x150>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8004ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <Error_Handler+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d82f      	bhi.n	8004f42 <Error_Handler+0x10a>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <Error_Handler+0xb0>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004efd 	.word	0x08004efd
 8004eec:	08004f0b 	.word	0x08004f0b
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f35 	.word	0x08004f35
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <Error_Handler+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	4825      	ldr	r0, [pc, #148]	@ (8004f98 <Error_Handler+0x160>)
 8004f04:	f00d f8b0 	bl	8012068 <iprintf>
 8004f08:	e01e      	b.n	8004f48 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 8004f0a:	4b22      	ldr	r3, [pc, #136]	@ (8004f94 <Error_Handler+0x15c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4822      	ldr	r0, [pc, #136]	@ (8004f9c <Error_Handler+0x164>)
 8004f12:	f00d f8a9 	bl	8012068 <iprintf>
 8004f16:	e017      	b.n	8004f48 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <Error_Handler+0x15c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4820      	ldr	r0, [pc, #128]	@ (8004fa0 <Error_Handler+0x168>)
 8004f20:	f00d f8a2 	bl	8012068 <iprintf>
 8004f24:	e010      	b.n	8004f48 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <Error_Handler+0x15c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	481d      	ldr	r0, [pc, #116]	@ (8004fa4 <Error_Handler+0x16c>)
 8004f2e:	f00d f89b 	bl	8012068 <iprintf>
 8004f32:	e009      	b.n	8004f48 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8004f34:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <Error_Handler+0x15c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	481b      	ldr	r0, [pc, #108]	@ (8004fa8 <Error_Handler+0x170>)
 8004f3c:	f00d f894 	bl	8012068 <iprintf>
 8004f40:	e002      	b.n	8004f48 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8004f42:	481a      	ldr	r0, [pc, #104]	@ (8004fac <Error_Handler+0x174>)
 8004f44:	f00d f890 	bl	8012068 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8004f48:	2300      	movs	r3, #0
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	e012      	b.n	8004f74 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8004f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f52:	480e      	ldr	r0, [pc, #56]	@ (8004f8c <Error_Handler+0x154>)
 8004f54:	f002 ff6d 	bl	8007e32 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8004f58:	20c8      	movs	r0, #200	@ 0xc8
 8004f5a:	f000 fce7 	bl	800592c <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8004f5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f62:	480a      	ldr	r0, [pc, #40]	@ (8004f8c <Error_Handler+0x154>)
 8004f64:	f002 ff65 	bl	8007e32 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8004f68:	20c8      	movs	r0, #200	@ 0xc8
 8004f6a:	f000 fcdf 	bl	800592c <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <Error_Handler+0x15c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	dbe7      	blt.n	8004f4e <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8004f7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f82:	f000 fcd3 	bl	800592c <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004f86:	e7df      	b.n	8004f48 <Error_Handler+0x110>
 8004f88:	24001018 	.word	0x24001018
 8004f8c:	58020400 	.word	0x58020400
 8004f90:	24000288 	.word	0x24000288
 8004f94:	24001684 	.word	0x24001684
 8004f98:	08014ea0 	.word	0x08014ea0
 8004f9c:	08014ec8 	.word	0x08014ec8
 8004fa0:	08014ef0 	.word	0x08014ef0
 8004fa4:	08014f24 	.word	0x08014f24
 8004fa8:	08014f58 	.word	0x08014f58
 8004fac:	08014f8c 	.word	0x08014f8c

08004fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <HAL_MspInit+0x38>)
 8004fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <HAL_MspInit+0x38>)
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004fc6:	4b08      	ldr	r3, [pc, #32]	@ (8004fe8 <HAL_MspInit+0x38>)
 8004fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	607b      	str	r3, [r7, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	f06f 0001 	mvn.w	r0, #1
 8004fdc:	f000 fd8e 	bl	8005afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400

08004fec <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0ba      	sub	sp, #232	@ 0xe8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	60da      	str	r2, [r3, #12]
 8005002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	22c0      	movs	r2, #192	@ 0xc0
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f00d f89a 	bl	8012146 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a37      	ldr	r2, [pc, #220]	@ (80050f4 <HAL_FDCAN_MspInit+0x108>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d166      	bne.n	80050ea <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800501c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8005028:	2301      	movs	r3, #1
 800502a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 800502c:	2364      	movs	r3, #100	@ 0x64
 800502e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8005030:	2302      	movs	r3, #2
 8005032:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8005034:	2314      	movs	r3, #20
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005038:	2302      	movs	r3, #2
 800503a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800503c:	23c0      	movs	r3, #192	@ 0xc0
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8005040:	2300      	movs	r3, #0
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8005048:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800504c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	4618      	mov	r0, r3
 8005056:	f003 ff69 	bl	8008f2c <HAL_RCCEx_PeriphCLKConfig>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8005060:	f7ff feea 	bl	8004e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005064:	4b24      	ldr	r3, [pc, #144]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 8005066:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800506a:	4a23      	ldr	r2, [pc, #140]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005070:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 8005076:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005082:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 8005084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005088:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 800508a:	f043 0308 	orr.w	r3, r3, #8
 800508e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005092:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_FDCAN_MspInit+0x10c>)
 8005094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050a0:	2303      	movs	r3, #3
 80050a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050b2:	2302      	movs	r3, #2
 80050b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80050b8:	2309      	movs	r3, #9
 80050ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80050c2:	4619      	mov	r1, r3
 80050c4:	480d      	ldr	r0, [pc, #52]	@ (80050fc <HAL_FDCAN_MspInit+0x110>)
 80050c6:	f002 fceb 	bl	8007aa0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2105      	movs	r1, #5
 80050ce:	2013      	movs	r0, #19
 80050d0:	f000 fd14 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80050d4:	2013      	movs	r0, #19
 80050d6:	f000 fd2b 	bl	8005b30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80050da:	2200      	movs	r2, #0
 80050dc:	2105      	movs	r1, #5
 80050de:	2015      	movs	r0, #21
 80050e0:	f000 fd0c 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80050e4:	2015      	movs	r0, #21
 80050e6:	f000 fd23 	bl	8005b30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80050ea:	bf00      	nop
 80050ec:	37e8      	adds	r7, #232	@ 0xe8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	4000a000 	.word	0x4000a000
 80050f8:	58024400 	.word	0x58024400
 80050fc:	58020c00 	.word	0x58020c00

08005100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b0ba      	sub	sp, #232	@ 0xe8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005118:	f107 0310 	add.w	r3, r7, #16
 800511c:	22c0      	movs	r2, #192	@ 0xc0
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f00d f810 	bl	8012146 <memset>
  if(huart->Instance==USART3)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <HAL_UART_MspInit+0xd8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d14e      	bne.n	80051ce <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005130:	f04f 0202 	mov.w	r2, #2
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4618      	mov	r0, r3
 8005148:	f003 fef0 	bl	8008f2c <HAL_RCCEx_PeriphCLKConfig>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005152:	f7ff fe71 	bl	8004e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005156:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 8005158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800515c:	4a1f      	ldr	r2, [pc, #124]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 800515e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005162:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005166:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 8005168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800516c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 8005176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800517a:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005184:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <HAL_UART_MspInit+0xdc>)
 8005186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005192:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519a:	2302      	movs	r3, #2
 800519c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051ac:	2307      	movs	r3, #7
 80051ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4809      	ldr	r0, [pc, #36]	@ (80051e0 <HAL_UART_MspInit+0xe0>)
 80051ba:	f002 fc71 	bl	8007aa0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80051be:	2200      	movs	r2, #0
 80051c0:	2105      	movs	r1, #5
 80051c2:	2027      	movs	r0, #39	@ 0x27
 80051c4:	f000 fc9a 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80051c8:	2027      	movs	r0, #39	@ 0x27
 80051ca:	f000 fcb1 	bl	8005b30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80051ce:	bf00      	nop
 80051d0:	37e8      	adds	r7, #232	@ 0xe8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40004800 	.word	0x40004800
 80051dc:	58024400 	.word	0x58024400
 80051e0:	58020c00 	.word	0x58020c00

080051e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b090      	sub	sp, #64	@ 0x40
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b0f      	cmp	r3, #15
 80051f0:	d827      	bhi.n	8005242 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	2037      	movs	r0, #55	@ 0x37
 80051f8:	f000 fc80 	bl	8005afc <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80051fc:	2037      	movs	r0, #55	@ 0x37
 80051fe:	f000 fc97 	bl	8005b30 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8005202:	4a29      	ldr	r2, [pc, #164]	@ (80052a8 <HAL_InitTick+0xc4>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005208:	4b28      	ldr	r3, [pc, #160]	@ (80052ac <HAL_InitTick+0xc8>)
 800520a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800520e:	4a27      	ldr	r2, [pc, #156]	@ (80052ac <HAL_InitTick+0xc8>)
 8005210:	f043 0320 	orr.w	r3, r3, #32
 8005214:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005218:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <HAL_InitTick+0xc8>)
 800521a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005226:	f107 0210 	add.w	r2, r7, #16
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f003 fe39 	bl	8008ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_InitTick+0x6a>
 8005240:	e001      	b.n	8005246 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02b      	b.n	800529e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005246:	f003 fe03 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800524a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800524c:	e004      	b.n	8005258 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800524e:	f003 fdff 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 8005252:	4603      	mov	r3, r0
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525a:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <HAL_InitTick+0xcc>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	3b01      	subs	r3, #1
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005266:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <HAL_InitTick+0xd0>)
 8005268:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <HAL_InitTick+0xd4>)
 800526a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800526c:	4b11      	ldr	r3, [pc, #68]	@ (80052b4 <HAL_InitTick+0xd0>)
 800526e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005272:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005274:	4a0f      	ldr	r2, [pc, #60]	@ (80052b4 <HAL_InitTick+0xd0>)
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800527a:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_InitTick+0xd0>)
 800527c:	2200      	movs	r2, #0
 800527e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005280:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <HAL_InitTick+0xd0>)
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005286:	480b      	ldr	r0, [pc, #44]	@ (80052b4 <HAL_InitTick+0xd0>)
 8005288:	f005 fc7c 	bl	800ab84 <HAL_TIM_Base_Init>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005292:	4808      	ldr	r0, [pc, #32]	@ (80052b4 <HAL_InitTick+0xd0>)
 8005294:	f005 fcd8 	bl	800ac48 <HAL_TIM_Base_Start_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	e000      	b.n	800529e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3740      	adds	r7, #64	@ 0x40
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	24000074 	.word	0x24000074
 80052ac:	58024400 	.word	0x58024400
 80052b0:	431bde83 	.word	0x431bde83
 80052b4:	24001688 	.word	0x24001688
 80052b8:	40001400 	.word	0x40001400

080052bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052c0:	bf00      	nop
 80052c2:	e7fd      	b.n	80052c0 <NMI_Handler+0x4>

080052c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <HardFault_Handler+0x4>

080052cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <MemManage_Handler+0x4>

080052d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <BusFault_Handler+0x4>

080052dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <UsageFault_Handler+0x4>

080052e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80052f8:	4802      	ldr	r0, [pc, #8]	@ (8005304 <FDCAN1_IT0_IRQHandler+0x10>)
 80052fa:	f001 fec3 	bl	8007084 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	24000288 	.word	0x24000288

08005308 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800530c:	4802      	ldr	r0, [pc, #8]	@ (8005318 <FDCAN1_IT1_IRQHandler+0x10>)
 800530e:	f001 feb9 	bl	8007084 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	24000288 	.word	0x24000288

0800531c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005320:	4802      	ldr	r0, [pc, #8]	@ (800532c <USART3_IRQHandler+0x10>)
 8005322:	f006 f821 	bl	800b368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	24000328 	.word	0x24000328

08005330 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8005334:	2000      	movs	r0, #0
 8005336:	f000 fa83 	bl	8005840 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005344:	4802      	ldr	r0, [pc, #8]	@ (8005350 <TIM7_IRQHandler+0x10>)
 8005346:	f005 fcf7 	bl	800ad38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	24001688 	.word	0x24001688

08005354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return 1;
 8005358:	2301      	movs	r3, #1
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <_kill>:

int _kill(int pid, int sig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800536e:	f00c fffb 	bl	8012368 <__errno>
 8005372:	4603      	mov	r3, r0
 8005374:	2216      	movs	r2, #22
 8005376:	601a      	str	r2, [r3, #0]
  return -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_exit>:

void _exit (int status)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800538c:	f04f 31ff 	mov.w	r1, #4294967295
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ffe7 	bl	8005364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <_exit+0x12>

0800539a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e00a      	b.n	80053c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053ac:	f3af 8000 	nop.w
 80053b0:	4601      	mov	r1, r0
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	60ba      	str	r2, [r7, #8]
 80053b8:	b2ca      	uxtb	r2, r1
 80053ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	3301      	adds	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	dbf0      	blt.n	80053ac <_read+0x12>
  }

  return len;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053fc:	605a      	str	r2, [r3, #4]
  return 0;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <_isatty>:

int _isatty(int file)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005414:	2301      	movs	r3, #1
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005444:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <_sbrk+0x5c>)
 8005446:	4b15      	ldr	r3, [pc, #84]	@ (800549c <_sbrk+0x60>)
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005450:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <_sbrk+0x64>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005458:	4b11      	ldr	r3, [pc, #68]	@ (80054a0 <_sbrk+0x64>)
 800545a:	4a12      	ldr	r2, [pc, #72]	@ (80054a4 <_sbrk+0x68>)
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800545e:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <_sbrk+0x64>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d207      	bcs.n	800547c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800546c:	f00c ff7c 	bl	8012368 <__errno>
 8005470:	4603      	mov	r3, r0
 8005472:	220c      	movs	r2, #12
 8005474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	e009      	b.n	8005490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800547c:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <_sbrk+0x64>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005482:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <_sbrk+0x64>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	4a05      	ldr	r2, [pc, #20]	@ (80054a0 <_sbrk+0x64>)
 800548c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	24080000 	.word	0x24080000
 800549c:	00000400 	.word	0x00000400
 80054a0:	240016d4 	.word	0x240016d4
 80054a4:	24006218 	.word	0x24006218

080054a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054ac:	4b43      	ldr	r3, [pc, #268]	@ (80055bc <SystemInit+0x114>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	4a42      	ldr	r2, [pc, #264]	@ (80055bc <SystemInit+0x114>)
 80054b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80054bc:	4b40      	ldr	r3, [pc, #256]	@ (80055c0 <SystemInit+0x118>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d807      	bhi.n	80054d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <SystemInit+0x118>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f023 030f 	bic.w	r3, r3, #15
 80054d0:	4a3b      	ldr	r2, [pc, #236]	@ (80055c0 <SystemInit+0x118>)
 80054d2:	f043 0307 	orr.w	r3, r3, #7
 80054d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80054d8:	4b3a      	ldr	r3, [pc, #232]	@ (80055c4 <SystemInit+0x11c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a39      	ldr	r2, [pc, #228]	@ (80055c4 <SystemInit+0x11c>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054e4:	4b37      	ldr	r3, [pc, #220]	@ (80055c4 <SystemInit+0x11c>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80054ea:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <SystemInit+0x11c>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4935      	ldr	r1, [pc, #212]	@ (80055c4 <SystemInit+0x11c>)
 80054f0:	4b35      	ldr	r3, [pc, #212]	@ (80055c8 <SystemInit+0x120>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80054f6:	4b32      	ldr	r3, [pc, #200]	@ (80055c0 <SystemInit+0x118>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005502:	4b2f      	ldr	r3, [pc, #188]	@ (80055c0 <SystemInit+0x118>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 030f 	bic.w	r3, r3, #15
 800550a:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <SystemInit+0x118>)
 800550c:	f043 0307 	orr.w	r3, r3, #7
 8005510:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005512:	4b2c      	ldr	r3, [pc, #176]	@ (80055c4 <SystemInit+0x11c>)
 8005514:	2200      	movs	r2, #0
 8005516:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005518:	4b2a      	ldr	r3, [pc, #168]	@ (80055c4 <SystemInit+0x11c>)
 800551a:	2200      	movs	r2, #0
 800551c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800551e:	4b29      	ldr	r3, [pc, #164]	@ (80055c4 <SystemInit+0x11c>)
 8005520:	2200      	movs	r2, #0
 8005522:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005524:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <SystemInit+0x11c>)
 8005526:	4a29      	ldr	r2, [pc, #164]	@ (80055cc <SystemInit+0x124>)
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800552a:	4b26      	ldr	r3, [pc, #152]	@ (80055c4 <SystemInit+0x11c>)
 800552c:	4a28      	ldr	r2, [pc, #160]	@ (80055d0 <SystemInit+0x128>)
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005530:	4b24      	ldr	r3, [pc, #144]	@ (80055c4 <SystemInit+0x11c>)
 8005532:	4a28      	ldr	r2, [pc, #160]	@ (80055d4 <SystemInit+0x12c>)
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005536:	4b23      	ldr	r3, [pc, #140]	@ (80055c4 <SystemInit+0x11c>)
 8005538:	2200      	movs	r2, #0
 800553a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800553c:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <SystemInit+0x11c>)
 800553e:	4a25      	ldr	r2, [pc, #148]	@ (80055d4 <SystemInit+0x12c>)
 8005540:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005542:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <SystemInit+0x11c>)
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005548:	4b1e      	ldr	r3, [pc, #120]	@ (80055c4 <SystemInit+0x11c>)
 800554a:	4a22      	ldr	r2, [pc, #136]	@ (80055d4 <SystemInit+0x12c>)
 800554c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800554e:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <SystemInit+0x11c>)
 8005550:	2200      	movs	r2, #0
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005554:	4b1b      	ldr	r3, [pc, #108]	@ (80055c4 <SystemInit+0x11c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1a      	ldr	r2, [pc, #104]	@ (80055c4 <SystemInit+0x11c>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800555e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005560:	4b18      	ldr	r3, [pc, #96]	@ (80055c4 <SystemInit+0x11c>)
 8005562:	2200      	movs	r2, #0
 8005564:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005566:	4b1c      	ldr	r3, [pc, #112]	@ (80055d8 <SystemInit+0x130>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <SystemInit+0x134>)
 800556c:	4013      	ands	r3, r2
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005572:	d202      	bcs.n	800557a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005574:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <SystemInit+0x138>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800557a:	4b12      	ldr	r3, [pc, #72]	@ (80055c4 <SystemInit+0x11c>)
 800557c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d113      	bne.n	80055b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005588:	4b0e      	ldr	r3, [pc, #56]	@ (80055c4 <SystemInit+0x11c>)
 800558a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800558e:	4a0d      	ldr	r2, [pc, #52]	@ (80055c4 <SystemInit+0x11c>)
 8005590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005594:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005598:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <SystemInit+0x13c>)
 800559a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800559e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80055a0:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <SystemInit+0x11c>)
 80055a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80055a6:	4a07      	ldr	r2, [pc, #28]	@ (80055c4 <SystemInit+0x11c>)
 80055a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000ed00 	.word	0xe000ed00
 80055c0:	52002000 	.word	0x52002000
 80055c4:	58024400 	.word	0x58024400
 80055c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80055cc:	02020200 	.word	0x02020200
 80055d0:	01ff0000 	.word	0x01ff0000
 80055d4:	01010280 	.word	0x01010280
 80055d8:	5c001000 	.word	0x5c001000
 80055dc:	ffff0000 	.word	0xffff0000
 80055e0:	51008108 	.word	0x51008108
 80055e4:	52004000 	.word	0x52004000

080055e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <ExitRun0Mode+0x2c>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <ExitRun0Mode+0x2c>)
 80055f2:	f043 0302 	orr.w	r3, r3, #2
 80055f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80055f8:	bf00      	nop
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <ExitRun0Mode+0x2c>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f9      	beq.n	80055fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	58024800 	.word	0x58024800

08005618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005618:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005654 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800561c:	f7ff ffe4 	bl	80055e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005620:	f7ff ff42 	bl	80054a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005624:	480c      	ldr	r0, [pc, #48]	@ (8005658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005626:	490d      	ldr	r1, [pc, #52]	@ (800565c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005628:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800562a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800562c:	e002      	b.n	8005634 <LoopCopyDataInit>

0800562e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800562e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005632:	3304      	adds	r3, #4

08005634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005638:	d3f9      	bcc.n	800562e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800563a:	4a0a      	ldr	r2, [pc, #40]	@ (8005664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800563c:	4c0a      	ldr	r4, [pc, #40]	@ (8005668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800563e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005640:	e001      	b.n	8005646 <LoopFillZerobss>

08005642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005644:	3204      	adds	r2, #4

08005646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005648:	d3fb      	bcc.n	8005642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800564a:	f00c fe93 	bl	8012374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800564e:	f7fe f8a1 	bl	8003794 <main>
  bx  lr
 8005652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005654:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005658:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800565c:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8005660:	08015620 	.word	0x08015620
  ldr r2, =_sbss
 8005664:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005668:	24006218 	.word	0x24006218

0800566c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800566c:	e7fe      	b.n	800566c <ADC3_IRQHandler>
	...

08005670 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08c      	sub	sp, #48	@ 0x30
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800567a:	2300      	movs	r3, #0
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <BSP_LED_Init+0x28>
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d006      	beq.n	8005698 <BSP_LED_Init+0x28>
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d003      	beq.n	8005698 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005690:	f06f 0301 	mvn.w	r3, #1
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005696:	e055      	b.n	8005744 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10f      	bne.n	80056be <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800569e:	4b2c      	ldr	r3, [pc, #176]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056a6:	f043 0302 	orr.w	r3, r3, #2
 80056aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056ae:	4b28      	ldr	r3, [pc, #160]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	e021      	b.n	8005702 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d10f      	bne.n	80056e4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80056c4:	4b22      	ldr	r3, [pc, #136]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ca:	4a21      	ldr	r2, [pc, #132]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	e00e      	b.n	8005702 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80056e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ea:	4a19      	ldr	r2, [pc, #100]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056f4:	4b16      	ldr	r3, [pc, #88]	@ (8005750 <BSP_LED_Init+0xe0>)
 80056f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4a13      	ldr	r2, [pc, #76]	@ (8005754 <BSP_LED_Init+0xe4>)
 8005706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800570c:	2301      	movs	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005714:	2303      	movs	r3, #3
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	4a0f      	ldr	r2, [pc, #60]	@ (8005758 <BSP_LED_Init+0xe8>)
 800571c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005720:	f107 0218 	add.w	r2, r7, #24
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f002 f9ba 	bl	8007aa0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	4a0a      	ldr	r2, [pc, #40]	@ (8005758 <BSP_LED_Init+0xe8>)
 8005730:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <BSP_LED_Init+0xe4>)
 8005738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	f002 fb5e 	bl	8007e00 <HAL_GPIO_WritePin>
  }

  return ret;
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005746:	4618      	mov	r0, r3
 8005748:	3730      	adds	r7, #48	@ 0x30
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	58024400 	.word	0x58024400
 8005754:	0801505c 	.word	0x0801505c
 8005758:	2400005c 	.word	0x2400005c

0800575c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	460a      	mov	r2, r1
 8005766:	71fb      	strb	r3, [r7, #7]
 8005768:	4613      	mov	r3, r2
 800576a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800576c:	4b2e      	ldr	r3, [pc, #184]	@ (8005828 <BSP_PB_Init+0xcc>)
 800576e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005772:	4a2d      	ldr	r2, [pc, #180]	@ (8005828 <BSP_PB_Init+0xcc>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <BSP_PB_Init+0xcc>)
 800577e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800578a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800578e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005790:	2302      	movs	r3, #2
 8005792:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005794:	2302      	movs	r3, #2
 8005796:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005798:	79bb      	ldrb	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	4a21      	ldr	r2, [pc, #132]	@ (800582c <BSP_PB_Init+0xd0>)
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	f107 020c 	add.w	r2, r7, #12
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 f975 	bl	8007aa0 <HAL_GPIO_Init>
 80057b6:	e031      	b.n	800581c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80057b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80057bc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <BSP_PB_Init+0xd0>)
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	f107 020c 	add.w	r2, r7, #12
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f002 f967 	bl	8007aa0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <BSP_PB_Init+0xd4>)
 80057d8:	441a      	add	r2, r3
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	4915      	ldr	r1, [pc, #84]	@ (8005834 <BSP_PB_Init+0xd8>)
 80057de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 ffac 	bl	8006742 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4a10      	ldr	r2, [pc, #64]	@ (8005830 <BSP_PB_Init+0xd4>)
 80057f0:	1898      	adds	r0, r3, r2
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4a10      	ldr	r2, [pc, #64]	@ (8005838 <BSP_PB_Init+0xdc>)
 80057f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fa:	461a      	mov	r2, r3
 80057fc:	2100      	movs	r1, #0
 80057fe:	f000 ff81 	bl	8006704 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005802:	2028      	movs	r0, #40	@ 0x28
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	4a0d      	ldr	r2, [pc, #52]	@ (800583c <BSP_PB_Init+0xe0>)
 8005808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580c:	2200      	movs	r2, #0
 800580e:	4619      	mov	r1, r3
 8005810:	f000 f974 	bl	8005afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005814:	2328      	movs	r3, #40	@ 0x28
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f98a 	bl	8005b30 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	24000068 	.word	0x24000068
 8005830:	240016d8 	.word	0x240016d8
 8005834:	08015064 	.word	0x08015064
 8005838:	2400006c 	.word	0x2400006c
 800583c:	24000070 	.word	0x24000070

08005840 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4a04      	ldr	r2, [pc, #16]	@ (8005860 <BSP_PB_IRQHandler+0x20>)
 8005850:	4413      	add	r3, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 ff8a 	bl	800676c <HAL_EXTI_IRQHandler>
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	240016d8 	.word	0x240016d8

08005864 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005868:	2000      	movs	r0, #0
 800586a:	f7fb fa59 	bl	8000d20 <BSP_PB_Callback>
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800587a:	2003      	movs	r0, #3
 800587c:	f000 f933 	bl	8005ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005880:	f003 f93c 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <HAL_Init+0x68>)
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	0a1b      	lsrs	r3, r3, #8
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	4913      	ldr	r1, [pc, #76]	@ (80058e0 <HAL_Init+0x6c>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800589e:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <HAL_Init+0x68>)
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	4a0e      	ldr	r2, [pc, #56]	@ (80058e0 <HAL_Init+0x6c>)
 80058a8:	5cd3      	ldrb	r3, [r2, r3]
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
 80058b4:	4a0b      	ldr	r2, [pc, #44]	@ (80058e4 <HAL_Init+0x70>)
 80058b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058b8:	4a0b      	ldr	r2, [pc, #44]	@ (80058e8 <HAL_Init+0x74>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058be:	200f      	movs	r0, #15
 80058c0:	f7ff fc90 	bl	80051e4 <HAL_InitTick>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e002      	b.n	80058d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80058ce:	f7ff fb6f 	bl	8004fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58024400 	.word	0x58024400
 80058e0:	0801504c 	.word	0x0801504c
 80058e4:	24000058 	.word	0x24000058
 80058e8:	24000054 	.word	0x24000054

080058ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_IncTick+0x20>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <HAL_IncTick+0x24>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4413      	add	r3, r2
 80058fc:	4a04      	ldr	r2, [pc, #16]	@ (8005910 <HAL_IncTick+0x24>)
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	24000078 	.word	0x24000078
 8005910:	240016e0 	.word	0x240016e0

08005914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return uwTick;
 8005918:	4b03      	ldr	r3, [pc, #12]	@ (8005928 <HAL_GetTick+0x14>)
 800591a:	681b      	ldr	r3, [r3, #0]
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	240016e0 	.word	0x240016e0

0800592c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005934:	f7ff ffee 	bl	8005914 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005944:	d005      	beq.n	8005952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <HAL_Delay+0x44>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005952:	bf00      	nop
 8005954:	f7ff ffde 	bl	8005914 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d8f7      	bhi.n	8005954 <HAL_Delay+0x28>
  {
  }
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	24000078 	.word	0x24000078

08005974 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005978:	4b03      	ldr	r3, [pc, #12]	@ (8005988 <HAL_GetREVID+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	0c1b      	lsrs	r3, r3, #16
}
 800597e:	4618      	mov	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	5c001000 	.word	0x5c001000

0800598c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <__NVIC_SetPriorityGrouping+0x40>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059a8:	4013      	ands	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <__NVIC_SetPriorityGrouping+0x44>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ba:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <__NVIC_SetPriorityGrouping+0x40>)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	60d3      	str	r3, [r2, #12]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000ed00 	.word	0xe000ed00
 80059d0:	05fa0000 	.word	0x05fa0000

080059d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d8:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <__NVIC_GetPriorityGrouping+0x18>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 0307 	and.w	r3, r3, #7
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000ed00 	.word	0xe000ed00

080059f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	db0b      	blt.n	8005a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	f003 021f 	and.w	r2, r3, #31
 8005a08:	4907      	ldr	r1, [pc, #28]	@ (8005a28 <__NVIC_EnableIRQ+0x38>)
 8005a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2001      	movs	r0, #1
 8005a12:	fa00 f202 	lsl.w	r2, r0, r2
 8005a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000e100 	.word	0xe000e100

08005a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	db0a      	blt.n	8005a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	490c      	ldr	r1, [pc, #48]	@ (8005a78 <__NVIC_SetPriority+0x4c>)
 8005a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a4a:	0112      	lsls	r2, r2, #4
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a54:	e00a      	b.n	8005a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4908      	ldr	r1, [pc, #32]	@ (8005a7c <__NVIC_SetPriority+0x50>)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	3b04      	subs	r3, #4
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	440b      	add	r3, r1
 8005a6a:	761a      	strb	r2, [r3, #24]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	e000e100 	.word	0xe000e100
 8005a7c:	e000ed00 	.word	0xe000ed00

08005a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	@ 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f1c3 0307 	rsb	r3, r3, #7
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	bf28      	it	cs
 8005a9e:	2304      	movcs	r3, #4
 8005aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d902      	bls.n	8005ab0 <NVIC_EncodePriority+0x30>
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3b03      	subs	r3, #3
 8005aae:	e000      	b.n	8005ab2 <NVIC_EncodePriority+0x32>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	43d9      	mvns	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad8:	4313      	orrs	r3, r2
         );
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3724      	adds	r7, #36	@ 0x24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ff4c 	bl	800598c <__NVIC_SetPriorityGrouping>
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b0a:	f7ff ff63 	bl	80059d4 <__NVIC_GetPriorityGrouping>
 8005b0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	6978      	ldr	r0, [r7, #20]
 8005b16:	f7ff ffb3 	bl	8005a80 <NVIC_EncodePriority>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff ff82 	bl	8005a2c <__NVIC_SetPriority>
}
 8005b28:	bf00      	nop
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ff56 	bl	80059f0 <__NVIC_EnableIRQ>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005b50:	f3bf 8f5f 	dmb	sy
}
 8005b54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005b56:	4b07      	ldr	r3, [pc, #28]	@ (8005b74 <HAL_MPU_Disable+0x28>)
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	4a06      	ldr	r2, [pc, #24]	@ (8005b74 <HAL_MPU_Disable+0x28>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_MPU_Disable+0x2c>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	605a      	str	r2, [r3, #4]
}
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	e000ed00 	.word	0xe000ed00
 8005b78:	e000ed90 	.word	0xe000ed90

08005b7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005b84:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb4 <HAL_MPU_Enable+0x38>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <HAL_MPU_Enable+0x3c>)
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	4a09      	ldr	r2, [pc, #36]	@ (8005bb8 <HAL_MPU_Enable+0x3c>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005b9a:	f3bf 8f4f 	dsb	sy
}
 8005b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ba0:	f3bf 8f6f 	isb	sy
}
 8005ba4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	e000ed90 	.word	0xe000ed90
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	785a      	ldrb	r2, [r3, #1]
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c38 <HAL_MPU_ConfigRegion+0x7c>)
 8005bca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c38 <HAL_MPU_ConfigRegion+0x7c>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	@ (8005c38 <HAL_MPU_ConfigRegion+0x7c>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005bd8:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <HAL_MPU_ConfigRegion+0x7c>)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	7b1b      	ldrb	r3, [r3, #12]
 8005be4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7adb      	ldrb	r3, [r3, #11]
 8005bea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005bec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7a9b      	ldrb	r3, [r3, #10]
 8005bf2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005bf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7b5b      	ldrb	r3, [r3, #13]
 8005bfa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005bfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7b9b      	ldrb	r3, [r3, #14]
 8005c02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7bdb      	ldrb	r3, [r3, #15]
 8005c0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7a5b      	ldrb	r3, [r3, #9]
 8005c12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7a1b      	ldrb	r3, [r3, #8]
 8005c1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005c1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c24:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005c26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005c28:	6113      	str	r3, [r2, #16]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000ed90 	.word	0xe000ed90

08005c3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005c44:	f7ff fe66 	bl	8005914 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e2dc      	b.n	800620e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d008      	beq.n	8005c72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2280      	movs	r2, #128	@ 0x80
 8005c64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e2cd      	b.n	800620e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a76      	ldr	r2, [pc, #472]	@ (8005e50 <HAL_DMA_Abort+0x214>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d04a      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a74      	ldr	r2, [pc, #464]	@ (8005e54 <HAL_DMA_Abort+0x218>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d045      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a73      	ldr	r2, [pc, #460]	@ (8005e58 <HAL_DMA_Abort+0x21c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d040      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a71      	ldr	r2, [pc, #452]	@ (8005e5c <HAL_DMA_Abort+0x220>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d03b      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a70      	ldr	r2, [pc, #448]	@ (8005e60 <HAL_DMA_Abort+0x224>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d036      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8005e64 <HAL_DMA_Abort+0x228>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d031      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8005e68 <HAL_DMA_Abort+0x22c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d02c      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8005e6c <HAL_DMA_Abort+0x230>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d027      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8005e70 <HAL_DMA_Abort+0x234>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d022      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a68      	ldr	r2, [pc, #416]	@ (8005e74 <HAL_DMA_Abort+0x238>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01d      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a67      	ldr	r2, [pc, #412]	@ (8005e78 <HAL_DMA_Abort+0x23c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d018      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a65      	ldr	r2, [pc, #404]	@ (8005e7c <HAL_DMA_Abort+0x240>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a64      	ldr	r2, [pc, #400]	@ (8005e80 <HAL_DMA_Abort+0x244>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00e      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a62      	ldr	r2, [pc, #392]	@ (8005e84 <HAL_DMA_Abort+0x248>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d009      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a61      	ldr	r2, [pc, #388]	@ (8005e88 <HAL_DMA_Abort+0x24c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d004      	beq.n	8005d12 <HAL_DMA_Abort+0xd6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a5f      	ldr	r2, [pc, #380]	@ (8005e8c <HAL_DMA_Abort+0x250>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d101      	bne.n	8005d16 <HAL_DMA_Abort+0xda>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <HAL_DMA_Abort+0xdc>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 021e 	bic.w	r2, r2, #30
 8005d2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e00a      	b.n	8005d5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 020e 	bic.w	r2, r2, #14
 8005d52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e50 <HAL_DMA_Abort+0x214>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d072      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a3a      	ldr	r2, [pc, #232]	@ (8005e54 <HAL_DMA_Abort+0x218>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d06d      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a39      	ldr	r2, [pc, #228]	@ (8005e58 <HAL_DMA_Abort+0x21c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d068      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a37      	ldr	r2, [pc, #220]	@ (8005e5c <HAL_DMA_Abort+0x220>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d063      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a36      	ldr	r2, [pc, #216]	@ (8005e60 <HAL_DMA_Abort+0x224>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d05e      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a34      	ldr	r2, [pc, #208]	@ (8005e64 <HAL_DMA_Abort+0x228>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d059      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a33      	ldr	r2, [pc, #204]	@ (8005e68 <HAL_DMA_Abort+0x22c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d054      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a31      	ldr	r2, [pc, #196]	@ (8005e6c <HAL_DMA_Abort+0x230>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d04f      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a30      	ldr	r2, [pc, #192]	@ (8005e70 <HAL_DMA_Abort+0x234>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d04a      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <HAL_DMA_Abort+0x238>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d045      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <HAL_DMA_Abort+0x23c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d040      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e7c <HAL_DMA_Abort+0x240>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d03b      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8005e80 <HAL_DMA_Abort+0x244>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d036      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	@ (8005e84 <HAL_DMA_Abort+0x248>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d031      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <HAL_DMA_Abort+0x24c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d02c      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	@ (8005e8c <HAL_DMA_Abort+0x250>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d027      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <HAL_DMA_Abort+0x254>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	@ (8005e94 <HAL_DMA_Abort+0x258>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01d      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	@ (8005e98 <HAL_DMA_Abort+0x25c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e9c <HAL_DMA_Abort+0x260>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea0 <HAL_DMA_Abort+0x264>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea4 <HAL_DMA_Abort+0x268>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <HAL_DMA_Abort+0x26c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_DMA_Abort+0x20e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <HAL_DMA_Abort+0x270>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d132      	bne.n	8005eb0 <HAL_DMA_Abort+0x274>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e031      	b.n	8005eb2 <HAL_DMA_Abort+0x276>
 8005e4e:	bf00      	nop
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
 8005e90:	58025408 	.word	0x58025408
 8005e94:	5802541c 	.word	0x5802541c
 8005e98:	58025430 	.word	0x58025430
 8005e9c:	58025444 	.word	0x58025444
 8005ea0:	58025458 	.word	0x58025458
 8005ea4:	5802546c 	.word	0x5802546c
 8005ea8:	58025480 	.word	0x58025480
 8005eac:	58025494 	.word	0x58025494
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a6d      	ldr	r2, [pc, #436]	@ (8006080 <HAL_DMA_Abort+0x444>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d04a      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8006084 <HAL_DMA_Abort+0x448>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d045      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6a      	ldr	r2, [pc, #424]	@ (8006088 <HAL_DMA_Abort+0x44c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d040      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a68      	ldr	r2, [pc, #416]	@ (800608c <HAL_DMA_Abort+0x450>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d03b      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a67      	ldr	r2, [pc, #412]	@ (8006090 <HAL_DMA_Abort+0x454>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d036      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a65      	ldr	r2, [pc, #404]	@ (8006094 <HAL_DMA_Abort+0x458>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d031      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a64      	ldr	r2, [pc, #400]	@ (8006098 <HAL_DMA_Abort+0x45c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d02c      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a62      	ldr	r2, [pc, #392]	@ (800609c <HAL_DMA_Abort+0x460>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d027      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a61      	ldr	r2, [pc, #388]	@ (80060a0 <HAL_DMA_Abort+0x464>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d022      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5f      	ldr	r2, [pc, #380]	@ (80060a4 <HAL_DMA_Abort+0x468>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01d      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a5e      	ldr	r2, [pc, #376]	@ (80060a8 <HAL_DMA_Abort+0x46c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5c      	ldr	r2, [pc, #368]	@ (80060ac <HAL_DMA_Abort+0x470>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5b      	ldr	r2, [pc, #364]	@ (80060b0 <HAL_DMA_Abort+0x474>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a59      	ldr	r2, [pc, #356]	@ (80060b4 <HAL_DMA_Abort+0x478>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a58      	ldr	r2, [pc, #352]	@ (80060b8 <HAL_DMA_Abort+0x47c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_DMA_Abort+0x32a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a56      	ldr	r2, [pc, #344]	@ (80060bc <HAL_DMA_Abort+0x480>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d108      	bne.n	8005f78 <HAL_DMA_Abort+0x33c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e007      	b.n	8005f88 <HAL_DMA_Abort+0x34c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f88:	e013      	b.n	8005fb2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f8a:	f7ff fcc3 	bl	8005914 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b05      	cmp	r3, #5
 8005f96:	d90c      	bls.n	8005fb2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e12d      	b.n	800620e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8006080 <HAL_DMA_Abort+0x444>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d04a      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <HAL_DMA_Abort+0x448>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d045      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8006088 <HAL_DMA_Abort+0x44c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d040      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800608c <HAL_DMA_Abort+0x450>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d03b      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a29      	ldr	r2, [pc, #164]	@ (8006090 <HAL_DMA_Abort+0x454>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d036      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a27      	ldr	r2, [pc, #156]	@ (8006094 <HAL_DMA_Abort+0x458>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d031      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <HAL_DMA_Abort+0x45c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d02c      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a24      	ldr	r2, [pc, #144]	@ (800609c <HAL_DMA_Abort+0x460>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d027      	beq.n	800605e <HAL_DMA_Abort+0x422>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a23      	ldr	r2, [pc, #140]	@ (80060a0 <HAL_DMA_Abort+0x464>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d022      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a21      	ldr	r2, [pc, #132]	@ (80060a4 <HAL_DMA_Abort+0x468>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01d      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a20      	ldr	r2, [pc, #128]	@ (80060a8 <HAL_DMA_Abort+0x46c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d018      	beq.n	800605e <HAL_DMA_Abort+0x422>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1e      	ldr	r2, [pc, #120]	@ (80060ac <HAL_DMA_Abort+0x470>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1d      	ldr	r2, [pc, #116]	@ (80060b0 <HAL_DMA_Abort+0x474>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <HAL_DMA_Abort+0x478>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_DMA_Abort+0x422>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1a      	ldr	r2, [pc, #104]	@ (80060b8 <HAL_DMA_Abort+0x47c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_DMA_Abort+0x422>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <HAL_DMA_Abort+0x480>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d101      	bne.n	8006062 <HAL_DMA_Abort+0x426>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_DMA_Abort+0x428>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d02b      	beq.n	80060c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	223f      	movs	r2, #63	@ 0x3f
 8006078:	409a      	lsls	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
 800607e:	e02a      	b.n	80060d6 <HAL_DMA_Abort+0x49a>
 8006080:	40020010 	.word	0x40020010
 8006084:	40020028 	.word	0x40020028
 8006088:	40020040 	.word	0x40020040
 800608c:	40020058 	.word	0x40020058
 8006090:	40020070 	.word	0x40020070
 8006094:	40020088 	.word	0x40020088
 8006098:	400200a0 	.word	0x400200a0
 800609c:	400200b8 	.word	0x400200b8
 80060a0:	40020410 	.word	0x40020410
 80060a4:	40020428 	.word	0x40020428
 80060a8:	40020440 	.word	0x40020440
 80060ac:	40020458 	.word	0x40020458
 80060b0:	40020470 	.word	0x40020470
 80060b4:	40020488 	.word	0x40020488
 80060b8:	400204a0 	.word	0x400204a0
 80060bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2201      	movs	r2, #1
 80060d0:	409a      	lsls	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a4f      	ldr	r2, [pc, #316]	@ (8006218 <HAL_DMA_Abort+0x5dc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d072      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a4d      	ldr	r2, [pc, #308]	@ (800621c <HAL_DMA_Abort+0x5e0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d06d      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006220 <HAL_DMA_Abort+0x5e4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d068      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006224 <HAL_DMA_Abort+0x5e8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d063      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a49      	ldr	r2, [pc, #292]	@ (8006228 <HAL_DMA_Abort+0x5ec>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d05e      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a47      	ldr	r2, [pc, #284]	@ (800622c <HAL_DMA_Abort+0x5f0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d059      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a46      	ldr	r2, [pc, #280]	@ (8006230 <HAL_DMA_Abort+0x5f4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d054      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a44      	ldr	r2, [pc, #272]	@ (8006234 <HAL_DMA_Abort+0x5f8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d04f      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a43      	ldr	r2, [pc, #268]	@ (8006238 <HAL_DMA_Abort+0x5fc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d04a      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a41      	ldr	r2, [pc, #260]	@ (800623c <HAL_DMA_Abort+0x600>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d045      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a40      	ldr	r2, [pc, #256]	@ (8006240 <HAL_DMA_Abort+0x604>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d040      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a3e      	ldr	r2, [pc, #248]	@ (8006244 <HAL_DMA_Abort+0x608>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d03b      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a3d      	ldr	r2, [pc, #244]	@ (8006248 <HAL_DMA_Abort+0x60c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d036      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a3b      	ldr	r2, [pc, #236]	@ (800624c <HAL_DMA_Abort+0x610>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d031      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a3a      	ldr	r2, [pc, #232]	@ (8006250 <HAL_DMA_Abort+0x614>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d02c      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a38      	ldr	r2, [pc, #224]	@ (8006254 <HAL_DMA_Abort+0x618>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d027      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a37      	ldr	r2, [pc, #220]	@ (8006258 <HAL_DMA_Abort+0x61c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a35      	ldr	r2, [pc, #212]	@ (800625c <HAL_DMA_Abort+0x620>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a34      	ldr	r2, [pc, #208]	@ (8006260 <HAL_DMA_Abort+0x624>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d018      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a32      	ldr	r2, [pc, #200]	@ (8006264 <HAL_DMA_Abort+0x628>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a31      	ldr	r2, [pc, #196]	@ (8006268 <HAL_DMA_Abort+0x62c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <HAL_DMA_Abort+0x630>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d009      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006270 <HAL_DMA_Abort+0x634>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_DMA_Abort+0x58a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <HAL_DMA_Abort+0x638>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <HAL_DMA_Abort+0x58e>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_DMA_Abort+0x590>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40020010 	.word	0x40020010
 800621c:	40020028 	.word	0x40020028
 8006220:	40020040 	.word	0x40020040
 8006224:	40020058 	.word	0x40020058
 8006228:	40020070 	.word	0x40020070
 800622c:	40020088 	.word	0x40020088
 8006230:	400200a0 	.word	0x400200a0
 8006234:	400200b8 	.word	0x400200b8
 8006238:	40020410 	.word	0x40020410
 800623c:	40020428 	.word	0x40020428
 8006240:	40020440 	.word	0x40020440
 8006244:	40020458 	.word	0x40020458
 8006248:	40020470 	.word	0x40020470
 800624c:	40020488 	.word	0x40020488
 8006250:	400204a0 	.word	0x400204a0
 8006254:	400204b8 	.word	0x400204b8
 8006258:	58025408 	.word	0x58025408
 800625c:	5802541c 	.word	0x5802541c
 8006260:	58025430 	.word	0x58025430
 8006264:	58025444 	.word	0x58025444
 8006268:	58025458 	.word	0x58025458
 800626c:	5802546c 	.word	0x5802546c
 8006270:	58025480 	.word	0x58025480
 8006274:	58025494 	.word	0x58025494

08006278 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e237      	b.n	80066fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d004      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2280      	movs	r2, #128	@ 0x80
 800629a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e22c      	b.n	80066fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5c      	ldr	r2, [pc, #368]	@ (8006418 <HAL_DMA_Abort_IT+0x1a0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d04a      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a5b      	ldr	r2, [pc, #364]	@ (800641c <HAL_DMA_Abort_IT+0x1a4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d045      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a59      	ldr	r2, [pc, #356]	@ (8006420 <HAL_DMA_Abort_IT+0x1a8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d040      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a58      	ldr	r2, [pc, #352]	@ (8006424 <HAL_DMA_Abort_IT+0x1ac>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d03b      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a56      	ldr	r2, [pc, #344]	@ (8006428 <HAL_DMA_Abort_IT+0x1b0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d036      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a55      	ldr	r2, [pc, #340]	@ (800642c <HAL_DMA_Abort_IT+0x1b4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d031      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a53      	ldr	r2, [pc, #332]	@ (8006430 <HAL_DMA_Abort_IT+0x1b8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d02c      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a52      	ldr	r2, [pc, #328]	@ (8006434 <HAL_DMA_Abort_IT+0x1bc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d027      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a50      	ldr	r2, [pc, #320]	@ (8006438 <HAL_DMA_Abort_IT+0x1c0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d022      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4f      	ldr	r2, [pc, #316]	@ (800643c <HAL_DMA_Abort_IT+0x1c4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d01d      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4d      	ldr	r2, [pc, #308]	@ (8006440 <HAL_DMA_Abort_IT+0x1c8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d018      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4c      	ldr	r2, [pc, #304]	@ (8006444 <HAL_DMA_Abort_IT+0x1cc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d013      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a4a      	ldr	r2, [pc, #296]	@ (8006448 <HAL_DMA_Abort_IT+0x1d0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00e      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a49      	ldr	r2, [pc, #292]	@ (800644c <HAL_DMA_Abort_IT+0x1d4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d009      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a47      	ldr	r2, [pc, #284]	@ (8006450 <HAL_DMA_Abort_IT+0x1d8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_DMA_Abort_IT+0xc8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a46      	ldr	r2, [pc, #280]	@ (8006454 <HAL_DMA_Abort_IT+0x1dc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_DMA_Abort_IT+0xcc>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_DMA_Abort_IT+0xce>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8086 	beq.w	8006458 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2204      	movs	r2, #4
 8006350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a2f      	ldr	r2, [pc, #188]	@ (8006418 <HAL_DMA_Abort_IT+0x1a0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d04a      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2e      	ldr	r2, [pc, #184]	@ (800641c <HAL_DMA_Abort_IT+0x1a4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d045      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <HAL_DMA_Abort_IT+0x1a8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d040      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2b      	ldr	r2, [pc, #172]	@ (8006424 <HAL_DMA_Abort_IT+0x1ac>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d03b      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a29      	ldr	r2, [pc, #164]	@ (8006428 <HAL_DMA_Abort_IT+0x1b0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d036      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a28      	ldr	r2, [pc, #160]	@ (800642c <HAL_DMA_Abort_IT+0x1b4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d031      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a26      	ldr	r2, [pc, #152]	@ (8006430 <HAL_DMA_Abort_IT+0x1b8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d02c      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a25      	ldr	r2, [pc, #148]	@ (8006434 <HAL_DMA_Abort_IT+0x1bc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d027      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a23      	ldr	r2, [pc, #140]	@ (8006438 <HAL_DMA_Abort_IT+0x1c0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a22      	ldr	r2, [pc, #136]	@ (800643c <HAL_DMA_Abort_IT+0x1c4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a20      	ldr	r2, [pc, #128]	@ (8006440 <HAL_DMA_Abort_IT+0x1c8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <HAL_DMA_Abort_IT+0x1cc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <HAL_DMA_Abort_IT+0x1d0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <HAL_DMA_Abort_IT+0x1d4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <HAL_DMA_Abort_IT+0x1d8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_DMA_Abort_IT+0x17c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <HAL_DMA_Abort_IT+0x1dc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <HAL_DMA_Abort_IT+0x18e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e178      	b.n	80066f8 <HAL_DMA_Abort_IT+0x480>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0201 	bic.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e16f      	b.n	80066f8 <HAL_DMA_Abort_IT+0x480>
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 020e 	bic.w	r2, r2, #14
 8006466:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a6c      	ldr	r2, [pc, #432]	@ (8006620 <HAL_DMA_Abort_IT+0x3a8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d04a      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a6b      	ldr	r2, [pc, #428]	@ (8006624 <HAL_DMA_Abort_IT+0x3ac>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d045      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a69      	ldr	r2, [pc, #420]	@ (8006628 <HAL_DMA_Abort_IT+0x3b0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d040      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a68      	ldr	r2, [pc, #416]	@ (800662c <HAL_DMA_Abort_IT+0x3b4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d03b      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a66      	ldr	r2, [pc, #408]	@ (8006630 <HAL_DMA_Abort_IT+0x3b8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d036      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a65      	ldr	r2, [pc, #404]	@ (8006634 <HAL_DMA_Abort_IT+0x3bc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d031      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a63      	ldr	r2, [pc, #396]	@ (8006638 <HAL_DMA_Abort_IT+0x3c0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d02c      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a62      	ldr	r2, [pc, #392]	@ (800663c <HAL_DMA_Abort_IT+0x3c4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d027      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a60      	ldr	r2, [pc, #384]	@ (8006640 <HAL_DMA_Abort_IT+0x3c8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d022      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a5f      	ldr	r2, [pc, #380]	@ (8006644 <HAL_DMA_Abort_IT+0x3cc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d01d      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006648 <HAL_DMA_Abort_IT+0x3d0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d018      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a5c      	ldr	r2, [pc, #368]	@ (800664c <HAL_DMA_Abort_IT+0x3d4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006650 <HAL_DMA_Abort_IT+0x3d8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a59      	ldr	r2, [pc, #356]	@ (8006654 <HAL_DMA_Abort_IT+0x3dc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a57      	ldr	r2, [pc, #348]	@ (8006658 <HAL_DMA_Abort_IT+0x3e0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <HAL_DMA_Abort_IT+0x290>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a56      	ldr	r2, [pc, #344]	@ (800665c <HAL_DMA_Abort_IT+0x3e4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d108      	bne.n	800651a <HAL_DMA_Abort_IT+0x2a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e007      	b.n	800652a <HAL_DMA_Abort_IT+0x2b2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3c      	ldr	r2, [pc, #240]	@ (8006620 <HAL_DMA_Abort_IT+0x3a8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d072      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a3a      	ldr	r2, [pc, #232]	@ (8006624 <HAL_DMA_Abort_IT+0x3ac>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d06d      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a39      	ldr	r2, [pc, #228]	@ (8006628 <HAL_DMA_Abort_IT+0x3b0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d068      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a37      	ldr	r2, [pc, #220]	@ (800662c <HAL_DMA_Abort_IT+0x3b4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d063      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a36      	ldr	r2, [pc, #216]	@ (8006630 <HAL_DMA_Abort_IT+0x3b8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d05e      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a34      	ldr	r2, [pc, #208]	@ (8006634 <HAL_DMA_Abort_IT+0x3bc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d059      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a33      	ldr	r2, [pc, #204]	@ (8006638 <HAL_DMA_Abort_IT+0x3c0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d054      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a31      	ldr	r2, [pc, #196]	@ (800663c <HAL_DMA_Abort_IT+0x3c4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04f      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <HAL_DMA_Abort_IT+0x3c8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d04a      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2e      	ldr	r2, [pc, #184]	@ (8006644 <HAL_DMA_Abort_IT+0x3cc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d045      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <HAL_DMA_Abort_IT+0x3d0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d040      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a2b      	ldr	r2, [pc, #172]	@ (800664c <HAL_DMA_Abort_IT+0x3d4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d03b      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006650 <HAL_DMA_Abort_IT+0x3d8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d036      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a28      	ldr	r2, [pc, #160]	@ (8006654 <HAL_DMA_Abort_IT+0x3dc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d031      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <HAL_DMA_Abort_IT+0x3e0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d02c      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a25      	ldr	r2, [pc, #148]	@ (800665c <HAL_DMA_Abort_IT+0x3e4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d027      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a24      	ldr	r2, [pc, #144]	@ (8006660 <HAL_DMA_Abort_IT+0x3e8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d022      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a22      	ldr	r2, [pc, #136]	@ (8006664 <HAL_DMA_Abort_IT+0x3ec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01d      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a21      	ldr	r2, [pc, #132]	@ (8006668 <HAL_DMA_Abort_IT+0x3f0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d018      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <HAL_DMA_Abort_IT+0x3f4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006670 <HAL_DMA_Abort_IT+0x3f8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <HAL_DMA_Abort_IT+0x3fc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1b      	ldr	r2, [pc, #108]	@ (8006678 <HAL_DMA_Abort_IT+0x400>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_DMA_Abort_IT+0x3a2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a19      	ldr	r2, [pc, #100]	@ (800667c <HAL_DMA_Abort_IT+0x404>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d132      	bne.n	8006680 <HAL_DMA_Abort_IT+0x408>
 800661a:	2301      	movs	r3, #1
 800661c:	e031      	b.n	8006682 <HAL_DMA_Abort_IT+0x40a>
 800661e:	bf00      	nop
 8006620:	40020010 	.word	0x40020010
 8006624:	40020028 	.word	0x40020028
 8006628:	40020040 	.word	0x40020040
 800662c:	40020058 	.word	0x40020058
 8006630:	40020070 	.word	0x40020070
 8006634:	40020088 	.word	0x40020088
 8006638:	400200a0 	.word	0x400200a0
 800663c:	400200b8 	.word	0x400200b8
 8006640:	40020410 	.word	0x40020410
 8006644:	40020428 	.word	0x40020428
 8006648:	40020440 	.word	0x40020440
 800664c:	40020458 	.word	0x40020458
 8006650:	40020470 	.word	0x40020470
 8006654:	40020488 	.word	0x40020488
 8006658:	400204a0 	.word	0x400204a0
 800665c:	400204b8 	.word	0x400204b8
 8006660:	58025408 	.word	0x58025408
 8006664:	5802541c 	.word	0x5802541c
 8006668:	58025430 	.word	0x58025430
 800666c:	58025444 	.word	0x58025444
 8006670:	58025458 	.word	0x58025458
 8006674:	5802546c 	.word	0x5802546c
 8006678:	58025480 	.word	0x58025480
 800667c:	58025494 	.word	0x58025494
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d028      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006694:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2201      	movs	r2, #1
 80066a6:	409a      	lsls	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	460b      	mov	r3, r1
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e00a      	b.n	8006736 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d103      	bne.n	800672e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]
      break;
 800672c:	e002      	b.n	8006734 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
      break;
 8006732:	bf00      	nop
  }

  return status;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
}
 8006736:	4618      	mov	r0, r3
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e003      	b.n	800675e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
  }
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2201      	movs	r2, #1
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	011a      	lsls	r2, r3, #4
 8006794:	4b0c      	ldr	r3, [pc, #48]	@ (80067c8 <HAL_EXTI_IRQHandler+0x5c>)
 8006796:	4413      	add	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4013      	ands	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4798      	blx	r3
    }
  }
}
 80067be:	bf00      	nop
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	58000088 	.word	0x58000088

080067cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b098      	sub	sp, #96	@ 0x60
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80067d4:	4a84      	ldr	r2, [pc, #528]	@ (80069e8 <HAL_FDCAN_Init+0x21c>)
 80067d6:	f107 030c 	add.w	r3, r7, #12
 80067da:	4611      	mov	r1, r2
 80067dc:	224c      	movs	r2, #76	@ 0x4c
 80067de:	4618      	mov	r0, r3
 80067e0:	f00b fdef 	bl	80123c2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e1c6      	b.n	8006b7c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7e      	ldr	r2, [pc, #504]	@ (80069ec <HAL_FDCAN_Init+0x220>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d106      	bne.n	8006806 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fe fbe6 	bl	8004fec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0210 	bic.w	r2, r2, #16
 800682e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006830:	f7ff f870 	bl	8005914 <HAL_GetTick>
 8006834:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006836:	e014      	b.n	8006862 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006838:	f7ff f86c 	bl	8005914 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b0a      	cmp	r3, #10
 8006844:	d90d      	bls.n	8006862 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800684c:	f043 0201 	orr.w	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2203      	movs	r2, #3
 800685a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e18c      	b.n	8006b7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d0e3      	beq.n	8006838 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7ff f848 	bl	8005914 <HAL_GetTick>
 8006884:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006886:	e014      	b.n	80068b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006888:	f7ff f844 	bl	8005914 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b0a      	cmp	r3, #10
 8006894:	d90d      	bls.n	80068b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e164      	b.n	8006b7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0e3      	beq.n	8006888 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0202 	orr.w	r2, r2, #2
 80068ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7c1b      	ldrb	r3, [r3, #16]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d108      	bne.n	80068ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068e6:	619a      	str	r2, [r3, #24]
 80068e8:	e007      	b.n	80068fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	7c5b      	ldrb	r3, [r3, #17]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d108      	bne.n	8006914 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006910:	619a      	str	r2, [r3, #24]
 8006912:	e007      	b.n	8006924 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006922:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7c9b      	ldrb	r3, [r3, #18]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d108      	bne.n	800693e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800693a:	619a      	str	r2, [r3, #24]
 800693c:	e007      	b.n	800694e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800694c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006972:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0210 	bic.w	r2, r2, #16
 8006982:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d108      	bne.n	800699e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699a      	ldr	r2, [r3, #24]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0204 	orr.w	r2, r2, #4
 800699a:	619a      	str	r2, [r3, #24]
 800699c:	e030      	b.n	8006a00 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d02c      	beq.n	8006a00 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d020      	beq.n	80069f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0210 	orr.w	r2, r2, #16
 80069cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d114      	bne.n	8006a00 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0220 	orr.w	r2, r2, #32
 80069e4:	619a      	str	r2, [r3, #24]
 80069e6:	e00b      	b.n	8006a00 <HAL_FDCAN_Init+0x234>
 80069e8:	08014fa0 	.word	0x08014fa0
 80069ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0220 	orr.w	r2, r2, #32
 80069fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a10:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a18:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a28:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a2a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a34:	d115      	bne.n	8006a62 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	3b01      	subs	r3, #1
 8006a42:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a44:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a4e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	3b01      	subs	r3, #1
 8006a58:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a5e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a60:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a88:	4413      	add	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d011      	beq.n	8006ab2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006a96:	f023 0107 	bic.w	r1, r3, #7
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	3360      	adds	r3, #96	@ 0x60
 8006aa2:	443b      	add	r3, r7
 8006aa4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d011      	beq.n	8006ade <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ac2:	f023 0107 	bic.w	r1, r3, #7
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	3360      	adds	r3, #96	@ 0x60
 8006ace:	443b      	add	r3, r7
 8006ad0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d012      	beq.n	8006b0c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006aee:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	3360      	adds	r3, #96	@ 0x60
 8006afa:	443b      	add	r3, r7
 8006afc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006b00:	011a      	lsls	r2, r3, #4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d012      	beq.n	8006b3a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b1c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	3360      	adds	r3, #96	@ 0x60
 8006b28:	443b      	add	r3, r7
 8006b2a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006b2e:	021a      	lsls	r2, r3, #8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a11      	ldr	r2, [pc, #68]	@ (8006b84 <HAL_FDCAN_Init+0x3b8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d107      	bne.n	8006b54 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f022 0203 	bic.w	r2, r2, #3
 8006b52:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fd93 	bl	8007698 <FDCAN_CalcultateRamBlockAddresses>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006b78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3760      	adds	r7, #96	@ 0x60
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	4000a000 	.word	0x4000a000

08006b88 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d111      	bne.n	8006bc0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0201 	bic.w	r2, r2, #1
 8006bb2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e008      	b.n	8006bd2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bc6:	f043 0204 	orr.w	r2, r3, #4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d141      	bne.n	8006c7a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006bfe:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e038      	b.n	8006c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e026      	b.n	8006c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006c46:	0c1b      	lsrs	r3, r3, #16
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fea5 	bl	80079a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	fa01 f202 	lsl.w	r2, r1, r2
 8006c66:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e008      	b.n	8006c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c80:	f043 0208 	orr.w	r2, r3, #8
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b08b      	sub	sp, #44	@ 0x2c
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006cac:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006cae:	7efb      	ldrb	r3, [r7, #27]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f040 8149 	bne.w	8006f48 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d14c      	bne.n	8006d56 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cc4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e13c      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e12a      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d14:	d10a      	bne.n	8006d2c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d26:	d101      	bne.n	8006d2c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d48:	69f9      	ldr	r1, [r7, #28]
 8006d4a:	fb01 f303 	mul.w	r3, r1, r3
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d54:	e068      	b.n	8006e28 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b41      	cmp	r3, #65	@ 0x41
 8006d5a:	d14c      	bne.n	8006df6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0ec      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0da      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006db4:	d10a      	bne.n	8006dcc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc6:	d101      	bne.n	8006dcc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dd4:	0a1b      	lsrs	r3, r3, #8
 8006dd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de8:	69f9      	ldr	r1, [r7, #28]
 8006dea:	fb01 f303 	mul.w	r3, r1, r3
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006df4:	e018      	b.n	8006e28 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d309      	bcc.n	8006e14 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e06:	f043 0220 	orr.w	r2, r3, #32
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0a2      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	fb01 f303 	mul.w	r3, r1, r3
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d107      	bne.n	8006e4c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	0c9b      	lsrs	r3, r3, #18
 8006e42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e005      	b.n	8006e58 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	3304      	adds	r3, #4
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	f003 020f 	and.w	r2, r3, #15
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	0e1b      	lsrs	r3, r3, #24
 8006eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	0fda      	lsrs	r2, r3, #31
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	e00a      	b.n	8006ee4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	441a      	add	r2, r3
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	440b      	add	r3, r1
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	623b      	str	r3, [r7, #32]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f68 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8006eea:	5cd3      	ldrb	r3, [r2, r3]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d3ec      	bcc.n	8006ece <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b40      	cmp	r3, #64	@ 0x40
 8006ef8:	d105      	bne.n	8006f06 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8006f04:	e01e      	b.n	8006f44 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b41      	cmp	r3, #65	@ 0x41
 8006f0a:	d105      	bne.n	8006f18 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8006f16:	e015      	b.n	8006f44 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b1f      	cmp	r3, #31
 8006f1c:	d808      	bhi.n	8006f30 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2101      	movs	r1, #1
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	fa01 f202 	lsl.w	r2, r1, r2
 8006f2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8006f2e:	e009      	b.n	8006f44 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 021f 	and.w	r2, r3, #31
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e008      	b.n	8006f5a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f4e:	f043 0208 	orr.w	r2, r3, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	372c      	adds	r7, #44	@ 0x2c
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	08015068 	.word	0x08015068

08006f6c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006fa2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d002      	beq.n	8006fb0 <HAL_FDCAN_ActivateNotification+0x20>
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d155      	bne.n	800705c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0201 	orr.w	r2, r2, #1
 8006fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006fce:	e014      	b.n	8006ffa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d108      	bne.n	8006ff2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0202 	orr.w	r2, r2, #2
 8006fee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ff0:	e003      	b.n	8006ffa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	430a      	orrs	r2, r1
 8007014:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	430a      	orrs	r2, r1
 8007032:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <HAL_FDCAN_ActivateNotification+0xec>)
 8007040:	4013      	ands	r3, r2
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	430b      	orrs	r3, r1
 8007048:	6553      	str	r3, [r2, #84]	@ 0x54
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <HAL_FDCAN_ActivateNotification+0xf0>)
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	0f9b      	lsrs	r3, r3, #30
 8007052:	490b      	ldr	r1, [pc, #44]	@ (8007080 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007054:	4313      	orrs	r3, r2
 8007056:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	e008      	b.n	800706e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007062:	f043 0202 	orr.w	r2, r3, #2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	3fcfffff 	.word	0x3fcfffff
 8007080:	4000a800 	.word	0x4000a800

08007084 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b096      	sub	sp, #88	@ 0x58
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800708c:	4b9a      	ldr	r3, [pc, #616]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	079b      	lsls	r3, r3, #30
 8007092:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007094:	4b98      	ldr	r3, [pc, #608]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	079b      	lsls	r3, r3, #30
 800709a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800709c:	4013      	ands	r3, r2
 800709e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80070aa:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070b4:	4013      	ands	r3, r2
 80070b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070cc:	4013      	ands	r3, r2
 80070ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e4:	4013      	ands	r3, r2
 80070e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ee:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80070f2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070fc:	4013      	ands	r3, r2
 80070fe:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007106:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800710a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007114:	4013      	ands	r3, r2
 8007116:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007126:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d010      	beq.n	8007156 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007148:	651a      	str	r2, [r3, #80]	@ 0x50
 800714a:	4b6b      	ldr	r3, [pc, #428]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 800714c:	2200      	movs	r2, #0
 800714e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fa54 	bl	80075fe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	0a9b      	lsrs	r3, r3, #10
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01d      	beq.n	800719e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	0a9b      	lsrs	r3, r3, #10
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d017      	beq.n	800719e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007182:	4013      	ands	r3, r2
 8007184:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800718e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007190:	4b59      	ldr	r3, [pc, #356]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007196:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa07 	bl	80075ac <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00d      	beq.n	80071c0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071aa:	4b54      	ldr	r3, [pc, #336]	@ (80072fc <HAL_FDCAN_IRQHandler+0x278>)
 80071ac:	400b      	ands	r3, r1
 80071ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80071b0:	4a51      	ldr	r2, [pc, #324]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 80071b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071b4:	0f9b      	lsrs	r3, r3, #30
 80071b6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80071b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9c0 	bl	8007540 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80071c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071cc:	4b4b      	ldr	r3, [pc, #300]	@ (80072fc <HAL_FDCAN_IRQHandler+0x278>)
 80071ce:	400b      	ands	r3, r1
 80071d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80071d2:	4a49      	ldr	r2, [pc, #292]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 80071d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d6:	0f9b      	lsrs	r3, r3, #30
 80071d8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80071da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9ba 	bl	8007556 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80071e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80071ee:	4b43      	ldr	r3, [pc, #268]	@ (80072fc <HAL_FDCAN_IRQHandler+0x278>)
 80071f0:	400b      	ands	r3, r1
 80071f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80071f4:	4a40      	ldr	r2, [pc, #256]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	0f9b      	lsrs	r3, r3, #30
 80071fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80071fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7f9 ffce 	bl	80011a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007210:	4b3a      	ldr	r3, [pc, #232]	@ (80072fc <HAL_FDCAN_IRQHandler+0x278>)
 8007212:	400b      	ands	r3, r1
 8007214:	6513      	str	r3, [r2, #80]	@ 0x50
 8007216:	4a38      	ldr	r2, [pc, #224]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800721a:	0f9b      	lsrs	r3, r3, #30
 800721c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800721e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9a3 	bl	800756c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007228:	0adb      	lsrs	r3, r3, #11
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d010      	beq.n	8007254 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	0adb      	lsrs	r3, r3, #11
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007246:	651a      	str	r2, [r3, #80]	@ 0x50
 8007248:	4b2b      	ldr	r3, [pc, #172]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 800724a:	2200      	movs	r2, #0
 800724c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f997 	bl	8007582 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01d      	beq.n	800729c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	0a5b      	lsrs	r3, r3, #9
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d017      	beq.n	800729c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007274:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800727e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007280:	4013      	ands	r3, r2
 8007282:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800728c:	651a      	str	r2, [r3, #80]	@ 0x50
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 8007290:	2200      	movs	r2, #0
 8007292:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007294:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f97d 	bl	8007596 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	0cdb      	lsrs	r3, r3, #19
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	0cdb      	lsrs	r3, r3, #19
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80072bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80072be:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f97c 	bl	80075c2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80072ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d010      	beq.n	8007304 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80072ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80072ec:	4b02      	ldr	r3, [pc, #8]	@ (80072f8 <HAL_FDCAN_IRQHandler+0x274>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	e004      	b.n	8007300 <HAL_FDCAN_IRQHandler+0x27c>
 80072f6:	bf00      	nop
 80072f8:	4000a800 	.word	0x4000a800
 80072fc:	3fcfffff 	.word	0x3fcfffff
 8007300:	f000 f969 	bl	80075d6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007306:	0c9b      	lsrs	r3, r3, #18
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	0c9b      	lsrs	r3, r3, #18
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007324:	651a      	str	r2, [r3, #80]	@ 0x50
 8007326:	4b83      	ldr	r3, [pc, #524]	@ (8007534 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007328:	2200      	movs	r2, #0
 800732a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f95c 	bl	80075ea <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007334:	0c5b      	lsrs	r3, r3, #17
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d015      	beq.n	800736a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	0c5b      	lsrs	r3, r3, #17
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007352:	651a      	str	r2, [r3, #80]	@ 0x50
 8007354:	4b77      	ldr	r3, [pc, #476]	@ (8007534 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007356:	2200      	movs	r2, #0
 8007358:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007360:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800736a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007376:	4b70      	ldr	r3, [pc, #448]	@ (8007538 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007378:	400b      	ands	r3, r1
 800737a:	6513      	str	r3, [r2, #80]	@ 0x50
 800737c:	4a6d      	ldr	r2, [pc, #436]	@ (8007534 <HAL_FDCAN_IRQHandler+0x4b0>)
 800737e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007380:	0f9b      	lsrs	r3, r3, #30
 8007382:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f94d 	bl	8007626 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800738c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007398:	4b67      	ldr	r3, [pc, #412]	@ (8007538 <HAL_FDCAN_IRQHandler+0x4b4>)
 800739a:	400b      	ands	r3, r1
 800739c:	6513      	str	r3, [r2, #80]	@ 0x50
 800739e:	4a65      	ldr	r2, [pc, #404]	@ (8007534 <HAL_FDCAN_IRQHandler+0x4b0>)
 80073a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a2:	0f9b      	lsrs	r3, r3, #30
 80073a4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80073ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a60      	ldr	r2, [pc, #384]	@ (800753c <HAL_FDCAN_IRQHandler+0x4b8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	f040 80ac 	bne.w	800751a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80a4 	beq.w	800751a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e6:	4013      	ands	r3, r2
 80073e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073fe:	4013      	ands	r3, r2
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007416:	4013      	ands	r3, r2
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007424:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	6a3a      	ldr	r2, [r7, #32]
 800742e:	4013      	ands	r3, r2
 8007430:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800743c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	4013      	ands	r3, r2
 8007448:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007466:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8e6 	bl	800763c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800747c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800747e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f8e6 	bl	8007652 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	099b      	lsrs	r3, r3, #6
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01a      	beq.n	80074c8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	099b      	lsrs	r3, r3, #6
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d014      	beq.n	80074c8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074b4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2240      	movs	r2, #64	@ 0x40
 80074bc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	6939      	ldr	r1, [r7, #16]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f8d0 	bl	8007668 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80074d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8d1 	bl	8007680 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	6a3a      	ldr	r2, [r7, #32]
 80074ea:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f874 	bl	8007612 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800752a:	bf00      	nop
 800752c:	3758      	adds	r7, #88	@ 0x58
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	4000a800 	.word	0x4000a800
 8007538:	3fcfffff 	.word	0x3fcfffff
 800753c:	4000a000 	.word	0x4000a000

08007540 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
	...

08007698 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80076ae:	4ba7      	ldr	r3, [pc, #668]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0091      	lsls	r1, r2, #2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6812      	ldr	r2, [r2, #0]
 80076ba:	430b      	orrs	r3, r1
 80076bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	041a      	lsls	r2, r3, #16
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80076ee:	4b97      	ldr	r3, [pc, #604]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	0091      	lsls	r1, r2, #2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	430b      	orrs	r3, r1
 80076fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007708:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007710:	041a      	lsls	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4413      	add	r3, r2
 8007726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007730:	4b86      	ldr	r3, [pc, #536]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007732:	4013      	ands	r3, r2
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	0091      	lsls	r1, r2, #2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	430b      	orrs	r3, r1
 800773e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800774a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007752:	041a      	lsls	r2, r3, #16
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007778:	4b74      	ldr	r3, [pc, #464]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800777a:	4013      	ands	r3, r2
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	0091      	lsls	r1, r2, #2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	430b      	orrs	r3, r1
 8007786:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007792:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800779a:	041a      	lsls	r2, r3, #16
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80077c0:	4b62      	ldr	r3, [pc, #392]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	0091      	lsls	r1, r2, #2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	430b      	orrs	r3, r1
 80077ce:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	4413      	add	r3, r2
 80077e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80077ec:	4b57      	ldr	r3, [pc, #348]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	0091      	lsls	r1, r2, #2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	430b      	orrs	r3, r1
 80077fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007806:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780e:	041a      	lsls	r2, r3, #16
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	4413      	add	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800782e:	4b47      	ldr	r3, [pc, #284]	@ (800794c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007830:	4013      	ands	r3, r2
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	0091      	lsls	r1, r2, #2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	430b      	orrs	r3, r1
 800783c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007848:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007850:	041a      	lsls	r2, r3, #16
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007864:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786c:	061a      	lsls	r2, r3, #24
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800787c:	4b34      	ldr	r3, [pc, #208]	@ (8007950 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800787e:	4413      	add	r3, r2
 8007880:	009a      	lsls	r2, r3, #2
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	441a      	add	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	441a      	add	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80078b8:	441a      	add	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80078d0:	441a      	add	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80078e2:	fb01 f303 	mul.w	r3, r1, r3
 80078e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80078e8:	441a      	add	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	441a      	add	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007942:	4a04      	ldr	r2, [pc, #16]	@ (8007954 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d915      	bls.n	8007974 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007948:	e006      	b.n	8007958 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800794a:	bf00      	nop
 800794c:	ffff0003 	.word	0xffff0003
 8007950:	10002b00 	.word	0x10002b00
 8007954:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800795e:	f043 0220 	orr.w	r2, r3, #32
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2203      	movs	r2, #3
 800796c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e010      	b.n	8007996 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e005      	b.n	8007988 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3304      	adds	r3, #4
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d3f3      	bcc.n	800797c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b089      	sub	sp, #36	@ 0x24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80079c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e00a      	b.n	80079e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80079d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80079de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80079f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80079fc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	3304      	adds	r3, #4
 8007a28:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3304      	adds	r3, #4
 8007a34:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e020      	b.n	8007a7e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3303      	adds	r3, #3
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	440b      	add	r3, r1
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a54:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	440b      	add	r3, r1
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a62:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	440a      	add	r2, r1
 8007a6a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a6c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	3304      	adds	r3, #4
 8007a76:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	4a06      	ldr	r2, [pc, #24]	@ (8007a9c <FDCAN_CopyMessageToRAM+0xf8>)
 8007a84:	5cd3      	ldrb	r3, [r2, r3]
 8007a86:	461a      	mov	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d3d6      	bcc.n	8007a3c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8007a8e:	bf00      	nop
 8007a90:	bf00      	nop
 8007a92:	3724      	adds	r7, #36	@ 0x24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	08015068 	.word	0x08015068

08007aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b089      	sub	sp, #36	@ 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007aae:	4b89      	ldr	r3, [pc, #548]	@ (8007cd4 <HAL_GPIO_Init+0x234>)
 8007ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ab2:	e194      	b.n	8007dde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	2101      	movs	r1, #1
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8186 	beq.w	8007dd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d005      	beq.n	8007ae4 <HAL_GPIO_Init+0x44>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d130      	bne.n	8007b46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	2203      	movs	r2, #3
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	43db      	mvns	r3, r3
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4013      	ands	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4013      	ands	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	091b      	lsrs	r3, r3, #4
 8007b30:	f003 0201 	and.w	r2, r3, #1
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d017      	beq.n	8007b82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b62:	43db      	mvns	r3, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	4013      	ands	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d123      	bne.n	8007bd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	08da      	lsrs	r2, r3, #3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3208      	adds	r2, #8
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	220f      	movs	r2, #15
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	08da      	lsrs	r2, r3, #3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3208      	adds	r2, #8
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	2203      	movs	r2, #3
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	43db      	mvns	r3, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f003 0203 	and.w	r2, r3, #3
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80e0 	beq.w	8007dd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c18:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd8 <HAL_GPIO_Init+0x238>)
 8007c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8007cd8 <HAL_GPIO_Init+0x238>)
 8007c20:	f043 0302 	orr.w	r3, r3, #2
 8007c24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c28:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd8 <HAL_GPIO_Init+0x238>)
 8007c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c36:	4a29      	ldr	r2, [pc, #164]	@ (8007cdc <HAL_GPIO_Init+0x23c>)
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	4013      	ands	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ce0 <HAL_GPIO_Init+0x240>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d052      	beq.n	8007d08 <HAL_GPIO_Init+0x268>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce4 <HAL_GPIO_Init+0x244>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d031      	beq.n	8007cce <HAL_GPIO_Init+0x22e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce8 <HAL_GPIO_Init+0x248>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02b      	beq.n	8007cca <HAL_GPIO_Init+0x22a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	@ (8007cec <HAL_GPIO_Init+0x24c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d025      	beq.n	8007cc6 <HAL_GPIO_Init+0x226>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf0 <HAL_GPIO_Init+0x250>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d01f      	beq.n	8007cc2 <HAL_GPIO_Init+0x222>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <HAL_GPIO_Init+0x254>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d019      	beq.n	8007cbe <HAL_GPIO_Init+0x21e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf8 <HAL_GPIO_Init+0x258>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d013      	beq.n	8007cba <HAL_GPIO_Init+0x21a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <HAL_GPIO_Init+0x25c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00d      	beq.n	8007cb6 <HAL_GPIO_Init+0x216>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_GPIO_Init+0x260>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <HAL_GPIO_Init+0x212>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a17      	ldr	r2, [pc, #92]	@ (8007d04 <HAL_GPIO_Init+0x264>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d101      	bne.n	8007cae <HAL_GPIO_Init+0x20e>
 8007caa:	2309      	movs	r3, #9
 8007cac:	e02d      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cae:	230a      	movs	r3, #10
 8007cb0:	e02b      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	e029      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cb6:	2307      	movs	r3, #7
 8007cb8:	e027      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cba:	2306      	movs	r3, #6
 8007cbc:	e025      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cbe:	2305      	movs	r3, #5
 8007cc0:	e023      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	e021      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e01f      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e01d      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e01b      	b.n	8007d0a <HAL_GPIO_Init+0x26a>
 8007cd2:	bf00      	nop
 8007cd4:	58000080 	.word	0x58000080
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	58000400 	.word	0x58000400
 8007ce0:	58020000 	.word	0x58020000
 8007ce4:	58020400 	.word	0x58020400
 8007ce8:	58020800 	.word	0x58020800
 8007cec:	58020c00 	.word	0x58020c00
 8007cf0:	58021000 	.word	0x58021000
 8007cf4:	58021400 	.word	0x58021400
 8007cf8:	58021800 	.word	0x58021800
 8007cfc:	58021c00 	.word	0x58021c00
 8007d00:	58022000 	.word	0x58022000
 8007d04:	58022400 	.word	0x58022400
 8007d08:	2300      	movs	r3, #0
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	f002 0203 	and.w	r2, r2, #3
 8007d10:	0092      	lsls	r2, r2, #2
 8007d12:	4093      	lsls	r3, r2
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d1a:	4938      	ldr	r1, [pc, #224]	@ (8007dfc <HAL_GPIO_Init+0x35c>)
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	089b      	lsrs	r3, r3, #2
 8007d20:	3302      	adds	r3, #2
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4013      	ands	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	43db      	mvns	r3, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f47f ae63 	bne.w	8007ab4 <HAL_GPIO_Init+0x14>
  }
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	3724      	adds	r7, #36	@ 0x24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	58000400 	.word	0x58000400

08007e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e10:	787b      	ldrb	r3, [r7, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e16:	887a      	ldrh	r2, [r7, #2]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e1c:	e003      	b.n	8007e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	041a      	lsls	r2, r3, #16
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	619a      	str	r2, [r3, #24]
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e44:	887a      	ldrh	r2, [r7, #2]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	041a      	lsls	r2, r3, #16
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	43d9      	mvns	r1, r3
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	400b      	ands	r3, r1
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	619a      	str	r2, [r3, #24]
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e70:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d00a      	beq.n	8007e92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e7c:	4b16      	ldr	r3, [pc, #88]	@ (8007ed8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d001      	beq.n	8007e8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e01f      	b.n	8007ece <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e01d      	b.n	8007ece <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e92:	4b11      	ldr	r3, [pc, #68]	@ (8007ed8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f023 0207 	bic.w	r2, r3, #7
 8007e9a:	490f      	ldr	r1, [pc, #60]	@ (8007ed8 <HAL_PWREx_ConfigSupply+0x70>)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ea2:	f7fd fd37 	bl	8005914 <HAL_GetTick>
 8007ea6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ea8:	e009      	b.n	8007ebe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007eaa:	f7fd fd33 	bl	8005914 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eb8:	d901      	bls.n	8007ebe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e007      	b.n	8007ece <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ebe:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <HAL_PWREx_ConfigSupply+0x70>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eca:	d1ee      	bne.n	8007eaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	58024800 	.word	0x58024800

08007edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08c      	sub	sp, #48	@ 0x30
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f000 bc48 	b.w	8008780 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8088 	beq.w	800800e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007efe:	4b99      	ldr	r3, [pc, #612]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f08:	4b96      	ldr	r3, [pc, #600]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d007      	beq.n	8007f24 <HAL_RCC_OscConfig+0x48>
 8007f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f16:	2b18      	cmp	r3, #24
 8007f18:	d111      	bne.n	8007f3e <HAL_RCC_OscConfig+0x62>
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d10c      	bne.n	8007f3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f24:	4b8f      	ldr	r3, [pc, #572]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06d      	beq.n	800800c <HAL_RCC_OscConfig+0x130>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d169      	bne.n	800800c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f000 bc21 	b.w	8008780 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f46:	d106      	bne.n	8007f56 <HAL_RCC_OscConfig+0x7a>
 8007f48:	4b86      	ldr	r3, [pc, #536]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a85      	ldr	r2, [pc, #532]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e02e      	b.n	8007fb4 <HAL_RCC_OscConfig+0xd8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10c      	bne.n	8007f78 <HAL_RCC_OscConfig+0x9c>
 8007f5e:	4b81      	ldr	r3, [pc, #516]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a80      	ldr	r2, [pc, #512]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	e01d      	b.n	8007fb4 <HAL_RCC_OscConfig+0xd8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f80:	d10c      	bne.n	8007f9c <HAL_RCC_OscConfig+0xc0>
 8007f82:	4b78      	ldr	r3, [pc, #480]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a77      	ldr	r2, [pc, #476]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	4b75      	ldr	r3, [pc, #468]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a74      	ldr	r2, [pc, #464]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	e00b      	b.n	8007fb4 <HAL_RCC_OscConfig+0xd8>
 8007f9c:	4b71      	ldr	r3, [pc, #452]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a70      	ldr	r2, [pc, #448]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a6d      	ldr	r2, [pc, #436]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d013      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbc:	f7fd fcaa 	bl	8005914 <HAL_GetTick>
 8007fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fc4:	f7fd fca6 	bl	8005914 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	@ 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e3d4      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fd6:	4b63      	ldr	r3, [pc, #396]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0xe8>
 8007fe2:	e014      	b.n	800800e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fd fc96 	bl	8005914 <HAL_GetTick>
 8007fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fec:	f7fd fc92 	bl	8005914 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b64      	cmp	r3, #100	@ 0x64
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e3c0      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ffe:	4b59      	ldr	r3, [pc, #356]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x110>
 800800a:	e000      	b.n	800800e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800800c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80ca 	beq.w	80081b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800801c:	4b51      	ldr	r3, [pc, #324]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008024:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008026:	4b4f      	ldr	r3, [pc, #316]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_RCC_OscConfig+0x166>
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	2b18      	cmp	r3, #24
 8008036:	d156      	bne.n	80080e6 <HAL_RCC_OscConfig+0x20a>
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d151      	bne.n	80080e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008042:	4b48      	ldr	r3, [pc, #288]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <HAL_RCC_OscConfig+0x17e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e392      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800805a:	4b42      	ldr	r3, [pc, #264]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f023 0219 	bic.w	r2, r3, #25
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	493f      	ldr	r1, [pc, #252]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008068:	4313      	orrs	r3, r2
 800806a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fd fc52 	bl	8005914 <HAL_GetTick>
 8008070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008074:	f7fd fc4e 	bl	8005914 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e37c      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008086:	4b37      	ldr	r3, [pc, #220]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008092:	f7fd fc6f 	bl	8005974 <HAL_GetREVID>
 8008096:	4603      	mov	r3, r0
 8008098:	f241 0203 	movw	r2, #4099	@ 0x1003
 800809c:	4293      	cmp	r3, r2
 800809e:	d817      	bhi.n	80080d0 <HAL_RCC_OscConfig+0x1f4>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d108      	bne.n	80080ba <HAL_RCC_OscConfig+0x1de>
 80080a8:	4b2e      	ldr	r3, [pc, #184]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80080b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b8:	e07a      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	031b      	lsls	r3, r3, #12
 80080c8:	4926      	ldr	r1, [pc, #152]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ce:	e06f      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d0:	4b24      	ldr	r3, [pc, #144]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	061b      	lsls	r3, r3, #24
 80080de:	4921      	ldr	r1, [pc, #132]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e4:	e064      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d047      	beq.n	800817e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 0219 	bic.w	r2, r3, #25
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	491a      	ldr	r1, [pc, #104]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008100:	f7fd fc08 	bl	8005914 <HAL_GetTick>
 8008104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008106:	e008      	b.n	800811a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008108:	f7fd fc04 	bl	8005914 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b02      	cmp	r3, #2
 8008114:	d901      	bls.n	800811a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e332      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800811a:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0304 	and.w	r3, r3, #4
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0f0      	beq.n	8008108 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008126:	f7fd fc25 	bl	8005974 <HAL_GetREVID>
 800812a:	4603      	mov	r3, r0
 800812c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008130:	4293      	cmp	r3, r2
 8008132:	d819      	bhi.n	8008168 <HAL_RCC_OscConfig+0x28c>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b40      	cmp	r3, #64	@ 0x40
 800813a:	d108      	bne.n	800814e <HAL_RCC_OscConfig+0x272>
 800813c:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008144:	4a07      	ldr	r2, [pc, #28]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800814a:	6053      	str	r3, [r2, #4]
 800814c:	e030      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
 800814e:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	031b      	lsls	r3, r3, #12
 800815c:	4901      	ldr	r1, [pc, #4]	@ (8008164 <HAL_RCC_OscConfig+0x288>)
 800815e:	4313      	orrs	r3, r2
 8008160:	604b      	str	r3, [r1, #4]
 8008162:	e025      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
 8008164:	58024400 	.word	0x58024400
 8008168:	4b9a      	ldr	r3, [pc, #616]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	061b      	lsls	r3, r3, #24
 8008176:	4997      	ldr	r1, [pc, #604]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008178:	4313      	orrs	r3, r2
 800817a:	604b      	str	r3, [r1, #4]
 800817c:	e018      	b.n	80081b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800817e:	4b95      	ldr	r3, [pc, #596]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a94      	ldr	r2, [pc, #592]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818a:	f7fd fbc3 	bl	8005914 <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008192:	f7fd fbbf 	bl	8005914 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e2ed      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081a4:	4b8b      	ldr	r3, [pc, #556]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 80a9 	beq.w	8008310 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081be:	4b85      	ldr	r3, [pc, #532]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081c8:	4b82      	ldr	r3, [pc, #520]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d007      	beq.n	80081e4 <HAL_RCC_OscConfig+0x308>
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b18      	cmp	r3, #24
 80081d8:	d13a      	bne.n	8008250 <HAL_RCC_OscConfig+0x374>
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d135      	bne.n	8008250 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081e4:	4b7b      	ldr	r3, [pc, #492]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_RCC_OscConfig+0x320>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	2b80      	cmp	r3, #128	@ 0x80
 80081f6:	d001      	beq.n	80081fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e2c1      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081fc:	f7fd fbba 	bl	8005974 <HAL_GetREVID>
 8008200:	4603      	mov	r3, r0
 8008202:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008206:	4293      	cmp	r3, r2
 8008208:	d817      	bhi.n	800823a <HAL_RCC_OscConfig+0x35e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	2b20      	cmp	r3, #32
 8008210:	d108      	bne.n	8008224 <HAL_RCC_OscConfig+0x348>
 8008212:	4b70      	ldr	r3, [pc, #448]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800821a:	4a6e      	ldr	r2, [pc, #440]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800821c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008220:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008222:	e075      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008224:	4b6b      	ldr	r3, [pc, #428]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	069b      	lsls	r3, r3, #26
 8008232:	4968      	ldr	r1, [pc, #416]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008234:	4313      	orrs	r3, r2
 8008236:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008238:	e06a      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800823a:	4b66      	ldr	r3, [pc, #408]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	4962      	ldr	r1, [pc, #392]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800824a:	4313      	orrs	r3, r2
 800824c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800824e:	e05f      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d042      	beq.n	80082de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008258:	4b5e      	ldr	r3, [pc, #376]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a5d      	ldr	r2, [pc, #372]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800825e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fd fb56 	bl	8005914 <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800826c:	f7fd fb52 	bl	8005914 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e280      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800827e:	4b55      	ldr	r3, [pc, #340]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0f0      	beq.n	800826c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800828a:	f7fd fb73 	bl	8005974 <HAL_GetREVID>
 800828e:	4603      	mov	r3, r0
 8008290:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008294:	4293      	cmp	r3, r2
 8008296:	d817      	bhi.n	80082c8 <HAL_RCC_OscConfig+0x3ec>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	2b20      	cmp	r3, #32
 800829e:	d108      	bne.n	80082b2 <HAL_RCC_OscConfig+0x3d6>
 80082a0:	4b4c      	ldr	r3, [pc, #304]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80082a8:	4a4a      	ldr	r2, [pc, #296]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082ae:	6053      	str	r3, [r2, #4]
 80082b0:	e02e      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
 80082b2:	4b48      	ldr	r3, [pc, #288]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	069b      	lsls	r3, r3, #26
 80082c0:	4944      	ldr	r1, [pc, #272]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	604b      	str	r3, [r1, #4]
 80082c6:	e023      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
 80082c8:	4b42      	ldr	r3, [pc, #264]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	493f      	ldr	r1, [pc, #252]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	60cb      	str	r3, [r1, #12]
 80082dc:	e018      	b.n	8008310 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082de:	4b3d      	ldr	r3, [pc, #244]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a3c      	ldr	r2, [pc, #240]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80082e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ea:	f7fd fb13 	bl	8005914 <HAL_GetTick>
 80082ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082f0:	e008      	b.n	8008304 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082f2:	f7fd fb0f 	bl	8005914 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e23d      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008304:	4b33      	ldr	r3, [pc, #204]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f0      	bne.n	80082f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d036      	beq.n	800838a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d019      	beq.n	8008358 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008324:	4b2b      	ldr	r3, [pc, #172]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008328:	4a2a      	ldr	r2, [pc, #168]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008330:	f7fd faf0 	bl	8005914 <HAL_GetTick>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008338:	f7fd faec 	bl	8005914 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e21a      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800834a:	4b22      	ldr	r3, [pc, #136]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f0      	beq.n	8008338 <HAL_RCC_OscConfig+0x45c>
 8008356:	e018      	b.n	800838a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008358:	4b1e      	ldr	r3, [pc, #120]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800835a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835c:	4a1d      	ldr	r2, [pc, #116]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008364:	f7fd fad6 	bl	8005914 <HAL_GetTick>
 8008368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800836c:	f7fd fad2 	bl	8005914 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e200      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800837e:	4b15      	ldr	r3, [pc, #84]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 8008380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d039      	beq.n	800840a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01c      	beq.n	80083d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800839e:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a0c      	ldr	r2, [pc, #48]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80083a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083aa:	f7fd fab3 	bl	8005914 <HAL_GetTick>
 80083ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083b0:	e008      	b.n	80083c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b2:	f7fd faaf 	bl	8005914 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e1dd      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083c4:	4b03      	ldr	r3, [pc, #12]	@ (80083d4 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0f0      	beq.n	80083b2 <HAL_RCC_OscConfig+0x4d6>
 80083d0:	e01b      	b.n	800840a <HAL_RCC_OscConfig+0x52e>
 80083d2:	bf00      	nop
 80083d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083d8:	4b9b      	ldr	r3, [pc, #620]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a9a      	ldr	r2, [pc, #616]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80083de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083e4:	f7fd fa96 	bl	8005914 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ec:	f7fd fa92 	bl	8005914 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e1c0      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083fe:	4b92      	ldr	r3, [pc, #584]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f0      	bne.n	80083ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8081 	beq.w	800851a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008418:	4b8c      	ldr	r3, [pc, #560]	@ (800864c <HAL_RCC_OscConfig+0x770>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a8b      	ldr	r2, [pc, #556]	@ (800864c <HAL_RCC_OscConfig+0x770>)
 800841e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008424:	f7fd fa76 	bl	8005914 <HAL_GetTick>
 8008428:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800842a:	e008      	b.n	800843e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800842c:	f7fd fa72 	bl	8005914 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b64      	cmp	r3, #100	@ 0x64
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e1a0      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843e:	4b83      	ldr	r3, [pc, #524]	@ (800864c <HAL_RCC_OscConfig+0x770>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d106      	bne.n	8008460 <HAL_RCC_OscConfig+0x584>
 8008452:	4b7d      	ldr	r3, [pc, #500]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008456:	4a7c      	ldr	r2, [pc, #496]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008458:	f043 0301 	orr.w	r3, r3, #1
 800845c:	6713      	str	r3, [r2, #112]	@ 0x70
 800845e:	e02d      	b.n	80084bc <HAL_RCC_OscConfig+0x5e0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <HAL_RCC_OscConfig+0x5a6>
 8008468:	4b77      	ldr	r3, [pc, #476]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800846c:	4a76      	ldr	r2, [pc, #472]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800846e:	f023 0301 	bic.w	r3, r3, #1
 8008472:	6713      	str	r3, [r2, #112]	@ 0x70
 8008474:	4b74      	ldr	r3, [pc, #464]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008478:	4a73      	ldr	r2, [pc, #460]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800847a:	f023 0304 	bic.w	r3, r3, #4
 800847e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008480:	e01c      	b.n	80084bc <HAL_RCC_OscConfig+0x5e0>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	2b05      	cmp	r3, #5
 8008488:	d10c      	bne.n	80084a4 <HAL_RCC_OscConfig+0x5c8>
 800848a:	4b6f      	ldr	r3, [pc, #444]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	4a6e      	ldr	r2, [pc, #440]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008490:	f043 0304 	orr.w	r3, r3, #4
 8008494:	6713      	str	r3, [r2, #112]	@ 0x70
 8008496:	4b6c      	ldr	r3, [pc, #432]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849a:	4a6b      	ldr	r2, [pc, #428]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80084a2:	e00b      	b.n	80084bc <HAL_RCC_OscConfig+0x5e0>
 80084a4:	4b68      	ldr	r3, [pc, #416]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80084a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a8:	4a67      	ldr	r2, [pc, #412]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80084b0:	4b65      	ldr	r3, [pc, #404]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80084b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b4:	4a64      	ldr	r2, [pc, #400]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80084b6:	f023 0304 	bic.w	r3, r3, #4
 80084ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d015      	beq.n	80084f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c4:	f7fd fa26 	bl	8005914 <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084cc:	f7fd fa22 	bl	8005914 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e14e      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084e2:	4b59      	ldr	r3, [pc, #356]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0ee      	beq.n	80084cc <HAL_RCC_OscConfig+0x5f0>
 80084ee:	e014      	b.n	800851a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f0:	f7fd fa10 	bl	8005914 <HAL_GetTick>
 80084f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084f6:	e00a      	b.n	800850e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084f8:	f7fd fa0c 	bl	8005914 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008506:	4293      	cmp	r3, r2
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e138      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800850e:	4b4e      	ldr	r3, [pc, #312]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1ee      	bne.n	80084f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 812d 	beq.w	800877e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008524:	4b48      	ldr	r3, [pc, #288]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800852c:	2b18      	cmp	r3, #24
 800852e:	f000 80bd 	beq.w	80086ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008536:	2b02      	cmp	r3, #2
 8008538:	f040 809e 	bne.w	8008678 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800853c:	4b42      	ldr	r3, [pc, #264]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a41      	ldr	r2, [pc, #260]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fd f9e4 	bl	8005914 <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008550:	f7fd f9e0 	bl	8005914 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e10e      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008562:	4b39      	ldr	r3, [pc, #228]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1f0      	bne.n	8008550 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800856e:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008572:	4b37      	ldr	r3, [pc, #220]	@ (8008650 <HAL_RCC_OscConfig+0x774>)
 8008574:	4013      	ands	r3, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800857e:	0112      	lsls	r2, r2, #4
 8008580:	430a      	orrs	r2, r1
 8008582:	4931      	ldr	r1, [pc, #196]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008584:	4313      	orrs	r3, r2
 8008586:	628b      	str	r3, [r1, #40]	@ 0x28
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858c:	3b01      	subs	r3, #1
 800858e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008596:	3b01      	subs	r3, #1
 8008598:	025b      	lsls	r3, r3, #9
 800859a:	b29b      	uxth	r3, r3
 800859c:	431a      	orrs	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	3b01      	subs	r3, #1
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b0:	3b01      	subs	r3, #1
 80085b2:	061b      	lsls	r3, r3, #24
 80085b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085b8:	4923      	ldr	r1, [pc, #140]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085be:	4b22      	ldr	r3, [pc, #136]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c2:	4a21      	ldr	r2, [pc, #132]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ce:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <HAL_RCC_OscConfig+0x778>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085d6:	00d2      	lsls	r2, r2, #3
 80085d8:	491b      	ldr	r1, [pc, #108]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085de:	4b1a      	ldr	r3, [pc, #104]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	f023 020c 	bic.w	r2, r3, #12
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	4917      	ldr	r1, [pc, #92]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085f0:	4b15      	ldr	r3, [pc, #84]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	f023 0202 	bic.w	r2, r3, #2
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fc:	4912      	ldr	r1, [pc, #72]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008602:	4b11      	ldr	r3, [pc, #68]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	4a10      	ldr	r2, [pc, #64]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800860c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860e:	4b0e      	ldr	r3, [pc, #56]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	4a0d      	ldr	r2, [pc, #52]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800861a:	4b0b      	ldr	r3, [pc, #44]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a0a      	ldr	r2, [pc, #40]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008626:	4b08      	ldr	r3, [pc, #32]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	4a07      	ldr	r2, [pc, #28]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 800862c:	f043 0301 	orr.w	r3, r3, #1
 8008630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008632:	4b05      	ldr	r3, [pc, #20]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a04      	ldr	r2, [pc, #16]	@ (8008648 <HAL_RCC_OscConfig+0x76c>)
 8008638:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800863c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863e:	f7fd f969 	bl	8005914 <HAL_GetTick>
 8008642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008644:	e011      	b.n	800866a <HAL_RCC_OscConfig+0x78e>
 8008646:	bf00      	nop
 8008648:	58024400 	.word	0x58024400
 800864c:	58024800 	.word	0x58024800
 8008650:	fffffc0c 	.word	0xfffffc0c
 8008654:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008658:	f7fd f95c 	bl	8005914 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e08a      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800866a:	4b47      	ldr	r3, [pc, #284]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f0      	beq.n	8008658 <HAL_RCC_OscConfig+0x77c>
 8008676:	e082      	b.n	800877e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008678:	4b43      	ldr	r3, [pc, #268]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a42      	ldr	r2, [pc, #264]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 800867e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008684:	f7fd f946 	bl	8005914 <HAL_GetTick>
 8008688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800868c:	f7fd f942 	bl	8005914 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e070      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800869e:	4b3a      	ldr	r3, [pc, #232]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f0      	bne.n	800868c <HAL_RCC_OscConfig+0x7b0>
 80086aa:	e068      	b.n	800877e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086ac:	4b36      	ldr	r3, [pc, #216]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 80086ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086b2:	4b35      	ldr	r3, [pc, #212]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d031      	beq.n	8008724 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f003 0203 	and.w	r2, r3, #3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d12a      	bne.n	8008724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d122      	bne.n	8008724 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d11a      	bne.n	8008724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	0a5b      	lsrs	r3, r3, #9
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d111      	bne.n	8008724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800870e:	429a      	cmp	r2, r3
 8008710:	d108      	bne.n	8008724 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	0e1b      	lsrs	r3, r3, #24
 8008716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e02b      	b.n	8008780 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008728:	4b17      	ldr	r3, [pc, #92]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 800872a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008732:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d01f      	beq.n	800877e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800873e:	4b12      	ldr	r3, [pc, #72]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	4a11      	ldr	r2, [pc, #68]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800874a:	f7fd f8e3 	bl	8005914 <HAL_GetTick>
 800874e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008750:	bf00      	nop
 8008752:	f7fd f8df 	bl	8005914 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	4293      	cmp	r3, r2
 800875c:	d0f9      	beq.n	8008752 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 8008760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008762:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <HAL_RCC_OscConfig+0x8b0>)
 8008764:	4013      	ands	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800876a:	00d2      	lsls	r2, r2, #3
 800876c:	4906      	ldr	r1, [pc, #24]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 800876e:	4313      	orrs	r3, r2
 8008770:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008772:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	4a04      	ldr	r2, [pc, #16]	@ (8008788 <HAL_RCC_OscConfig+0x8ac>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3730      	adds	r7, #48	@ 0x30
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	58024400 	.word	0x58024400
 800878c:	ffff0007 	.word	0xffff0007

08008790 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e19c      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087a4:	4b8a      	ldr	r3, [pc, #552]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d910      	bls.n	80087d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b2:	4b87      	ldr	r3, [pc, #540]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f023 020f 	bic.w	r2, r3, #15
 80087ba:	4985      	ldr	r1, [pc, #532]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b83      	ldr	r3, [pc, #524]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e184      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d010      	beq.n	8008802 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	4b7b      	ldr	r3, [pc, #492]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d908      	bls.n	8008802 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087f0:	4b78      	ldr	r3, [pc, #480]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	4975      	ldr	r1, [pc, #468]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	4b70      	ldr	r3, [pc, #448]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800881a:	429a      	cmp	r2, r3
 800881c:	d908      	bls.n	8008830 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800881e:	4b6d      	ldr	r3, [pc, #436]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	496a      	ldr	r1, [pc, #424]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800882c:	4313      	orrs	r3, r2
 800882e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	4b64      	ldr	r3, [pc, #400]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008848:	429a      	cmp	r2, r3
 800884a:	d908      	bls.n	800885e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800884c:	4b61      	ldr	r3, [pc, #388]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	495e      	ldr	r1, [pc, #376]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800885a:	4313      	orrs	r3, r2
 800885c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d010      	beq.n	800888c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69da      	ldr	r2, [r3, #28]
 800886e:	4b59      	ldr	r3, [pc, #356]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008876:	429a      	cmp	r2, r3
 8008878:	d908      	bls.n	800888c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800887a:	4b56      	ldr	r3, [pc, #344]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	4953      	ldr	r1, [pc, #332]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008888:	4313      	orrs	r3, r2
 800888a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d010      	beq.n	80088ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	4b4d      	ldr	r3, [pc, #308]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d908      	bls.n	80088ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a8:	4b4a      	ldr	r3, [pc, #296]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f023 020f 	bic.w	r2, r3, #15
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4947      	ldr	r1, [pc, #284]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d055      	beq.n	8008972 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088c6:	4b43      	ldr	r3, [pc, #268]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	4940      	ldr	r1, [pc, #256]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d107      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088e0:	4b3c      	ldr	r3, [pc, #240]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d121      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0f6      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d107      	bne.n	8008908 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088f8:	4b36      	ldr	r3, [pc, #216]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d115      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0ea      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d107      	bne.n	8008920 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008910:	4b30      	ldr	r3, [pc, #192]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0de      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008920:	4b2c      	ldr	r3, [pc, #176]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e0d6      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008930:	4b28      	ldr	r3, [pc, #160]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f023 0207 	bic.w	r2, r3, #7
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4925      	ldr	r1, [pc, #148]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800893e:	4313      	orrs	r3, r2
 8008940:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008942:	f7fc ffe7 	bl	8005914 <HAL_GetTick>
 8008946:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008948:	e00a      	b.n	8008960 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800894a:	f7fc ffe3 	bl	8005914 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e0be      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008960:	4b1c      	ldr	r3, [pc, #112]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	429a      	cmp	r2, r3
 8008970:	d1eb      	bne.n	800894a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d010      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	4b14      	ldr	r3, [pc, #80]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	429a      	cmp	r2, r3
 800898c:	d208      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f023 020f 	bic.w	r2, r3, #15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	490e      	ldr	r1, [pc, #56]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800899c:	4313      	orrs	r3, r2
 800899e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089a0:	4b0b      	ldr	r3, [pc, #44]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d214      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b08      	ldr	r3, [pc, #32]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f023 020f 	bic.w	r2, r3, #15
 80089b6:	4906      	ldr	r1, [pc, #24]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d005      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e086      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
 80089d0:	52002000 	.word	0x52002000
 80089d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d208      	bcs.n	8008a06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089f4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	4939      	ldr	r1, [pc, #228]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d010      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695a      	ldr	r2, [r3, #20]
 8008a16:	4b34      	ldr	r3, [pc, #208]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d208      	bcs.n	8008a34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a22:	4b31      	ldr	r3, [pc, #196]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	492e      	ldr	r1, [pc, #184]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	4b28      	ldr	r3, [pc, #160]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d208      	bcs.n	8008a62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a50:	4b25      	ldr	r3, [pc, #148]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	4922      	ldr	r1, [pc, #136]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69da      	ldr	r2, [r3, #28]
 8008a72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d208      	bcs.n	8008a90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	4917      	ldr	r1, [pc, #92]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a90:	f000 f834 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8008a94:	4602      	mov	r2, r0
 8008a96:	4b14      	ldr	r3, [pc, #80]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	4912      	ldr	r1, [pc, #72]	@ (8008aec <HAL_RCC_ClockConfig+0x35c>)
 8008aa2:	5ccb      	ldrb	r3, [r1, r3]
 8008aa4:	f003 031f 	and.w	r3, r3, #31
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aae:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8008aec <HAL_RCC_ClockConfig+0x35c>)
 8008ab8:	5cd3      	ldrb	r3, [r2, r3]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8008af0 <HAL_RCC_ClockConfig+0x360>)
 8008ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8008af4 <HAL_RCC_ClockConfig+0x364>)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008ace:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <HAL_RCC_ClockConfig+0x368>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fc fb86 	bl	80051e4 <HAL_InitTick>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	0801504c 	.word	0x0801504c
 8008af0:	24000058 	.word	0x24000058
 8008af4:	24000054 	.word	0x24000054
 8008af8:	24000074 	.word	0x24000074

08008afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b02:	4bb3      	ldr	r3, [pc, #716]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b0a:	2b18      	cmp	r3, #24
 8008b0c:	f200 8155 	bhi.w	8008dba <HAL_RCC_GetSysClockFreq+0x2be>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b7d 	.word	0x08008b7d
 8008b1c:	08008dbb 	.word	0x08008dbb
 8008b20:	08008dbb 	.word	0x08008dbb
 8008b24:	08008dbb 	.word	0x08008dbb
 8008b28:	08008dbb 	.word	0x08008dbb
 8008b2c:	08008dbb 	.word	0x08008dbb
 8008b30:	08008dbb 	.word	0x08008dbb
 8008b34:	08008dbb 	.word	0x08008dbb
 8008b38:	08008ba3 	.word	0x08008ba3
 8008b3c:	08008dbb 	.word	0x08008dbb
 8008b40:	08008dbb 	.word	0x08008dbb
 8008b44:	08008dbb 	.word	0x08008dbb
 8008b48:	08008dbb 	.word	0x08008dbb
 8008b4c:	08008dbb 	.word	0x08008dbb
 8008b50:	08008dbb 	.word	0x08008dbb
 8008b54:	08008dbb 	.word	0x08008dbb
 8008b58:	08008ba9 	.word	0x08008ba9
 8008b5c:	08008dbb 	.word	0x08008dbb
 8008b60:	08008dbb 	.word	0x08008dbb
 8008b64:	08008dbb 	.word	0x08008dbb
 8008b68:	08008dbb 	.word	0x08008dbb
 8008b6c:	08008dbb 	.word	0x08008dbb
 8008b70:	08008dbb 	.word	0x08008dbb
 8008b74:	08008dbb 	.word	0x08008dbb
 8008b78:	08008baf 	.word	0x08008baf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7c:	4b94      	ldr	r3, [pc, #592]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d009      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b88:	4b91      	ldr	r3, [pc, #580]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	08db      	lsrs	r3, r3, #3
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	4a90      	ldr	r2, [pc, #576]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b9a:	e111      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b9e:	61bb      	str	r3, [r7, #24]
      break;
 8008ba0:	e10e      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ba4:	61bb      	str	r3, [r7, #24]
      break;
 8008ba6:	e10b      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008baa:	61bb      	str	r3, [r7, #24]
      break;
 8008bac:	e108      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bae:	4b88      	ldr	r3, [pc, #544]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bb8:	4b85      	ldr	r3, [pc, #532]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bc4:	4b82      	ldr	r3, [pc, #520]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bce:	4b80      	ldr	r3, [pc, #512]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80e1 	beq.w	8008db4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f000 8083 	beq.w	8008d00 <HAL_RCC_GetSysClockFreq+0x204>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	f200 80a1 	bhi.w	8008d44 <HAL_RCC_GetSysClockFreq+0x248>
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCC_GetSysClockFreq+0x114>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d056      	beq.n	8008cbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c0e:	e099      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c10:	4b6f      	ldr	r3, [pc, #444]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02d      	beq.n	8008c78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	4a6b      	ldr	r2, [pc, #428]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b62      	ldr	r3, [pc, #392]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c76:	e087      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008de4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8a:	4b51      	ldr	r3, [pc, #324]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cba:	e065      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cce:	4b40      	ldr	r3, [pc, #256]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ce2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cfe:	e043      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008dec <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d12:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d42:	e021      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d56:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d88:	4b11      	ldr	r3, [pc, #68]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	3301      	adds	r3, #1
 8008d94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dac:	ee17 3a90 	vmov	r3, s15
 8008db0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008db2:	e005      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
      break;
 8008db8:	e002      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dbc:	61bb      	str	r3, [r7, #24]
      break;
 8008dbe:	bf00      	nop
  }

  return sysclockfreq;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3724      	adds	r7, #36	@ 0x24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	03d09000 	.word	0x03d09000
 8008dd8:	003d0900 	.word	0x003d0900
 8008ddc:	007a1200 	.word	0x007a1200
 8008de0:	46000000 	.word	0x46000000
 8008de4:	4c742400 	.word	0x4c742400
 8008de8:	4a742400 	.word	0x4a742400
 8008dec:	4af42400 	.word	0x4af42400

08008df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008df6:	f7ff fe81 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b10      	ldr	r3, [pc, #64]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	490f      	ldr	r1, [pc, #60]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e08:	5ccb      	ldrb	r3, [r1, r3]
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e14:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	4a09      	ldr	r2, [pc, #36]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e1e:	5cd3      	ldrb	r3, [r2, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	4a07      	ldr	r2, [pc, #28]	@ (8008e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e2e:	4a07      	ldr	r2, [pc, #28]	@ (8008e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	58024400 	.word	0x58024400
 8008e44:	0801504c 	.word	0x0801504c
 8008e48:	24000058 	.word	0x24000058
 8008e4c:	24000054 	.word	0x24000054

08008e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e54:	f7ff ffcc 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	091b      	lsrs	r3, r3, #4
 8008e60:	f003 0307 	and.w	r3, r3, #7
 8008e64:	4904      	ldr	r1, [pc, #16]	@ (8008e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e66:	5ccb      	ldrb	r3, [r1, r3]
 8008e68:	f003 031f 	and.w	r3, r3, #31
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	58024400 	.word	0x58024400
 8008e78:	0801504c 	.word	0x0801504c

08008e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e80:	f7ff ffb6 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 8008e84:	4602      	mov	r2, r0
 8008e86:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	4904      	ldr	r1, [pc, #16]	@ (8008ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e92:	5ccb      	ldrb	r3, [r1, r3]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	0801504c 	.word	0x0801504c

08008ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	223f      	movs	r2, #63	@ 0x3f
 8008eb6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	f003 0207 	and.w	r2, r3, #7
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008ec4:	4b17      	ldr	r3, [pc, #92]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008ed0:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008edc:	4b11      	ldr	r3, [pc, #68]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008f00:	4b08      	ldr	r3, [pc, #32]	@ (8008f24 <HAL_RCC_GetClockConfig+0x7c>)
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f0c:	4b06      	ldr	r3, [pc, #24]	@ (8008f28 <HAL_RCC_GetClockConfig+0x80>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 020f 	and.w	r2, r3, #15
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	601a      	str	r2, [r3, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	58024400 	.word	0x58024400
 8008f28:	52002000 	.word	0x52002000

08008f2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f30:	b0ca      	sub	sp, #296	@ 0x128
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008f50:	2500      	movs	r5, #0
 8008f52:	ea54 0305 	orrs.w	r3, r4, r5
 8008f56:	d049      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f62:	d02f      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f68:	d828      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f6e:	d01a      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f74:	d822      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f7e:	d007      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f80:	e01c      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f82:	4bb8      	ldr	r3, [pc, #736]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	4ab7      	ldr	r2, [pc, #732]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f8e:	e01a      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f94:	3308      	adds	r3, #8
 8008f96:	2102      	movs	r1, #2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fc8f 	bl	800a8bc <RCCEx_PLL2_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fa4:	e00f      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008faa:	3328      	adds	r3, #40	@ 0x28
 8008fac:	2102      	movs	r1, #2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 fd36 	bl	800aa20 <RCCEx_PLL3_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fba:	e004      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008fce:	4ba5      	ldr	r3, [pc, #660]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fdc:	4aa1      	ldr	r2, [pc, #644]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fde:	430b      	orrs	r3, r1
 8008fe0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ff8:	f04f 0900 	mov.w	r9, #0
 8008ffc:	ea58 0309 	orrs.w	r3, r8, r9
 8009000:	d047      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009008:	2b04      	cmp	r3, #4
 800900a:	d82a      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800900c:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009029 	.word	0x08009029
 8009018:	08009037 	.word	0x08009037
 800901c:	0800904d 	.word	0x0800904d
 8009020:	0800906b 	.word	0x0800906b
 8009024:	0800906b 	.word	0x0800906b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009028:	4b8e      	ldr	r3, [pc, #568]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902c:	4a8d      	ldr	r2, [pc, #564]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800902e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009034:	e01a      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903a:	3308      	adds	r3, #8
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f001 fc3c 	bl	800a8bc <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800904a:	e00f      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009050:	3328      	adds	r3, #40	@ 0x28
 8009052:	2100      	movs	r1, #0
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fce3 	bl	800aa20 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009060:	e004      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009068:	e000      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800906a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009074:	4b7b      	ldr	r3, [pc, #492]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009078:	f023 0107 	bic.w	r1, r3, #7
 800907c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009082:	4a78      	ldr	r2, [pc, #480]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009084:	430b      	orrs	r3, r1
 8009086:	6513      	str	r3, [r2, #80]	@ 0x50
 8009088:	e003      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800908e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800909e:	f04f 0b00 	mov.w	fp, #0
 80090a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80090a6:	d04c      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b2:	d030      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b8:	d829      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80090ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80090bc:	d02d      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80090be:	2bc0      	cmp	r3, #192	@ 0xc0
 80090c0:	d825      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80090c2:	2b80      	cmp	r3, #128	@ 0x80
 80090c4:	d018      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80090c6:	2b80      	cmp	r3, #128	@ 0x80
 80090c8:	d821      	bhi.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80090ce:	2b40      	cmp	r3, #64	@ 0x40
 80090d0:	d007      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80090d2:	e01c      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d4:	4b63      	ldr	r3, [pc, #396]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d8:	4a62      	ldr	r2, [pc, #392]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090e0:	e01c      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	3308      	adds	r3, #8
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 fbe6 	bl	800a8bc <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090f6:	e011      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fc:	3328      	adds	r3, #40	@ 0x28
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fc8d 	bl	800aa20 <RCCEx_PLL3_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800910c:	e006      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009114:	e002      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800911a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009124:	4b4f      	ldr	r3, [pc, #316]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009128:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009132:	4a4c      	ldr	r2, [pc, #304]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009134:	430b      	orrs	r3, r1
 8009136:	6513      	str	r3, [r2, #80]	@ 0x50
 8009138:	e003      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800914e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009152:	2300      	movs	r3, #0
 8009154:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009158:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800915c:	460b      	mov	r3, r1
 800915e:	4313      	orrs	r3, r2
 8009160:	d053      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800916a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800916e:	d035      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009174:	d82e      	bhi.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009176:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800917a:	d031      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800917c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009180:	d828      	bhi.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009186:	d01a      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800918c:	d822      	bhi.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009192:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009196:	d007      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009198:	e01c      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800919a:	4b32      	ldr	r3, [pc, #200]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	4a31      	ldr	r2, [pc, #196]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091a6:	e01c      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ac:	3308      	adds	r3, #8
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fb83 	bl	800a8bc <RCCEx_PLL2_Config>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80091bc:	e011      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	3328      	adds	r3, #40	@ 0x28
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 fc2a 	bl	800aa20 <RCCEx_PLL3_Config>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091d2:	e006      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091da:	e002      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80091e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80091ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800921a:	2300      	movs	r3, #0
 800921c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009220:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009224:	460b      	mov	r3, r1
 8009226:	4313      	orrs	r3, r2
 8009228:	d056      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009236:	d038      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800923c:	d831      	bhi.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800923e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009242:	d034      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009244:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009248:	d82b      	bhi.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800924a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800924e:	d01d      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009254:	d825      	bhi.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d006      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800925a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800925e:	d00a      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009260:	e01f      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009262:	bf00      	nop
 8009264:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009268:	4ba2      	ldr	r3, [pc, #648]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800926a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926c:	4aa1      	ldr	r2, [pc, #644]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800926e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009274:	e01c      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800927a:	3308      	adds	r3, #8
 800927c:	2100      	movs	r1, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f001 fb1c 	bl	800a8bc <RCCEx_PLL2_Config>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800928a:	e011      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009290:	3328      	adds	r3, #40	@ 0x28
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fbc3 	bl	800aa20 <RCCEx_PLL3_Config>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092a0:	e006      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092a8:	e002      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80092ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80092b8:	4b8e      	ldr	r3, [pc, #568]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092c8:	4a8a      	ldr	r2, [pc, #552]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ca:	430b      	orrs	r3, r1
 80092cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80092ce:	e003      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80092d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80092e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80092f2:	460b      	mov	r3, r1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	d03a      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092fe:	2b30      	cmp	r3, #48	@ 0x30
 8009300:	d01f      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009302:	2b30      	cmp	r3, #48	@ 0x30
 8009304:	d819      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009306:	2b20      	cmp	r3, #32
 8009308:	d00c      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800930a:	2b20      	cmp	r3, #32
 800930c:	d815      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d019      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009312:	2b10      	cmp	r3, #16
 8009314:	d111      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009316:	4b77      	ldr	r3, [pc, #476]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	4a76      	ldr	r2, [pc, #472]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800931c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009322:	e011      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009328:	3308      	adds	r3, #8
 800932a:	2102      	movs	r1, #2
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fac5 	bl	800a8bc <RCCEx_PLL2_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009338:	e006      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009340:	e002      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009350:	4b68      	ldr	r3, [pc, #416]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009354:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935e:	4a65      	ldr	r2, [pc, #404]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009360:	430b      	orrs	r3, r1
 8009362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009364:	e003      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800936a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800936e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800937a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800937e:	2300      	movs	r3, #0
 8009380:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009384:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009388:	460b      	mov	r3, r1
 800938a:	4313      	orrs	r3, r2
 800938c:	d051      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800938e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009398:	d035      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800939a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800939e:	d82e      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80093a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093a4:	d031      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80093a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093aa:	d828      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80093ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093b0:	d01a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80093b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093b6:	d822      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80093bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093c0:	d007      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80093c2:	e01c      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b4b      	ldr	r3, [pc, #300]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	4a4a      	ldr	r2, [pc, #296]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093d0:	e01c      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d6:	3308      	adds	r3, #8
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fa6e 	bl	800a8bc <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093e6:	e011      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ec:	3328      	adds	r3, #40	@ 0x28
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fb15 	bl	800aa20 <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093fc:	e006      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009404:	e002      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009406:	bf00      	nop
 8009408:	e000      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800940a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800940c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009414:	4b37      	ldr	r3, [pc, #220]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009418:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800941c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009422:	4a34      	ldr	r2, [pc, #208]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009424:	430b      	orrs	r3, r1
 8009426:	6513      	str	r3, [r2, #80]	@ 0x50
 8009428:	e003      	b.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800943e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009442:	2300      	movs	r3, #0
 8009444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009448:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800944c:	460b      	mov	r3, r1
 800944e:	4313      	orrs	r3, r2
 8009450:	d056      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800945c:	d033      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800945e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009462:	d82c      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009464:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009468:	d02f      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800946a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800946e:	d826      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009474:	d02b      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009476:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800947a:	d820      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800947c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009480:	d012      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009486:	d81a      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d022      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800948c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009490:	d115      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	3308      	adds	r3, #8
 8009498:	2101      	movs	r1, #1
 800949a:	4618      	mov	r0, r3
 800949c:	f001 fa0e 	bl	800a8bc <RCCEx_PLL2_Config>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80094a6:	e015      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ac:	3328      	adds	r3, #40	@ 0x28
 80094ae:	2101      	movs	r1, #1
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 fab5 	bl	800aa20 <RCCEx_PLL3_Config>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80094bc:	e00a      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094c4:	e006      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094c6:	bf00      	nop
 80094c8:	e004      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094ca:	bf00      	nop
 80094cc:	e002      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094ce:	bf00      	nop
 80094d0:	e000      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10d      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094dc:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ea:	4a02      	ldr	r2, [pc, #8]	@ (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094ec:	430b      	orrs	r3, r1
 80094ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80094f0:	e006      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800950c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009510:	2300      	movs	r3, #0
 8009512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009516:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800951a:	460b      	mov	r3, r1
 800951c:	4313      	orrs	r3, r2
 800951e:	d055      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800952c:	d033      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800952e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009532:	d82c      	bhi.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009538:	d02f      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800953a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800953e:	d826      	bhi.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009544:	d02b      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009546:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800954a:	d820      	bhi.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800954c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009550:	d012      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009556:	d81a      	bhi.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d022      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800955c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009560:	d115      	bne.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009566:	3308      	adds	r3, #8
 8009568:	2101      	movs	r1, #1
 800956a:	4618      	mov	r0, r3
 800956c:	f001 f9a6 	bl	800a8bc <RCCEx_PLL2_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009576:	e015      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	3328      	adds	r3, #40	@ 0x28
 800957e:	2101      	movs	r1, #1
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fa4d 	bl	800aa20 <RCCEx_PLL3_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800958c:	e00a      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009594:	e006      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009596:	bf00      	nop
 8009598:	e004      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800959a:	bf00      	nop
 800959c:	e002      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800959e:	bf00      	nop
 80095a0:	e000      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80095ac:	4ba3      	ldr	r3, [pc, #652]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80095b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095bc:	4a9f      	ldr	r2, [pc, #636]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095be:	430b      	orrs	r3, r1
 80095c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80095d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095dc:	2300      	movs	r3, #0
 80095de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80095e6:	460b      	mov	r3, r1
 80095e8:	4313      	orrs	r3, r2
 80095ea:	d037      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f6:	d00e      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80095f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095fc:	d816      	bhi.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d018      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009606:	d111      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b8c      	ldr	r3, [pc, #560]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	4a8b      	ldr	r2, [pc, #556]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009614:	e00f      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	3308      	adds	r3, #8
 800961c:	2101      	movs	r1, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f001 f94c 	bl	800a8bc <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800962a:	e004      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009632:	e000      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800963e:	4b7f      	ldr	r3, [pc, #508]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009642:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964c:	4a7b      	ldr	r2, [pc, #492]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800964e:	430b      	orrs	r3, r1
 8009650:	6513      	str	r3, [r2, #80]	@ 0x50
 8009652:	e003      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800966c:	2300      	movs	r3, #0
 800966e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009672:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009676:	460b      	mov	r3, r1
 8009678:	4313      	orrs	r3, r2
 800967a:	d039      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009682:	2b03      	cmp	r3, #3
 8009684:	d81c      	bhi.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009686:	a201      	add	r2, pc, #4	@ (adr r2, 800968c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096c9 	.word	0x080096c9
 8009690:	0800969d 	.word	0x0800969d
 8009694:	080096ab 	.word	0x080096ab
 8009698:	080096c9 	.word	0x080096c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969c:	4b67      	ldr	r3, [pc, #412]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	4a66      	ldr	r2, [pc, #408]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80096a8:	e00f      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ae:	3308      	adds	r3, #8
 80096b0:	2102      	movs	r1, #2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f001 f902 	bl	800a8bc <RCCEx_PLL2_Config>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80096be:	e004      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096c6:	e000      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80096c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80096d2:	4b5a      	ldr	r3, [pc, #360]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096d6:	f023 0103 	bic.w	r1, r3, #3
 80096da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e0:	4a56      	ldr	r2, [pc, #344]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096e2:	430b      	orrs	r3, r1
 80096e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096e6:	e003      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80096fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009700:	2300      	movs	r3, #0
 8009702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009706:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800970a:	460b      	mov	r3, r1
 800970c:	4313      	orrs	r3, r2
 800970e:	f000 809f 	beq.w	8009850 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009712:	4b4b      	ldr	r3, [pc, #300]	@ (8009840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a4a      	ldr	r2, [pc, #296]	@ (8009840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800971c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800971e:	f7fc f8f9 	bl	8005914 <HAL_GetTick>
 8009722:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009726:	e00b      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009728:	f7fc f8f4 	bl	8005914 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b64      	cmp	r3, #100	@ 0x64
 8009736:	d903      	bls.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800973e:	e005      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009740:	4b3f      	ldr	r3, [pc, #252]	@ (8009840 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009748:	2b00      	cmp	r3, #0
 800974a:	d0ed      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800974c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009750:	2b00      	cmp	r3, #0
 8009752:	d179      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009754:	4b39      	ldr	r3, [pc, #228]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009760:	4053      	eors	r3, r2
 8009762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009766:	2b00      	cmp	r3, #0
 8009768:	d015      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800976a:	4b34      	ldr	r3, [pc, #208]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800976c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800976e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009772:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009776:	4b31      	ldr	r3, [pc, #196]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800977a:	4a30      	ldr	r2, [pc, #192]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800977c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009780:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009782:	4b2e      	ldr	r3, [pc, #184]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009786:	4a2d      	ldr	r2, [pc, #180]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800978c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800978e:	4a2b      	ldr	r2, [pc, #172]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009794:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800979e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a2:	d118      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a4:	f7fc f8b6 	bl	8005914 <HAL_GetTick>
 80097a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097ac:	e00d      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ae:	f7fc f8b1 	bl	8005914 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80097b8:	1ad2      	subs	r2, r2, r3
 80097ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80097be:	429a      	cmp	r2, r3
 80097c0:	d903      	bls.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80097c8:	e005      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097ca:	4b1c      	ldr	r3, [pc, #112]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0eb      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80097d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d129      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097ee:	d10e      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80097f0:	4b12      	ldr	r3, [pc, #72]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80097f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009800:	091a      	lsrs	r2, r3, #4
 8009802:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009804:	4013      	ands	r3, r2
 8009806:	4a0d      	ldr	r2, [pc, #52]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009808:	430b      	orrs	r3, r1
 800980a:	6113      	str	r3, [r2, #16]
 800980c:	e005      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800980e:	4b0b      	ldr	r3, [pc, #44]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	4a0a      	ldr	r2, [pc, #40]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009818:	6113      	str	r3, [r2, #16]
 800981a:	4b08      	ldr	r3, [pc, #32]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800981c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800982a:	4a04      	ldr	r2, [pc, #16]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009830:	e00e      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800983a:	e009      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800983c:	58024400 	.word	0x58024400
 8009840:	58024800 	.word	0x58024800
 8009844:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800984c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f002 0301 	and.w	r3, r2, #1
 800985c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009860:	2300      	movs	r3, #0
 8009862:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009866:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800986a:	460b      	mov	r3, r1
 800986c:	4313      	orrs	r3, r2
 800986e:	f000 8089 	beq.w	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009878:	2b28      	cmp	r3, #40	@ 0x28
 800987a:	d86b      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800987c:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	0800995d 	.word	0x0800995d
 8009888:	08009955 	.word	0x08009955
 800988c:	08009955 	.word	0x08009955
 8009890:	08009955 	.word	0x08009955
 8009894:	08009955 	.word	0x08009955
 8009898:	08009955 	.word	0x08009955
 800989c:	08009955 	.word	0x08009955
 80098a0:	08009955 	.word	0x08009955
 80098a4:	08009929 	.word	0x08009929
 80098a8:	08009955 	.word	0x08009955
 80098ac:	08009955 	.word	0x08009955
 80098b0:	08009955 	.word	0x08009955
 80098b4:	08009955 	.word	0x08009955
 80098b8:	08009955 	.word	0x08009955
 80098bc:	08009955 	.word	0x08009955
 80098c0:	08009955 	.word	0x08009955
 80098c4:	0800993f 	.word	0x0800993f
 80098c8:	08009955 	.word	0x08009955
 80098cc:	08009955 	.word	0x08009955
 80098d0:	08009955 	.word	0x08009955
 80098d4:	08009955 	.word	0x08009955
 80098d8:	08009955 	.word	0x08009955
 80098dc:	08009955 	.word	0x08009955
 80098e0:	08009955 	.word	0x08009955
 80098e4:	0800995d 	.word	0x0800995d
 80098e8:	08009955 	.word	0x08009955
 80098ec:	08009955 	.word	0x08009955
 80098f0:	08009955 	.word	0x08009955
 80098f4:	08009955 	.word	0x08009955
 80098f8:	08009955 	.word	0x08009955
 80098fc:	08009955 	.word	0x08009955
 8009900:	08009955 	.word	0x08009955
 8009904:	0800995d 	.word	0x0800995d
 8009908:	08009955 	.word	0x08009955
 800990c:	08009955 	.word	0x08009955
 8009910:	08009955 	.word	0x08009955
 8009914:	08009955 	.word	0x08009955
 8009918:	08009955 	.word	0x08009955
 800991c:	08009955 	.word	0x08009955
 8009920:	08009955 	.word	0x08009955
 8009924:	0800995d 	.word	0x0800995d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992c:	3308      	adds	r3, #8
 800992e:	2101      	movs	r1, #1
 8009930:	4618      	mov	r0, r3
 8009932:	f000 ffc3 	bl	800a8bc <RCCEx_PLL2_Config>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800993c:	e00f      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009942:	3328      	adds	r3, #40	@ 0x28
 8009944:	2101      	movs	r1, #1
 8009946:	4618      	mov	r0, r3
 8009948:	f001 f86a 	bl	800aa20 <RCCEx_PLL3_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009952:	e004      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800995c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009966:	4bbf      	ldr	r3, [pc, #764]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009974:	4abb      	ldr	r2, [pc, #748]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009976:	430b      	orrs	r3, r1
 8009978:	6553      	str	r3, [r2, #84]	@ 0x54
 800997a:	e003      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	f002 0302 	and.w	r3, r2, #2
 8009990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009994:	2300      	movs	r3, #0
 8009996:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800999a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800999e:	460b      	mov	r3, r1
 80099a0:	4313      	orrs	r3, r2
 80099a2:	d041      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d824      	bhi.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	08009a01 	.word	0x08009a01
 80099b8:	080099cd 	.word	0x080099cd
 80099bc:	080099e3 	.word	0x080099e3
 80099c0:	08009a01 	.word	0x08009a01
 80099c4:	08009a01 	.word	0x08009a01
 80099c8:	08009a01 	.word	0x08009a01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d0:	3308      	adds	r3, #8
 80099d2:	2101      	movs	r1, #1
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 ff71 	bl	800a8bc <RCCEx_PLL2_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099e0:	e00f      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	3328      	adds	r3, #40	@ 0x28
 80099e8:	2101      	movs	r1, #1
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 f818 	bl	800aa20 <RCCEx_PLL3_Config>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099f6:	e004      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099fe:	e000      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a0a:	4b96      	ldr	r3, [pc, #600]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0e:	f023 0107 	bic.w	r1, r3, #7
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a18:	4a92      	ldr	r2, [pc, #584]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a1e:	e003      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f002 0304 	and.w	r3, r2, #4
 8009a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4313      	orrs	r3, r2
 8009a46:	d044      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a50:	2b05      	cmp	r3, #5
 8009a52:	d825      	bhi.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009a54:	a201      	add	r2, pc, #4	@ (adr r2, 8009a5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009aa9 	.word	0x08009aa9
 8009a60:	08009a75 	.word	0x08009a75
 8009a64:	08009a8b 	.word	0x08009a8b
 8009a68:	08009aa9 	.word	0x08009aa9
 8009a6c:	08009aa9 	.word	0x08009aa9
 8009a70:	08009aa9 	.word	0x08009aa9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a78:	3308      	adds	r3, #8
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 ff1d 	bl	800a8bc <RCCEx_PLL2_Config>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a88:	e00f      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8e:	3328      	adds	r3, #40	@ 0x28
 8009a90:	2101      	movs	r1, #1
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 ffc4 	bl	800aa20 <RCCEx_PLL3_Config>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a9e:	e004      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aa6:	e000      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10b      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab6:	f023 0107 	bic.w	r1, r3, #7
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ac2:	4a68      	ldr	r2, [pc, #416]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ac8:	e003      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f002 0320 	and.w	r3, r2, #32
 8009ade:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009aec:	460b      	mov	r3, r1
 8009aee:	4313      	orrs	r3, r2
 8009af0:	d055      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009afe:	d033      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b04:	d82c      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0a:	d02f      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b10:	d826      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b16:	d02b      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b1c:	d820      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b22:	d012      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b28:	d81a      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d022      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b32:	d115      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 febd 	bl	800a8bc <RCCEx_PLL2_Config>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b48:	e015      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4e:	3328      	adds	r3, #40	@ 0x28
 8009b50:	2102      	movs	r1, #2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 ff64 	bl	800aa20 <RCCEx_PLL3_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b5e:	e00a      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b66:	e006      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b68:	bf00      	nop
 8009b6a:	e004      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b6c:	bf00      	nop
 8009b6e:	e002      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b70:	bf00      	nop
 8009b72:	e000      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b7e:	4b39      	ldr	r3, [pc, #228]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8e:	4a35      	ldr	r2, [pc, #212]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b90:	430b      	orrs	r3, r1
 8009b92:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b94:	e003      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009bb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d058      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009bca:	d033      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009bcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009bd0:	d82c      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bd6:	d02f      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bdc:	d826      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009be2:	d02b      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009be8:	d820      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bee:	d012      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bf4:	d81a      	bhi.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d022      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bfe:	d115      	bne.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c04:	3308      	adds	r3, #8
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fe57 	bl	800a8bc <RCCEx_PLL2_Config>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c14:	e015      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	3328      	adds	r3, #40	@ 0x28
 8009c1c:	2102      	movs	r1, #2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fefe 	bl	800aa20 <RCCEx_PLL3_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c2a:	e00a      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c32:	e006      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c34:	bf00      	nop
 8009c36:	e004      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c38:	bf00      	nop
 8009c3a:	e002      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c3c:	bf00      	nop
 8009c3e:	e000      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10e      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c4a:	4b06      	ldr	r3, [pc, #24]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c5a:	4a02      	ldr	r2, [pc, #8]	@ (8009c64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c60:	e006      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009c62:	bf00      	nop
 8009c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	d055      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c9c:	d033      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009ca2:	d82c      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ca8:	d02f      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cae:	d826      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009cb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009cb4:	d02b      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009cb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009cba:	d820      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc0:	d012      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009cc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc6:	d81a      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d022      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd0:	d115      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fdee 	bl	800a8bc <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ce6:	e015      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	3328      	adds	r3, #40	@ 0x28
 8009cee:	2102      	movs	r1, #2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fe95 	bl	800aa20 <RCCEx_PLL3_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009cfc:	e00a      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d04:	e006      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d06:	bf00      	nop
 8009d08:	e004      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d0a:	bf00      	nop
 8009d0c:	e002      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d2c:	4a9d      	ldr	r2, [pc, #628]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d2e:	430b      	orrs	r3, r1
 8009d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d32:	e003      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	f002 0308 	and.w	r3, r2, #8
 8009d48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009d56:	460b      	mov	r3, r1
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	d01e      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d68:	d10c      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6e:	3328      	adds	r3, #40	@ 0x28
 8009d70:	2102      	movs	r1, #2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fe54 	bl	800aa20 <RCCEx_PLL3_Config>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d84:	4b87      	ldr	r3, [pc, #540]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d94:	4a83      	ldr	r2, [pc, #524]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d96:	430b      	orrs	r3, r1
 8009d98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f002 0310 	and.w	r3, r2, #16
 8009da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009daa:	2300      	movs	r3, #0
 8009dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009db0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009db4:	460b      	mov	r3, r1
 8009db6:	4313      	orrs	r3, r2
 8009db8:	d01e      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc6:	d10c      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dcc:	3328      	adds	r3, #40	@ 0x28
 8009dce:	2102      	movs	r1, #2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fe25 	bl	800aa20 <RCCEx_PLL3_Config>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009de2:	4b70      	ldr	r3, [pc, #448]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009df2:	4a6c      	ldr	r2, [pc, #432]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df4:	430b      	orrs	r3, r1
 8009df6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e12:	460b      	mov	r3, r1
 8009e14:	4313      	orrs	r3, r2
 8009e16:	d03e      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e24:	d022      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e2a:	d81b      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e34:	d00b      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009e36:	e015      	b.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fd3b 	bl	800a8bc <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e4c:	e00f      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e52:	3328      	adds	r3, #40	@ 0x28
 8009e54:	2102      	movs	r1, #2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fde2 	bl	800aa20 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e62:	e004      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e6a:	e000      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e76:	4b4b      	ldr	r3, [pc, #300]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e86:	4a47      	ldr	r2, [pc, #284]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e8c:	e003      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009ea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ea8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009eac:	460b      	mov	r3, r1
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	d03b      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ebe:	d01f      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009ec0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ec4:	d818      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eca:	d003      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ed0:	d007      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009ed2:	e011      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed4:	4b33      	ldr	r3, [pc, #204]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed8:	4a32      	ldr	r2, [pc, #200]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ee0:	e00f      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee6:	3328      	adds	r3, #40	@ 0x28
 8009ee8:	2101      	movs	r1, #1
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fd98 	bl	800aa20 <RCCEx_PLL3_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ef6:	e004      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009efe:	e000      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10b      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f0a:	4b26      	ldr	r3, [pc, #152]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1a:	4a22      	ldr	r2, [pc, #136]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f20:	e003      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009f36:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f38:	2300      	movs	r3, #0
 8009f3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d034      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f54:	d007      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009f56:	e011      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f58:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5c:	4a11      	ldr	r2, [pc, #68]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f64:	e00e      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fca4 	bl	800a8bc <RCCEx_PLL2_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f7a:	e003      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10d      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f8c:	4b05      	ldr	r3, [pc, #20]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9a:	4a02      	ldr	r2, [pc, #8]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fa0:	e006      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009fa2:	bf00      	nop
 8009fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009fc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	d00c      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd0:	3328      	adds	r3, #40	@ 0x28
 8009fd2:	2102      	movs	r1, #2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 fd23 	bl	800aa20 <RCCEx_PLL3_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ff2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ff8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4313      	orrs	r3, r2
 800a000:	d038      	beq.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a00e:	d018      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a014:	d811      	bhi.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a01a:	d014      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a020:	d80b      	bhi.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d011      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a02a:	d106      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a02c:	4bc3      	ldr	r3, [pc, #780]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	4ac2      	ldr	r2, [pc, #776]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a038:	e008      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a040:	e004      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a042:	bf00      	nop
 800a044:	e002      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a046:	bf00      	nop
 800a048:	e000      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a04a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a04c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10b      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a054:	4bb9      	ldr	r3, [pc, #740]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a058:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a064:	4ab5      	ldr	r2, [pc, #724]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a066:	430b      	orrs	r3, r1
 800a068:	6553      	str	r3, [r2, #84]	@ 0x54
 800a06a:	e003      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a06c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a080:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a082:	2300      	movs	r3, #0
 800a084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a086:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a08a:	460b      	mov	r3, r1
 800a08c:	4313      	orrs	r3, r2
 800a08e:	d009      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a090:	4baa      	ldr	r3, [pc, #680]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a094:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a09e:	4aa7      	ldr	r2, [pc, #668]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a0b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	d00a      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a0c0:	4b9e      	ldr	r3, [pc, #632]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a0d0:	4a9a      	ldr	r2, [pc, #616]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	d009      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0f2:	4b92      	ldr	r3, [pc, #584]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a100:	4a8e      	ldr	r2, [pc, #568]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a102:	430b      	orrs	r3, r1
 800a104:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a112:	643b      	str	r3, [r7, #64]	@ 0x40
 800a114:	2300      	movs	r3, #0
 800a116:	647b      	str	r3, [r7, #68]	@ 0x44
 800a118:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a11c:	460b      	mov	r3, r1
 800a11e:	4313      	orrs	r3, r2
 800a120:	d00e      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a122:	4b86      	ldr	r3, [pc, #536]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	4a85      	ldr	r2, [pc, #532]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a12c:	6113      	str	r3, [r2, #16]
 800a12e:	4b83      	ldr	r3, [pc, #524]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a130:	6919      	ldr	r1, [r3, #16]
 800a132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a136:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a13a:	4a80      	ldr	r2, [pc, #512]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a14c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a152:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a156:	460b      	mov	r3, r1
 800a158:	4313      	orrs	r3, r2
 800a15a:	d009      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a15c:	4b77      	ldr	r3, [pc, #476]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a15e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a160:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16a:	4a74      	ldr	r2, [pc, #464]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a16c:	430b      	orrs	r3, r1
 800a16e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a17c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a17e:	2300      	movs	r3, #0
 800a180:	637b      	str	r3, [r7, #52]	@ 0x34
 800a182:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a186:	460b      	mov	r3, r1
 800a188:	4313      	orrs	r3, r2
 800a18a:	d00a      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a18c:	4b6b      	ldr	r3, [pc, #428]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a18e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a190:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a19c:	4a67      	ldr	r2, [pc, #412]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	d011      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fb78 	bl	800a8bc <RCCEx_PLL2_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6239      	str	r1, [r7, #32]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	d011      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a202:	3308      	adds	r3, #8
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fb58 	bl	800a8bc <RCCEx_PLL2_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a21e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	2100      	movs	r1, #0
 800a22c:	61b9      	str	r1, [r7, #24]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	61fb      	str	r3, [r7, #28]
 800a234:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a238:	460b      	mov	r3, r1
 800a23a:	4313      	orrs	r3, r2
 800a23c:	d011      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a242:	3308      	adds	r3, #8
 800a244:	2102      	movs	r1, #2
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fb38 	bl	800a8bc <RCCEx_PLL2_Config>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a25e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	2100      	movs	r1, #0
 800a26c:	6139      	str	r1, [r7, #16]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a278:	460b      	mov	r3, r1
 800a27a:	4313      	orrs	r3, r2
 800a27c:	d011      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a282:	3328      	adds	r3, #40	@ 0x28
 800a284:	2100      	movs	r1, #0
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fbca 	bl	800aa20 <RCCEx_PLL3_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a29e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	f003 0310 	and.w	r3, r3, #16
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	d011      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c2:	3328      	adds	r3, #40	@ 0x28
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fbaa 	bl	800aa20 <RCCEx_PLL3_Config>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	607b      	str	r3, [r7, #4]
 800a2f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	d011      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a302:	3328      	adds	r3, #40	@ 0x28
 800a304:	2102      	movs	r1, #2
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fb8a 	bl	800aa20 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a31e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a322:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e000      	b.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
}
 800a330:	4618      	mov	r0, r3
 800a332:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a336:	46bd      	mov	sp, r7
 800a338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a33c:	58024400 	.word	0x58024400

0800a340 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a344:	f7fe fd54 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 800a348:	4602      	mov	r2, r0
 800a34a:	4b06      	ldr	r3, [pc, #24]	@ (800a364 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	091b      	lsrs	r3, r3, #4
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	4904      	ldr	r1, [pc, #16]	@ (800a368 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a356:	5ccb      	ldrb	r3, [r1, r3]
 800a358:	f003 031f 	and.w	r3, r3, #31
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a360:	4618      	mov	r0, r3
 800a362:	bd80      	pop	{r7, pc}
 800a364:	58024400 	.word	0x58024400
 800a368:	0801504c 	.word	0x0801504c

0800a36c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b089      	sub	sp, #36	@ 0x24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a374:	4ba1      	ldr	r3, [pc, #644]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a37e:	4b9f      	ldr	r3, [pc, #636]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	0b1b      	lsrs	r3, r3, #12
 800a384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a388:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a38a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38e:	091b      	lsrs	r3, r3, #4
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a396:	4b99      	ldr	r3, [pc, #612]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39a:	08db      	lsrs	r3, r3, #3
 800a39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 8111 	beq.w	800a5dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	f000 8083 	beq.w	800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	f200 80a1 	bhi.w	800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d056      	beq.n	800a484 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a3d6:	e099      	b.n	800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d8:	4b88      	ldr	r3, [pc, #544]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d02d      	beq.n	800a440 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3e4:	4b85      	ldr	r3, [pc, #532]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	08db      	lsrs	r3, r3, #3
 800a3ea:	f003 0303 	and.w	r3, r3, #3
 800a3ee:	4a84      	ldr	r2, [pc, #528]	@ (800a600 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	ee07 3a90 	vmov	s15, r3
 800a3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40e:	4b7b      	ldr	r3, [pc, #492]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a416:	ee07 3a90 	vmov	s15, r3
 800a41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a422:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a43e:	e087      	b.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	ee07 3a90 	vmov	s15, r3
 800a446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a608 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a452:	4b6a      	ldr	r3, [pc, #424]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45a:	ee07 3a90 	vmov	s15, r3
 800a45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a462:	ed97 6a03 	vldr	s12, [r7, #12]
 800a466:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a482:	e065      	b.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	ee07 3a90 	vmov	s15, r3
 800a48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a496:	4b59      	ldr	r3, [pc, #356]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49e:	ee07 3a90 	vmov	s15, r3
 800a4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4c6:	e043      	b.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4da:	4b48      	ldr	r3, [pc, #288]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a50a:	e021      	b.n	800a550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a60c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51e:	4b37      	ldr	r3, [pc, #220]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a532:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a54e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a550:	4b2a      	ldr	r3, [pc, #168]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a554:	0a5b      	lsrs	r3, r3, #9
 800a556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a56a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a576:	ee17 2a90 	vmov	r2, s15
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a57e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a582:	0c1b      	lsrs	r3, r3, #16
 800a584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a594:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a598:	edd7 6a07 	vldr	s13, [r7, #28]
 800a59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a4:	ee17 2a90 	vmov	r2, s15
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a5ac:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b0:	0e1b      	lsrs	r3, r3, #24
 800a5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5d2:	ee17 2a90 	vmov	r2, s15
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a5da:	e008      	b.n	800a5ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	609a      	str	r2, [r3, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	3724      	adds	r7, #36	@ 0x24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	58024400 	.word	0x58024400
 800a600:	03d09000 	.word	0x03d09000
 800a604:	46000000 	.word	0x46000000
 800a608:	4c742400 	.word	0x4c742400
 800a60c:	4a742400 	.word	0x4a742400
 800a610:	4af42400 	.word	0x4af42400

0800a614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a614:	b480      	push	{r7}
 800a616:	b089      	sub	sp, #36	@ 0x24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a61c:	4ba1      	ldr	r3, [pc, #644]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a620:	f003 0303 	and.w	r3, r3, #3
 800a624:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a626:	4b9f      	ldr	r3, [pc, #636]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	0d1b      	lsrs	r3, r3, #20
 800a62c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a630:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a632:	4b9c      	ldr	r3, [pc, #624]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a636:	0a1b      	lsrs	r3, r3, #8
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a63e:	4b99      	ldr	r3, [pc, #612]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a642:	08db      	lsrs	r3, r3, #3
 800a644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 8111 	beq.w	800a884 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	2b02      	cmp	r3, #2
 800a666:	f000 8083 	beq.w	800a770 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	f200 80a1 	bhi.w	800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d056      	beq.n	800a72c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a67e:	e099      	b.n	800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a680:	4b88      	ldr	r3, [pc, #544]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0320 	and.w	r3, r3, #32
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02d      	beq.n	800a6e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a68c:	4b85      	ldr	r3, [pc, #532]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	08db      	lsrs	r3, r3, #3
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	4a84      	ldr	r2, [pc, #528]	@ (800a8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a698:	fa22 f303 	lsr.w	r3, r2, r3
 800a69c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	ee07 3a90 	vmov	s15, r3
 800a6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b6:	4b7b      	ldr	r3, [pc, #492]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6e6:	e087      	b.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fa:	4b6a      	ldr	r3, [pc, #424]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a70e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a72a:	e065      	b.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a736:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a73e:	4b59      	ldr	r3, [pc, #356]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a752:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a76e:	e043      	b.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a782:	4b48      	ldr	r3, [pc, #288]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a792:	ed97 6a03 	vldr	s12, [r7, #12]
 800a796:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7b2:	e021      	b.n	800a7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c6:	4b37      	ldr	r3, [pc, #220]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a8ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a7f8:	4b2a      	ldr	r3, [pc, #168]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fc:	0a5b      	lsrs	r3, r3, #9
 800a7fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a80e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a812:	edd7 6a07 	vldr	s13, [r7, #28]
 800a816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81e:	ee17 2a90 	vmov	r2, s15
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a826:	4b1f      	ldr	r3, [pc, #124]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a83c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a840:	edd7 6a07 	vldr	s13, [r7, #28]
 800a844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84c:	ee17 2a90 	vmov	r2, s15
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a854:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a858:	0e1b      	lsrs	r3, r3, #24
 800a85a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a86a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a86e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a87a:	ee17 2a90 	vmov	r2, s15
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a882:	e008      	b.n	800a896 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	609a      	str	r2, [r3, #8]
}
 800a896:	bf00      	nop
 800a898:	3724      	adds	r7, #36	@ 0x24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	03d09000 	.word	0x03d09000
 800a8ac:	46000000 	.word	0x46000000
 800a8b0:	4c742400 	.word	0x4c742400
 800a8b4:	4a742400 	.word	0x4a742400
 800a8b8:	4af42400 	.word	0x4af42400

0800a8bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8ca:	4b53      	ldr	r3, [pc, #332]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	d101      	bne.n	800a8da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e099      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8da:	4b4f      	ldr	r3, [pc, #316]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a4e      	ldr	r2, [pc, #312]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a8e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e6:	f7fb f815 	bl	8005914 <HAL_GetTick>
 800a8ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8ec:	e008      	b.n	800a900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8ee:	f7fb f811 	bl	8005914 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d901      	bls.n	800a900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e086      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a900:	4b45      	ldr	r3, [pc, #276]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f0      	bne.n	800a8ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a90c:	4b42      	ldr	r3, [pc, #264]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	031b      	lsls	r3, r3, #12
 800a91a:	493f      	ldr	r1, [pc, #252]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	3b01      	subs	r3, #1
 800a926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	3b01      	subs	r3, #1
 800a930:	025b      	lsls	r3, r3, #9
 800a932:	b29b      	uxth	r3, r3
 800a934:	431a      	orrs	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	041b      	lsls	r3, r3, #16
 800a93e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a942:	431a      	orrs	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	3b01      	subs	r3, #1
 800a94a:	061b      	lsls	r3, r3, #24
 800a94c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a950:	4931      	ldr	r1, [pc, #196]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a952:	4313      	orrs	r3, r2
 800a954:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a956:	4b30      	ldr	r3, [pc, #192]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	492d      	ldr	r1, [pc, #180]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a964:	4313      	orrs	r3, r2
 800a966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a968:	4b2b      	ldr	r3, [pc, #172]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96c:	f023 0220 	bic.w	r2, r3, #32
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	4928      	ldr	r1, [pc, #160]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a976:	4313      	orrs	r3, r2
 800a978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a97a:	4b27      	ldr	r3, [pc, #156]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97e:	4a26      	ldr	r2, [pc, #152]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a980:	f023 0310 	bic.w	r3, r3, #16
 800a984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a986:	4b24      	ldr	r3, [pc, #144]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a98a:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <RCCEx_PLL2_Config+0x160>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	69d2      	ldr	r2, [r2, #28]
 800a992:	00d2      	lsls	r2, r2, #3
 800a994:	4920      	ldr	r1, [pc, #128]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a996:	4313      	orrs	r3, r2
 800a998:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a99a:	4b1f      	ldr	r3, [pc, #124]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99e:	4a1e      	ldr	r2, [pc, #120]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9a0:	f043 0310 	orr.w	r3, r3, #16
 800a9a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a9ac:	4b1a      	ldr	r3, [pc, #104]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b0:	4a19      	ldr	r2, [pc, #100]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9b8:	e00f      	b.n	800a9da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d106      	bne.n	800a9ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a9c0:	4b15      	ldr	r3, [pc, #84]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	4a14      	ldr	r2, [pc, #80]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9cc:	e005      	b.n	800a9da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9ce:	4b12      	ldr	r3, [pc, #72]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	4a11      	ldr	r2, [pc, #68]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9da:	4b0f      	ldr	r3, [pc, #60]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a0e      	ldr	r2, [pc, #56]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800a9e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9e6:	f7fa ff95 	bl	8005914 <HAL_GetTick>
 800a9ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9ec:	e008      	b.n	800aa00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9ee:	f7fa ff91 	bl	8005914 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d901      	bls.n	800aa00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9fc:	2303      	movs	r3, #3
 800a9fe:	e006      	b.n	800aa0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa00:	4b05      	ldr	r3, [pc, #20]	@ (800aa18 <RCCEx_PLL2_Config+0x15c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0f0      	beq.n	800a9ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	ffff0007 	.word	0xffff0007

0800aa20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa2e:	4b53      	ldr	r3, [pc, #332]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d101      	bne.n	800aa3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e099      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa3e:	4b4f      	ldr	r3, [pc, #316]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a4e      	ldr	r2, [pc, #312]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa4a:	f7fa ff63 	bl	8005914 <HAL_GetTick>
 800aa4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa50:	e008      	b.n	800aa64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa52:	f7fa ff5f 	bl	8005914 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d901      	bls.n	800aa64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e086      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa64:	4b45      	ldr	r3, [pc, #276]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1f0      	bne.n	800aa52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa70:	4b42      	ldr	r3, [pc, #264]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	493f      	ldr	r1, [pc, #252]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	025b      	lsls	r3, r3, #9
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	041b      	lsls	r3, r3, #16
 800aaa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aaa6:	431a      	orrs	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	061b      	lsls	r3, r3, #24
 800aab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aab4:	4931      	ldr	r1, [pc, #196]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aaba:	4b30      	ldr	r3, [pc, #192]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	492d      	ldr	r1, [pc, #180]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aacc:	4b2b      	ldr	r3, [pc, #172]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	4928      	ldr	r1, [pc, #160]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aada:	4313      	orrs	r3, r2
 800aadc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aade:	4b27      	ldr	r3, [pc, #156]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae2:	4a26      	ldr	r2, [pc, #152]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aaea:	4b24      	ldr	r3, [pc, #144]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aaec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aaee:	4b24      	ldr	r3, [pc, #144]	@ (800ab80 <RCCEx_PLL3_Config+0x160>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	69d2      	ldr	r2, [r2, #28]
 800aaf6:	00d2      	lsls	r2, r2, #3
 800aaf8:	4920      	ldr	r1, [pc, #128]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aafe:	4b1f      	ldr	r3, [pc, #124]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab02:	4a1e      	ldr	r2, [pc, #120]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab10:	4b1a      	ldr	r3, [pc, #104]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab14:	4a19      	ldr	r2, [pc, #100]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ab1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab1c:	e00f      	b.n	800ab3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d106      	bne.n	800ab32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab24:	4b15      	ldr	r3, [pc, #84]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	4a14      	ldr	r2, [pc, #80]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab30:	e005      	b.n	800ab3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab32:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab36:	4a11      	ldr	r2, [pc, #68]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a0e      	ldr	r2, [pc, #56]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab4a:	f7fa fee3 	bl	8005914 <HAL_GetTick>
 800ab4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab50:	e008      	b.n	800ab64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab52:	f7fa fedf 	bl	8005914 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d901      	bls.n	800ab64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e006      	b.n	800ab72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab64:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <RCCEx_PLL3_Config+0x15c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0f0      	beq.n	800ab52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	ffff0007 	.word	0xffff0007

0800ab84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e049      	b.n	800ac2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f841 	bl	800ac32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f000 f9e8 	bl	800af98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
	...

0800ac48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d001      	beq.n	800ac60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e054      	b.n	800ad0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0201 	orr.w	r2, r2, #1
 800ac76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <HAL_TIM_Base_Start_IT+0xd0>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d022      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac8a:	d01d      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a22      	ldr	r2, [pc, #136]	@ (800ad1c <HAL_TIM_Base_Start_IT+0xd4>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d018      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a21      	ldr	r2, [pc, #132]	@ (800ad20 <HAL_TIM_Base_Start_IT+0xd8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d013      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1f      	ldr	r2, [pc, #124]	@ (800ad24 <HAL_TIM_Base_Start_IT+0xdc>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00e      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1e      	ldr	r2, [pc, #120]	@ (800ad28 <HAL_TIM_Base_Start_IT+0xe0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d009      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a1c      	ldr	r2, [pc, #112]	@ (800ad2c <HAL_TIM_Base_Start_IT+0xe4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d004      	beq.n	800acc8 <HAL_TIM_Base_Start_IT+0x80>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad30 <HAL_TIM_Base_Start_IT+0xe8>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d115      	bne.n	800acf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689a      	ldr	r2, [r3, #8]
 800acce:	4b19      	ldr	r3, [pc, #100]	@ (800ad34 <HAL_TIM_Base_Start_IT+0xec>)
 800acd0:	4013      	ands	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b06      	cmp	r3, #6
 800acd8:	d015      	beq.n	800ad06 <HAL_TIM_Base_Start_IT+0xbe>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ace0:	d011      	beq.n	800ad06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0201 	orr.w	r2, r2, #1
 800acf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf2:	e008      	b.n	800ad06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0201 	orr.w	r2, r2, #1
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	e000      	b.n	800ad08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	40010000 	.word	0x40010000
 800ad1c:	40000400 	.word	0x40000400
 800ad20:	40000800 	.word	0x40000800
 800ad24:	40000c00 	.word	0x40000c00
 800ad28:	40010400 	.word	0x40010400
 800ad2c:	40001800 	.word	0x40001800
 800ad30:	40014000 	.word	0x40014000
 800ad34:	00010007 	.word	0x00010007

0800ad38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f003 0302 	and.w	r3, r3, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d020      	beq.n	800ad9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01b      	beq.n	800ad9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0202 	mvn.w	r2, #2
 800ad6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f8e9 	bl	800af5a <HAL_TIM_IC_CaptureCallback>
 800ad88:	e005      	b.n	800ad96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f8db 	bl	800af46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f8ec 	bl	800af6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d020      	beq.n	800ade8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01b      	beq.n	800ade8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f06f 0204 	mvn.w	r2, #4
 800adb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f8c3 	bl	800af5a <HAL_TIM_IC_CaptureCallback>
 800add4:	e005      	b.n	800ade2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f8b5 	bl	800af46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f8c6 	bl	800af6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d020      	beq.n	800ae34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f003 0308 	and.w	r3, r3, #8
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01b      	beq.n	800ae34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0208 	mvn.w	r2, #8
 800ae04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f89d 	bl	800af5a <HAL_TIM_IC_CaptureCallback>
 800ae20:	e005      	b.n	800ae2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f88f 	bl	800af46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f8a0 	bl	800af6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d020      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f003 0310 	and.w	r3, r3, #16
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01b      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f06f 0210 	mvn.w	r2, #16
 800ae50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2208      	movs	r2, #8
 800ae56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f877 	bl	800af5a <HAL_TIM_IC_CaptureCallback>
 800ae6c:	e005      	b.n	800ae7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f869 	bl	800af46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f87a 	bl	800af6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00c      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0201 	mvn.w	r2, #1
 800ae9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7f9 ffb8 	bl	8004e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00c      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d007      	beq.n	800aed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aeca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f90d 	bl	800b0ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aeee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f905 	bl	800b100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00c      	beq.n	800af1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f834 	bl	800af82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00c      	beq.n	800af3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d007      	beq.n	800af3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f06f 0220 	mvn.w	r2, #32
 800af36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f8cd 	bl	800b0d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af3e:	bf00      	nop
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b083      	sub	sp, #12
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af76:	bf00      	nop
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
	...

0800af98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a43      	ldr	r2, [pc, #268]	@ (800b0b8 <TIM_Base_SetConfig+0x120>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d013      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afb6:	d00f      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a40      	ldr	r2, [pc, #256]	@ (800b0bc <TIM_Base_SetConfig+0x124>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00b      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a3f      	ldr	r2, [pc, #252]	@ (800b0c0 <TIM_Base_SetConfig+0x128>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d007      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a3e      	ldr	r2, [pc, #248]	@ (800b0c4 <TIM_Base_SetConfig+0x12c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d003      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a3d      	ldr	r2, [pc, #244]	@ (800b0c8 <TIM_Base_SetConfig+0x130>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d108      	bne.n	800afea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a32      	ldr	r2, [pc, #200]	@ (800b0b8 <TIM_Base_SetConfig+0x120>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d01f      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff8:	d01b      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a2f      	ldr	r2, [pc, #188]	@ (800b0bc <TIM_Base_SetConfig+0x124>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d017      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a2e      	ldr	r2, [pc, #184]	@ (800b0c0 <TIM_Base_SetConfig+0x128>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d013      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a2d      	ldr	r2, [pc, #180]	@ (800b0c4 <TIM_Base_SetConfig+0x12c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00f      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a2c      	ldr	r2, [pc, #176]	@ (800b0c8 <TIM_Base_SetConfig+0x130>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d00b      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a2b      	ldr	r2, [pc, #172]	@ (800b0cc <TIM_Base_SetConfig+0x134>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d007      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a2a      	ldr	r2, [pc, #168]	@ (800b0d0 <TIM_Base_SetConfig+0x138>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d003      	beq.n	800b032 <TIM_Base_SetConfig+0x9a>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a29      	ldr	r2, [pc, #164]	@ (800b0d4 <TIM_Base_SetConfig+0x13c>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d108      	bne.n	800b044 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	689a      	ldr	r2, [r3, #8]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a14      	ldr	r2, [pc, #80]	@ (800b0b8 <TIM_Base_SetConfig+0x120>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00f      	beq.n	800b08a <TIM_Base_SetConfig+0xf2>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a16      	ldr	r2, [pc, #88]	@ (800b0c8 <TIM_Base_SetConfig+0x130>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00b      	beq.n	800b08a <TIM_Base_SetConfig+0xf2>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a15      	ldr	r2, [pc, #84]	@ (800b0cc <TIM_Base_SetConfig+0x134>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d007      	beq.n	800b08a <TIM_Base_SetConfig+0xf2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a14      	ldr	r2, [pc, #80]	@ (800b0d0 <TIM_Base_SetConfig+0x138>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d003      	beq.n	800b08a <TIM_Base_SetConfig+0xf2>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a13      	ldr	r2, [pc, #76]	@ (800b0d4 <TIM_Base_SetConfig+0x13c>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d103      	bne.n	800b092 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	691a      	ldr	r2, [r3, #16]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f043 0204 	orr.w	r2, r3, #4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	601a      	str	r2, [r3, #0]
}
 800b0aa:	bf00      	nop
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	40010000 	.word	0x40010000
 800b0bc:	40000400 	.word	0x40000400
 800b0c0:	40000800 	.word	0x40000800
 800b0c4:	40000c00 	.word	0x40000c00
 800b0c8:	40010400 	.word	0x40010400
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	40014400 	.word	0x40014400
 800b0d4:	40014800 	.word	0x40014800

0800b0d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e042      	b.n	800b1ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7f9 ffe1 	bl	8005100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2224      	movs	r2, #36	@ 0x24
 800b142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f022 0201 	bic.w	r2, r2, #1
 800b154:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 fa60 	bl	800c624 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fcf5 	bl	800bb54 <UART_SetConfig>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e01b      	b.n	800b1ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689a      	ldr	r2, [r3, #8]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f042 0201 	orr.w	r2, r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fadf 	bl	800c768 <UART_CheckIdleState>
 800b1aa:	4603      	mov	r3, r0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	@ 0x28
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d17b      	bne.n	800b2c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <HAL_UART_Transmit+0x26>
 800b1d4:	88fb      	ldrh	r3, [r7, #6]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e074      	b.n	800b2c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2221      	movs	r2, #33	@ 0x21
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1ee:	f7fa fb91 	bl	8005914 <HAL_GetTick>
 800b1f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	88fa      	ldrh	r2, [r7, #6]
 800b1f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	88fa      	ldrh	r2, [r7, #6]
 800b200:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b20c:	d108      	bne.n	800b220 <HAL_UART_Transmit+0x6c>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d104      	bne.n	800b220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	e003      	b.n	800b228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b224:	2300      	movs	r3, #0
 800b226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b228:	e030      	b.n	800b28c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	2180      	movs	r1, #128	@ 0x80
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f001 fb41 	bl	800c8bc <UART_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2220      	movs	r2, #32
 800b244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e03d      	b.n	800b2c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10b      	bne.n	800b26a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b260:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	3302      	adds	r3, #2
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	e007      	b.n	800b27a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	3301      	adds	r3, #1
 800b278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b280:	b29b      	uxth	r3, r3
 800b282:	3b01      	subs	r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b292:	b29b      	uxth	r3, r3
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1c8      	bne.n	800b22a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2140      	movs	r1, #64	@ 0x40
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f001 fb0a 	bl	800c8bc <UART_WaitOnFlagUntilTimeout>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d005      	beq.n	800b2ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e006      	b.n	800b2c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e000      	b.n	800b2c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b2c6:	2302      	movs	r3, #2
  }
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3720      	adds	r7, #32
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	@ 0x28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2e4:	2b20      	cmp	r3, #32
 800b2e6:	d137      	bne.n	800b358 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <HAL_UART_Receive_IT+0x24>
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e030      	b.n	800b35a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a18      	ldr	r2, [pc, #96]	@ (800b364 <HAL_UART_Receive_IT+0x94>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d01f      	beq.n	800b348 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d018      	beq.n	800b348 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	e853 3f00 	ldrex	r3, [r3]
 800b322:	613b      	str	r3, [r7, #16]
   return(result);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b32a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	461a      	mov	r2, r3
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	623b      	str	r3, [r7, #32]
 800b336:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	69f9      	ldr	r1, [r7, #28]
 800b33a:	6a3a      	ldr	r2, [r7, #32]
 800b33c:	e841 2300 	strex	r3, r2, [r1]
 800b340:	61bb      	str	r3, [r7, #24]
   return(result);
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e6      	bne.n	800b316 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b348:	88fb      	ldrh	r3, [r7, #6]
 800b34a:	461a      	mov	r2, r3
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f001 fb22 	bl	800c998 <UART_Start_Receive_IT>
 800b354:	4603      	mov	r3, r0
 800b356:	e000      	b.n	800b35a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b358:	2302      	movs	r3, #2
  }
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3728      	adds	r7, #40	@ 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	58000c00 	.word	0x58000c00

0800b368 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b0ba      	sub	sp, #232	@ 0xe8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b38e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b392:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b396:	4013      	ands	r3, r2
 800b398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b39c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d11b      	bne.n	800b3dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d015      	beq.n	800b3dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d105      	bne.n	800b3c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8393 	beq.w	800baf8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
      }
      return;
 800b3da:	e38d      	b.n	800baf8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 8123 	beq.w	800b62c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b3ea:	4b8d      	ldr	r3, [pc, #564]	@ (800b620 <HAL_UART_IRQHandler+0x2b8>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b3f6:	4b8b      	ldr	r3, [pc, #556]	@ (800b624 <HAL_UART_IRQHandler+0x2bc>)
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 8116 	beq.w	800b62c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d011      	beq.n	800b430 <HAL_UART_IRQHandler+0xc8>
 800b40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00b      	beq.n	800b430 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2201      	movs	r2, #1
 800b41e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b426:	f043 0201 	orr.w	r2, r3, #1
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b434:	f003 0302 	and.w	r3, r3, #2
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d011      	beq.n	800b460 <HAL_UART_IRQHandler+0xf8>
 800b43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00b      	beq.n	800b460 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2202      	movs	r2, #2
 800b44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b456:	f043 0204 	orr.w	r2, r3, #4
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d011      	beq.n	800b490 <HAL_UART_IRQHandler+0x128>
 800b46c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00b      	beq.n	800b490 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2204      	movs	r2, #4
 800b47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b486:	f043 0202 	orr.w	r2, r3, #2
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b494:	f003 0308 	and.w	r3, r3, #8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d017      	beq.n	800b4cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d105      	bne.n	800b4b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b620 <HAL_UART_IRQHandler+0x2b8>)
 800b4ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4c2:	f043 0208 	orr.w	r2, r3, #8
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d012      	beq.n	800b4fe <HAL_UART_IRQHandler+0x196>
 800b4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00c      	beq.n	800b4fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4f4:	f043 0220 	orr.w	r2, r3, #32
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 82f9 	beq.w	800bafc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d013      	beq.n	800b53e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b51a:	f003 0320 	and.w	r3, r3, #32
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b544:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b552:	2b40      	cmp	r3, #64	@ 0x40
 800b554:	d005      	beq.n	800b562 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b55a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d054      	beq.n	800b60c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 fb3a 	bl	800cbdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b572:	2b40      	cmp	r3, #64	@ 0x40
 800b574:	d146      	bne.n	800b604 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3308      	adds	r3, #8
 800b57c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b58c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1d9      	bne.n	800b576 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d017      	beq.n	800b5fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5d2:	4a15      	ldr	r2, [pc, #84]	@ (800b628 <HAL_UART_IRQHandler+0x2c0>)
 800b5d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fa fe4b 	bl	8006278 <HAL_DMA_Abort_IT>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d019      	beq.n	800b61c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5fa:	e00f      	b.n	800b61c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fa93 	bl	800bb28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b602:	e00b      	b.n	800b61c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fa8f 	bl	800bb28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b60a:	e007      	b.n	800b61c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fa8b 	bl	800bb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b61a:	e26f      	b.n	800bafc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b61c:	bf00      	nop
    return;
 800b61e:	e26d      	b.n	800bafc <HAL_UART_IRQHandler+0x794>
 800b620:	10000001 	.word	0x10000001
 800b624:	04000120 	.word	0x04000120
 800b628:	0800cca9 	.word	0x0800cca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b630:	2b01      	cmp	r3, #1
 800b632:	f040 8203 	bne.w	800ba3c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63a:	f003 0310 	and.w	r3, r3, #16
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 81fc 	beq.w	800ba3c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b648:	f003 0310 	and.w	r3, r3, #16
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 81f5 	beq.w	800ba3c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2210      	movs	r2, #16
 800b658:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b664:	2b40      	cmp	r3, #64	@ 0x40
 800b666:	f040 816d 	bne.w	800b944 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4aa4      	ldr	r2, [pc, #656]	@ (800b904 <HAL_UART_IRQHandler+0x59c>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d068      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4aa1      	ldr	r2, [pc, #644]	@ (800b908 <HAL_UART_IRQHandler+0x5a0>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d061      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a9f      	ldr	r2, [pc, #636]	@ (800b90c <HAL_UART_IRQHandler+0x5a4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d05a      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a9c      	ldr	r2, [pc, #624]	@ (800b910 <HAL_UART_IRQHandler+0x5a8>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d053      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a9a      	ldr	r2, [pc, #616]	@ (800b914 <HAL_UART_IRQHandler+0x5ac>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d04c      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a97      	ldr	r2, [pc, #604]	@ (800b918 <HAL_UART_IRQHandler+0x5b0>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d045      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a95      	ldr	r2, [pc, #596]	@ (800b91c <HAL_UART_IRQHandler+0x5b4>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d03e      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a92      	ldr	r2, [pc, #584]	@ (800b920 <HAL_UART_IRQHandler+0x5b8>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d037      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a90      	ldr	r2, [pc, #576]	@ (800b924 <HAL_UART_IRQHandler+0x5bc>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d030      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a8d      	ldr	r2, [pc, #564]	@ (800b928 <HAL_UART_IRQHandler+0x5c0>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d029      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a8b      	ldr	r2, [pc, #556]	@ (800b92c <HAL_UART_IRQHandler+0x5c4>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d022      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a88      	ldr	r2, [pc, #544]	@ (800b930 <HAL_UART_IRQHandler+0x5c8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d01b      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a86      	ldr	r2, [pc, #536]	@ (800b934 <HAL_UART_IRQHandler+0x5cc>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d014      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a83      	ldr	r2, [pc, #524]	@ (800b938 <HAL_UART_IRQHandler+0x5d0>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d00d      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a81      	ldr	r2, [pc, #516]	@ (800b93c <HAL_UART_IRQHandler+0x5d4>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d006      	beq.n	800b74a <HAL_UART_IRQHandler+0x3e2>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a7e      	ldr	r2, [pc, #504]	@ (800b940 <HAL_UART_IRQHandler+0x5d8>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d106      	bne.n	800b758 <HAL_UART_IRQHandler+0x3f0>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	b29b      	uxth	r3, r3
 800b756:	e005      	b.n	800b764 <HAL_UART_IRQHandler+0x3fc>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	b29b      	uxth	r3, r3
 800b764:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80ad 	beq.w	800b8cc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b778:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b77c:	429a      	cmp	r2, r3
 800b77e:	f080 80a5 	bcs.w	800b8cc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b798:	f000 8087 	beq.w	800b8aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b7b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b7ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b7d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b7de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1da      	bne.n	800b79c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7f0:	e853 3f00 	ldrex	r3, [r3]
 800b7f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b7f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7f8:	f023 0301 	bic.w	r3, r3, #1
 800b7fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3308      	adds	r3, #8
 800b806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b80a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b80e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b816:	e841 2300 	strex	r3, r2, [r1]
 800b81a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b81c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1e1      	bne.n	800b7e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3308      	adds	r3, #8
 800b828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b84c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e3      	bne.n	800b822 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b878:	f023 0310 	bic.w	r3, r3, #16
 800b87c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b88a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b88c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e4      	bne.n	800b868 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fa f9c9 	bl	8005c3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f939 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b8ca:	e119      	b.n	800bb00 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b8d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	f040 8112 	bne.w	800bb00 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8e8:	f040 810a 	bne.w	800bb00 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f91e 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
      return;
 800b900:	e0fe      	b.n	800bb00 <HAL_UART_IRQHandler+0x798>
 800b902:	bf00      	nop
 800b904:	40020010 	.word	0x40020010
 800b908:	40020028 	.word	0x40020028
 800b90c:	40020040 	.word	0x40020040
 800b910:	40020058 	.word	0x40020058
 800b914:	40020070 	.word	0x40020070
 800b918:	40020088 	.word	0x40020088
 800b91c:	400200a0 	.word	0x400200a0
 800b920:	400200b8 	.word	0x400200b8
 800b924:	40020410 	.word	0x40020410
 800b928:	40020428 	.word	0x40020428
 800b92c:	40020440 	.word	0x40020440
 800b930:	40020458 	.word	0x40020458
 800b934:	40020470 	.word	0x40020470
 800b938:	40020488 	.word	0x40020488
 800b93c:	400204a0 	.word	0x400204a0
 800b940:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b950:	b29b      	uxth	r3, r3
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b95e:	b29b      	uxth	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 80cf 	beq.w	800bb04 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80ca 	beq.w	800bb04 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b984:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	461a      	mov	r2, r3
 800b98e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b992:	647b      	str	r3, [r7, #68]	@ 0x44
 800b994:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b99a:	e841 2300 	strex	r3, r2, [r1]
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1e4      	bne.n	800b970 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b9b6:	6a3a      	ldr	r2, [r7, #32]
 800b9b8:	4b55      	ldr	r3, [pc, #340]	@ (800bb10 <HAL_UART_IRQHandler+0x7a8>)
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b9ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e3      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0310 	bic.w	r3, r3, #16
 800ba06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	69b9      	ldr	r1, [r7, #24]
 800ba1a:	69fa      	ldr	r2, [r7, #28]
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	617b      	str	r3, [r7, #20]
   return(result);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e4      	bne.n	800b9f2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f881 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba3a:	e063      	b.n	800bb04 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00e      	beq.n	800ba66 <HAL_UART_IRQHandler+0x6fe>
 800ba48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d008      	beq.n	800ba66 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ba5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 fe80 	bl	800d764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba64:	e051      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d014      	beq.n	800ba9c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d105      	bne.n	800ba8a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d03a      	beq.n	800bb08 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
    }
    return;
 800ba9a:	e035      	b.n	800bb08 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d009      	beq.n	800babc <HAL_UART_IRQHandler+0x754>
 800baa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 f909 	bl	800cccc <UART_EndTransmit_IT>
    return;
 800baba:	e026      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800babc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d009      	beq.n	800badc <HAL_UART_IRQHandler+0x774>
 800bac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bacc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f001 fe59 	bl	800d78c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bada:	e016      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800badc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d010      	beq.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
 800bae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baec:	2b00      	cmp	r3, #0
 800baee:	da0c      	bge.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f001 fe41 	bl	800d778 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf6:	e008      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
      return;
 800baf8:	bf00      	nop
 800bafa:	e006      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
    return;
 800bafc:	bf00      	nop
 800bafe:	e004      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
      return;
 800bb00:	bf00      	nop
 800bb02:	e002      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
      return;
 800bb04:	bf00      	nop
 800bb06:	e000      	b.n	800bb0a <HAL_UART_IRQHandler+0x7a2>
    return;
 800bb08:	bf00      	nop
  }
}
 800bb0a:	37e8      	adds	r7, #232	@ 0xe8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	effffffe 	.word	0xeffffffe

0800bb14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb58:	b092      	sub	sp, #72	@ 0x48
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4bbe      	ldr	r3, [pc, #760]	@ (800be7c <UART_SetConfig+0x328>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	6812      	ldr	r2, [r2, #0]
 800bb8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4ab3      	ldr	r2, [pc, #716]	@ (800be80 <UART_SetConfig+0x32c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d004      	beq.n	800bbc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	4baf      	ldr	r3, [pc, #700]	@ (800be84 <UART_SetConfig+0x330>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbda:	f023 010f 	bic.w	r1, r3, #15
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4aa6      	ldr	r2, [pc, #664]	@ (800be88 <UART_SetConfig+0x334>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d177      	bne.n	800bce4 <UART_SetConfig+0x190>
 800bbf4:	4ba5      	ldr	r3, [pc, #660]	@ (800be8c <UART_SetConfig+0x338>)
 800bbf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bbfc:	2b28      	cmp	r3, #40	@ 0x28
 800bbfe:	d86d      	bhi.n	800bcdc <UART_SetConfig+0x188>
 800bc00:	a201      	add	r2, pc, #4	@ (adr r2, 800bc08 <UART_SetConfig+0xb4>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bcad 	.word	0x0800bcad
 800bc0c:	0800bcdd 	.word	0x0800bcdd
 800bc10:	0800bcdd 	.word	0x0800bcdd
 800bc14:	0800bcdd 	.word	0x0800bcdd
 800bc18:	0800bcdd 	.word	0x0800bcdd
 800bc1c:	0800bcdd 	.word	0x0800bcdd
 800bc20:	0800bcdd 	.word	0x0800bcdd
 800bc24:	0800bcdd 	.word	0x0800bcdd
 800bc28:	0800bcb5 	.word	0x0800bcb5
 800bc2c:	0800bcdd 	.word	0x0800bcdd
 800bc30:	0800bcdd 	.word	0x0800bcdd
 800bc34:	0800bcdd 	.word	0x0800bcdd
 800bc38:	0800bcdd 	.word	0x0800bcdd
 800bc3c:	0800bcdd 	.word	0x0800bcdd
 800bc40:	0800bcdd 	.word	0x0800bcdd
 800bc44:	0800bcdd 	.word	0x0800bcdd
 800bc48:	0800bcbd 	.word	0x0800bcbd
 800bc4c:	0800bcdd 	.word	0x0800bcdd
 800bc50:	0800bcdd 	.word	0x0800bcdd
 800bc54:	0800bcdd 	.word	0x0800bcdd
 800bc58:	0800bcdd 	.word	0x0800bcdd
 800bc5c:	0800bcdd 	.word	0x0800bcdd
 800bc60:	0800bcdd 	.word	0x0800bcdd
 800bc64:	0800bcdd 	.word	0x0800bcdd
 800bc68:	0800bcc5 	.word	0x0800bcc5
 800bc6c:	0800bcdd 	.word	0x0800bcdd
 800bc70:	0800bcdd 	.word	0x0800bcdd
 800bc74:	0800bcdd 	.word	0x0800bcdd
 800bc78:	0800bcdd 	.word	0x0800bcdd
 800bc7c:	0800bcdd 	.word	0x0800bcdd
 800bc80:	0800bcdd 	.word	0x0800bcdd
 800bc84:	0800bcdd 	.word	0x0800bcdd
 800bc88:	0800bccd 	.word	0x0800bccd
 800bc8c:	0800bcdd 	.word	0x0800bcdd
 800bc90:	0800bcdd 	.word	0x0800bcdd
 800bc94:	0800bcdd 	.word	0x0800bcdd
 800bc98:	0800bcdd 	.word	0x0800bcdd
 800bc9c:	0800bcdd 	.word	0x0800bcdd
 800bca0:	0800bcdd 	.word	0x0800bcdd
 800bca4:	0800bcdd 	.word	0x0800bcdd
 800bca8:	0800bcd5 	.word	0x0800bcd5
 800bcac:	2301      	movs	r3, #1
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb2:	e222      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcba:	e21e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bcbc:	2308      	movs	r3, #8
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc2:	e21a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bcc4:	2310      	movs	r3, #16
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcca:	e216      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bccc:	2320      	movs	r3, #32
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd2:	e212      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bcd4:	2340      	movs	r3, #64	@ 0x40
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcda:	e20e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bcdc:	2380      	movs	r3, #128	@ 0x80
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce2:	e20a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a69      	ldr	r2, [pc, #420]	@ (800be90 <UART_SetConfig+0x33c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d130      	bne.n	800bd50 <UART_SetConfig+0x1fc>
 800bcee:	4b67      	ldr	r3, [pc, #412]	@ (800be8c <UART_SetConfig+0x338>)
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	2b05      	cmp	r3, #5
 800bcf8:	d826      	bhi.n	800bd48 <UART_SetConfig+0x1f4>
 800bcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800bd00 <UART_SetConfig+0x1ac>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd19 	.word	0x0800bd19
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	0800bd29 	.word	0x0800bd29
 800bd0c:	0800bd31 	.word	0x0800bd31
 800bd10:	0800bd39 	.word	0x0800bd39
 800bd14:	0800bd41 	.word	0x0800bd41
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1e:	e1ec      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd20:	2304      	movs	r3, #4
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd26:	e1e8      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd28:	2308      	movs	r3, #8
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2e:	e1e4      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd30:	2310      	movs	r3, #16
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd36:	e1e0      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd38:	2320      	movs	r3, #32
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3e:	e1dc      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd40:	2340      	movs	r3, #64	@ 0x40
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd46:	e1d8      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd48:	2380      	movs	r3, #128	@ 0x80
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4e:	e1d4      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a4f      	ldr	r2, [pc, #316]	@ (800be94 <UART_SetConfig+0x340>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d130      	bne.n	800bdbc <UART_SetConfig+0x268>
 800bd5a:	4b4c      	ldr	r3, [pc, #304]	@ (800be8c <UART_SetConfig+0x338>)
 800bd5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d826      	bhi.n	800bdb4 <UART_SetConfig+0x260>
 800bd66:	a201      	add	r2, pc, #4	@ (adr r2, 800bd6c <UART_SetConfig+0x218>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bd85 	.word	0x0800bd85
 800bd70:	0800bd8d 	.word	0x0800bd8d
 800bd74:	0800bd95 	.word	0x0800bd95
 800bd78:	0800bd9d 	.word	0x0800bd9d
 800bd7c:	0800bda5 	.word	0x0800bda5
 800bd80:	0800bdad 	.word	0x0800bdad
 800bd84:	2300      	movs	r3, #0
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8a:	e1b6      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd92:	e1b2      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd94:	2308      	movs	r3, #8
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9a:	e1ae      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda2:	e1aa      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bda4:	2320      	movs	r3, #32
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdaa:	e1a6      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bdac:	2340      	movs	r3, #64	@ 0x40
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb2:	e1a2      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bdb4:	2380      	movs	r3, #128	@ 0x80
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdba:	e19e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a35      	ldr	r2, [pc, #212]	@ (800be98 <UART_SetConfig+0x344>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d130      	bne.n	800be28 <UART_SetConfig+0x2d4>
 800bdc6:	4b31      	ldr	r3, [pc, #196]	@ (800be8c <UART_SetConfig+0x338>)
 800bdc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	2b05      	cmp	r3, #5
 800bdd0:	d826      	bhi.n	800be20 <UART_SetConfig+0x2cc>
 800bdd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd8 <UART_SetConfig+0x284>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800bdf1 	.word	0x0800bdf1
 800bddc:	0800bdf9 	.word	0x0800bdf9
 800bde0:	0800be01 	.word	0x0800be01
 800bde4:	0800be09 	.word	0x0800be09
 800bde8:	0800be11 	.word	0x0800be11
 800bdec:	0800be19 	.word	0x0800be19
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf6:	e180      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfe:	e17c      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be00:	2308      	movs	r3, #8
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be06:	e178      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be08:	2310      	movs	r3, #16
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e174      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be10:	2320      	movs	r3, #32
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e170      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be18:	2340      	movs	r3, #64	@ 0x40
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1e:	e16c      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be20:	2380      	movs	r3, #128	@ 0x80
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e168      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a1b      	ldr	r2, [pc, #108]	@ (800be9c <UART_SetConfig+0x348>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d142      	bne.n	800beb8 <UART_SetConfig+0x364>
 800be32:	4b16      	ldr	r3, [pc, #88]	@ (800be8c <UART_SetConfig+0x338>)
 800be34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	2b05      	cmp	r3, #5
 800be3c:	d838      	bhi.n	800beb0 <UART_SetConfig+0x35c>
 800be3e:	a201      	add	r2, pc, #4	@ (adr r2, 800be44 <UART_SetConfig+0x2f0>)
 800be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be44:	0800be5d 	.word	0x0800be5d
 800be48:	0800be65 	.word	0x0800be65
 800be4c:	0800be6d 	.word	0x0800be6d
 800be50:	0800be75 	.word	0x0800be75
 800be54:	0800bea1 	.word	0x0800bea1
 800be58:	0800bea9 	.word	0x0800bea9
 800be5c:	2300      	movs	r3, #0
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be62:	e14a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be64:	2304      	movs	r3, #4
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6a:	e146      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be6c:	2308      	movs	r3, #8
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e142      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be74:	2310      	movs	r3, #16
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e13e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800be7c:	cfff69f3 	.word	0xcfff69f3
 800be80:	58000c00 	.word	0x58000c00
 800be84:	11fff4ff 	.word	0x11fff4ff
 800be88:	40011000 	.word	0x40011000
 800be8c:	58024400 	.word	0x58024400
 800be90:	40004400 	.word	0x40004400
 800be94:	40004800 	.word	0x40004800
 800be98:	40004c00 	.word	0x40004c00
 800be9c:	40005000 	.word	0x40005000
 800bea0:	2320      	movs	r3, #32
 800bea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea6:	e128      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bea8:	2340      	movs	r3, #64	@ 0x40
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beae:	e124      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800beb0:	2380      	movs	r3, #128	@ 0x80
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb6:	e120      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4acb      	ldr	r2, [pc, #812]	@ (800c1ec <UART_SetConfig+0x698>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d176      	bne.n	800bfb0 <UART_SetConfig+0x45c>
 800bec2:	4bcb      	ldr	r3, [pc, #812]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800bec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beca:	2b28      	cmp	r3, #40	@ 0x28
 800becc:	d86c      	bhi.n	800bfa8 <UART_SetConfig+0x454>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <UART_SetConfig+0x380>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bf79 	.word	0x0800bf79
 800bed8:	0800bfa9 	.word	0x0800bfa9
 800bedc:	0800bfa9 	.word	0x0800bfa9
 800bee0:	0800bfa9 	.word	0x0800bfa9
 800bee4:	0800bfa9 	.word	0x0800bfa9
 800bee8:	0800bfa9 	.word	0x0800bfa9
 800beec:	0800bfa9 	.word	0x0800bfa9
 800bef0:	0800bfa9 	.word	0x0800bfa9
 800bef4:	0800bf81 	.word	0x0800bf81
 800bef8:	0800bfa9 	.word	0x0800bfa9
 800befc:	0800bfa9 	.word	0x0800bfa9
 800bf00:	0800bfa9 	.word	0x0800bfa9
 800bf04:	0800bfa9 	.word	0x0800bfa9
 800bf08:	0800bfa9 	.word	0x0800bfa9
 800bf0c:	0800bfa9 	.word	0x0800bfa9
 800bf10:	0800bfa9 	.word	0x0800bfa9
 800bf14:	0800bf89 	.word	0x0800bf89
 800bf18:	0800bfa9 	.word	0x0800bfa9
 800bf1c:	0800bfa9 	.word	0x0800bfa9
 800bf20:	0800bfa9 	.word	0x0800bfa9
 800bf24:	0800bfa9 	.word	0x0800bfa9
 800bf28:	0800bfa9 	.word	0x0800bfa9
 800bf2c:	0800bfa9 	.word	0x0800bfa9
 800bf30:	0800bfa9 	.word	0x0800bfa9
 800bf34:	0800bf91 	.word	0x0800bf91
 800bf38:	0800bfa9 	.word	0x0800bfa9
 800bf3c:	0800bfa9 	.word	0x0800bfa9
 800bf40:	0800bfa9 	.word	0x0800bfa9
 800bf44:	0800bfa9 	.word	0x0800bfa9
 800bf48:	0800bfa9 	.word	0x0800bfa9
 800bf4c:	0800bfa9 	.word	0x0800bfa9
 800bf50:	0800bfa9 	.word	0x0800bfa9
 800bf54:	0800bf99 	.word	0x0800bf99
 800bf58:	0800bfa9 	.word	0x0800bfa9
 800bf5c:	0800bfa9 	.word	0x0800bfa9
 800bf60:	0800bfa9 	.word	0x0800bfa9
 800bf64:	0800bfa9 	.word	0x0800bfa9
 800bf68:	0800bfa9 	.word	0x0800bfa9
 800bf6c:	0800bfa9 	.word	0x0800bfa9
 800bf70:	0800bfa9 	.word	0x0800bfa9
 800bf74:	0800bfa1 	.word	0x0800bfa1
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7e:	e0bc      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bf80:	2304      	movs	r3, #4
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf86:	e0b8      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bf88:	2308      	movs	r3, #8
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8e:	e0b4      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bf90:	2310      	movs	r3, #16
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e0b0      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bf98:	2320      	movs	r3, #32
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e0ac      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bfa0:	2340      	movs	r3, #64	@ 0x40
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa6:	e0a8      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bfa8:	2380      	movs	r3, #128	@ 0x80
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfae:	e0a4      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a8f      	ldr	r2, [pc, #572]	@ (800c1f4 <UART_SetConfig+0x6a0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d130      	bne.n	800c01c <UART_SetConfig+0x4c8>
 800bfba:	4b8d      	ldr	r3, [pc, #564]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800bfbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	d826      	bhi.n	800c014 <UART_SetConfig+0x4c0>
 800bfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfcc <UART_SetConfig+0x478>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfed 	.word	0x0800bfed
 800bfd4:	0800bff5 	.word	0x0800bff5
 800bfd8:	0800bffd 	.word	0x0800bffd
 800bfdc:	0800c005 	.word	0x0800c005
 800bfe0:	0800c00d 	.word	0x0800c00d
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfea:	e086      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bfec:	2304      	movs	r3, #4
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff2:	e082      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bff4:	2308      	movs	r3, #8
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffa:	e07e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800bffc:	2310      	movs	r3, #16
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c002:	e07a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c004:	2320      	movs	r3, #32
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00a:	e076      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c00c:	2340      	movs	r3, #64	@ 0x40
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c012:	e072      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c014:	2380      	movs	r3, #128	@ 0x80
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01a:	e06e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a75      	ldr	r2, [pc, #468]	@ (800c1f8 <UART_SetConfig+0x6a4>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d130      	bne.n	800c088 <UART_SetConfig+0x534>
 800c026:	4b72      	ldr	r3, [pc, #456]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800c028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	2b05      	cmp	r3, #5
 800c030:	d826      	bhi.n	800c080 <UART_SetConfig+0x52c>
 800c032:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <UART_SetConfig+0x4e4>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c051 	.word	0x0800c051
 800c03c:	0800c059 	.word	0x0800c059
 800c040:	0800c061 	.word	0x0800c061
 800c044:	0800c069 	.word	0x0800c069
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c079 	.word	0x0800c079
 800c050:	2300      	movs	r3, #0
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c056:	e050      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c058:	2304      	movs	r3, #4
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05e:	e04c      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c060:	2308      	movs	r3, #8
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c066:	e048      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c068:	2310      	movs	r3, #16
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06e:	e044      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c070:	2320      	movs	r3, #32
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c076:	e040      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c078:	2340      	movs	r3, #64	@ 0x40
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07e:	e03c      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c080:	2380      	movs	r3, #128	@ 0x80
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c086:	e038      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a5b      	ldr	r2, [pc, #364]	@ (800c1fc <UART_SetConfig+0x6a8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d130      	bne.n	800c0f4 <UART_SetConfig+0x5a0>
 800c092:	4b57      	ldr	r3, [pc, #348]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800c094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c096:	f003 0307 	and.w	r3, r3, #7
 800c09a:	2b05      	cmp	r3, #5
 800c09c:	d826      	bhi.n	800c0ec <UART_SetConfig+0x598>
 800c09e:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a4 <UART_SetConfig+0x550>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0bd 	.word	0x0800c0bd
 800c0a8:	0800c0c5 	.word	0x0800c0c5
 800c0ac:	0800c0cd 	.word	0x0800c0cd
 800c0b0:	0800c0d5 	.word	0x0800c0d5
 800c0b4:	0800c0dd 	.word	0x0800c0dd
 800c0b8:	0800c0e5 	.word	0x0800c0e5
 800c0bc:	2302      	movs	r3, #2
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c2:	e01a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ca:	e016      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0cc:	2308      	movs	r3, #8
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e012      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e00e      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0dc:	2320      	movs	r3, #32
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e2:	e00a      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0e4:	2340      	movs	r3, #64	@ 0x40
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ea:	e006      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0ec:	2380      	movs	r3, #128	@ 0x80
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f2:	e002      	b.n	800c0fa <UART_SetConfig+0x5a6>
 800c0f4:	2380      	movs	r3, #128	@ 0x80
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a3f      	ldr	r2, [pc, #252]	@ (800c1fc <UART_SetConfig+0x6a8>)
 800c100:	4293      	cmp	r3, r2
 800c102:	f040 80f8 	bne.w	800c2f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c106:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c10a:	2b20      	cmp	r3, #32
 800c10c:	dc46      	bgt.n	800c19c <UART_SetConfig+0x648>
 800c10e:	2b02      	cmp	r3, #2
 800c110:	f2c0 8082 	blt.w	800c218 <UART_SetConfig+0x6c4>
 800c114:	3b02      	subs	r3, #2
 800c116:	2b1e      	cmp	r3, #30
 800c118:	d87e      	bhi.n	800c218 <UART_SetConfig+0x6c4>
 800c11a:	a201      	add	r2, pc, #4	@ (adr r2, 800c120 <UART_SetConfig+0x5cc>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c1a3 	.word	0x0800c1a3
 800c124:	0800c219 	.word	0x0800c219
 800c128:	0800c1ab 	.word	0x0800c1ab
 800c12c:	0800c219 	.word	0x0800c219
 800c130:	0800c219 	.word	0x0800c219
 800c134:	0800c219 	.word	0x0800c219
 800c138:	0800c1bb 	.word	0x0800c1bb
 800c13c:	0800c219 	.word	0x0800c219
 800c140:	0800c219 	.word	0x0800c219
 800c144:	0800c219 	.word	0x0800c219
 800c148:	0800c219 	.word	0x0800c219
 800c14c:	0800c219 	.word	0x0800c219
 800c150:	0800c219 	.word	0x0800c219
 800c154:	0800c219 	.word	0x0800c219
 800c158:	0800c1cb 	.word	0x0800c1cb
 800c15c:	0800c219 	.word	0x0800c219
 800c160:	0800c219 	.word	0x0800c219
 800c164:	0800c219 	.word	0x0800c219
 800c168:	0800c219 	.word	0x0800c219
 800c16c:	0800c219 	.word	0x0800c219
 800c170:	0800c219 	.word	0x0800c219
 800c174:	0800c219 	.word	0x0800c219
 800c178:	0800c219 	.word	0x0800c219
 800c17c:	0800c219 	.word	0x0800c219
 800c180:	0800c219 	.word	0x0800c219
 800c184:	0800c219 	.word	0x0800c219
 800c188:	0800c219 	.word	0x0800c219
 800c18c:	0800c219 	.word	0x0800c219
 800c190:	0800c219 	.word	0x0800c219
 800c194:	0800c219 	.word	0x0800c219
 800c198:	0800c20b 	.word	0x0800c20b
 800c19c:	2b40      	cmp	r3, #64	@ 0x40
 800c19e:	d037      	beq.n	800c210 <UART_SetConfig+0x6bc>
 800c1a0:	e03a      	b.n	800c218 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c1a2:	f7fe f8cd 	bl	800a340 <HAL_RCCEx_GetD3PCLK1Freq>
 800c1a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c1a8:	e03c      	b.n	800c224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe f8dc 	bl	800a36c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1b8:	e034      	b.n	800c224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ba:	f107 0318 	add.w	r3, r7, #24
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fa28 	bl	800a614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1c8:	e02c      	b.n	800c224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ca:	4b09      	ldr	r3, [pc, #36]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0320 	and.w	r3, r3, #32
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d016      	beq.n	800c204 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1d6:	4b06      	ldr	r3, [pc, #24]	@ (800c1f0 <UART_SetConfig+0x69c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	08db      	lsrs	r3, r3, #3
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	4a07      	ldr	r2, [pc, #28]	@ (800c200 <UART_SetConfig+0x6ac>)
 800c1e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1e8:	e01c      	b.n	800c224 <UART_SetConfig+0x6d0>
 800c1ea:	bf00      	nop
 800c1ec:	40011400 	.word	0x40011400
 800c1f0:	58024400 	.word	0x58024400
 800c1f4:	40007800 	.word	0x40007800
 800c1f8:	40007c00 	.word	0x40007c00
 800c1fc:	58000c00 	.word	0x58000c00
 800c200:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c204:	4b9d      	ldr	r3, [pc, #628]	@ (800c47c <UART_SetConfig+0x928>)
 800c206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c208:	e00c      	b.n	800c224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c20a:	4b9d      	ldr	r3, [pc, #628]	@ (800c480 <UART_SetConfig+0x92c>)
 800c20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c20e:	e009      	b.n	800c224 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c210:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c216:	e005      	b.n	800c224 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c222:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	f000 81de 	beq.w	800c5e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	4a94      	ldr	r2, [pc, #592]	@ (800c484 <UART_SetConfig+0x930>)
 800c232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c236:	461a      	mov	r2, r3
 800c238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c23a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c23e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	685a      	ldr	r2, [r3, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	4413      	add	r3, r2
 800c24a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d305      	bcc.n	800c25c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c258:	429a      	cmp	r2, r3
 800c25a:	d903      	bls.n	800c264 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c262:	e1c1      	b.n	800c5e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c266:	2200      	movs	r2, #0
 800c268:	60bb      	str	r3, [r7, #8]
 800c26a:	60fa      	str	r2, [r7, #12]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c270:	4a84      	ldr	r2, [pc, #528]	@ (800c484 <UART_SetConfig+0x930>)
 800c272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c276:	b29b      	uxth	r3, r3
 800c278:	2200      	movs	r2, #0
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	607a      	str	r2, [r7, #4]
 800c27e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c286:	f7f4 fb4d 	bl	8000924 <__aeabi_uldivmod>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4610      	mov	r0, r2
 800c290:	4619      	mov	r1, r3
 800c292:	f04f 0200 	mov.w	r2, #0
 800c296:	f04f 0300 	mov.w	r3, #0
 800c29a:	020b      	lsls	r3, r1, #8
 800c29c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2a0:	0202      	lsls	r2, r0, #8
 800c2a2:	6979      	ldr	r1, [r7, #20]
 800c2a4:	6849      	ldr	r1, [r1, #4]
 800c2a6:	0849      	lsrs	r1, r1, #1
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	eb12 0804 	adds.w	r8, r2, r4
 800c2b2:	eb43 0905 	adc.w	r9, r3, r5
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	469a      	mov	sl, r3
 800c2be:	4693      	mov	fp, r2
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	465b      	mov	r3, fp
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	f7f4 fb2c 	bl	8000924 <__aeabi_uldivmod>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2da:	d308      	bcc.n	800c2ee <UART_SetConfig+0x79a>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2e2:	d204      	bcs.n	800c2ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2ea:	60da      	str	r2, [r3, #12]
 800c2ec:	e17c      	b.n	800c5e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c2f4:	e178      	b.n	800c5e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2fe:	f040 80c5 	bne.w	800c48c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c302:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c306:	2b20      	cmp	r3, #32
 800c308:	dc48      	bgt.n	800c39c <UART_SetConfig+0x848>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	db7b      	blt.n	800c406 <UART_SetConfig+0x8b2>
 800c30e:	2b20      	cmp	r3, #32
 800c310:	d879      	bhi.n	800c406 <UART_SetConfig+0x8b2>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <UART_SetConfig+0x7c4>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c3a3 	.word	0x0800c3a3
 800c31c:	0800c3ab 	.word	0x0800c3ab
 800c320:	0800c407 	.word	0x0800c407
 800c324:	0800c407 	.word	0x0800c407
 800c328:	0800c3b3 	.word	0x0800c3b3
 800c32c:	0800c407 	.word	0x0800c407
 800c330:	0800c407 	.word	0x0800c407
 800c334:	0800c407 	.word	0x0800c407
 800c338:	0800c3c3 	.word	0x0800c3c3
 800c33c:	0800c407 	.word	0x0800c407
 800c340:	0800c407 	.word	0x0800c407
 800c344:	0800c407 	.word	0x0800c407
 800c348:	0800c407 	.word	0x0800c407
 800c34c:	0800c407 	.word	0x0800c407
 800c350:	0800c407 	.word	0x0800c407
 800c354:	0800c407 	.word	0x0800c407
 800c358:	0800c3d3 	.word	0x0800c3d3
 800c35c:	0800c407 	.word	0x0800c407
 800c360:	0800c407 	.word	0x0800c407
 800c364:	0800c407 	.word	0x0800c407
 800c368:	0800c407 	.word	0x0800c407
 800c36c:	0800c407 	.word	0x0800c407
 800c370:	0800c407 	.word	0x0800c407
 800c374:	0800c407 	.word	0x0800c407
 800c378:	0800c407 	.word	0x0800c407
 800c37c:	0800c407 	.word	0x0800c407
 800c380:	0800c407 	.word	0x0800c407
 800c384:	0800c407 	.word	0x0800c407
 800c388:	0800c407 	.word	0x0800c407
 800c38c:	0800c407 	.word	0x0800c407
 800c390:	0800c407 	.word	0x0800c407
 800c394:	0800c407 	.word	0x0800c407
 800c398:	0800c3f9 	.word	0x0800c3f9
 800c39c:	2b40      	cmp	r3, #64	@ 0x40
 800c39e:	d02e      	beq.n	800c3fe <UART_SetConfig+0x8aa>
 800c3a0:	e031      	b.n	800c406 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3a2:	f7fc fd55 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800c3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3a8:	e033      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3aa:	f7fc fd67 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800c3ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3b0:	e02f      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd ffd8 	bl	800a36c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3c0:	e027      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3c2:	f107 0318 	add.w	r3, r7, #24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe f924 	bl	800a614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3d0:	e01f      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3d2:	4b2d      	ldr	r3, [pc, #180]	@ (800c488 <UART_SetConfig+0x934>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 0320 	and.w	r3, r3, #32
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d009      	beq.n	800c3f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3de:	4b2a      	ldr	r3, [pc, #168]	@ (800c488 <UART_SetConfig+0x934>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	08db      	lsrs	r3, r3, #3
 800c3e4:	f003 0303 	and.w	r3, r3, #3
 800c3e8:	4a24      	ldr	r2, [pc, #144]	@ (800c47c <UART_SetConfig+0x928>)
 800c3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3f0:	e00f      	b.n	800c412 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c3f2:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <UART_SetConfig+0x928>)
 800c3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3f6:	e00c      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c3f8:	4b21      	ldr	r3, [pc, #132]	@ (800c480 <UART_SetConfig+0x92c>)
 800c3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3fc:	e009      	b.n	800c412 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c404:	e005      	b.n	800c412 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c406:	2300      	movs	r3, #0
 800c408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 80e7 	beq.w	800c5e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41e:	4a19      	ldr	r2, [pc, #100]	@ (800c484 <UART_SetConfig+0x930>)
 800c420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c424:	461a      	mov	r2, r3
 800c426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c428:	fbb3 f3f2 	udiv	r3, r3, r2
 800c42c:	005a      	lsls	r2, r3, #1
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	085b      	lsrs	r3, r3, #1
 800c434:	441a      	add	r2, r3
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c442:	2b0f      	cmp	r3, #15
 800c444:	d916      	bls.n	800c474 <UART_SetConfig+0x920>
 800c446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c44c:	d212      	bcs.n	800c474 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c450:	b29b      	uxth	r3, r3
 800c452:	f023 030f 	bic.w	r3, r3, #15
 800c456:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45a:	085b      	lsrs	r3, r3, #1
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	b29a      	uxth	r2, r3
 800c464:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c466:	4313      	orrs	r3, r2
 800c468:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c470:	60da      	str	r2, [r3, #12]
 800c472:	e0b9      	b.n	800c5e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c47a:	e0b5      	b.n	800c5e8 <UART_SetConfig+0xa94>
 800c47c:	03d09000 	.word	0x03d09000
 800c480:	003d0900 	.word	0x003d0900
 800c484:	08015078 	.word	0x08015078
 800c488:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c48c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c490:	2b20      	cmp	r3, #32
 800c492:	dc49      	bgt.n	800c528 <UART_SetConfig+0x9d4>
 800c494:	2b00      	cmp	r3, #0
 800c496:	db7c      	blt.n	800c592 <UART_SetConfig+0xa3e>
 800c498:	2b20      	cmp	r3, #32
 800c49a:	d87a      	bhi.n	800c592 <UART_SetConfig+0xa3e>
 800c49c:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a4 <UART_SetConfig+0x950>)
 800c49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a2:	bf00      	nop
 800c4a4:	0800c52f 	.word	0x0800c52f
 800c4a8:	0800c537 	.word	0x0800c537
 800c4ac:	0800c593 	.word	0x0800c593
 800c4b0:	0800c593 	.word	0x0800c593
 800c4b4:	0800c53f 	.word	0x0800c53f
 800c4b8:	0800c593 	.word	0x0800c593
 800c4bc:	0800c593 	.word	0x0800c593
 800c4c0:	0800c593 	.word	0x0800c593
 800c4c4:	0800c54f 	.word	0x0800c54f
 800c4c8:	0800c593 	.word	0x0800c593
 800c4cc:	0800c593 	.word	0x0800c593
 800c4d0:	0800c593 	.word	0x0800c593
 800c4d4:	0800c593 	.word	0x0800c593
 800c4d8:	0800c593 	.word	0x0800c593
 800c4dc:	0800c593 	.word	0x0800c593
 800c4e0:	0800c593 	.word	0x0800c593
 800c4e4:	0800c55f 	.word	0x0800c55f
 800c4e8:	0800c593 	.word	0x0800c593
 800c4ec:	0800c593 	.word	0x0800c593
 800c4f0:	0800c593 	.word	0x0800c593
 800c4f4:	0800c593 	.word	0x0800c593
 800c4f8:	0800c593 	.word	0x0800c593
 800c4fc:	0800c593 	.word	0x0800c593
 800c500:	0800c593 	.word	0x0800c593
 800c504:	0800c593 	.word	0x0800c593
 800c508:	0800c593 	.word	0x0800c593
 800c50c:	0800c593 	.word	0x0800c593
 800c510:	0800c593 	.word	0x0800c593
 800c514:	0800c593 	.word	0x0800c593
 800c518:	0800c593 	.word	0x0800c593
 800c51c:	0800c593 	.word	0x0800c593
 800c520:	0800c593 	.word	0x0800c593
 800c524:	0800c585 	.word	0x0800c585
 800c528:	2b40      	cmp	r3, #64	@ 0x40
 800c52a:	d02e      	beq.n	800c58a <UART_SetConfig+0xa36>
 800c52c:	e031      	b.n	800c592 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c52e:	f7fc fc8f 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800c532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c534:	e033      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c536:	f7fc fca1 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800c53a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c53c:	e02f      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c53e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd ff12 	bl	800a36c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c54c:	e027      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c54e:	f107 0318 	add.w	r3, r7, #24
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe f85e 	bl	800a614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c55c:	e01f      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c55e:	4b2d      	ldr	r3, [pc, #180]	@ (800c614 <UART_SetConfig+0xac0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0320 	and.w	r3, r3, #32
 800c566:	2b00      	cmp	r3, #0
 800c568:	d009      	beq.n	800c57e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c56a:	4b2a      	ldr	r3, [pc, #168]	@ (800c614 <UART_SetConfig+0xac0>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	08db      	lsrs	r3, r3, #3
 800c570:	f003 0303 	and.w	r3, r3, #3
 800c574:	4a28      	ldr	r2, [pc, #160]	@ (800c618 <UART_SetConfig+0xac4>)
 800c576:	fa22 f303 	lsr.w	r3, r2, r3
 800c57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c57c:	e00f      	b.n	800c59e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c57e:	4b26      	ldr	r3, [pc, #152]	@ (800c618 <UART_SetConfig+0xac4>)
 800c580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c582:	e00c      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c584:	4b25      	ldr	r3, [pc, #148]	@ (800c61c <UART_SetConfig+0xac8>)
 800c586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c588:	e009      	b.n	800c59e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c590:	e005      	b.n	800c59e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c59c:	bf00      	nop
    }

    if (pclk != 0U)
 800c59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d021      	beq.n	800c5e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c620 <UART_SetConfig+0xacc>)
 800c5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	085b      	lsrs	r3, r3, #1
 800c5bc:	441a      	add	r2, r3
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ca:	2b0f      	cmp	r3, #15
 800c5cc:	d909      	bls.n	800c5e2 <UART_SetConfig+0xa8e>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5d4:	d205      	bcs.n	800c5e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60da      	str	r2, [r3, #12]
 800c5e0:	e002      	b.n	800c5e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2200      	movs	r2, #0
 800c602:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c604:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3748      	adds	r7, #72	@ 0x48
 800c60c:	46bd      	mov	sp, r7
 800c60e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c612:	bf00      	nop
 800c614:	58024400 	.word	0x58024400
 800c618:	03d09000 	.word	0x03d09000
 800c61c:	003d0900 	.word	0x003d0900
 800c620:	08015078 	.word	0x08015078

0800c624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c630:	f003 0308 	and.w	r3, r3, #8
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	430a      	orrs	r2, r1
 800c64c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c696:	f003 0304 	and.w	r3, r3, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00a      	beq.n	800c6b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	430a      	orrs	r2, r1
 800c6b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b8:	f003 0310 	and.w	r3, r3, #16
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00a      	beq.n	800c6d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	430a      	orrs	r2, r1
 800c6f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	d01a      	beq.n	800c73a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c71e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c722:	d10a      	bne.n	800c73a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	605a      	str	r2, [r3, #4]
  }
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b098      	sub	sp, #96	@ 0x60
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c778:	f7f9 f8cc 	bl	8005914 <HAL_GetTick>
 800c77c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0308 	and.w	r3, r3, #8
 800c788:	2b08      	cmp	r3, #8
 800c78a:	d12f      	bne.n	800c7ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c78c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c794:	2200      	movs	r2, #0
 800c796:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f88e 	bl	800c8bc <UART_WaitOnFlagUntilTimeout>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d022      	beq.n	800c7ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ae:	e853 3f00 	ldrex	r3, [r3]
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7cc:	e841 2300 	strex	r3, r2, [r1]
 800c7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e6      	bne.n	800c7a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	e063      	b.n	800c8b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0304 	and.w	r3, r3, #4
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	d149      	bne.n	800c88e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c802:	2200      	movs	r2, #0
 800c804:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f857 	bl	800c8bc <UART_WaitOnFlagUntilTimeout>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d03c      	beq.n	800c88e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	623b      	str	r3, [r7, #32]
   return(result);
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c832:	633b      	str	r3, [r7, #48]	@ 0x30
 800c834:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e6      	bne.n	800c814 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3308      	adds	r3, #8
 800c84c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	60fb      	str	r3, [r7, #12]
   return(result);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f023 0301 	bic.w	r3, r3, #1
 800c85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3308      	adds	r3, #8
 800c864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c866:	61fa      	str	r2, [r7, #28]
 800c868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	69b9      	ldr	r1, [r7, #24]
 800c86c:	69fa      	ldr	r2, [r7, #28]
 800c86e:	e841 2300 	strex	r3, r2, [r1]
 800c872:	617b      	str	r3, [r7, #20]
   return(result);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1e5      	bne.n	800c846 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2220      	movs	r2, #32
 800c87e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e012      	b.n	800c8b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2220      	movs	r2, #32
 800c892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2220      	movs	r2, #32
 800c89a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3758      	adds	r7, #88	@ 0x58
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8cc:	e04f      	b.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d4:	d04b      	beq.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8d6:	f7f9 f81d 	bl	8005914 <HAL_GetTick>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d302      	bcc.n	800c8ec <UART_WaitOnFlagUntilTimeout+0x30>
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e04e      	b.n	800c98e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0304 	and.w	r3, r3, #4
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d037      	beq.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b80      	cmp	r3, #128	@ 0x80
 800c902:	d034      	beq.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	2b40      	cmp	r3, #64	@ 0x40
 800c908:	d031      	beq.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	69db      	ldr	r3, [r3, #28]
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b08      	cmp	r3, #8
 800c916:	d110      	bne.n	800c93a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2208      	movs	r2, #8
 800c91e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 f95b 	bl	800cbdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2208      	movs	r2, #8
 800c92a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e029      	b.n	800c98e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c948:	d111      	bne.n	800c96e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 f941 	bl	800cbdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c96a:	2303      	movs	r3, #3
 800c96c:	e00f      	b.n	800c98e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69da      	ldr	r2, [r3, #28]
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	4013      	ands	r3, r2
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	bf0c      	ite	eq
 800c97e:	2301      	moveq	r3, #1
 800c980:	2300      	movne	r3, #0
 800c982:	b2db      	uxtb	r3, r3
 800c984:	461a      	mov	r2, r3
 800c986:	79fb      	ldrb	r3, [r7, #7]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d0a0      	beq.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c998:	b480      	push	{r7}
 800c99a:	b0a3      	sub	sp, #140	@ 0x8c
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	88fa      	ldrh	r2, [r7, #6]
 800c9b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	88fa      	ldrh	r2, [r7, #6]
 800c9b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ca:	d10e      	bne.n	800c9ea <UART_Start_Receive_IT+0x52>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d105      	bne.n	800c9e0 <UART_Start_Receive_IT+0x48>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c9da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9de:	e02d      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	22ff      	movs	r2, #255	@ 0xff
 800c9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c9e8:	e028      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10d      	bne.n	800ca0e <UART_Start_Receive_IT+0x76>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d104      	bne.n	800ca04 <UART_Start_Receive_IT+0x6c>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	22ff      	movs	r2, #255	@ 0xff
 800c9fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca02:	e01b      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	227f      	movs	r2, #127	@ 0x7f
 800ca08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca0c:	e016      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca16:	d10d      	bne.n	800ca34 <UART_Start_Receive_IT+0x9c>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d104      	bne.n	800ca2a <UART_Start_Receive_IT+0x92>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	227f      	movs	r2, #127	@ 0x7f
 800ca24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca28:	e008      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	223f      	movs	r2, #63	@ 0x3f
 800ca2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ca32:	e003      	b.n	800ca3c <UART_Start_Receive_IT+0xa4>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2222      	movs	r2, #34	@ 0x22
 800ca48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3308      	adds	r3, #8
 800ca52:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca56:	e853 3f00 	ldrex	r3, [r3]
 800ca5a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ca5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca5e:	f043 0301 	orr.w	r3, r3, #1
 800ca62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ca70:	673a      	str	r2, [r7, #112]	@ 0x70
 800ca72:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca74:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ca78:	e841 2300 	strex	r3, r2, [r1]
 800ca7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ca7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1e3      	bne.n	800ca4c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca8c:	d14f      	bne.n	800cb2e <UART_Start_Receive_IT+0x196>
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca94:	88fa      	ldrh	r2, [r7, #6]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d349      	bcc.n	800cb2e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caa2:	d107      	bne.n	800cab4 <UART_Start_Receive_IT+0x11c>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a47      	ldr	r2, [pc, #284]	@ (800cbcc <UART_Start_Receive_IT+0x234>)
 800cab0:	675a      	str	r2, [r3, #116]	@ 0x74
 800cab2:	e002      	b.n	800caba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4a46      	ldr	r2, [pc, #280]	@ (800cbd0 <UART_Start_Receive_IT+0x238>)
 800cab8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d01a      	beq.n	800caf8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caca:	e853 3f00 	ldrex	r3, [r3]
 800cace:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	461a      	mov	r2, r3
 800cae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cae6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800caea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800caec:	e841 2300 	strex	r3, r2, [r1]
 800caf0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800caf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e4      	bne.n	800cac2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	3308      	adds	r3, #8
 800cafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb02:	e853 3f00 	ldrex	r3, [r3]
 800cb06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3308      	adds	r3, #8
 800cb16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb18:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cb1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb20:	e841 2300 	strex	r3, r2, [r1]
 800cb24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e5      	bne.n	800caf8 <UART_Start_Receive_IT+0x160>
 800cb2c:	e046      	b.n	800cbbc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb36:	d107      	bne.n	800cb48 <UART_Start_Receive_IT+0x1b0>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d103      	bne.n	800cb48 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4a24      	ldr	r2, [pc, #144]	@ (800cbd4 <UART_Start_Receive_IT+0x23c>)
 800cb44:	675a      	str	r2, [r3, #116]	@ 0x74
 800cb46:	e002      	b.n	800cb4e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	4a23      	ldr	r2, [pc, #140]	@ (800cbd8 <UART_Start_Receive_IT+0x240>)
 800cb4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d019      	beq.n	800cb8a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cb6a:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb74:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb76:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e6      	bne.n	800cb56 <UART_Start_Receive_IT+0x1be>
 800cb88:	e018      	b.n	800cbbc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	613b      	str	r3, [r7, #16]
   return(result);
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	f043 0320 	orr.w	r3, r3, #32
 800cb9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cba8:	623b      	str	r3, [r7, #32]
 800cbaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbac:	69f9      	ldr	r1, [r7, #28]
 800cbae:	6a3a      	ldr	r2, [r7, #32]
 800cbb0:	e841 2300 	strex	r3, r2, [r1]
 800cbb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e6      	bne.n	800cb8a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	378c      	adds	r7, #140	@ 0x8c
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	0800d3f9 	.word	0x0800d3f9
 800cbd0:	0800d095 	.word	0x0800d095
 800cbd4:	0800cedd 	.word	0x0800cedd
 800cbd8:	0800cd25 	.word	0x0800cd25

0800cbdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b095      	sub	sp, #84	@ 0x54
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc02:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc0a:	e841 2300 	strex	r3, r2, [r1]
 800cc0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1e6      	bne.n	800cbe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	e853 3f00 	ldrex	r3, [r3]
 800cc24:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	4b1e      	ldr	r3, [pc, #120]	@ (800cca4 <UART_EndRxTransfer+0xc8>)
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3308      	adds	r3, #8
 800cc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc3e:	e841 2300 	strex	r3, r2, [r1]
 800cc42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1e5      	bne.n	800cc16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d118      	bne.n	800cc84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f023 0310 	bic.w	r3, r3, #16
 800cc66:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc70:	61bb      	str	r3, [r7, #24]
 800cc72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc74:	6979      	ldr	r1, [r7, #20]
 800cc76:	69ba      	ldr	r2, [r7, #24]
 800cc78:	e841 2300 	strex	r3, r2, [r1]
 800cc7c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1e6      	bne.n	800cc52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2220      	movs	r2, #32
 800cc88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc98:	bf00      	nop
 800cc9a:	3754      	adds	r7, #84	@ 0x54
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	effffffe 	.word	0xeffffffe

0800cca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7fe ff32 	bl	800bb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc4:	bf00      	nop
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	e853 3f00 	ldrex	r3, [r3]
 800cce0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf6:	6979      	ldr	r1, [r7, #20]
 800ccf8:	69ba      	ldr	r2, [r7, #24]
 800ccfa:	e841 2300 	strex	r3, r2, [r1]
 800ccfe:	613b      	str	r3, [r7, #16]
   return(result);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1e6      	bne.n	800ccd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2220      	movs	r2, #32
 800cd0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7fe fefd 	bl	800bb14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd1a:	bf00      	nop
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b09c      	sub	sp, #112	@ 0x70
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd3c:	2b22      	cmp	r3, #34	@ 0x22
 800cd3e:	f040 80be 	bne.w	800cebe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cd50:	b2d9      	uxtb	r1, r3
 800cd52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd5c:	400a      	ands	r2, r1
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f040 80a1 	bne.w	800cece <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cd9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cda0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdb2:	e841 2300 	strex	r3, r2, [r1]
 800cdb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1e6      	bne.n	800cd8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc8:	e853 3f00 	ldrex	r3, [r3]
 800cdcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	667b      	str	r3, [r7, #100]	@ 0x64
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3308      	adds	r3, #8
 800cddc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cdde:	647a      	str	r2, [r7, #68]	@ 0x44
 800cde0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cde4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e5      	bne.n	800cdbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a33      	ldr	r2, [pc, #204]	@ (800ced8 <UART_RxISR_8BIT+0x1b4>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d01f      	beq.n	800ce50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d018      	beq.n	800ce50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	e853 3f00 	ldrex	r3, [r3]
 800ce2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ce3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce44:	e841 2300 	strex	r3, r2, [r1]
 800ce48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1e6      	bne.n	800ce1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d12e      	bne.n	800ceb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f023 0310 	bic.w	r3, r3, #16
 800ce72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce7c:	61fb      	str	r3, [r7, #28]
 800ce7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce80:	69b9      	ldr	r1, [r7, #24]
 800ce82:	69fa      	ldr	r2, [r7, #28]
 800ce84:	e841 2300 	strex	r3, r2, [r1]
 800ce88:	617b      	str	r3, [r7, #20]
   return(result);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1e6      	bne.n	800ce5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	69db      	ldr	r3, [r3, #28]
 800ce96:	f003 0310 	and.w	r3, r3, #16
 800ce9a:	2b10      	cmp	r3, #16
 800ce9c:	d103      	bne.n	800cea6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2210      	movs	r2, #16
 800cea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ceac:	4619      	mov	r1, r3
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7fe fe44 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ceb4:	e00b      	b.n	800cece <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7f6 fa4c 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 800cebc:	e007      	b.n	800cece <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	699a      	ldr	r2, [r3, #24]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f042 0208 	orr.w	r2, r2, #8
 800cecc:	619a      	str	r2, [r3, #24]
}
 800cece:	bf00      	nop
 800ced0:	3770      	adds	r7, #112	@ 0x70
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	58000c00 	.word	0x58000c00

0800cedc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b09c      	sub	sp, #112	@ 0x70
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ceea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cef4:	2b22      	cmp	r3, #34	@ 0x22
 800cef6:	f040 80be 	bne.w	800d076 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf08:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cf0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cf0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cf12:	4013      	ands	r3, r2
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf1e:	1c9a      	adds	r2, r3, #2
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f040 80a1 	bne.w	800d086 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf4c:	e853 3f00 	ldrex	r3, [r3]
 800cf50:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cf52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf58:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf62:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf64:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cf70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e6      	bne.n	800cf44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf80:	e853 3f00 	ldrex	r3, [r3]
 800cf84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	f023 0301 	bic.w	r3, r3, #1
 800cf8c:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3308      	adds	r3, #8
 800cf94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cf96:	643a      	str	r2, [r7, #64]	@ 0x40
 800cf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf9e:	e841 2300 	strex	r3, r2, [r1]
 800cfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1e5      	bne.n	800cf76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2220      	movs	r2, #32
 800cfae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a33      	ldr	r2, [pc, #204]	@ (800d090 <UART_RxISR_16BIT+0x1b4>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d01f      	beq.n	800d008 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d018      	beq.n	800d008 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	e853 3f00 	ldrex	r3, [r3]
 800cfe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cfea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	461a      	mov	r2, r3
 800cff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cff6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cffc:	e841 2300 	strex	r3, r2, [r1]
 800d000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e6      	bne.n	800cfd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d12e      	bne.n	800d06e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	e853 3f00 	ldrex	r3, [r3]
 800d022:	60bb      	str	r3, [r7, #8]
   return(result);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	f023 0310 	bic.w	r3, r3, #16
 800d02a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d034:	61bb      	str	r3, [r7, #24]
 800d036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d038:	6979      	ldr	r1, [r7, #20]
 800d03a:	69ba      	ldr	r2, [r7, #24]
 800d03c:	e841 2300 	strex	r3, r2, [r1]
 800d040:	613b      	str	r3, [r7, #16]
   return(result);
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1e6      	bne.n	800d016 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	f003 0310 	and.w	r3, r3, #16
 800d052:	2b10      	cmp	r3, #16
 800d054:	d103      	bne.n	800d05e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2210      	movs	r2, #16
 800d05c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7fe fd68 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d06c:	e00b      	b.n	800d086 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7f6 f970 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 800d074:	e007      	b.n	800d086 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	699a      	ldr	r2, [r3, #24]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f042 0208 	orr.w	r2, r2, #8
 800d084:	619a      	str	r2, [r3, #24]
}
 800d086:	bf00      	nop
 800d088:	3770      	adds	r7, #112	@ 0x70
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	58000c00 	.word	0x58000c00

0800d094 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b0ac      	sub	sp, #176	@ 0xb0
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d0a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	69db      	ldr	r3, [r3, #28]
 800d0ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0ca:	2b22      	cmp	r3, #34	@ 0x22
 800d0cc:	f040 8181 	bne.w	800d3d2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d0d6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0da:	e124      	b.n	800d326 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d0e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d0ea:	b2d9      	uxtb	r1, r3
 800d0ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0f6:	400a      	ands	r2, r1
 800d0f8:	b2d2      	uxtb	r2, r2
 800d0fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	3b01      	subs	r3, #1
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d126:	f003 0307 	and.w	r3, r3, #7
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d053      	beq.n	800d1d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d12e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d011      	beq.n	800d15e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d13a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00b      	beq.n	800d15e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2201      	movs	r2, #1
 800d14c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d154:	f043 0201 	orr.w	r2, r3, #1
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d15e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d011      	beq.n	800d18e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2202      	movs	r2, #2
 800d17c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d184:	f043 0204 	orr.w	r2, r3, #4
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d192:	f003 0304 	and.w	r3, r3, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	d011      	beq.n	800d1be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d19a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00b      	beq.n	800d1be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2204      	movs	r2, #4
 800d1ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1b4:	f043 0202 	orr.w	r2, r3, #2
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fe fcad 	bl	800bb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f040 80a1 	bne.w	800d326 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d1f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d206:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d208:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d20c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d20e:	e841 2300 	strex	r3, r2, [r1]
 800d212:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1e4      	bne.n	800d1e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3308      	adds	r3, #8
 800d220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d224:	e853 3f00 	ldrex	r3, [r3]
 800d228:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d22a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d22c:	4b6f      	ldr	r3, [pc, #444]	@ (800d3ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d22e:	4013      	ands	r3, r2
 800d230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3308      	adds	r3, #8
 800d23a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d23e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d240:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d242:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d244:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d246:	e841 2300 	strex	r3, r2, [r1]
 800d24a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d24c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1e3      	bne.n	800d21a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2220      	movs	r2, #32
 800d256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a61      	ldr	r2, [pc, #388]	@ (800d3f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d021      	beq.n	800d2b4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d01a      	beq.n	800d2b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d286:	e853 3f00 	ldrex	r3, [r3]
 800d28a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d28c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d28e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d2a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2a8:	e841 2300 	strex	r3, r2, [r1]
 800d2ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1e4      	bne.n	800d27e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d130      	bne.n	800d31e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ca:	e853 3f00 	ldrex	r3, [r3]
 800d2ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d2:	f023 0310 	bic.w	r3, r3, #16
 800d2d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d2ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d2ec:	e841 2300 	strex	r3, r2, [r1]
 800d2f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e4      	bne.n	800d2c2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	f003 0310 	and.w	r3, r3, #16
 800d302:	2b10      	cmp	r3, #16
 800d304:	d103      	bne.n	800d30e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2210      	movs	r2, #16
 800d30c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7fe fc10 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d31c:	e00e      	b.n	800d33c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7f6 f818 	bl	8003354 <HAL_UART_RxCpltCallback>
        break;
 800d324:	e00a      	b.n	800d33c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d326:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d006      	beq.n	800d33c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800d32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b00      	cmp	r3, #0
 800d338:	f47f aed0 	bne.w	800d0dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d342:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d346:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d049      	beq.n	800d3e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d354:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d358:	429a      	cmp	r2, r3
 800d35a:	d242      	bcs.n	800d3e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3308      	adds	r3, #8
 800d362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	e853 3f00 	ldrex	r3, [r3]
 800d36a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3308      	adds	r3, #8
 800d37c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e3      	bne.n	800d35c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a17      	ldr	r2, [pc, #92]	@ (800d3f4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800d398:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	e853 3f00 	ldrex	r3, [r3]
 800d3a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	f043 0320 	orr.w	r3, r3, #32
 800d3ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d3bc:	61bb      	str	r3, [r7, #24]
 800d3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6979      	ldr	r1, [r7, #20]
 800d3c2:	69ba      	ldr	r2, [r7, #24]
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e4      	bne.n	800d39a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3d0:	e007      	b.n	800d3e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f042 0208 	orr.w	r2, r2, #8
 800d3e0:	619a      	str	r2, [r3, #24]
}
 800d3e2:	bf00      	nop
 800d3e4:	37b0      	adds	r7, #176	@ 0xb0
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	effffffe 	.word	0xeffffffe
 800d3f0:	58000c00 	.word	0x58000c00
 800d3f4:	0800cd25 	.word	0x0800cd25

0800d3f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b0ae      	sub	sp, #184	@ 0xb8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d406:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d42e:	2b22      	cmp	r3, #34	@ 0x22
 800d430:	f040 8185 	bne.w	800d73e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d43a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d43e:	e128      	b.n	800d692 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d446:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d44e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d452:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d456:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d45a:	4013      	ands	r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d462:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d468:	1c9a      	adds	r2, r3, #2
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d474:	b29b      	uxth	r3, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d48a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d48e:	f003 0307 	and.w	r3, r3, #7
 800d492:	2b00      	cmp	r3, #0
 800d494:	d053      	beq.n	800d53e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d011      	beq.n	800d4c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00b      	beq.n	800d4c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4bc:	f043 0201 	orr.w	r2, r3, #1
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4ca:	f003 0302 	and.w	r3, r3, #2
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d011      	beq.n	800d4f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d4d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d4d6:	f003 0301 	and.w	r3, r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ec:	f043 0204 	orr.w	r2, r3, #4
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d011      	beq.n	800d526 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00b      	beq.n	800d526 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2204      	movs	r2, #4
 800d514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d51c:	f043 0202 	orr.w	r2, r3, #2
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d006      	beq.n	800d53e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7fe faf9 	bl	800bb28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d544:	b29b      	uxth	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	f040 80a3 	bne.w	800d692 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d55a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d55c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d56e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d572:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e2      	bne.n	800d54c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3308      	adds	r3, #8
 800d58c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d596:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d598:	4b6f      	ldr	r3, [pc, #444]	@ (800d758 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d59a:	4013      	ands	r3, r2
 800d59c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d5aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d5ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d5b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d5b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e3      	bne.n	800d586 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a61      	ldr	r2, [pc, #388]	@ (800d75c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d021      	beq.n	800d620 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01a      	beq.n	800d620 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d5fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	461a      	mov	r2, r3
 800d608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d60c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d60e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d610:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d612:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d614:	e841 2300 	strex	r3, r2, [r1]
 800d618:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d61a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1e4      	bne.n	800d5ea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d624:	2b01      	cmp	r3, #1
 800d626:	d130      	bne.n	800d68a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d63e:	f023 0310 	bic.w	r3, r3, #16
 800d642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d650:	647b      	str	r3, [r7, #68]	@ 0x44
 800d652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d658:	e841 2300 	strex	r3, r2, [r1]
 800d65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1e4      	bne.n	800d62e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	69db      	ldr	r3, [r3, #28]
 800d66a:	f003 0310 	and.w	r3, r3, #16
 800d66e:	2b10      	cmp	r3, #16
 800d670:	d103      	bne.n	800d67a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2210      	movs	r2, #16
 800d678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d680:	4619      	mov	r1, r3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fe fa5a 	bl	800bb3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d688:	e00e      	b.n	800d6a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7f5 fe62 	bl	8003354 <HAL_UART_RxCpltCallback>
        break;
 800d690:	e00a      	b.n	800d6a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d692:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d696:	2b00      	cmp	r3, #0
 800d698:	d006      	beq.n	800d6a8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800d69a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f47f aecc 	bne.w	800d440 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d6ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d049      	beq.n	800d74e <UART_RxISR_16BIT_FIFOEN+0x356>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d6c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d242      	bcs.n	800d74e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	e853 3f00 	ldrex	r3, [r3]
 800d6d6:	623b      	str	r3, [r7, #32]
   return(result);
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e3      	bne.n	800d6c8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a17      	ldr	r2, [pc, #92]	@ (800d760 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d704:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	e853 3f00 	ldrex	r3, [r3]
 800d712:	60fb      	str	r3, [r7, #12]
   return(result);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f043 0320 	orr.w	r3, r3, #32
 800d71a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d728:	61fb      	str	r3, [r7, #28]
 800d72a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	69b9      	ldr	r1, [r7, #24]
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	617b      	str	r3, [r7, #20]
   return(result);
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e4      	bne.n	800d706 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d73c:	e007      	b.n	800d74e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	699a      	ldr	r2, [r3, #24]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f042 0208 	orr.w	r2, r2, #8
 800d74c:	619a      	str	r2, [r3, #24]
}
 800d74e:	bf00      	nop
 800d750:	37b8      	adds	r7, #184	@ 0xb8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	effffffe 	.word	0xeffffffe
 800d75c:	58000c00 	.word	0x58000c00
 800d760:	0800cedd 	.word	0x0800cedd

0800d764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d101      	bne.n	800d7b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	e027      	b.n	800d806 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2224      	movs	r2, #36	@ 0x24
 800d7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f022 0201 	bic.w	r2, r2, #1
 800d7dc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2220      	movs	r2, #32
 800d7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d822:	2b01      	cmp	r3, #1
 800d824:	d101      	bne.n	800d82a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d826:	2302      	movs	r3, #2
 800d828:	e02d      	b.n	800d886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2224      	movs	r2, #36	@ 0x24
 800d836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 0201 	bic.w	r2, r2, #1
 800d850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	430a      	orrs	r2, r1
 800d864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f850 	bl	800d90c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2220      	movs	r2, #32
 800d878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d101      	bne.n	800d8a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	e02d      	b.n	800d902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2224      	movs	r2, #36	@ 0x24
 800d8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f022 0201 	bic.w	r2, r2, #1
 800d8cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f812 	bl	800d90c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2220      	movs	r2, #32
 800d8f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d108      	bne.n	800d92e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d92c:	e031      	b.n	800d992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d92e:	2310      	movs	r3, #16
 800d930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d932:	2310      	movs	r3, #16
 800d934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	0e5b      	lsrs	r3, r3, #25
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	0f5b      	lsrs	r3, r3, #29
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0307 	and.w	r3, r3, #7
 800d954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d956:	7bbb      	ldrb	r3, [r7, #14]
 800d958:	7b3a      	ldrb	r2, [r7, #12]
 800d95a:	4911      	ldr	r1, [pc, #68]	@ (800d9a0 <UARTEx_SetNbDataToProcess+0x94>)
 800d95c:	5c8a      	ldrb	r2, [r1, r2]
 800d95e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d962:	7b3a      	ldrb	r2, [r7, #12]
 800d964:	490f      	ldr	r1, [pc, #60]	@ (800d9a4 <UARTEx_SetNbDataToProcess+0x98>)
 800d966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d968:	fb93 f3f2 	sdiv	r3, r3, r2
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d974:	7bfb      	ldrb	r3, [r7, #15]
 800d976:	7b7a      	ldrb	r2, [r7, #13]
 800d978:	4909      	ldr	r1, [pc, #36]	@ (800d9a0 <UARTEx_SetNbDataToProcess+0x94>)
 800d97a:	5c8a      	ldrb	r2, [r1, r2]
 800d97c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d980:	7b7a      	ldrb	r2, [r7, #13]
 800d982:	4908      	ldr	r1, [pc, #32]	@ (800d9a4 <UARTEx_SetNbDataToProcess+0x98>)
 800d984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d986:	fb93 f3f2 	sdiv	r3, r3, r2
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d992:	bf00      	nop
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	08015090 	.word	0x08015090
 800d9a4:	08015098 	.word	0x08015098

0800d9a8 <__NVIC_SetPriority>:
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	6039      	str	r1, [r7, #0]
 800d9b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d9b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	db0a      	blt.n	800d9d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	490c      	ldr	r1, [pc, #48]	@ (800d9f4 <__NVIC_SetPriority+0x4c>)
 800d9c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9c6:	0112      	lsls	r2, r2, #4
 800d9c8:	b2d2      	uxtb	r2, r2
 800d9ca:	440b      	add	r3, r1
 800d9cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d9d0:	e00a      	b.n	800d9e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	4908      	ldr	r1, [pc, #32]	@ (800d9f8 <__NVIC_SetPriority+0x50>)
 800d9d8:	88fb      	ldrh	r3, [r7, #6]
 800d9da:	f003 030f 	and.w	r3, r3, #15
 800d9de:	3b04      	subs	r3, #4
 800d9e0:	0112      	lsls	r2, r2, #4
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	440b      	add	r3, r1
 800d9e6:	761a      	strb	r2, [r3, #24]
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	e000e100 	.word	0xe000e100
 800d9f8:	e000ed00 	.word	0xe000ed00

0800d9fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800da00:	4b05      	ldr	r3, [pc, #20]	@ (800da18 <SysTick_Handler+0x1c>)
 800da02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800da04:	f001 fdb0 	bl	800f568 <xTaskGetSchedulerState>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d001      	beq.n	800da12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800da0e:	f002 fbab 	bl	8010168 <xPortSysTickHandler>
  }
}
 800da12:	bf00      	nop
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	e000e010 	.word	0xe000e010

0800da1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800da20:	2100      	movs	r1, #0
 800da22:	f06f 0004 	mvn.w	r0, #4
 800da26:	f7ff ffbf 	bl	800d9a8 <__NVIC_SetPriority>
#endif
}
 800da2a:	bf00      	nop
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da36:	f3ef 8305 	mrs	r3, IPSR
 800da3a:	603b      	str	r3, [r7, #0]
  return(result);
 800da3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da42:	f06f 0305 	mvn.w	r3, #5
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	e00c      	b.n	800da64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da4a:	4b0a      	ldr	r3, [pc, #40]	@ (800da74 <osKernelInitialize+0x44>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d105      	bne.n	800da5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da52:	4b08      	ldr	r3, [pc, #32]	@ (800da74 <osKernelInitialize+0x44>)
 800da54:	2201      	movs	r2, #1
 800da56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da58:	2300      	movs	r3, #0
 800da5a:	607b      	str	r3, [r7, #4]
 800da5c:	e002      	b.n	800da64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da5e:	f04f 33ff 	mov.w	r3, #4294967295
 800da62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da64:	687b      	ldr	r3, [r7, #4]
}
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	240016e4 	.word	0x240016e4

0800da78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7e:	f3ef 8305 	mrs	r3, IPSR
 800da82:	603b      	str	r3, [r7, #0]
  return(result);
 800da84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <osKernelStart+0x1a>
    stat = osErrorISR;
 800da8a:	f06f 0305 	mvn.w	r3, #5
 800da8e:	607b      	str	r3, [r7, #4]
 800da90:	e010      	b.n	800dab4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da92:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <osKernelStart+0x48>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d109      	bne.n	800daae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da9a:	f7ff ffbf 	bl	800da1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da9e:	4b08      	ldr	r3, [pc, #32]	@ (800dac0 <osKernelStart+0x48>)
 800daa0:	2202      	movs	r2, #2
 800daa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800daa4:	f001 f8fc 	bl	800eca0 <vTaskStartScheduler>
      stat = osOK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	e002      	b.n	800dab4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800daae:	f04f 33ff 	mov.w	r3, #4294967295
 800dab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dab4:	687b      	ldr	r3, [r7, #4]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	240016e4 	.word	0x240016e4

0800dac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08e      	sub	sp, #56	@ 0x38
 800dac8:	af04      	add	r7, sp, #16
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dad4:	f3ef 8305 	mrs	r3, IPSR
 800dad8:	617b      	str	r3, [r7, #20]
  return(result);
 800dada:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d17e      	bne.n	800dbde <osThreadNew+0x11a>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d07b      	beq.n	800dbde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dae6:	2380      	movs	r3, #128	@ 0x80
 800dae8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800daea:	2318      	movs	r3, #24
 800daec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800daf2:	f04f 33ff 	mov.w	r3, #4294967295
 800daf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d045      	beq.n	800db8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <osThreadNew+0x48>
        name = attr->name;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d008      	beq.n	800db32 <osThreadNew+0x6e>
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b38      	cmp	r3, #56	@ 0x38
 800db24:	d805      	bhi.n	800db32 <osThreadNew+0x6e>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <osThreadNew+0x72>
        return (NULL);
 800db32:	2300      	movs	r3, #0
 800db34:	e054      	b.n	800dbe0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	089b      	lsrs	r3, r3, #2
 800db44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00e      	beq.n	800db6c <osThreadNew+0xa8>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	2ba7      	cmp	r3, #167	@ 0xa7
 800db54:	d90a      	bls.n	800db6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d006      	beq.n	800db6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <osThreadNew+0xa8>
        mem = 1;
 800db66:	2301      	movs	r3, #1
 800db68:	61bb      	str	r3, [r7, #24]
 800db6a:	e010      	b.n	800db8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10c      	bne.n	800db8e <osThreadNew+0xca>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d108      	bne.n	800db8e <osThreadNew+0xca>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d104      	bne.n	800db8e <osThreadNew+0xca>
          mem = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	61bb      	str	r3, [r7, #24]
 800db88:	e001      	b.n	800db8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d110      	bne.n	800dbb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db9c:	9202      	str	r2, [sp, #8]
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	6a3a      	ldr	r2, [r7, #32]
 800dba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 fe3a 	bl	800e824 <xTaskCreateStatic>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	e013      	b.n	800dbde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d110      	bne.n	800dbde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	f107 0310 	add.w	r3, r7, #16
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 fe88 	bl	800e8e4 <xTaskCreate>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d001      	beq.n	800dbde <osThreadNew+0x11a>
            hTask = NULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbde:	693b      	ldr	r3, [r7, #16]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3728      	adds	r7, #40	@ 0x28
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	4a07      	ldr	r2, [pc, #28]	@ (800dc14 <vApplicationGetIdleTaskMemory+0x2c>)
 800dbf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	4a06      	ldr	r2, [pc, #24]	@ (800dc18 <vApplicationGetIdleTaskMemory+0x30>)
 800dbfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2280      	movs	r2, #128	@ 0x80
 800dc04:	601a      	str	r2, [r3, #0]
}
 800dc06:	bf00      	nop
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	240016e8 	.word	0x240016e8
 800dc18:	24001790 	.word	0x24001790

0800dc1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	4a07      	ldr	r2, [pc, #28]	@ (800dc48 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	4a06      	ldr	r2, [pc, #24]	@ (800dc4c <vApplicationGetTimerTaskMemory+0x30>)
 800dc32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc3a:	601a      	str	r2, [r3, #0]
}
 800dc3c:	bf00      	nop
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	24001990 	.word	0x24001990
 800dc4c:	24001a38 	.word	0x24001a38

0800dc50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f103 0208 	add.w	r2, r3, #8
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f04f 32ff 	mov.w	r2, #4294967295
 800dc68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f103 0208 	add.w	r2, r3, #8
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f103 0208 	add.w	r2, r3, #8
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc9e:	bf00      	nop
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b085      	sub	sp, #20
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	689a      	ldr	r2, [r3, #8]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	1c5a      	adds	r2, r3, #1
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	601a      	str	r2, [r3, #0]
}
 800dce6:	bf00      	nop
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b085      	sub	sp, #20
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd08:	d103      	bne.n	800dd12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	e00c      	b.n	800dd2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	3308      	adds	r3, #8
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e002      	b.n	800dd20 <vListInsert+0x2e>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d2f6      	bcs.n	800dd1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]
}
 800dd58:	bf00      	nop
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	6892      	ldr	r2, [r2, #8]
 800dd7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	6852      	ldr	r2, [r2, #4]
 800dd84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d103      	bne.n	800dd98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	689a      	ldr	r2, [r3, #8]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	1e5a      	subs	r2, r3, #1
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10b      	bne.n	800dde4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ddcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddde:	bf00      	nop
 800dde0:	bf00      	nop
 800dde2:	e7fd      	b.n	800dde0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dde4:	f002 f930 	bl	8010048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf0:	68f9      	ldr	r1, [r7, #12]
 800ddf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ddf4:	fb01 f303 	mul.w	r3, r1, r3
 800ddf8:	441a      	add	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de14:	3b01      	subs	r3, #1
 800de16:	68f9      	ldr	r1, [r7, #12]
 800de18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800de1a:	fb01 f303 	mul.w	r3, r1, r3
 800de1e:	441a      	add	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	22ff      	movs	r2, #255	@ 0xff
 800de28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	22ff      	movs	r2, #255	@ 0xff
 800de30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d114      	bne.n	800de64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d01a      	beq.n	800de78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3310      	adds	r3, #16
 800de46:	4618      	mov	r0, r3
 800de48:	f001 f9c8 	bl	800f1dc <xTaskRemoveFromEventList>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d012      	beq.n	800de78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de52:	4b0d      	ldr	r3, [pc, #52]	@ (800de88 <xQueueGenericReset+0xd0>)
 800de54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	e009      	b.n	800de78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	3310      	adds	r3, #16
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fef1 	bl	800dc50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3324      	adds	r3, #36	@ 0x24
 800de72:	4618      	mov	r0, r3
 800de74:	f7ff feec 	bl	800dc50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de78:	f002 f918 	bl	80100ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de7c:	2301      	movs	r3, #1
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	e000ed04 	.word	0xe000ed04

0800de8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08e      	sub	sp, #56	@ 0x38
 800de90:	af02      	add	r7, sp, #8
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10b      	bne.n	800ded6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	e7fd      	b.n	800ded2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <xQueueGenericCreateStatic+0x56>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <xQueueGenericCreateStatic+0x5a>
 800dee2:	2301      	movs	r3, #1
 800dee4:	e000      	b.n	800dee8 <xQueueGenericCreateStatic+0x5c>
 800dee6:	2300      	movs	r3, #0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10b      	bne.n	800df04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	623b      	str	r3, [r7, #32]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d102      	bne.n	800df10 <xQueueGenericCreateStatic+0x84>
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <xQueueGenericCreateStatic+0x88>
 800df10:	2301      	movs	r3, #1
 800df12:	e000      	b.n	800df16 <xQueueGenericCreateStatic+0x8a>
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10b      	bne.n	800df32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	61fb      	str	r3, [r7, #28]
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	e7fd      	b.n	800df2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df32:	2350      	movs	r3, #80	@ 0x50
 800df34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b50      	cmp	r3, #80	@ 0x50
 800df3a:	d00b      	beq.n	800df54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	61bb      	str	r3, [r7, #24]
}
 800df4e:	bf00      	nop
 800df50:	bf00      	nop
 800df52:	e7fd      	b.n	800df50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00d      	beq.n	800df7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df62:	2201      	movs	r2, #1
 800df64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4613      	mov	r3, r2
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	68b9      	ldr	r1, [r7, #8]
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f000 f840 	bl	800dffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800df7e:	4618      	mov	r0, r3
 800df80:	3730      	adds	r7, #48	@ 0x30
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df86:	b580      	push	{r7, lr}
 800df88:	b08a      	sub	sp, #40	@ 0x28
 800df8a:	af02      	add	r7, sp, #8
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	4613      	mov	r3, r2
 800df92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10b      	bne.n	800dfb2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	613b      	str	r3, [r7, #16]
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	e7fd      	b.n	800dfae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	fb02 f303 	mul.w	r3, r2, r3
 800dfba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	3350      	adds	r3, #80	@ 0x50
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f002 f963 	bl	801028c <pvPortMalloc>
 800dfc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d011      	beq.n	800dff2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	3350      	adds	r3, #80	@ 0x50
 800dfd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfe0:	79fa      	ldrb	r2, [r7, #7]
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	68b9      	ldr	r1, [r7, #8]
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f000 f805 	bl	800dffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dff2:	69bb      	ldr	r3, [r7, #24]
	}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3720      	adds	r7, #32
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
 800e008:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d103      	bne.n	800e018 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	69ba      	ldr	r2, [r7, #24]
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	e002      	b.n	800e01e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e02a:	2101      	movs	r1, #1
 800e02c:	69b8      	ldr	r0, [r7, #24]
 800e02e:	f7ff fec3 	bl	800ddb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	78fa      	ldrb	r2, [r7, #3]
 800e036:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e03a:	bf00      	nop
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
	...

0800e044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08e      	sub	sp, #56	@ 0x38
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e052:	2300      	movs	r3, #0
 800e054:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10b      	bne.n	800e078 <xQueueGenericSend+0x34>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	e7fd      	b.n	800e074 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d103      	bne.n	800e086 <xQueueGenericSend+0x42>
 800e07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <xQueueGenericSend+0x46>
 800e086:	2301      	movs	r3, #1
 800e088:	e000      	b.n	800e08c <xQueueGenericSend+0x48>
 800e08a:	2300      	movs	r3, #0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10b      	bne.n	800e0a8 <xQueueGenericSend+0x64>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e0a2:	bf00      	nop
 800e0a4:	bf00      	nop
 800e0a6:	e7fd      	b.n	800e0a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d103      	bne.n	800e0b6 <xQueueGenericSend+0x72>
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d101      	bne.n	800e0ba <xQueueGenericSend+0x76>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e000      	b.n	800e0bc <xQueueGenericSend+0x78>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10b      	bne.n	800e0d8 <xQueueGenericSend+0x94>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	623b      	str	r3, [r7, #32]
}
 800e0d2:	bf00      	nop
 800e0d4:	bf00      	nop
 800e0d6:	e7fd      	b.n	800e0d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0d8:	f001 fa46 	bl	800f568 <xTaskGetSchedulerState>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d102      	bne.n	800e0e8 <xQueueGenericSend+0xa4>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <xQueueGenericSend+0xa8>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e000      	b.n	800e0ee <xQueueGenericSend+0xaa>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10b      	bne.n	800e10a <xQueueGenericSend+0xc6>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	61fb      	str	r3, [r7, #28]
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop
 800e108:	e7fd      	b.n	800e106 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e10a:	f001 ff9d 	bl	8010048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e116:	429a      	cmp	r2, r3
 800e118:	d302      	bcc.n	800e120 <xQueueGenericSend+0xdc>
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d129      	bne.n	800e174 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	68b9      	ldr	r1, [r7, #8]
 800e124:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e126:	f000 fa0f 	bl	800e548 <prvCopyDataToQueue>
 800e12a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e130:	2b00      	cmp	r3, #0
 800e132:	d010      	beq.n	800e156 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	3324      	adds	r3, #36	@ 0x24
 800e138:	4618      	mov	r0, r3
 800e13a:	f001 f84f 	bl	800f1dc <xTaskRemoveFromEventList>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d013      	beq.n	800e16c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e144:	4b3f      	ldr	r3, [pc, #252]	@ (800e244 <xQueueGenericSend+0x200>)
 800e146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	e00a      	b.n	800e16c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d007      	beq.n	800e16c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e15c:	4b39      	ldr	r3, [pc, #228]	@ (800e244 <xQueueGenericSend+0x200>)
 800e15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e16c:	f001 ff9e 	bl	80100ac <vPortExitCritical>
				return pdPASS;
 800e170:	2301      	movs	r3, #1
 800e172:	e063      	b.n	800e23c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d103      	bne.n	800e182 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e17a:	f001 ff97 	bl	80100ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	e05c      	b.n	800e23c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e188:	f107 0314 	add.w	r3, r7, #20
 800e18c:	4618      	mov	r0, r3
 800e18e:	f001 f889 	bl	800f2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e192:	2301      	movs	r3, #1
 800e194:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e196:	f001 ff89 	bl	80100ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e19a:	f000 fdf1 	bl	800ed80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e19e:	f001 ff53 	bl	8010048 <vPortEnterCritical>
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1a8:	b25b      	sxtb	r3, r3
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	d103      	bne.n	800e1b8 <xQueueGenericSend+0x174>
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1be:	b25b      	sxtb	r3, r3
 800e1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c4:	d103      	bne.n	800e1ce <xQueueGenericSend+0x18a>
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1ce:	f001 ff6d 	bl	80100ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1d2:	1d3a      	adds	r2, r7, #4
 800e1d4:	f107 0314 	add.w	r3, r7, #20
 800e1d8:	4611      	mov	r1, r2
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f001 f878 	bl	800f2d0 <xTaskCheckForTimeOut>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d124      	bne.n	800e230 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1e8:	f000 faa6 	bl	800e738 <prvIsQueueFull>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d018      	beq.n	800e224 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f4:	3310      	adds	r3, #16
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f000 ff9c 	bl	800f138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e202:	f000 fa31 	bl	800e668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e206:	f000 fdc9 	bl	800ed9c <xTaskResumeAll>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f47f af7c 	bne.w	800e10a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e212:	4b0c      	ldr	r3, [pc, #48]	@ (800e244 <xQueueGenericSend+0x200>)
 800e214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	e772      	b.n	800e10a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e226:	f000 fa1f 	bl	800e668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e22a:	f000 fdb7 	bl	800ed9c <xTaskResumeAll>
 800e22e:	e76c      	b.n	800e10a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e232:	f000 fa19 	bl	800e668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e236:	f000 fdb1 	bl	800ed9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e23a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3738      	adds	r7, #56	@ 0x38
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	e000ed04 	.word	0xe000ed04

0800e248 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b090      	sub	sp, #64	@ 0x40
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10b      	bne.n	800e278 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e272:	bf00      	nop
 800e274:	bf00      	nop
 800e276:	e7fd      	b.n	800e274 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d103      	bne.n	800e286 <xQueueGenericSendFromISR+0x3e>
 800e27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e282:	2b00      	cmp	r3, #0
 800e284:	d101      	bne.n	800e28a <xQueueGenericSendFromISR+0x42>
 800e286:	2301      	movs	r3, #1
 800e288:	e000      	b.n	800e28c <xQueueGenericSendFromISR+0x44>
 800e28a:	2300      	movs	r3, #0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10b      	bne.n	800e2a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	e7fd      	b.n	800e2a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d103      	bne.n	800e2b6 <xQueueGenericSendFromISR+0x6e>
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d101      	bne.n	800e2ba <xQueueGenericSendFromISR+0x72>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <xQueueGenericSendFromISR+0x74>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10b      	bne.n	800e2d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	623b      	str	r3, [r7, #32]
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	e7fd      	b.n	800e2d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2d8:	f001 ff96 	bl	8010208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2dc:	f3ef 8211 	mrs	r2, BASEPRI
 800e2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	61fa      	str	r2, [r7, #28]
 800e2f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e300:	429a      	cmp	r2, r3
 800e302:	d302      	bcc.n	800e30a <xQueueGenericSendFromISR+0xc2>
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d12f      	bne.n	800e36a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e318:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	68b9      	ldr	r1, [r7, #8]
 800e31e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e320:	f000 f912 	bl	800e548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e324:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d112      	bne.n	800e354 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d016      	beq.n	800e364 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e338:	3324      	adds	r3, #36	@ 0x24
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 ff4e 	bl	800f1dc <xTaskRemoveFromEventList>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00e      	beq.n	800e364 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00b      	beq.n	800e364 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	e007      	b.n	800e364 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e354:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e358:	3301      	adds	r3, #1
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	b25a      	sxtb	r2, r3
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e364:	2301      	movs	r3, #1
 800e366:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e368:	e001      	b.n	800e36e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e370:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e378:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3740      	adds	r7, #64	@ 0x40
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	@ 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e390:	2300      	movs	r3, #0
 800e392:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d10b      	bne.n	800e3b6 <xQueueReceive+0x32>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	623b      	str	r3, [r7, #32]
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	e7fd      	b.n	800e3b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d103      	bne.n	800e3c4 <xQueueReceive+0x40>
 800e3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <xQueueReceive+0x44>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e000      	b.n	800e3ca <xQueueReceive+0x46>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10b      	bne.n	800e3e6 <xQueueReceive+0x62>
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	61fb      	str	r3, [r7, #28]
}
 800e3e0:	bf00      	nop
 800e3e2:	bf00      	nop
 800e3e4:	e7fd      	b.n	800e3e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3e6:	f001 f8bf 	bl	800f568 <xTaskGetSchedulerState>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <xQueueReceive+0x72>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <xQueueReceive+0x76>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <xQueueReceive+0x78>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10b      	bne.n	800e418 <xQueueReceive+0x94>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	61bb      	str	r3, [r7, #24]
}
 800e412:	bf00      	nop
 800e414:	bf00      	nop
 800e416:	e7fd      	b.n	800e414 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e418:	f001 fe16 	bl	8010048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e420:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01f      	beq.n	800e468 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e42c:	f000 f8f6 	bl	800e61c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	1e5a      	subs	r2, r3, #1
 800e434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e436:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00f      	beq.n	800e460 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e442:	3310      	adds	r3, #16
 800e444:	4618      	mov	r0, r3
 800e446:	f000 fec9 	bl	800f1dc <xTaskRemoveFromEventList>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d007      	beq.n	800e460 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e450:	4b3c      	ldr	r3, [pc, #240]	@ (800e544 <xQueueReceive+0x1c0>)
 800e452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e460:	f001 fe24 	bl	80100ac <vPortExitCritical>
				return pdPASS;
 800e464:	2301      	movs	r3, #1
 800e466:	e069      	b.n	800e53c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d103      	bne.n	800e476 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e46e:	f001 fe1d 	bl	80100ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e472:	2300      	movs	r3, #0
 800e474:	e062      	b.n	800e53c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d106      	bne.n	800e48a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e47c:	f107 0310 	add.w	r3, r7, #16
 800e480:	4618      	mov	r0, r3
 800e482:	f000 ff0f 	bl	800f2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e486:	2301      	movs	r3, #1
 800e488:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e48a:	f001 fe0f 	bl	80100ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e48e:	f000 fc77 	bl	800ed80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e492:	f001 fdd9 	bl	8010048 <vPortEnterCritical>
 800e496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e498:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e49c:	b25b      	sxtb	r3, r3
 800e49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a2:	d103      	bne.n	800e4ac <xQueueReceive+0x128>
 800e4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4b2:	b25b      	sxtb	r3, r3
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b8:	d103      	bne.n	800e4c2 <xQueueReceive+0x13e>
 800e4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4c2:	f001 fdf3 	bl	80100ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4c6:	1d3a      	adds	r2, r7, #4
 800e4c8:	f107 0310 	add.w	r3, r7, #16
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fefe 	bl	800f2d0 <xTaskCheckForTimeOut>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d123      	bne.n	800e522 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4dc:	f000 f916 	bl	800e70c <prvIsQueueEmpty>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d017      	beq.n	800e516 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e8:	3324      	adds	r3, #36	@ 0x24
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fe22 	bl	800f138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4f6:	f000 f8b7 	bl	800e668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4fa:	f000 fc4f 	bl	800ed9c <xTaskResumeAll>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d189      	bne.n	800e418 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e504:	4b0f      	ldr	r3, [pc, #60]	@ (800e544 <xQueueReceive+0x1c0>)
 800e506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	e780      	b.n	800e418 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e518:	f000 f8a6 	bl	800e668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e51c:	f000 fc3e 	bl	800ed9c <xTaskResumeAll>
 800e520:	e77a      	b.n	800e418 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e524:	f000 f8a0 	bl	800e668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e528:	f000 fc38 	bl	800ed9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e52c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e52e:	f000 f8ed 	bl	800e70c <prvIsQueueEmpty>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	f43f af6f 	beq.w	800e418 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e53a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3730      	adds	r7, #48	@ 0x30
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	e000ed04 	.word	0xe000ed04

0800e548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e554:	2300      	movs	r3, #0
 800e556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e55c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10d      	bne.n	800e582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d14d      	bne.n	800e60a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	689b      	ldr	r3, [r3, #8]
 800e572:	4618      	mov	r0, r3
 800e574:	f001 f816 	bl	800f5a4 <xTaskPriorityDisinherit>
 800e578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	609a      	str	r2, [r3, #8]
 800e580:	e043      	b.n	800e60a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d119      	bne.n	800e5bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6858      	ldr	r0, [r3, #4]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e590:	461a      	mov	r2, r3
 800e592:	68b9      	ldr	r1, [r7, #8]
 800e594:	f003 ff15 	bl	80123c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d32b      	bcc.n	800e60a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	605a      	str	r2, [r3, #4]
 800e5ba:	e026      	b.n	800e60a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68d8      	ldr	r0, [r3, #12]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	f003 fefb 	bl	80123c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	68da      	ldr	r2, [r3, #12]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5d4:	425b      	negs	r3, r3
 800e5d6:	441a      	add	r2, r3
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	68da      	ldr	r2, [r3, #12]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d207      	bcs.n	800e5f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f0:	425b      	negs	r3, r3
 800e5f2:	441a      	add	r2, r3
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d105      	bne.n	800e60a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	3b01      	subs	r3, #1
 800e608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e612:	697b      	ldr	r3, [r7, #20]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3718      	adds	r7, #24
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d018      	beq.n	800e660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68da      	ldr	r2, [r3, #12]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e636:	441a      	add	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	429a      	cmp	r2, r3
 800e646:	d303      	bcc.n	800e650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68d9      	ldr	r1, [r3, #12]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e658:	461a      	mov	r2, r3
 800e65a:	6838      	ldr	r0, [r7, #0]
 800e65c:	f003 feb1 	bl	80123c2 <memcpy>
	}
}
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e670:	f001 fcea 	bl	8010048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e67a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e67c:	e011      	b.n	800e6a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e682:	2b00      	cmp	r3, #0
 800e684:	d012      	beq.n	800e6ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3324      	adds	r3, #36	@ 0x24
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 fda6 	bl	800f1dc <xTaskRemoveFromEventList>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e696:	f000 fe7f 	bl	800f398 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	3b01      	subs	r3, #1
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	dce9      	bgt.n	800e67e <prvUnlockQueue+0x16>
 800e6aa:	e000      	b.n	800e6ae <prvUnlockQueue+0x46>
					break;
 800e6ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	22ff      	movs	r2, #255	@ 0xff
 800e6b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e6b6:	f001 fcf9 	bl	80100ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e6ba:	f001 fcc5 	bl	8010048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e6c6:	e011      	b.n	800e6ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d012      	beq.n	800e6f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	3310      	adds	r3, #16
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f000 fd81 	bl	800f1dc <xTaskRemoveFromEventList>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e6e0:	f000 fe5a 	bl	800f398 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e6e4:	7bbb      	ldrb	r3, [r7, #14]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dce9      	bgt.n	800e6c8 <prvUnlockQueue+0x60>
 800e6f4:	e000      	b.n	800e6f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e6f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	22ff      	movs	r2, #255	@ 0xff
 800e6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e700:	f001 fcd4 	bl	80100ac <vPortExitCritical>
}
 800e704:	bf00      	nop
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e714:	f001 fc98 	bl	8010048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e720:	2301      	movs	r3, #1
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e001      	b.n	800e72a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e726:	2300      	movs	r3, #0
 800e728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e72a:	f001 fcbf 	bl	80100ac <vPortExitCritical>

	return xReturn;
 800e72e:	68fb      	ldr	r3, [r7, #12]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e740:	f001 fc82 	bl	8010048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d102      	bne.n	800e756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e750:	2301      	movs	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	e001      	b.n	800e75a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e75a:	f001 fca7 	bl	80100ac <vPortExitCritical>

	return xReturn;
 800e75e:	68fb      	ldr	r3, [r7, #12]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	e014      	b.n	800e7a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e778:	4a0f      	ldr	r2, [pc, #60]	@ (800e7b8 <vQueueAddToRegistry+0x50>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10b      	bne.n	800e79c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e784:	490c      	ldr	r1, [pc, #48]	@ (800e7b8 <vQueueAddToRegistry+0x50>)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e78e:	4a0a      	ldr	r2, [pc, #40]	@ (800e7b8 <vQueueAddToRegistry+0x50>)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	4413      	add	r3, r2
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e79a:	e006      	b.n	800e7aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b07      	cmp	r3, #7
 800e7a6:	d9e7      	bls.n	800e778 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	24001e38 	.word	0x24001e38

0800e7bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e7cc:	f001 fc3c 	bl	8010048 <vPortEnterCritical>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e7d6:	b25b      	sxtb	r3, r3
 800e7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7dc:	d103      	bne.n	800e7e6 <vQueueWaitForMessageRestricted+0x2a>
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7ec:	b25b      	sxtb	r3, r3
 800e7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f2:	d103      	bne.n	800e7fc <vQueueWaitForMessageRestricted+0x40>
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7fc:	f001 fc56 	bl	80100ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e804:	2b00      	cmp	r3, #0
 800e806:	d106      	bne.n	800e816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	3324      	adds	r3, #36	@ 0x24
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	68b9      	ldr	r1, [r7, #8]
 800e810:	4618      	mov	r0, r3
 800e812:	f000 fcb7 	bl	800f184 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e816:	6978      	ldr	r0, [r7, #20]
 800e818:	f7ff ff26 	bl	800e668 <prvUnlockQueue>
	}
 800e81c:	bf00      	nop
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e824:	b580      	push	{r7, lr}
 800e826:	b08e      	sub	sp, #56	@ 0x38
 800e828:	af04      	add	r7, sp, #16
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10b      	bne.n	800e850 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	623b      	str	r3, [r7, #32]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10b      	bne.n	800e86e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	61fb      	str	r3, [r7, #28]
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	e7fd      	b.n	800e86a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e86e:	23a8      	movs	r3, #168	@ 0xa8
 800e870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	2ba8      	cmp	r3, #168	@ 0xa8
 800e876:	d00b      	beq.n	800e890 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	61bb      	str	r3, [r7, #24]
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	e7fd      	b.n	800e88c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e890:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01e      	beq.n	800e8d6 <xTaskCreateStatic+0xb2>
 800e898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d01b      	beq.n	800e8d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8aa:	2202      	movs	r2, #2
 800e8ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9303      	str	r3, [sp, #12]
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b6:	9302      	str	r3, [sp, #8]
 800e8b8:	f107 0314 	add.w	r3, r7, #20
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c0:	9300      	str	r3, [sp, #0]
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f000 f851 	bl	800e970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8d0:	f000 f8f6 	bl	800eac0 <prvAddNewTaskToReadyList>
 800e8d4:	e001      	b.n	800e8da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e8da:	697b      	ldr	r3, [r7, #20]
	}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3728      	adds	r7, #40	@ 0x28
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08c      	sub	sp, #48	@ 0x30
 800e8e8:	af04      	add	r7, sp, #16
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	603b      	str	r3, [r7, #0]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e8f4:	88fb      	ldrh	r3, [r7, #6]
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f001 fcc7 	bl	801028c <pvPortMalloc>
 800e8fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00e      	beq.n	800e924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e906:	20a8      	movs	r0, #168	@ 0xa8
 800e908:	f001 fcc0 	bl	801028c <pvPortMalloc>
 800e90c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	631a      	str	r2, [r3, #48]	@ 0x30
 800e91a:	e005      	b.n	800e928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e91c:	6978      	ldr	r0, [r7, #20]
 800e91e:	f001 fd83 	bl	8010428 <vPortFree>
 800e922:	e001      	b.n	800e928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e924:	2300      	movs	r3, #0
 800e926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d017      	beq.n	800e95e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e936:	88fa      	ldrh	r2, [r7, #6]
 800e938:	2300      	movs	r3, #0
 800e93a:	9303      	str	r3, [sp, #12]
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	9302      	str	r3, [sp, #8]
 800e940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e942:	9301      	str	r3, [sp, #4]
 800e944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	68b9      	ldr	r1, [r7, #8]
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 f80f 	bl	800e970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e952:	69f8      	ldr	r0, [r7, #28]
 800e954:	f000 f8b4 	bl	800eac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e958:	2301      	movs	r3, #1
 800e95a:	61bb      	str	r3, [r7, #24]
 800e95c:	e002      	b.n	800e964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e95e:	f04f 33ff 	mov.w	r3, #4294967295
 800e962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e964:	69bb      	ldr	r3, [r7, #24]
	}
 800e966:	4618      	mov	r0, r3
 800e968:	3720      	adds	r7, #32
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e980:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	461a      	mov	r2, r3
 800e988:	21a5      	movs	r1, #165	@ 0xa5
 800e98a:	f003 fbdc 	bl	8012146 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e998:	440b      	add	r3, r1
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4413      	add	r3, r2
 800e99e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	f023 0307 	bic.w	r3, r3, #7
 800e9a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00b      	beq.n	800e9ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	617b      	str	r3, [r7, #20]
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
 800e9c8:	e7fd      	b.n	800e9c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d01f      	beq.n	800ea10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]
 800e9d4:	e012      	b.n	800e9fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	4413      	add	r3, r2
 800e9dc:	7819      	ldrb	r1, [r3, #0]
 800e9de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3334      	adds	r3, #52	@ 0x34
 800e9e6:	460a      	mov	r2, r1
 800e9e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d006      	beq.n	800ea04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	61fb      	str	r3, [r7, #28]
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	2b0f      	cmp	r3, #15
 800ea00:	d9e9      	bls.n	800e9d6 <prvInitialiseNewTask+0x66>
 800ea02:	e000      	b.n	800ea06 <prvInitialiseNewTask+0x96>
			{
				break;
 800ea04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ea0e:	e003      	b.n	800ea18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1a:	2b37      	cmp	r3, #55	@ 0x37
 800ea1c:	d901      	bls.n	800ea22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea1e:	2337      	movs	r3, #55	@ 0x37
 800ea20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea30:	2200      	movs	r2, #0
 800ea32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea36:	3304      	adds	r3, #4
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff f929 	bl	800dc90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea40:	3318      	adds	r3, #24
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff f924 	bl	800dc90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	2200      	movs	r2, #0
 800ea62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	3354      	adds	r3, #84	@ 0x54
 800ea72:	224c      	movs	r2, #76	@ 0x4c
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f003 fb65 	bl	8012146 <memset>
 800ea7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea7e:	4a0d      	ldr	r2, [pc, #52]	@ (800eab4 <prvInitialiseNewTask+0x144>)
 800ea80:	659a      	str	r2, [r3, #88]	@ 0x58
 800ea82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea84:	4a0c      	ldr	r2, [pc, #48]	@ (800eab8 <prvInitialiseNewTask+0x148>)
 800ea86:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ea88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8a:	4a0c      	ldr	r2, [pc, #48]	@ (800eabc <prvInitialiseNewTask+0x14c>)
 800ea8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	68f9      	ldr	r1, [r7, #12]
 800ea92:	69b8      	ldr	r0, [r7, #24]
 800ea94:	f001 f9a4 	bl	800fde0 <pxPortInitialiseStack>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaaa:	bf00      	nop
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	240060cc 	.word	0x240060cc
 800eab8:	24006134 	.word	0x24006134
 800eabc:	2400619c 	.word	0x2400619c

0800eac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eac8:	f001 fabe 	bl	8010048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eacc:	4b2d      	ldr	r3, [pc, #180]	@ (800eb84 <prvAddNewTaskToReadyList+0xc4>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	3301      	adds	r3, #1
 800ead2:	4a2c      	ldr	r2, [pc, #176]	@ (800eb84 <prvAddNewTaskToReadyList+0xc4>)
 800ead4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ead6:	4b2c      	ldr	r3, [pc, #176]	@ (800eb88 <prvAddNewTaskToReadyList+0xc8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eade:	4a2a      	ldr	r2, [pc, #168]	@ (800eb88 <prvAddNewTaskToReadyList+0xc8>)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eae4:	4b27      	ldr	r3, [pc, #156]	@ (800eb84 <prvAddNewTaskToReadyList+0xc4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d110      	bne.n	800eb0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eaec:	f000 fc78 	bl	800f3e0 <prvInitialiseTaskLists>
 800eaf0:	e00d      	b.n	800eb0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eaf2:	4b26      	ldr	r3, [pc, #152]	@ (800eb8c <prvAddNewTaskToReadyList+0xcc>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d109      	bne.n	800eb0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eafa:	4b23      	ldr	r3, [pc, #140]	@ (800eb88 <prvAddNewTaskToReadyList+0xc8>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d802      	bhi.n	800eb0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb08:	4a1f      	ldr	r2, [pc, #124]	@ (800eb88 <prvAddNewTaskToReadyList+0xc8>)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb0e:	4b20      	ldr	r3, [pc, #128]	@ (800eb90 <prvAddNewTaskToReadyList+0xd0>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	3301      	adds	r3, #1
 800eb14:	4a1e      	ldr	r2, [pc, #120]	@ (800eb90 <prvAddNewTaskToReadyList+0xd0>)
 800eb16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb18:	4b1d      	ldr	r3, [pc, #116]	@ (800eb90 <prvAddNewTaskToReadyList+0xd0>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb24:	4b1b      	ldr	r3, [pc, #108]	@ (800eb94 <prvAddNewTaskToReadyList+0xd4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d903      	bls.n	800eb34 <prvAddNewTaskToReadyList+0x74>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb30:	4a18      	ldr	r2, [pc, #96]	@ (800eb94 <prvAddNewTaskToReadyList+0xd4>)
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb38:	4613      	mov	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4413      	add	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4a15      	ldr	r2, [pc, #84]	@ (800eb98 <prvAddNewTaskToReadyList+0xd8>)
 800eb42:	441a      	add	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4619      	mov	r1, r3
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	f7ff f8ad 	bl	800dcaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eb50:	f001 faac 	bl	80100ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eb54:	4b0d      	ldr	r3, [pc, #52]	@ (800eb8c <prvAddNewTaskToReadyList+0xcc>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00e      	beq.n	800eb7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb5c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb88 <prvAddNewTaskToReadyList+0xc8>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d207      	bcs.n	800eb7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb9c <prvAddNewTaskToReadyList+0xdc>)
 800eb6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb7a:	bf00      	nop
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	2400234c 	.word	0x2400234c
 800eb88:	24001e78 	.word	0x24001e78
 800eb8c:	24002358 	.word	0x24002358
 800eb90:	24002368 	.word	0x24002368
 800eb94:	24002354 	.word	0x24002354
 800eb98:	24001e7c 	.word	0x24001e7c
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	@ 0x28
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10b      	bne.n	800ebcc <vTaskDelayUntil+0x2c>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	617b      	str	r3, [r7, #20]
}
 800ebc6:	bf00      	nop
 800ebc8:	bf00      	nop
 800ebca:	e7fd      	b.n	800ebc8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10b      	bne.n	800ebea <vTaskDelayUntil+0x4a>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	613b      	str	r3, [r7, #16]
}
 800ebe4:	bf00      	nop
 800ebe6:	bf00      	nop
 800ebe8:	e7fd      	b.n	800ebe6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ebea:	4b2a      	ldr	r3, [pc, #168]	@ (800ec94 <vTaskDelayUntil+0xf4>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00b      	beq.n	800ec0a <vTaskDelayUntil+0x6a>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	60fb      	str	r3, [r7, #12]
}
 800ec04:	bf00      	nop
 800ec06:	bf00      	nop
 800ec08:	e7fd      	b.n	800ec06 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800ec0a:	f000 f8b9 	bl	800ed80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ec0e:	4b22      	ldr	r3, [pc, #136]	@ (800ec98 <vTaskDelayUntil+0xf8>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6a3a      	ldr	r2, [r7, #32]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d20b      	bcs.n	800ec40 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	69fa      	ldr	r2, [r7, #28]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d211      	bcs.n	800ec56 <vTaskDelayUntil+0xb6>
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d90d      	bls.n	800ec56 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec3e:	e00a      	b.n	800ec56 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	69fa      	ldr	r2, [r7, #28]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d303      	bcc.n	800ec52 <vTaskDelayUntil+0xb2>
 800ec4a:	69fa      	ldr	r2, [r7, #28]
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d901      	bls.n	800ec56 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ec52:	2301      	movs	r3, #1
 800ec54:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	69fa      	ldr	r2, [r7, #28]
 800ec5a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d006      	beq.n	800ec70 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ec62:	69fa      	ldr	r2, [r7, #28]
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 fd0a 	bl	800f684 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ec70:	f000 f894 	bl	800ed9c <xTaskResumeAll>
 800ec74:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d107      	bne.n	800ec8c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800ec7c:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <vTaskDelayUntil+0xfc>)
 800ec7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec8c:	bf00      	nop
 800ec8e:	3728      	adds	r7, #40	@ 0x28
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	24002374 	.word	0x24002374
 800ec98:	24002350 	.word	0x24002350
 800ec9c:	e000ed04 	.word	0xe000ed04

0800eca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08a      	sub	sp, #40	@ 0x28
 800eca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecae:	463a      	mov	r2, r7
 800ecb0:	1d39      	adds	r1, r7, #4
 800ecb2:	f107 0308 	add.w	r3, r7, #8
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe ff96 	bl	800dbe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	9202      	str	r2, [sp, #8]
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	2300      	movs	r3, #0
 800eccc:	460a      	mov	r2, r1
 800ecce:	4924      	ldr	r1, [pc, #144]	@ (800ed60 <vTaskStartScheduler+0xc0>)
 800ecd0:	4824      	ldr	r0, [pc, #144]	@ (800ed64 <vTaskStartScheduler+0xc4>)
 800ecd2:	f7ff fda7 	bl	800e824 <xTaskCreateStatic>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	4a23      	ldr	r2, [pc, #140]	@ (800ed68 <vTaskStartScheduler+0xc8>)
 800ecda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ecdc:	4b22      	ldr	r3, [pc, #136]	@ (800ed68 <vTaskStartScheduler+0xc8>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ece4:	2301      	movs	r3, #1
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	e001      	b.n	800ecee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d102      	bne.n	800ecfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ecf4:	f000 fd1a 	bl	800f72c <xTimerCreateTimerTask>
 800ecf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d11b      	bne.n	800ed38 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	613b      	str	r3, [r7, #16]
}
 800ed12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed14:	4b15      	ldr	r3, [pc, #84]	@ (800ed6c <vTaskStartScheduler+0xcc>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	3354      	adds	r3, #84	@ 0x54
 800ed1a:	4a15      	ldr	r2, [pc, #84]	@ (800ed70 <vTaskStartScheduler+0xd0>)
 800ed1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed1e:	4b15      	ldr	r3, [pc, #84]	@ (800ed74 <vTaskStartScheduler+0xd4>)
 800ed20:	f04f 32ff 	mov.w	r2, #4294967295
 800ed24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed26:	4b14      	ldr	r3, [pc, #80]	@ (800ed78 <vTaskStartScheduler+0xd8>)
 800ed28:	2201      	movs	r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed2c:	4b13      	ldr	r3, [pc, #76]	@ (800ed7c <vTaskStartScheduler+0xdc>)
 800ed2e:	2200      	movs	r2, #0
 800ed30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed32:	f001 f8e5 	bl	800ff00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed36:	e00f      	b.n	800ed58 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3e:	d10b      	bne.n	800ed58 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	60fb      	str	r3, [r7, #12]
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	e7fd      	b.n	800ed54 <vTaskStartScheduler+0xb4>
}
 800ed58:	bf00      	nop
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	08014fec 	.word	0x08014fec
 800ed64:	0800f3b1 	.word	0x0800f3b1
 800ed68:	24002370 	.word	0x24002370
 800ed6c:	24001e78 	.word	0x24001e78
 800ed70:	240001f8 	.word	0x240001f8
 800ed74:	2400236c 	.word	0x2400236c
 800ed78:	24002358 	.word	0x24002358
 800ed7c:	24002350 	.word	0x24002350

0800ed80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed84:	4b04      	ldr	r3, [pc, #16]	@ (800ed98 <vTaskSuspendAll+0x18>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	4a03      	ldr	r2, [pc, #12]	@ (800ed98 <vTaskSuspendAll+0x18>)
 800ed8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed8e:	bf00      	nop
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	24002374 	.word	0x24002374

0800ed9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eda6:	2300      	movs	r3, #0
 800eda8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edaa:	4b42      	ldr	r3, [pc, #264]	@ (800eeb4 <xTaskResumeAll+0x118>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10b      	bne.n	800edca <xTaskResumeAll+0x2e>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	603b      	str	r3, [r7, #0]
}
 800edc4:	bf00      	nop
 800edc6:	bf00      	nop
 800edc8:	e7fd      	b.n	800edc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800edca:	f001 f93d 	bl	8010048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800edce:	4b39      	ldr	r3, [pc, #228]	@ (800eeb4 <xTaskResumeAll+0x118>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3b01      	subs	r3, #1
 800edd4:	4a37      	ldr	r2, [pc, #220]	@ (800eeb4 <xTaskResumeAll+0x118>)
 800edd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edd8:	4b36      	ldr	r3, [pc, #216]	@ (800eeb4 <xTaskResumeAll+0x118>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d162      	bne.n	800eea6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ede0:	4b35      	ldr	r3, [pc, #212]	@ (800eeb8 <xTaskResumeAll+0x11c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d05e      	beq.n	800eea6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ede8:	e02f      	b.n	800ee4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edea:	4b34      	ldr	r3, [pc, #208]	@ (800eebc <xTaskResumeAll+0x120>)
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	3318      	adds	r3, #24
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fe ffb4 	bl	800dd64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	3304      	adds	r3, #4
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7fe ffaf 	bl	800dd64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee0a:	4b2d      	ldr	r3, [pc, #180]	@ (800eec0 <xTaskResumeAll+0x124>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d903      	bls.n	800ee1a <xTaskResumeAll+0x7e>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee16:	4a2a      	ldr	r2, [pc, #168]	@ (800eec0 <xTaskResumeAll+0x124>)
 800ee18:	6013      	str	r3, [r2, #0]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1e:	4613      	mov	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4413      	add	r3, r2
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	4a27      	ldr	r2, [pc, #156]	@ (800eec4 <xTaskResumeAll+0x128>)
 800ee28:	441a      	add	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	4619      	mov	r1, r3
 800ee30:	4610      	mov	r0, r2
 800ee32:	f7fe ff3a 	bl	800dcaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee3a:	4b23      	ldr	r3, [pc, #140]	@ (800eec8 <xTaskResumeAll+0x12c>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d302      	bcc.n	800ee4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ee44:	4b21      	ldr	r3, [pc, #132]	@ (800eecc <xTaskResumeAll+0x130>)
 800ee46:	2201      	movs	r2, #1
 800ee48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee4a:	4b1c      	ldr	r3, [pc, #112]	@ (800eebc <xTaskResumeAll+0x120>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1cb      	bne.n	800edea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee58:	f000 fb66 	bl	800f528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee5c:	4b1c      	ldr	r3, [pc, #112]	@ (800eed0 <xTaskResumeAll+0x134>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d010      	beq.n	800ee8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee68:	f000 f846 	bl	800eef8 <xTaskIncrementTick>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ee72:	4b16      	ldr	r3, [pc, #88]	@ (800eecc <xTaskResumeAll+0x130>)
 800ee74:	2201      	movs	r2, #1
 800ee76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1f1      	bne.n	800ee68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ee84:	4b12      	ldr	r3, [pc, #72]	@ (800eed0 <xTaskResumeAll+0x134>)
 800ee86:	2200      	movs	r2, #0
 800ee88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee8a:	4b10      	ldr	r3, [pc, #64]	@ (800eecc <xTaskResumeAll+0x130>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d009      	beq.n	800eea6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee92:	2301      	movs	r3, #1
 800ee94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee96:	4b0f      	ldr	r3, [pc, #60]	@ (800eed4 <xTaskResumeAll+0x138>)
 800ee98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eea6:	f001 f901 	bl	80100ac <vPortExitCritical>

	return xAlreadyYielded;
 800eeaa:	68bb      	ldr	r3, [r7, #8]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	24002374 	.word	0x24002374
 800eeb8:	2400234c 	.word	0x2400234c
 800eebc:	2400230c 	.word	0x2400230c
 800eec0:	24002354 	.word	0x24002354
 800eec4:	24001e7c 	.word	0x24001e7c
 800eec8:	24001e78 	.word	0x24001e78
 800eecc:	24002360 	.word	0x24002360
 800eed0:	2400235c 	.word	0x2400235c
 800eed4:	e000ed04 	.word	0xe000ed04

0800eed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eede:	4b05      	ldr	r3, [pc, #20]	@ (800eef4 <xTaskGetTickCount+0x1c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eee4:	687b      	ldr	r3, [r7, #4]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	24002350 	.word	0x24002350

0800eef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eefe:	2300      	movs	r3, #0
 800ef00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef02:	4b4f      	ldr	r3, [pc, #316]	@ (800f040 <xTaskIncrementTick+0x148>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f040 8090 	bne.w	800f02c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef0c:	4b4d      	ldr	r3, [pc, #308]	@ (800f044 <xTaskIncrementTick+0x14c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3301      	adds	r3, #1
 800ef12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef14:	4a4b      	ldr	r2, [pc, #300]	@ (800f044 <xTaskIncrementTick+0x14c>)
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d121      	bne.n	800ef64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef20:	4b49      	ldr	r3, [pc, #292]	@ (800f048 <xTaskIncrementTick+0x150>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00b      	beq.n	800ef42 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	603b      	str	r3, [r7, #0]
}
 800ef3c:	bf00      	nop
 800ef3e:	bf00      	nop
 800ef40:	e7fd      	b.n	800ef3e <xTaskIncrementTick+0x46>
 800ef42:	4b41      	ldr	r3, [pc, #260]	@ (800f048 <xTaskIncrementTick+0x150>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	4b40      	ldr	r3, [pc, #256]	@ (800f04c <xTaskIncrementTick+0x154>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a3e      	ldr	r2, [pc, #248]	@ (800f048 <xTaskIncrementTick+0x150>)
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	4a3e      	ldr	r2, [pc, #248]	@ (800f04c <xTaskIncrementTick+0x154>)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	4b3e      	ldr	r3, [pc, #248]	@ (800f050 <xTaskIncrementTick+0x158>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	4a3c      	ldr	r2, [pc, #240]	@ (800f050 <xTaskIncrementTick+0x158>)
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	f000 fae2 	bl	800f528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef64:	4b3b      	ldr	r3, [pc, #236]	@ (800f054 <xTaskIncrementTick+0x15c>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d349      	bcc.n	800f002 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef6e:	4b36      	ldr	r3, [pc, #216]	@ (800f048 <xTaskIncrementTick+0x150>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d104      	bne.n	800ef82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef78:	4b36      	ldr	r3, [pc, #216]	@ (800f054 <xTaskIncrementTick+0x15c>)
 800ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7e:	601a      	str	r2, [r3, #0]
					break;
 800ef80:	e03f      	b.n	800f002 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef82:	4b31      	ldr	r3, [pc, #196]	@ (800f048 <xTaskIncrementTick+0x150>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef92:	693a      	ldr	r2, [r7, #16]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d203      	bcs.n	800efa2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef9a:	4a2e      	ldr	r2, [pc, #184]	@ (800f054 <xTaskIncrementTick+0x15c>)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efa0:	e02f      	b.n	800f002 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	3304      	adds	r3, #4
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe fedc 	bl	800dd64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d004      	beq.n	800efbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	3318      	adds	r3, #24
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fe fed3 	bl	800dd64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc2:	4b25      	ldr	r3, [pc, #148]	@ (800f058 <xTaskIncrementTick+0x160>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d903      	bls.n	800efd2 <xTaskIncrementTick+0xda>
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efce:	4a22      	ldr	r2, [pc, #136]	@ (800f058 <xTaskIncrementTick+0x160>)
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd6:	4613      	mov	r3, r2
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	4413      	add	r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	4a1f      	ldr	r2, [pc, #124]	@ (800f05c <xTaskIncrementTick+0x164>)
 800efe0:	441a      	add	r2, r3
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	3304      	adds	r3, #4
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7fe fe5e 	bl	800dcaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff2:	4b1b      	ldr	r3, [pc, #108]	@ (800f060 <xTaskIncrementTick+0x168>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff8:	429a      	cmp	r2, r3
 800effa:	d3b8      	bcc.n	800ef6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800effc:	2301      	movs	r3, #1
 800effe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f000:	e7b5      	b.n	800ef6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f002:	4b17      	ldr	r3, [pc, #92]	@ (800f060 <xTaskIncrementTick+0x168>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f008:	4914      	ldr	r1, [pc, #80]	@ (800f05c <xTaskIncrementTick+0x164>)
 800f00a:	4613      	mov	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	440b      	add	r3, r1
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b01      	cmp	r3, #1
 800f018:	d901      	bls.n	800f01e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f01a:	2301      	movs	r3, #1
 800f01c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f01e:	4b11      	ldr	r3, [pc, #68]	@ (800f064 <xTaskIncrementTick+0x16c>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d007      	beq.n	800f036 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f026:	2301      	movs	r3, #1
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	e004      	b.n	800f036 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	@ (800f068 <xTaskIncrementTick+0x170>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	3301      	adds	r3, #1
 800f032:	4a0d      	ldr	r2, [pc, #52]	@ (800f068 <xTaskIncrementTick+0x170>)
 800f034:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f036:	697b      	ldr	r3, [r7, #20]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3718      	adds	r7, #24
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	24002374 	.word	0x24002374
 800f044:	24002350 	.word	0x24002350
 800f048:	24002304 	.word	0x24002304
 800f04c:	24002308 	.word	0x24002308
 800f050:	24002364 	.word	0x24002364
 800f054:	2400236c 	.word	0x2400236c
 800f058:	24002354 	.word	0x24002354
 800f05c:	24001e7c 	.word	0x24001e7c
 800f060:	24001e78 	.word	0x24001e78
 800f064:	24002360 	.word	0x24002360
 800f068:	2400235c 	.word	0x2400235c

0800f06c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f072:	4b2b      	ldr	r3, [pc, #172]	@ (800f120 <vTaskSwitchContext+0xb4>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d003      	beq.n	800f082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f07a:	4b2a      	ldr	r3, [pc, #168]	@ (800f124 <vTaskSwitchContext+0xb8>)
 800f07c:	2201      	movs	r2, #1
 800f07e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f080:	e047      	b.n	800f112 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f082:	4b28      	ldr	r3, [pc, #160]	@ (800f124 <vTaskSwitchContext+0xb8>)
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f088:	4b27      	ldr	r3, [pc, #156]	@ (800f128 <vTaskSwitchContext+0xbc>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	60fb      	str	r3, [r7, #12]
 800f08e:	e011      	b.n	800f0b4 <vTaskSwitchContext+0x48>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10b      	bne.n	800f0ae <vTaskSwitchContext+0x42>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	607b      	str	r3, [r7, #4]
}
 800f0a8:	bf00      	nop
 800f0aa:	bf00      	nop
 800f0ac:	e7fd      	b.n	800f0aa <vTaskSwitchContext+0x3e>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	491d      	ldr	r1, [pc, #116]	@ (800f12c <vTaskSwitchContext+0xc0>)
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d0e3      	beq.n	800f090 <vTaskSwitchContext+0x24>
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4a16      	ldr	r2, [pc, #88]	@ (800f12c <vTaskSwitchContext+0xc0>)
 800f0d4:	4413      	add	r3, r2
 800f0d6:	60bb      	str	r3, [r7, #8]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	685a      	ldr	r2, [r3, #4]
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	605a      	str	r2, [r3, #4]
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d104      	bne.n	800f0f8 <vTaskSwitchContext+0x8c>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	605a      	str	r2, [r3, #4]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800f130 <vTaskSwitchContext+0xc4>)
 800f100:	6013      	str	r3, [r2, #0]
 800f102:	4a09      	ldr	r2, [pc, #36]	@ (800f128 <vTaskSwitchContext+0xbc>)
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f108:	4b09      	ldr	r3, [pc, #36]	@ (800f130 <vTaskSwitchContext+0xc4>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	3354      	adds	r3, #84	@ 0x54
 800f10e:	4a09      	ldr	r2, [pc, #36]	@ (800f134 <vTaskSwitchContext+0xc8>)
 800f110:	6013      	str	r3, [r2, #0]
}
 800f112:	bf00      	nop
 800f114:	3714      	adds	r7, #20
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	24002374 	.word	0x24002374
 800f124:	24002360 	.word	0x24002360
 800f128:	24002354 	.word	0x24002354
 800f12c:	24001e7c 	.word	0x24001e7c
 800f130:	24001e78 	.word	0x24001e78
 800f134:	240001f8 	.word	0x240001f8

0800f138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10b      	bne.n	800f160 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14c:	f383 8811 	msr	BASEPRI, r3
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	60fb      	str	r3, [r7, #12]
}
 800f15a:	bf00      	nop
 800f15c:	bf00      	nop
 800f15e:	e7fd      	b.n	800f15c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f160:	4b07      	ldr	r3, [pc, #28]	@ (800f180 <vTaskPlaceOnEventList+0x48>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	3318      	adds	r3, #24
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7fe fdc2 	bl	800dcf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f16e:	2101      	movs	r1, #1
 800f170:	6838      	ldr	r0, [r7, #0]
 800f172:	f000 fa87 	bl	800f684 <prvAddCurrentTaskToDelayedList>
}
 800f176:	bf00      	nop
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	24001e78 	.word	0x24001e78

0800f184 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f184:	b580      	push	{r7, lr}
 800f186:	b086      	sub	sp, #24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10b      	bne.n	800f1ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	617b      	str	r3, [r7, #20]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3318      	adds	r3, #24
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f7fe fd77 	bl	800dcaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	68b8      	ldr	r0, [r7, #8]
 800f1cc:	f000 fa5a 	bl	800f684 <prvAddCurrentTaskToDelayedList>
	}
 800f1d0:	bf00      	nop
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	24001e78 	.word	0x24001e78

0800f1dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10b      	bne.n	800f20a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	60fb      	str	r3, [r7, #12]
}
 800f204:	bf00      	nop
 800f206:	bf00      	nop
 800f208:	e7fd      	b.n	800f206 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	3318      	adds	r3, #24
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fda8 	bl	800dd64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f214:	4b1d      	ldr	r3, [pc, #116]	@ (800f28c <xTaskRemoveFromEventList+0xb0>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d11d      	bne.n	800f258 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	3304      	adds	r3, #4
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe fd9f 	bl	800dd64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22a:	4b19      	ldr	r3, [pc, #100]	@ (800f290 <xTaskRemoveFromEventList+0xb4>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d903      	bls.n	800f23a <xTaskRemoveFromEventList+0x5e>
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f236:	4a16      	ldr	r2, [pc, #88]	@ (800f290 <xTaskRemoveFromEventList+0xb4>)
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f23e:	4613      	mov	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4a13      	ldr	r2, [pc, #76]	@ (800f294 <xTaskRemoveFromEventList+0xb8>)
 800f248:	441a      	add	r2, r3
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f7fe fd2a 	bl	800dcaa <vListInsertEnd>
 800f256:	e005      	b.n	800f264 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	3318      	adds	r3, #24
 800f25c:	4619      	mov	r1, r3
 800f25e:	480e      	ldr	r0, [pc, #56]	@ (800f298 <xTaskRemoveFromEventList+0xbc>)
 800f260:	f7fe fd23 	bl	800dcaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f268:	4b0c      	ldr	r3, [pc, #48]	@ (800f29c <xTaskRemoveFromEventList+0xc0>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f26e:	429a      	cmp	r2, r3
 800f270:	d905      	bls.n	800f27e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f272:	2301      	movs	r3, #1
 800f274:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f276:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a0 <xTaskRemoveFromEventList+0xc4>)
 800f278:	2201      	movs	r2, #1
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	e001      	b.n	800f282 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f282:	697b      	ldr	r3, [r7, #20]
}
 800f284:	4618      	mov	r0, r3
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	24002374 	.word	0x24002374
 800f290:	24002354 	.word	0x24002354
 800f294:	24001e7c 	.word	0x24001e7c
 800f298:	2400230c 	.word	0x2400230c
 800f29c:	24001e78 	.word	0x24001e78
 800f2a0:	24002360 	.word	0x24002360

0800f2a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2ac:	4b06      	ldr	r3, [pc, #24]	@ (800f2c8 <vTaskInternalSetTimeOutState+0x24>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2b4:	4b05      	ldr	r3, [pc, #20]	@ (800f2cc <vTaskInternalSetTimeOutState+0x28>)
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	605a      	str	r2, [r3, #4]
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	24002364 	.word	0x24002364
 800f2cc:	24002350 	.word	0x24002350

0800f2d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10b      	bne.n	800f2f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	613b      	str	r3, [r7, #16]
}
 800f2f2:	bf00      	nop
 800f2f4:	bf00      	nop
 800f2f6:	e7fd      	b.n	800f2f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10b      	bne.n	800f316 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f302:	f383 8811 	msr	BASEPRI, r3
 800f306:	f3bf 8f6f 	isb	sy
 800f30a:	f3bf 8f4f 	dsb	sy
 800f30e:	60fb      	str	r3, [r7, #12]
}
 800f310:	bf00      	nop
 800f312:	bf00      	nop
 800f314:	e7fd      	b.n	800f312 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f316:	f000 fe97 	bl	8010048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f31a:	4b1d      	ldr	r3, [pc, #116]	@ (800f390 <xTaskCheckForTimeOut+0xc0>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f332:	d102      	bne.n	800f33a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f334:	2300      	movs	r3, #0
 800f336:	61fb      	str	r3, [r7, #28]
 800f338:	e023      	b.n	800f382 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	4b15      	ldr	r3, [pc, #84]	@ (800f394 <xTaskCheckForTimeOut+0xc4>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	429a      	cmp	r2, r3
 800f344:	d007      	beq.n	800f356 <xTaskCheckForTimeOut+0x86>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	69ba      	ldr	r2, [r7, #24]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d302      	bcc.n	800f356 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f350:	2301      	movs	r3, #1
 800f352:	61fb      	str	r3, [r7, #28]
 800f354:	e015      	b.n	800f382 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d20b      	bcs.n	800f378 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	1ad2      	subs	r2, r2, r3
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff ff99 	bl	800f2a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f372:	2300      	movs	r3, #0
 800f374:	61fb      	str	r3, [r7, #28]
 800f376:	e004      	b.n	800f382 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2200      	movs	r2, #0
 800f37c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f37e:	2301      	movs	r3, #1
 800f380:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f382:	f000 fe93 	bl	80100ac <vPortExitCritical>

	return xReturn;
 800f386:	69fb      	ldr	r3, [r7, #28]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3720      	adds	r7, #32
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	24002350 	.word	0x24002350
 800f394:	24002364 	.word	0x24002364

0800f398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f39c:	4b03      	ldr	r3, [pc, #12]	@ (800f3ac <vTaskMissedYield+0x14>)
 800f39e:	2201      	movs	r2, #1
 800f3a0:	601a      	str	r2, [r3, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	24002360 	.word	0x24002360

0800f3b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3b8:	f000 f852 	bl	800f460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3bc:	4b06      	ldr	r3, [pc, #24]	@ (800f3d8 <prvIdleTask+0x28>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d9f9      	bls.n	800f3b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3c4:	4b05      	ldr	r3, [pc, #20]	@ (800f3dc <prvIdleTask+0x2c>)
 800f3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3d4:	e7f0      	b.n	800f3b8 <prvIdleTask+0x8>
 800f3d6:	bf00      	nop
 800f3d8:	24001e7c 	.word	0x24001e7c
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	607b      	str	r3, [r7, #4]
 800f3ea:	e00c      	b.n	800f406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4a12      	ldr	r2, [pc, #72]	@ (800f440 <prvInitialiseTaskLists+0x60>)
 800f3f8:	4413      	add	r3, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fe fc28 	bl	800dc50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3301      	adds	r3, #1
 800f404:	607b      	str	r3, [r7, #4]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b37      	cmp	r3, #55	@ 0x37
 800f40a:	d9ef      	bls.n	800f3ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f40c:	480d      	ldr	r0, [pc, #52]	@ (800f444 <prvInitialiseTaskLists+0x64>)
 800f40e:	f7fe fc1f 	bl	800dc50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f412:	480d      	ldr	r0, [pc, #52]	@ (800f448 <prvInitialiseTaskLists+0x68>)
 800f414:	f7fe fc1c 	bl	800dc50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f418:	480c      	ldr	r0, [pc, #48]	@ (800f44c <prvInitialiseTaskLists+0x6c>)
 800f41a:	f7fe fc19 	bl	800dc50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f41e:	480c      	ldr	r0, [pc, #48]	@ (800f450 <prvInitialiseTaskLists+0x70>)
 800f420:	f7fe fc16 	bl	800dc50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f424:	480b      	ldr	r0, [pc, #44]	@ (800f454 <prvInitialiseTaskLists+0x74>)
 800f426:	f7fe fc13 	bl	800dc50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f42a:	4b0b      	ldr	r3, [pc, #44]	@ (800f458 <prvInitialiseTaskLists+0x78>)
 800f42c:	4a05      	ldr	r2, [pc, #20]	@ (800f444 <prvInitialiseTaskLists+0x64>)
 800f42e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f430:	4b0a      	ldr	r3, [pc, #40]	@ (800f45c <prvInitialiseTaskLists+0x7c>)
 800f432:	4a05      	ldr	r2, [pc, #20]	@ (800f448 <prvInitialiseTaskLists+0x68>)
 800f434:	601a      	str	r2, [r3, #0]
}
 800f436:	bf00      	nop
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	24001e7c 	.word	0x24001e7c
 800f444:	240022dc 	.word	0x240022dc
 800f448:	240022f0 	.word	0x240022f0
 800f44c:	2400230c 	.word	0x2400230c
 800f450:	24002320 	.word	0x24002320
 800f454:	24002338 	.word	0x24002338
 800f458:	24002304 	.word	0x24002304
 800f45c:	24002308 	.word	0x24002308

0800f460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f466:	e019      	b.n	800f49c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f468:	f000 fdee 	bl	8010048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f46c:	4b10      	ldr	r3, [pc, #64]	@ (800f4b0 <prvCheckTasksWaitingTermination+0x50>)
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3304      	adds	r3, #4
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fe fc73 	bl	800dd64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f47e:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b4 <prvCheckTasksWaitingTermination+0x54>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	3b01      	subs	r3, #1
 800f484:	4a0b      	ldr	r2, [pc, #44]	@ (800f4b4 <prvCheckTasksWaitingTermination+0x54>)
 800f486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f488:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b8 <prvCheckTasksWaitingTermination+0x58>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	4a0a      	ldr	r2, [pc, #40]	@ (800f4b8 <prvCheckTasksWaitingTermination+0x58>)
 800f490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f492:	f000 fe0b 	bl	80100ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f810 	bl	800f4bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f49c:	4b06      	ldr	r3, [pc, #24]	@ (800f4b8 <prvCheckTasksWaitingTermination+0x58>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1e1      	bne.n	800f468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4a4:	bf00      	nop
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	24002320 	.word	0x24002320
 800f4b4:	2400234c 	.word	0x2400234c
 800f4b8:	24002334 	.word	0x24002334

0800f4bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3354      	adds	r3, #84	@ 0x54
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f002 feb9 	bl	8012240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d108      	bne.n	800f4ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 ffa3 	bl	8010428 <vPortFree>
				vPortFree( pxTCB );
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 ffa0 	bl	8010428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4e8:	e019      	b.n	800f51e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d103      	bne.n	800f4fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 ff97 	bl	8010428 <vPortFree>
	}
 800f4fa:	e010      	b.n	800f51e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f502:	2b02      	cmp	r3, #2
 800f504:	d00b      	beq.n	800f51e <prvDeleteTCB+0x62>
	__asm volatile
 800f506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f50a:	f383 8811 	msr	BASEPRI, r3
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f3bf 8f4f 	dsb	sy
 800f516:	60fb      	str	r3, [r7, #12]
}
 800f518:	bf00      	nop
 800f51a:	bf00      	nop
 800f51c:	e7fd      	b.n	800f51a <prvDeleteTCB+0x5e>
	}
 800f51e:	bf00      	nop
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
	...

0800f528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f52e:	4b0c      	ldr	r3, [pc, #48]	@ (800f560 <prvResetNextTaskUnblockTime+0x38>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d104      	bne.n	800f542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f538:	4b0a      	ldr	r3, [pc, #40]	@ (800f564 <prvResetNextTaskUnblockTime+0x3c>)
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f540:	e008      	b.n	800f554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f542:	4b07      	ldr	r3, [pc, #28]	@ (800f560 <prvResetNextTaskUnblockTime+0x38>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	4a04      	ldr	r2, [pc, #16]	@ (800f564 <prvResetNextTaskUnblockTime+0x3c>)
 800f552:	6013      	str	r3, [r2, #0]
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	24002304 	.word	0x24002304
 800f564:	2400236c 	.word	0x2400236c

0800f568 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f56e:	4b0b      	ldr	r3, [pc, #44]	@ (800f59c <xTaskGetSchedulerState+0x34>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f576:	2301      	movs	r3, #1
 800f578:	607b      	str	r3, [r7, #4]
 800f57a:	e008      	b.n	800f58e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f57c:	4b08      	ldr	r3, [pc, #32]	@ (800f5a0 <xTaskGetSchedulerState+0x38>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d102      	bne.n	800f58a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f584:	2302      	movs	r3, #2
 800f586:	607b      	str	r3, [r7, #4]
 800f588:	e001      	b.n	800f58e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f58a:	2300      	movs	r3, #0
 800f58c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f58e:	687b      	ldr	r3, [r7, #4]
	}
 800f590:	4618      	mov	r0, r3
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	24002358 	.word	0x24002358
 800f5a0:	24002374 	.word	0x24002374

0800f5a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d058      	beq.n	800f66c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f678 <xTaskPriorityDisinherit+0xd4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	693a      	ldr	r2, [r7, #16]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d00b      	beq.n	800f5dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c8:	f383 8811 	msr	BASEPRI, r3
 800f5cc:	f3bf 8f6f 	isb	sy
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	60fb      	str	r3, [r7, #12]
}
 800f5d6:	bf00      	nop
 800f5d8:	bf00      	nop
 800f5da:	e7fd      	b.n	800f5d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10b      	bne.n	800f5fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	60bb      	str	r3, [r7, #8]
}
 800f5f6:	bf00      	nop
 800f5f8:	bf00      	nop
 800f5fa:	e7fd      	b.n	800f5f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f600:	1e5a      	subs	r2, r3, #1
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f60e:	429a      	cmp	r2, r3
 800f610:	d02c      	beq.n	800f66c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f616:	2b00      	cmp	r3, #0
 800f618:	d128      	bne.n	800f66c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	3304      	adds	r3, #4
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fe fba0 	bl	800dd64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f630:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63c:	4b0f      	ldr	r3, [pc, #60]	@ (800f67c <xTaskPriorityDisinherit+0xd8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d903      	bls.n	800f64c <xTaskPriorityDisinherit+0xa8>
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f648:	4a0c      	ldr	r2, [pc, #48]	@ (800f67c <xTaskPriorityDisinherit+0xd8>)
 800f64a:	6013      	str	r3, [r2, #0]
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f650:	4613      	mov	r3, r2
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	4413      	add	r3, r2
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	4a09      	ldr	r2, [pc, #36]	@ (800f680 <xTaskPriorityDisinherit+0xdc>)
 800f65a:	441a      	add	r2, r3
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	3304      	adds	r3, #4
 800f660:	4619      	mov	r1, r3
 800f662:	4610      	mov	r0, r2
 800f664:	f7fe fb21 	bl	800dcaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f668:	2301      	movs	r3, #1
 800f66a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f66c:	697b      	ldr	r3, [r7, #20]
	}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	24001e78 	.word	0x24001e78
 800f67c:	24002354 	.word	0x24002354
 800f680:	24001e7c 	.word	0x24001e7c

0800f684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f68e:	4b21      	ldr	r3, [pc, #132]	@ (800f714 <prvAddCurrentTaskToDelayedList+0x90>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f694:	4b20      	ldr	r3, [pc, #128]	@ (800f718 <prvAddCurrentTaskToDelayedList+0x94>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3304      	adds	r3, #4
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe fb62 	bl	800dd64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a6:	d10a      	bne.n	800f6be <prvAddCurrentTaskToDelayedList+0x3a>
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d007      	beq.n	800f6be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f718 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4819      	ldr	r0, [pc, #100]	@ (800f71c <prvAddCurrentTaskToDelayedList+0x98>)
 800f6b8:	f7fe faf7 	bl	800dcaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6bc:	e026      	b.n	800f70c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6c6:	4b14      	ldr	r3, [pc, #80]	@ (800f718 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d209      	bcs.n	800f6ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6d6:	4b12      	ldr	r3, [pc, #72]	@ (800f720 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	4b0f      	ldr	r3, [pc, #60]	@ (800f718 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7fe fb05 	bl	800dcf2 <vListInsert>
}
 800f6e8:	e010      	b.n	800f70c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f718 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	f7fe fafb 	bl	800dcf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f728 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	429a      	cmp	r2, r3
 800f704:	d202      	bcs.n	800f70c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f706:	4a08      	ldr	r2, [pc, #32]	@ (800f728 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	6013      	str	r3, [r2, #0]
}
 800f70c:	bf00      	nop
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}
 800f714:	24002350 	.word	0x24002350
 800f718:	24001e78 	.word	0x24001e78
 800f71c:	24002338 	.word	0x24002338
 800f720:	24002308 	.word	0x24002308
 800f724:	24002304 	.word	0x24002304
 800f728:	2400236c 	.word	0x2400236c

0800f72c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08a      	sub	sp, #40	@ 0x28
 800f730:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f732:	2300      	movs	r3, #0
 800f734:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f736:	f000 fb13 	bl	800fd60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f73a:	4b1d      	ldr	r3, [pc, #116]	@ (800f7b0 <xTimerCreateTimerTask+0x84>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d021      	beq.n	800f786 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f746:	2300      	movs	r3, #0
 800f748:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f74a:	1d3a      	adds	r2, r7, #4
 800f74c:	f107 0108 	add.w	r1, r7, #8
 800f750:	f107 030c 	add.w	r3, r7, #12
 800f754:	4618      	mov	r0, r3
 800f756:	f7fe fa61 	bl	800dc1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f75a:	6879      	ldr	r1, [r7, #4]
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	9202      	str	r2, [sp, #8]
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	2302      	movs	r3, #2
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2300      	movs	r3, #0
 800f76a:	460a      	mov	r2, r1
 800f76c:	4911      	ldr	r1, [pc, #68]	@ (800f7b4 <xTimerCreateTimerTask+0x88>)
 800f76e:	4812      	ldr	r0, [pc, #72]	@ (800f7b8 <xTimerCreateTimerTask+0x8c>)
 800f770:	f7ff f858 	bl	800e824 <xTaskCreateStatic>
 800f774:	4603      	mov	r3, r0
 800f776:	4a11      	ldr	r2, [pc, #68]	@ (800f7bc <xTimerCreateTimerTask+0x90>)
 800f778:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f77a:	4b10      	ldr	r3, [pc, #64]	@ (800f7bc <xTimerCreateTimerTask+0x90>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d001      	beq.n	800f786 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f782:	2301      	movs	r3, #1
 800f784:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10b      	bne.n	800f7a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	613b      	str	r3, [r7, #16]
}
 800f79e:	bf00      	nop
 800f7a0:	bf00      	nop
 800f7a2:	e7fd      	b.n	800f7a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f7a4:	697b      	ldr	r3, [r7, #20]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	240023a8 	.word	0x240023a8
 800f7b4:	08014ff4 	.word	0x08014ff4
 800f7b8:	0800f8f9 	.word	0x0800f8f9
 800f7bc:	240023ac 	.word	0x240023ac

0800f7c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08a      	sub	sp, #40	@ 0x28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10b      	bne.n	800f7f0 <xTimerGenericCommand+0x30>
	__asm volatile
 800f7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7dc:	f383 8811 	msr	BASEPRI, r3
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	f3bf 8f4f 	dsb	sy
 800f7e8:	623b      	str	r3, [r7, #32]
}
 800f7ea:	bf00      	nop
 800f7ec:	bf00      	nop
 800f7ee:	e7fd      	b.n	800f7ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f7f0:	4b19      	ldr	r3, [pc, #100]	@ (800f858 <xTimerGenericCommand+0x98>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d02a      	beq.n	800f84e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2b05      	cmp	r3, #5
 800f808:	dc18      	bgt.n	800f83c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f80a:	f7ff fead 	bl	800f568 <xTaskGetSchedulerState>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b02      	cmp	r3, #2
 800f812:	d109      	bne.n	800f828 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f814:	4b10      	ldr	r3, [pc, #64]	@ (800f858 <xTimerGenericCommand+0x98>)
 800f816:	6818      	ldr	r0, [r3, #0]
 800f818:	f107 0110 	add.w	r1, r7, #16
 800f81c:	2300      	movs	r3, #0
 800f81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f820:	f7fe fc10 	bl	800e044 <xQueueGenericSend>
 800f824:	6278      	str	r0, [r7, #36]	@ 0x24
 800f826:	e012      	b.n	800f84e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f828:	4b0b      	ldr	r3, [pc, #44]	@ (800f858 <xTimerGenericCommand+0x98>)
 800f82a:	6818      	ldr	r0, [r3, #0]
 800f82c:	f107 0110 	add.w	r1, r7, #16
 800f830:	2300      	movs	r3, #0
 800f832:	2200      	movs	r2, #0
 800f834:	f7fe fc06 	bl	800e044 <xQueueGenericSend>
 800f838:	6278      	str	r0, [r7, #36]	@ 0x24
 800f83a:	e008      	b.n	800f84e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f83c:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <xTimerGenericCommand+0x98>)
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	f107 0110 	add.w	r1, r7, #16
 800f844:	2300      	movs	r3, #0
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	f7fe fcfe 	bl	800e248 <xQueueGenericSendFromISR>
 800f84c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f850:	4618      	mov	r0, r3
 800f852:	3728      	adds	r7, #40	@ 0x28
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	240023a8 	.word	0x240023a8

0800f85c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b088      	sub	sp, #32
 800f860:	af02      	add	r7, sp, #8
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f866:	4b23      	ldr	r3, [pc, #140]	@ (800f8f4 <prvProcessExpiredTimer+0x98>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	3304      	adds	r3, #4
 800f874:	4618      	mov	r0, r3
 800f876:	f7fe fa75 	bl	800dd64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f880:	f003 0304 	and.w	r3, r3, #4
 800f884:	2b00      	cmp	r3, #0
 800f886:	d023      	beq.n	800f8d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	699a      	ldr	r2, [r3, #24]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	18d1      	adds	r1, r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	683a      	ldr	r2, [r7, #0]
 800f894:	6978      	ldr	r0, [r7, #20]
 800f896:	f000 f8d5 	bl	800fa44 <prvInsertTimerInActiveList>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d020      	beq.n	800f8e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	6978      	ldr	r0, [r7, #20]
 800f8ac:	f7ff ff88 	bl	800f7c0 <xTimerGenericCommand>
 800f8b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d114      	bne.n	800f8e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8bc:	f383 8811 	msr	BASEPRI, r3
 800f8c0:	f3bf 8f6f 	isb	sy
 800f8c4:	f3bf 8f4f 	dsb	sy
 800f8c8:	60fb      	str	r3, [r7, #12]
}
 800f8ca:	bf00      	nop
 800f8cc:	bf00      	nop
 800f8ce:	e7fd      	b.n	800f8cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8d6:	f023 0301 	bic.w	r3, r3, #1
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	6978      	ldr	r0, [r7, #20]
 800f8e8:	4798      	blx	r3
}
 800f8ea:	bf00      	nop
 800f8ec:	3718      	adds	r7, #24
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	240023a0 	.word	0x240023a0

0800f8f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f900:	f107 0308 	add.w	r3, r7, #8
 800f904:	4618      	mov	r0, r3
 800f906:	f000 f859 	bl	800f9bc <prvGetNextExpireTime>
 800f90a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	4619      	mov	r1, r3
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 f805 	bl	800f920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f916:	f000 f8d7 	bl	800fac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f91a:	bf00      	nop
 800f91c:	e7f0      	b.n	800f900 <prvTimerTask+0x8>
	...

0800f920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f92a:	f7ff fa29 	bl	800ed80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f92e:	f107 0308 	add.w	r3, r7, #8
 800f932:	4618      	mov	r0, r3
 800f934:	f000 f866 	bl	800fa04 <prvSampleTimeNow>
 800f938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d130      	bne.n	800f9a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10a      	bne.n	800f95c <prvProcessTimerOrBlockTask+0x3c>
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d806      	bhi.n	800f95c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f94e:	f7ff fa25 	bl	800ed9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f952:	68f9      	ldr	r1, [r7, #12]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff ff81 	bl	800f85c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f95a:	e024      	b.n	800f9a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d008      	beq.n	800f974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f962:	4b13      	ldr	r3, [pc, #76]	@ (800f9b0 <prvProcessTimerOrBlockTask+0x90>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <prvProcessTimerOrBlockTask+0x50>
 800f96c:	2301      	movs	r3, #1
 800f96e:	e000      	b.n	800f972 <prvProcessTimerOrBlockTask+0x52>
 800f970:	2300      	movs	r3, #0
 800f972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f974:	4b0f      	ldr	r3, [pc, #60]	@ (800f9b4 <prvProcessTimerOrBlockTask+0x94>)
 800f976:	6818      	ldr	r0, [r3, #0]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	4619      	mov	r1, r3
 800f982:	f7fe ff1b 	bl	800e7bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f986:	f7ff fa09 	bl	800ed9c <xTaskResumeAll>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10a      	bne.n	800f9a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f990:	4b09      	ldr	r3, [pc, #36]	@ (800f9b8 <prvProcessTimerOrBlockTask+0x98>)
 800f992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f996:	601a      	str	r2, [r3, #0]
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	f3bf 8f6f 	isb	sy
}
 800f9a0:	e001      	b.n	800f9a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f9a2:	f7ff f9fb 	bl	800ed9c <xTaskResumeAll>
}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	240023a4 	.word	0x240023a4
 800f9b4:	240023a8 	.word	0x240023a8
 800f9b8:	e000ed04 	.word	0xe000ed04

0800f9bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800fa00 <prvGetNextExpireTime+0x44>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d101      	bne.n	800f9d2 <prvGetNextExpireTime+0x16>
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	e000      	b.n	800f9d4 <prvGetNextExpireTime+0x18>
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d105      	bne.n	800f9ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9e0:	4b07      	ldr	r3, [pc, #28]	@ (800fa00 <prvGetNextExpireTime+0x44>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]
 800f9ea:	e001      	b.n	800f9f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3714      	adds	r7, #20
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	240023a0 	.word	0x240023a0

0800fa04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fa0c:	f7ff fa64 	bl	800eed8 <xTaskGetTickCount>
 800fa10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fa12:	4b0b      	ldr	r3, [pc, #44]	@ (800fa40 <prvSampleTimeNow+0x3c>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d205      	bcs.n	800fa28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa1c:	f000 f93a 	bl	800fc94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2201      	movs	r2, #1
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	e002      	b.n	800fa2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fa2e:	4a04      	ldr	r2, [pc, #16]	@ (800fa40 <prvSampleTimeNow+0x3c>)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fa34:	68fb      	ldr	r3, [r7, #12]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	240023b0 	.word	0x240023b0

0800fa44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b086      	sub	sp, #24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
 800fa50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fa52:	2300      	movs	r3, #0
 800fa54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	68ba      	ldr	r2, [r7, #8]
 800fa5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d812      	bhi.n	800fa90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	1ad2      	subs	r2, r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d302      	bcc.n	800fa7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	617b      	str	r3, [r7, #20]
 800fa7c:	e01b      	b.n	800fab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa7e:	4b10      	ldr	r3, [pc, #64]	@ (800fac0 <prvInsertTimerInActiveList+0x7c>)
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3304      	adds	r3, #4
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7fe f932 	bl	800dcf2 <vListInsert>
 800fa8e:	e012      	b.n	800fab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d206      	bcs.n	800faa6 <prvInsertTimerInActiveList+0x62>
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d302      	bcc.n	800faa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800faa0:	2301      	movs	r3, #1
 800faa2:	617b      	str	r3, [r7, #20]
 800faa4:	e007      	b.n	800fab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800faa6:	4b07      	ldr	r3, [pc, #28]	@ (800fac4 <prvInsertTimerInActiveList+0x80>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	3304      	adds	r3, #4
 800faae:	4619      	mov	r1, r3
 800fab0:	4610      	mov	r0, r2
 800fab2:	f7fe f91e 	bl	800dcf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fab6:	697b      	ldr	r3, [r7, #20]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	240023a4 	.word	0x240023a4
 800fac4:	240023a0 	.word	0x240023a0

0800fac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b08e      	sub	sp, #56	@ 0x38
 800facc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800face:	e0ce      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	da19      	bge.n	800fb0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fad6:	1d3b      	adds	r3, r7, #4
 800fad8:	3304      	adds	r3, #4
 800fada:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d10b      	bne.n	800fafa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800fae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae6:	f383 8811 	msr	BASEPRI, r3
 800faea:	f3bf 8f6f 	isb	sy
 800faee:	f3bf 8f4f 	dsb	sy
 800faf2:	61fb      	str	r3, [r7, #28]
}
 800faf4:	bf00      	nop
 800faf6:	bf00      	nop
 800faf8:	e7fd      	b.n	800faf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb00:	6850      	ldr	r0, [r2, #4]
 800fb02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb04:	6892      	ldr	r2, [r2, #8]
 800fb06:	4611      	mov	r1, r2
 800fb08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f2c0 80ae 	blt.w	800fc6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d004      	beq.n	800fb28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb20:	3304      	adds	r3, #4
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fe f91e 	bl	800dd64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb28:	463b      	mov	r3, r7
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7ff ff6a 	bl	800fa04 <prvSampleTimeNow>
 800fb30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b09      	cmp	r3, #9
 800fb36:	f200 8097 	bhi.w	800fc68 <prvProcessReceivedCommands+0x1a0>
 800fb3a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb40 <prvProcessReceivedCommands+0x78>)
 800fb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb40:	0800fb69 	.word	0x0800fb69
 800fb44:	0800fb69 	.word	0x0800fb69
 800fb48:	0800fb69 	.word	0x0800fb69
 800fb4c:	0800fbdf 	.word	0x0800fbdf
 800fb50:	0800fbf3 	.word	0x0800fbf3
 800fb54:	0800fc3f 	.word	0x0800fc3f
 800fb58:	0800fb69 	.word	0x0800fb69
 800fb5c:	0800fb69 	.word	0x0800fb69
 800fb60:	0800fbdf 	.word	0x0800fbdf
 800fb64:	0800fbf3 	.word	0x0800fbf3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb6e:	f043 0301 	orr.w	r3, r3, #1
 800fb72:	b2da      	uxtb	r2, r3
 800fb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb7e:	699b      	ldr	r3, [r3, #24]
 800fb80:	18d1      	adds	r1, r2, r3
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb88:	f7ff ff5c 	bl	800fa44 <prvInsertTimerInActiveList>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d06c      	beq.n	800fc6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fba0:	f003 0304 	and.w	r3, r3, #4
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d061      	beq.n	800fc6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	441a      	add	r2, r3
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fbba:	f7ff fe01 	bl	800f7c0 <xTimerGenericCommand>
 800fbbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fbc0:	6a3b      	ldr	r3, [r7, #32]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d152      	bne.n	800fc6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	61bb      	str	r3, [r7, #24]
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	e7fd      	b.n	800fbda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fbe4:	f023 0301 	bic.w	r3, r3, #1
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fbf0:	e03d      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fbf8:	f043 0301 	orr.w	r3, r3, #1
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0c:	699b      	ldr	r3, [r3, #24]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10b      	bne.n	800fc2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	617b      	str	r3, [r7, #20]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc2c:	699a      	ldr	r2, [r3, #24]
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc30:	18d1      	adds	r1, r2, r3
 800fc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc38:	f7ff ff04 	bl	800fa44 <prvInsertTimerInActiveList>
					break;
 800fc3c:	e017      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d103      	bne.n	800fc54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fc4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc4e:	f000 fbeb 	bl	8010428 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fc52:	e00c      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fc5a:	f023 0301 	bic.w	r3, r3, #1
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fc66:	e002      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fc68:	bf00      	nop
 800fc6a:	e000      	b.n	800fc6e <prvProcessReceivedCommands+0x1a6>
					break;
 800fc6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc6e:	4b08      	ldr	r3, [pc, #32]	@ (800fc90 <prvProcessReceivedCommands+0x1c8>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	1d39      	adds	r1, r7, #4
 800fc74:	2200      	movs	r2, #0
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fe fb84 	bl	800e384 <xQueueReceive>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f47f af26 	bne.w	800fad0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	3730      	adds	r7, #48	@ 0x30
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	240023a8 	.word	0x240023a8

0800fc94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc9a:	e049      	b.n	800fd30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc9c:	4b2e      	ldr	r3, [pc, #184]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fca6:	4b2c      	ldr	r3, [pc, #176]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fe f855 	bl	800dd64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d02f      	beq.n	800fd30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	699b      	ldr	r3, [r3, #24]
 800fcd4:	693a      	ldr	r2, [r7, #16]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fcda:	68ba      	ldr	r2, [r7, #8]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d90e      	bls.n	800fd00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcee:	4b1a      	ldr	r3, [pc, #104]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	3304      	adds	r3, #4
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f7fd fffa 	bl	800dcf2 <vListInsert>
 800fcfe:	e017      	b.n	800fd30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd00:	2300      	movs	r3, #0
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	2300      	movs	r3, #0
 800fd06:	693a      	ldr	r2, [r7, #16]
 800fd08:	2100      	movs	r1, #0
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f7ff fd58 	bl	800f7c0 <xTimerGenericCommand>
 800fd10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10b      	bne.n	800fd30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fd18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	603b      	str	r3, [r7, #0]
}
 800fd2a:	bf00      	nop
 800fd2c:	bf00      	nop
 800fd2e:	e7fd      	b.n	800fd2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd30:	4b09      	ldr	r3, [pc, #36]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1b0      	bne.n	800fc9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fd3a:	4b07      	ldr	r3, [pc, #28]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fd40:	4b06      	ldr	r3, [pc, #24]	@ (800fd5c <prvSwitchTimerLists+0xc8>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4a04      	ldr	r2, [pc, #16]	@ (800fd58 <prvSwitchTimerLists+0xc4>)
 800fd46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fd48:	4a04      	ldr	r2, [pc, #16]	@ (800fd5c <prvSwitchTimerLists+0xc8>)
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	6013      	str	r3, [r2, #0]
}
 800fd4e:	bf00      	nop
 800fd50:	3718      	adds	r7, #24
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	240023a0 	.word	0x240023a0
 800fd5c:	240023a4 	.word	0x240023a4

0800fd60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd66:	f000 f96f 	bl	8010048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd6a:	4b15      	ldr	r3, [pc, #84]	@ (800fdc0 <prvCheckForValidListAndQueue+0x60>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d120      	bne.n	800fdb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fd72:	4814      	ldr	r0, [pc, #80]	@ (800fdc4 <prvCheckForValidListAndQueue+0x64>)
 800fd74:	f7fd ff6c 	bl	800dc50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd78:	4813      	ldr	r0, [pc, #76]	@ (800fdc8 <prvCheckForValidListAndQueue+0x68>)
 800fd7a:	f7fd ff69 	bl	800dc50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd7e:	4b13      	ldr	r3, [pc, #76]	@ (800fdcc <prvCheckForValidListAndQueue+0x6c>)
 800fd80:	4a10      	ldr	r2, [pc, #64]	@ (800fdc4 <prvCheckForValidListAndQueue+0x64>)
 800fd82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd84:	4b12      	ldr	r3, [pc, #72]	@ (800fdd0 <prvCheckForValidListAndQueue+0x70>)
 800fd86:	4a10      	ldr	r2, [pc, #64]	@ (800fdc8 <prvCheckForValidListAndQueue+0x68>)
 800fd88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	4b11      	ldr	r3, [pc, #68]	@ (800fdd4 <prvCheckForValidListAndQueue+0x74>)
 800fd90:	4a11      	ldr	r2, [pc, #68]	@ (800fdd8 <prvCheckForValidListAndQueue+0x78>)
 800fd92:	2110      	movs	r1, #16
 800fd94:	200a      	movs	r0, #10
 800fd96:	f7fe f879 	bl	800de8c <xQueueGenericCreateStatic>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	4a08      	ldr	r2, [pc, #32]	@ (800fdc0 <prvCheckForValidListAndQueue+0x60>)
 800fd9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fda0:	4b07      	ldr	r3, [pc, #28]	@ (800fdc0 <prvCheckForValidListAndQueue+0x60>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d005      	beq.n	800fdb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fda8:	4b05      	ldr	r3, [pc, #20]	@ (800fdc0 <prvCheckForValidListAndQueue+0x60>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	490b      	ldr	r1, [pc, #44]	@ (800fddc <prvCheckForValidListAndQueue+0x7c>)
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe fcda 	bl	800e768 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fdb4:	f000 f97a 	bl	80100ac <vPortExitCritical>
}
 800fdb8:	bf00      	nop
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	240023a8 	.word	0x240023a8
 800fdc4:	24002378 	.word	0x24002378
 800fdc8:	2400238c 	.word	0x2400238c
 800fdcc:	240023a0 	.word	0x240023a0
 800fdd0:	240023a4 	.word	0x240023a4
 800fdd4:	24002454 	.word	0x24002454
 800fdd8:	240023b4 	.word	0x240023b4
 800fddc:	08014ffc 	.word	0x08014ffc

0800fde0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	3b04      	subs	r3, #4
 800fdf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fdf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	3b04      	subs	r3, #4
 800fdfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	f023 0201 	bic.w	r2, r3, #1
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3b04      	subs	r3, #4
 800fe0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe10:	4a0c      	ldr	r2, [pc, #48]	@ (800fe44 <pxPortInitialiseStack+0x64>)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3b14      	subs	r3, #20
 800fe1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3b04      	subs	r3, #4
 800fe26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f06f 0202 	mvn.w	r2, #2
 800fe2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3b20      	subs	r3, #32
 800fe34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe36:	68fb      	ldr	r3, [r7, #12]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3714      	adds	r7, #20
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr
 800fe44:	0800fe49 	.word	0x0800fe49

0800fe48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe52:	4b13      	ldr	r3, [pc, #76]	@ (800fea0 <prvTaskExitError+0x58>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5a:	d00b      	beq.n	800fe74 <prvTaskExitError+0x2c>
	__asm volatile
 800fe5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	60fb      	str	r3, [r7, #12]
}
 800fe6e:	bf00      	nop
 800fe70:	bf00      	nop
 800fe72:	e7fd      	b.n	800fe70 <prvTaskExitError+0x28>
	__asm volatile
 800fe74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	60bb      	str	r3, [r7, #8]
}
 800fe86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe88:	bf00      	nop
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d0fc      	beq.n	800fe8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe90:	bf00      	nop
 800fe92:	bf00      	nop
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	2400007c 	.word	0x2400007c
	...

0800feb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800feb0:	4b07      	ldr	r3, [pc, #28]	@ (800fed0 <pxCurrentTCBConst2>)
 800feb2:	6819      	ldr	r1, [r3, #0]
 800feb4:	6808      	ldr	r0, [r1, #0]
 800feb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feba:	f380 8809 	msr	PSP, r0
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f04f 0000 	mov.w	r0, #0
 800fec6:	f380 8811 	msr	BASEPRI, r0
 800feca:	4770      	bx	lr
 800fecc:	f3af 8000 	nop.w

0800fed0 <pxCurrentTCBConst2>:
 800fed0:	24001e78 	.word	0x24001e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fed4:	bf00      	nop
 800fed6:	bf00      	nop

0800fed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fed8:	4808      	ldr	r0, [pc, #32]	@ (800fefc <prvPortStartFirstTask+0x24>)
 800feda:	6800      	ldr	r0, [r0, #0]
 800fedc:	6800      	ldr	r0, [r0, #0]
 800fede:	f380 8808 	msr	MSP, r0
 800fee2:	f04f 0000 	mov.w	r0, #0
 800fee6:	f380 8814 	msr	CONTROL, r0
 800feea:	b662      	cpsie	i
 800feec:	b661      	cpsie	f
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	f3bf 8f6f 	isb	sy
 800fef6:	df00      	svc	0
 800fef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fefa:	bf00      	nop
 800fefc:	e000ed08 	.word	0xe000ed08

0800ff00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff06:	4b47      	ldr	r3, [pc, #284]	@ (8010024 <xPortStartScheduler+0x124>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a47      	ldr	r2, [pc, #284]	@ (8010028 <xPortStartScheduler+0x128>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d10b      	bne.n	800ff28 <xPortStartScheduler+0x28>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	60fb      	str	r3, [r7, #12]
}
 800ff22:	bf00      	nop
 800ff24:	bf00      	nop
 800ff26:	e7fd      	b.n	800ff24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff28:	4b3e      	ldr	r3, [pc, #248]	@ (8010024 <xPortStartScheduler+0x124>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4a3f      	ldr	r2, [pc, #252]	@ (801002c <xPortStartScheduler+0x12c>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d10b      	bne.n	800ff4a <xPortStartScheduler+0x4a>
	__asm volatile
 800ff32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	613b      	str	r3, [r7, #16]
}
 800ff44:	bf00      	nop
 800ff46:	bf00      	nop
 800ff48:	e7fd      	b.n	800ff46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff4a:	4b39      	ldr	r3, [pc, #228]	@ (8010030 <xPortStartScheduler+0x130>)
 800ff4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	22ff      	movs	r2, #255	@ 0xff
 800ff5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	4b31      	ldr	r3, [pc, #196]	@ (8010034 <xPortStartScheduler+0x134>)
 800ff70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff72:	4b31      	ldr	r3, [pc, #196]	@ (8010038 <xPortStartScheduler+0x138>)
 800ff74:	2207      	movs	r2, #7
 800ff76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff78:	e009      	b.n	800ff8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ff7a:	4b2f      	ldr	r3, [pc, #188]	@ (8010038 <xPortStartScheduler+0x138>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	4a2d      	ldr	r2, [pc, #180]	@ (8010038 <xPortStartScheduler+0x138>)
 800ff82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff84:	78fb      	ldrb	r3, [r7, #3]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	005b      	lsls	r3, r3, #1
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff8e:	78fb      	ldrb	r3, [r7, #3]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff96:	2b80      	cmp	r3, #128	@ 0x80
 800ff98:	d0ef      	beq.n	800ff7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff9a:	4b27      	ldr	r3, [pc, #156]	@ (8010038 <xPortStartScheduler+0x138>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f1c3 0307 	rsb	r3, r3, #7
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	d00b      	beq.n	800ffbe <xPortStartScheduler+0xbe>
	__asm volatile
 800ffa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffaa:	f383 8811 	msr	BASEPRI, r3
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	f3bf 8f4f 	dsb	sy
 800ffb6:	60bb      	str	r3, [r7, #8]
}
 800ffb8:	bf00      	nop
 800ffba:	bf00      	nop
 800ffbc:	e7fd      	b.n	800ffba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ffbe:	4b1e      	ldr	r3, [pc, #120]	@ (8010038 <xPortStartScheduler+0x138>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	021b      	lsls	r3, r3, #8
 800ffc4:	4a1c      	ldr	r2, [pc, #112]	@ (8010038 <xPortStartScheduler+0x138>)
 800ffc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ffc8:	4b1b      	ldr	r3, [pc, #108]	@ (8010038 <xPortStartScheduler+0x138>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ffd0:	4a19      	ldr	r2, [pc, #100]	@ (8010038 <xPortStartScheduler+0x138>)
 800ffd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ffdc:	4b17      	ldr	r3, [pc, #92]	@ (801003c <xPortStartScheduler+0x13c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a16      	ldr	r2, [pc, #88]	@ (801003c <xPortStartScheduler+0x13c>)
 800ffe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ffe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ffe8:	4b14      	ldr	r3, [pc, #80]	@ (801003c <xPortStartScheduler+0x13c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a13      	ldr	r2, [pc, #76]	@ (801003c <xPortStartScheduler+0x13c>)
 800ffee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fff4:	f000 f8da 	bl	80101ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fff8:	4b11      	ldr	r3, [pc, #68]	@ (8010040 <xPortStartScheduler+0x140>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fffe:	f000 f8f9 	bl	80101f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010002:	4b10      	ldr	r3, [pc, #64]	@ (8010044 <xPortStartScheduler+0x144>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a0f      	ldr	r2, [pc, #60]	@ (8010044 <xPortStartScheduler+0x144>)
 8010008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801000c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801000e:	f7ff ff63 	bl	800fed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010012:	f7ff f82b 	bl	800f06c <vTaskSwitchContext>
	prvTaskExitError();
 8010016:	f7ff ff17 	bl	800fe48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801001a:	2300      	movs	r3, #0
}
 801001c:	4618      	mov	r0, r3
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	e000ed00 	.word	0xe000ed00
 8010028:	410fc271 	.word	0x410fc271
 801002c:	410fc270 	.word	0x410fc270
 8010030:	e000e400 	.word	0xe000e400
 8010034:	240024a4 	.word	0x240024a4
 8010038:	240024a8 	.word	0x240024a8
 801003c:	e000ed20 	.word	0xe000ed20
 8010040:	2400007c 	.word	0x2400007c
 8010044:	e000ef34 	.word	0xe000ef34

08010048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010052:	f383 8811 	msr	BASEPRI, r3
 8010056:	f3bf 8f6f 	isb	sy
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	607b      	str	r3, [r7, #4]
}
 8010060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010062:	4b10      	ldr	r3, [pc, #64]	@ (80100a4 <vPortEnterCritical+0x5c>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	3301      	adds	r3, #1
 8010068:	4a0e      	ldr	r2, [pc, #56]	@ (80100a4 <vPortEnterCritical+0x5c>)
 801006a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801006c:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <vPortEnterCritical+0x5c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d110      	bne.n	8010096 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010074:	4b0c      	ldr	r3, [pc, #48]	@ (80100a8 <vPortEnterCritical+0x60>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00b      	beq.n	8010096 <vPortEnterCritical+0x4e>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	603b      	str	r3, [r7, #0]
}
 8010090:	bf00      	nop
 8010092:	bf00      	nop
 8010094:	e7fd      	b.n	8010092 <vPortEnterCritical+0x4a>
	}
}
 8010096:	bf00      	nop
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	2400007c 	.word	0x2400007c
 80100a8:	e000ed04 	.word	0xe000ed04

080100ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80100b2:	4b12      	ldr	r3, [pc, #72]	@ (80100fc <vPortExitCritical+0x50>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10b      	bne.n	80100d2 <vPortExitCritical+0x26>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	607b      	str	r3, [r7, #4]
}
 80100cc:	bf00      	nop
 80100ce:	bf00      	nop
 80100d0:	e7fd      	b.n	80100ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80100d2:	4b0a      	ldr	r3, [pc, #40]	@ (80100fc <vPortExitCritical+0x50>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3b01      	subs	r3, #1
 80100d8:	4a08      	ldr	r2, [pc, #32]	@ (80100fc <vPortExitCritical+0x50>)
 80100da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80100dc:	4b07      	ldr	r3, [pc, #28]	@ (80100fc <vPortExitCritical+0x50>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <vPortExitCritical+0x44>
 80100e4:	2300      	movs	r3, #0
 80100e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	f383 8811 	msr	BASEPRI, r3
}
 80100ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	2400007c 	.word	0x2400007c

08010100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010100:	f3ef 8009 	mrs	r0, PSP
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	4b15      	ldr	r3, [pc, #84]	@ (8010160 <pxCurrentTCBConst>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	f01e 0f10 	tst.w	lr, #16
 8010110:	bf08      	it	eq
 8010112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	6010      	str	r0, [r2, #0]
 801011c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010124:	f380 8811 	msr	BASEPRI, r0
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f7fe ff9c 	bl	800f06c <vTaskSwitchContext>
 8010134:	f04f 0000 	mov.w	r0, #0
 8010138:	f380 8811 	msr	BASEPRI, r0
 801013c:	bc09      	pop	{r0, r3}
 801013e:	6819      	ldr	r1, [r3, #0]
 8010140:	6808      	ldr	r0, [r1, #0]
 8010142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010146:	f01e 0f10 	tst.w	lr, #16
 801014a:	bf08      	it	eq
 801014c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010150:	f380 8809 	msr	PSP, r0
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	f3af 8000 	nop.w

08010160 <pxCurrentTCBConst>:
 8010160:	24001e78 	.word	0x24001e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop

08010168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	607b      	str	r3, [r7, #4]
}
 8010180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010182:	f7fe feb9 	bl	800eef8 <xTaskIncrementTick>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d003      	beq.n	8010194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801018c:	4b06      	ldr	r3, [pc, #24]	@ (80101a8 <xPortSysTickHandler+0x40>)
 801018e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010192:	601a      	str	r2, [r3, #0]
 8010194:	2300      	movs	r3, #0
 8010196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	f383 8811 	msr	BASEPRI, r3
}
 801019e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80101a0:	bf00      	nop
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	e000ed04 	.word	0xe000ed04

080101ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80101b0:	4b0b      	ldr	r3, [pc, #44]	@ (80101e0 <vPortSetupTimerInterrupt+0x34>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80101b6:	4b0b      	ldr	r3, [pc, #44]	@ (80101e4 <vPortSetupTimerInterrupt+0x38>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80101bc:	4b0a      	ldr	r3, [pc, #40]	@ (80101e8 <vPortSetupTimerInterrupt+0x3c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a0a      	ldr	r2, [pc, #40]	@ (80101ec <vPortSetupTimerInterrupt+0x40>)
 80101c2:	fba2 2303 	umull	r2, r3, r2, r3
 80101c6:	095b      	lsrs	r3, r3, #5
 80101c8:	4a09      	ldr	r2, [pc, #36]	@ (80101f0 <vPortSetupTimerInterrupt+0x44>)
 80101ca:	3b01      	subs	r3, #1
 80101cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80101ce:	4b04      	ldr	r3, [pc, #16]	@ (80101e0 <vPortSetupTimerInterrupt+0x34>)
 80101d0:	2207      	movs	r2, #7
 80101d2:	601a      	str	r2, [r3, #0]
}
 80101d4:	bf00      	nop
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	e000e010 	.word	0xe000e010
 80101e4:	e000e018 	.word	0xe000e018
 80101e8:	24000054 	.word	0x24000054
 80101ec:	10624dd3 	.word	0x10624dd3
 80101f0:	e000e014 	.word	0xe000e014

080101f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010204 <vPortEnableVFP+0x10>
 80101f8:	6801      	ldr	r1, [r0, #0]
 80101fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80101fe:	6001      	str	r1, [r0, #0]
 8010200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010202:	bf00      	nop
 8010204:	e000ed88 	.word	0xe000ed88

08010208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801020e:	f3ef 8305 	mrs	r3, IPSR
 8010212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2b0f      	cmp	r3, #15
 8010218:	d915      	bls.n	8010246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801021a:	4a18      	ldr	r2, [pc, #96]	@ (801027c <vPortValidateInterruptPriority+0x74>)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	4413      	add	r3, r2
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010224:	4b16      	ldr	r3, [pc, #88]	@ (8010280 <vPortValidateInterruptPriority+0x78>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	7afa      	ldrb	r2, [r7, #11]
 801022a:	429a      	cmp	r2, r3
 801022c:	d20b      	bcs.n	8010246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	607b      	str	r3, [r7, #4]
}
 8010240:	bf00      	nop
 8010242:	bf00      	nop
 8010244:	e7fd      	b.n	8010242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010246:	4b0f      	ldr	r3, [pc, #60]	@ (8010284 <vPortValidateInterruptPriority+0x7c>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801024e:	4b0e      	ldr	r3, [pc, #56]	@ (8010288 <vPortValidateInterruptPriority+0x80>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	429a      	cmp	r2, r3
 8010254:	d90b      	bls.n	801026e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	603b      	str	r3, [r7, #0]
}
 8010268:	bf00      	nop
 801026a:	bf00      	nop
 801026c:	e7fd      	b.n	801026a <vPortValidateInterruptPriority+0x62>
	}
 801026e:	bf00      	nop
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	e000e3f0 	.word	0xe000e3f0
 8010280:	240024a4 	.word	0x240024a4
 8010284:	e000ed0c 	.word	0xe000ed0c
 8010288:	240024a8 	.word	0x240024a8

0801028c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	@ 0x28
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010298:	f7fe fd72 	bl	800ed80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801029c:	4b5c      	ldr	r3, [pc, #368]	@ (8010410 <pvPortMalloc+0x184>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d101      	bne.n	80102a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80102a4:	f000 f924 	bl	80104f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80102a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010414 <pvPortMalloc+0x188>)
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4013      	ands	r3, r2
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f040 8095 	bne.w	80103e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d01e      	beq.n	80102fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80102bc:	2208      	movs	r2, #8
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4413      	add	r3, r2
 80102c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f003 0307 	and.w	r3, r3, #7
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d015      	beq.n	80102fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f023 0307 	bic.w	r3, r3, #7
 80102d4:	3308      	adds	r3, #8
 80102d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f003 0307 	and.w	r3, r3, #7
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00b      	beq.n	80102fa <pvPortMalloc+0x6e>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	617b      	str	r3, [r7, #20]
}
 80102f4:	bf00      	nop
 80102f6:	bf00      	nop
 80102f8:	e7fd      	b.n	80102f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d06f      	beq.n	80103e0 <pvPortMalloc+0x154>
 8010300:	4b45      	ldr	r3, [pc, #276]	@ (8010418 <pvPortMalloc+0x18c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	429a      	cmp	r2, r3
 8010308:	d86a      	bhi.n	80103e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801030a:	4b44      	ldr	r3, [pc, #272]	@ (801041c <pvPortMalloc+0x190>)
 801030c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801030e:	4b43      	ldr	r3, [pc, #268]	@ (801041c <pvPortMalloc+0x190>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010314:	e004      	b.n	8010320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801031a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	429a      	cmp	r2, r3
 8010328:	d903      	bls.n	8010332 <pvPortMalloc+0xa6>
 801032a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1f1      	bne.n	8010316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010332:	4b37      	ldr	r3, [pc, #220]	@ (8010410 <pvPortMalloc+0x184>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010338:	429a      	cmp	r2, r3
 801033a:	d051      	beq.n	80103e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2208      	movs	r2, #8
 8010342:	4413      	add	r3, r2
 8010344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801034e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010350:	685a      	ldr	r2, [r3, #4]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	1ad2      	subs	r2, r2, r3
 8010356:	2308      	movs	r3, #8
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	429a      	cmp	r2, r3
 801035c:	d920      	bls.n	80103a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801035e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4413      	add	r3, r2
 8010364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	f003 0307 	and.w	r3, r3, #7
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00b      	beq.n	8010388 <pvPortMalloc+0xfc>
	__asm volatile
 8010370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010374:	f383 8811 	msr	BASEPRI, r3
 8010378:	f3bf 8f6f 	isb	sy
 801037c:	f3bf 8f4f 	dsb	sy
 8010380:	613b      	str	r3, [r7, #16]
}
 8010382:	bf00      	nop
 8010384:	bf00      	nop
 8010386:	e7fd      	b.n	8010384 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	1ad2      	subs	r2, r2, r3
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801039a:	69b8      	ldr	r0, [r7, #24]
 801039c:	f000 f90a 	bl	80105b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80103a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010418 <pvPortMalloc+0x18c>)
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010418 <pvPortMalloc+0x18c>)
 80103ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80103ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010418 <pvPortMalloc+0x18c>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010420 <pvPortMalloc+0x194>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d203      	bcs.n	80103c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80103ba:	4b17      	ldr	r3, [pc, #92]	@ (8010418 <pvPortMalloc+0x18c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a18      	ldr	r2, [pc, #96]	@ (8010420 <pvPortMalloc+0x194>)
 80103c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80103c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c4:	685a      	ldr	r2, [r3, #4]
 80103c6:	4b13      	ldr	r3, [pc, #76]	@ (8010414 <pvPortMalloc+0x188>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	431a      	orrs	r2, r3
 80103cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80103d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d2:	2200      	movs	r2, #0
 80103d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80103d6:	4b13      	ldr	r3, [pc, #76]	@ (8010424 <pvPortMalloc+0x198>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3301      	adds	r3, #1
 80103dc:	4a11      	ldr	r2, [pc, #68]	@ (8010424 <pvPortMalloc+0x198>)
 80103de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103e0:	f7fe fcdc 	bl	800ed9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	f003 0307 	and.w	r3, r3, #7
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00b      	beq.n	8010406 <pvPortMalloc+0x17a>
	__asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	60fb      	str	r3, [r7, #12]
}
 8010400:	bf00      	nop
 8010402:	bf00      	nop
 8010404:	e7fd      	b.n	8010402 <pvPortMalloc+0x176>
	return pvReturn;
 8010406:	69fb      	ldr	r3, [r7, #28]
}
 8010408:	4618      	mov	r0, r3
 801040a:	3728      	adds	r7, #40	@ 0x28
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	240060b4 	.word	0x240060b4
 8010414:	240060c8 	.word	0x240060c8
 8010418:	240060b8 	.word	0x240060b8
 801041c:	240060ac 	.word	0x240060ac
 8010420:	240060bc 	.word	0x240060bc
 8010424:	240060c0 	.word	0x240060c0

08010428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d04f      	beq.n	80104da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801043a:	2308      	movs	r3, #8
 801043c:	425b      	negs	r3, r3
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	4413      	add	r3, r2
 8010442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	685a      	ldr	r2, [r3, #4]
 801044c:	4b25      	ldr	r3, [pc, #148]	@ (80104e4 <vPortFree+0xbc>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4013      	ands	r3, r2
 8010452:	2b00      	cmp	r3, #0
 8010454:	d10b      	bne.n	801046e <vPortFree+0x46>
	__asm volatile
 8010456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	60fb      	str	r3, [r7, #12]
}
 8010468:	bf00      	nop
 801046a:	bf00      	nop
 801046c:	e7fd      	b.n	801046a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00b      	beq.n	801048e <vPortFree+0x66>
	__asm volatile
 8010476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801047a:	f383 8811 	msr	BASEPRI, r3
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	60bb      	str	r3, [r7, #8]
}
 8010488:	bf00      	nop
 801048a:	bf00      	nop
 801048c:	e7fd      	b.n	801048a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	4b14      	ldr	r3, [pc, #80]	@ (80104e4 <vPortFree+0xbc>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	4013      	ands	r3, r2
 8010498:	2b00      	cmp	r3, #0
 801049a:	d01e      	beq.n	80104da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d11a      	bne.n	80104da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	685a      	ldr	r2, [r3, #4]
 80104a8:	4b0e      	ldr	r3, [pc, #56]	@ (80104e4 <vPortFree+0xbc>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	43db      	mvns	r3, r3
 80104ae:	401a      	ands	r2, r3
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80104b4:	f7fe fc64 	bl	800ed80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	4b0a      	ldr	r3, [pc, #40]	@ (80104e8 <vPortFree+0xc0>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4413      	add	r3, r2
 80104c2:	4a09      	ldr	r2, [pc, #36]	@ (80104e8 <vPortFree+0xc0>)
 80104c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80104c6:	6938      	ldr	r0, [r7, #16]
 80104c8:	f000 f874 	bl	80105b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80104cc:	4b07      	ldr	r3, [pc, #28]	@ (80104ec <vPortFree+0xc4>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3301      	adds	r3, #1
 80104d2:	4a06      	ldr	r2, [pc, #24]	@ (80104ec <vPortFree+0xc4>)
 80104d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80104d6:	f7fe fc61 	bl	800ed9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80104da:	bf00      	nop
 80104dc:	3718      	adds	r7, #24
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	240060c8 	.word	0x240060c8
 80104e8:	240060b8 	.word	0x240060b8
 80104ec:	240060c4 	.word	0x240060c4

080104f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80104fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104fc:	4b27      	ldr	r3, [pc, #156]	@ (801059c <prvHeapInit+0xac>)
 80104fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f003 0307 	and.w	r3, r3, #7
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00c      	beq.n	8010524 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	3307      	adds	r3, #7
 801050e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f023 0307 	bic.w	r3, r3, #7
 8010516:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010518:	68ba      	ldr	r2, [r7, #8]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	1ad3      	subs	r3, r2, r3
 801051e:	4a1f      	ldr	r2, [pc, #124]	@ (801059c <prvHeapInit+0xac>)
 8010520:	4413      	add	r3, r2
 8010522:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010528:	4a1d      	ldr	r2, [pc, #116]	@ (80105a0 <prvHeapInit+0xb0>)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801052e:	4b1c      	ldr	r3, [pc, #112]	@ (80105a0 <prvHeapInit+0xb0>)
 8010530:	2200      	movs	r2, #0
 8010532:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	68ba      	ldr	r2, [r7, #8]
 8010538:	4413      	add	r3, r2
 801053a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801053c:	2208      	movs	r2, #8
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	1a9b      	subs	r3, r3, r2
 8010542:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f023 0307 	bic.w	r3, r3, #7
 801054a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	4a15      	ldr	r2, [pc, #84]	@ (80105a4 <prvHeapInit+0xb4>)
 8010550:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010552:	4b14      	ldr	r3, [pc, #80]	@ (80105a4 <prvHeapInit+0xb4>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2200      	movs	r2, #0
 8010558:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801055a:	4b12      	ldr	r3, [pc, #72]	@ (80105a4 <prvHeapInit+0xb4>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2200      	movs	r2, #0
 8010560:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	68fa      	ldr	r2, [r7, #12]
 801056a:	1ad2      	subs	r2, r2, r3
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010570:	4b0c      	ldr	r3, [pc, #48]	@ (80105a4 <prvHeapInit+0xb4>)
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	4a0a      	ldr	r2, [pc, #40]	@ (80105a8 <prvHeapInit+0xb8>)
 801057e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	4a09      	ldr	r2, [pc, #36]	@ (80105ac <prvHeapInit+0xbc>)
 8010586:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010588:	4b09      	ldr	r3, [pc, #36]	@ (80105b0 <prvHeapInit+0xc0>)
 801058a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801058e:	601a      	str	r2, [r3, #0]
}
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr
 801059c:	240024ac 	.word	0x240024ac
 80105a0:	240060ac 	.word	0x240060ac
 80105a4:	240060b4 	.word	0x240060b4
 80105a8:	240060bc 	.word	0x240060bc
 80105ac:	240060b8 	.word	0x240060b8
 80105b0:	240060c8 	.word	0x240060c8

080105b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80105bc:	4b28      	ldr	r3, [pc, #160]	@ (8010660 <prvInsertBlockIntoFreeList+0xac>)
 80105be:	60fb      	str	r3, [r7, #12]
 80105c0:	e002      	b.n	80105c8 <prvInsertBlockIntoFreeList+0x14>
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d8f7      	bhi.n	80105c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	4413      	add	r3, r2
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d108      	bne.n	80105f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	441a      	add	r2, r3
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	68ba      	ldr	r2, [r7, #8]
 8010600:	441a      	add	r2, r3
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	429a      	cmp	r2, r3
 8010608:	d118      	bne.n	801063c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	4b15      	ldr	r3, [pc, #84]	@ (8010664 <prvInsertBlockIntoFreeList+0xb0>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	429a      	cmp	r2, r3
 8010614:	d00d      	beq.n	8010632 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	685a      	ldr	r2, [r3, #4]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	441a      	add	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	e008      	b.n	8010644 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010632:	4b0c      	ldr	r3, [pc, #48]	@ (8010664 <prvInsertBlockIntoFreeList+0xb0>)
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	e003      	b.n	8010644 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	429a      	cmp	r2, r3
 801064a:	d002      	beq.n	8010652 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010652:	bf00      	nop
 8010654:	3714      	adds	r7, #20
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	240060ac 	.word	0x240060ac
 8010664:	240060b4 	.word	0x240060b4

08010668 <arm_mat_trans_f32>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	8802      	ldrh	r2, [r0, #0]
 801066e:	b085      	sub	sp, #20
 8010670:	884b      	ldrh	r3, [r1, #2]
 8010672:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010676:	4293      	cmp	r3, r2
 8010678:	8844      	ldrh	r4, [r0, #2]
 801067a:	6848      	ldr	r0, [r1, #4]
 801067c:	d14e      	bne.n	801071c <arm_mat_trans_f32+0xb4>
 801067e:	f8b1 8000 	ldrh.w	r8, [r1]
 8010682:	45a0      	cmp	r8, r4
 8010684:	d14a      	bne.n	801071c <arm_mat_trans_f32+0xb4>
 8010686:	ea4f 0998 	mov.w	r9, r8, lsr #2
 801068a:	f008 0803 	and.w	r8, r8, #3
 801068e:	009c      	lsls	r4, r3, #2
 8010690:	4684      	mov	ip, r0
 8010692:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8010696:	fb09 f204 	mul.w	r2, r9, r4
 801069a:	011d      	lsls	r5, r3, #4
 801069c:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 80106a0:	eb00 0a04 	add.w	sl, r0, r4
 80106a4:	0092      	lsls	r2, r2, #2
 80106a6:	9103      	str	r1, [sp, #12]
 80106a8:	00db      	lsls	r3, r3, #3
 80106aa:	9202      	str	r2, [sp, #8]
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	4663      	mov	r3, ip
 80106b0:	f1b9 0f00 	cmp.w	r9, #0
 80106b4:	d01d      	beq.n	80106f2 <arm_mat_trans_f32+0x8a>
 80106b6:	9901      	ldr	r1, [sp, #4]
 80106b8:	f10e 0210 	add.w	r2, lr, #16
 80106bc:	4648      	mov	r0, r9
 80106be:	4461      	add	r1, ip
 80106c0:	ed52 7a04 	vldr	s15, [r2, #-16]
 80106c4:	191f      	adds	r7, r3, r4
 80106c6:	190e      	adds	r6, r1, r4
 80106c8:	3801      	subs	r0, #1
 80106ca:	edc3 7a00 	vstr	s15, [r3]
 80106ce:	f102 0210 	add.w	r2, r2, #16
 80106d2:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 80106d6:	442b      	add	r3, r5
 80106d8:	edc7 7a00 	vstr	s15, [r7]
 80106dc:	f852 7c18 	ldr.w	r7, [r2, #-24]
 80106e0:	600f      	str	r7, [r1, #0]
 80106e2:	4429      	add	r1, r5
 80106e4:	f852 7c14 	ldr.w	r7, [r2, #-20]
 80106e8:	6037      	str	r7, [r6, #0]
 80106ea:	d1e9      	bne.n	80106c0 <arm_mat_trans_f32+0x58>
 80106ec:	9b02      	ldr	r3, [sp, #8]
 80106ee:	44de      	add	lr, fp
 80106f0:	4463      	add	r3, ip
 80106f2:	f1b8 0f00 	cmp.w	r8, #0
 80106f6:	d009      	beq.n	801070c <arm_mat_trans_f32+0xa4>
 80106f8:	4642      	mov	r2, r8
 80106fa:	4671      	mov	r1, lr
 80106fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8010700:	3a01      	subs	r2, #1
 8010702:	6018      	str	r0, [r3, #0]
 8010704:	4423      	add	r3, r4
 8010706:	d1f9      	bne.n	80106fc <arm_mat_trans_f32+0x94>
 8010708:	9b03      	ldr	r3, [sp, #12]
 801070a:	449e      	add	lr, r3
 801070c:	f10c 0c04 	add.w	ip, ip, #4
 8010710:	45d4      	cmp	ip, sl
 8010712:	d1cc      	bne.n	80106ae <arm_mat_trans_f32+0x46>
 8010714:	2000      	movs	r0, #0
 8010716:	b005      	add	sp, #20
 8010718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071c:	f06f 0002 	mvn.w	r0, #2
 8010720:	e7f9      	b.n	8010716 <arm_mat_trans_f32+0xae>
 8010722:	bf00      	nop

08010724 <arm_mat_mult_f32>:
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	8845      	ldrh	r5, [r0, #2]
 801072a:	b08b      	sub	sp, #44	@ 0x2c
 801072c:	880b      	ldrh	r3, [r1, #0]
 801072e:	8806      	ldrh	r6, [r0, #0]
 8010730:	42ab      	cmp	r3, r5
 8010732:	9109      	str	r1, [sp, #36]	@ 0x24
 8010734:	6847      	ldr	r7, [r0, #4]
 8010736:	9604      	str	r6, [sp, #16]
 8010738:	6848      	ldr	r0, [r1, #4]
 801073a:	6854      	ldr	r4, [r2, #4]
 801073c:	8849      	ldrh	r1, [r1, #2]
 801073e:	f040 808d 	bne.w	801085c <arm_mat_mult_f32+0x138>
 8010742:	8815      	ldrh	r5, [r2, #0]
 8010744:	42b5      	cmp	r5, r6
 8010746:	f040 8089 	bne.w	801085c <arm_mat_mult_f32+0x138>
 801074a:	8852      	ldrh	r2, [r2, #2]
 801074c:	428a      	cmp	r2, r1
 801074e:	f040 8085 	bne.w	801085c <arm_mat_mult_f32+0x138>
 8010752:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8010756:	1d01      	adds	r1, r0, #4
 8010758:	0116      	lsls	r6, r2, #4
 801075a:	f003 0903 	and.w	r9, r3, #3
 801075e:	9108      	str	r1, [sp, #32]
 8010760:	0095      	lsls	r5, r2, #2
 8010762:	fb06 f108 	mul.w	r1, r6, r8
 8010766:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	f107 0b10 	add.w	fp, r7, #16
 8010770:	9103      	str	r1, [sp, #12]
 8010772:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8010776:	00d2      	lsls	r2, r2, #3
 8010778:	eb04 0a05 	add.w	sl, r4, r5
 801077c:	9101      	str	r1, [sp, #4]
 801077e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8010782:	9202      	str	r2, [sp, #8]
 8010784:	9107      	str	r1, [sp, #28]
 8010786:	9306      	str	r3, [sp, #24]
 8010788:	f1ab 0310 	sub.w	r3, fp, #16
 801078c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	9b07      	ldr	r3, [sp, #28]
 8010794:	eb03 0c0a 	add.w	ip, r3, sl
 8010798:	f1b8 0f00 	cmp.w	r8, #0
 801079c:	d056      	beq.n	801084c <arm_mat_mult_f32+0x128>
 801079e:	9b02      	ldr	r3, [sp, #8]
 80107a0:	4644      	mov	r4, r8
 80107a2:	4602      	mov	r2, r0
 80107a4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010868 <arm_mat_mult_f32+0x144>
 80107a8:	18c1      	adds	r1, r0, r3
 80107aa:	465b      	mov	r3, fp
 80107ac:	edd2 6a00 	vldr	s13, [r2]
 80107b0:	1957      	adds	r7, r2, r5
 80107b2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80107b6:	3c01      	subs	r4, #1
 80107b8:	ed53 5a03 	vldr	s11, [r3, #-12]
 80107bc:	4432      	add	r2, r6
 80107be:	ee27 7a26 	vmul.f32	s14, s14, s13
 80107c2:	ed97 6a00 	vldr	s12, [r7]
 80107c6:	ed53 6a02 	vldr	s13, [r3, #-8]
 80107ca:	eb01 0705 	add.w	r7, r1, r5
 80107ce:	ee26 6a25 	vmul.f32	s12, s12, s11
 80107d2:	ed91 5a00 	vldr	s10, [r1]
 80107d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107da:	edd7 5a00 	vldr	s11, [r7]
 80107de:	ee26 7a85 	vmul.f32	s14, s13, s10
 80107e2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80107e6:	4431      	add	r1, r6
 80107e8:	f103 0310 	add.w	r3, r3, #16
 80107ec:	ee76 7a27 	vadd.f32	s15, s12, s15
 80107f0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80107f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107fc:	d1d6      	bne.n	80107ac <arm_mat_mult_f32+0x88>
 80107fe:	9b03      	ldr	r3, [sp, #12]
 8010800:	9a01      	ldr	r2, [sp, #4]
 8010802:	4418      	add	r0, r3
 8010804:	f1b9 0f00 	cmp.w	r9, #0
 8010808:	d00b      	beq.n	8010822 <arm_mat_mult_f32+0xfe>
 801080a:	464b      	mov	r3, r9
 801080c:	edd0 6a00 	vldr	s13, [r0]
 8010810:	3b01      	subs	r3, #1
 8010812:	ecb2 7a01 	vldmia	r2!, {s14}
 8010816:	4428      	add	r0, r5
 8010818:	ee27 7a26 	vmul.f32	s14, s14, s13
 801081c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010820:	d1f4      	bne.n	801080c <arm_mat_mult_f32+0xe8>
 8010822:	ecec 7a01 	vstmia	ip!, {s15}
 8010826:	45d4      	cmp	ip, sl
 8010828:	4670      	mov	r0, lr
 801082a:	f10e 0e04 	add.w	lr, lr, #4
 801082e:	d1b3      	bne.n	8010798 <arm_mat_mult_f32+0x74>
 8010830:	9a01      	ldr	r2, [sp, #4]
 8010832:	44aa      	add	sl, r5
 8010834:	9b06      	ldr	r3, [sp, #24]
 8010836:	4611      	mov	r1, r2
 8010838:	449b      	add	fp, r3
 801083a:	4419      	add	r1, r3
 801083c:	9b04      	ldr	r3, [sp, #16]
 801083e:	3b01      	subs	r3, #1
 8010840:	9101      	str	r1, [sp, #4]
 8010842:	9304      	str	r3, [sp, #16]
 8010844:	d006      	beq.n	8010854 <arm_mat_mult_f32+0x130>
 8010846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010848:	6858      	ldr	r0, [r3, #4]
 801084a:	e79d      	b.n	8010788 <arm_mat_mult_f32+0x64>
 801084c:	9a05      	ldr	r2, [sp, #20]
 801084e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8010868 <arm_mat_mult_f32+0x144>
 8010852:	e7d7      	b.n	8010804 <arm_mat_mult_f32+0xe0>
 8010854:	4618      	mov	r0, r3
 8010856:	b00b      	add	sp, #44	@ 0x2c
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085c:	f06f 0002 	mvn.w	r0, #2
 8010860:	b00b      	add	sp, #44	@ 0x2c
 8010862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010866:	bf00      	nop
 8010868:	00000000 	.word	0x00000000

0801086c <arm_mat_inverse_f32>:
 801086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010870:	8843      	ldrh	r3, [r0, #2]
 8010872:	b087      	sub	sp, #28
 8010874:	8804      	ldrh	r4, [r0, #0]
 8010876:	684d      	ldr	r5, [r1, #4]
 8010878:	429c      	cmp	r4, r3
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010880:	9503      	str	r5, [sp, #12]
 8010882:	f040 80e2 	bne.w	8010a4a <arm_mat_inverse_f32+0x1de>
 8010886:	880b      	ldrh	r3, [r1, #0]
 8010888:	884a      	ldrh	r2, [r1, #2]
 801088a:	429a      	cmp	r2, r3
 801088c:	f040 80dd 	bne.w	8010a4a <arm_mat_inverse_f32+0x1de>
 8010890:	429c      	cmp	r4, r3
 8010892:	f040 80da 	bne.w	8010a4a <arm_mat_inverse_f32+0x1de>
 8010896:	9005      	str	r0, [sp, #20]
 8010898:	b1fc      	cbz	r4, 80108da <arm_mat_inverse_f32+0x6e>
 801089a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801089e:	1e66      	subs	r6, r4, #1
 80108a0:	f845 bb04 	str.w	fp, [r5], #4
 80108a4:	d019      	beq.n	80108da <arm_mat_inverse_f32+0x6e>
 80108a6:	2701      	movs	r7, #1
 80108a8:	00b2      	lsls	r2, r6, #2
 80108aa:	4628      	mov	r0, r5
 80108ac:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80108b0:	2100      	movs	r1, #0
 80108b2:	eb05 0a02 	add.w	sl, r5, r2
 80108b6:	f001 fc46 	bl	8012146 <memset>
 80108ba:	4642      	mov	r2, r8
 80108bc:	2100      	movs	r1, #0
 80108be:	eb0a 0508 	add.w	r5, sl, r8
 80108c2:	4650      	mov	r0, sl
 80108c4:	2f00      	cmp	r7, #0
 80108c6:	f000 80c5 	beq.w	8010a54 <arm_mat_inverse_f32+0x1e8>
 80108ca:	f001 fc3c 	bl	8012146 <memset>
 80108ce:	3e01      	subs	r6, #1
 80108d0:	f107 0701 	add.w	r7, r7, #1
 80108d4:	f845 bb04 	str.w	fp, [r5], #4
 80108d8:	d1e6      	bne.n	80108a8 <arm_mat_inverse_f32+0x3c>
 80108da:	9b01      	ldr	r3, [sp, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f000 80af 	beq.w	8010a40 <arm_mat_inverse_f32+0x1d4>
 80108e2:	009d      	lsls	r5, r3, #2
 80108e4:	46cc      	mov	ip, r9
 80108e6:	469e      	mov	lr, r3
 80108e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80108ec:	eb0c 0305 	add.w	r3, ip, r5
 80108f0:	462f      	mov	r7, r5
 80108f2:	2600      	movs	r6, #0
 80108f4:	9302      	str	r3, [sp, #8]
 80108f6:	1d2b      	adds	r3, r5, #4
 80108f8:	9304      	str	r3, [sp, #16]
 80108fa:	9b02      	ldr	r3, [sp, #8]
 80108fc:	42b4      	cmp	r4, r6
 80108fe:	eddc 6a00 	vldr	s13, [ip]
 8010902:	eba3 0b07 	sub.w	fp, r3, r7
 8010906:	f000 809b 	beq.w	8010a40 <arm_mat_inverse_f32+0x1d4>
 801090a:	4632      	mov	r2, r6
 801090c:	4663      	mov	r3, ip
 801090e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010a64 <arm_mat_inverse_f32+0x1f8>
 8010912:	e009      	b.n	8010928 <arm_mat_inverse_f32+0xbc>
 8010914:	eef4 7a47 	vcmp.f32	s15, s14
 8010918:	3201      	adds	r2, #1
 801091a:	442b      	add	r3, r5
 801091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010920:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8010924:	42a2      	cmp	r2, r4
 8010926:	d012      	beq.n	801094e <arm_mat_inverse_f32+0xe2>
 8010928:	edd3 7a00 	vldr	s15, [r3]
 801092c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010930:	eeb1 6a67 	vneg.f32	s12, s15
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	dcec      	bgt.n	8010914 <arm_mat_inverse_f32+0xa8>
 801093a:	eeb4 6a47 	vcmp.f32	s12, s14
 801093e:	3201      	adds	r2, #1
 8010940:	442b      	add	r3, r5
 8010942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010946:	fe36 7a07 	vselgt.f32	s14, s12, s14
 801094a:	42a2      	cmp	r2, r4
 801094c:	d1ec      	bne.n	8010928 <arm_mat_inverse_f32+0xbc>
 801094e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010956:	d073      	beq.n	8010a40 <arm_mat_inverse_f32+0x1d4>
 8010958:	eef5 6a40 	vcmp.f32	s13, #0.0
 801095c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010960:	d06e      	beq.n	8010a40 <arm_mat_inverse_f32+0x1d4>
 8010962:	4672      	mov	r2, lr
 8010964:	4663      	mov	r3, ip
 8010966:	ed93 7a00 	vldr	s14, [r3]
 801096a:	3a01      	subs	r2, #1
 801096c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010970:	ece3 7a01 	vstmia	r3!, {s15}
 8010974:	d1f7      	bne.n	8010966 <arm_mat_inverse_f32+0xfa>
 8010976:	9901      	ldr	r1, [sp, #4]
 8010978:	464b      	mov	r3, r9
 801097a:	ed93 7a00 	vldr	s14, [r3]
 801097e:	3901      	subs	r1, #1
 8010980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010984:	ece3 7a01 	vstmia	r3!, {s15}
 8010988:	d1f7      	bne.n	801097a <arm_mat_inverse_f32+0x10e>
 801098a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801098e:	9803      	ldr	r0, [sp, #12]
 8010990:	42b1      	cmp	r1, r6
 8010992:	d038      	beq.n	8010a06 <arm_mat_inverse_f32+0x19a>
 8010994:	eddb 6a00 	vldr	s13, [fp]
 8010998:	465a      	mov	r2, fp
 801099a:	4673      	mov	r3, lr
 801099c:	46e2      	mov	sl, ip
 801099e:	ecba 7a01 	vldmia	sl!, {s14}
 80109a2:	3b01      	subs	r3, #1
 80109a4:	edd2 7a00 	vldr	s15, [r2]
 80109a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80109ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109b0:	ece2 7a01 	vstmia	r2!, {s15}
 80109b4:	d1f3      	bne.n	801099e <arm_mat_inverse_f32+0x132>
 80109b6:	44bb      	add	fp, r7
 80109b8:	4602      	mov	r2, r0
 80109ba:	9b01      	ldr	r3, [sp, #4]
 80109bc:	46ca      	mov	sl, r9
 80109be:	ecba 7a01 	vldmia	sl!, {s14}
 80109c2:	3b01      	subs	r3, #1
 80109c4:	edd2 7a00 	vldr	s15, [r2]
 80109c8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80109cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109d0:	ece2 7a01 	vstmia	r2!, {s15}
 80109d4:	d1f3      	bne.n	80109be <arm_mat_inverse_f32+0x152>
 80109d6:	4428      	add	r0, r5
 80109d8:	3101      	adds	r1, #1
 80109da:	44c3      	add	fp, r8
 80109dc:	428c      	cmp	r4, r1
 80109de:	d1d7      	bne.n	8010990 <arm_mat_inverse_f32+0x124>
 80109e0:	9b04      	ldr	r3, [sp, #16]
 80109e2:	f1be 0e01 	subs.w	lr, lr, #1
 80109e6:	f106 0601 	add.w	r6, r6, #1
 80109ea:	f1a7 0704 	sub.w	r7, r7, #4
 80109ee:	449c      	add	ip, r3
 80109f0:	44a9      	add	r9, r5
 80109f2:	d182      	bne.n	80108fa <arm_mat_inverse_f32+0x8e>
 80109f4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80109f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fc:	d006      	beq.n	8010a0c <arm_mat_inverse_f32+0x1a0>
 80109fe:	2000      	movs	r0, #0
 8010a00:	b007      	add	sp, #28
 8010a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a06:	44bb      	add	fp, r7
 8010a08:	4428      	add	r0, r5
 8010a0a:	e7e5      	b.n	80109d8 <arm_mat_inverse_f32+0x16c>
 8010a0c:	9b05      	ldr	r3, [sp, #20]
 8010a0e:	9a01      	ldr	r2, [sp, #4]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	fb02 f204 	mul.w	r2, r2, r4
 8010a16:	edd3 7a00 	vldr	s15, [r3]
 8010a1a:	4614      	mov	r4, r2
 8010a1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a24:	d1eb      	bne.n	80109fe <arm_mat_inverse_f32+0x192>
 8010a26:	3304      	adds	r3, #4
 8010a28:	e006      	b.n	8010a38 <arm_mat_inverse_f32+0x1cc>
 8010a2a:	ecf3 7a01 	vldmia	r3!, {s15}
 8010a2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a36:	d1e2      	bne.n	80109fe <arm_mat_inverse_f32+0x192>
 8010a38:	f10e 0e01 	add.w	lr, lr, #1
 8010a3c:	4574      	cmp	r4, lr
 8010a3e:	d1f4      	bne.n	8010a2a <arm_mat_inverse_f32+0x1be>
 8010a40:	f06f 0004 	mvn.w	r0, #4
 8010a44:	b007      	add	sp, #28
 8010a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4a:	f06f 0002 	mvn.w	r0, #2
 8010a4e:	b007      	add	sp, #28
 8010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a54:	4655      	mov	r5, sl
 8010a56:	3e01      	subs	r6, #1
 8010a58:	f845 bb04 	str.w	fp, [r5], #4
 8010a5c:	f47f af23 	bne.w	80108a6 <arm_mat_inverse_f32+0x3a>
 8010a60:	e73b      	b.n	80108da <arm_mat_inverse_f32+0x6e>
 8010a62:	bf00      	nop
 8010a64:	00000000 	.word	0x00000000

08010a68 <arm_mat_init_f32>:
 8010a68:	8001      	strh	r1, [r0, #0]
 8010a6a:	8042      	strh	r2, [r0, #2]
 8010a6c:	6043      	str	r3, [r0, #4]
 8010a6e:	4770      	bx	lr

08010a70 <sulp>:
 8010a70:	b570      	push	{r4, r5, r6, lr}
 8010a72:	4604      	mov	r4, r0
 8010a74:	460d      	mov	r5, r1
 8010a76:	4616      	mov	r6, r2
 8010a78:	ec45 4b10 	vmov	d0, r4, r5
 8010a7c:	f003 fa5e 	bl	8013f3c <__ulp>
 8010a80:	b17e      	cbz	r6, 8010aa2 <sulp+0x32>
 8010a82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd09      	ble.n	8010aa2 <sulp+0x32>
 8010a8e:	051b      	lsls	r3, r3, #20
 8010a90:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010a94:	2000      	movs	r0, #0
 8010a96:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8010a9a:	ec41 0b17 	vmov	d7, r0, r1
 8010a9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}
 8010aa4:	0000      	movs	r0, r0
	...

08010aa8 <_strtod_l>:
 8010aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aac:	ed2d 8b0a 	vpush	{d8-d12}
 8010ab0:	b097      	sub	sp, #92	@ 0x5c
 8010ab2:	4688      	mov	r8, r1
 8010ab4:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	9212      	str	r2, [sp, #72]	@ 0x48
 8010aba:	9005      	str	r0, [sp, #20]
 8010abc:	f04f 0a00 	mov.w	sl, #0
 8010ac0:	f04f 0b00 	mov.w	fp, #0
 8010ac4:	460a      	mov	r2, r1
 8010ac6:	9211      	str	r2, [sp, #68]	@ 0x44
 8010ac8:	7811      	ldrb	r1, [r2, #0]
 8010aca:	292b      	cmp	r1, #43	@ 0x2b
 8010acc:	d04c      	beq.n	8010b68 <_strtod_l+0xc0>
 8010ace:	d839      	bhi.n	8010b44 <_strtod_l+0x9c>
 8010ad0:	290d      	cmp	r1, #13
 8010ad2:	d833      	bhi.n	8010b3c <_strtod_l+0x94>
 8010ad4:	2908      	cmp	r1, #8
 8010ad6:	d833      	bhi.n	8010b40 <_strtod_l+0x98>
 8010ad8:	2900      	cmp	r1, #0
 8010ada:	d03c      	beq.n	8010b56 <_strtod_l+0xae>
 8010adc:	2200      	movs	r2, #0
 8010ade:	9208      	str	r2, [sp, #32]
 8010ae0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8010ae2:	782a      	ldrb	r2, [r5, #0]
 8010ae4:	2a30      	cmp	r2, #48	@ 0x30
 8010ae6:	f040 80b7 	bne.w	8010c58 <_strtod_l+0x1b0>
 8010aea:	786a      	ldrb	r2, [r5, #1]
 8010aec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010af0:	2a58      	cmp	r2, #88	@ 0x58
 8010af2:	d170      	bne.n	8010bd6 <_strtod_l+0x12e>
 8010af4:	9302      	str	r3, [sp, #8]
 8010af6:	9b08      	ldr	r3, [sp, #32]
 8010af8:	9301      	str	r3, [sp, #4]
 8010afa:	ab12      	add	r3, sp, #72	@ 0x48
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	4a90      	ldr	r2, [pc, #576]	@ (8010d40 <_strtod_l+0x298>)
 8010b00:	9805      	ldr	r0, [sp, #20]
 8010b02:	ab13      	add	r3, sp, #76	@ 0x4c
 8010b04:	a911      	add	r1, sp, #68	@ 0x44
 8010b06:	f002 fb13 	bl	8013130 <__gethex>
 8010b0a:	f010 060f 	ands.w	r6, r0, #15
 8010b0e:	4604      	mov	r4, r0
 8010b10:	d005      	beq.n	8010b1e <_strtod_l+0x76>
 8010b12:	2e06      	cmp	r6, #6
 8010b14:	d12a      	bne.n	8010b6c <_strtod_l+0xc4>
 8010b16:	3501      	adds	r5, #1
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9511      	str	r5, [sp, #68]	@ 0x44
 8010b1c:	9308      	str	r3, [sp, #32]
 8010b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f040 8537 	bne.w	8011594 <_strtod_l+0xaec>
 8010b26:	9b08      	ldr	r3, [sp, #32]
 8010b28:	ec4b ab10 	vmov	d0, sl, fp
 8010b2c:	b1cb      	cbz	r3, 8010b62 <_strtod_l+0xba>
 8010b2e:	eeb1 0b40 	vneg.f64	d0, d0
 8010b32:	b017      	add	sp, #92	@ 0x5c
 8010b34:	ecbd 8b0a 	vpop	{d8-d12}
 8010b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3c:	2920      	cmp	r1, #32
 8010b3e:	d1cd      	bne.n	8010adc <_strtod_l+0x34>
 8010b40:	3201      	adds	r2, #1
 8010b42:	e7c0      	b.n	8010ac6 <_strtod_l+0x1e>
 8010b44:	292d      	cmp	r1, #45	@ 0x2d
 8010b46:	d1c9      	bne.n	8010adc <_strtod_l+0x34>
 8010b48:	2101      	movs	r1, #1
 8010b4a:	9108      	str	r1, [sp, #32]
 8010b4c:	1c51      	adds	r1, r2, #1
 8010b4e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010b50:	7852      	ldrb	r2, [r2, #1]
 8010b52:	2a00      	cmp	r2, #0
 8010b54:	d1c4      	bne.n	8010ae0 <_strtod_l+0x38>
 8010b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f040 8517 	bne.w	8011590 <_strtod_l+0xae8>
 8010b62:	ec4b ab10 	vmov	d0, sl, fp
 8010b66:	e7e4      	b.n	8010b32 <_strtod_l+0x8a>
 8010b68:	2100      	movs	r1, #0
 8010b6a:	e7ee      	b.n	8010b4a <_strtod_l+0xa2>
 8010b6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010b6e:	b13a      	cbz	r2, 8010b80 <_strtod_l+0xd8>
 8010b70:	2135      	movs	r1, #53	@ 0x35
 8010b72:	a814      	add	r0, sp, #80	@ 0x50
 8010b74:	f003 fad9 	bl	801412a <__copybits>
 8010b78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010b7a:	9805      	ldr	r0, [sp, #20]
 8010b7c:	f002 feb2 	bl	80138e4 <_Bfree>
 8010b80:	1e73      	subs	r3, r6, #1
 8010b82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b84:	2b04      	cmp	r3, #4
 8010b86:	d806      	bhi.n	8010b96 <_strtod_l+0xee>
 8010b88:	e8df f003 	tbb	[pc, r3]
 8010b8c:	201d0314 	.word	0x201d0314
 8010b90:	14          	.byte	0x14
 8010b91:	00          	.byte	0x00
 8010b92:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8010b96:	05e3      	lsls	r3, r4, #23
 8010b98:	bf48      	it	mi
 8010b9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ba2:	0d1b      	lsrs	r3, r3, #20
 8010ba4:	051b      	lsls	r3, r3, #20
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1b9      	bne.n	8010b1e <_strtod_l+0x76>
 8010baa:	f001 fbdd 	bl	8012368 <__errno>
 8010bae:	2322      	movs	r3, #34	@ 0x22
 8010bb0:	6003      	str	r3, [r0, #0]
 8010bb2:	e7b4      	b.n	8010b1e <_strtod_l+0x76>
 8010bb4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010bb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010bbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010bc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010bc4:	e7e7      	b.n	8010b96 <_strtod_l+0xee>
 8010bc6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010d48 <_strtod_l+0x2a0>
 8010bca:	e7e4      	b.n	8010b96 <_strtod_l+0xee>
 8010bcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8010bd4:	e7df      	b.n	8010b96 <_strtod_l+0xee>
 8010bd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	9211      	str	r2, [sp, #68]	@ 0x44
 8010bdc:	785b      	ldrb	r3, [r3, #1]
 8010bde:	2b30      	cmp	r3, #48	@ 0x30
 8010be0:	d0f9      	beq.n	8010bd6 <_strtod_l+0x12e>
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d09b      	beq.n	8010b1e <_strtod_l+0x76>
 8010be6:	2301      	movs	r3, #1
 8010be8:	9307      	str	r3, [sp, #28]
 8010bea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bee:	2300      	movs	r3, #0
 8010bf0:	9306      	str	r3, [sp, #24]
 8010bf2:	4699      	mov	r9, r3
 8010bf4:	461d      	mov	r5, r3
 8010bf6:	220a      	movs	r2, #10
 8010bf8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010bfa:	7804      	ldrb	r4, [r0, #0]
 8010bfc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010c00:	b2d9      	uxtb	r1, r3
 8010c02:	2909      	cmp	r1, #9
 8010c04:	d92a      	bls.n	8010c5c <_strtod_l+0x1b4>
 8010c06:	494f      	ldr	r1, [pc, #316]	@ (8010d44 <_strtod_l+0x29c>)
 8010c08:	2201      	movs	r2, #1
 8010c0a:	f001 fab1 	bl	8012170 <strncmp>
 8010c0e:	b398      	cbz	r0, 8010c78 <_strtod_l+0x1d0>
 8010c10:	2000      	movs	r0, #0
 8010c12:	4622      	mov	r2, r4
 8010c14:	462b      	mov	r3, r5
 8010c16:	4607      	mov	r7, r0
 8010c18:	4601      	mov	r1, r0
 8010c1a:	2a65      	cmp	r2, #101	@ 0x65
 8010c1c:	d001      	beq.n	8010c22 <_strtod_l+0x17a>
 8010c1e:	2a45      	cmp	r2, #69	@ 0x45
 8010c20:	d118      	bne.n	8010c54 <_strtod_l+0x1ac>
 8010c22:	b91b      	cbnz	r3, 8010c2c <_strtod_l+0x184>
 8010c24:	9b07      	ldr	r3, [sp, #28]
 8010c26:	4303      	orrs	r3, r0
 8010c28:	d095      	beq.n	8010b56 <_strtod_l+0xae>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010c30:	f108 0201 	add.w	r2, r8, #1
 8010c34:	9211      	str	r2, [sp, #68]	@ 0x44
 8010c36:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010c3a:	2a2b      	cmp	r2, #43	@ 0x2b
 8010c3c:	d074      	beq.n	8010d28 <_strtod_l+0x280>
 8010c3e:	2a2d      	cmp	r2, #45	@ 0x2d
 8010c40:	d07a      	beq.n	8010d38 <_strtod_l+0x290>
 8010c42:	f04f 0e00 	mov.w	lr, #0
 8010c46:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010c4a:	2c09      	cmp	r4, #9
 8010c4c:	f240 8082 	bls.w	8010d54 <_strtod_l+0x2ac>
 8010c50:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010c54:	2400      	movs	r4, #0
 8010c56:	e09d      	b.n	8010d94 <_strtod_l+0x2ec>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e7c5      	b.n	8010be8 <_strtod_l+0x140>
 8010c5c:	2d08      	cmp	r5, #8
 8010c5e:	bfc8      	it	gt
 8010c60:	9906      	ldrgt	r1, [sp, #24]
 8010c62:	f100 0001 	add.w	r0, r0, #1
 8010c66:	bfca      	itet	gt
 8010c68:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010c6c:	fb02 3909 	mlale	r9, r2, r9, r3
 8010c70:	9306      	strgt	r3, [sp, #24]
 8010c72:	3501      	adds	r5, #1
 8010c74:	9011      	str	r0, [sp, #68]	@ 0x44
 8010c76:	e7bf      	b.n	8010bf8 <_strtod_l+0x150>
 8010c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c7a:	1c5a      	adds	r2, r3, #1
 8010c7c:	9211      	str	r2, [sp, #68]	@ 0x44
 8010c7e:	785a      	ldrb	r2, [r3, #1]
 8010c80:	b3bd      	cbz	r5, 8010cf2 <_strtod_l+0x24a>
 8010c82:	4607      	mov	r7, r0
 8010c84:	462b      	mov	r3, r5
 8010c86:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010c8a:	2909      	cmp	r1, #9
 8010c8c:	d912      	bls.n	8010cb4 <_strtod_l+0x20c>
 8010c8e:	2101      	movs	r1, #1
 8010c90:	e7c3      	b.n	8010c1a <_strtod_l+0x172>
 8010c92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	9211      	str	r2, [sp, #68]	@ 0x44
 8010c98:	785a      	ldrb	r2, [r3, #1]
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	2a30      	cmp	r2, #48	@ 0x30
 8010c9e:	d0f8      	beq.n	8010c92 <_strtod_l+0x1ea>
 8010ca0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010ca4:	2b08      	cmp	r3, #8
 8010ca6:	f200 847a 	bhi.w	801159e <_strtod_l+0xaf6>
 8010caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cae:	4607      	mov	r7, r0
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	3a30      	subs	r2, #48	@ 0x30
 8010cb6:	f100 0101 	add.w	r1, r0, #1
 8010cba:	d014      	beq.n	8010ce6 <_strtod_l+0x23e>
 8010cbc:	440f      	add	r7, r1
 8010cbe:	469c      	mov	ip, r3
 8010cc0:	f04f 0e0a 	mov.w	lr, #10
 8010cc4:	f10c 0401 	add.w	r4, ip, #1
 8010cc8:	1ae6      	subs	r6, r4, r3
 8010cca:	42b1      	cmp	r1, r6
 8010ccc:	dc13      	bgt.n	8010cf6 <_strtod_l+0x24e>
 8010cce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010cd2:	1819      	adds	r1, r3, r0
 8010cd4:	2908      	cmp	r1, #8
 8010cd6:	f103 0301 	add.w	r3, r3, #1
 8010cda:	4403      	add	r3, r0
 8010cdc:	dc19      	bgt.n	8010d12 <_strtod_l+0x26a>
 8010cde:	210a      	movs	r1, #10
 8010ce0:	fb01 2909 	mla	r9, r1, r9, r2
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ce8:	1c50      	adds	r0, r2, #1
 8010cea:	9011      	str	r0, [sp, #68]	@ 0x44
 8010cec:	7852      	ldrb	r2, [r2, #1]
 8010cee:	4608      	mov	r0, r1
 8010cf0:	e7c9      	b.n	8010c86 <_strtod_l+0x1de>
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	e7d2      	b.n	8010c9c <_strtod_l+0x1f4>
 8010cf6:	f1bc 0f08 	cmp.w	ip, #8
 8010cfa:	dc03      	bgt.n	8010d04 <_strtod_l+0x25c>
 8010cfc:	fb0e f909 	mul.w	r9, lr, r9
 8010d00:	46a4      	mov	ip, r4
 8010d02:	e7df      	b.n	8010cc4 <_strtod_l+0x21c>
 8010d04:	2c10      	cmp	r4, #16
 8010d06:	bfde      	ittt	le
 8010d08:	9e06      	ldrle	r6, [sp, #24]
 8010d0a:	fb0e f606 	mulle.w	r6, lr, r6
 8010d0e:	9606      	strle	r6, [sp, #24]
 8010d10:	e7f6      	b.n	8010d00 <_strtod_l+0x258>
 8010d12:	290f      	cmp	r1, #15
 8010d14:	bfdf      	itttt	le
 8010d16:	9806      	ldrle	r0, [sp, #24]
 8010d18:	210a      	movle	r1, #10
 8010d1a:	fb01 2200 	mlale	r2, r1, r0, r2
 8010d1e:	9206      	strle	r2, [sp, #24]
 8010d20:	e7e0      	b.n	8010ce4 <_strtod_l+0x23c>
 8010d22:	2700      	movs	r7, #0
 8010d24:	2101      	movs	r1, #1
 8010d26:	e77d      	b.n	8010c24 <_strtod_l+0x17c>
 8010d28:	f04f 0e00 	mov.w	lr, #0
 8010d2c:	f108 0202 	add.w	r2, r8, #2
 8010d30:	9211      	str	r2, [sp, #68]	@ 0x44
 8010d32:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010d36:	e786      	b.n	8010c46 <_strtod_l+0x19e>
 8010d38:	f04f 0e01 	mov.w	lr, #1
 8010d3c:	e7f6      	b.n	8010d2c <_strtod_l+0x284>
 8010d3e:	bf00      	nop
 8010d40:	08015288 	.word	0x08015288
 8010d44:	080150a0 	.word	0x080150a0
 8010d48:	7ff00000 	.word	0x7ff00000
 8010d4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d4e:	1c54      	adds	r4, r2, #1
 8010d50:	9411      	str	r4, [sp, #68]	@ 0x44
 8010d52:	7852      	ldrb	r2, [r2, #1]
 8010d54:	2a30      	cmp	r2, #48	@ 0x30
 8010d56:	d0f9      	beq.n	8010d4c <_strtod_l+0x2a4>
 8010d58:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010d5c:	2c08      	cmp	r4, #8
 8010d5e:	f63f af79 	bhi.w	8010c54 <_strtod_l+0x1ac>
 8010d62:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010d66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d6c:	1c54      	adds	r4, r2, #1
 8010d6e:	9411      	str	r4, [sp, #68]	@ 0x44
 8010d70:	7852      	ldrb	r2, [r2, #1]
 8010d72:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8010d76:	2e09      	cmp	r6, #9
 8010d78:	d937      	bls.n	8010dea <_strtod_l+0x342>
 8010d7a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010d7c:	1ba4      	subs	r4, r4, r6
 8010d7e:	2c08      	cmp	r4, #8
 8010d80:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010d84:	dc02      	bgt.n	8010d8c <_strtod_l+0x2e4>
 8010d86:	4564      	cmp	r4, ip
 8010d88:	bfa8      	it	ge
 8010d8a:	4664      	movge	r4, ip
 8010d8c:	f1be 0f00 	cmp.w	lr, #0
 8010d90:	d000      	beq.n	8010d94 <_strtod_l+0x2ec>
 8010d92:	4264      	negs	r4, r4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d14d      	bne.n	8010e34 <_strtod_l+0x38c>
 8010d98:	9b07      	ldr	r3, [sp, #28]
 8010d9a:	4318      	orrs	r0, r3
 8010d9c:	f47f aebf 	bne.w	8010b1e <_strtod_l+0x76>
 8010da0:	2900      	cmp	r1, #0
 8010da2:	f47f aed8 	bne.w	8010b56 <_strtod_l+0xae>
 8010da6:	2a69      	cmp	r2, #105	@ 0x69
 8010da8:	d027      	beq.n	8010dfa <_strtod_l+0x352>
 8010daa:	dc24      	bgt.n	8010df6 <_strtod_l+0x34e>
 8010dac:	2a49      	cmp	r2, #73	@ 0x49
 8010dae:	d024      	beq.n	8010dfa <_strtod_l+0x352>
 8010db0:	2a4e      	cmp	r2, #78	@ 0x4e
 8010db2:	f47f aed0 	bne.w	8010b56 <_strtod_l+0xae>
 8010db6:	4997      	ldr	r1, [pc, #604]	@ (8011014 <_strtod_l+0x56c>)
 8010db8:	a811      	add	r0, sp, #68	@ 0x44
 8010dba:	f002 fbdb 	bl	8013574 <__match>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f aec9 	beq.w	8010b56 <_strtod_l+0xae>
 8010dc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	2b28      	cmp	r3, #40	@ 0x28
 8010dca:	d12d      	bne.n	8010e28 <_strtod_l+0x380>
 8010dcc:	4992      	ldr	r1, [pc, #584]	@ (8011018 <_strtod_l+0x570>)
 8010dce:	aa14      	add	r2, sp, #80	@ 0x50
 8010dd0:	a811      	add	r0, sp, #68	@ 0x44
 8010dd2:	f002 fbe3 	bl	801359c <__hexnan>
 8010dd6:	2805      	cmp	r0, #5
 8010dd8:	d126      	bne.n	8010e28 <_strtod_l+0x380>
 8010dda:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010ddc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010de0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010de4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010de8:	e699      	b.n	8010b1e <_strtod_l+0x76>
 8010dea:	240a      	movs	r4, #10
 8010dec:	fb04 2c0c 	mla	ip, r4, ip, r2
 8010df0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010df4:	e7b9      	b.n	8010d6a <_strtod_l+0x2c2>
 8010df6:	2a6e      	cmp	r2, #110	@ 0x6e
 8010df8:	e7db      	b.n	8010db2 <_strtod_l+0x30a>
 8010dfa:	4988      	ldr	r1, [pc, #544]	@ (801101c <_strtod_l+0x574>)
 8010dfc:	a811      	add	r0, sp, #68	@ 0x44
 8010dfe:	f002 fbb9 	bl	8013574 <__match>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	f43f aea7 	beq.w	8010b56 <_strtod_l+0xae>
 8010e08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e0a:	4985      	ldr	r1, [pc, #532]	@ (8011020 <_strtod_l+0x578>)
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	a811      	add	r0, sp, #68	@ 0x44
 8010e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e12:	f002 fbaf 	bl	8013574 <__match>
 8010e16:	b910      	cbnz	r0, 8010e1e <_strtod_l+0x376>
 8010e18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e1e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8011034 <_strtod_l+0x58c>
 8010e22:	f04f 0a00 	mov.w	sl, #0
 8010e26:	e67a      	b.n	8010b1e <_strtod_l+0x76>
 8010e28:	487e      	ldr	r0, [pc, #504]	@ (8011024 <_strtod_l+0x57c>)
 8010e2a:	f001 fad9 	bl	80123e0 <nan>
 8010e2e:	ec5b ab10 	vmov	sl, fp, d0
 8010e32:	e674      	b.n	8010b1e <_strtod_l+0x76>
 8010e34:	ee07 9a90 	vmov	s15, r9
 8010e38:	1be2      	subs	r2, r4, r7
 8010e3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010e3e:	2d00      	cmp	r5, #0
 8010e40:	bf08      	it	eq
 8010e42:	461d      	moveq	r5, r3
 8010e44:	2b10      	cmp	r3, #16
 8010e46:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e48:	461a      	mov	r2, r3
 8010e4a:	bfa8      	it	ge
 8010e4c:	2210      	movge	r2, #16
 8010e4e:	2b09      	cmp	r3, #9
 8010e50:	ec5b ab17 	vmov	sl, fp, d7
 8010e54:	dc15      	bgt.n	8010e82 <_strtod_l+0x3da>
 8010e56:	1be1      	subs	r1, r4, r7
 8010e58:	2900      	cmp	r1, #0
 8010e5a:	f43f ae60 	beq.w	8010b1e <_strtod_l+0x76>
 8010e5e:	eba4 0107 	sub.w	r1, r4, r7
 8010e62:	dd72      	ble.n	8010f4a <_strtod_l+0x4a2>
 8010e64:	2916      	cmp	r1, #22
 8010e66:	dc59      	bgt.n	8010f1c <_strtod_l+0x474>
 8010e68:	4b6f      	ldr	r3, [pc, #444]	@ (8011028 <_strtod_l+0x580>)
 8010e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e70:	ed93 7b00 	vldr	d7, [r3]
 8010e74:	ec4b ab16 	vmov	d6, sl, fp
 8010e78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e7c:	ec5b ab17 	vmov	sl, fp, d7
 8010e80:	e64d      	b.n	8010b1e <_strtod_l+0x76>
 8010e82:	4969      	ldr	r1, [pc, #420]	@ (8011028 <_strtod_l+0x580>)
 8010e84:	eddd 6a06 	vldr	s13, [sp, #24]
 8010e88:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010e8c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010e90:	2b0f      	cmp	r3, #15
 8010e92:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010e96:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010e9a:	ec5b ab16 	vmov	sl, fp, d6
 8010e9e:	ddda      	ble.n	8010e56 <_strtod_l+0x3ae>
 8010ea0:	1a9a      	subs	r2, r3, r2
 8010ea2:	1be1      	subs	r1, r4, r7
 8010ea4:	440a      	add	r2, r1
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	f340 8094 	ble.w	8010fd4 <_strtod_l+0x52c>
 8010eac:	f012 000f 	ands.w	r0, r2, #15
 8010eb0:	d00a      	beq.n	8010ec8 <_strtod_l+0x420>
 8010eb2:	495d      	ldr	r1, [pc, #372]	@ (8011028 <_strtod_l+0x580>)
 8010eb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010eb8:	ed91 7b00 	vldr	d7, [r1]
 8010ebc:	ec4b ab16 	vmov	d6, sl, fp
 8010ec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ec4:	ec5b ab17 	vmov	sl, fp, d7
 8010ec8:	f032 020f 	bics.w	r2, r2, #15
 8010ecc:	d073      	beq.n	8010fb6 <_strtod_l+0x50e>
 8010ece:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010ed2:	dd47      	ble.n	8010f64 <_strtod_l+0x4bc>
 8010ed4:	2400      	movs	r4, #0
 8010ed6:	4625      	mov	r5, r4
 8010ed8:	9407      	str	r4, [sp, #28]
 8010eda:	4626      	mov	r6, r4
 8010edc:	9a05      	ldr	r2, [sp, #20]
 8010ede:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011034 <_strtod_l+0x58c>
 8010ee2:	2322      	movs	r3, #34	@ 0x22
 8010ee4:	6013      	str	r3, [r2, #0]
 8010ee6:	f04f 0a00 	mov.w	sl, #0
 8010eea:	9b07      	ldr	r3, [sp, #28]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f43f ae16 	beq.w	8010b1e <_strtod_l+0x76>
 8010ef2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010ef4:	9805      	ldr	r0, [sp, #20]
 8010ef6:	f002 fcf5 	bl	80138e4 <_Bfree>
 8010efa:	9805      	ldr	r0, [sp, #20]
 8010efc:	4631      	mov	r1, r6
 8010efe:	f002 fcf1 	bl	80138e4 <_Bfree>
 8010f02:	9805      	ldr	r0, [sp, #20]
 8010f04:	4629      	mov	r1, r5
 8010f06:	f002 fced 	bl	80138e4 <_Bfree>
 8010f0a:	9907      	ldr	r1, [sp, #28]
 8010f0c:	9805      	ldr	r0, [sp, #20]
 8010f0e:	f002 fce9 	bl	80138e4 <_Bfree>
 8010f12:	9805      	ldr	r0, [sp, #20]
 8010f14:	4621      	mov	r1, r4
 8010f16:	f002 fce5 	bl	80138e4 <_Bfree>
 8010f1a:	e600      	b.n	8010b1e <_strtod_l+0x76>
 8010f1c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010f20:	1be0      	subs	r0, r4, r7
 8010f22:	4281      	cmp	r1, r0
 8010f24:	dbbc      	blt.n	8010ea0 <_strtod_l+0x3f8>
 8010f26:	4a40      	ldr	r2, [pc, #256]	@ (8011028 <_strtod_l+0x580>)
 8010f28:	f1c3 030f 	rsb	r3, r3, #15
 8010f2c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010f30:	ed91 7b00 	vldr	d7, [r1]
 8010f34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f36:	ec4b ab16 	vmov	d6, sl, fp
 8010f3a:	1acb      	subs	r3, r1, r3
 8010f3c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010f40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f44:	ed92 6b00 	vldr	d6, [r2]
 8010f48:	e796      	b.n	8010e78 <_strtod_l+0x3d0>
 8010f4a:	3116      	adds	r1, #22
 8010f4c:	dba8      	blt.n	8010ea0 <_strtod_l+0x3f8>
 8010f4e:	4b36      	ldr	r3, [pc, #216]	@ (8011028 <_strtod_l+0x580>)
 8010f50:	1b3c      	subs	r4, r7, r4
 8010f52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010f56:	ed94 7b00 	vldr	d7, [r4]
 8010f5a:	ec4b ab16 	vmov	d6, sl, fp
 8010f5e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010f62:	e78b      	b.n	8010e7c <_strtod_l+0x3d4>
 8010f64:	2000      	movs	r0, #0
 8010f66:	ec4b ab17 	vmov	d7, sl, fp
 8010f6a:	4e30      	ldr	r6, [pc, #192]	@ (801102c <_strtod_l+0x584>)
 8010f6c:	1112      	asrs	r2, r2, #4
 8010f6e:	4601      	mov	r1, r0
 8010f70:	2a01      	cmp	r2, #1
 8010f72:	dc23      	bgt.n	8010fbc <_strtod_l+0x514>
 8010f74:	b108      	cbz	r0, 8010f7a <_strtod_l+0x4d2>
 8010f76:	ec5b ab17 	vmov	sl, fp, d7
 8010f7a:	4a2c      	ldr	r2, [pc, #176]	@ (801102c <_strtod_l+0x584>)
 8010f7c:	482c      	ldr	r0, [pc, #176]	@ (8011030 <_strtod_l+0x588>)
 8010f7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010f82:	ed92 7b00 	vldr	d7, [r2]
 8010f86:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010f8a:	ec4b ab16 	vmov	d6, sl, fp
 8010f8e:	4a29      	ldr	r2, [pc, #164]	@ (8011034 <_strtod_l+0x58c>)
 8010f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f94:	ee17 1a90 	vmov	r1, s15
 8010f98:	400a      	ands	r2, r1
 8010f9a:	4282      	cmp	r2, r0
 8010f9c:	ec5b ab17 	vmov	sl, fp, d7
 8010fa0:	d898      	bhi.n	8010ed4 <_strtod_l+0x42c>
 8010fa2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010fa6:	4282      	cmp	r2, r0
 8010fa8:	bf86      	itte	hi
 8010faa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011038 <_strtod_l+0x590>
 8010fae:	f04f 3aff 	movhi.w	sl, #4294967295
 8010fb2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	9206      	str	r2, [sp, #24]
 8010fba:	e076      	b.n	80110aa <_strtod_l+0x602>
 8010fbc:	f012 0f01 	tst.w	r2, #1
 8010fc0:	d004      	beq.n	8010fcc <_strtod_l+0x524>
 8010fc2:	ed96 6b00 	vldr	d6, [r6]
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fcc:	3101      	adds	r1, #1
 8010fce:	1052      	asrs	r2, r2, #1
 8010fd0:	3608      	adds	r6, #8
 8010fd2:	e7cd      	b.n	8010f70 <_strtod_l+0x4c8>
 8010fd4:	d0ef      	beq.n	8010fb6 <_strtod_l+0x50e>
 8010fd6:	4252      	negs	r2, r2
 8010fd8:	f012 000f 	ands.w	r0, r2, #15
 8010fdc:	d00a      	beq.n	8010ff4 <_strtod_l+0x54c>
 8010fde:	4912      	ldr	r1, [pc, #72]	@ (8011028 <_strtod_l+0x580>)
 8010fe0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010fe4:	ed91 7b00 	vldr	d7, [r1]
 8010fe8:	ec4b ab16 	vmov	d6, sl, fp
 8010fec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010ff0:	ec5b ab17 	vmov	sl, fp, d7
 8010ff4:	1112      	asrs	r2, r2, #4
 8010ff6:	d0de      	beq.n	8010fb6 <_strtod_l+0x50e>
 8010ff8:	2a1f      	cmp	r2, #31
 8010ffa:	dd1f      	ble.n	801103c <_strtod_l+0x594>
 8010ffc:	2400      	movs	r4, #0
 8010ffe:	4625      	mov	r5, r4
 8011000:	9407      	str	r4, [sp, #28]
 8011002:	4626      	mov	r6, r4
 8011004:	9a05      	ldr	r2, [sp, #20]
 8011006:	2322      	movs	r3, #34	@ 0x22
 8011008:	f04f 0a00 	mov.w	sl, #0
 801100c:	f04f 0b00 	mov.w	fp, #0
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	e76a      	b.n	8010eea <_strtod_l+0x442>
 8011014:	080150af 	.word	0x080150af
 8011018:	08015274 	.word	0x08015274
 801101c:	080150a7 	.word	0x080150a7
 8011020:	080150e1 	.word	0x080150e1
 8011024:	08015270 	.word	0x08015270
 8011028:	08015300 	.word	0x08015300
 801102c:	080152d8 	.word	0x080152d8
 8011030:	7ca00000 	.word	0x7ca00000
 8011034:	7ff00000 	.word	0x7ff00000
 8011038:	7fefffff 	.word	0x7fefffff
 801103c:	f012 0110 	ands.w	r1, r2, #16
 8011040:	bf18      	it	ne
 8011042:	216a      	movne	r1, #106	@ 0x6a
 8011044:	9106      	str	r1, [sp, #24]
 8011046:	ec4b ab17 	vmov	d7, sl, fp
 801104a:	49af      	ldr	r1, [pc, #700]	@ (8011308 <_strtod_l+0x860>)
 801104c:	2000      	movs	r0, #0
 801104e:	07d6      	lsls	r6, r2, #31
 8011050:	d504      	bpl.n	801105c <_strtod_l+0x5b4>
 8011052:	ed91 6b00 	vldr	d6, [r1]
 8011056:	2001      	movs	r0, #1
 8011058:	ee27 7b06 	vmul.f64	d7, d7, d6
 801105c:	1052      	asrs	r2, r2, #1
 801105e:	f101 0108 	add.w	r1, r1, #8
 8011062:	d1f4      	bne.n	801104e <_strtod_l+0x5a6>
 8011064:	b108      	cbz	r0, 801106a <_strtod_l+0x5c2>
 8011066:	ec5b ab17 	vmov	sl, fp, d7
 801106a:	9a06      	ldr	r2, [sp, #24]
 801106c:	b1b2      	cbz	r2, 801109c <_strtod_l+0x5f4>
 801106e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8011072:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8011076:	2a00      	cmp	r2, #0
 8011078:	4658      	mov	r0, fp
 801107a:	dd0f      	ble.n	801109c <_strtod_l+0x5f4>
 801107c:	2a1f      	cmp	r2, #31
 801107e:	dd55      	ble.n	801112c <_strtod_l+0x684>
 8011080:	2a34      	cmp	r2, #52	@ 0x34
 8011082:	bfde      	ittt	le
 8011084:	f04f 32ff 	movle.w	r2, #4294967295
 8011088:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801108c:	408a      	lslle	r2, r1
 801108e:	f04f 0a00 	mov.w	sl, #0
 8011092:	bfcc      	ite	gt
 8011094:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011098:	ea02 0b00 	andle.w	fp, r2, r0
 801109c:	ec4b ab17 	vmov	d7, sl, fp
 80110a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a8:	d0a8      	beq.n	8010ffc <_strtod_l+0x554>
 80110aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110ac:	9805      	ldr	r0, [sp, #20]
 80110ae:	f8cd 9000 	str.w	r9, [sp]
 80110b2:	462a      	mov	r2, r5
 80110b4:	f002 fc7e 	bl	80139b4 <__s2b>
 80110b8:	9007      	str	r0, [sp, #28]
 80110ba:	2800      	cmp	r0, #0
 80110bc:	f43f af0a 	beq.w	8010ed4 <_strtod_l+0x42c>
 80110c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110c2:	1b3f      	subs	r7, r7, r4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	bfb4      	ite	lt
 80110c8:	463b      	movlt	r3, r7
 80110ca:	2300      	movge	r3, #0
 80110cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80110ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110d0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80112f8 <_strtod_l+0x850>
 80110d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80110d8:	2400      	movs	r4, #0
 80110da:	930d      	str	r3, [sp, #52]	@ 0x34
 80110dc:	4625      	mov	r5, r4
 80110de:	9b07      	ldr	r3, [sp, #28]
 80110e0:	9805      	ldr	r0, [sp, #20]
 80110e2:	6859      	ldr	r1, [r3, #4]
 80110e4:	f002 fbbe 	bl	8013864 <_Balloc>
 80110e8:	4606      	mov	r6, r0
 80110ea:	2800      	cmp	r0, #0
 80110ec:	f43f aef6 	beq.w	8010edc <_strtod_l+0x434>
 80110f0:	9b07      	ldr	r3, [sp, #28]
 80110f2:	691a      	ldr	r2, [r3, #16]
 80110f4:	ec4b ab19 	vmov	d9, sl, fp
 80110f8:	3202      	adds	r2, #2
 80110fa:	f103 010c 	add.w	r1, r3, #12
 80110fe:	0092      	lsls	r2, r2, #2
 8011100:	300c      	adds	r0, #12
 8011102:	f001 f95e 	bl	80123c2 <memcpy>
 8011106:	eeb0 0b49 	vmov.f64	d0, d9
 801110a:	9805      	ldr	r0, [sp, #20]
 801110c:	aa14      	add	r2, sp, #80	@ 0x50
 801110e:	a913      	add	r1, sp, #76	@ 0x4c
 8011110:	f002 ff84 	bl	801401c <__d2b>
 8011114:	9012      	str	r0, [sp, #72]	@ 0x48
 8011116:	2800      	cmp	r0, #0
 8011118:	f43f aee0 	beq.w	8010edc <_strtod_l+0x434>
 801111c:	9805      	ldr	r0, [sp, #20]
 801111e:	2101      	movs	r1, #1
 8011120:	f002 fcde 	bl	8013ae0 <__i2b>
 8011124:	4605      	mov	r5, r0
 8011126:	b940      	cbnz	r0, 801113a <_strtod_l+0x692>
 8011128:	2500      	movs	r5, #0
 801112a:	e6d7      	b.n	8010edc <_strtod_l+0x434>
 801112c:	f04f 31ff 	mov.w	r1, #4294967295
 8011130:	fa01 f202 	lsl.w	r2, r1, r2
 8011134:	ea02 0a0a 	and.w	sl, r2, sl
 8011138:	e7b0      	b.n	801109c <_strtod_l+0x5f4>
 801113a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801113c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801113e:	2f00      	cmp	r7, #0
 8011140:	bfab      	itete	ge
 8011142:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8011144:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8011146:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801114a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801114e:	bfac      	ite	ge
 8011150:	eb07 0903 	addge.w	r9, r7, r3
 8011154:	eba3 0807 	sublt.w	r8, r3, r7
 8011158:	9b06      	ldr	r3, [sp, #24]
 801115a:	1aff      	subs	r7, r7, r3
 801115c:	4417      	add	r7, r2
 801115e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8011162:	4a6a      	ldr	r2, [pc, #424]	@ (801130c <_strtod_l+0x864>)
 8011164:	3f01      	subs	r7, #1
 8011166:	4297      	cmp	r7, r2
 8011168:	da51      	bge.n	801120e <_strtod_l+0x766>
 801116a:	1bd1      	subs	r1, r2, r7
 801116c:	291f      	cmp	r1, #31
 801116e:	eba3 0301 	sub.w	r3, r3, r1
 8011172:	f04f 0201 	mov.w	r2, #1
 8011176:	dc3e      	bgt.n	80111f6 <_strtod_l+0x74e>
 8011178:	408a      	lsls	r2, r1
 801117a:	920c      	str	r2, [sp, #48]	@ 0x30
 801117c:	2200      	movs	r2, #0
 801117e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011180:	eb09 0703 	add.w	r7, r9, r3
 8011184:	4498      	add	r8, r3
 8011186:	9b06      	ldr	r3, [sp, #24]
 8011188:	45b9      	cmp	r9, r7
 801118a:	4498      	add	r8, r3
 801118c:	464b      	mov	r3, r9
 801118e:	bfa8      	it	ge
 8011190:	463b      	movge	r3, r7
 8011192:	4543      	cmp	r3, r8
 8011194:	bfa8      	it	ge
 8011196:	4643      	movge	r3, r8
 8011198:	2b00      	cmp	r3, #0
 801119a:	bfc2      	ittt	gt
 801119c:	1aff      	subgt	r7, r7, r3
 801119e:	eba8 0803 	subgt.w	r8, r8, r3
 80111a2:	eba9 0903 	subgt.w	r9, r9, r3
 80111a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	dd16      	ble.n	80111da <_strtod_l+0x732>
 80111ac:	4629      	mov	r1, r5
 80111ae:	9805      	ldr	r0, [sp, #20]
 80111b0:	461a      	mov	r2, r3
 80111b2:	f002 fd4d 	bl	8013c50 <__pow5mult>
 80111b6:	4605      	mov	r5, r0
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d0b5      	beq.n	8011128 <_strtod_l+0x680>
 80111bc:	4601      	mov	r1, r0
 80111be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80111c0:	9805      	ldr	r0, [sp, #20]
 80111c2:	f002 fca3 	bl	8013b0c <__multiply>
 80111c6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80111c8:	2800      	cmp	r0, #0
 80111ca:	f43f ae87 	beq.w	8010edc <_strtod_l+0x434>
 80111ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80111d0:	9805      	ldr	r0, [sp, #20]
 80111d2:	f002 fb87 	bl	80138e4 <_Bfree>
 80111d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80111da:	2f00      	cmp	r7, #0
 80111dc:	dc1b      	bgt.n	8011216 <_strtod_l+0x76e>
 80111de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dd21      	ble.n	8011228 <_strtod_l+0x780>
 80111e4:	4631      	mov	r1, r6
 80111e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80111e8:	9805      	ldr	r0, [sp, #20]
 80111ea:	f002 fd31 	bl	8013c50 <__pow5mult>
 80111ee:	4606      	mov	r6, r0
 80111f0:	b9d0      	cbnz	r0, 8011228 <_strtod_l+0x780>
 80111f2:	2600      	movs	r6, #0
 80111f4:	e672      	b.n	8010edc <_strtod_l+0x434>
 80111f6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80111fa:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80111fe:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8011202:	37e2      	adds	r7, #226	@ 0xe2
 8011204:	fa02 f107 	lsl.w	r1, r2, r7
 8011208:	910b      	str	r1, [sp, #44]	@ 0x2c
 801120a:	920c      	str	r2, [sp, #48]	@ 0x30
 801120c:	e7b8      	b.n	8011180 <_strtod_l+0x6d8>
 801120e:	2200      	movs	r2, #0
 8011210:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011212:	2201      	movs	r2, #1
 8011214:	e7f9      	b.n	801120a <_strtod_l+0x762>
 8011216:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011218:	9805      	ldr	r0, [sp, #20]
 801121a:	463a      	mov	r2, r7
 801121c:	f002 fd72 	bl	8013d04 <__lshift>
 8011220:	9012      	str	r0, [sp, #72]	@ 0x48
 8011222:	2800      	cmp	r0, #0
 8011224:	d1db      	bne.n	80111de <_strtod_l+0x736>
 8011226:	e659      	b.n	8010edc <_strtod_l+0x434>
 8011228:	f1b8 0f00 	cmp.w	r8, #0
 801122c:	dd07      	ble.n	801123e <_strtod_l+0x796>
 801122e:	4631      	mov	r1, r6
 8011230:	9805      	ldr	r0, [sp, #20]
 8011232:	4642      	mov	r2, r8
 8011234:	f002 fd66 	bl	8013d04 <__lshift>
 8011238:	4606      	mov	r6, r0
 801123a:	2800      	cmp	r0, #0
 801123c:	d0d9      	beq.n	80111f2 <_strtod_l+0x74a>
 801123e:	f1b9 0f00 	cmp.w	r9, #0
 8011242:	dd08      	ble.n	8011256 <_strtod_l+0x7ae>
 8011244:	4629      	mov	r1, r5
 8011246:	9805      	ldr	r0, [sp, #20]
 8011248:	464a      	mov	r2, r9
 801124a:	f002 fd5b 	bl	8013d04 <__lshift>
 801124e:	4605      	mov	r5, r0
 8011250:	2800      	cmp	r0, #0
 8011252:	f43f ae43 	beq.w	8010edc <_strtod_l+0x434>
 8011256:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011258:	9805      	ldr	r0, [sp, #20]
 801125a:	4632      	mov	r2, r6
 801125c:	f002 fdda 	bl	8013e14 <__mdiff>
 8011260:	4604      	mov	r4, r0
 8011262:	2800      	cmp	r0, #0
 8011264:	f43f ae3a 	beq.w	8010edc <_strtod_l+0x434>
 8011268:	2300      	movs	r3, #0
 801126a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801126e:	60c3      	str	r3, [r0, #12]
 8011270:	4629      	mov	r1, r5
 8011272:	f002 fdb3 	bl	8013ddc <__mcmp>
 8011276:	2800      	cmp	r0, #0
 8011278:	da4c      	bge.n	8011314 <_strtod_l+0x86c>
 801127a:	ea58 080a 	orrs.w	r8, r8, sl
 801127e:	d172      	bne.n	8011366 <_strtod_l+0x8be>
 8011280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011284:	2b00      	cmp	r3, #0
 8011286:	d16e      	bne.n	8011366 <_strtod_l+0x8be>
 8011288:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801128c:	0d1b      	lsrs	r3, r3, #20
 801128e:	051b      	lsls	r3, r3, #20
 8011290:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011294:	d967      	bls.n	8011366 <_strtod_l+0x8be>
 8011296:	6963      	ldr	r3, [r4, #20]
 8011298:	b913      	cbnz	r3, 80112a0 <_strtod_l+0x7f8>
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	2b01      	cmp	r3, #1
 801129e:	dd62      	ble.n	8011366 <_strtod_l+0x8be>
 80112a0:	4621      	mov	r1, r4
 80112a2:	2201      	movs	r2, #1
 80112a4:	9805      	ldr	r0, [sp, #20]
 80112a6:	f002 fd2d 	bl	8013d04 <__lshift>
 80112aa:	4629      	mov	r1, r5
 80112ac:	4604      	mov	r4, r0
 80112ae:	f002 fd95 	bl	8013ddc <__mcmp>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	dd57      	ble.n	8011366 <_strtod_l+0x8be>
 80112b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112ba:	9a06      	ldr	r2, [sp, #24]
 80112bc:	0d1b      	lsrs	r3, r3, #20
 80112be:	051b      	lsls	r3, r3, #20
 80112c0:	2a00      	cmp	r2, #0
 80112c2:	d06e      	beq.n	80113a2 <_strtod_l+0x8fa>
 80112c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80112c8:	d86b      	bhi.n	80113a2 <_strtod_l+0x8fa>
 80112ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80112ce:	f67f ae99 	bls.w	8011004 <_strtod_l+0x55c>
 80112d2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8011300 <_strtod_l+0x858>
 80112d6:	ec4b ab16 	vmov	d6, sl, fp
 80112da:	4b0d      	ldr	r3, [pc, #52]	@ (8011310 <_strtod_l+0x868>)
 80112dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80112e0:	ee17 2a90 	vmov	r2, s15
 80112e4:	4013      	ands	r3, r2
 80112e6:	ec5b ab17 	vmov	sl, fp, d7
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f47f ae01 	bne.w	8010ef2 <_strtod_l+0x44a>
 80112f0:	9a05      	ldr	r2, [sp, #20]
 80112f2:	2322      	movs	r3, #34	@ 0x22
 80112f4:	6013      	str	r3, [r2, #0]
 80112f6:	e5fc      	b.n	8010ef2 <_strtod_l+0x44a>
 80112f8:	ffc00000 	.word	0xffc00000
 80112fc:	41dfffff 	.word	0x41dfffff
 8011300:	00000000 	.word	0x00000000
 8011304:	39500000 	.word	0x39500000
 8011308:	080152a0 	.word	0x080152a0
 801130c:	fffffc02 	.word	0xfffffc02
 8011310:	7ff00000 	.word	0x7ff00000
 8011314:	46d9      	mov	r9, fp
 8011316:	d15d      	bne.n	80113d4 <_strtod_l+0x92c>
 8011318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801131c:	f1b8 0f00 	cmp.w	r8, #0
 8011320:	d02a      	beq.n	8011378 <_strtod_l+0x8d0>
 8011322:	4aa9      	ldr	r2, [pc, #676]	@ (80115c8 <_strtod_l+0xb20>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d12a      	bne.n	801137e <_strtod_l+0x8d6>
 8011328:	9b06      	ldr	r3, [sp, #24]
 801132a:	4652      	mov	r2, sl
 801132c:	b1fb      	cbz	r3, 801136e <_strtod_l+0x8c6>
 801132e:	4ba7      	ldr	r3, [pc, #668]	@ (80115cc <_strtod_l+0xb24>)
 8011330:	ea0b 0303 	and.w	r3, fp, r3
 8011334:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011338:	f04f 31ff 	mov.w	r1, #4294967295
 801133c:	d81a      	bhi.n	8011374 <_strtod_l+0x8cc>
 801133e:	0d1b      	lsrs	r3, r3, #20
 8011340:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011344:	fa01 f303 	lsl.w	r3, r1, r3
 8011348:	429a      	cmp	r2, r3
 801134a:	d118      	bne.n	801137e <_strtod_l+0x8d6>
 801134c:	4ba0      	ldr	r3, [pc, #640]	@ (80115d0 <_strtod_l+0xb28>)
 801134e:	4599      	cmp	r9, r3
 8011350:	d102      	bne.n	8011358 <_strtod_l+0x8b0>
 8011352:	3201      	adds	r2, #1
 8011354:	f43f adc2 	beq.w	8010edc <_strtod_l+0x434>
 8011358:	4b9c      	ldr	r3, [pc, #624]	@ (80115cc <_strtod_l+0xb24>)
 801135a:	ea09 0303 	and.w	r3, r9, r3
 801135e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8011362:	f04f 0a00 	mov.w	sl, #0
 8011366:	9b06      	ldr	r3, [sp, #24]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1b2      	bne.n	80112d2 <_strtod_l+0x82a>
 801136c:	e5c1      	b.n	8010ef2 <_strtod_l+0x44a>
 801136e:	f04f 33ff 	mov.w	r3, #4294967295
 8011372:	e7e9      	b.n	8011348 <_strtod_l+0x8a0>
 8011374:	460b      	mov	r3, r1
 8011376:	e7e7      	b.n	8011348 <_strtod_l+0x8a0>
 8011378:	ea53 030a 	orrs.w	r3, r3, sl
 801137c:	d09b      	beq.n	80112b6 <_strtod_l+0x80e>
 801137e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011380:	b1c3      	cbz	r3, 80113b4 <_strtod_l+0x90c>
 8011382:	ea13 0f09 	tst.w	r3, r9
 8011386:	d0ee      	beq.n	8011366 <_strtod_l+0x8be>
 8011388:	9a06      	ldr	r2, [sp, #24]
 801138a:	4650      	mov	r0, sl
 801138c:	4659      	mov	r1, fp
 801138e:	f1b8 0f00 	cmp.w	r8, #0
 8011392:	d013      	beq.n	80113bc <_strtod_l+0x914>
 8011394:	f7ff fb6c 	bl	8010a70 <sulp>
 8011398:	ee39 7b00 	vadd.f64	d7, d9, d0
 801139c:	ec5b ab17 	vmov	sl, fp, d7
 80113a0:	e7e1      	b.n	8011366 <_strtod_l+0x8be>
 80113a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80113a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113ae:	f04f 3aff 	mov.w	sl, #4294967295
 80113b2:	e7d8      	b.n	8011366 <_strtod_l+0x8be>
 80113b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113b6:	ea13 0f0a 	tst.w	r3, sl
 80113ba:	e7e4      	b.n	8011386 <_strtod_l+0x8de>
 80113bc:	f7ff fb58 	bl	8010a70 <sulp>
 80113c0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80113c4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80113c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113cc:	ec5b ab10 	vmov	sl, fp, d0
 80113d0:	d1c9      	bne.n	8011366 <_strtod_l+0x8be>
 80113d2:	e617      	b.n	8011004 <_strtod_l+0x55c>
 80113d4:	4629      	mov	r1, r5
 80113d6:	4620      	mov	r0, r4
 80113d8:	f002 fe78 	bl	80140cc <__ratio>
 80113dc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80113e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80113e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e8:	d85d      	bhi.n	80114a6 <_strtod_l+0x9fe>
 80113ea:	f1b8 0f00 	cmp.w	r8, #0
 80113ee:	d164      	bne.n	80114ba <_strtod_l+0xa12>
 80113f0:	f1ba 0f00 	cmp.w	sl, #0
 80113f4:	d14b      	bne.n	801148e <_strtod_l+0x9e6>
 80113f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113fa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d160      	bne.n	80114c4 <_strtod_l+0xa1c>
 8011402:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8011406:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	d401      	bmi.n	8011414 <_strtod_l+0x96c>
 8011410:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011414:	eeb1 ab48 	vneg.f64	d10, d8
 8011418:	486c      	ldr	r0, [pc, #432]	@ (80115cc <_strtod_l+0xb24>)
 801141a:	496e      	ldr	r1, [pc, #440]	@ (80115d4 <_strtod_l+0xb2c>)
 801141c:	ea09 0700 	and.w	r7, r9, r0
 8011420:	428f      	cmp	r7, r1
 8011422:	ec53 2b1a 	vmov	r2, r3, d10
 8011426:	d17d      	bne.n	8011524 <_strtod_l+0xa7c>
 8011428:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801142c:	ec4b ab1c 	vmov	d12, sl, fp
 8011430:	eeb0 0b4c 	vmov.f64	d0, d12
 8011434:	f002 fd82 	bl	8013f3c <__ulp>
 8011438:	4864      	ldr	r0, [pc, #400]	@ (80115cc <_strtod_l+0xb24>)
 801143a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801143e:	ee1c 3a90 	vmov	r3, s25
 8011442:	4a65      	ldr	r2, [pc, #404]	@ (80115d8 <_strtod_l+0xb30>)
 8011444:	ea03 0100 	and.w	r1, r3, r0
 8011448:	4291      	cmp	r1, r2
 801144a:	ec5b ab1c 	vmov	sl, fp, d12
 801144e:	d93c      	bls.n	80114ca <_strtod_l+0xa22>
 8011450:	ee19 2a90 	vmov	r2, s19
 8011454:	4b5e      	ldr	r3, [pc, #376]	@ (80115d0 <_strtod_l+0xb28>)
 8011456:	429a      	cmp	r2, r3
 8011458:	d104      	bne.n	8011464 <_strtod_l+0x9bc>
 801145a:	ee19 3a10 	vmov	r3, s18
 801145e:	3301      	adds	r3, #1
 8011460:	f43f ad3c 	beq.w	8010edc <_strtod_l+0x434>
 8011464:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80115d0 <_strtod_l+0xb28>
 8011468:	f04f 3aff 	mov.w	sl, #4294967295
 801146c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801146e:	9805      	ldr	r0, [sp, #20]
 8011470:	f002 fa38 	bl	80138e4 <_Bfree>
 8011474:	9805      	ldr	r0, [sp, #20]
 8011476:	4631      	mov	r1, r6
 8011478:	f002 fa34 	bl	80138e4 <_Bfree>
 801147c:	9805      	ldr	r0, [sp, #20]
 801147e:	4629      	mov	r1, r5
 8011480:	f002 fa30 	bl	80138e4 <_Bfree>
 8011484:	9805      	ldr	r0, [sp, #20]
 8011486:	4621      	mov	r1, r4
 8011488:	f002 fa2c 	bl	80138e4 <_Bfree>
 801148c:	e627      	b.n	80110de <_strtod_l+0x636>
 801148e:	f1ba 0f01 	cmp.w	sl, #1
 8011492:	d103      	bne.n	801149c <_strtod_l+0x9f4>
 8011494:	f1bb 0f00 	cmp.w	fp, #0
 8011498:	f43f adb4 	beq.w	8011004 <_strtod_l+0x55c>
 801149c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80114a0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80114a4:	e7b8      	b.n	8011418 <_strtod_l+0x970>
 80114a6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80114aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80114ae:	f1b8 0f00 	cmp.w	r8, #0
 80114b2:	d0af      	beq.n	8011414 <_strtod_l+0x96c>
 80114b4:	eeb0 ab48 	vmov.f64	d10, d8
 80114b8:	e7ae      	b.n	8011418 <_strtod_l+0x970>
 80114ba:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80114be:	eeb0 8b4a 	vmov.f64	d8, d10
 80114c2:	e7a9      	b.n	8011418 <_strtod_l+0x970>
 80114c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80114c8:	e7a6      	b.n	8011418 <_strtod_l+0x970>
 80114ca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80114ce:	9b06      	ldr	r3, [sp, #24]
 80114d0:	46d9      	mov	r9, fp
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1ca      	bne.n	801146c <_strtod_l+0x9c4>
 80114d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80114da:	0d1b      	lsrs	r3, r3, #20
 80114dc:	051b      	lsls	r3, r3, #20
 80114de:	429f      	cmp	r7, r3
 80114e0:	d1c4      	bne.n	801146c <_strtod_l+0x9c4>
 80114e2:	ec51 0b18 	vmov	r0, r1, d8
 80114e6:	f7ef fa35 	bl	8000954 <__aeabi_d2lz>
 80114ea:	f7ef f8df 	bl	80006ac <__aeabi_l2d>
 80114ee:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80114f2:	ec41 0b17 	vmov	d7, r0, r1
 80114f6:	ea49 090a 	orr.w	r9, r9, sl
 80114fa:	ea59 0908 	orrs.w	r9, r9, r8
 80114fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011502:	d03c      	beq.n	801157e <_strtod_l+0xad6>
 8011504:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80115b0 <_strtod_l+0xb08>
 8011508:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011510:	f53f acef 	bmi.w	8010ef2 <_strtod_l+0x44a>
 8011514:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80115b8 <_strtod_l+0xb10>
 8011518:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011520:	dda4      	ble.n	801146c <_strtod_l+0x9c4>
 8011522:	e4e6      	b.n	8010ef2 <_strtod_l+0x44a>
 8011524:	9906      	ldr	r1, [sp, #24]
 8011526:	b1e1      	cbz	r1, 8011562 <_strtod_l+0xaba>
 8011528:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801152c:	d819      	bhi.n	8011562 <_strtod_l+0xaba>
 801152e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8011532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011536:	d811      	bhi.n	801155c <_strtod_l+0xab4>
 8011538:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801153c:	ee18 3a10 	vmov	r3, s16
 8011540:	2b01      	cmp	r3, #1
 8011542:	bf38      	it	cc
 8011544:	2301      	movcc	r3, #1
 8011546:	ee08 3a10 	vmov	s16, r3
 801154a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801154e:	f1b8 0f00 	cmp.w	r8, #0
 8011552:	d111      	bne.n	8011578 <_strtod_l+0xad0>
 8011554:	eeb1 7b48 	vneg.f64	d7, d8
 8011558:	ec53 2b17 	vmov	r2, r3, d7
 801155c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8011560:	1bcb      	subs	r3, r1, r7
 8011562:	eeb0 0b49 	vmov.f64	d0, d9
 8011566:	ec43 2b1a 	vmov	d10, r2, r3
 801156a:	f002 fce7 	bl	8013f3c <__ulp>
 801156e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8011572:	ec5b ab19 	vmov	sl, fp, d9
 8011576:	e7aa      	b.n	80114ce <_strtod_l+0xa26>
 8011578:	eeb0 7b48 	vmov.f64	d7, d8
 801157c:	e7ec      	b.n	8011558 <_strtod_l+0xab0>
 801157e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80115c0 <_strtod_l+0xb18>
 8011582:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801158a:	f57f af6f 	bpl.w	801146c <_strtod_l+0x9c4>
 801158e:	e4b0      	b.n	8010ef2 <_strtod_l+0x44a>
 8011590:	2300      	movs	r3, #0
 8011592:	9308      	str	r3, [sp, #32]
 8011594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011598:	6013      	str	r3, [r2, #0]
 801159a:	f7ff bac4 	b.w	8010b26 <_strtod_l+0x7e>
 801159e:	2a65      	cmp	r2, #101	@ 0x65
 80115a0:	f43f abbf 	beq.w	8010d22 <_strtod_l+0x27a>
 80115a4:	2a45      	cmp	r2, #69	@ 0x45
 80115a6:	f43f abbc 	beq.w	8010d22 <_strtod_l+0x27a>
 80115aa:	2101      	movs	r1, #1
 80115ac:	f7ff bbf4 	b.w	8010d98 <_strtod_l+0x2f0>
 80115b0:	94a03595 	.word	0x94a03595
 80115b4:	3fdfffff 	.word	0x3fdfffff
 80115b8:	35afe535 	.word	0x35afe535
 80115bc:	3fe00000 	.word	0x3fe00000
 80115c0:	94a03595 	.word	0x94a03595
 80115c4:	3fcfffff 	.word	0x3fcfffff
 80115c8:	000fffff 	.word	0x000fffff
 80115cc:	7ff00000 	.word	0x7ff00000
 80115d0:	7fefffff 	.word	0x7fefffff
 80115d4:	7fe00000 	.word	0x7fe00000
 80115d8:	7c9fffff 	.word	0x7c9fffff
 80115dc:	00000000 	.word	0x00000000

080115e0 <strtof>:
 80115e0:	b510      	push	{r4, lr}
 80115e2:	4c21      	ldr	r4, [pc, #132]	@ (8011668 <strtof+0x88>)
 80115e4:	4b21      	ldr	r3, [pc, #132]	@ (801166c <strtof+0x8c>)
 80115e6:	460a      	mov	r2, r1
 80115e8:	4601      	mov	r1, r0
 80115ea:	6820      	ldr	r0, [r4, #0]
 80115ec:	f7ff fa5c 	bl	8010aa8 <_strtod_l>
 80115f0:	eeb4 0b40 	vcmp.f64	d0, d0
 80115f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f8:	eeb0 7b40 	vmov.f64	d7, d0
 80115fc:	d70d      	bvc.n	801161a <strtof+0x3a>
 80115fe:	ee17 3a90 	vmov	r3, s15
 8011602:	2b00      	cmp	r3, #0
 8011604:	481a      	ldr	r0, [pc, #104]	@ (8011670 <strtof+0x90>)
 8011606:	da04      	bge.n	8011612 <strtof+0x32>
 8011608:	f000 fef2 	bl	80123f0 <nanf>
 801160c:	eeb1 0a40 	vneg.f32	s0, s0
 8011610:	bd10      	pop	{r4, pc}
 8011612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011616:	f000 beeb 	b.w	80123f0 <nanf>
 801161a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801161e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8011674 <strtof+0x94>
 8011622:	eeb0 6ac0 	vabs.f32	s12, s0
 8011626:	eeb4 6a66 	vcmp.f32	s12, s13
 801162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162e:	dd08      	ble.n	8011642 <strtof+0x62>
 8011630:	eeb0 6bc7 	vabs.f64	d6, d7
 8011634:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8011660 <strtof+0x80>
 8011638:	eeb4 6b45 	vcmp.f64	d6, d5
 801163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011640:	dd0a      	ble.n	8011658 <strtof+0x78>
 8011642:	ee10 3a10 	vmov	r3, s0
 8011646:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801164a:	d1e1      	bne.n	8011610 <strtof+0x30>
 801164c:	ee17 2a90 	vmov	r2, s15
 8011650:	4b09      	ldr	r3, [pc, #36]	@ (8011678 <strtof+0x98>)
 8011652:	4013      	ands	r3, r2
 8011654:	2b00      	cmp	r3, #0
 8011656:	d0db      	beq.n	8011610 <strtof+0x30>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	2222      	movs	r2, #34	@ 0x22
 801165c:	601a      	str	r2, [r3, #0]
 801165e:	e7d7      	b.n	8011610 <strtof+0x30>
 8011660:	ffffffff 	.word	0xffffffff
 8011664:	7fefffff 	.word	0x7fefffff
 8011668:	240001f8 	.word	0x240001f8
 801166c:	2400008c 	.word	0x2400008c
 8011670:	08015270 	.word	0x08015270
 8011674:	7f7fffff 	.word	0x7f7fffff
 8011678:	7ff00000 	.word	0x7ff00000

0801167c <__cvt>:
 801167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801167e:	ed2d 8b02 	vpush	{d8}
 8011682:	eeb0 8b40 	vmov.f64	d8, d0
 8011686:	b085      	sub	sp, #20
 8011688:	4617      	mov	r7, r2
 801168a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801168c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801168e:	ee18 2a90 	vmov	r2, s17
 8011692:	f025 0520 	bic.w	r5, r5, #32
 8011696:	2a00      	cmp	r2, #0
 8011698:	bfb6      	itet	lt
 801169a:	222d      	movlt	r2, #45	@ 0x2d
 801169c:	2200      	movge	r2, #0
 801169e:	eeb1 8b40 	vneglt.f64	d8, d0
 80116a2:	2d46      	cmp	r5, #70	@ 0x46
 80116a4:	460c      	mov	r4, r1
 80116a6:	701a      	strb	r2, [r3, #0]
 80116a8:	d004      	beq.n	80116b4 <__cvt+0x38>
 80116aa:	2d45      	cmp	r5, #69	@ 0x45
 80116ac:	d100      	bne.n	80116b0 <__cvt+0x34>
 80116ae:	3401      	adds	r4, #1
 80116b0:	2102      	movs	r1, #2
 80116b2:	e000      	b.n	80116b6 <__cvt+0x3a>
 80116b4:	2103      	movs	r1, #3
 80116b6:	ab03      	add	r3, sp, #12
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	ab02      	add	r3, sp, #8
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	4622      	mov	r2, r4
 80116c0:	4633      	mov	r3, r6
 80116c2:	eeb0 0b48 	vmov.f64	d0, d8
 80116c6:	f000 ff23 	bl	8012510 <_dtoa_r>
 80116ca:	2d47      	cmp	r5, #71	@ 0x47
 80116cc:	d114      	bne.n	80116f8 <__cvt+0x7c>
 80116ce:	07fb      	lsls	r3, r7, #31
 80116d0:	d50a      	bpl.n	80116e8 <__cvt+0x6c>
 80116d2:	1902      	adds	r2, r0, r4
 80116d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80116d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116dc:	bf08      	it	eq
 80116de:	9203      	streq	r2, [sp, #12]
 80116e0:	2130      	movs	r1, #48	@ 0x30
 80116e2:	9b03      	ldr	r3, [sp, #12]
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d319      	bcc.n	801171c <__cvt+0xa0>
 80116e8:	9b03      	ldr	r3, [sp, #12]
 80116ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116ec:	1a1b      	subs	r3, r3, r0
 80116ee:	6013      	str	r3, [r2, #0]
 80116f0:	b005      	add	sp, #20
 80116f2:	ecbd 8b02 	vpop	{d8}
 80116f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116f8:	2d46      	cmp	r5, #70	@ 0x46
 80116fa:	eb00 0204 	add.w	r2, r0, r4
 80116fe:	d1e9      	bne.n	80116d4 <__cvt+0x58>
 8011700:	7803      	ldrb	r3, [r0, #0]
 8011702:	2b30      	cmp	r3, #48	@ 0x30
 8011704:	d107      	bne.n	8011716 <__cvt+0x9a>
 8011706:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170e:	bf1c      	itt	ne
 8011710:	f1c4 0401 	rsbne	r4, r4, #1
 8011714:	6034      	strne	r4, [r6, #0]
 8011716:	6833      	ldr	r3, [r6, #0]
 8011718:	441a      	add	r2, r3
 801171a:	e7db      	b.n	80116d4 <__cvt+0x58>
 801171c:	1c5c      	adds	r4, r3, #1
 801171e:	9403      	str	r4, [sp, #12]
 8011720:	7019      	strb	r1, [r3, #0]
 8011722:	e7de      	b.n	80116e2 <__cvt+0x66>

08011724 <__exponent>:
 8011724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011726:	2900      	cmp	r1, #0
 8011728:	bfba      	itte	lt
 801172a:	4249      	neglt	r1, r1
 801172c:	232d      	movlt	r3, #45	@ 0x2d
 801172e:	232b      	movge	r3, #43	@ 0x2b
 8011730:	2909      	cmp	r1, #9
 8011732:	7002      	strb	r2, [r0, #0]
 8011734:	7043      	strb	r3, [r0, #1]
 8011736:	dd29      	ble.n	801178c <__exponent+0x68>
 8011738:	f10d 0307 	add.w	r3, sp, #7
 801173c:	461d      	mov	r5, r3
 801173e:	270a      	movs	r7, #10
 8011740:	461a      	mov	r2, r3
 8011742:	fbb1 f6f7 	udiv	r6, r1, r7
 8011746:	fb07 1416 	mls	r4, r7, r6, r1
 801174a:	3430      	adds	r4, #48	@ 0x30
 801174c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011750:	460c      	mov	r4, r1
 8011752:	2c63      	cmp	r4, #99	@ 0x63
 8011754:	f103 33ff 	add.w	r3, r3, #4294967295
 8011758:	4631      	mov	r1, r6
 801175a:	dcf1      	bgt.n	8011740 <__exponent+0x1c>
 801175c:	3130      	adds	r1, #48	@ 0x30
 801175e:	1e94      	subs	r4, r2, #2
 8011760:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011764:	1c41      	adds	r1, r0, #1
 8011766:	4623      	mov	r3, r4
 8011768:	42ab      	cmp	r3, r5
 801176a:	d30a      	bcc.n	8011782 <__exponent+0x5e>
 801176c:	f10d 0309 	add.w	r3, sp, #9
 8011770:	1a9b      	subs	r3, r3, r2
 8011772:	42ac      	cmp	r4, r5
 8011774:	bf88      	it	hi
 8011776:	2300      	movhi	r3, #0
 8011778:	3302      	adds	r3, #2
 801177a:	4403      	add	r3, r0
 801177c:	1a18      	subs	r0, r3, r0
 801177e:	b003      	add	sp, #12
 8011780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011782:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011786:	f801 6f01 	strb.w	r6, [r1, #1]!
 801178a:	e7ed      	b.n	8011768 <__exponent+0x44>
 801178c:	2330      	movs	r3, #48	@ 0x30
 801178e:	3130      	adds	r1, #48	@ 0x30
 8011790:	7083      	strb	r3, [r0, #2]
 8011792:	70c1      	strb	r1, [r0, #3]
 8011794:	1d03      	adds	r3, r0, #4
 8011796:	e7f1      	b.n	801177c <__exponent+0x58>

08011798 <_printf_float>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	b08d      	sub	sp, #52	@ 0x34
 801179e:	460c      	mov	r4, r1
 80117a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80117a4:	4616      	mov	r6, r2
 80117a6:	461f      	mov	r7, r3
 80117a8:	4605      	mov	r5, r0
 80117aa:	f000 fd35 	bl	8012218 <_localeconv_r>
 80117ae:	f8d0 b000 	ldr.w	fp, [r0]
 80117b2:	4658      	mov	r0, fp
 80117b4:	f7ee fde4 	bl	8000380 <strlen>
 80117b8:	2300      	movs	r3, #0
 80117ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80117bc:	f8d8 3000 	ldr.w	r3, [r8]
 80117c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80117c4:	6822      	ldr	r2, [r4, #0]
 80117c6:	9005      	str	r0, [sp, #20]
 80117c8:	3307      	adds	r3, #7
 80117ca:	f023 0307 	bic.w	r3, r3, #7
 80117ce:	f103 0108 	add.w	r1, r3, #8
 80117d2:	f8c8 1000 	str.w	r1, [r8]
 80117d6:	ed93 0b00 	vldr	d0, [r3]
 80117da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011a38 <_printf_float+0x2a0>
 80117de:	eeb0 7bc0 	vabs.f64	d7, d0
 80117e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80117e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80117ee:	dd24      	ble.n	801183a <_printf_float+0xa2>
 80117f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80117f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f8:	d502      	bpl.n	8011800 <_printf_float+0x68>
 80117fa:	232d      	movs	r3, #45	@ 0x2d
 80117fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011800:	498f      	ldr	r1, [pc, #572]	@ (8011a40 <_printf_float+0x2a8>)
 8011802:	4b90      	ldr	r3, [pc, #576]	@ (8011a44 <_printf_float+0x2ac>)
 8011804:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011808:	bf8c      	ite	hi
 801180a:	4688      	movhi	r8, r1
 801180c:	4698      	movls	r8, r3
 801180e:	f022 0204 	bic.w	r2, r2, #4
 8011812:	2303      	movs	r3, #3
 8011814:	6123      	str	r3, [r4, #16]
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	f04f 0a00 	mov.w	sl, #0
 801181c:	9700      	str	r7, [sp, #0]
 801181e:	4633      	mov	r3, r6
 8011820:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011822:	4621      	mov	r1, r4
 8011824:	4628      	mov	r0, r5
 8011826:	f000 f9d1 	bl	8011bcc <_printf_common>
 801182a:	3001      	adds	r0, #1
 801182c:	f040 8089 	bne.w	8011942 <_printf_float+0x1aa>
 8011830:	f04f 30ff 	mov.w	r0, #4294967295
 8011834:	b00d      	add	sp, #52	@ 0x34
 8011836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801183a:	eeb4 0b40 	vcmp.f64	d0, d0
 801183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011842:	d709      	bvc.n	8011858 <_printf_float+0xc0>
 8011844:	ee10 3a90 	vmov	r3, s1
 8011848:	2b00      	cmp	r3, #0
 801184a:	bfbc      	itt	lt
 801184c:	232d      	movlt	r3, #45	@ 0x2d
 801184e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011852:	497d      	ldr	r1, [pc, #500]	@ (8011a48 <_printf_float+0x2b0>)
 8011854:	4b7d      	ldr	r3, [pc, #500]	@ (8011a4c <_printf_float+0x2b4>)
 8011856:	e7d5      	b.n	8011804 <_printf_float+0x6c>
 8011858:	6863      	ldr	r3, [r4, #4]
 801185a:	1c59      	adds	r1, r3, #1
 801185c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011860:	d139      	bne.n	80118d6 <_printf_float+0x13e>
 8011862:	2306      	movs	r3, #6
 8011864:	6063      	str	r3, [r4, #4]
 8011866:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801186a:	2300      	movs	r3, #0
 801186c:	6022      	str	r2, [r4, #0]
 801186e:	9303      	str	r3, [sp, #12]
 8011870:	ab0a      	add	r3, sp, #40	@ 0x28
 8011872:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011876:	ab09      	add	r3, sp, #36	@ 0x24
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	6861      	ldr	r1, [r4, #4]
 801187c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011880:	4628      	mov	r0, r5
 8011882:	f7ff fefb 	bl	801167c <__cvt>
 8011886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801188a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801188c:	4680      	mov	r8, r0
 801188e:	d129      	bne.n	80118e4 <_printf_float+0x14c>
 8011890:	1cc8      	adds	r0, r1, #3
 8011892:	db02      	blt.n	801189a <_printf_float+0x102>
 8011894:	6863      	ldr	r3, [r4, #4]
 8011896:	4299      	cmp	r1, r3
 8011898:	dd41      	ble.n	801191e <_printf_float+0x186>
 801189a:	f1a9 0902 	sub.w	r9, r9, #2
 801189e:	fa5f f989 	uxtb.w	r9, r9
 80118a2:	3901      	subs	r1, #1
 80118a4:	464a      	mov	r2, r9
 80118a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80118aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80118ac:	f7ff ff3a 	bl	8011724 <__exponent>
 80118b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118b2:	1813      	adds	r3, r2, r0
 80118b4:	2a01      	cmp	r2, #1
 80118b6:	4682      	mov	sl, r0
 80118b8:	6123      	str	r3, [r4, #16]
 80118ba:	dc02      	bgt.n	80118c2 <_printf_float+0x12a>
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	07d2      	lsls	r2, r2, #31
 80118c0:	d501      	bpl.n	80118c6 <_printf_float+0x12e>
 80118c2:	3301      	adds	r3, #1
 80118c4:	6123      	str	r3, [r4, #16]
 80118c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d0a6      	beq.n	801181c <_printf_float+0x84>
 80118ce:	232d      	movs	r3, #45	@ 0x2d
 80118d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118d4:	e7a2      	b.n	801181c <_printf_float+0x84>
 80118d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80118da:	d1c4      	bne.n	8011866 <_printf_float+0xce>
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1c2      	bne.n	8011866 <_printf_float+0xce>
 80118e0:	2301      	movs	r3, #1
 80118e2:	e7bf      	b.n	8011864 <_printf_float+0xcc>
 80118e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80118e8:	d9db      	bls.n	80118a2 <_printf_float+0x10a>
 80118ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80118ee:	d118      	bne.n	8011922 <_printf_float+0x18a>
 80118f0:	2900      	cmp	r1, #0
 80118f2:	6863      	ldr	r3, [r4, #4]
 80118f4:	dd0b      	ble.n	801190e <_printf_float+0x176>
 80118f6:	6121      	str	r1, [r4, #16]
 80118f8:	b913      	cbnz	r3, 8011900 <_printf_float+0x168>
 80118fa:	6822      	ldr	r2, [r4, #0]
 80118fc:	07d0      	lsls	r0, r2, #31
 80118fe:	d502      	bpl.n	8011906 <_printf_float+0x16e>
 8011900:	3301      	adds	r3, #1
 8011902:	440b      	add	r3, r1
 8011904:	6123      	str	r3, [r4, #16]
 8011906:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011908:	f04f 0a00 	mov.w	sl, #0
 801190c:	e7db      	b.n	80118c6 <_printf_float+0x12e>
 801190e:	b913      	cbnz	r3, 8011916 <_printf_float+0x17e>
 8011910:	6822      	ldr	r2, [r4, #0]
 8011912:	07d2      	lsls	r2, r2, #31
 8011914:	d501      	bpl.n	801191a <_printf_float+0x182>
 8011916:	3302      	adds	r3, #2
 8011918:	e7f4      	b.n	8011904 <_printf_float+0x16c>
 801191a:	2301      	movs	r3, #1
 801191c:	e7f2      	b.n	8011904 <_printf_float+0x16c>
 801191e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011924:	4299      	cmp	r1, r3
 8011926:	db05      	blt.n	8011934 <_printf_float+0x19c>
 8011928:	6823      	ldr	r3, [r4, #0]
 801192a:	6121      	str	r1, [r4, #16]
 801192c:	07d8      	lsls	r0, r3, #31
 801192e:	d5ea      	bpl.n	8011906 <_printf_float+0x16e>
 8011930:	1c4b      	adds	r3, r1, #1
 8011932:	e7e7      	b.n	8011904 <_printf_float+0x16c>
 8011934:	2900      	cmp	r1, #0
 8011936:	bfd4      	ite	le
 8011938:	f1c1 0202 	rsble	r2, r1, #2
 801193c:	2201      	movgt	r2, #1
 801193e:	4413      	add	r3, r2
 8011940:	e7e0      	b.n	8011904 <_printf_float+0x16c>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	055a      	lsls	r2, r3, #21
 8011946:	d407      	bmi.n	8011958 <_printf_float+0x1c0>
 8011948:	6923      	ldr	r3, [r4, #16]
 801194a:	4642      	mov	r2, r8
 801194c:	4631      	mov	r1, r6
 801194e:	4628      	mov	r0, r5
 8011950:	47b8      	blx	r7
 8011952:	3001      	adds	r0, #1
 8011954:	d12a      	bne.n	80119ac <_printf_float+0x214>
 8011956:	e76b      	b.n	8011830 <_printf_float+0x98>
 8011958:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801195c:	f240 80e0 	bls.w	8011b20 <_printf_float+0x388>
 8011960:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011964:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196c:	d133      	bne.n	80119d6 <_printf_float+0x23e>
 801196e:	4a38      	ldr	r2, [pc, #224]	@ (8011a50 <_printf_float+0x2b8>)
 8011970:	2301      	movs	r3, #1
 8011972:	4631      	mov	r1, r6
 8011974:	4628      	mov	r0, r5
 8011976:	47b8      	blx	r7
 8011978:	3001      	adds	r0, #1
 801197a:	f43f af59 	beq.w	8011830 <_printf_float+0x98>
 801197e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011982:	4543      	cmp	r3, r8
 8011984:	db02      	blt.n	801198c <_printf_float+0x1f4>
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	07d8      	lsls	r0, r3, #31
 801198a:	d50f      	bpl.n	80119ac <_printf_float+0x214>
 801198c:	9b05      	ldr	r3, [sp, #20]
 801198e:	465a      	mov	r2, fp
 8011990:	4631      	mov	r1, r6
 8011992:	4628      	mov	r0, r5
 8011994:	47b8      	blx	r7
 8011996:	3001      	adds	r0, #1
 8011998:	f43f af4a 	beq.w	8011830 <_printf_float+0x98>
 801199c:	f04f 0900 	mov.w	r9, #0
 80119a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80119a4:	f104 0a1a 	add.w	sl, r4, #26
 80119a8:	45c8      	cmp	r8, r9
 80119aa:	dc09      	bgt.n	80119c0 <_printf_float+0x228>
 80119ac:	6823      	ldr	r3, [r4, #0]
 80119ae:	079b      	lsls	r3, r3, #30
 80119b0:	f100 8107 	bmi.w	8011bc2 <_printf_float+0x42a>
 80119b4:	68e0      	ldr	r0, [r4, #12]
 80119b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119b8:	4298      	cmp	r0, r3
 80119ba:	bfb8      	it	lt
 80119bc:	4618      	movlt	r0, r3
 80119be:	e739      	b.n	8011834 <_printf_float+0x9c>
 80119c0:	2301      	movs	r3, #1
 80119c2:	4652      	mov	r2, sl
 80119c4:	4631      	mov	r1, r6
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b8      	blx	r7
 80119ca:	3001      	adds	r0, #1
 80119cc:	f43f af30 	beq.w	8011830 <_printf_float+0x98>
 80119d0:	f109 0901 	add.w	r9, r9, #1
 80119d4:	e7e8      	b.n	80119a8 <_printf_float+0x210>
 80119d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dc3b      	bgt.n	8011a54 <_printf_float+0x2bc>
 80119dc:	4a1c      	ldr	r2, [pc, #112]	@ (8011a50 <_printf_float+0x2b8>)
 80119de:	2301      	movs	r3, #1
 80119e0:	4631      	mov	r1, r6
 80119e2:	4628      	mov	r0, r5
 80119e4:	47b8      	blx	r7
 80119e6:	3001      	adds	r0, #1
 80119e8:	f43f af22 	beq.w	8011830 <_printf_float+0x98>
 80119ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80119f0:	ea59 0303 	orrs.w	r3, r9, r3
 80119f4:	d102      	bne.n	80119fc <_printf_float+0x264>
 80119f6:	6823      	ldr	r3, [r4, #0]
 80119f8:	07d9      	lsls	r1, r3, #31
 80119fa:	d5d7      	bpl.n	80119ac <_printf_float+0x214>
 80119fc:	9b05      	ldr	r3, [sp, #20]
 80119fe:	465a      	mov	r2, fp
 8011a00:	4631      	mov	r1, r6
 8011a02:	4628      	mov	r0, r5
 8011a04:	47b8      	blx	r7
 8011a06:	3001      	adds	r0, #1
 8011a08:	f43f af12 	beq.w	8011830 <_printf_float+0x98>
 8011a0c:	f04f 0a00 	mov.w	sl, #0
 8011a10:	f104 0b1a 	add.w	fp, r4, #26
 8011a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a16:	425b      	negs	r3, r3
 8011a18:	4553      	cmp	r3, sl
 8011a1a:	dc01      	bgt.n	8011a20 <_printf_float+0x288>
 8011a1c:	464b      	mov	r3, r9
 8011a1e:	e794      	b.n	801194a <_printf_float+0x1b2>
 8011a20:	2301      	movs	r3, #1
 8011a22:	465a      	mov	r2, fp
 8011a24:	4631      	mov	r1, r6
 8011a26:	4628      	mov	r0, r5
 8011a28:	47b8      	blx	r7
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	f43f af00 	beq.w	8011830 <_printf_float+0x98>
 8011a30:	f10a 0a01 	add.w	sl, sl, #1
 8011a34:	e7ee      	b.n	8011a14 <_printf_float+0x27c>
 8011a36:	bf00      	nop
 8011a38:	ffffffff 	.word	0xffffffff
 8011a3c:	7fefffff 	.word	0x7fefffff
 8011a40:	080150a6 	.word	0x080150a6
 8011a44:	080150a2 	.word	0x080150a2
 8011a48:	080150ae 	.word	0x080150ae
 8011a4c:	080150aa 	.word	0x080150aa
 8011a50:	080150b2 	.word	0x080150b2
 8011a54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011a56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011a5a:	4553      	cmp	r3, sl
 8011a5c:	bfa8      	it	ge
 8011a5e:	4653      	movge	r3, sl
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	4699      	mov	r9, r3
 8011a64:	dc37      	bgt.n	8011ad6 <_printf_float+0x33e>
 8011a66:	2300      	movs	r3, #0
 8011a68:	9307      	str	r3, [sp, #28]
 8011a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a6e:	f104 021a 	add.w	r2, r4, #26
 8011a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011a74:	9907      	ldr	r1, [sp, #28]
 8011a76:	9306      	str	r3, [sp, #24]
 8011a78:	eba3 0309 	sub.w	r3, r3, r9
 8011a7c:	428b      	cmp	r3, r1
 8011a7e:	dc31      	bgt.n	8011ae4 <_printf_float+0x34c>
 8011a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a82:	459a      	cmp	sl, r3
 8011a84:	dc3b      	bgt.n	8011afe <_printf_float+0x366>
 8011a86:	6823      	ldr	r3, [r4, #0]
 8011a88:	07da      	lsls	r2, r3, #31
 8011a8a:	d438      	bmi.n	8011afe <_printf_float+0x366>
 8011a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a8e:	ebaa 0903 	sub.w	r9, sl, r3
 8011a92:	9b06      	ldr	r3, [sp, #24]
 8011a94:	ebaa 0303 	sub.w	r3, sl, r3
 8011a98:	4599      	cmp	r9, r3
 8011a9a:	bfa8      	it	ge
 8011a9c:	4699      	movge	r9, r3
 8011a9e:	f1b9 0f00 	cmp.w	r9, #0
 8011aa2:	dc34      	bgt.n	8011b0e <_printf_float+0x376>
 8011aa4:	f04f 0800 	mov.w	r8, #0
 8011aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011aac:	f104 0b1a 	add.w	fp, r4, #26
 8011ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ab2:	ebaa 0303 	sub.w	r3, sl, r3
 8011ab6:	eba3 0309 	sub.w	r3, r3, r9
 8011aba:	4543      	cmp	r3, r8
 8011abc:	f77f af76 	ble.w	80119ac <_printf_float+0x214>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	465a      	mov	r2, fp
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	47b8      	blx	r7
 8011aca:	3001      	adds	r0, #1
 8011acc:	f43f aeb0 	beq.w	8011830 <_printf_float+0x98>
 8011ad0:	f108 0801 	add.w	r8, r8, #1
 8011ad4:	e7ec      	b.n	8011ab0 <_printf_float+0x318>
 8011ad6:	4642      	mov	r2, r8
 8011ad8:	4631      	mov	r1, r6
 8011ada:	4628      	mov	r0, r5
 8011adc:	47b8      	blx	r7
 8011ade:	3001      	adds	r0, #1
 8011ae0:	d1c1      	bne.n	8011a66 <_printf_float+0x2ce>
 8011ae2:	e6a5      	b.n	8011830 <_printf_float+0x98>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	4631      	mov	r1, r6
 8011ae8:	4628      	mov	r0, r5
 8011aea:	9206      	str	r2, [sp, #24]
 8011aec:	47b8      	blx	r7
 8011aee:	3001      	adds	r0, #1
 8011af0:	f43f ae9e 	beq.w	8011830 <_printf_float+0x98>
 8011af4:	9b07      	ldr	r3, [sp, #28]
 8011af6:	9a06      	ldr	r2, [sp, #24]
 8011af8:	3301      	adds	r3, #1
 8011afa:	9307      	str	r3, [sp, #28]
 8011afc:	e7b9      	b.n	8011a72 <_printf_float+0x2da>
 8011afe:	9b05      	ldr	r3, [sp, #20]
 8011b00:	465a      	mov	r2, fp
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d1bf      	bne.n	8011a8c <_printf_float+0x2f4>
 8011b0c:	e690      	b.n	8011830 <_printf_float+0x98>
 8011b0e:	9a06      	ldr	r2, [sp, #24]
 8011b10:	464b      	mov	r3, r9
 8011b12:	4442      	add	r2, r8
 8011b14:	4631      	mov	r1, r6
 8011b16:	4628      	mov	r0, r5
 8011b18:	47b8      	blx	r7
 8011b1a:	3001      	adds	r0, #1
 8011b1c:	d1c2      	bne.n	8011aa4 <_printf_float+0x30c>
 8011b1e:	e687      	b.n	8011830 <_printf_float+0x98>
 8011b20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011b24:	f1b9 0f01 	cmp.w	r9, #1
 8011b28:	dc01      	bgt.n	8011b2e <_printf_float+0x396>
 8011b2a:	07db      	lsls	r3, r3, #31
 8011b2c:	d536      	bpl.n	8011b9c <_printf_float+0x404>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	4642      	mov	r2, r8
 8011b32:	4631      	mov	r1, r6
 8011b34:	4628      	mov	r0, r5
 8011b36:	47b8      	blx	r7
 8011b38:	3001      	adds	r0, #1
 8011b3a:	f43f ae79 	beq.w	8011830 <_printf_float+0x98>
 8011b3e:	9b05      	ldr	r3, [sp, #20]
 8011b40:	465a      	mov	r2, fp
 8011b42:	4631      	mov	r1, r6
 8011b44:	4628      	mov	r0, r5
 8011b46:	47b8      	blx	r7
 8011b48:	3001      	adds	r0, #1
 8011b4a:	f43f ae71 	beq.w	8011830 <_printf_float+0x98>
 8011b4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011b52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8011b5e:	d018      	beq.n	8011b92 <_printf_float+0x3fa>
 8011b60:	464b      	mov	r3, r9
 8011b62:	f108 0201 	add.w	r2, r8, #1
 8011b66:	4631      	mov	r1, r6
 8011b68:	4628      	mov	r0, r5
 8011b6a:	47b8      	blx	r7
 8011b6c:	3001      	adds	r0, #1
 8011b6e:	d10c      	bne.n	8011b8a <_printf_float+0x3f2>
 8011b70:	e65e      	b.n	8011830 <_printf_float+0x98>
 8011b72:	2301      	movs	r3, #1
 8011b74:	465a      	mov	r2, fp
 8011b76:	4631      	mov	r1, r6
 8011b78:	4628      	mov	r0, r5
 8011b7a:	47b8      	blx	r7
 8011b7c:	3001      	adds	r0, #1
 8011b7e:	f43f ae57 	beq.w	8011830 <_printf_float+0x98>
 8011b82:	f108 0801 	add.w	r8, r8, #1
 8011b86:	45c8      	cmp	r8, r9
 8011b88:	dbf3      	blt.n	8011b72 <_printf_float+0x3da>
 8011b8a:	4653      	mov	r3, sl
 8011b8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011b90:	e6dc      	b.n	801194c <_printf_float+0x1b4>
 8011b92:	f04f 0800 	mov.w	r8, #0
 8011b96:	f104 0b1a 	add.w	fp, r4, #26
 8011b9a:	e7f4      	b.n	8011b86 <_printf_float+0x3ee>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	4642      	mov	r2, r8
 8011ba0:	e7e1      	b.n	8011b66 <_printf_float+0x3ce>
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	464a      	mov	r2, r9
 8011ba6:	4631      	mov	r1, r6
 8011ba8:	4628      	mov	r0, r5
 8011baa:	47b8      	blx	r7
 8011bac:	3001      	adds	r0, #1
 8011bae:	f43f ae3f 	beq.w	8011830 <_printf_float+0x98>
 8011bb2:	f108 0801 	add.w	r8, r8, #1
 8011bb6:	68e3      	ldr	r3, [r4, #12]
 8011bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011bba:	1a5b      	subs	r3, r3, r1
 8011bbc:	4543      	cmp	r3, r8
 8011bbe:	dcf0      	bgt.n	8011ba2 <_printf_float+0x40a>
 8011bc0:	e6f8      	b.n	80119b4 <_printf_float+0x21c>
 8011bc2:	f04f 0800 	mov.w	r8, #0
 8011bc6:	f104 0919 	add.w	r9, r4, #25
 8011bca:	e7f4      	b.n	8011bb6 <_printf_float+0x41e>

08011bcc <_printf_common>:
 8011bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bd0:	4616      	mov	r6, r2
 8011bd2:	4698      	mov	r8, r3
 8011bd4:	688a      	ldr	r2, [r1, #8]
 8011bd6:	690b      	ldr	r3, [r1, #16]
 8011bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	bfb8      	it	lt
 8011be0:	4613      	movlt	r3, r2
 8011be2:	6033      	str	r3, [r6, #0]
 8011be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011be8:	4607      	mov	r7, r0
 8011bea:	460c      	mov	r4, r1
 8011bec:	b10a      	cbz	r2, 8011bf2 <_printf_common+0x26>
 8011bee:	3301      	adds	r3, #1
 8011bf0:	6033      	str	r3, [r6, #0]
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	0699      	lsls	r1, r3, #26
 8011bf6:	bf42      	ittt	mi
 8011bf8:	6833      	ldrmi	r3, [r6, #0]
 8011bfa:	3302      	addmi	r3, #2
 8011bfc:	6033      	strmi	r3, [r6, #0]
 8011bfe:	6825      	ldr	r5, [r4, #0]
 8011c00:	f015 0506 	ands.w	r5, r5, #6
 8011c04:	d106      	bne.n	8011c14 <_printf_common+0x48>
 8011c06:	f104 0a19 	add.w	sl, r4, #25
 8011c0a:	68e3      	ldr	r3, [r4, #12]
 8011c0c:	6832      	ldr	r2, [r6, #0]
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	42ab      	cmp	r3, r5
 8011c12:	dc26      	bgt.n	8011c62 <_printf_common+0x96>
 8011c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011c18:	6822      	ldr	r2, [r4, #0]
 8011c1a:	3b00      	subs	r3, #0
 8011c1c:	bf18      	it	ne
 8011c1e:	2301      	movne	r3, #1
 8011c20:	0692      	lsls	r2, r2, #26
 8011c22:	d42b      	bmi.n	8011c7c <_printf_common+0xb0>
 8011c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011c28:	4641      	mov	r1, r8
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	47c8      	blx	r9
 8011c2e:	3001      	adds	r0, #1
 8011c30:	d01e      	beq.n	8011c70 <_printf_common+0xa4>
 8011c32:	6823      	ldr	r3, [r4, #0]
 8011c34:	6922      	ldr	r2, [r4, #16]
 8011c36:	f003 0306 	and.w	r3, r3, #6
 8011c3a:	2b04      	cmp	r3, #4
 8011c3c:	bf02      	ittt	eq
 8011c3e:	68e5      	ldreq	r5, [r4, #12]
 8011c40:	6833      	ldreq	r3, [r6, #0]
 8011c42:	1aed      	subeq	r5, r5, r3
 8011c44:	68a3      	ldr	r3, [r4, #8]
 8011c46:	bf0c      	ite	eq
 8011c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c4c:	2500      	movne	r5, #0
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	bfc4      	itt	gt
 8011c52:	1a9b      	subgt	r3, r3, r2
 8011c54:	18ed      	addgt	r5, r5, r3
 8011c56:	2600      	movs	r6, #0
 8011c58:	341a      	adds	r4, #26
 8011c5a:	42b5      	cmp	r5, r6
 8011c5c:	d11a      	bne.n	8011c94 <_printf_common+0xc8>
 8011c5e:	2000      	movs	r0, #0
 8011c60:	e008      	b.n	8011c74 <_printf_common+0xa8>
 8011c62:	2301      	movs	r3, #1
 8011c64:	4652      	mov	r2, sl
 8011c66:	4641      	mov	r1, r8
 8011c68:	4638      	mov	r0, r7
 8011c6a:	47c8      	blx	r9
 8011c6c:	3001      	adds	r0, #1
 8011c6e:	d103      	bne.n	8011c78 <_printf_common+0xac>
 8011c70:	f04f 30ff 	mov.w	r0, #4294967295
 8011c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c78:	3501      	adds	r5, #1
 8011c7a:	e7c6      	b.n	8011c0a <_printf_common+0x3e>
 8011c7c:	18e1      	adds	r1, r4, r3
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	2030      	movs	r0, #48	@ 0x30
 8011c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011c86:	4422      	add	r2, r4
 8011c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c90:	3302      	adds	r3, #2
 8011c92:	e7c7      	b.n	8011c24 <_printf_common+0x58>
 8011c94:	2301      	movs	r3, #1
 8011c96:	4622      	mov	r2, r4
 8011c98:	4641      	mov	r1, r8
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	47c8      	blx	r9
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	d0e6      	beq.n	8011c70 <_printf_common+0xa4>
 8011ca2:	3601      	adds	r6, #1
 8011ca4:	e7d9      	b.n	8011c5a <_printf_common+0x8e>
	...

08011ca8 <_printf_i>:
 8011ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cac:	7e0f      	ldrb	r7, [r1, #24]
 8011cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011cb0:	2f78      	cmp	r7, #120	@ 0x78
 8011cb2:	4691      	mov	r9, r2
 8011cb4:	4680      	mov	r8, r0
 8011cb6:	460c      	mov	r4, r1
 8011cb8:	469a      	mov	sl, r3
 8011cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011cbe:	d807      	bhi.n	8011cd0 <_printf_i+0x28>
 8011cc0:	2f62      	cmp	r7, #98	@ 0x62
 8011cc2:	d80a      	bhi.n	8011cda <_printf_i+0x32>
 8011cc4:	2f00      	cmp	r7, #0
 8011cc6:	f000 80d1 	beq.w	8011e6c <_printf_i+0x1c4>
 8011cca:	2f58      	cmp	r7, #88	@ 0x58
 8011ccc:	f000 80b8 	beq.w	8011e40 <_printf_i+0x198>
 8011cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011cd8:	e03a      	b.n	8011d50 <_printf_i+0xa8>
 8011cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011cde:	2b15      	cmp	r3, #21
 8011ce0:	d8f6      	bhi.n	8011cd0 <_printf_i+0x28>
 8011ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8011ce8 <_printf_i+0x40>)
 8011ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ce8:	08011d41 	.word	0x08011d41
 8011cec:	08011d55 	.word	0x08011d55
 8011cf0:	08011cd1 	.word	0x08011cd1
 8011cf4:	08011cd1 	.word	0x08011cd1
 8011cf8:	08011cd1 	.word	0x08011cd1
 8011cfc:	08011cd1 	.word	0x08011cd1
 8011d00:	08011d55 	.word	0x08011d55
 8011d04:	08011cd1 	.word	0x08011cd1
 8011d08:	08011cd1 	.word	0x08011cd1
 8011d0c:	08011cd1 	.word	0x08011cd1
 8011d10:	08011cd1 	.word	0x08011cd1
 8011d14:	08011e53 	.word	0x08011e53
 8011d18:	08011d7f 	.word	0x08011d7f
 8011d1c:	08011e0d 	.word	0x08011e0d
 8011d20:	08011cd1 	.word	0x08011cd1
 8011d24:	08011cd1 	.word	0x08011cd1
 8011d28:	08011e75 	.word	0x08011e75
 8011d2c:	08011cd1 	.word	0x08011cd1
 8011d30:	08011d7f 	.word	0x08011d7f
 8011d34:	08011cd1 	.word	0x08011cd1
 8011d38:	08011cd1 	.word	0x08011cd1
 8011d3c:	08011e15 	.word	0x08011e15
 8011d40:	6833      	ldr	r3, [r6, #0]
 8011d42:	1d1a      	adds	r2, r3, #4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	6032      	str	r2, [r6, #0]
 8011d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011d50:	2301      	movs	r3, #1
 8011d52:	e09c      	b.n	8011e8e <_printf_i+0x1e6>
 8011d54:	6833      	ldr	r3, [r6, #0]
 8011d56:	6820      	ldr	r0, [r4, #0]
 8011d58:	1d19      	adds	r1, r3, #4
 8011d5a:	6031      	str	r1, [r6, #0]
 8011d5c:	0606      	lsls	r6, r0, #24
 8011d5e:	d501      	bpl.n	8011d64 <_printf_i+0xbc>
 8011d60:	681d      	ldr	r5, [r3, #0]
 8011d62:	e003      	b.n	8011d6c <_printf_i+0xc4>
 8011d64:	0645      	lsls	r5, r0, #25
 8011d66:	d5fb      	bpl.n	8011d60 <_printf_i+0xb8>
 8011d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011d6c:	2d00      	cmp	r5, #0
 8011d6e:	da03      	bge.n	8011d78 <_printf_i+0xd0>
 8011d70:	232d      	movs	r3, #45	@ 0x2d
 8011d72:	426d      	negs	r5, r5
 8011d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d78:	4858      	ldr	r0, [pc, #352]	@ (8011edc <_printf_i+0x234>)
 8011d7a:	230a      	movs	r3, #10
 8011d7c:	e011      	b.n	8011da2 <_printf_i+0xfa>
 8011d7e:	6821      	ldr	r1, [r4, #0]
 8011d80:	6833      	ldr	r3, [r6, #0]
 8011d82:	0608      	lsls	r0, r1, #24
 8011d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8011d88:	d402      	bmi.n	8011d90 <_printf_i+0xe8>
 8011d8a:	0649      	lsls	r1, r1, #25
 8011d8c:	bf48      	it	mi
 8011d8e:	b2ad      	uxthmi	r5, r5
 8011d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d92:	4852      	ldr	r0, [pc, #328]	@ (8011edc <_printf_i+0x234>)
 8011d94:	6033      	str	r3, [r6, #0]
 8011d96:	bf14      	ite	ne
 8011d98:	230a      	movne	r3, #10
 8011d9a:	2308      	moveq	r3, #8
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011da2:	6866      	ldr	r6, [r4, #4]
 8011da4:	60a6      	str	r6, [r4, #8]
 8011da6:	2e00      	cmp	r6, #0
 8011da8:	db05      	blt.n	8011db6 <_printf_i+0x10e>
 8011daa:	6821      	ldr	r1, [r4, #0]
 8011dac:	432e      	orrs	r6, r5
 8011dae:	f021 0104 	bic.w	r1, r1, #4
 8011db2:	6021      	str	r1, [r4, #0]
 8011db4:	d04b      	beq.n	8011e4e <_printf_i+0x1a6>
 8011db6:	4616      	mov	r6, r2
 8011db8:	fbb5 f1f3 	udiv	r1, r5, r3
 8011dbc:	fb03 5711 	mls	r7, r3, r1, r5
 8011dc0:	5dc7      	ldrb	r7, [r0, r7]
 8011dc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011dc6:	462f      	mov	r7, r5
 8011dc8:	42bb      	cmp	r3, r7
 8011dca:	460d      	mov	r5, r1
 8011dcc:	d9f4      	bls.n	8011db8 <_printf_i+0x110>
 8011dce:	2b08      	cmp	r3, #8
 8011dd0:	d10b      	bne.n	8011dea <_printf_i+0x142>
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	07df      	lsls	r7, r3, #31
 8011dd6:	d508      	bpl.n	8011dea <_printf_i+0x142>
 8011dd8:	6923      	ldr	r3, [r4, #16]
 8011dda:	6861      	ldr	r1, [r4, #4]
 8011ddc:	4299      	cmp	r1, r3
 8011dde:	bfde      	ittt	le
 8011de0:	2330      	movle	r3, #48	@ 0x30
 8011de2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011de6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011dea:	1b92      	subs	r2, r2, r6
 8011dec:	6122      	str	r2, [r4, #16]
 8011dee:	f8cd a000 	str.w	sl, [sp]
 8011df2:	464b      	mov	r3, r9
 8011df4:	aa03      	add	r2, sp, #12
 8011df6:	4621      	mov	r1, r4
 8011df8:	4640      	mov	r0, r8
 8011dfa:	f7ff fee7 	bl	8011bcc <_printf_common>
 8011dfe:	3001      	adds	r0, #1
 8011e00:	d14a      	bne.n	8011e98 <_printf_i+0x1f0>
 8011e02:	f04f 30ff 	mov.w	r0, #4294967295
 8011e06:	b004      	add	sp, #16
 8011e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	f043 0320 	orr.w	r3, r3, #32
 8011e12:	6023      	str	r3, [r4, #0]
 8011e14:	4832      	ldr	r0, [pc, #200]	@ (8011ee0 <_printf_i+0x238>)
 8011e16:	2778      	movs	r7, #120	@ 0x78
 8011e18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011e1c:	6823      	ldr	r3, [r4, #0]
 8011e1e:	6831      	ldr	r1, [r6, #0]
 8011e20:	061f      	lsls	r7, r3, #24
 8011e22:	f851 5b04 	ldr.w	r5, [r1], #4
 8011e26:	d402      	bmi.n	8011e2e <_printf_i+0x186>
 8011e28:	065f      	lsls	r7, r3, #25
 8011e2a:	bf48      	it	mi
 8011e2c:	b2ad      	uxthmi	r5, r5
 8011e2e:	6031      	str	r1, [r6, #0]
 8011e30:	07d9      	lsls	r1, r3, #31
 8011e32:	bf44      	itt	mi
 8011e34:	f043 0320 	orrmi.w	r3, r3, #32
 8011e38:	6023      	strmi	r3, [r4, #0]
 8011e3a:	b11d      	cbz	r5, 8011e44 <_printf_i+0x19c>
 8011e3c:	2310      	movs	r3, #16
 8011e3e:	e7ad      	b.n	8011d9c <_printf_i+0xf4>
 8011e40:	4826      	ldr	r0, [pc, #152]	@ (8011edc <_printf_i+0x234>)
 8011e42:	e7e9      	b.n	8011e18 <_printf_i+0x170>
 8011e44:	6823      	ldr	r3, [r4, #0]
 8011e46:	f023 0320 	bic.w	r3, r3, #32
 8011e4a:	6023      	str	r3, [r4, #0]
 8011e4c:	e7f6      	b.n	8011e3c <_printf_i+0x194>
 8011e4e:	4616      	mov	r6, r2
 8011e50:	e7bd      	b.n	8011dce <_printf_i+0x126>
 8011e52:	6833      	ldr	r3, [r6, #0]
 8011e54:	6825      	ldr	r5, [r4, #0]
 8011e56:	6961      	ldr	r1, [r4, #20]
 8011e58:	1d18      	adds	r0, r3, #4
 8011e5a:	6030      	str	r0, [r6, #0]
 8011e5c:	062e      	lsls	r6, r5, #24
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	d501      	bpl.n	8011e66 <_printf_i+0x1be>
 8011e62:	6019      	str	r1, [r3, #0]
 8011e64:	e002      	b.n	8011e6c <_printf_i+0x1c4>
 8011e66:	0668      	lsls	r0, r5, #25
 8011e68:	d5fb      	bpl.n	8011e62 <_printf_i+0x1ba>
 8011e6a:	8019      	strh	r1, [r3, #0]
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	6123      	str	r3, [r4, #16]
 8011e70:	4616      	mov	r6, r2
 8011e72:	e7bc      	b.n	8011dee <_printf_i+0x146>
 8011e74:	6833      	ldr	r3, [r6, #0]
 8011e76:	1d1a      	adds	r2, r3, #4
 8011e78:	6032      	str	r2, [r6, #0]
 8011e7a:	681e      	ldr	r6, [r3, #0]
 8011e7c:	6862      	ldr	r2, [r4, #4]
 8011e7e:	2100      	movs	r1, #0
 8011e80:	4630      	mov	r0, r6
 8011e82:	f7ee fa2d 	bl	80002e0 <memchr>
 8011e86:	b108      	cbz	r0, 8011e8c <_printf_i+0x1e4>
 8011e88:	1b80      	subs	r0, r0, r6
 8011e8a:	6060      	str	r0, [r4, #4]
 8011e8c:	6863      	ldr	r3, [r4, #4]
 8011e8e:	6123      	str	r3, [r4, #16]
 8011e90:	2300      	movs	r3, #0
 8011e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e96:	e7aa      	b.n	8011dee <_printf_i+0x146>
 8011e98:	6923      	ldr	r3, [r4, #16]
 8011e9a:	4632      	mov	r2, r6
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	4640      	mov	r0, r8
 8011ea0:	47d0      	blx	sl
 8011ea2:	3001      	adds	r0, #1
 8011ea4:	d0ad      	beq.n	8011e02 <_printf_i+0x15a>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	079b      	lsls	r3, r3, #30
 8011eaa:	d413      	bmi.n	8011ed4 <_printf_i+0x22c>
 8011eac:	68e0      	ldr	r0, [r4, #12]
 8011eae:	9b03      	ldr	r3, [sp, #12]
 8011eb0:	4298      	cmp	r0, r3
 8011eb2:	bfb8      	it	lt
 8011eb4:	4618      	movlt	r0, r3
 8011eb6:	e7a6      	b.n	8011e06 <_printf_i+0x15e>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	4632      	mov	r2, r6
 8011ebc:	4649      	mov	r1, r9
 8011ebe:	4640      	mov	r0, r8
 8011ec0:	47d0      	blx	sl
 8011ec2:	3001      	adds	r0, #1
 8011ec4:	d09d      	beq.n	8011e02 <_printf_i+0x15a>
 8011ec6:	3501      	adds	r5, #1
 8011ec8:	68e3      	ldr	r3, [r4, #12]
 8011eca:	9903      	ldr	r1, [sp, #12]
 8011ecc:	1a5b      	subs	r3, r3, r1
 8011ece:	42ab      	cmp	r3, r5
 8011ed0:	dcf2      	bgt.n	8011eb8 <_printf_i+0x210>
 8011ed2:	e7eb      	b.n	8011eac <_printf_i+0x204>
 8011ed4:	2500      	movs	r5, #0
 8011ed6:	f104 0619 	add.w	r6, r4, #25
 8011eda:	e7f5      	b.n	8011ec8 <_printf_i+0x220>
 8011edc:	080150b4 	.word	0x080150b4
 8011ee0:	080150c5 	.word	0x080150c5

08011ee4 <std>:
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	b510      	push	{r4, lr}
 8011ee8:	4604      	mov	r4, r0
 8011eea:	e9c0 3300 	strd	r3, r3, [r0]
 8011eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ef2:	6083      	str	r3, [r0, #8]
 8011ef4:	8181      	strh	r1, [r0, #12]
 8011ef6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011ef8:	81c2      	strh	r2, [r0, #14]
 8011efa:	6183      	str	r3, [r0, #24]
 8011efc:	4619      	mov	r1, r3
 8011efe:	2208      	movs	r2, #8
 8011f00:	305c      	adds	r0, #92	@ 0x5c
 8011f02:	f000 f920 	bl	8012146 <memset>
 8011f06:	4b0d      	ldr	r3, [pc, #52]	@ (8011f3c <std+0x58>)
 8011f08:	6263      	str	r3, [r4, #36]	@ 0x24
 8011f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8011f40 <std+0x5c>)
 8011f0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8011f44 <std+0x60>)
 8011f10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011f12:	4b0d      	ldr	r3, [pc, #52]	@ (8011f48 <std+0x64>)
 8011f14:	6323      	str	r3, [r4, #48]	@ 0x30
 8011f16:	4b0d      	ldr	r3, [pc, #52]	@ (8011f4c <std+0x68>)
 8011f18:	6224      	str	r4, [r4, #32]
 8011f1a:	429c      	cmp	r4, r3
 8011f1c:	d006      	beq.n	8011f2c <std+0x48>
 8011f1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011f22:	4294      	cmp	r4, r2
 8011f24:	d002      	beq.n	8011f2c <std+0x48>
 8011f26:	33d0      	adds	r3, #208	@ 0xd0
 8011f28:	429c      	cmp	r4, r3
 8011f2a:	d105      	bne.n	8011f38 <std+0x54>
 8011f2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f34:	f000 ba42 	b.w	80123bc <__retarget_lock_init_recursive>
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	bf00      	nop
 8011f3c:	0801208d 	.word	0x0801208d
 8011f40:	080120af 	.word	0x080120af
 8011f44:	080120e7 	.word	0x080120e7
 8011f48:	0801210b 	.word	0x0801210b
 8011f4c:	240060cc 	.word	0x240060cc

08011f50 <stdio_exit_handler>:
 8011f50:	4a02      	ldr	r2, [pc, #8]	@ (8011f5c <stdio_exit_handler+0xc>)
 8011f52:	4903      	ldr	r1, [pc, #12]	@ (8011f60 <stdio_exit_handler+0x10>)
 8011f54:	4803      	ldr	r0, [pc, #12]	@ (8011f64 <stdio_exit_handler+0x14>)
 8011f56:	f000 b869 	b.w	801202c <_fwalk_sglue>
 8011f5a:	bf00      	nop
 8011f5c:	24000080 	.word	0x24000080
 8011f60:	08014559 	.word	0x08014559
 8011f64:	240001fc 	.word	0x240001fc

08011f68 <cleanup_stdio>:
 8011f68:	6841      	ldr	r1, [r0, #4]
 8011f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f9c <cleanup_stdio+0x34>)
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	b510      	push	{r4, lr}
 8011f70:	4604      	mov	r4, r0
 8011f72:	d001      	beq.n	8011f78 <cleanup_stdio+0x10>
 8011f74:	f002 faf0 	bl	8014558 <_fflush_r>
 8011f78:	68a1      	ldr	r1, [r4, #8]
 8011f7a:	4b09      	ldr	r3, [pc, #36]	@ (8011fa0 <cleanup_stdio+0x38>)
 8011f7c:	4299      	cmp	r1, r3
 8011f7e:	d002      	beq.n	8011f86 <cleanup_stdio+0x1e>
 8011f80:	4620      	mov	r0, r4
 8011f82:	f002 fae9 	bl	8014558 <_fflush_r>
 8011f86:	68e1      	ldr	r1, [r4, #12]
 8011f88:	4b06      	ldr	r3, [pc, #24]	@ (8011fa4 <cleanup_stdio+0x3c>)
 8011f8a:	4299      	cmp	r1, r3
 8011f8c:	d004      	beq.n	8011f98 <cleanup_stdio+0x30>
 8011f8e:	4620      	mov	r0, r4
 8011f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f94:	f002 bae0 	b.w	8014558 <_fflush_r>
 8011f98:	bd10      	pop	{r4, pc}
 8011f9a:	bf00      	nop
 8011f9c:	240060cc 	.word	0x240060cc
 8011fa0:	24006134 	.word	0x24006134
 8011fa4:	2400619c 	.word	0x2400619c

08011fa8 <global_stdio_init.part.0>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd8 <global_stdio_init.part.0+0x30>)
 8011fac:	4c0b      	ldr	r4, [pc, #44]	@ (8011fdc <global_stdio_init.part.0+0x34>)
 8011fae:	4a0c      	ldr	r2, [pc, #48]	@ (8011fe0 <global_stdio_init.part.0+0x38>)
 8011fb0:	601a      	str	r2, [r3, #0]
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	2104      	movs	r1, #4
 8011fb8:	f7ff ff94 	bl	8011ee4 <std>
 8011fbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	2109      	movs	r1, #9
 8011fc4:	f7ff ff8e 	bl	8011ee4 <std>
 8011fc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011fcc:	2202      	movs	r2, #2
 8011fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fd2:	2112      	movs	r1, #18
 8011fd4:	f7ff bf86 	b.w	8011ee4 <std>
 8011fd8:	24006204 	.word	0x24006204
 8011fdc:	240060cc 	.word	0x240060cc
 8011fe0:	08011f51 	.word	0x08011f51

08011fe4 <__sfp_lock_acquire>:
 8011fe4:	4801      	ldr	r0, [pc, #4]	@ (8011fec <__sfp_lock_acquire+0x8>)
 8011fe6:	f000 b9ea 	b.w	80123be <__retarget_lock_acquire_recursive>
 8011fea:	bf00      	nop
 8011fec:	2400620d 	.word	0x2400620d

08011ff0 <__sfp_lock_release>:
 8011ff0:	4801      	ldr	r0, [pc, #4]	@ (8011ff8 <__sfp_lock_release+0x8>)
 8011ff2:	f000 b9e5 	b.w	80123c0 <__retarget_lock_release_recursive>
 8011ff6:	bf00      	nop
 8011ff8:	2400620d 	.word	0x2400620d

08011ffc <__sinit>:
 8011ffc:	b510      	push	{r4, lr}
 8011ffe:	4604      	mov	r4, r0
 8012000:	f7ff fff0 	bl	8011fe4 <__sfp_lock_acquire>
 8012004:	6a23      	ldr	r3, [r4, #32]
 8012006:	b11b      	cbz	r3, 8012010 <__sinit+0x14>
 8012008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801200c:	f7ff bff0 	b.w	8011ff0 <__sfp_lock_release>
 8012010:	4b04      	ldr	r3, [pc, #16]	@ (8012024 <__sinit+0x28>)
 8012012:	6223      	str	r3, [r4, #32]
 8012014:	4b04      	ldr	r3, [pc, #16]	@ (8012028 <__sinit+0x2c>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1f5      	bne.n	8012008 <__sinit+0xc>
 801201c:	f7ff ffc4 	bl	8011fa8 <global_stdio_init.part.0>
 8012020:	e7f2      	b.n	8012008 <__sinit+0xc>
 8012022:	bf00      	nop
 8012024:	08011f69 	.word	0x08011f69
 8012028:	24006204 	.word	0x24006204

0801202c <_fwalk_sglue>:
 801202c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012030:	4607      	mov	r7, r0
 8012032:	4688      	mov	r8, r1
 8012034:	4614      	mov	r4, r2
 8012036:	2600      	movs	r6, #0
 8012038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801203c:	f1b9 0901 	subs.w	r9, r9, #1
 8012040:	d505      	bpl.n	801204e <_fwalk_sglue+0x22>
 8012042:	6824      	ldr	r4, [r4, #0]
 8012044:	2c00      	cmp	r4, #0
 8012046:	d1f7      	bne.n	8012038 <_fwalk_sglue+0xc>
 8012048:	4630      	mov	r0, r6
 801204a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801204e:	89ab      	ldrh	r3, [r5, #12]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d907      	bls.n	8012064 <_fwalk_sglue+0x38>
 8012054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012058:	3301      	adds	r3, #1
 801205a:	d003      	beq.n	8012064 <_fwalk_sglue+0x38>
 801205c:	4629      	mov	r1, r5
 801205e:	4638      	mov	r0, r7
 8012060:	47c0      	blx	r8
 8012062:	4306      	orrs	r6, r0
 8012064:	3568      	adds	r5, #104	@ 0x68
 8012066:	e7e9      	b.n	801203c <_fwalk_sglue+0x10>

08012068 <iprintf>:
 8012068:	b40f      	push	{r0, r1, r2, r3}
 801206a:	b507      	push	{r0, r1, r2, lr}
 801206c:	4906      	ldr	r1, [pc, #24]	@ (8012088 <iprintf+0x20>)
 801206e:	ab04      	add	r3, sp, #16
 8012070:	6808      	ldr	r0, [r1, #0]
 8012072:	f853 2b04 	ldr.w	r2, [r3], #4
 8012076:	6881      	ldr	r1, [r0, #8]
 8012078:	9301      	str	r3, [sp, #4]
 801207a:	f002 f8d1 	bl	8014220 <_vfiprintf_r>
 801207e:	b003      	add	sp, #12
 8012080:	f85d eb04 	ldr.w	lr, [sp], #4
 8012084:	b004      	add	sp, #16
 8012086:	4770      	bx	lr
 8012088:	240001f8 	.word	0x240001f8

0801208c <__sread>:
 801208c:	b510      	push	{r4, lr}
 801208e:	460c      	mov	r4, r1
 8012090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012094:	f000 f944 	bl	8012320 <_read_r>
 8012098:	2800      	cmp	r0, #0
 801209a:	bfab      	itete	ge
 801209c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801209e:	89a3      	ldrhlt	r3, [r4, #12]
 80120a0:	181b      	addge	r3, r3, r0
 80120a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80120a6:	bfac      	ite	ge
 80120a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80120aa:	81a3      	strhlt	r3, [r4, #12]
 80120ac:	bd10      	pop	{r4, pc}

080120ae <__swrite>:
 80120ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b2:	461f      	mov	r7, r3
 80120b4:	898b      	ldrh	r3, [r1, #12]
 80120b6:	05db      	lsls	r3, r3, #23
 80120b8:	4605      	mov	r5, r0
 80120ba:	460c      	mov	r4, r1
 80120bc:	4616      	mov	r6, r2
 80120be:	d505      	bpl.n	80120cc <__swrite+0x1e>
 80120c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120c4:	2302      	movs	r3, #2
 80120c6:	2200      	movs	r2, #0
 80120c8:	f000 f918 	bl	80122fc <_lseek_r>
 80120cc:	89a3      	ldrh	r3, [r4, #12]
 80120ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80120d6:	81a3      	strh	r3, [r4, #12]
 80120d8:	4632      	mov	r2, r6
 80120da:	463b      	mov	r3, r7
 80120dc:	4628      	mov	r0, r5
 80120de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120e2:	f000 b92f 	b.w	8012344 <_write_r>

080120e6 <__sseek>:
 80120e6:	b510      	push	{r4, lr}
 80120e8:	460c      	mov	r4, r1
 80120ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ee:	f000 f905 	bl	80122fc <_lseek_r>
 80120f2:	1c43      	adds	r3, r0, #1
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	bf15      	itete	ne
 80120f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80120fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80120fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012102:	81a3      	strheq	r3, [r4, #12]
 8012104:	bf18      	it	ne
 8012106:	81a3      	strhne	r3, [r4, #12]
 8012108:	bd10      	pop	{r4, pc}

0801210a <__sclose>:
 801210a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801210e:	f000 b887 	b.w	8012220 <_close_r>

08012112 <memmove>:
 8012112:	4288      	cmp	r0, r1
 8012114:	b510      	push	{r4, lr}
 8012116:	eb01 0402 	add.w	r4, r1, r2
 801211a:	d902      	bls.n	8012122 <memmove+0x10>
 801211c:	4284      	cmp	r4, r0
 801211e:	4623      	mov	r3, r4
 8012120:	d807      	bhi.n	8012132 <memmove+0x20>
 8012122:	1e43      	subs	r3, r0, #1
 8012124:	42a1      	cmp	r1, r4
 8012126:	d008      	beq.n	801213a <memmove+0x28>
 8012128:	f811 2b01 	ldrb.w	r2, [r1], #1
 801212c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012130:	e7f8      	b.n	8012124 <memmove+0x12>
 8012132:	4402      	add	r2, r0
 8012134:	4601      	mov	r1, r0
 8012136:	428a      	cmp	r2, r1
 8012138:	d100      	bne.n	801213c <memmove+0x2a>
 801213a:	bd10      	pop	{r4, pc}
 801213c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012140:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012144:	e7f7      	b.n	8012136 <memmove+0x24>

08012146 <memset>:
 8012146:	4402      	add	r2, r0
 8012148:	4603      	mov	r3, r0
 801214a:	4293      	cmp	r3, r2
 801214c:	d100      	bne.n	8012150 <memset+0xa>
 801214e:	4770      	bx	lr
 8012150:	f803 1b01 	strb.w	r1, [r3], #1
 8012154:	e7f9      	b.n	801214a <memset+0x4>

08012156 <strchr>:
 8012156:	b2c9      	uxtb	r1, r1
 8012158:	4603      	mov	r3, r0
 801215a:	4618      	mov	r0, r3
 801215c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012160:	b112      	cbz	r2, 8012168 <strchr+0x12>
 8012162:	428a      	cmp	r2, r1
 8012164:	d1f9      	bne.n	801215a <strchr+0x4>
 8012166:	4770      	bx	lr
 8012168:	2900      	cmp	r1, #0
 801216a:	bf18      	it	ne
 801216c:	2000      	movne	r0, #0
 801216e:	4770      	bx	lr

08012170 <strncmp>:
 8012170:	b510      	push	{r4, lr}
 8012172:	b16a      	cbz	r2, 8012190 <strncmp+0x20>
 8012174:	3901      	subs	r1, #1
 8012176:	1884      	adds	r4, r0, r2
 8012178:	f810 2b01 	ldrb.w	r2, [r0], #1
 801217c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012180:	429a      	cmp	r2, r3
 8012182:	d103      	bne.n	801218c <strncmp+0x1c>
 8012184:	42a0      	cmp	r0, r4
 8012186:	d001      	beq.n	801218c <strncmp+0x1c>
 8012188:	2a00      	cmp	r2, #0
 801218a:	d1f5      	bne.n	8012178 <strncmp+0x8>
 801218c:	1ad0      	subs	r0, r2, r3
 801218e:	bd10      	pop	{r4, pc}
 8012190:	4610      	mov	r0, r2
 8012192:	e7fc      	b.n	801218e <strncmp+0x1e>

08012194 <strrchr>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801219a:	4603      	mov	r3, r0
 801219c:	d10e      	bne.n	80121bc <strrchr+0x28>
 801219e:	4621      	mov	r1, r4
 80121a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121a4:	f7ff bfd7 	b.w	8012156 <strchr>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	4605      	mov	r5, r0
 80121ac:	4621      	mov	r1, r4
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7ff ffd1 	bl	8012156 <strchr>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d1f7      	bne.n	80121a8 <strrchr+0x14>
 80121b8:	4628      	mov	r0, r5
 80121ba:	bd38      	pop	{r3, r4, r5, pc}
 80121bc:	2500      	movs	r5, #0
 80121be:	e7f5      	b.n	80121ac <strrchr+0x18>

080121c0 <__strtok_r>:
 80121c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121c2:	4604      	mov	r4, r0
 80121c4:	b908      	cbnz	r0, 80121ca <__strtok_r+0xa>
 80121c6:	6814      	ldr	r4, [r2, #0]
 80121c8:	b144      	cbz	r4, 80121dc <__strtok_r+0x1c>
 80121ca:	4620      	mov	r0, r4
 80121cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80121d0:	460f      	mov	r7, r1
 80121d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80121d6:	b91e      	cbnz	r6, 80121e0 <__strtok_r+0x20>
 80121d8:	b965      	cbnz	r5, 80121f4 <__strtok_r+0x34>
 80121da:	6015      	str	r5, [r2, #0]
 80121dc:	2000      	movs	r0, #0
 80121de:	e005      	b.n	80121ec <__strtok_r+0x2c>
 80121e0:	42b5      	cmp	r5, r6
 80121e2:	d1f6      	bne.n	80121d2 <__strtok_r+0x12>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1f0      	bne.n	80121ca <__strtok_r+0xa>
 80121e8:	6014      	str	r4, [r2, #0]
 80121ea:	7003      	strb	r3, [r0, #0]
 80121ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ee:	461c      	mov	r4, r3
 80121f0:	e00c      	b.n	801220c <__strtok_r+0x4c>
 80121f2:	b91d      	cbnz	r5, 80121fc <__strtok_r+0x3c>
 80121f4:	4627      	mov	r7, r4
 80121f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80121fa:	460e      	mov	r6, r1
 80121fc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012200:	42ab      	cmp	r3, r5
 8012202:	d1f6      	bne.n	80121f2 <__strtok_r+0x32>
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0f2      	beq.n	80121ee <__strtok_r+0x2e>
 8012208:	2300      	movs	r3, #0
 801220a:	703b      	strb	r3, [r7, #0]
 801220c:	6014      	str	r4, [r2, #0]
 801220e:	e7ed      	b.n	80121ec <__strtok_r+0x2c>

08012210 <strtok_r>:
 8012210:	2301      	movs	r3, #1
 8012212:	f7ff bfd5 	b.w	80121c0 <__strtok_r>
	...

08012218 <_localeconv_r>:
 8012218:	4800      	ldr	r0, [pc, #0]	@ (801221c <_localeconv_r+0x4>)
 801221a:	4770      	bx	lr
 801221c:	2400017c 	.word	0x2400017c

08012220 <_close_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d06      	ldr	r5, [pc, #24]	@ (801223c <_close_r+0x1c>)
 8012224:	2300      	movs	r3, #0
 8012226:	4604      	mov	r4, r0
 8012228:	4608      	mov	r0, r1
 801222a:	602b      	str	r3, [r5, #0]
 801222c:	f7f3 f8d2 	bl	80053d4 <_close>
 8012230:	1c43      	adds	r3, r0, #1
 8012232:	d102      	bne.n	801223a <_close_r+0x1a>
 8012234:	682b      	ldr	r3, [r5, #0]
 8012236:	b103      	cbz	r3, 801223a <_close_r+0x1a>
 8012238:	6023      	str	r3, [r4, #0]
 801223a:	bd38      	pop	{r3, r4, r5, pc}
 801223c:	24006208 	.word	0x24006208

08012240 <_reclaim_reent>:
 8012240:	4b2d      	ldr	r3, [pc, #180]	@ (80122f8 <_reclaim_reent+0xb8>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4283      	cmp	r3, r0
 8012246:	b570      	push	{r4, r5, r6, lr}
 8012248:	4604      	mov	r4, r0
 801224a:	d053      	beq.n	80122f4 <_reclaim_reent+0xb4>
 801224c:	69c3      	ldr	r3, [r0, #28]
 801224e:	b31b      	cbz	r3, 8012298 <_reclaim_reent+0x58>
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	b163      	cbz	r3, 801226e <_reclaim_reent+0x2e>
 8012254:	2500      	movs	r5, #0
 8012256:	69e3      	ldr	r3, [r4, #28]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	5959      	ldr	r1, [r3, r5]
 801225c:	b9b1      	cbnz	r1, 801228c <_reclaim_reent+0x4c>
 801225e:	3504      	adds	r5, #4
 8012260:	2d80      	cmp	r5, #128	@ 0x80
 8012262:	d1f8      	bne.n	8012256 <_reclaim_reent+0x16>
 8012264:	69e3      	ldr	r3, [r4, #28]
 8012266:	4620      	mov	r0, r4
 8012268:	68d9      	ldr	r1, [r3, #12]
 801226a:	f000 feaf 	bl	8012fcc <_free_r>
 801226e:	69e3      	ldr	r3, [r4, #28]
 8012270:	6819      	ldr	r1, [r3, #0]
 8012272:	b111      	cbz	r1, 801227a <_reclaim_reent+0x3a>
 8012274:	4620      	mov	r0, r4
 8012276:	f000 fea9 	bl	8012fcc <_free_r>
 801227a:	69e3      	ldr	r3, [r4, #28]
 801227c:	689d      	ldr	r5, [r3, #8]
 801227e:	b15d      	cbz	r5, 8012298 <_reclaim_reent+0x58>
 8012280:	4629      	mov	r1, r5
 8012282:	4620      	mov	r0, r4
 8012284:	682d      	ldr	r5, [r5, #0]
 8012286:	f000 fea1 	bl	8012fcc <_free_r>
 801228a:	e7f8      	b.n	801227e <_reclaim_reent+0x3e>
 801228c:	680e      	ldr	r6, [r1, #0]
 801228e:	4620      	mov	r0, r4
 8012290:	f000 fe9c 	bl	8012fcc <_free_r>
 8012294:	4631      	mov	r1, r6
 8012296:	e7e1      	b.n	801225c <_reclaim_reent+0x1c>
 8012298:	6961      	ldr	r1, [r4, #20]
 801229a:	b111      	cbz	r1, 80122a2 <_reclaim_reent+0x62>
 801229c:	4620      	mov	r0, r4
 801229e:	f000 fe95 	bl	8012fcc <_free_r>
 80122a2:	69e1      	ldr	r1, [r4, #28]
 80122a4:	b111      	cbz	r1, 80122ac <_reclaim_reent+0x6c>
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 fe90 	bl	8012fcc <_free_r>
 80122ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80122ae:	b111      	cbz	r1, 80122b6 <_reclaim_reent+0x76>
 80122b0:	4620      	mov	r0, r4
 80122b2:	f000 fe8b 	bl	8012fcc <_free_r>
 80122b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122b8:	b111      	cbz	r1, 80122c0 <_reclaim_reent+0x80>
 80122ba:	4620      	mov	r0, r4
 80122bc:	f000 fe86 	bl	8012fcc <_free_r>
 80122c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80122c2:	b111      	cbz	r1, 80122ca <_reclaim_reent+0x8a>
 80122c4:	4620      	mov	r0, r4
 80122c6:	f000 fe81 	bl	8012fcc <_free_r>
 80122ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80122cc:	b111      	cbz	r1, 80122d4 <_reclaim_reent+0x94>
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 fe7c 	bl	8012fcc <_free_r>
 80122d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80122d6:	b111      	cbz	r1, 80122de <_reclaim_reent+0x9e>
 80122d8:	4620      	mov	r0, r4
 80122da:	f000 fe77 	bl	8012fcc <_free_r>
 80122de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80122e0:	b111      	cbz	r1, 80122e8 <_reclaim_reent+0xa8>
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 fe72 	bl	8012fcc <_free_r>
 80122e8:	6a23      	ldr	r3, [r4, #32]
 80122ea:	b11b      	cbz	r3, 80122f4 <_reclaim_reent+0xb4>
 80122ec:	4620      	mov	r0, r4
 80122ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122f2:	4718      	bx	r3
 80122f4:	bd70      	pop	{r4, r5, r6, pc}
 80122f6:	bf00      	nop
 80122f8:	240001f8 	.word	0x240001f8

080122fc <_lseek_r>:
 80122fc:	b538      	push	{r3, r4, r5, lr}
 80122fe:	4d07      	ldr	r5, [pc, #28]	@ (801231c <_lseek_r+0x20>)
 8012300:	4604      	mov	r4, r0
 8012302:	4608      	mov	r0, r1
 8012304:	4611      	mov	r1, r2
 8012306:	2200      	movs	r2, #0
 8012308:	602a      	str	r2, [r5, #0]
 801230a:	461a      	mov	r2, r3
 801230c:	f7f3 f889 	bl	8005422 <_lseek>
 8012310:	1c43      	adds	r3, r0, #1
 8012312:	d102      	bne.n	801231a <_lseek_r+0x1e>
 8012314:	682b      	ldr	r3, [r5, #0]
 8012316:	b103      	cbz	r3, 801231a <_lseek_r+0x1e>
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	bd38      	pop	{r3, r4, r5, pc}
 801231c:	24006208 	.word	0x24006208

08012320 <_read_r>:
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4d07      	ldr	r5, [pc, #28]	@ (8012340 <_read_r+0x20>)
 8012324:	4604      	mov	r4, r0
 8012326:	4608      	mov	r0, r1
 8012328:	4611      	mov	r1, r2
 801232a:	2200      	movs	r2, #0
 801232c:	602a      	str	r2, [r5, #0]
 801232e:	461a      	mov	r2, r3
 8012330:	f7f3 f833 	bl	800539a <_read>
 8012334:	1c43      	adds	r3, r0, #1
 8012336:	d102      	bne.n	801233e <_read_r+0x1e>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b103      	cbz	r3, 801233e <_read_r+0x1e>
 801233c:	6023      	str	r3, [r4, #0]
 801233e:	bd38      	pop	{r3, r4, r5, pc}
 8012340:	24006208 	.word	0x24006208

08012344 <_write_r>:
 8012344:	b538      	push	{r3, r4, r5, lr}
 8012346:	4d07      	ldr	r5, [pc, #28]	@ (8012364 <_write_r+0x20>)
 8012348:	4604      	mov	r4, r0
 801234a:	4608      	mov	r0, r1
 801234c:	4611      	mov	r1, r2
 801234e:	2200      	movs	r2, #0
 8012350:	602a      	str	r2, [r5, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	f7ee fcb6 	bl	8000cc4 <_write>
 8012358:	1c43      	adds	r3, r0, #1
 801235a:	d102      	bne.n	8012362 <_write_r+0x1e>
 801235c:	682b      	ldr	r3, [r5, #0]
 801235e:	b103      	cbz	r3, 8012362 <_write_r+0x1e>
 8012360:	6023      	str	r3, [r4, #0]
 8012362:	bd38      	pop	{r3, r4, r5, pc}
 8012364:	24006208 	.word	0x24006208

08012368 <__errno>:
 8012368:	4b01      	ldr	r3, [pc, #4]	@ (8012370 <__errno+0x8>)
 801236a:	6818      	ldr	r0, [r3, #0]
 801236c:	4770      	bx	lr
 801236e:	bf00      	nop
 8012370:	240001f8 	.word	0x240001f8

08012374 <__libc_init_array>:
 8012374:	b570      	push	{r4, r5, r6, lr}
 8012376:	4d0d      	ldr	r5, [pc, #52]	@ (80123ac <__libc_init_array+0x38>)
 8012378:	4c0d      	ldr	r4, [pc, #52]	@ (80123b0 <__libc_init_array+0x3c>)
 801237a:	1b64      	subs	r4, r4, r5
 801237c:	10a4      	asrs	r4, r4, #2
 801237e:	2600      	movs	r6, #0
 8012380:	42a6      	cmp	r6, r4
 8012382:	d109      	bne.n	8012398 <__libc_init_array+0x24>
 8012384:	4d0b      	ldr	r5, [pc, #44]	@ (80123b4 <__libc_init_array+0x40>)
 8012386:	4c0c      	ldr	r4, [pc, #48]	@ (80123b8 <__libc_init_array+0x44>)
 8012388:	f002 fd0c 	bl	8014da4 <_init>
 801238c:	1b64      	subs	r4, r4, r5
 801238e:	10a4      	asrs	r4, r4, #2
 8012390:	2600      	movs	r6, #0
 8012392:	42a6      	cmp	r6, r4
 8012394:	d105      	bne.n	80123a2 <__libc_init_array+0x2e>
 8012396:	bd70      	pop	{r4, r5, r6, pc}
 8012398:	f855 3b04 	ldr.w	r3, [r5], #4
 801239c:	4798      	blx	r3
 801239e:	3601      	adds	r6, #1
 80123a0:	e7ee      	b.n	8012380 <__libc_init_array+0xc>
 80123a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80123a6:	4798      	blx	r3
 80123a8:	3601      	adds	r6, #1
 80123aa:	e7f2      	b.n	8012392 <__libc_init_array+0x1e>
 80123ac:	08015618 	.word	0x08015618
 80123b0:	08015618 	.word	0x08015618
 80123b4:	08015618 	.word	0x08015618
 80123b8:	0801561c 	.word	0x0801561c

080123bc <__retarget_lock_init_recursive>:
 80123bc:	4770      	bx	lr

080123be <__retarget_lock_acquire_recursive>:
 80123be:	4770      	bx	lr

080123c0 <__retarget_lock_release_recursive>:
 80123c0:	4770      	bx	lr

080123c2 <memcpy>:
 80123c2:	440a      	add	r2, r1
 80123c4:	4291      	cmp	r1, r2
 80123c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80123ca:	d100      	bne.n	80123ce <memcpy+0xc>
 80123cc:	4770      	bx	lr
 80123ce:	b510      	push	{r4, lr}
 80123d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123d8:	4291      	cmp	r1, r2
 80123da:	d1f9      	bne.n	80123d0 <memcpy+0xe>
 80123dc:	bd10      	pop	{r4, pc}
	...

080123e0 <nan>:
 80123e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80123e8 <nan+0x8>
 80123e4:	4770      	bx	lr
 80123e6:	bf00      	nop
 80123e8:	00000000 	.word	0x00000000
 80123ec:	7ff80000 	.word	0x7ff80000

080123f0 <nanf>:
 80123f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80123f8 <nanf+0x8>
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	7fc00000 	.word	0x7fc00000

080123fc <quorem>:
 80123fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012400:	6903      	ldr	r3, [r0, #16]
 8012402:	690c      	ldr	r4, [r1, #16]
 8012404:	42a3      	cmp	r3, r4
 8012406:	4607      	mov	r7, r0
 8012408:	db7e      	blt.n	8012508 <quorem+0x10c>
 801240a:	3c01      	subs	r4, #1
 801240c:	f101 0814 	add.w	r8, r1, #20
 8012410:	00a3      	lsls	r3, r4, #2
 8012412:	f100 0514 	add.w	r5, r0, #20
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801241c:	9301      	str	r3, [sp, #4]
 801241e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012426:	3301      	adds	r3, #1
 8012428:	429a      	cmp	r2, r3
 801242a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801242e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012432:	d32e      	bcc.n	8012492 <quorem+0x96>
 8012434:	f04f 0a00 	mov.w	sl, #0
 8012438:	46c4      	mov	ip, r8
 801243a:	46ae      	mov	lr, r5
 801243c:	46d3      	mov	fp, sl
 801243e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012442:	b298      	uxth	r0, r3
 8012444:	fb06 a000 	mla	r0, r6, r0, sl
 8012448:	0c02      	lsrs	r2, r0, #16
 801244a:	0c1b      	lsrs	r3, r3, #16
 801244c:	fb06 2303 	mla	r3, r6, r3, r2
 8012450:	f8de 2000 	ldr.w	r2, [lr]
 8012454:	b280      	uxth	r0, r0
 8012456:	b292      	uxth	r2, r2
 8012458:	1a12      	subs	r2, r2, r0
 801245a:	445a      	add	r2, fp
 801245c:	f8de 0000 	ldr.w	r0, [lr]
 8012460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012464:	b29b      	uxth	r3, r3
 8012466:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801246a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801246e:	b292      	uxth	r2, r2
 8012470:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012474:	45e1      	cmp	r9, ip
 8012476:	f84e 2b04 	str.w	r2, [lr], #4
 801247a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801247e:	d2de      	bcs.n	801243e <quorem+0x42>
 8012480:	9b00      	ldr	r3, [sp, #0]
 8012482:	58eb      	ldr	r3, [r5, r3]
 8012484:	b92b      	cbnz	r3, 8012492 <quorem+0x96>
 8012486:	9b01      	ldr	r3, [sp, #4]
 8012488:	3b04      	subs	r3, #4
 801248a:	429d      	cmp	r5, r3
 801248c:	461a      	mov	r2, r3
 801248e:	d32f      	bcc.n	80124f0 <quorem+0xf4>
 8012490:	613c      	str	r4, [r7, #16]
 8012492:	4638      	mov	r0, r7
 8012494:	f001 fca2 	bl	8013ddc <__mcmp>
 8012498:	2800      	cmp	r0, #0
 801249a:	db25      	blt.n	80124e8 <quorem+0xec>
 801249c:	4629      	mov	r1, r5
 801249e:	2000      	movs	r0, #0
 80124a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80124a4:	f8d1 c000 	ldr.w	ip, [r1]
 80124a8:	fa1f fe82 	uxth.w	lr, r2
 80124ac:	fa1f f38c 	uxth.w	r3, ip
 80124b0:	eba3 030e 	sub.w	r3, r3, lr
 80124b4:	4403      	add	r3, r0
 80124b6:	0c12      	lsrs	r2, r2, #16
 80124b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80124bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124c6:	45c1      	cmp	r9, r8
 80124c8:	f841 3b04 	str.w	r3, [r1], #4
 80124cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80124d0:	d2e6      	bcs.n	80124a0 <quorem+0xa4>
 80124d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124da:	b922      	cbnz	r2, 80124e6 <quorem+0xea>
 80124dc:	3b04      	subs	r3, #4
 80124de:	429d      	cmp	r5, r3
 80124e0:	461a      	mov	r2, r3
 80124e2:	d30b      	bcc.n	80124fc <quorem+0x100>
 80124e4:	613c      	str	r4, [r7, #16]
 80124e6:	3601      	adds	r6, #1
 80124e8:	4630      	mov	r0, r6
 80124ea:	b003      	add	sp, #12
 80124ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f0:	6812      	ldr	r2, [r2, #0]
 80124f2:	3b04      	subs	r3, #4
 80124f4:	2a00      	cmp	r2, #0
 80124f6:	d1cb      	bne.n	8012490 <quorem+0x94>
 80124f8:	3c01      	subs	r4, #1
 80124fa:	e7c6      	b.n	801248a <quorem+0x8e>
 80124fc:	6812      	ldr	r2, [r2, #0]
 80124fe:	3b04      	subs	r3, #4
 8012500:	2a00      	cmp	r2, #0
 8012502:	d1ef      	bne.n	80124e4 <quorem+0xe8>
 8012504:	3c01      	subs	r4, #1
 8012506:	e7ea      	b.n	80124de <quorem+0xe2>
 8012508:	2000      	movs	r0, #0
 801250a:	e7ee      	b.n	80124ea <quorem+0xee>
 801250c:	0000      	movs	r0, r0
	...

08012510 <_dtoa_r>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	ed2d 8b02 	vpush	{d8}
 8012518:	69c7      	ldr	r7, [r0, #28]
 801251a:	b091      	sub	sp, #68	@ 0x44
 801251c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012520:	ec55 4b10 	vmov	r4, r5, d0
 8012524:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012526:	9107      	str	r1, [sp, #28]
 8012528:	4681      	mov	r9, r0
 801252a:	9209      	str	r2, [sp, #36]	@ 0x24
 801252c:	930d      	str	r3, [sp, #52]	@ 0x34
 801252e:	b97f      	cbnz	r7, 8012550 <_dtoa_r+0x40>
 8012530:	2010      	movs	r0, #16
 8012532:	f001 f8cf 	bl	80136d4 <malloc>
 8012536:	4602      	mov	r2, r0
 8012538:	f8c9 001c 	str.w	r0, [r9, #28]
 801253c:	b920      	cbnz	r0, 8012548 <_dtoa_r+0x38>
 801253e:	4ba0      	ldr	r3, [pc, #640]	@ (80127c0 <_dtoa_r+0x2b0>)
 8012540:	21ef      	movs	r1, #239	@ 0xef
 8012542:	48a0      	ldr	r0, [pc, #640]	@ (80127c4 <_dtoa_r+0x2b4>)
 8012544:	f002 f8d4 	bl	80146f0 <__assert_func>
 8012548:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801254c:	6007      	str	r7, [r0, #0]
 801254e:	60c7      	str	r7, [r0, #12]
 8012550:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012554:	6819      	ldr	r1, [r3, #0]
 8012556:	b159      	cbz	r1, 8012570 <_dtoa_r+0x60>
 8012558:	685a      	ldr	r2, [r3, #4]
 801255a:	604a      	str	r2, [r1, #4]
 801255c:	2301      	movs	r3, #1
 801255e:	4093      	lsls	r3, r2
 8012560:	608b      	str	r3, [r1, #8]
 8012562:	4648      	mov	r0, r9
 8012564:	f001 f9be 	bl	80138e4 <_Bfree>
 8012568:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801256c:	2200      	movs	r2, #0
 801256e:	601a      	str	r2, [r3, #0]
 8012570:	1e2b      	subs	r3, r5, #0
 8012572:	bfbb      	ittet	lt
 8012574:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012578:	9303      	strlt	r3, [sp, #12]
 801257a:	2300      	movge	r3, #0
 801257c:	2201      	movlt	r2, #1
 801257e:	bfac      	ite	ge
 8012580:	6033      	strge	r3, [r6, #0]
 8012582:	6032      	strlt	r2, [r6, #0]
 8012584:	4b90      	ldr	r3, [pc, #576]	@ (80127c8 <_dtoa_r+0x2b8>)
 8012586:	9e03      	ldr	r6, [sp, #12]
 8012588:	43b3      	bics	r3, r6
 801258a:	d110      	bne.n	80125ae <_dtoa_r+0x9e>
 801258c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801258e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012592:	6013      	str	r3, [r2, #0]
 8012594:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012598:	4323      	orrs	r3, r4
 801259a:	f000 84e6 	beq.w	8012f6a <_dtoa_r+0xa5a>
 801259e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80125a0:	4f8a      	ldr	r7, [pc, #552]	@ (80127cc <_dtoa_r+0x2bc>)
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 84e8 	beq.w	8012f78 <_dtoa_r+0xa68>
 80125a8:	1cfb      	adds	r3, r7, #3
 80125aa:	f000 bce3 	b.w	8012f74 <_dtoa_r+0xa64>
 80125ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80125b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ba:	d10a      	bne.n	80125d2 <_dtoa_r+0xc2>
 80125bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80125be:	2301      	movs	r3, #1
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80125c4:	b113      	cbz	r3, 80125cc <_dtoa_r+0xbc>
 80125c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80125c8:	4b81      	ldr	r3, [pc, #516]	@ (80127d0 <_dtoa_r+0x2c0>)
 80125ca:	6013      	str	r3, [r2, #0]
 80125cc:	4f81      	ldr	r7, [pc, #516]	@ (80127d4 <_dtoa_r+0x2c4>)
 80125ce:	f000 bcd3 	b.w	8012f78 <_dtoa_r+0xa68>
 80125d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80125d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80125d6:	4648      	mov	r0, r9
 80125d8:	eeb0 0b48 	vmov.f64	d0, d8
 80125dc:	f001 fd1e 	bl	801401c <__d2b>
 80125e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80125e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125e6:	9001      	str	r0, [sp, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d045      	beq.n	8012678 <_dtoa_r+0x168>
 80125ec:	eeb0 7b48 	vmov.f64	d7, d8
 80125f0:	ee18 1a90 	vmov	r1, s17
 80125f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80125f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80125fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012600:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012604:	2500      	movs	r5, #0
 8012606:	ee07 1a90 	vmov	s15, r1
 801260a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801260e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80127a8 <_dtoa_r+0x298>
 8012612:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012616:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80127b0 <_dtoa_r+0x2a0>
 801261a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801261e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80127b8 <_dtoa_r+0x2a8>
 8012622:	ee07 3a90 	vmov	s15, r3
 8012626:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801262a:	eeb0 7b46 	vmov.f64	d7, d6
 801262e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012632:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012636:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801263e:	ee16 8a90 	vmov	r8, s13
 8012642:	d508      	bpl.n	8012656 <_dtoa_r+0x146>
 8012644:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012648:	eeb4 6b47 	vcmp.f64	d6, d7
 801264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012650:	bf18      	it	ne
 8012652:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012656:	f1b8 0f16 	cmp.w	r8, #22
 801265a:	d82b      	bhi.n	80126b4 <_dtoa_r+0x1a4>
 801265c:	495e      	ldr	r1, [pc, #376]	@ (80127d8 <_dtoa_r+0x2c8>)
 801265e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012662:	ed91 7b00 	vldr	d7, [r1]
 8012666:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266e:	d501      	bpl.n	8012674 <_dtoa_r+0x164>
 8012670:	f108 38ff 	add.w	r8, r8, #4294967295
 8012674:	2100      	movs	r1, #0
 8012676:	e01e      	b.n	80126b6 <_dtoa_r+0x1a6>
 8012678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801267a:	4413      	add	r3, r2
 801267c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012680:	2920      	cmp	r1, #32
 8012682:	bfc1      	itttt	gt
 8012684:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012688:	408e      	lslgt	r6, r1
 801268a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801268e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012692:	bfd6      	itet	le
 8012694:	f1c1 0120 	rsble	r1, r1, #32
 8012698:	4331      	orrgt	r1, r6
 801269a:	fa04 f101 	lslle.w	r1, r4, r1
 801269e:	ee07 1a90 	vmov	s15, r1
 80126a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80126a6:	3b01      	subs	r3, #1
 80126a8:	ee17 1a90 	vmov	r1, s15
 80126ac:	2501      	movs	r5, #1
 80126ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80126b2:	e7a8      	b.n	8012606 <_dtoa_r+0xf6>
 80126b4:	2101      	movs	r1, #1
 80126b6:	1ad2      	subs	r2, r2, r3
 80126b8:	1e53      	subs	r3, r2, #1
 80126ba:	9306      	str	r3, [sp, #24]
 80126bc:	bf45      	ittet	mi
 80126be:	f1c2 0301 	rsbmi	r3, r2, #1
 80126c2:	9304      	strmi	r3, [sp, #16]
 80126c4:	2300      	movpl	r3, #0
 80126c6:	2300      	movmi	r3, #0
 80126c8:	bf4c      	ite	mi
 80126ca:	9306      	strmi	r3, [sp, #24]
 80126cc:	9304      	strpl	r3, [sp, #16]
 80126ce:	f1b8 0f00 	cmp.w	r8, #0
 80126d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80126d4:	db18      	blt.n	8012708 <_dtoa_r+0x1f8>
 80126d6:	9b06      	ldr	r3, [sp, #24]
 80126d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80126dc:	4443      	add	r3, r8
 80126de:	9306      	str	r3, [sp, #24]
 80126e0:	2300      	movs	r3, #0
 80126e2:	9a07      	ldr	r2, [sp, #28]
 80126e4:	2a09      	cmp	r2, #9
 80126e6:	d845      	bhi.n	8012774 <_dtoa_r+0x264>
 80126e8:	2a05      	cmp	r2, #5
 80126ea:	bfc4      	itt	gt
 80126ec:	3a04      	subgt	r2, #4
 80126ee:	9207      	strgt	r2, [sp, #28]
 80126f0:	9a07      	ldr	r2, [sp, #28]
 80126f2:	f1a2 0202 	sub.w	r2, r2, #2
 80126f6:	bfcc      	ite	gt
 80126f8:	2400      	movgt	r4, #0
 80126fa:	2401      	movle	r4, #1
 80126fc:	2a03      	cmp	r2, #3
 80126fe:	d844      	bhi.n	801278a <_dtoa_r+0x27a>
 8012700:	e8df f002 	tbb	[pc, r2]
 8012704:	0b173634 	.word	0x0b173634
 8012708:	9b04      	ldr	r3, [sp, #16]
 801270a:	2200      	movs	r2, #0
 801270c:	eba3 0308 	sub.w	r3, r3, r8
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	920a      	str	r2, [sp, #40]	@ 0x28
 8012714:	f1c8 0300 	rsb	r3, r8, #0
 8012718:	e7e3      	b.n	80126e2 <_dtoa_r+0x1d2>
 801271a:	2201      	movs	r2, #1
 801271c:	9208      	str	r2, [sp, #32]
 801271e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012720:	eb08 0b02 	add.w	fp, r8, r2
 8012724:	f10b 0a01 	add.w	sl, fp, #1
 8012728:	4652      	mov	r2, sl
 801272a:	2a01      	cmp	r2, #1
 801272c:	bfb8      	it	lt
 801272e:	2201      	movlt	r2, #1
 8012730:	e006      	b.n	8012740 <_dtoa_r+0x230>
 8012732:	2201      	movs	r2, #1
 8012734:	9208      	str	r2, [sp, #32]
 8012736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012738:	2a00      	cmp	r2, #0
 801273a:	dd29      	ble.n	8012790 <_dtoa_r+0x280>
 801273c:	4693      	mov	fp, r2
 801273e:	4692      	mov	sl, r2
 8012740:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012744:	2100      	movs	r1, #0
 8012746:	2004      	movs	r0, #4
 8012748:	f100 0614 	add.w	r6, r0, #20
 801274c:	4296      	cmp	r6, r2
 801274e:	d926      	bls.n	801279e <_dtoa_r+0x28e>
 8012750:	6079      	str	r1, [r7, #4]
 8012752:	4648      	mov	r0, r9
 8012754:	9305      	str	r3, [sp, #20]
 8012756:	f001 f885 	bl	8013864 <_Balloc>
 801275a:	9b05      	ldr	r3, [sp, #20]
 801275c:	4607      	mov	r7, r0
 801275e:	2800      	cmp	r0, #0
 8012760:	d13e      	bne.n	80127e0 <_dtoa_r+0x2d0>
 8012762:	4b1e      	ldr	r3, [pc, #120]	@ (80127dc <_dtoa_r+0x2cc>)
 8012764:	4602      	mov	r2, r0
 8012766:	f240 11af 	movw	r1, #431	@ 0x1af
 801276a:	e6ea      	b.n	8012542 <_dtoa_r+0x32>
 801276c:	2200      	movs	r2, #0
 801276e:	e7e1      	b.n	8012734 <_dtoa_r+0x224>
 8012770:	2200      	movs	r2, #0
 8012772:	e7d3      	b.n	801271c <_dtoa_r+0x20c>
 8012774:	2401      	movs	r4, #1
 8012776:	2200      	movs	r2, #0
 8012778:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801277c:	f04f 3bff 	mov.w	fp, #4294967295
 8012780:	2100      	movs	r1, #0
 8012782:	46da      	mov	sl, fp
 8012784:	2212      	movs	r2, #18
 8012786:	9109      	str	r1, [sp, #36]	@ 0x24
 8012788:	e7da      	b.n	8012740 <_dtoa_r+0x230>
 801278a:	2201      	movs	r2, #1
 801278c:	9208      	str	r2, [sp, #32]
 801278e:	e7f5      	b.n	801277c <_dtoa_r+0x26c>
 8012790:	f04f 0b01 	mov.w	fp, #1
 8012794:	46da      	mov	sl, fp
 8012796:	465a      	mov	r2, fp
 8012798:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801279c:	e7d0      	b.n	8012740 <_dtoa_r+0x230>
 801279e:	3101      	adds	r1, #1
 80127a0:	0040      	lsls	r0, r0, #1
 80127a2:	e7d1      	b.n	8012748 <_dtoa_r+0x238>
 80127a4:	f3af 8000 	nop.w
 80127a8:	636f4361 	.word	0x636f4361
 80127ac:	3fd287a7 	.word	0x3fd287a7
 80127b0:	8b60c8b3 	.word	0x8b60c8b3
 80127b4:	3fc68a28 	.word	0x3fc68a28
 80127b8:	509f79fb 	.word	0x509f79fb
 80127bc:	3fd34413 	.word	0x3fd34413
 80127c0:	080150eb 	.word	0x080150eb
 80127c4:	08015102 	.word	0x08015102
 80127c8:	7ff00000 	.word	0x7ff00000
 80127cc:	080150e7 	.word	0x080150e7
 80127d0:	080150b3 	.word	0x080150b3
 80127d4:	080150b2 	.word	0x080150b2
 80127d8:	08015300 	.word	0x08015300
 80127dc:	0801515a 	.word	0x0801515a
 80127e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80127e4:	f1ba 0f0e 	cmp.w	sl, #14
 80127e8:	6010      	str	r0, [r2, #0]
 80127ea:	d86e      	bhi.n	80128ca <_dtoa_r+0x3ba>
 80127ec:	2c00      	cmp	r4, #0
 80127ee:	d06c      	beq.n	80128ca <_dtoa_r+0x3ba>
 80127f0:	f1b8 0f00 	cmp.w	r8, #0
 80127f4:	f340 80b4 	ble.w	8012960 <_dtoa_r+0x450>
 80127f8:	4ac8      	ldr	r2, [pc, #800]	@ (8012b1c <_dtoa_r+0x60c>)
 80127fa:	f008 010f 	and.w	r1, r8, #15
 80127fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012802:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012806:	ed92 7b00 	vldr	d7, [r2]
 801280a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801280e:	f000 809b 	beq.w	8012948 <_dtoa_r+0x438>
 8012812:	4ac3      	ldr	r2, [pc, #780]	@ (8012b20 <_dtoa_r+0x610>)
 8012814:	ed92 6b08 	vldr	d6, [r2, #32]
 8012818:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801281c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012820:	f001 010f 	and.w	r1, r1, #15
 8012824:	2203      	movs	r2, #3
 8012826:	48be      	ldr	r0, [pc, #760]	@ (8012b20 <_dtoa_r+0x610>)
 8012828:	2900      	cmp	r1, #0
 801282a:	f040 808f 	bne.w	801294c <_dtoa_r+0x43c>
 801282e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012832:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012836:	ed8d 7b02 	vstr	d7, [sp, #8]
 801283a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801283c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012840:	2900      	cmp	r1, #0
 8012842:	f000 80b3 	beq.w	80129ac <_dtoa_r+0x49c>
 8012846:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801284a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012852:	f140 80ab 	bpl.w	80129ac <_dtoa_r+0x49c>
 8012856:	f1ba 0f00 	cmp.w	sl, #0
 801285a:	f000 80a7 	beq.w	80129ac <_dtoa_r+0x49c>
 801285e:	f1bb 0f00 	cmp.w	fp, #0
 8012862:	dd30      	ble.n	80128c6 <_dtoa_r+0x3b6>
 8012864:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012868:	ee27 7b06 	vmul.f64	d7, d7, d6
 801286c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012870:	f108 31ff 	add.w	r1, r8, #4294967295
 8012874:	9105      	str	r1, [sp, #20]
 8012876:	3201      	adds	r2, #1
 8012878:	465c      	mov	r4, fp
 801287a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801287e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012882:	ee07 2a90 	vmov	s15, r2
 8012886:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801288a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801288e:	ee15 2a90 	vmov	r2, s11
 8012892:	ec51 0b15 	vmov	r0, r1, d5
 8012896:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801289a:	2c00      	cmp	r4, #0
 801289c:	f040 808a 	bne.w	80129b4 <_dtoa_r+0x4a4>
 80128a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80128a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80128a8:	ec41 0b17 	vmov	d7, r0, r1
 80128ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b4:	f300 826a 	bgt.w	8012d8c <_dtoa_r+0x87c>
 80128b8:	eeb1 7b47 	vneg.f64	d7, d7
 80128bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c4:	d423      	bmi.n	801290e <_dtoa_r+0x3fe>
 80128c6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80128ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80128cc:	2a00      	cmp	r2, #0
 80128ce:	f2c0 8129 	blt.w	8012b24 <_dtoa_r+0x614>
 80128d2:	f1b8 0f0e 	cmp.w	r8, #14
 80128d6:	f300 8125 	bgt.w	8012b24 <_dtoa_r+0x614>
 80128da:	4b90      	ldr	r3, [pc, #576]	@ (8012b1c <_dtoa_r+0x60c>)
 80128dc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80128e0:	ed93 6b00 	vldr	d6, [r3]
 80128e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f280 80c8 	bge.w	8012a7c <_dtoa_r+0x56c>
 80128ec:	f1ba 0f00 	cmp.w	sl, #0
 80128f0:	f300 80c4 	bgt.w	8012a7c <_dtoa_r+0x56c>
 80128f4:	d10b      	bne.n	801290e <_dtoa_r+0x3fe>
 80128f6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80128fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80128fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012902:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290a:	f2c0 823c 	blt.w	8012d86 <_dtoa_r+0x876>
 801290e:	2400      	movs	r4, #0
 8012910:	4625      	mov	r5, r4
 8012912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012914:	43db      	mvns	r3, r3
 8012916:	9305      	str	r3, [sp, #20]
 8012918:	463e      	mov	r6, r7
 801291a:	f04f 0800 	mov.w	r8, #0
 801291e:	4621      	mov	r1, r4
 8012920:	4648      	mov	r0, r9
 8012922:	f000 ffdf 	bl	80138e4 <_Bfree>
 8012926:	2d00      	cmp	r5, #0
 8012928:	f000 80a2 	beq.w	8012a70 <_dtoa_r+0x560>
 801292c:	f1b8 0f00 	cmp.w	r8, #0
 8012930:	d005      	beq.n	801293e <_dtoa_r+0x42e>
 8012932:	45a8      	cmp	r8, r5
 8012934:	d003      	beq.n	801293e <_dtoa_r+0x42e>
 8012936:	4641      	mov	r1, r8
 8012938:	4648      	mov	r0, r9
 801293a:	f000 ffd3 	bl	80138e4 <_Bfree>
 801293e:	4629      	mov	r1, r5
 8012940:	4648      	mov	r0, r9
 8012942:	f000 ffcf 	bl	80138e4 <_Bfree>
 8012946:	e093      	b.n	8012a70 <_dtoa_r+0x560>
 8012948:	2202      	movs	r2, #2
 801294a:	e76c      	b.n	8012826 <_dtoa_r+0x316>
 801294c:	07cc      	lsls	r4, r1, #31
 801294e:	d504      	bpl.n	801295a <_dtoa_r+0x44a>
 8012950:	ed90 6b00 	vldr	d6, [r0]
 8012954:	3201      	adds	r2, #1
 8012956:	ee27 7b06 	vmul.f64	d7, d7, d6
 801295a:	1049      	asrs	r1, r1, #1
 801295c:	3008      	adds	r0, #8
 801295e:	e763      	b.n	8012828 <_dtoa_r+0x318>
 8012960:	d022      	beq.n	80129a8 <_dtoa_r+0x498>
 8012962:	f1c8 0100 	rsb	r1, r8, #0
 8012966:	4a6d      	ldr	r2, [pc, #436]	@ (8012b1c <_dtoa_r+0x60c>)
 8012968:	f001 000f 	and.w	r0, r1, #15
 801296c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012970:	ed92 7b00 	vldr	d7, [r2]
 8012974:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012978:	ed8d 7b02 	vstr	d7, [sp, #8]
 801297c:	4868      	ldr	r0, [pc, #416]	@ (8012b20 <_dtoa_r+0x610>)
 801297e:	1109      	asrs	r1, r1, #4
 8012980:	2400      	movs	r4, #0
 8012982:	2202      	movs	r2, #2
 8012984:	b929      	cbnz	r1, 8012992 <_dtoa_r+0x482>
 8012986:	2c00      	cmp	r4, #0
 8012988:	f43f af57 	beq.w	801283a <_dtoa_r+0x32a>
 801298c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012990:	e753      	b.n	801283a <_dtoa_r+0x32a>
 8012992:	07ce      	lsls	r6, r1, #31
 8012994:	d505      	bpl.n	80129a2 <_dtoa_r+0x492>
 8012996:	ed90 6b00 	vldr	d6, [r0]
 801299a:	3201      	adds	r2, #1
 801299c:	2401      	movs	r4, #1
 801299e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129a2:	1049      	asrs	r1, r1, #1
 80129a4:	3008      	adds	r0, #8
 80129a6:	e7ed      	b.n	8012984 <_dtoa_r+0x474>
 80129a8:	2202      	movs	r2, #2
 80129aa:	e746      	b.n	801283a <_dtoa_r+0x32a>
 80129ac:	f8cd 8014 	str.w	r8, [sp, #20]
 80129b0:	4654      	mov	r4, sl
 80129b2:	e762      	b.n	801287a <_dtoa_r+0x36a>
 80129b4:	4a59      	ldr	r2, [pc, #356]	@ (8012b1c <_dtoa_r+0x60c>)
 80129b6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80129ba:	ed12 4b02 	vldr	d4, [r2, #-8]
 80129be:	9a08      	ldr	r2, [sp, #32]
 80129c0:	ec41 0b17 	vmov	d7, r0, r1
 80129c4:	443c      	add	r4, r7
 80129c6:	b34a      	cbz	r2, 8012a1c <_dtoa_r+0x50c>
 80129c8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80129cc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80129d0:	463e      	mov	r6, r7
 80129d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80129d6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80129da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80129de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80129e2:	ee14 2a90 	vmov	r2, s9
 80129e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80129ea:	3230      	adds	r2, #48	@ 0x30
 80129ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80129f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f8:	f806 2b01 	strb.w	r2, [r6], #1
 80129fc:	d438      	bmi.n	8012a70 <_dtoa_r+0x560>
 80129fe:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012a02:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a0a:	d46e      	bmi.n	8012aea <_dtoa_r+0x5da>
 8012a0c:	42a6      	cmp	r6, r4
 8012a0e:	f43f af5a 	beq.w	80128c6 <_dtoa_r+0x3b6>
 8012a12:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a16:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a1a:	e7e0      	b.n	80129de <_dtoa_r+0x4ce>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	463e      	mov	r6, r7
 8012a20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a24:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012a28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a2c:	ee14 2a90 	vmov	r2, s9
 8012a30:	3230      	adds	r2, #48	@ 0x30
 8012a32:	f806 2b01 	strb.w	r2, [r6], #1
 8012a36:	42a6      	cmp	r6, r4
 8012a38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a40:	d119      	bne.n	8012a76 <_dtoa_r+0x566>
 8012a42:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012a46:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012a4a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a52:	dc4a      	bgt.n	8012aea <_dtoa_r+0x5da>
 8012a54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012a58:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a60:	f57f af31 	bpl.w	80128c6 <_dtoa_r+0x3b6>
 8012a64:	460e      	mov	r6, r1
 8012a66:	3901      	subs	r1, #1
 8012a68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012a6c:	2b30      	cmp	r3, #48	@ 0x30
 8012a6e:	d0f9      	beq.n	8012a64 <_dtoa_r+0x554>
 8012a70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012a74:	e027      	b.n	8012ac6 <_dtoa_r+0x5b6>
 8012a76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a7a:	e7d5      	b.n	8012a28 <_dtoa_r+0x518>
 8012a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a80:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012a84:	463e      	mov	r6, r7
 8012a86:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012a8a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012a8e:	ee15 3a10 	vmov	r3, s10
 8012a92:	3330      	adds	r3, #48	@ 0x30
 8012a94:	f806 3b01 	strb.w	r3, [r6], #1
 8012a98:	1bf3      	subs	r3, r6, r7
 8012a9a:	459a      	cmp	sl, r3
 8012a9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012aa0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012aa4:	d132      	bne.n	8012b0c <_dtoa_r+0x5fc>
 8012aa6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab2:	dc18      	bgt.n	8012ae6 <_dtoa_r+0x5d6>
 8012ab4:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012abc:	d103      	bne.n	8012ac6 <_dtoa_r+0x5b6>
 8012abe:	ee15 3a10 	vmov	r3, s10
 8012ac2:	07db      	lsls	r3, r3, #31
 8012ac4:	d40f      	bmi.n	8012ae6 <_dtoa_r+0x5d6>
 8012ac6:	9901      	ldr	r1, [sp, #4]
 8012ac8:	4648      	mov	r0, r9
 8012aca:	f000 ff0b 	bl	80138e4 <_Bfree>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ad2:	7033      	strb	r3, [r6, #0]
 8012ad4:	f108 0301 	add.w	r3, r8, #1
 8012ad8:	6013      	str	r3, [r2, #0]
 8012ada:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f000 824b 	beq.w	8012f78 <_dtoa_r+0xa68>
 8012ae2:	601e      	str	r6, [r3, #0]
 8012ae4:	e248      	b.n	8012f78 <_dtoa_r+0xa68>
 8012ae6:	f8cd 8014 	str.w	r8, [sp, #20]
 8012aea:	4633      	mov	r3, r6
 8012aec:	461e      	mov	r6, r3
 8012aee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012af2:	2a39      	cmp	r2, #57	@ 0x39
 8012af4:	d106      	bne.n	8012b04 <_dtoa_r+0x5f4>
 8012af6:	429f      	cmp	r7, r3
 8012af8:	d1f8      	bne.n	8012aec <_dtoa_r+0x5dc>
 8012afa:	9a05      	ldr	r2, [sp, #20]
 8012afc:	3201      	adds	r2, #1
 8012afe:	9205      	str	r2, [sp, #20]
 8012b00:	2230      	movs	r2, #48	@ 0x30
 8012b02:	703a      	strb	r2, [r7, #0]
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	3201      	adds	r2, #1
 8012b08:	701a      	strb	r2, [r3, #0]
 8012b0a:	e7b1      	b.n	8012a70 <_dtoa_r+0x560>
 8012b0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b18:	d1b5      	bne.n	8012a86 <_dtoa_r+0x576>
 8012b1a:	e7d4      	b.n	8012ac6 <_dtoa_r+0x5b6>
 8012b1c:	08015300 	.word	0x08015300
 8012b20:	080152d8 	.word	0x080152d8
 8012b24:	9908      	ldr	r1, [sp, #32]
 8012b26:	2900      	cmp	r1, #0
 8012b28:	f000 80e9 	beq.w	8012cfe <_dtoa_r+0x7ee>
 8012b2c:	9907      	ldr	r1, [sp, #28]
 8012b2e:	2901      	cmp	r1, #1
 8012b30:	f300 80cb 	bgt.w	8012cca <_dtoa_r+0x7ba>
 8012b34:	2d00      	cmp	r5, #0
 8012b36:	f000 80c4 	beq.w	8012cc2 <_dtoa_r+0x7b2>
 8012b3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012b3e:	9e04      	ldr	r6, [sp, #16]
 8012b40:	461c      	mov	r4, r3
 8012b42:	9305      	str	r3, [sp, #20]
 8012b44:	9b04      	ldr	r3, [sp, #16]
 8012b46:	4413      	add	r3, r2
 8012b48:	9304      	str	r3, [sp, #16]
 8012b4a:	9b06      	ldr	r3, [sp, #24]
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	4413      	add	r3, r2
 8012b50:	4648      	mov	r0, r9
 8012b52:	9306      	str	r3, [sp, #24]
 8012b54:	f000 ffc4 	bl	8013ae0 <__i2b>
 8012b58:	9b05      	ldr	r3, [sp, #20]
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	b166      	cbz	r6, 8012b78 <_dtoa_r+0x668>
 8012b5e:	9a06      	ldr	r2, [sp, #24]
 8012b60:	2a00      	cmp	r2, #0
 8012b62:	dd09      	ble.n	8012b78 <_dtoa_r+0x668>
 8012b64:	42b2      	cmp	r2, r6
 8012b66:	9904      	ldr	r1, [sp, #16]
 8012b68:	bfa8      	it	ge
 8012b6a:	4632      	movge	r2, r6
 8012b6c:	1a89      	subs	r1, r1, r2
 8012b6e:	9104      	str	r1, [sp, #16]
 8012b70:	9906      	ldr	r1, [sp, #24]
 8012b72:	1ab6      	subs	r6, r6, r2
 8012b74:	1a8a      	subs	r2, r1, r2
 8012b76:	9206      	str	r2, [sp, #24]
 8012b78:	b30b      	cbz	r3, 8012bbe <_dtoa_r+0x6ae>
 8012b7a:	9a08      	ldr	r2, [sp, #32]
 8012b7c:	2a00      	cmp	r2, #0
 8012b7e:	f000 80c5 	beq.w	8012d0c <_dtoa_r+0x7fc>
 8012b82:	2c00      	cmp	r4, #0
 8012b84:	f000 80bf 	beq.w	8012d06 <_dtoa_r+0x7f6>
 8012b88:	4629      	mov	r1, r5
 8012b8a:	4622      	mov	r2, r4
 8012b8c:	4648      	mov	r0, r9
 8012b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b90:	f001 f85e 	bl	8013c50 <__pow5mult>
 8012b94:	9a01      	ldr	r2, [sp, #4]
 8012b96:	4601      	mov	r1, r0
 8012b98:	4605      	mov	r5, r0
 8012b9a:	4648      	mov	r0, r9
 8012b9c:	f000 ffb6 	bl	8013b0c <__multiply>
 8012ba0:	9901      	ldr	r1, [sp, #4]
 8012ba2:	9005      	str	r0, [sp, #20]
 8012ba4:	4648      	mov	r0, r9
 8012ba6:	f000 fe9d 	bl	80138e4 <_Bfree>
 8012baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bac:	1b1b      	subs	r3, r3, r4
 8012bae:	f000 80b0 	beq.w	8012d12 <_dtoa_r+0x802>
 8012bb2:	9905      	ldr	r1, [sp, #20]
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	4648      	mov	r0, r9
 8012bb8:	f001 f84a 	bl	8013c50 <__pow5mult>
 8012bbc:	9001      	str	r0, [sp, #4]
 8012bbe:	2101      	movs	r1, #1
 8012bc0:	4648      	mov	r0, r9
 8012bc2:	f000 ff8d 	bl	8013ae0 <__i2b>
 8012bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bc8:	4604      	mov	r4, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f000 81da 	beq.w	8012f84 <_dtoa_r+0xa74>
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	4601      	mov	r1, r0
 8012bd4:	4648      	mov	r0, r9
 8012bd6:	f001 f83b 	bl	8013c50 <__pow5mult>
 8012bda:	9b07      	ldr	r3, [sp, #28]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	4604      	mov	r4, r0
 8012be0:	f300 80a0 	bgt.w	8012d24 <_dtoa_r+0x814>
 8012be4:	9b02      	ldr	r3, [sp, #8]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	f040 8096 	bne.w	8012d18 <_dtoa_r+0x808>
 8012bec:	9b03      	ldr	r3, [sp, #12]
 8012bee:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012bf2:	2a00      	cmp	r2, #0
 8012bf4:	f040 8092 	bne.w	8012d1c <_dtoa_r+0x80c>
 8012bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012bfc:	0d12      	lsrs	r2, r2, #20
 8012bfe:	0512      	lsls	r2, r2, #20
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	f000 808d 	beq.w	8012d20 <_dtoa_r+0x810>
 8012c06:	9b04      	ldr	r3, [sp, #16]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	9304      	str	r3, [sp, #16]
 8012c0c:	9b06      	ldr	r3, [sp, #24]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	9306      	str	r3, [sp, #24]
 8012c12:	2301      	movs	r3, #1
 8012c14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f000 81b9 	beq.w	8012f90 <_dtoa_r+0xa80>
 8012c1e:	6922      	ldr	r2, [r4, #16]
 8012c20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012c24:	6910      	ldr	r0, [r2, #16]
 8012c26:	f000 ff0f 	bl	8013a48 <__hi0bits>
 8012c2a:	f1c0 0020 	rsb	r0, r0, #32
 8012c2e:	9b06      	ldr	r3, [sp, #24]
 8012c30:	4418      	add	r0, r3
 8012c32:	f010 001f 	ands.w	r0, r0, #31
 8012c36:	f000 8081 	beq.w	8012d3c <_dtoa_r+0x82c>
 8012c3a:	f1c0 0220 	rsb	r2, r0, #32
 8012c3e:	2a04      	cmp	r2, #4
 8012c40:	dd73      	ble.n	8012d2a <_dtoa_r+0x81a>
 8012c42:	9b04      	ldr	r3, [sp, #16]
 8012c44:	f1c0 001c 	rsb	r0, r0, #28
 8012c48:	4403      	add	r3, r0
 8012c4a:	9304      	str	r3, [sp, #16]
 8012c4c:	9b06      	ldr	r3, [sp, #24]
 8012c4e:	4406      	add	r6, r0
 8012c50:	4403      	add	r3, r0
 8012c52:	9306      	str	r3, [sp, #24]
 8012c54:	9b04      	ldr	r3, [sp, #16]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	dd05      	ble.n	8012c66 <_dtoa_r+0x756>
 8012c5a:	9901      	ldr	r1, [sp, #4]
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4648      	mov	r0, r9
 8012c60:	f001 f850 	bl	8013d04 <__lshift>
 8012c64:	9001      	str	r0, [sp, #4]
 8012c66:	9b06      	ldr	r3, [sp, #24]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	dd05      	ble.n	8012c78 <_dtoa_r+0x768>
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	461a      	mov	r2, r3
 8012c70:	4648      	mov	r0, r9
 8012c72:	f001 f847 	bl	8013d04 <__lshift>
 8012c76:	4604      	mov	r4, r0
 8012c78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d060      	beq.n	8012d40 <_dtoa_r+0x830>
 8012c7e:	9801      	ldr	r0, [sp, #4]
 8012c80:	4621      	mov	r1, r4
 8012c82:	f001 f8ab 	bl	8013ddc <__mcmp>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	da5a      	bge.n	8012d40 <_dtoa_r+0x830>
 8012c8a:	f108 33ff 	add.w	r3, r8, #4294967295
 8012c8e:	9305      	str	r3, [sp, #20]
 8012c90:	9901      	ldr	r1, [sp, #4]
 8012c92:	2300      	movs	r3, #0
 8012c94:	220a      	movs	r2, #10
 8012c96:	4648      	mov	r0, r9
 8012c98:	f000 fe46 	bl	8013928 <__multadd>
 8012c9c:	9b08      	ldr	r3, [sp, #32]
 8012c9e:	9001      	str	r0, [sp, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 8177 	beq.w	8012f94 <_dtoa_r+0xa84>
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	2300      	movs	r3, #0
 8012caa:	220a      	movs	r2, #10
 8012cac:	4648      	mov	r0, r9
 8012cae:	f000 fe3b 	bl	8013928 <__multadd>
 8012cb2:	f1bb 0f00 	cmp.w	fp, #0
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	dc6e      	bgt.n	8012d98 <_dtoa_r+0x888>
 8012cba:	9b07      	ldr	r3, [sp, #28]
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	dc48      	bgt.n	8012d52 <_dtoa_r+0x842>
 8012cc0:	e06a      	b.n	8012d98 <_dtoa_r+0x888>
 8012cc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012cc8:	e739      	b.n	8012b3e <_dtoa_r+0x62e>
 8012cca:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012cce:	42a3      	cmp	r3, r4
 8012cd0:	db07      	blt.n	8012ce2 <_dtoa_r+0x7d2>
 8012cd2:	f1ba 0f00 	cmp.w	sl, #0
 8012cd6:	eba3 0404 	sub.w	r4, r3, r4
 8012cda:	db0b      	blt.n	8012cf4 <_dtoa_r+0x7e4>
 8012cdc:	9e04      	ldr	r6, [sp, #16]
 8012cde:	4652      	mov	r2, sl
 8012ce0:	e72f      	b.n	8012b42 <_dtoa_r+0x632>
 8012ce2:	1ae2      	subs	r2, r4, r3
 8012ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ce6:	9e04      	ldr	r6, [sp, #16]
 8012ce8:	4413      	add	r3, r2
 8012cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cec:	4652      	mov	r2, sl
 8012cee:	4623      	mov	r3, r4
 8012cf0:	2400      	movs	r4, #0
 8012cf2:	e726      	b.n	8012b42 <_dtoa_r+0x632>
 8012cf4:	9a04      	ldr	r2, [sp, #16]
 8012cf6:	eba2 060a 	sub.w	r6, r2, sl
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	e721      	b.n	8012b42 <_dtoa_r+0x632>
 8012cfe:	9e04      	ldr	r6, [sp, #16]
 8012d00:	9d08      	ldr	r5, [sp, #32]
 8012d02:	461c      	mov	r4, r3
 8012d04:	e72a      	b.n	8012b5c <_dtoa_r+0x64c>
 8012d06:	9a01      	ldr	r2, [sp, #4]
 8012d08:	9205      	str	r2, [sp, #20]
 8012d0a:	e752      	b.n	8012bb2 <_dtoa_r+0x6a2>
 8012d0c:	9901      	ldr	r1, [sp, #4]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	e751      	b.n	8012bb6 <_dtoa_r+0x6a6>
 8012d12:	9b05      	ldr	r3, [sp, #20]
 8012d14:	9301      	str	r3, [sp, #4]
 8012d16:	e752      	b.n	8012bbe <_dtoa_r+0x6ae>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	e77b      	b.n	8012c14 <_dtoa_r+0x704>
 8012d1c:	9b02      	ldr	r3, [sp, #8]
 8012d1e:	e779      	b.n	8012c14 <_dtoa_r+0x704>
 8012d20:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012d22:	e778      	b.n	8012c16 <_dtoa_r+0x706>
 8012d24:	2300      	movs	r3, #0
 8012d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d28:	e779      	b.n	8012c1e <_dtoa_r+0x70e>
 8012d2a:	d093      	beq.n	8012c54 <_dtoa_r+0x744>
 8012d2c:	9b04      	ldr	r3, [sp, #16]
 8012d2e:	321c      	adds	r2, #28
 8012d30:	4413      	add	r3, r2
 8012d32:	9304      	str	r3, [sp, #16]
 8012d34:	9b06      	ldr	r3, [sp, #24]
 8012d36:	4416      	add	r6, r2
 8012d38:	4413      	add	r3, r2
 8012d3a:	e78a      	b.n	8012c52 <_dtoa_r+0x742>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	e7f5      	b.n	8012d2c <_dtoa_r+0x81c>
 8012d40:	f1ba 0f00 	cmp.w	sl, #0
 8012d44:	f8cd 8014 	str.w	r8, [sp, #20]
 8012d48:	46d3      	mov	fp, sl
 8012d4a:	dc21      	bgt.n	8012d90 <_dtoa_r+0x880>
 8012d4c:	9b07      	ldr	r3, [sp, #28]
 8012d4e:	2b02      	cmp	r3, #2
 8012d50:	dd1e      	ble.n	8012d90 <_dtoa_r+0x880>
 8012d52:	f1bb 0f00 	cmp.w	fp, #0
 8012d56:	f47f addc 	bne.w	8012912 <_dtoa_r+0x402>
 8012d5a:	4621      	mov	r1, r4
 8012d5c:	465b      	mov	r3, fp
 8012d5e:	2205      	movs	r2, #5
 8012d60:	4648      	mov	r0, r9
 8012d62:	f000 fde1 	bl	8013928 <__multadd>
 8012d66:	4601      	mov	r1, r0
 8012d68:	4604      	mov	r4, r0
 8012d6a:	9801      	ldr	r0, [sp, #4]
 8012d6c:	f001 f836 	bl	8013ddc <__mcmp>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	f77f adce 	ble.w	8012912 <_dtoa_r+0x402>
 8012d76:	463e      	mov	r6, r7
 8012d78:	2331      	movs	r3, #49	@ 0x31
 8012d7a:	f806 3b01 	strb.w	r3, [r6], #1
 8012d7e:	9b05      	ldr	r3, [sp, #20]
 8012d80:	3301      	adds	r3, #1
 8012d82:	9305      	str	r3, [sp, #20]
 8012d84:	e5c9      	b.n	801291a <_dtoa_r+0x40a>
 8012d86:	f8cd 8014 	str.w	r8, [sp, #20]
 8012d8a:	4654      	mov	r4, sl
 8012d8c:	4625      	mov	r5, r4
 8012d8e:	e7f2      	b.n	8012d76 <_dtoa_r+0x866>
 8012d90:	9b08      	ldr	r3, [sp, #32]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f000 8102 	beq.w	8012f9c <_dtoa_r+0xa8c>
 8012d98:	2e00      	cmp	r6, #0
 8012d9a:	dd05      	ble.n	8012da8 <_dtoa_r+0x898>
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	4632      	mov	r2, r6
 8012da0:	4648      	mov	r0, r9
 8012da2:	f000 ffaf 	bl	8013d04 <__lshift>
 8012da6:	4605      	mov	r5, r0
 8012da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d058      	beq.n	8012e60 <_dtoa_r+0x950>
 8012dae:	6869      	ldr	r1, [r5, #4]
 8012db0:	4648      	mov	r0, r9
 8012db2:	f000 fd57 	bl	8013864 <_Balloc>
 8012db6:	4606      	mov	r6, r0
 8012db8:	b928      	cbnz	r0, 8012dc6 <_dtoa_r+0x8b6>
 8012dba:	4b82      	ldr	r3, [pc, #520]	@ (8012fc4 <_dtoa_r+0xab4>)
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012dc2:	f7ff bbbe 	b.w	8012542 <_dtoa_r+0x32>
 8012dc6:	692a      	ldr	r2, [r5, #16]
 8012dc8:	3202      	adds	r2, #2
 8012dca:	0092      	lsls	r2, r2, #2
 8012dcc:	f105 010c 	add.w	r1, r5, #12
 8012dd0:	300c      	adds	r0, #12
 8012dd2:	f7ff faf6 	bl	80123c2 <memcpy>
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	4631      	mov	r1, r6
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f000 ff92 	bl	8013d04 <__lshift>
 8012de0:	1c7b      	adds	r3, r7, #1
 8012de2:	9304      	str	r3, [sp, #16]
 8012de4:	eb07 030b 	add.w	r3, r7, fp
 8012de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dea:	9b02      	ldr	r3, [sp, #8]
 8012dec:	f003 0301 	and.w	r3, r3, #1
 8012df0:	46a8      	mov	r8, r5
 8012df2:	9308      	str	r3, [sp, #32]
 8012df4:	4605      	mov	r5, r0
 8012df6:	9b04      	ldr	r3, [sp, #16]
 8012df8:	9801      	ldr	r0, [sp, #4]
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	f103 3bff 	add.w	fp, r3, #4294967295
 8012e00:	f7ff fafc 	bl	80123fc <quorem>
 8012e04:	4641      	mov	r1, r8
 8012e06:	9002      	str	r0, [sp, #8]
 8012e08:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012e0c:	9801      	ldr	r0, [sp, #4]
 8012e0e:	f000 ffe5 	bl	8013ddc <__mcmp>
 8012e12:	462a      	mov	r2, r5
 8012e14:	9006      	str	r0, [sp, #24]
 8012e16:	4621      	mov	r1, r4
 8012e18:	4648      	mov	r0, r9
 8012e1a:	f000 fffb 	bl	8013e14 <__mdiff>
 8012e1e:	68c2      	ldr	r2, [r0, #12]
 8012e20:	4606      	mov	r6, r0
 8012e22:	b9fa      	cbnz	r2, 8012e64 <_dtoa_r+0x954>
 8012e24:	4601      	mov	r1, r0
 8012e26:	9801      	ldr	r0, [sp, #4]
 8012e28:	f000 ffd8 	bl	8013ddc <__mcmp>
 8012e2c:	4602      	mov	r2, r0
 8012e2e:	4631      	mov	r1, r6
 8012e30:	4648      	mov	r0, r9
 8012e32:	920a      	str	r2, [sp, #40]	@ 0x28
 8012e34:	f000 fd56 	bl	80138e4 <_Bfree>
 8012e38:	9b07      	ldr	r3, [sp, #28]
 8012e3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e3c:	9e04      	ldr	r6, [sp, #16]
 8012e3e:	ea42 0103 	orr.w	r1, r2, r3
 8012e42:	9b08      	ldr	r3, [sp, #32]
 8012e44:	4319      	orrs	r1, r3
 8012e46:	d10f      	bne.n	8012e68 <_dtoa_r+0x958>
 8012e48:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012e4c:	d028      	beq.n	8012ea0 <_dtoa_r+0x990>
 8012e4e:	9b06      	ldr	r3, [sp, #24]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dd02      	ble.n	8012e5a <_dtoa_r+0x94a>
 8012e54:	9b02      	ldr	r3, [sp, #8]
 8012e56:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012e5a:	f88b a000 	strb.w	sl, [fp]
 8012e5e:	e55e      	b.n	801291e <_dtoa_r+0x40e>
 8012e60:	4628      	mov	r0, r5
 8012e62:	e7bd      	b.n	8012de0 <_dtoa_r+0x8d0>
 8012e64:	2201      	movs	r2, #1
 8012e66:	e7e2      	b.n	8012e2e <_dtoa_r+0x91e>
 8012e68:	9b06      	ldr	r3, [sp, #24]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	db04      	blt.n	8012e78 <_dtoa_r+0x968>
 8012e6e:	9907      	ldr	r1, [sp, #28]
 8012e70:	430b      	orrs	r3, r1
 8012e72:	9908      	ldr	r1, [sp, #32]
 8012e74:	430b      	orrs	r3, r1
 8012e76:	d120      	bne.n	8012eba <_dtoa_r+0x9aa>
 8012e78:	2a00      	cmp	r2, #0
 8012e7a:	ddee      	ble.n	8012e5a <_dtoa_r+0x94a>
 8012e7c:	9901      	ldr	r1, [sp, #4]
 8012e7e:	2201      	movs	r2, #1
 8012e80:	4648      	mov	r0, r9
 8012e82:	f000 ff3f 	bl	8013d04 <__lshift>
 8012e86:	4621      	mov	r1, r4
 8012e88:	9001      	str	r0, [sp, #4]
 8012e8a:	f000 ffa7 	bl	8013ddc <__mcmp>
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	dc03      	bgt.n	8012e9a <_dtoa_r+0x98a>
 8012e92:	d1e2      	bne.n	8012e5a <_dtoa_r+0x94a>
 8012e94:	f01a 0f01 	tst.w	sl, #1
 8012e98:	d0df      	beq.n	8012e5a <_dtoa_r+0x94a>
 8012e9a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012e9e:	d1d9      	bne.n	8012e54 <_dtoa_r+0x944>
 8012ea0:	2339      	movs	r3, #57	@ 0x39
 8012ea2:	f88b 3000 	strb.w	r3, [fp]
 8012ea6:	4633      	mov	r3, r6
 8012ea8:	461e      	mov	r6, r3
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012eb0:	2a39      	cmp	r2, #57	@ 0x39
 8012eb2:	d052      	beq.n	8012f5a <_dtoa_r+0xa4a>
 8012eb4:	3201      	adds	r2, #1
 8012eb6:	701a      	strb	r2, [r3, #0]
 8012eb8:	e531      	b.n	801291e <_dtoa_r+0x40e>
 8012eba:	2a00      	cmp	r2, #0
 8012ebc:	dd07      	ble.n	8012ece <_dtoa_r+0x9be>
 8012ebe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012ec2:	d0ed      	beq.n	8012ea0 <_dtoa_r+0x990>
 8012ec4:	f10a 0301 	add.w	r3, sl, #1
 8012ec8:	f88b 3000 	strb.w	r3, [fp]
 8012ecc:	e527      	b.n	801291e <_dtoa_r+0x40e>
 8012ece:	9b04      	ldr	r3, [sp, #16]
 8012ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ed2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d029      	beq.n	8012f2e <_dtoa_r+0xa1e>
 8012eda:	9901      	ldr	r1, [sp, #4]
 8012edc:	2300      	movs	r3, #0
 8012ede:	220a      	movs	r2, #10
 8012ee0:	4648      	mov	r0, r9
 8012ee2:	f000 fd21 	bl	8013928 <__multadd>
 8012ee6:	45a8      	cmp	r8, r5
 8012ee8:	9001      	str	r0, [sp, #4]
 8012eea:	f04f 0300 	mov.w	r3, #0
 8012eee:	f04f 020a 	mov.w	r2, #10
 8012ef2:	4641      	mov	r1, r8
 8012ef4:	4648      	mov	r0, r9
 8012ef6:	d107      	bne.n	8012f08 <_dtoa_r+0x9f8>
 8012ef8:	f000 fd16 	bl	8013928 <__multadd>
 8012efc:	4680      	mov	r8, r0
 8012efe:	4605      	mov	r5, r0
 8012f00:	9b04      	ldr	r3, [sp, #16]
 8012f02:	3301      	adds	r3, #1
 8012f04:	9304      	str	r3, [sp, #16]
 8012f06:	e776      	b.n	8012df6 <_dtoa_r+0x8e6>
 8012f08:	f000 fd0e 	bl	8013928 <__multadd>
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4680      	mov	r8, r0
 8012f10:	2300      	movs	r3, #0
 8012f12:	220a      	movs	r2, #10
 8012f14:	4648      	mov	r0, r9
 8012f16:	f000 fd07 	bl	8013928 <__multadd>
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	e7f0      	b.n	8012f00 <_dtoa_r+0x9f0>
 8012f1e:	f1bb 0f00 	cmp.w	fp, #0
 8012f22:	bfcc      	ite	gt
 8012f24:	465e      	movgt	r6, fp
 8012f26:	2601      	movle	r6, #1
 8012f28:	443e      	add	r6, r7
 8012f2a:	f04f 0800 	mov.w	r8, #0
 8012f2e:	9901      	ldr	r1, [sp, #4]
 8012f30:	2201      	movs	r2, #1
 8012f32:	4648      	mov	r0, r9
 8012f34:	f000 fee6 	bl	8013d04 <__lshift>
 8012f38:	4621      	mov	r1, r4
 8012f3a:	9001      	str	r0, [sp, #4]
 8012f3c:	f000 ff4e 	bl	8013ddc <__mcmp>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	dcb0      	bgt.n	8012ea6 <_dtoa_r+0x996>
 8012f44:	d102      	bne.n	8012f4c <_dtoa_r+0xa3c>
 8012f46:	f01a 0f01 	tst.w	sl, #1
 8012f4a:	d1ac      	bne.n	8012ea6 <_dtoa_r+0x996>
 8012f4c:	4633      	mov	r3, r6
 8012f4e:	461e      	mov	r6, r3
 8012f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f54:	2a30      	cmp	r2, #48	@ 0x30
 8012f56:	d0fa      	beq.n	8012f4e <_dtoa_r+0xa3e>
 8012f58:	e4e1      	b.n	801291e <_dtoa_r+0x40e>
 8012f5a:	429f      	cmp	r7, r3
 8012f5c:	d1a4      	bne.n	8012ea8 <_dtoa_r+0x998>
 8012f5e:	9b05      	ldr	r3, [sp, #20]
 8012f60:	3301      	adds	r3, #1
 8012f62:	9305      	str	r3, [sp, #20]
 8012f64:	2331      	movs	r3, #49	@ 0x31
 8012f66:	703b      	strb	r3, [r7, #0]
 8012f68:	e4d9      	b.n	801291e <_dtoa_r+0x40e>
 8012f6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f6c:	4f16      	ldr	r7, [pc, #88]	@ (8012fc8 <_dtoa_r+0xab8>)
 8012f6e:	b11b      	cbz	r3, 8012f78 <_dtoa_r+0xa68>
 8012f70:	f107 0308 	add.w	r3, r7, #8
 8012f74:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012f76:	6013      	str	r3, [r2, #0]
 8012f78:	4638      	mov	r0, r7
 8012f7a:	b011      	add	sp, #68	@ 0x44
 8012f7c:	ecbd 8b02 	vpop	{d8}
 8012f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f84:	9b07      	ldr	r3, [sp, #28]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	f77f ae2c 	ble.w	8012be4 <_dtoa_r+0x6d4>
 8012f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f90:	2001      	movs	r0, #1
 8012f92:	e64c      	b.n	8012c2e <_dtoa_r+0x71e>
 8012f94:	f1bb 0f00 	cmp.w	fp, #0
 8012f98:	f77f aed8 	ble.w	8012d4c <_dtoa_r+0x83c>
 8012f9c:	463e      	mov	r6, r7
 8012f9e:	9801      	ldr	r0, [sp, #4]
 8012fa0:	4621      	mov	r1, r4
 8012fa2:	f7ff fa2b 	bl	80123fc <quorem>
 8012fa6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012faa:	f806 ab01 	strb.w	sl, [r6], #1
 8012fae:	1bf2      	subs	r2, r6, r7
 8012fb0:	4593      	cmp	fp, r2
 8012fb2:	ddb4      	ble.n	8012f1e <_dtoa_r+0xa0e>
 8012fb4:	9901      	ldr	r1, [sp, #4]
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	220a      	movs	r2, #10
 8012fba:	4648      	mov	r0, r9
 8012fbc:	f000 fcb4 	bl	8013928 <__multadd>
 8012fc0:	9001      	str	r0, [sp, #4]
 8012fc2:	e7ec      	b.n	8012f9e <_dtoa_r+0xa8e>
 8012fc4:	0801515a 	.word	0x0801515a
 8012fc8:	080150de 	.word	0x080150de

08012fcc <_free_r>:
 8012fcc:	b538      	push	{r3, r4, r5, lr}
 8012fce:	4605      	mov	r5, r0
 8012fd0:	2900      	cmp	r1, #0
 8012fd2:	d041      	beq.n	8013058 <_free_r+0x8c>
 8012fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fd8:	1f0c      	subs	r4, r1, #4
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	bfb8      	it	lt
 8012fde:	18e4      	addlt	r4, r4, r3
 8012fe0:	f000 fc34 	bl	801384c <__malloc_lock>
 8012fe4:	4a1d      	ldr	r2, [pc, #116]	@ (801305c <_free_r+0x90>)
 8012fe6:	6813      	ldr	r3, [r2, #0]
 8012fe8:	b933      	cbnz	r3, 8012ff8 <_free_r+0x2c>
 8012fea:	6063      	str	r3, [r4, #4]
 8012fec:	6014      	str	r4, [r2, #0]
 8012fee:	4628      	mov	r0, r5
 8012ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ff4:	f000 bc30 	b.w	8013858 <__malloc_unlock>
 8012ff8:	42a3      	cmp	r3, r4
 8012ffa:	d908      	bls.n	801300e <_free_r+0x42>
 8012ffc:	6820      	ldr	r0, [r4, #0]
 8012ffe:	1821      	adds	r1, r4, r0
 8013000:	428b      	cmp	r3, r1
 8013002:	bf01      	itttt	eq
 8013004:	6819      	ldreq	r1, [r3, #0]
 8013006:	685b      	ldreq	r3, [r3, #4]
 8013008:	1809      	addeq	r1, r1, r0
 801300a:	6021      	streq	r1, [r4, #0]
 801300c:	e7ed      	b.n	8012fea <_free_r+0x1e>
 801300e:	461a      	mov	r2, r3
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	b10b      	cbz	r3, 8013018 <_free_r+0x4c>
 8013014:	42a3      	cmp	r3, r4
 8013016:	d9fa      	bls.n	801300e <_free_r+0x42>
 8013018:	6811      	ldr	r1, [r2, #0]
 801301a:	1850      	adds	r0, r2, r1
 801301c:	42a0      	cmp	r0, r4
 801301e:	d10b      	bne.n	8013038 <_free_r+0x6c>
 8013020:	6820      	ldr	r0, [r4, #0]
 8013022:	4401      	add	r1, r0
 8013024:	1850      	adds	r0, r2, r1
 8013026:	4283      	cmp	r3, r0
 8013028:	6011      	str	r1, [r2, #0]
 801302a:	d1e0      	bne.n	8012fee <_free_r+0x22>
 801302c:	6818      	ldr	r0, [r3, #0]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	6053      	str	r3, [r2, #4]
 8013032:	4408      	add	r0, r1
 8013034:	6010      	str	r0, [r2, #0]
 8013036:	e7da      	b.n	8012fee <_free_r+0x22>
 8013038:	d902      	bls.n	8013040 <_free_r+0x74>
 801303a:	230c      	movs	r3, #12
 801303c:	602b      	str	r3, [r5, #0]
 801303e:	e7d6      	b.n	8012fee <_free_r+0x22>
 8013040:	6820      	ldr	r0, [r4, #0]
 8013042:	1821      	adds	r1, r4, r0
 8013044:	428b      	cmp	r3, r1
 8013046:	bf04      	itt	eq
 8013048:	6819      	ldreq	r1, [r3, #0]
 801304a:	685b      	ldreq	r3, [r3, #4]
 801304c:	6063      	str	r3, [r4, #4]
 801304e:	bf04      	itt	eq
 8013050:	1809      	addeq	r1, r1, r0
 8013052:	6021      	streq	r1, [r4, #0]
 8013054:	6054      	str	r4, [r2, #4]
 8013056:	e7ca      	b.n	8012fee <_free_r+0x22>
 8013058:	bd38      	pop	{r3, r4, r5, pc}
 801305a:	bf00      	nop
 801305c:	24006214 	.word	0x24006214

08013060 <rshift>:
 8013060:	6903      	ldr	r3, [r0, #16]
 8013062:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801306a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801306e:	f100 0414 	add.w	r4, r0, #20
 8013072:	dd45      	ble.n	8013100 <rshift+0xa0>
 8013074:	f011 011f 	ands.w	r1, r1, #31
 8013078:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801307c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013080:	d10c      	bne.n	801309c <rshift+0x3c>
 8013082:	f100 0710 	add.w	r7, r0, #16
 8013086:	4629      	mov	r1, r5
 8013088:	42b1      	cmp	r1, r6
 801308a:	d334      	bcc.n	80130f6 <rshift+0x96>
 801308c:	1a9b      	subs	r3, r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	1eea      	subs	r2, r5, #3
 8013092:	4296      	cmp	r6, r2
 8013094:	bf38      	it	cc
 8013096:	2300      	movcc	r3, #0
 8013098:	4423      	add	r3, r4
 801309a:	e015      	b.n	80130c8 <rshift+0x68>
 801309c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80130a0:	f1c1 0820 	rsb	r8, r1, #32
 80130a4:	40cf      	lsrs	r7, r1
 80130a6:	f105 0e04 	add.w	lr, r5, #4
 80130aa:	46a1      	mov	r9, r4
 80130ac:	4576      	cmp	r6, lr
 80130ae:	46f4      	mov	ip, lr
 80130b0:	d815      	bhi.n	80130de <rshift+0x7e>
 80130b2:	1a9a      	subs	r2, r3, r2
 80130b4:	0092      	lsls	r2, r2, #2
 80130b6:	3a04      	subs	r2, #4
 80130b8:	3501      	adds	r5, #1
 80130ba:	42ae      	cmp	r6, r5
 80130bc:	bf38      	it	cc
 80130be:	2200      	movcc	r2, #0
 80130c0:	18a3      	adds	r3, r4, r2
 80130c2:	50a7      	str	r7, [r4, r2]
 80130c4:	b107      	cbz	r7, 80130c8 <rshift+0x68>
 80130c6:	3304      	adds	r3, #4
 80130c8:	1b1a      	subs	r2, r3, r4
 80130ca:	42a3      	cmp	r3, r4
 80130cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80130d0:	bf08      	it	eq
 80130d2:	2300      	moveq	r3, #0
 80130d4:	6102      	str	r2, [r0, #16]
 80130d6:	bf08      	it	eq
 80130d8:	6143      	streq	r3, [r0, #20]
 80130da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130de:	f8dc c000 	ldr.w	ip, [ip]
 80130e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80130e6:	ea4c 0707 	orr.w	r7, ip, r7
 80130ea:	f849 7b04 	str.w	r7, [r9], #4
 80130ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130f2:	40cf      	lsrs	r7, r1
 80130f4:	e7da      	b.n	80130ac <rshift+0x4c>
 80130f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80130fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80130fe:	e7c3      	b.n	8013088 <rshift+0x28>
 8013100:	4623      	mov	r3, r4
 8013102:	e7e1      	b.n	80130c8 <rshift+0x68>

08013104 <__hexdig_fun>:
 8013104:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013108:	2b09      	cmp	r3, #9
 801310a:	d802      	bhi.n	8013112 <__hexdig_fun+0xe>
 801310c:	3820      	subs	r0, #32
 801310e:	b2c0      	uxtb	r0, r0
 8013110:	4770      	bx	lr
 8013112:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013116:	2b05      	cmp	r3, #5
 8013118:	d801      	bhi.n	801311e <__hexdig_fun+0x1a>
 801311a:	3847      	subs	r0, #71	@ 0x47
 801311c:	e7f7      	b.n	801310e <__hexdig_fun+0xa>
 801311e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013122:	2b05      	cmp	r3, #5
 8013124:	d801      	bhi.n	801312a <__hexdig_fun+0x26>
 8013126:	3827      	subs	r0, #39	@ 0x27
 8013128:	e7f1      	b.n	801310e <__hexdig_fun+0xa>
 801312a:	2000      	movs	r0, #0
 801312c:	4770      	bx	lr
	...

08013130 <__gethex>:
 8013130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013134:	b085      	sub	sp, #20
 8013136:	468a      	mov	sl, r1
 8013138:	9302      	str	r3, [sp, #8]
 801313a:	680b      	ldr	r3, [r1, #0]
 801313c:	9001      	str	r0, [sp, #4]
 801313e:	4690      	mov	r8, r2
 8013140:	1c9c      	adds	r4, r3, #2
 8013142:	46a1      	mov	r9, r4
 8013144:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013148:	2830      	cmp	r0, #48	@ 0x30
 801314a:	d0fa      	beq.n	8013142 <__gethex+0x12>
 801314c:	eba9 0303 	sub.w	r3, r9, r3
 8013150:	f1a3 0b02 	sub.w	fp, r3, #2
 8013154:	f7ff ffd6 	bl	8013104 <__hexdig_fun>
 8013158:	4605      	mov	r5, r0
 801315a:	2800      	cmp	r0, #0
 801315c:	d168      	bne.n	8013230 <__gethex+0x100>
 801315e:	49a0      	ldr	r1, [pc, #640]	@ (80133e0 <__gethex+0x2b0>)
 8013160:	2201      	movs	r2, #1
 8013162:	4648      	mov	r0, r9
 8013164:	f7ff f804 	bl	8012170 <strncmp>
 8013168:	4607      	mov	r7, r0
 801316a:	2800      	cmp	r0, #0
 801316c:	d167      	bne.n	801323e <__gethex+0x10e>
 801316e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013172:	4626      	mov	r6, r4
 8013174:	f7ff ffc6 	bl	8013104 <__hexdig_fun>
 8013178:	2800      	cmp	r0, #0
 801317a:	d062      	beq.n	8013242 <__gethex+0x112>
 801317c:	4623      	mov	r3, r4
 801317e:	7818      	ldrb	r0, [r3, #0]
 8013180:	2830      	cmp	r0, #48	@ 0x30
 8013182:	4699      	mov	r9, r3
 8013184:	f103 0301 	add.w	r3, r3, #1
 8013188:	d0f9      	beq.n	801317e <__gethex+0x4e>
 801318a:	f7ff ffbb 	bl	8013104 <__hexdig_fun>
 801318e:	fab0 f580 	clz	r5, r0
 8013192:	096d      	lsrs	r5, r5, #5
 8013194:	f04f 0b01 	mov.w	fp, #1
 8013198:	464a      	mov	r2, r9
 801319a:	4616      	mov	r6, r2
 801319c:	3201      	adds	r2, #1
 801319e:	7830      	ldrb	r0, [r6, #0]
 80131a0:	f7ff ffb0 	bl	8013104 <__hexdig_fun>
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d1f8      	bne.n	801319a <__gethex+0x6a>
 80131a8:	498d      	ldr	r1, [pc, #564]	@ (80133e0 <__gethex+0x2b0>)
 80131aa:	2201      	movs	r2, #1
 80131ac:	4630      	mov	r0, r6
 80131ae:	f7fe ffdf 	bl	8012170 <strncmp>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d13f      	bne.n	8013236 <__gethex+0x106>
 80131b6:	b944      	cbnz	r4, 80131ca <__gethex+0x9a>
 80131b8:	1c74      	adds	r4, r6, #1
 80131ba:	4622      	mov	r2, r4
 80131bc:	4616      	mov	r6, r2
 80131be:	3201      	adds	r2, #1
 80131c0:	7830      	ldrb	r0, [r6, #0]
 80131c2:	f7ff ff9f 	bl	8013104 <__hexdig_fun>
 80131c6:	2800      	cmp	r0, #0
 80131c8:	d1f8      	bne.n	80131bc <__gethex+0x8c>
 80131ca:	1ba4      	subs	r4, r4, r6
 80131cc:	00a7      	lsls	r7, r4, #2
 80131ce:	7833      	ldrb	r3, [r6, #0]
 80131d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80131d4:	2b50      	cmp	r3, #80	@ 0x50
 80131d6:	d13e      	bne.n	8013256 <__gethex+0x126>
 80131d8:	7873      	ldrb	r3, [r6, #1]
 80131da:	2b2b      	cmp	r3, #43	@ 0x2b
 80131dc:	d033      	beq.n	8013246 <__gethex+0x116>
 80131de:	2b2d      	cmp	r3, #45	@ 0x2d
 80131e0:	d034      	beq.n	801324c <__gethex+0x11c>
 80131e2:	1c71      	adds	r1, r6, #1
 80131e4:	2400      	movs	r4, #0
 80131e6:	7808      	ldrb	r0, [r1, #0]
 80131e8:	f7ff ff8c 	bl	8013104 <__hexdig_fun>
 80131ec:	1e43      	subs	r3, r0, #1
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	2b18      	cmp	r3, #24
 80131f2:	d830      	bhi.n	8013256 <__gethex+0x126>
 80131f4:	f1a0 0210 	sub.w	r2, r0, #16
 80131f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131fc:	f7ff ff82 	bl	8013104 <__hexdig_fun>
 8013200:	f100 3cff 	add.w	ip, r0, #4294967295
 8013204:	fa5f fc8c 	uxtb.w	ip, ip
 8013208:	f1bc 0f18 	cmp.w	ip, #24
 801320c:	f04f 030a 	mov.w	r3, #10
 8013210:	d91e      	bls.n	8013250 <__gethex+0x120>
 8013212:	b104      	cbz	r4, 8013216 <__gethex+0xe6>
 8013214:	4252      	negs	r2, r2
 8013216:	4417      	add	r7, r2
 8013218:	f8ca 1000 	str.w	r1, [sl]
 801321c:	b1ed      	cbz	r5, 801325a <__gethex+0x12a>
 801321e:	f1bb 0f00 	cmp.w	fp, #0
 8013222:	bf0c      	ite	eq
 8013224:	2506      	moveq	r5, #6
 8013226:	2500      	movne	r5, #0
 8013228:	4628      	mov	r0, r5
 801322a:	b005      	add	sp, #20
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013230:	2500      	movs	r5, #0
 8013232:	462c      	mov	r4, r5
 8013234:	e7b0      	b.n	8013198 <__gethex+0x68>
 8013236:	2c00      	cmp	r4, #0
 8013238:	d1c7      	bne.n	80131ca <__gethex+0x9a>
 801323a:	4627      	mov	r7, r4
 801323c:	e7c7      	b.n	80131ce <__gethex+0x9e>
 801323e:	464e      	mov	r6, r9
 8013240:	462f      	mov	r7, r5
 8013242:	2501      	movs	r5, #1
 8013244:	e7c3      	b.n	80131ce <__gethex+0x9e>
 8013246:	2400      	movs	r4, #0
 8013248:	1cb1      	adds	r1, r6, #2
 801324a:	e7cc      	b.n	80131e6 <__gethex+0xb6>
 801324c:	2401      	movs	r4, #1
 801324e:	e7fb      	b.n	8013248 <__gethex+0x118>
 8013250:	fb03 0002 	mla	r0, r3, r2, r0
 8013254:	e7ce      	b.n	80131f4 <__gethex+0xc4>
 8013256:	4631      	mov	r1, r6
 8013258:	e7de      	b.n	8013218 <__gethex+0xe8>
 801325a:	eba6 0309 	sub.w	r3, r6, r9
 801325e:	3b01      	subs	r3, #1
 8013260:	4629      	mov	r1, r5
 8013262:	2b07      	cmp	r3, #7
 8013264:	dc0a      	bgt.n	801327c <__gethex+0x14c>
 8013266:	9801      	ldr	r0, [sp, #4]
 8013268:	f000 fafc 	bl	8013864 <_Balloc>
 801326c:	4604      	mov	r4, r0
 801326e:	b940      	cbnz	r0, 8013282 <__gethex+0x152>
 8013270:	4b5c      	ldr	r3, [pc, #368]	@ (80133e4 <__gethex+0x2b4>)
 8013272:	4602      	mov	r2, r0
 8013274:	21e4      	movs	r1, #228	@ 0xe4
 8013276:	485c      	ldr	r0, [pc, #368]	@ (80133e8 <__gethex+0x2b8>)
 8013278:	f001 fa3a 	bl	80146f0 <__assert_func>
 801327c:	3101      	adds	r1, #1
 801327e:	105b      	asrs	r3, r3, #1
 8013280:	e7ef      	b.n	8013262 <__gethex+0x132>
 8013282:	f100 0a14 	add.w	sl, r0, #20
 8013286:	2300      	movs	r3, #0
 8013288:	4655      	mov	r5, sl
 801328a:	469b      	mov	fp, r3
 801328c:	45b1      	cmp	r9, r6
 801328e:	d337      	bcc.n	8013300 <__gethex+0x1d0>
 8013290:	f845 bb04 	str.w	fp, [r5], #4
 8013294:	eba5 050a 	sub.w	r5, r5, sl
 8013298:	10ad      	asrs	r5, r5, #2
 801329a:	6125      	str	r5, [r4, #16]
 801329c:	4658      	mov	r0, fp
 801329e:	f000 fbd3 	bl	8013a48 <__hi0bits>
 80132a2:	016d      	lsls	r5, r5, #5
 80132a4:	f8d8 6000 	ldr.w	r6, [r8]
 80132a8:	1a2d      	subs	r5, r5, r0
 80132aa:	42b5      	cmp	r5, r6
 80132ac:	dd54      	ble.n	8013358 <__gethex+0x228>
 80132ae:	1bad      	subs	r5, r5, r6
 80132b0:	4629      	mov	r1, r5
 80132b2:	4620      	mov	r0, r4
 80132b4:	f000 ff5c 	bl	8014170 <__any_on>
 80132b8:	4681      	mov	r9, r0
 80132ba:	b178      	cbz	r0, 80132dc <__gethex+0x1ac>
 80132bc:	1e6b      	subs	r3, r5, #1
 80132be:	1159      	asrs	r1, r3, #5
 80132c0:	f003 021f 	and.w	r2, r3, #31
 80132c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80132c8:	f04f 0901 	mov.w	r9, #1
 80132cc:	fa09 f202 	lsl.w	r2, r9, r2
 80132d0:	420a      	tst	r2, r1
 80132d2:	d003      	beq.n	80132dc <__gethex+0x1ac>
 80132d4:	454b      	cmp	r3, r9
 80132d6:	dc36      	bgt.n	8013346 <__gethex+0x216>
 80132d8:	f04f 0902 	mov.w	r9, #2
 80132dc:	4629      	mov	r1, r5
 80132de:	4620      	mov	r0, r4
 80132e0:	f7ff febe 	bl	8013060 <rshift>
 80132e4:	442f      	add	r7, r5
 80132e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80132ea:	42bb      	cmp	r3, r7
 80132ec:	da42      	bge.n	8013374 <__gethex+0x244>
 80132ee:	9801      	ldr	r0, [sp, #4]
 80132f0:	4621      	mov	r1, r4
 80132f2:	f000 faf7 	bl	80138e4 <_Bfree>
 80132f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132f8:	2300      	movs	r3, #0
 80132fa:	6013      	str	r3, [r2, #0]
 80132fc:	25a3      	movs	r5, #163	@ 0xa3
 80132fe:	e793      	b.n	8013228 <__gethex+0xf8>
 8013300:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013304:	2a2e      	cmp	r2, #46	@ 0x2e
 8013306:	d012      	beq.n	801332e <__gethex+0x1fe>
 8013308:	2b20      	cmp	r3, #32
 801330a:	d104      	bne.n	8013316 <__gethex+0x1e6>
 801330c:	f845 bb04 	str.w	fp, [r5], #4
 8013310:	f04f 0b00 	mov.w	fp, #0
 8013314:	465b      	mov	r3, fp
 8013316:	7830      	ldrb	r0, [r6, #0]
 8013318:	9303      	str	r3, [sp, #12]
 801331a:	f7ff fef3 	bl	8013104 <__hexdig_fun>
 801331e:	9b03      	ldr	r3, [sp, #12]
 8013320:	f000 000f 	and.w	r0, r0, #15
 8013324:	4098      	lsls	r0, r3
 8013326:	ea4b 0b00 	orr.w	fp, fp, r0
 801332a:	3304      	adds	r3, #4
 801332c:	e7ae      	b.n	801328c <__gethex+0x15c>
 801332e:	45b1      	cmp	r9, r6
 8013330:	d8ea      	bhi.n	8013308 <__gethex+0x1d8>
 8013332:	492b      	ldr	r1, [pc, #172]	@ (80133e0 <__gethex+0x2b0>)
 8013334:	9303      	str	r3, [sp, #12]
 8013336:	2201      	movs	r2, #1
 8013338:	4630      	mov	r0, r6
 801333a:	f7fe ff19 	bl	8012170 <strncmp>
 801333e:	9b03      	ldr	r3, [sp, #12]
 8013340:	2800      	cmp	r0, #0
 8013342:	d1e1      	bne.n	8013308 <__gethex+0x1d8>
 8013344:	e7a2      	b.n	801328c <__gethex+0x15c>
 8013346:	1ea9      	subs	r1, r5, #2
 8013348:	4620      	mov	r0, r4
 801334a:	f000 ff11 	bl	8014170 <__any_on>
 801334e:	2800      	cmp	r0, #0
 8013350:	d0c2      	beq.n	80132d8 <__gethex+0x1a8>
 8013352:	f04f 0903 	mov.w	r9, #3
 8013356:	e7c1      	b.n	80132dc <__gethex+0x1ac>
 8013358:	da09      	bge.n	801336e <__gethex+0x23e>
 801335a:	1b75      	subs	r5, r6, r5
 801335c:	4621      	mov	r1, r4
 801335e:	9801      	ldr	r0, [sp, #4]
 8013360:	462a      	mov	r2, r5
 8013362:	f000 fccf 	bl	8013d04 <__lshift>
 8013366:	1b7f      	subs	r7, r7, r5
 8013368:	4604      	mov	r4, r0
 801336a:	f100 0a14 	add.w	sl, r0, #20
 801336e:	f04f 0900 	mov.w	r9, #0
 8013372:	e7b8      	b.n	80132e6 <__gethex+0x1b6>
 8013374:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013378:	42bd      	cmp	r5, r7
 801337a:	dd6f      	ble.n	801345c <__gethex+0x32c>
 801337c:	1bed      	subs	r5, r5, r7
 801337e:	42ae      	cmp	r6, r5
 8013380:	dc34      	bgt.n	80133ec <__gethex+0x2bc>
 8013382:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013386:	2b02      	cmp	r3, #2
 8013388:	d022      	beq.n	80133d0 <__gethex+0x2a0>
 801338a:	2b03      	cmp	r3, #3
 801338c:	d024      	beq.n	80133d8 <__gethex+0x2a8>
 801338e:	2b01      	cmp	r3, #1
 8013390:	d115      	bne.n	80133be <__gethex+0x28e>
 8013392:	42ae      	cmp	r6, r5
 8013394:	d113      	bne.n	80133be <__gethex+0x28e>
 8013396:	2e01      	cmp	r6, #1
 8013398:	d10b      	bne.n	80133b2 <__gethex+0x282>
 801339a:	9a02      	ldr	r2, [sp, #8]
 801339c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80133a0:	6013      	str	r3, [r2, #0]
 80133a2:	2301      	movs	r3, #1
 80133a4:	6123      	str	r3, [r4, #16]
 80133a6:	f8ca 3000 	str.w	r3, [sl]
 80133aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133ac:	2562      	movs	r5, #98	@ 0x62
 80133ae:	601c      	str	r4, [r3, #0]
 80133b0:	e73a      	b.n	8013228 <__gethex+0xf8>
 80133b2:	1e71      	subs	r1, r6, #1
 80133b4:	4620      	mov	r0, r4
 80133b6:	f000 fedb 	bl	8014170 <__any_on>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d1ed      	bne.n	801339a <__gethex+0x26a>
 80133be:	9801      	ldr	r0, [sp, #4]
 80133c0:	4621      	mov	r1, r4
 80133c2:	f000 fa8f 	bl	80138e4 <_Bfree>
 80133c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80133c8:	2300      	movs	r3, #0
 80133ca:	6013      	str	r3, [r2, #0]
 80133cc:	2550      	movs	r5, #80	@ 0x50
 80133ce:	e72b      	b.n	8013228 <__gethex+0xf8>
 80133d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d1f3      	bne.n	80133be <__gethex+0x28e>
 80133d6:	e7e0      	b.n	801339a <__gethex+0x26a>
 80133d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1dd      	bne.n	801339a <__gethex+0x26a>
 80133de:	e7ee      	b.n	80133be <__gethex+0x28e>
 80133e0:	080150a0 	.word	0x080150a0
 80133e4:	0801515a 	.word	0x0801515a
 80133e8:	0801516b 	.word	0x0801516b
 80133ec:	1e6f      	subs	r7, r5, #1
 80133ee:	f1b9 0f00 	cmp.w	r9, #0
 80133f2:	d130      	bne.n	8013456 <__gethex+0x326>
 80133f4:	b127      	cbz	r7, 8013400 <__gethex+0x2d0>
 80133f6:	4639      	mov	r1, r7
 80133f8:	4620      	mov	r0, r4
 80133fa:	f000 feb9 	bl	8014170 <__any_on>
 80133fe:	4681      	mov	r9, r0
 8013400:	117a      	asrs	r2, r7, #5
 8013402:	2301      	movs	r3, #1
 8013404:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013408:	f007 071f 	and.w	r7, r7, #31
 801340c:	40bb      	lsls	r3, r7
 801340e:	4213      	tst	r3, r2
 8013410:	4629      	mov	r1, r5
 8013412:	4620      	mov	r0, r4
 8013414:	bf18      	it	ne
 8013416:	f049 0902 	orrne.w	r9, r9, #2
 801341a:	f7ff fe21 	bl	8013060 <rshift>
 801341e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013422:	1b76      	subs	r6, r6, r5
 8013424:	2502      	movs	r5, #2
 8013426:	f1b9 0f00 	cmp.w	r9, #0
 801342a:	d047      	beq.n	80134bc <__gethex+0x38c>
 801342c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013430:	2b02      	cmp	r3, #2
 8013432:	d015      	beq.n	8013460 <__gethex+0x330>
 8013434:	2b03      	cmp	r3, #3
 8013436:	d017      	beq.n	8013468 <__gethex+0x338>
 8013438:	2b01      	cmp	r3, #1
 801343a:	d109      	bne.n	8013450 <__gethex+0x320>
 801343c:	f019 0f02 	tst.w	r9, #2
 8013440:	d006      	beq.n	8013450 <__gethex+0x320>
 8013442:	f8da 3000 	ldr.w	r3, [sl]
 8013446:	ea49 0903 	orr.w	r9, r9, r3
 801344a:	f019 0f01 	tst.w	r9, #1
 801344e:	d10e      	bne.n	801346e <__gethex+0x33e>
 8013450:	f045 0510 	orr.w	r5, r5, #16
 8013454:	e032      	b.n	80134bc <__gethex+0x38c>
 8013456:	f04f 0901 	mov.w	r9, #1
 801345a:	e7d1      	b.n	8013400 <__gethex+0x2d0>
 801345c:	2501      	movs	r5, #1
 801345e:	e7e2      	b.n	8013426 <__gethex+0x2f6>
 8013460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013462:	f1c3 0301 	rsb	r3, r3, #1
 8013466:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801346a:	2b00      	cmp	r3, #0
 801346c:	d0f0      	beq.n	8013450 <__gethex+0x320>
 801346e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013472:	f104 0314 	add.w	r3, r4, #20
 8013476:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801347a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801347e:	f04f 0c00 	mov.w	ip, #0
 8013482:	4618      	mov	r0, r3
 8013484:	f853 2b04 	ldr.w	r2, [r3], #4
 8013488:	f1b2 3fff 	cmp.w	r2, #4294967295
 801348c:	d01b      	beq.n	80134c6 <__gethex+0x396>
 801348e:	3201      	adds	r2, #1
 8013490:	6002      	str	r2, [r0, #0]
 8013492:	2d02      	cmp	r5, #2
 8013494:	f104 0314 	add.w	r3, r4, #20
 8013498:	d13c      	bne.n	8013514 <__gethex+0x3e4>
 801349a:	f8d8 2000 	ldr.w	r2, [r8]
 801349e:	3a01      	subs	r2, #1
 80134a0:	42b2      	cmp	r2, r6
 80134a2:	d109      	bne.n	80134b8 <__gethex+0x388>
 80134a4:	1171      	asrs	r1, r6, #5
 80134a6:	2201      	movs	r2, #1
 80134a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134ac:	f006 061f 	and.w	r6, r6, #31
 80134b0:	fa02 f606 	lsl.w	r6, r2, r6
 80134b4:	421e      	tst	r6, r3
 80134b6:	d13a      	bne.n	801352e <__gethex+0x3fe>
 80134b8:	f045 0520 	orr.w	r5, r5, #32
 80134bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80134be:	601c      	str	r4, [r3, #0]
 80134c0:	9b02      	ldr	r3, [sp, #8]
 80134c2:	601f      	str	r7, [r3, #0]
 80134c4:	e6b0      	b.n	8013228 <__gethex+0xf8>
 80134c6:	4299      	cmp	r1, r3
 80134c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80134cc:	d8d9      	bhi.n	8013482 <__gethex+0x352>
 80134ce:	68a3      	ldr	r3, [r4, #8]
 80134d0:	459b      	cmp	fp, r3
 80134d2:	db17      	blt.n	8013504 <__gethex+0x3d4>
 80134d4:	6861      	ldr	r1, [r4, #4]
 80134d6:	9801      	ldr	r0, [sp, #4]
 80134d8:	3101      	adds	r1, #1
 80134da:	f000 f9c3 	bl	8013864 <_Balloc>
 80134de:	4681      	mov	r9, r0
 80134e0:	b918      	cbnz	r0, 80134ea <__gethex+0x3ba>
 80134e2:	4b1a      	ldr	r3, [pc, #104]	@ (801354c <__gethex+0x41c>)
 80134e4:	4602      	mov	r2, r0
 80134e6:	2184      	movs	r1, #132	@ 0x84
 80134e8:	e6c5      	b.n	8013276 <__gethex+0x146>
 80134ea:	6922      	ldr	r2, [r4, #16]
 80134ec:	3202      	adds	r2, #2
 80134ee:	f104 010c 	add.w	r1, r4, #12
 80134f2:	0092      	lsls	r2, r2, #2
 80134f4:	300c      	adds	r0, #12
 80134f6:	f7fe ff64 	bl	80123c2 <memcpy>
 80134fa:	4621      	mov	r1, r4
 80134fc:	9801      	ldr	r0, [sp, #4]
 80134fe:	f000 f9f1 	bl	80138e4 <_Bfree>
 8013502:	464c      	mov	r4, r9
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	1c5a      	adds	r2, r3, #1
 8013508:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801350c:	6122      	str	r2, [r4, #16]
 801350e:	2201      	movs	r2, #1
 8013510:	615a      	str	r2, [r3, #20]
 8013512:	e7be      	b.n	8013492 <__gethex+0x362>
 8013514:	6922      	ldr	r2, [r4, #16]
 8013516:	455a      	cmp	r2, fp
 8013518:	dd0b      	ble.n	8013532 <__gethex+0x402>
 801351a:	2101      	movs	r1, #1
 801351c:	4620      	mov	r0, r4
 801351e:	f7ff fd9f 	bl	8013060 <rshift>
 8013522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013526:	3701      	adds	r7, #1
 8013528:	42bb      	cmp	r3, r7
 801352a:	f6ff aee0 	blt.w	80132ee <__gethex+0x1be>
 801352e:	2501      	movs	r5, #1
 8013530:	e7c2      	b.n	80134b8 <__gethex+0x388>
 8013532:	f016 061f 	ands.w	r6, r6, #31
 8013536:	d0fa      	beq.n	801352e <__gethex+0x3fe>
 8013538:	4453      	add	r3, sl
 801353a:	f1c6 0620 	rsb	r6, r6, #32
 801353e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013542:	f000 fa81 	bl	8013a48 <__hi0bits>
 8013546:	42b0      	cmp	r0, r6
 8013548:	dbe7      	blt.n	801351a <__gethex+0x3ea>
 801354a:	e7f0      	b.n	801352e <__gethex+0x3fe>
 801354c:	0801515a 	.word	0x0801515a

08013550 <L_shift>:
 8013550:	f1c2 0208 	rsb	r2, r2, #8
 8013554:	0092      	lsls	r2, r2, #2
 8013556:	b570      	push	{r4, r5, r6, lr}
 8013558:	f1c2 0620 	rsb	r6, r2, #32
 801355c:	6843      	ldr	r3, [r0, #4]
 801355e:	6804      	ldr	r4, [r0, #0]
 8013560:	fa03 f506 	lsl.w	r5, r3, r6
 8013564:	432c      	orrs	r4, r5
 8013566:	40d3      	lsrs	r3, r2
 8013568:	6004      	str	r4, [r0, #0]
 801356a:	f840 3f04 	str.w	r3, [r0, #4]!
 801356e:	4288      	cmp	r0, r1
 8013570:	d3f4      	bcc.n	801355c <L_shift+0xc>
 8013572:	bd70      	pop	{r4, r5, r6, pc}

08013574 <__match>:
 8013574:	b530      	push	{r4, r5, lr}
 8013576:	6803      	ldr	r3, [r0, #0]
 8013578:	3301      	adds	r3, #1
 801357a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801357e:	b914      	cbnz	r4, 8013586 <__match+0x12>
 8013580:	6003      	str	r3, [r0, #0]
 8013582:	2001      	movs	r0, #1
 8013584:	bd30      	pop	{r4, r5, pc}
 8013586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801358a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801358e:	2d19      	cmp	r5, #25
 8013590:	bf98      	it	ls
 8013592:	3220      	addls	r2, #32
 8013594:	42a2      	cmp	r2, r4
 8013596:	d0f0      	beq.n	801357a <__match+0x6>
 8013598:	2000      	movs	r0, #0
 801359a:	e7f3      	b.n	8013584 <__match+0x10>

0801359c <__hexnan>:
 801359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a0:	680b      	ldr	r3, [r1, #0]
 80135a2:	6801      	ldr	r1, [r0, #0]
 80135a4:	115e      	asrs	r6, r3, #5
 80135a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80135aa:	f013 031f 	ands.w	r3, r3, #31
 80135ae:	b087      	sub	sp, #28
 80135b0:	bf18      	it	ne
 80135b2:	3604      	addne	r6, #4
 80135b4:	2500      	movs	r5, #0
 80135b6:	1f37      	subs	r7, r6, #4
 80135b8:	4682      	mov	sl, r0
 80135ba:	4690      	mov	r8, r2
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	f846 5c04 	str.w	r5, [r6, #-4]
 80135c2:	46b9      	mov	r9, r7
 80135c4:	463c      	mov	r4, r7
 80135c6:	9502      	str	r5, [sp, #8]
 80135c8:	46ab      	mov	fp, r5
 80135ca:	784a      	ldrb	r2, [r1, #1]
 80135cc:	1c4b      	adds	r3, r1, #1
 80135ce:	9303      	str	r3, [sp, #12]
 80135d0:	b342      	cbz	r2, 8013624 <__hexnan+0x88>
 80135d2:	4610      	mov	r0, r2
 80135d4:	9105      	str	r1, [sp, #20]
 80135d6:	9204      	str	r2, [sp, #16]
 80135d8:	f7ff fd94 	bl	8013104 <__hexdig_fun>
 80135dc:	2800      	cmp	r0, #0
 80135de:	d151      	bne.n	8013684 <__hexnan+0xe8>
 80135e0:	9a04      	ldr	r2, [sp, #16]
 80135e2:	9905      	ldr	r1, [sp, #20]
 80135e4:	2a20      	cmp	r2, #32
 80135e6:	d818      	bhi.n	801361a <__hexnan+0x7e>
 80135e8:	9b02      	ldr	r3, [sp, #8]
 80135ea:	459b      	cmp	fp, r3
 80135ec:	dd13      	ble.n	8013616 <__hexnan+0x7a>
 80135ee:	454c      	cmp	r4, r9
 80135f0:	d206      	bcs.n	8013600 <__hexnan+0x64>
 80135f2:	2d07      	cmp	r5, #7
 80135f4:	dc04      	bgt.n	8013600 <__hexnan+0x64>
 80135f6:	462a      	mov	r2, r5
 80135f8:	4649      	mov	r1, r9
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7ff ffa8 	bl	8013550 <L_shift>
 8013600:	4544      	cmp	r4, r8
 8013602:	d952      	bls.n	80136aa <__hexnan+0x10e>
 8013604:	2300      	movs	r3, #0
 8013606:	f1a4 0904 	sub.w	r9, r4, #4
 801360a:	f844 3c04 	str.w	r3, [r4, #-4]
 801360e:	f8cd b008 	str.w	fp, [sp, #8]
 8013612:	464c      	mov	r4, r9
 8013614:	461d      	mov	r5, r3
 8013616:	9903      	ldr	r1, [sp, #12]
 8013618:	e7d7      	b.n	80135ca <__hexnan+0x2e>
 801361a:	2a29      	cmp	r2, #41	@ 0x29
 801361c:	d157      	bne.n	80136ce <__hexnan+0x132>
 801361e:	3102      	adds	r1, #2
 8013620:	f8ca 1000 	str.w	r1, [sl]
 8013624:	f1bb 0f00 	cmp.w	fp, #0
 8013628:	d051      	beq.n	80136ce <__hexnan+0x132>
 801362a:	454c      	cmp	r4, r9
 801362c:	d206      	bcs.n	801363c <__hexnan+0xa0>
 801362e:	2d07      	cmp	r5, #7
 8013630:	dc04      	bgt.n	801363c <__hexnan+0xa0>
 8013632:	462a      	mov	r2, r5
 8013634:	4649      	mov	r1, r9
 8013636:	4620      	mov	r0, r4
 8013638:	f7ff ff8a 	bl	8013550 <L_shift>
 801363c:	4544      	cmp	r4, r8
 801363e:	d936      	bls.n	80136ae <__hexnan+0x112>
 8013640:	f1a8 0204 	sub.w	r2, r8, #4
 8013644:	4623      	mov	r3, r4
 8013646:	f853 1b04 	ldr.w	r1, [r3], #4
 801364a:	f842 1f04 	str.w	r1, [r2, #4]!
 801364e:	429f      	cmp	r7, r3
 8013650:	d2f9      	bcs.n	8013646 <__hexnan+0xaa>
 8013652:	1b3b      	subs	r3, r7, r4
 8013654:	f023 0303 	bic.w	r3, r3, #3
 8013658:	3304      	adds	r3, #4
 801365a:	3401      	adds	r4, #1
 801365c:	3e03      	subs	r6, #3
 801365e:	42b4      	cmp	r4, r6
 8013660:	bf88      	it	hi
 8013662:	2304      	movhi	r3, #4
 8013664:	4443      	add	r3, r8
 8013666:	2200      	movs	r2, #0
 8013668:	f843 2b04 	str.w	r2, [r3], #4
 801366c:	429f      	cmp	r7, r3
 801366e:	d2fb      	bcs.n	8013668 <__hexnan+0xcc>
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	b91b      	cbnz	r3, 801367c <__hexnan+0xe0>
 8013674:	4547      	cmp	r7, r8
 8013676:	d128      	bne.n	80136ca <__hexnan+0x12e>
 8013678:	2301      	movs	r3, #1
 801367a:	603b      	str	r3, [r7, #0]
 801367c:	2005      	movs	r0, #5
 801367e:	b007      	add	sp, #28
 8013680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013684:	3501      	adds	r5, #1
 8013686:	2d08      	cmp	r5, #8
 8013688:	f10b 0b01 	add.w	fp, fp, #1
 801368c:	dd06      	ble.n	801369c <__hexnan+0x100>
 801368e:	4544      	cmp	r4, r8
 8013690:	d9c1      	bls.n	8013616 <__hexnan+0x7a>
 8013692:	2300      	movs	r3, #0
 8013694:	f844 3c04 	str.w	r3, [r4, #-4]
 8013698:	2501      	movs	r5, #1
 801369a:	3c04      	subs	r4, #4
 801369c:	6822      	ldr	r2, [r4, #0]
 801369e:	f000 000f 	and.w	r0, r0, #15
 80136a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80136a6:	6020      	str	r0, [r4, #0]
 80136a8:	e7b5      	b.n	8013616 <__hexnan+0x7a>
 80136aa:	2508      	movs	r5, #8
 80136ac:	e7b3      	b.n	8013616 <__hexnan+0x7a>
 80136ae:	9b01      	ldr	r3, [sp, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d0dd      	beq.n	8013670 <__hexnan+0xd4>
 80136b4:	f1c3 0320 	rsb	r3, r3, #32
 80136b8:	f04f 32ff 	mov.w	r2, #4294967295
 80136bc:	40da      	lsrs	r2, r3
 80136be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80136c2:	4013      	ands	r3, r2
 80136c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80136c8:	e7d2      	b.n	8013670 <__hexnan+0xd4>
 80136ca:	3f04      	subs	r7, #4
 80136cc:	e7d0      	b.n	8013670 <__hexnan+0xd4>
 80136ce:	2004      	movs	r0, #4
 80136d0:	e7d5      	b.n	801367e <__hexnan+0xe2>
	...

080136d4 <malloc>:
 80136d4:	4b02      	ldr	r3, [pc, #8]	@ (80136e0 <malloc+0xc>)
 80136d6:	4601      	mov	r1, r0
 80136d8:	6818      	ldr	r0, [r3, #0]
 80136da:	f000 b825 	b.w	8013728 <_malloc_r>
 80136de:	bf00      	nop
 80136e0:	240001f8 	.word	0x240001f8

080136e4 <sbrk_aligned>:
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	4e0f      	ldr	r6, [pc, #60]	@ (8013724 <sbrk_aligned+0x40>)
 80136e8:	460c      	mov	r4, r1
 80136ea:	6831      	ldr	r1, [r6, #0]
 80136ec:	4605      	mov	r5, r0
 80136ee:	b911      	cbnz	r1, 80136f6 <sbrk_aligned+0x12>
 80136f0:	f000 ffee 	bl	80146d0 <_sbrk_r>
 80136f4:	6030      	str	r0, [r6, #0]
 80136f6:	4621      	mov	r1, r4
 80136f8:	4628      	mov	r0, r5
 80136fa:	f000 ffe9 	bl	80146d0 <_sbrk_r>
 80136fe:	1c43      	adds	r3, r0, #1
 8013700:	d103      	bne.n	801370a <sbrk_aligned+0x26>
 8013702:	f04f 34ff 	mov.w	r4, #4294967295
 8013706:	4620      	mov	r0, r4
 8013708:	bd70      	pop	{r4, r5, r6, pc}
 801370a:	1cc4      	adds	r4, r0, #3
 801370c:	f024 0403 	bic.w	r4, r4, #3
 8013710:	42a0      	cmp	r0, r4
 8013712:	d0f8      	beq.n	8013706 <sbrk_aligned+0x22>
 8013714:	1a21      	subs	r1, r4, r0
 8013716:	4628      	mov	r0, r5
 8013718:	f000 ffda 	bl	80146d0 <_sbrk_r>
 801371c:	3001      	adds	r0, #1
 801371e:	d1f2      	bne.n	8013706 <sbrk_aligned+0x22>
 8013720:	e7ef      	b.n	8013702 <sbrk_aligned+0x1e>
 8013722:	bf00      	nop
 8013724:	24006210 	.word	0x24006210

08013728 <_malloc_r>:
 8013728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801372c:	1ccd      	adds	r5, r1, #3
 801372e:	f025 0503 	bic.w	r5, r5, #3
 8013732:	3508      	adds	r5, #8
 8013734:	2d0c      	cmp	r5, #12
 8013736:	bf38      	it	cc
 8013738:	250c      	movcc	r5, #12
 801373a:	2d00      	cmp	r5, #0
 801373c:	4606      	mov	r6, r0
 801373e:	db01      	blt.n	8013744 <_malloc_r+0x1c>
 8013740:	42a9      	cmp	r1, r5
 8013742:	d904      	bls.n	801374e <_malloc_r+0x26>
 8013744:	230c      	movs	r3, #12
 8013746:	6033      	str	r3, [r6, #0]
 8013748:	2000      	movs	r0, #0
 801374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801374e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013824 <_malloc_r+0xfc>
 8013752:	f000 f87b 	bl	801384c <__malloc_lock>
 8013756:	f8d8 3000 	ldr.w	r3, [r8]
 801375a:	461c      	mov	r4, r3
 801375c:	bb44      	cbnz	r4, 80137b0 <_malloc_r+0x88>
 801375e:	4629      	mov	r1, r5
 8013760:	4630      	mov	r0, r6
 8013762:	f7ff ffbf 	bl	80136e4 <sbrk_aligned>
 8013766:	1c43      	adds	r3, r0, #1
 8013768:	4604      	mov	r4, r0
 801376a:	d158      	bne.n	801381e <_malloc_r+0xf6>
 801376c:	f8d8 4000 	ldr.w	r4, [r8]
 8013770:	4627      	mov	r7, r4
 8013772:	2f00      	cmp	r7, #0
 8013774:	d143      	bne.n	80137fe <_malloc_r+0xd6>
 8013776:	2c00      	cmp	r4, #0
 8013778:	d04b      	beq.n	8013812 <_malloc_r+0xea>
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	4639      	mov	r1, r7
 801377e:	4630      	mov	r0, r6
 8013780:	eb04 0903 	add.w	r9, r4, r3
 8013784:	f000 ffa4 	bl	80146d0 <_sbrk_r>
 8013788:	4581      	cmp	r9, r0
 801378a:	d142      	bne.n	8013812 <_malloc_r+0xea>
 801378c:	6821      	ldr	r1, [r4, #0]
 801378e:	1a6d      	subs	r5, r5, r1
 8013790:	4629      	mov	r1, r5
 8013792:	4630      	mov	r0, r6
 8013794:	f7ff ffa6 	bl	80136e4 <sbrk_aligned>
 8013798:	3001      	adds	r0, #1
 801379a:	d03a      	beq.n	8013812 <_malloc_r+0xea>
 801379c:	6823      	ldr	r3, [r4, #0]
 801379e:	442b      	add	r3, r5
 80137a0:	6023      	str	r3, [r4, #0]
 80137a2:	f8d8 3000 	ldr.w	r3, [r8]
 80137a6:	685a      	ldr	r2, [r3, #4]
 80137a8:	bb62      	cbnz	r2, 8013804 <_malloc_r+0xdc>
 80137aa:	f8c8 7000 	str.w	r7, [r8]
 80137ae:	e00f      	b.n	80137d0 <_malloc_r+0xa8>
 80137b0:	6822      	ldr	r2, [r4, #0]
 80137b2:	1b52      	subs	r2, r2, r5
 80137b4:	d420      	bmi.n	80137f8 <_malloc_r+0xd0>
 80137b6:	2a0b      	cmp	r2, #11
 80137b8:	d917      	bls.n	80137ea <_malloc_r+0xc2>
 80137ba:	1961      	adds	r1, r4, r5
 80137bc:	42a3      	cmp	r3, r4
 80137be:	6025      	str	r5, [r4, #0]
 80137c0:	bf18      	it	ne
 80137c2:	6059      	strne	r1, [r3, #4]
 80137c4:	6863      	ldr	r3, [r4, #4]
 80137c6:	bf08      	it	eq
 80137c8:	f8c8 1000 	streq.w	r1, [r8]
 80137cc:	5162      	str	r2, [r4, r5]
 80137ce:	604b      	str	r3, [r1, #4]
 80137d0:	4630      	mov	r0, r6
 80137d2:	f000 f841 	bl	8013858 <__malloc_unlock>
 80137d6:	f104 000b 	add.w	r0, r4, #11
 80137da:	1d23      	adds	r3, r4, #4
 80137dc:	f020 0007 	bic.w	r0, r0, #7
 80137e0:	1ac2      	subs	r2, r0, r3
 80137e2:	bf1c      	itt	ne
 80137e4:	1a1b      	subne	r3, r3, r0
 80137e6:	50a3      	strne	r3, [r4, r2]
 80137e8:	e7af      	b.n	801374a <_malloc_r+0x22>
 80137ea:	6862      	ldr	r2, [r4, #4]
 80137ec:	42a3      	cmp	r3, r4
 80137ee:	bf0c      	ite	eq
 80137f0:	f8c8 2000 	streq.w	r2, [r8]
 80137f4:	605a      	strne	r2, [r3, #4]
 80137f6:	e7eb      	b.n	80137d0 <_malloc_r+0xa8>
 80137f8:	4623      	mov	r3, r4
 80137fa:	6864      	ldr	r4, [r4, #4]
 80137fc:	e7ae      	b.n	801375c <_malloc_r+0x34>
 80137fe:	463c      	mov	r4, r7
 8013800:	687f      	ldr	r7, [r7, #4]
 8013802:	e7b6      	b.n	8013772 <_malloc_r+0x4a>
 8013804:	461a      	mov	r2, r3
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	42a3      	cmp	r3, r4
 801380a:	d1fb      	bne.n	8013804 <_malloc_r+0xdc>
 801380c:	2300      	movs	r3, #0
 801380e:	6053      	str	r3, [r2, #4]
 8013810:	e7de      	b.n	80137d0 <_malloc_r+0xa8>
 8013812:	230c      	movs	r3, #12
 8013814:	6033      	str	r3, [r6, #0]
 8013816:	4630      	mov	r0, r6
 8013818:	f000 f81e 	bl	8013858 <__malloc_unlock>
 801381c:	e794      	b.n	8013748 <_malloc_r+0x20>
 801381e:	6005      	str	r5, [r0, #0]
 8013820:	e7d6      	b.n	80137d0 <_malloc_r+0xa8>
 8013822:	bf00      	nop
 8013824:	24006214 	.word	0x24006214

08013828 <__ascii_mbtowc>:
 8013828:	b082      	sub	sp, #8
 801382a:	b901      	cbnz	r1, 801382e <__ascii_mbtowc+0x6>
 801382c:	a901      	add	r1, sp, #4
 801382e:	b142      	cbz	r2, 8013842 <__ascii_mbtowc+0x1a>
 8013830:	b14b      	cbz	r3, 8013846 <__ascii_mbtowc+0x1e>
 8013832:	7813      	ldrb	r3, [r2, #0]
 8013834:	600b      	str	r3, [r1, #0]
 8013836:	7812      	ldrb	r2, [r2, #0]
 8013838:	1e10      	subs	r0, r2, #0
 801383a:	bf18      	it	ne
 801383c:	2001      	movne	r0, #1
 801383e:	b002      	add	sp, #8
 8013840:	4770      	bx	lr
 8013842:	4610      	mov	r0, r2
 8013844:	e7fb      	b.n	801383e <__ascii_mbtowc+0x16>
 8013846:	f06f 0001 	mvn.w	r0, #1
 801384a:	e7f8      	b.n	801383e <__ascii_mbtowc+0x16>

0801384c <__malloc_lock>:
 801384c:	4801      	ldr	r0, [pc, #4]	@ (8013854 <__malloc_lock+0x8>)
 801384e:	f7fe bdb6 	b.w	80123be <__retarget_lock_acquire_recursive>
 8013852:	bf00      	nop
 8013854:	2400620c 	.word	0x2400620c

08013858 <__malloc_unlock>:
 8013858:	4801      	ldr	r0, [pc, #4]	@ (8013860 <__malloc_unlock+0x8>)
 801385a:	f7fe bdb1 	b.w	80123c0 <__retarget_lock_release_recursive>
 801385e:	bf00      	nop
 8013860:	2400620c 	.word	0x2400620c

08013864 <_Balloc>:
 8013864:	b570      	push	{r4, r5, r6, lr}
 8013866:	69c6      	ldr	r6, [r0, #28]
 8013868:	4604      	mov	r4, r0
 801386a:	460d      	mov	r5, r1
 801386c:	b976      	cbnz	r6, 801388c <_Balloc+0x28>
 801386e:	2010      	movs	r0, #16
 8013870:	f7ff ff30 	bl	80136d4 <malloc>
 8013874:	4602      	mov	r2, r0
 8013876:	61e0      	str	r0, [r4, #28]
 8013878:	b920      	cbnz	r0, 8013884 <_Balloc+0x20>
 801387a:	4b18      	ldr	r3, [pc, #96]	@ (80138dc <_Balloc+0x78>)
 801387c:	4818      	ldr	r0, [pc, #96]	@ (80138e0 <_Balloc+0x7c>)
 801387e:	216b      	movs	r1, #107	@ 0x6b
 8013880:	f000 ff36 	bl	80146f0 <__assert_func>
 8013884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013888:	6006      	str	r6, [r0, #0]
 801388a:	60c6      	str	r6, [r0, #12]
 801388c:	69e6      	ldr	r6, [r4, #28]
 801388e:	68f3      	ldr	r3, [r6, #12]
 8013890:	b183      	cbz	r3, 80138b4 <_Balloc+0x50>
 8013892:	69e3      	ldr	r3, [r4, #28]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801389a:	b9b8      	cbnz	r0, 80138cc <_Balloc+0x68>
 801389c:	2101      	movs	r1, #1
 801389e:	fa01 f605 	lsl.w	r6, r1, r5
 80138a2:	1d72      	adds	r2, r6, #5
 80138a4:	0092      	lsls	r2, r2, #2
 80138a6:	4620      	mov	r0, r4
 80138a8:	f000 ff40 	bl	801472c <_calloc_r>
 80138ac:	b160      	cbz	r0, 80138c8 <_Balloc+0x64>
 80138ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80138b2:	e00e      	b.n	80138d2 <_Balloc+0x6e>
 80138b4:	2221      	movs	r2, #33	@ 0x21
 80138b6:	2104      	movs	r1, #4
 80138b8:	4620      	mov	r0, r4
 80138ba:	f000 ff37 	bl	801472c <_calloc_r>
 80138be:	69e3      	ldr	r3, [r4, #28]
 80138c0:	60f0      	str	r0, [r6, #12]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d1e4      	bne.n	8013892 <_Balloc+0x2e>
 80138c8:	2000      	movs	r0, #0
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	6802      	ldr	r2, [r0, #0]
 80138ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138d2:	2300      	movs	r3, #0
 80138d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138d8:	e7f7      	b.n	80138ca <_Balloc+0x66>
 80138da:	bf00      	nop
 80138dc:	080150eb 	.word	0x080150eb
 80138e0:	080151cb 	.word	0x080151cb

080138e4 <_Bfree>:
 80138e4:	b570      	push	{r4, r5, r6, lr}
 80138e6:	69c6      	ldr	r6, [r0, #28]
 80138e8:	4605      	mov	r5, r0
 80138ea:	460c      	mov	r4, r1
 80138ec:	b976      	cbnz	r6, 801390c <_Bfree+0x28>
 80138ee:	2010      	movs	r0, #16
 80138f0:	f7ff fef0 	bl	80136d4 <malloc>
 80138f4:	4602      	mov	r2, r0
 80138f6:	61e8      	str	r0, [r5, #28]
 80138f8:	b920      	cbnz	r0, 8013904 <_Bfree+0x20>
 80138fa:	4b09      	ldr	r3, [pc, #36]	@ (8013920 <_Bfree+0x3c>)
 80138fc:	4809      	ldr	r0, [pc, #36]	@ (8013924 <_Bfree+0x40>)
 80138fe:	218f      	movs	r1, #143	@ 0x8f
 8013900:	f000 fef6 	bl	80146f0 <__assert_func>
 8013904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013908:	6006      	str	r6, [r0, #0]
 801390a:	60c6      	str	r6, [r0, #12]
 801390c:	b13c      	cbz	r4, 801391e <_Bfree+0x3a>
 801390e:	69eb      	ldr	r3, [r5, #28]
 8013910:	6862      	ldr	r2, [r4, #4]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013918:	6021      	str	r1, [r4, #0]
 801391a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801391e:	bd70      	pop	{r4, r5, r6, pc}
 8013920:	080150eb 	.word	0x080150eb
 8013924:	080151cb 	.word	0x080151cb

08013928 <__multadd>:
 8013928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392c:	690d      	ldr	r5, [r1, #16]
 801392e:	4607      	mov	r7, r0
 8013930:	460c      	mov	r4, r1
 8013932:	461e      	mov	r6, r3
 8013934:	f101 0c14 	add.w	ip, r1, #20
 8013938:	2000      	movs	r0, #0
 801393a:	f8dc 3000 	ldr.w	r3, [ip]
 801393e:	b299      	uxth	r1, r3
 8013940:	fb02 6101 	mla	r1, r2, r1, r6
 8013944:	0c1e      	lsrs	r6, r3, #16
 8013946:	0c0b      	lsrs	r3, r1, #16
 8013948:	fb02 3306 	mla	r3, r2, r6, r3
 801394c:	b289      	uxth	r1, r1
 801394e:	3001      	adds	r0, #1
 8013950:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013954:	4285      	cmp	r5, r0
 8013956:	f84c 1b04 	str.w	r1, [ip], #4
 801395a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801395e:	dcec      	bgt.n	801393a <__multadd+0x12>
 8013960:	b30e      	cbz	r6, 80139a6 <__multadd+0x7e>
 8013962:	68a3      	ldr	r3, [r4, #8]
 8013964:	42ab      	cmp	r3, r5
 8013966:	dc19      	bgt.n	801399c <__multadd+0x74>
 8013968:	6861      	ldr	r1, [r4, #4]
 801396a:	4638      	mov	r0, r7
 801396c:	3101      	adds	r1, #1
 801396e:	f7ff ff79 	bl	8013864 <_Balloc>
 8013972:	4680      	mov	r8, r0
 8013974:	b928      	cbnz	r0, 8013982 <__multadd+0x5a>
 8013976:	4602      	mov	r2, r0
 8013978:	4b0c      	ldr	r3, [pc, #48]	@ (80139ac <__multadd+0x84>)
 801397a:	480d      	ldr	r0, [pc, #52]	@ (80139b0 <__multadd+0x88>)
 801397c:	21ba      	movs	r1, #186	@ 0xba
 801397e:	f000 feb7 	bl	80146f0 <__assert_func>
 8013982:	6922      	ldr	r2, [r4, #16]
 8013984:	3202      	adds	r2, #2
 8013986:	f104 010c 	add.w	r1, r4, #12
 801398a:	0092      	lsls	r2, r2, #2
 801398c:	300c      	adds	r0, #12
 801398e:	f7fe fd18 	bl	80123c2 <memcpy>
 8013992:	4621      	mov	r1, r4
 8013994:	4638      	mov	r0, r7
 8013996:	f7ff ffa5 	bl	80138e4 <_Bfree>
 801399a:	4644      	mov	r4, r8
 801399c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80139a0:	3501      	adds	r5, #1
 80139a2:	615e      	str	r6, [r3, #20]
 80139a4:	6125      	str	r5, [r4, #16]
 80139a6:	4620      	mov	r0, r4
 80139a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ac:	0801515a 	.word	0x0801515a
 80139b0:	080151cb 	.word	0x080151cb

080139b4 <__s2b>:
 80139b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139b8:	460c      	mov	r4, r1
 80139ba:	4615      	mov	r5, r2
 80139bc:	461f      	mov	r7, r3
 80139be:	2209      	movs	r2, #9
 80139c0:	3308      	adds	r3, #8
 80139c2:	4606      	mov	r6, r0
 80139c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80139c8:	2100      	movs	r1, #0
 80139ca:	2201      	movs	r2, #1
 80139cc:	429a      	cmp	r2, r3
 80139ce:	db09      	blt.n	80139e4 <__s2b+0x30>
 80139d0:	4630      	mov	r0, r6
 80139d2:	f7ff ff47 	bl	8013864 <_Balloc>
 80139d6:	b940      	cbnz	r0, 80139ea <__s2b+0x36>
 80139d8:	4602      	mov	r2, r0
 80139da:	4b19      	ldr	r3, [pc, #100]	@ (8013a40 <__s2b+0x8c>)
 80139dc:	4819      	ldr	r0, [pc, #100]	@ (8013a44 <__s2b+0x90>)
 80139de:	21d3      	movs	r1, #211	@ 0xd3
 80139e0:	f000 fe86 	bl	80146f0 <__assert_func>
 80139e4:	0052      	lsls	r2, r2, #1
 80139e6:	3101      	adds	r1, #1
 80139e8:	e7f0      	b.n	80139cc <__s2b+0x18>
 80139ea:	9b08      	ldr	r3, [sp, #32]
 80139ec:	6143      	str	r3, [r0, #20]
 80139ee:	2d09      	cmp	r5, #9
 80139f0:	f04f 0301 	mov.w	r3, #1
 80139f4:	6103      	str	r3, [r0, #16]
 80139f6:	dd16      	ble.n	8013a26 <__s2b+0x72>
 80139f8:	f104 0909 	add.w	r9, r4, #9
 80139fc:	46c8      	mov	r8, r9
 80139fe:	442c      	add	r4, r5
 8013a00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013a04:	4601      	mov	r1, r0
 8013a06:	3b30      	subs	r3, #48	@ 0x30
 8013a08:	220a      	movs	r2, #10
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	f7ff ff8c 	bl	8013928 <__multadd>
 8013a10:	45a0      	cmp	r8, r4
 8013a12:	d1f5      	bne.n	8013a00 <__s2b+0x4c>
 8013a14:	f1a5 0408 	sub.w	r4, r5, #8
 8013a18:	444c      	add	r4, r9
 8013a1a:	1b2d      	subs	r5, r5, r4
 8013a1c:	1963      	adds	r3, r4, r5
 8013a1e:	42bb      	cmp	r3, r7
 8013a20:	db04      	blt.n	8013a2c <__s2b+0x78>
 8013a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a26:	340a      	adds	r4, #10
 8013a28:	2509      	movs	r5, #9
 8013a2a:	e7f6      	b.n	8013a1a <__s2b+0x66>
 8013a2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013a30:	4601      	mov	r1, r0
 8013a32:	3b30      	subs	r3, #48	@ 0x30
 8013a34:	220a      	movs	r2, #10
 8013a36:	4630      	mov	r0, r6
 8013a38:	f7ff ff76 	bl	8013928 <__multadd>
 8013a3c:	e7ee      	b.n	8013a1c <__s2b+0x68>
 8013a3e:	bf00      	nop
 8013a40:	0801515a 	.word	0x0801515a
 8013a44:	080151cb 	.word	0x080151cb

08013a48 <__hi0bits>:
 8013a48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	bf36      	itet	cc
 8013a50:	0403      	lslcc	r3, r0, #16
 8013a52:	2000      	movcs	r0, #0
 8013a54:	2010      	movcc	r0, #16
 8013a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013a5a:	bf3c      	itt	cc
 8013a5c:	021b      	lslcc	r3, r3, #8
 8013a5e:	3008      	addcc	r0, #8
 8013a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a64:	bf3c      	itt	cc
 8013a66:	011b      	lslcc	r3, r3, #4
 8013a68:	3004      	addcc	r0, #4
 8013a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a6e:	bf3c      	itt	cc
 8013a70:	009b      	lslcc	r3, r3, #2
 8013a72:	3002      	addcc	r0, #2
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	db05      	blt.n	8013a84 <__hi0bits+0x3c>
 8013a78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013a7c:	f100 0001 	add.w	r0, r0, #1
 8013a80:	bf08      	it	eq
 8013a82:	2020      	moveq	r0, #32
 8013a84:	4770      	bx	lr

08013a86 <__lo0bits>:
 8013a86:	6803      	ldr	r3, [r0, #0]
 8013a88:	4602      	mov	r2, r0
 8013a8a:	f013 0007 	ands.w	r0, r3, #7
 8013a8e:	d00b      	beq.n	8013aa8 <__lo0bits+0x22>
 8013a90:	07d9      	lsls	r1, r3, #31
 8013a92:	d421      	bmi.n	8013ad8 <__lo0bits+0x52>
 8013a94:	0798      	lsls	r0, r3, #30
 8013a96:	bf49      	itett	mi
 8013a98:	085b      	lsrmi	r3, r3, #1
 8013a9a:	089b      	lsrpl	r3, r3, #2
 8013a9c:	2001      	movmi	r0, #1
 8013a9e:	6013      	strmi	r3, [r2, #0]
 8013aa0:	bf5c      	itt	pl
 8013aa2:	6013      	strpl	r3, [r2, #0]
 8013aa4:	2002      	movpl	r0, #2
 8013aa6:	4770      	bx	lr
 8013aa8:	b299      	uxth	r1, r3
 8013aaa:	b909      	cbnz	r1, 8013ab0 <__lo0bits+0x2a>
 8013aac:	0c1b      	lsrs	r3, r3, #16
 8013aae:	2010      	movs	r0, #16
 8013ab0:	b2d9      	uxtb	r1, r3
 8013ab2:	b909      	cbnz	r1, 8013ab8 <__lo0bits+0x32>
 8013ab4:	3008      	adds	r0, #8
 8013ab6:	0a1b      	lsrs	r3, r3, #8
 8013ab8:	0719      	lsls	r1, r3, #28
 8013aba:	bf04      	itt	eq
 8013abc:	091b      	lsreq	r3, r3, #4
 8013abe:	3004      	addeq	r0, #4
 8013ac0:	0799      	lsls	r1, r3, #30
 8013ac2:	bf04      	itt	eq
 8013ac4:	089b      	lsreq	r3, r3, #2
 8013ac6:	3002      	addeq	r0, #2
 8013ac8:	07d9      	lsls	r1, r3, #31
 8013aca:	d403      	bmi.n	8013ad4 <__lo0bits+0x4e>
 8013acc:	085b      	lsrs	r3, r3, #1
 8013ace:	f100 0001 	add.w	r0, r0, #1
 8013ad2:	d003      	beq.n	8013adc <__lo0bits+0x56>
 8013ad4:	6013      	str	r3, [r2, #0]
 8013ad6:	4770      	bx	lr
 8013ad8:	2000      	movs	r0, #0
 8013ada:	4770      	bx	lr
 8013adc:	2020      	movs	r0, #32
 8013ade:	4770      	bx	lr

08013ae0 <__i2b>:
 8013ae0:	b510      	push	{r4, lr}
 8013ae2:	460c      	mov	r4, r1
 8013ae4:	2101      	movs	r1, #1
 8013ae6:	f7ff febd 	bl	8013864 <_Balloc>
 8013aea:	4602      	mov	r2, r0
 8013aec:	b928      	cbnz	r0, 8013afa <__i2b+0x1a>
 8013aee:	4b05      	ldr	r3, [pc, #20]	@ (8013b04 <__i2b+0x24>)
 8013af0:	4805      	ldr	r0, [pc, #20]	@ (8013b08 <__i2b+0x28>)
 8013af2:	f240 1145 	movw	r1, #325	@ 0x145
 8013af6:	f000 fdfb 	bl	80146f0 <__assert_func>
 8013afa:	2301      	movs	r3, #1
 8013afc:	6144      	str	r4, [r0, #20]
 8013afe:	6103      	str	r3, [r0, #16]
 8013b00:	bd10      	pop	{r4, pc}
 8013b02:	bf00      	nop
 8013b04:	0801515a 	.word	0x0801515a
 8013b08:	080151cb 	.word	0x080151cb

08013b0c <__multiply>:
 8013b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b10:	4617      	mov	r7, r2
 8013b12:	690a      	ldr	r2, [r1, #16]
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	bfa8      	it	ge
 8013b1a:	463b      	movge	r3, r7
 8013b1c:	4689      	mov	r9, r1
 8013b1e:	bfa4      	itt	ge
 8013b20:	460f      	movge	r7, r1
 8013b22:	4699      	movge	r9, r3
 8013b24:	693d      	ldr	r5, [r7, #16]
 8013b26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	6879      	ldr	r1, [r7, #4]
 8013b2e:	eb05 060a 	add.w	r6, r5, sl
 8013b32:	42b3      	cmp	r3, r6
 8013b34:	b085      	sub	sp, #20
 8013b36:	bfb8      	it	lt
 8013b38:	3101      	addlt	r1, #1
 8013b3a:	f7ff fe93 	bl	8013864 <_Balloc>
 8013b3e:	b930      	cbnz	r0, 8013b4e <__multiply+0x42>
 8013b40:	4602      	mov	r2, r0
 8013b42:	4b41      	ldr	r3, [pc, #260]	@ (8013c48 <__multiply+0x13c>)
 8013b44:	4841      	ldr	r0, [pc, #260]	@ (8013c4c <__multiply+0x140>)
 8013b46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013b4a:	f000 fdd1 	bl	80146f0 <__assert_func>
 8013b4e:	f100 0414 	add.w	r4, r0, #20
 8013b52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013b56:	4623      	mov	r3, r4
 8013b58:	2200      	movs	r2, #0
 8013b5a:	4573      	cmp	r3, lr
 8013b5c:	d320      	bcc.n	8013ba0 <__multiply+0x94>
 8013b5e:	f107 0814 	add.w	r8, r7, #20
 8013b62:	f109 0114 	add.w	r1, r9, #20
 8013b66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013b6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013b6e:	9302      	str	r3, [sp, #8]
 8013b70:	1beb      	subs	r3, r5, r7
 8013b72:	3b15      	subs	r3, #21
 8013b74:	f023 0303 	bic.w	r3, r3, #3
 8013b78:	3304      	adds	r3, #4
 8013b7a:	3715      	adds	r7, #21
 8013b7c:	42bd      	cmp	r5, r7
 8013b7e:	bf38      	it	cc
 8013b80:	2304      	movcc	r3, #4
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	9b02      	ldr	r3, [sp, #8]
 8013b86:	9103      	str	r1, [sp, #12]
 8013b88:	428b      	cmp	r3, r1
 8013b8a:	d80c      	bhi.n	8013ba6 <__multiply+0x9a>
 8013b8c:	2e00      	cmp	r6, #0
 8013b8e:	dd03      	ble.n	8013b98 <__multiply+0x8c>
 8013b90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d055      	beq.n	8013c44 <__multiply+0x138>
 8013b98:	6106      	str	r6, [r0, #16]
 8013b9a:	b005      	add	sp, #20
 8013b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba0:	f843 2b04 	str.w	r2, [r3], #4
 8013ba4:	e7d9      	b.n	8013b5a <__multiply+0x4e>
 8013ba6:	f8b1 a000 	ldrh.w	sl, [r1]
 8013baa:	f1ba 0f00 	cmp.w	sl, #0
 8013bae:	d01f      	beq.n	8013bf0 <__multiply+0xe4>
 8013bb0:	46c4      	mov	ip, r8
 8013bb2:	46a1      	mov	r9, r4
 8013bb4:	2700      	movs	r7, #0
 8013bb6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013bba:	f8d9 3000 	ldr.w	r3, [r9]
 8013bbe:	fa1f fb82 	uxth.w	fp, r2
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013bc8:	443b      	add	r3, r7
 8013bca:	f8d9 7000 	ldr.w	r7, [r9]
 8013bce:	0c12      	lsrs	r2, r2, #16
 8013bd0:	0c3f      	lsrs	r7, r7, #16
 8013bd2:	fb0a 7202 	mla	r2, sl, r2, r7
 8013bd6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013be0:	4565      	cmp	r5, ip
 8013be2:	f849 3b04 	str.w	r3, [r9], #4
 8013be6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013bea:	d8e4      	bhi.n	8013bb6 <__multiply+0xaa>
 8013bec:	9b01      	ldr	r3, [sp, #4]
 8013bee:	50e7      	str	r7, [r4, r3]
 8013bf0:	9b03      	ldr	r3, [sp, #12]
 8013bf2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013bf6:	3104      	adds	r1, #4
 8013bf8:	f1b9 0f00 	cmp.w	r9, #0
 8013bfc:	d020      	beq.n	8013c40 <__multiply+0x134>
 8013bfe:	6823      	ldr	r3, [r4, #0]
 8013c00:	4647      	mov	r7, r8
 8013c02:	46a4      	mov	ip, r4
 8013c04:	f04f 0a00 	mov.w	sl, #0
 8013c08:	f8b7 b000 	ldrh.w	fp, [r7]
 8013c0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013c10:	fb09 220b 	mla	r2, r9, fp, r2
 8013c14:	4452      	add	r2, sl
 8013c16:	b29b      	uxth	r3, r3
 8013c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c1c:	f84c 3b04 	str.w	r3, [ip], #4
 8013c20:	f857 3b04 	ldr.w	r3, [r7], #4
 8013c24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c28:	f8bc 3000 	ldrh.w	r3, [ip]
 8013c2c:	fb09 330a 	mla	r3, r9, sl, r3
 8013c30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013c34:	42bd      	cmp	r5, r7
 8013c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c3a:	d8e5      	bhi.n	8013c08 <__multiply+0xfc>
 8013c3c:	9a01      	ldr	r2, [sp, #4]
 8013c3e:	50a3      	str	r3, [r4, r2]
 8013c40:	3404      	adds	r4, #4
 8013c42:	e79f      	b.n	8013b84 <__multiply+0x78>
 8013c44:	3e01      	subs	r6, #1
 8013c46:	e7a1      	b.n	8013b8c <__multiply+0x80>
 8013c48:	0801515a 	.word	0x0801515a
 8013c4c:	080151cb 	.word	0x080151cb

08013c50 <__pow5mult>:
 8013c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c54:	4615      	mov	r5, r2
 8013c56:	f012 0203 	ands.w	r2, r2, #3
 8013c5a:	4607      	mov	r7, r0
 8013c5c:	460e      	mov	r6, r1
 8013c5e:	d007      	beq.n	8013c70 <__pow5mult+0x20>
 8013c60:	4c25      	ldr	r4, [pc, #148]	@ (8013cf8 <__pow5mult+0xa8>)
 8013c62:	3a01      	subs	r2, #1
 8013c64:	2300      	movs	r3, #0
 8013c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c6a:	f7ff fe5d 	bl	8013928 <__multadd>
 8013c6e:	4606      	mov	r6, r0
 8013c70:	10ad      	asrs	r5, r5, #2
 8013c72:	d03d      	beq.n	8013cf0 <__pow5mult+0xa0>
 8013c74:	69fc      	ldr	r4, [r7, #28]
 8013c76:	b97c      	cbnz	r4, 8013c98 <__pow5mult+0x48>
 8013c78:	2010      	movs	r0, #16
 8013c7a:	f7ff fd2b 	bl	80136d4 <malloc>
 8013c7e:	4602      	mov	r2, r0
 8013c80:	61f8      	str	r0, [r7, #28]
 8013c82:	b928      	cbnz	r0, 8013c90 <__pow5mult+0x40>
 8013c84:	4b1d      	ldr	r3, [pc, #116]	@ (8013cfc <__pow5mult+0xac>)
 8013c86:	481e      	ldr	r0, [pc, #120]	@ (8013d00 <__pow5mult+0xb0>)
 8013c88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013c8c:	f000 fd30 	bl	80146f0 <__assert_func>
 8013c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c94:	6004      	str	r4, [r0, #0]
 8013c96:	60c4      	str	r4, [r0, #12]
 8013c98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ca0:	b94c      	cbnz	r4, 8013cb6 <__pow5mult+0x66>
 8013ca2:	f240 2171 	movw	r1, #625	@ 0x271
 8013ca6:	4638      	mov	r0, r7
 8013ca8:	f7ff ff1a 	bl	8013ae0 <__i2b>
 8013cac:	2300      	movs	r3, #0
 8013cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	6003      	str	r3, [r0, #0]
 8013cb6:	f04f 0900 	mov.w	r9, #0
 8013cba:	07eb      	lsls	r3, r5, #31
 8013cbc:	d50a      	bpl.n	8013cd4 <__pow5mult+0x84>
 8013cbe:	4631      	mov	r1, r6
 8013cc0:	4622      	mov	r2, r4
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	f7ff ff22 	bl	8013b0c <__multiply>
 8013cc8:	4631      	mov	r1, r6
 8013cca:	4680      	mov	r8, r0
 8013ccc:	4638      	mov	r0, r7
 8013cce:	f7ff fe09 	bl	80138e4 <_Bfree>
 8013cd2:	4646      	mov	r6, r8
 8013cd4:	106d      	asrs	r5, r5, #1
 8013cd6:	d00b      	beq.n	8013cf0 <__pow5mult+0xa0>
 8013cd8:	6820      	ldr	r0, [r4, #0]
 8013cda:	b938      	cbnz	r0, 8013cec <__pow5mult+0x9c>
 8013cdc:	4622      	mov	r2, r4
 8013cde:	4621      	mov	r1, r4
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	f7ff ff13 	bl	8013b0c <__multiply>
 8013ce6:	6020      	str	r0, [r4, #0]
 8013ce8:	f8c0 9000 	str.w	r9, [r0]
 8013cec:	4604      	mov	r4, r0
 8013cee:	e7e4      	b.n	8013cba <__pow5mult+0x6a>
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf6:	bf00      	nop
 8013cf8:	080152c8 	.word	0x080152c8
 8013cfc:	080150eb 	.word	0x080150eb
 8013d00:	080151cb 	.word	0x080151cb

08013d04 <__lshift>:
 8013d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d08:	460c      	mov	r4, r1
 8013d0a:	6849      	ldr	r1, [r1, #4]
 8013d0c:	6923      	ldr	r3, [r4, #16]
 8013d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d12:	68a3      	ldr	r3, [r4, #8]
 8013d14:	4607      	mov	r7, r0
 8013d16:	4691      	mov	r9, r2
 8013d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d1c:	f108 0601 	add.w	r6, r8, #1
 8013d20:	42b3      	cmp	r3, r6
 8013d22:	db0b      	blt.n	8013d3c <__lshift+0x38>
 8013d24:	4638      	mov	r0, r7
 8013d26:	f7ff fd9d 	bl	8013864 <_Balloc>
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	b948      	cbnz	r0, 8013d42 <__lshift+0x3e>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	4b28      	ldr	r3, [pc, #160]	@ (8013dd4 <__lshift+0xd0>)
 8013d32:	4829      	ldr	r0, [pc, #164]	@ (8013dd8 <__lshift+0xd4>)
 8013d34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013d38:	f000 fcda 	bl	80146f0 <__assert_func>
 8013d3c:	3101      	adds	r1, #1
 8013d3e:	005b      	lsls	r3, r3, #1
 8013d40:	e7ee      	b.n	8013d20 <__lshift+0x1c>
 8013d42:	2300      	movs	r3, #0
 8013d44:	f100 0114 	add.w	r1, r0, #20
 8013d48:	f100 0210 	add.w	r2, r0, #16
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	4553      	cmp	r3, sl
 8013d50:	db33      	blt.n	8013dba <__lshift+0xb6>
 8013d52:	6920      	ldr	r0, [r4, #16]
 8013d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d58:	f104 0314 	add.w	r3, r4, #20
 8013d5c:	f019 091f 	ands.w	r9, r9, #31
 8013d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d68:	d02b      	beq.n	8013dc2 <__lshift+0xbe>
 8013d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8013d6e:	468a      	mov	sl, r1
 8013d70:	2200      	movs	r2, #0
 8013d72:	6818      	ldr	r0, [r3, #0]
 8013d74:	fa00 f009 	lsl.w	r0, r0, r9
 8013d78:	4310      	orrs	r0, r2
 8013d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8013d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d82:	459c      	cmp	ip, r3
 8013d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d88:	d8f3      	bhi.n	8013d72 <__lshift+0x6e>
 8013d8a:	ebac 0304 	sub.w	r3, ip, r4
 8013d8e:	3b15      	subs	r3, #21
 8013d90:	f023 0303 	bic.w	r3, r3, #3
 8013d94:	3304      	adds	r3, #4
 8013d96:	f104 0015 	add.w	r0, r4, #21
 8013d9a:	4560      	cmp	r0, ip
 8013d9c:	bf88      	it	hi
 8013d9e:	2304      	movhi	r3, #4
 8013da0:	50ca      	str	r2, [r1, r3]
 8013da2:	b10a      	cbz	r2, 8013da8 <__lshift+0xa4>
 8013da4:	f108 0602 	add.w	r6, r8, #2
 8013da8:	3e01      	subs	r6, #1
 8013daa:	4638      	mov	r0, r7
 8013dac:	612e      	str	r6, [r5, #16]
 8013dae:	4621      	mov	r1, r4
 8013db0:	f7ff fd98 	bl	80138e4 <_Bfree>
 8013db4:	4628      	mov	r0, r5
 8013db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	e7c5      	b.n	8013d4e <__lshift+0x4a>
 8013dc2:	3904      	subs	r1, #4
 8013dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dcc:	459c      	cmp	ip, r3
 8013dce:	d8f9      	bhi.n	8013dc4 <__lshift+0xc0>
 8013dd0:	e7ea      	b.n	8013da8 <__lshift+0xa4>
 8013dd2:	bf00      	nop
 8013dd4:	0801515a 	.word	0x0801515a
 8013dd8:	080151cb 	.word	0x080151cb

08013ddc <__mcmp>:
 8013ddc:	690a      	ldr	r2, [r1, #16]
 8013dde:	4603      	mov	r3, r0
 8013de0:	6900      	ldr	r0, [r0, #16]
 8013de2:	1a80      	subs	r0, r0, r2
 8013de4:	b530      	push	{r4, r5, lr}
 8013de6:	d10e      	bne.n	8013e06 <__mcmp+0x2a>
 8013de8:	3314      	adds	r3, #20
 8013dea:	3114      	adds	r1, #20
 8013dec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013df0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013df4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013df8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013dfc:	4295      	cmp	r5, r2
 8013dfe:	d003      	beq.n	8013e08 <__mcmp+0x2c>
 8013e00:	d205      	bcs.n	8013e0e <__mcmp+0x32>
 8013e02:	f04f 30ff 	mov.w	r0, #4294967295
 8013e06:	bd30      	pop	{r4, r5, pc}
 8013e08:	42a3      	cmp	r3, r4
 8013e0a:	d3f3      	bcc.n	8013df4 <__mcmp+0x18>
 8013e0c:	e7fb      	b.n	8013e06 <__mcmp+0x2a>
 8013e0e:	2001      	movs	r0, #1
 8013e10:	e7f9      	b.n	8013e06 <__mcmp+0x2a>
	...

08013e14 <__mdiff>:
 8013e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e18:	4689      	mov	r9, r1
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	4611      	mov	r1, r2
 8013e1e:	4648      	mov	r0, r9
 8013e20:	4614      	mov	r4, r2
 8013e22:	f7ff ffdb 	bl	8013ddc <__mcmp>
 8013e26:	1e05      	subs	r5, r0, #0
 8013e28:	d112      	bne.n	8013e50 <__mdiff+0x3c>
 8013e2a:	4629      	mov	r1, r5
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	f7ff fd19 	bl	8013864 <_Balloc>
 8013e32:	4602      	mov	r2, r0
 8013e34:	b928      	cbnz	r0, 8013e42 <__mdiff+0x2e>
 8013e36:	4b3f      	ldr	r3, [pc, #252]	@ (8013f34 <__mdiff+0x120>)
 8013e38:	f240 2137 	movw	r1, #567	@ 0x237
 8013e3c:	483e      	ldr	r0, [pc, #248]	@ (8013f38 <__mdiff+0x124>)
 8013e3e:	f000 fc57 	bl	80146f0 <__assert_func>
 8013e42:	2301      	movs	r3, #1
 8013e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e48:	4610      	mov	r0, r2
 8013e4a:	b003      	add	sp, #12
 8013e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e50:	bfbc      	itt	lt
 8013e52:	464b      	movlt	r3, r9
 8013e54:	46a1      	movlt	r9, r4
 8013e56:	4630      	mov	r0, r6
 8013e58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013e5c:	bfba      	itte	lt
 8013e5e:	461c      	movlt	r4, r3
 8013e60:	2501      	movlt	r5, #1
 8013e62:	2500      	movge	r5, #0
 8013e64:	f7ff fcfe 	bl	8013864 <_Balloc>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	b918      	cbnz	r0, 8013e74 <__mdiff+0x60>
 8013e6c:	4b31      	ldr	r3, [pc, #196]	@ (8013f34 <__mdiff+0x120>)
 8013e6e:	f240 2145 	movw	r1, #581	@ 0x245
 8013e72:	e7e3      	b.n	8013e3c <__mdiff+0x28>
 8013e74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013e78:	6926      	ldr	r6, [r4, #16]
 8013e7a:	60c5      	str	r5, [r0, #12]
 8013e7c:	f109 0310 	add.w	r3, r9, #16
 8013e80:	f109 0514 	add.w	r5, r9, #20
 8013e84:	f104 0e14 	add.w	lr, r4, #20
 8013e88:	f100 0b14 	add.w	fp, r0, #20
 8013e8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013e90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013e94:	9301      	str	r3, [sp, #4]
 8013e96:	46d9      	mov	r9, fp
 8013e98:	f04f 0c00 	mov.w	ip, #0
 8013e9c:	9b01      	ldr	r3, [sp, #4]
 8013e9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013ea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013ea6:	9301      	str	r3, [sp, #4]
 8013ea8:	fa1f f38a 	uxth.w	r3, sl
 8013eac:	4619      	mov	r1, r3
 8013eae:	b283      	uxth	r3, r0
 8013eb0:	1acb      	subs	r3, r1, r3
 8013eb2:	0c00      	lsrs	r0, r0, #16
 8013eb4:	4463      	add	r3, ip
 8013eb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013eba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013ec4:	4576      	cmp	r6, lr
 8013ec6:	f849 3b04 	str.w	r3, [r9], #4
 8013eca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ece:	d8e5      	bhi.n	8013e9c <__mdiff+0x88>
 8013ed0:	1b33      	subs	r3, r6, r4
 8013ed2:	3b15      	subs	r3, #21
 8013ed4:	f023 0303 	bic.w	r3, r3, #3
 8013ed8:	3415      	adds	r4, #21
 8013eda:	3304      	adds	r3, #4
 8013edc:	42a6      	cmp	r6, r4
 8013ede:	bf38      	it	cc
 8013ee0:	2304      	movcc	r3, #4
 8013ee2:	441d      	add	r5, r3
 8013ee4:	445b      	add	r3, fp
 8013ee6:	461e      	mov	r6, r3
 8013ee8:	462c      	mov	r4, r5
 8013eea:	4544      	cmp	r4, r8
 8013eec:	d30e      	bcc.n	8013f0c <__mdiff+0xf8>
 8013eee:	f108 0103 	add.w	r1, r8, #3
 8013ef2:	1b49      	subs	r1, r1, r5
 8013ef4:	f021 0103 	bic.w	r1, r1, #3
 8013ef8:	3d03      	subs	r5, #3
 8013efa:	45a8      	cmp	r8, r5
 8013efc:	bf38      	it	cc
 8013efe:	2100      	movcc	r1, #0
 8013f00:	440b      	add	r3, r1
 8013f02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f06:	b191      	cbz	r1, 8013f2e <__mdiff+0x11a>
 8013f08:	6117      	str	r7, [r2, #16]
 8013f0a:	e79d      	b.n	8013e48 <__mdiff+0x34>
 8013f0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013f10:	46e6      	mov	lr, ip
 8013f12:	0c08      	lsrs	r0, r1, #16
 8013f14:	fa1c fc81 	uxtah	ip, ip, r1
 8013f18:	4471      	add	r1, lr
 8013f1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013f1e:	b289      	uxth	r1, r1
 8013f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013f24:	f846 1b04 	str.w	r1, [r6], #4
 8013f28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f2c:	e7dd      	b.n	8013eea <__mdiff+0xd6>
 8013f2e:	3f01      	subs	r7, #1
 8013f30:	e7e7      	b.n	8013f02 <__mdiff+0xee>
 8013f32:	bf00      	nop
 8013f34:	0801515a 	.word	0x0801515a
 8013f38:	080151cb 	.word	0x080151cb

08013f3c <__ulp>:
 8013f3c:	b082      	sub	sp, #8
 8013f3e:	ed8d 0b00 	vstr	d0, [sp]
 8013f42:	9a01      	ldr	r2, [sp, #4]
 8013f44:	4b0f      	ldr	r3, [pc, #60]	@ (8013f84 <__ulp+0x48>)
 8013f46:	4013      	ands	r3, r2
 8013f48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dc08      	bgt.n	8013f62 <__ulp+0x26>
 8013f50:	425b      	negs	r3, r3
 8013f52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013f56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013f5a:	da04      	bge.n	8013f66 <__ulp+0x2a>
 8013f5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013f60:	4113      	asrs	r3, r2
 8013f62:	2200      	movs	r2, #0
 8013f64:	e008      	b.n	8013f78 <__ulp+0x3c>
 8013f66:	f1a2 0314 	sub.w	r3, r2, #20
 8013f6a:	2b1e      	cmp	r3, #30
 8013f6c:	bfda      	itte	le
 8013f6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013f72:	40da      	lsrle	r2, r3
 8013f74:	2201      	movgt	r2, #1
 8013f76:	2300      	movs	r3, #0
 8013f78:	4619      	mov	r1, r3
 8013f7a:	4610      	mov	r0, r2
 8013f7c:	ec41 0b10 	vmov	d0, r0, r1
 8013f80:	b002      	add	sp, #8
 8013f82:	4770      	bx	lr
 8013f84:	7ff00000 	.word	0x7ff00000

08013f88 <__b2d>:
 8013f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f8c:	6906      	ldr	r6, [r0, #16]
 8013f8e:	f100 0814 	add.w	r8, r0, #20
 8013f92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013f96:	1f37      	subs	r7, r6, #4
 8013f98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f9c:	4610      	mov	r0, r2
 8013f9e:	f7ff fd53 	bl	8013a48 <__hi0bits>
 8013fa2:	f1c0 0320 	rsb	r3, r0, #32
 8013fa6:	280a      	cmp	r0, #10
 8013fa8:	600b      	str	r3, [r1, #0]
 8013faa:	491b      	ldr	r1, [pc, #108]	@ (8014018 <__b2d+0x90>)
 8013fac:	dc15      	bgt.n	8013fda <__b2d+0x52>
 8013fae:	f1c0 0c0b 	rsb	ip, r0, #11
 8013fb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8013fb6:	45b8      	cmp	r8, r7
 8013fb8:	ea43 0501 	orr.w	r5, r3, r1
 8013fbc:	bf34      	ite	cc
 8013fbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013fc2:	2300      	movcs	r3, #0
 8013fc4:	3015      	adds	r0, #21
 8013fc6:	fa02 f000 	lsl.w	r0, r2, r0
 8013fca:	fa23 f30c 	lsr.w	r3, r3, ip
 8013fce:	4303      	orrs	r3, r0
 8013fd0:	461c      	mov	r4, r3
 8013fd2:	ec45 4b10 	vmov	d0, r4, r5
 8013fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fda:	45b8      	cmp	r8, r7
 8013fdc:	bf3a      	itte	cc
 8013fde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013fe2:	f1a6 0708 	subcc.w	r7, r6, #8
 8013fe6:	2300      	movcs	r3, #0
 8013fe8:	380b      	subs	r0, #11
 8013fea:	d012      	beq.n	8014012 <__b2d+0x8a>
 8013fec:	f1c0 0120 	rsb	r1, r0, #32
 8013ff0:	fa23 f401 	lsr.w	r4, r3, r1
 8013ff4:	4082      	lsls	r2, r0
 8013ff6:	4322      	orrs	r2, r4
 8013ff8:	4547      	cmp	r7, r8
 8013ffa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013ffe:	bf8c      	ite	hi
 8014000:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014004:	2200      	movls	r2, #0
 8014006:	4083      	lsls	r3, r0
 8014008:	40ca      	lsrs	r2, r1
 801400a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801400e:	4313      	orrs	r3, r2
 8014010:	e7de      	b.n	8013fd0 <__b2d+0x48>
 8014012:	ea42 0501 	orr.w	r5, r2, r1
 8014016:	e7db      	b.n	8013fd0 <__b2d+0x48>
 8014018:	3ff00000 	.word	0x3ff00000

0801401c <__d2b>:
 801401c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014020:	460f      	mov	r7, r1
 8014022:	2101      	movs	r1, #1
 8014024:	ec59 8b10 	vmov	r8, r9, d0
 8014028:	4616      	mov	r6, r2
 801402a:	f7ff fc1b 	bl	8013864 <_Balloc>
 801402e:	4604      	mov	r4, r0
 8014030:	b930      	cbnz	r0, 8014040 <__d2b+0x24>
 8014032:	4602      	mov	r2, r0
 8014034:	4b23      	ldr	r3, [pc, #140]	@ (80140c4 <__d2b+0xa8>)
 8014036:	4824      	ldr	r0, [pc, #144]	@ (80140c8 <__d2b+0xac>)
 8014038:	f240 310f 	movw	r1, #783	@ 0x30f
 801403c:	f000 fb58 	bl	80146f0 <__assert_func>
 8014040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014048:	b10d      	cbz	r5, 801404e <__d2b+0x32>
 801404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801404e:	9301      	str	r3, [sp, #4]
 8014050:	f1b8 0300 	subs.w	r3, r8, #0
 8014054:	d023      	beq.n	801409e <__d2b+0x82>
 8014056:	4668      	mov	r0, sp
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	f7ff fd14 	bl	8013a86 <__lo0bits>
 801405e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014062:	b1d0      	cbz	r0, 801409a <__d2b+0x7e>
 8014064:	f1c0 0320 	rsb	r3, r0, #32
 8014068:	fa02 f303 	lsl.w	r3, r2, r3
 801406c:	430b      	orrs	r3, r1
 801406e:	40c2      	lsrs	r2, r0
 8014070:	6163      	str	r3, [r4, #20]
 8014072:	9201      	str	r2, [sp, #4]
 8014074:	9b01      	ldr	r3, [sp, #4]
 8014076:	61a3      	str	r3, [r4, #24]
 8014078:	2b00      	cmp	r3, #0
 801407a:	bf0c      	ite	eq
 801407c:	2201      	moveq	r2, #1
 801407e:	2202      	movne	r2, #2
 8014080:	6122      	str	r2, [r4, #16]
 8014082:	b1a5      	cbz	r5, 80140ae <__d2b+0x92>
 8014084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014088:	4405      	add	r5, r0
 801408a:	603d      	str	r5, [r7, #0]
 801408c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014090:	6030      	str	r0, [r6, #0]
 8014092:	4620      	mov	r0, r4
 8014094:	b003      	add	sp, #12
 8014096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801409a:	6161      	str	r1, [r4, #20]
 801409c:	e7ea      	b.n	8014074 <__d2b+0x58>
 801409e:	a801      	add	r0, sp, #4
 80140a0:	f7ff fcf1 	bl	8013a86 <__lo0bits>
 80140a4:	9b01      	ldr	r3, [sp, #4]
 80140a6:	6163      	str	r3, [r4, #20]
 80140a8:	3020      	adds	r0, #32
 80140aa:	2201      	movs	r2, #1
 80140ac:	e7e8      	b.n	8014080 <__d2b+0x64>
 80140ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80140b6:	6038      	str	r0, [r7, #0]
 80140b8:	6918      	ldr	r0, [r3, #16]
 80140ba:	f7ff fcc5 	bl	8013a48 <__hi0bits>
 80140be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140c2:	e7e5      	b.n	8014090 <__d2b+0x74>
 80140c4:	0801515a 	.word	0x0801515a
 80140c8:	080151cb 	.word	0x080151cb

080140cc <__ratio>:
 80140cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d0:	4688      	mov	r8, r1
 80140d2:	4669      	mov	r1, sp
 80140d4:	4681      	mov	r9, r0
 80140d6:	f7ff ff57 	bl	8013f88 <__b2d>
 80140da:	a901      	add	r1, sp, #4
 80140dc:	4640      	mov	r0, r8
 80140de:	ec55 4b10 	vmov	r4, r5, d0
 80140e2:	f7ff ff51 	bl	8013f88 <__b2d>
 80140e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80140ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80140ee:	1ad2      	subs	r2, r2, r3
 80140f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80140f4:	1a5b      	subs	r3, r3, r1
 80140f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80140fa:	ec57 6b10 	vmov	r6, r7, d0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	bfd6      	itet	le
 8014102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014106:	462a      	movgt	r2, r5
 8014108:	463a      	movle	r2, r7
 801410a:	46ab      	mov	fp, r5
 801410c:	46a2      	mov	sl, r4
 801410e:	bfce      	itee	gt
 8014110:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014114:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8014118:	ee00 3a90 	vmovle	s1, r3
 801411c:	ec4b ab17 	vmov	d7, sl, fp
 8014120:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8014124:	b003      	add	sp, #12
 8014126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801412a <__copybits>:
 801412a:	3901      	subs	r1, #1
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	1149      	asrs	r1, r1, #5
 8014130:	6914      	ldr	r4, [r2, #16]
 8014132:	3101      	adds	r1, #1
 8014134:	f102 0314 	add.w	r3, r2, #20
 8014138:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801413c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014140:	1f05      	subs	r5, r0, #4
 8014142:	42a3      	cmp	r3, r4
 8014144:	d30c      	bcc.n	8014160 <__copybits+0x36>
 8014146:	1aa3      	subs	r3, r4, r2
 8014148:	3b11      	subs	r3, #17
 801414a:	f023 0303 	bic.w	r3, r3, #3
 801414e:	3211      	adds	r2, #17
 8014150:	42a2      	cmp	r2, r4
 8014152:	bf88      	it	hi
 8014154:	2300      	movhi	r3, #0
 8014156:	4418      	add	r0, r3
 8014158:	2300      	movs	r3, #0
 801415a:	4288      	cmp	r0, r1
 801415c:	d305      	bcc.n	801416a <__copybits+0x40>
 801415e:	bd70      	pop	{r4, r5, r6, pc}
 8014160:	f853 6b04 	ldr.w	r6, [r3], #4
 8014164:	f845 6f04 	str.w	r6, [r5, #4]!
 8014168:	e7eb      	b.n	8014142 <__copybits+0x18>
 801416a:	f840 3b04 	str.w	r3, [r0], #4
 801416e:	e7f4      	b.n	801415a <__copybits+0x30>

08014170 <__any_on>:
 8014170:	f100 0214 	add.w	r2, r0, #20
 8014174:	6900      	ldr	r0, [r0, #16]
 8014176:	114b      	asrs	r3, r1, #5
 8014178:	4298      	cmp	r0, r3
 801417a:	b510      	push	{r4, lr}
 801417c:	db11      	blt.n	80141a2 <__any_on+0x32>
 801417e:	dd0a      	ble.n	8014196 <__any_on+0x26>
 8014180:	f011 011f 	ands.w	r1, r1, #31
 8014184:	d007      	beq.n	8014196 <__any_on+0x26>
 8014186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801418a:	fa24 f001 	lsr.w	r0, r4, r1
 801418e:	fa00 f101 	lsl.w	r1, r0, r1
 8014192:	428c      	cmp	r4, r1
 8014194:	d10b      	bne.n	80141ae <__any_on+0x3e>
 8014196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801419a:	4293      	cmp	r3, r2
 801419c:	d803      	bhi.n	80141a6 <__any_on+0x36>
 801419e:	2000      	movs	r0, #0
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	4603      	mov	r3, r0
 80141a4:	e7f7      	b.n	8014196 <__any_on+0x26>
 80141a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80141aa:	2900      	cmp	r1, #0
 80141ac:	d0f5      	beq.n	801419a <__any_on+0x2a>
 80141ae:	2001      	movs	r0, #1
 80141b0:	e7f6      	b.n	80141a0 <__any_on+0x30>

080141b2 <__ascii_wctomb>:
 80141b2:	4603      	mov	r3, r0
 80141b4:	4608      	mov	r0, r1
 80141b6:	b141      	cbz	r1, 80141ca <__ascii_wctomb+0x18>
 80141b8:	2aff      	cmp	r2, #255	@ 0xff
 80141ba:	d904      	bls.n	80141c6 <__ascii_wctomb+0x14>
 80141bc:	228a      	movs	r2, #138	@ 0x8a
 80141be:	601a      	str	r2, [r3, #0]
 80141c0:	f04f 30ff 	mov.w	r0, #4294967295
 80141c4:	4770      	bx	lr
 80141c6:	700a      	strb	r2, [r1, #0]
 80141c8:	2001      	movs	r0, #1
 80141ca:	4770      	bx	lr

080141cc <__sfputc_r>:
 80141cc:	6893      	ldr	r3, [r2, #8]
 80141ce:	3b01      	subs	r3, #1
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	b410      	push	{r4}
 80141d4:	6093      	str	r3, [r2, #8]
 80141d6:	da08      	bge.n	80141ea <__sfputc_r+0x1e>
 80141d8:	6994      	ldr	r4, [r2, #24]
 80141da:	42a3      	cmp	r3, r4
 80141dc:	db01      	blt.n	80141e2 <__sfputc_r+0x16>
 80141de:	290a      	cmp	r1, #10
 80141e0:	d103      	bne.n	80141ea <__sfputc_r+0x1e>
 80141e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e6:	f000 b9df 	b.w	80145a8 <__swbuf_r>
 80141ea:	6813      	ldr	r3, [r2, #0]
 80141ec:	1c58      	adds	r0, r3, #1
 80141ee:	6010      	str	r0, [r2, #0]
 80141f0:	7019      	strb	r1, [r3, #0]
 80141f2:	4608      	mov	r0, r1
 80141f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141f8:	4770      	bx	lr

080141fa <__sfputs_r>:
 80141fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141fc:	4606      	mov	r6, r0
 80141fe:	460f      	mov	r7, r1
 8014200:	4614      	mov	r4, r2
 8014202:	18d5      	adds	r5, r2, r3
 8014204:	42ac      	cmp	r4, r5
 8014206:	d101      	bne.n	801420c <__sfputs_r+0x12>
 8014208:	2000      	movs	r0, #0
 801420a:	e007      	b.n	801421c <__sfputs_r+0x22>
 801420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014210:	463a      	mov	r2, r7
 8014212:	4630      	mov	r0, r6
 8014214:	f7ff ffda 	bl	80141cc <__sfputc_r>
 8014218:	1c43      	adds	r3, r0, #1
 801421a:	d1f3      	bne.n	8014204 <__sfputs_r+0xa>
 801421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014220 <_vfiprintf_r>:
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	460d      	mov	r5, r1
 8014226:	b09d      	sub	sp, #116	@ 0x74
 8014228:	4614      	mov	r4, r2
 801422a:	4698      	mov	r8, r3
 801422c:	4606      	mov	r6, r0
 801422e:	b118      	cbz	r0, 8014238 <_vfiprintf_r+0x18>
 8014230:	6a03      	ldr	r3, [r0, #32]
 8014232:	b90b      	cbnz	r3, 8014238 <_vfiprintf_r+0x18>
 8014234:	f7fd fee2 	bl	8011ffc <__sinit>
 8014238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801423a:	07d9      	lsls	r1, r3, #31
 801423c:	d405      	bmi.n	801424a <_vfiprintf_r+0x2a>
 801423e:	89ab      	ldrh	r3, [r5, #12]
 8014240:	059a      	lsls	r2, r3, #22
 8014242:	d402      	bmi.n	801424a <_vfiprintf_r+0x2a>
 8014244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014246:	f7fe f8ba 	bl	80123be <__retarget_lock_acquire_recursive>
 801424a:	89ab      	ldrh	r3, [r5, #12]
 801424c:	071b      	lsls	r3, r3, #28
 801424e:	d501      	bpl.n	8014254 <_vfiprintf_r+0x34>
 8014250:	692b      	ldr	r3, [r5, #16]
 8014252:	b99b      	cbnz	r3, 801427c <_vfiprintf_r+0x5c>
 8014254:	4629      	mov	r1, r5
 8014256:	4630      	mov	r0, r6
 8014258:	f000 f9e4 	bl	8014624 <__swsetup_r>
 801425c:	b170      	cbz	r0, 801427c <_vfiprintf_r+0x5c>
 801425e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014260:	07dc      	lsls	r4, r3, #31
 8014262:	d504      	bpl.n	801426e <_vfiprintf_r+0x4e>
 8014264:	f04f 30ff 	mov.w	r0, #4294967295
 8014268:	b01d      	add	sp, #116	@ 0x74
 801426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426e:	89ab      	ldrh	r3, [r5, #12]
 8014270:	0598      	lsls	r0, r3, #22
 8014272:	d4f7      	bmi.n	8014264 <_vfiprintf_r+0x44>
 8014274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014276:	f7fe f8a3 	bl	80123c0 <__retarget_lock_release_recursive>
 801427a:	e7f3      	b.n	8014264 <_vfiprintf_r+0x44>
 801427c:	2300      	movs	r3, #0
 801427e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014280:	2320      	movs	r3, #32
 8014282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014286:	f8cd 800c 	str.w	r8, [sp, #12]
 801428a:	2330      	movs	r3, #48	@ 0x30
 801428c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801443c <_vfiprintf_r+0x21c>
 8014290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014294:	f04f 0901 	mov.w	r9, #1
 8014298:	4623      	mov	r3, r4
 801429a:	469a      	mov	sl, r3
 801429c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142a0:	b10a      	cbz	r2, 80142a6 <_vfiprintf_r+0x86>
 80142a2:	2a25      	cmp	r2, #37	@ 0x25
 80142a4:	d1f9      	bne.n	801429a <_vfiprintf_r+0x7a>
 80142a6:	ebba 0b04 	subs.w	fp, sl, r4
 80142aa:	d00b      	beq.n	80142c4 <_vfiprintf_r+0xa4>
 80142ac:	465b      	mov	r3, fp
 80142ae:	4622      	mov	r2, r4
 80142b0:	4629      	mov	r1, r5
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7ff ffa1 	bl	80141fa <__sfputs_r>
 80142b8:	3001      	adds	r0, #1
 80142ba:	f000 80a7 	beq.w	801440c <_vfiprintf_r+0x1ec>
 80142be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142c0:	445a      	add	r2, fp
 80142c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80142c4:	f89a 3000 	ldrb.w	r3, [sl]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	f000 809f 	beq.w	801440c <_vfiprintf_r+0x1ec>
 80142ce:	2300      	movs	r3, #0
 80142d0:	f04f 32ff 	mov.w	r2, #4294967295
 80142d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142d8:	f10a 0a01 	add.w	sl, sl, #1
 80142dc:	9304      	str	r3, [sp, #16]
 80142de:	9307      	str	r3, [sp, #28]
 80142e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80142e6:	4654      	mov	r4, sl
 80142e8:	2205      	movs	r2, #5
 80142ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142ee:	4853      	ldr	r0, [pc, #332]	@ (801443c <_vfiprintf_r+0x21c>)
 80142f0:	f7eb fff6 	bl	80002e0 <memchr>
 80142f4:	9a04      	ldr	r2, [sp, #16]
 80142f6:	b9d8      	cbnz	r0, 8014330 <_vfiprintf_r+0x110>
 80142f8:	06d1      	lsls	r1, r2, #27
 80142fa:	bf44      	itt	mi
 80142fc:	2320      	movmi	r3, #32
 80142fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014302:	0713      	lsls	r3, r2, #28
 8014304:	bf44      	itt	mi
 8014306:	232b      	movmi	r3, #43	@ 0x2b
 8014308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801430c:	f89a 3000 	ldrb.w	r3, [sl]
 8014310:	2b2a      	cmp	r3, #42	@ 0x2a
 8014312:	d015      	beq.n	8014340 <_vfiprintf_r+0x120>
 8014314:	9a07      	ldr	r2, [sp, #28]
 8014316:	4654      	mov	r4, sl
 8014318:	2000      	movs	r0, #0
 801431a:	f04f 0c0a 	mov.w	ip, #10
 801431e:	4621      	mov	r1, r4
 8014320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014324:	3b30      	subs	r3, #48	@ 0x30
 8014326:	2b09      	cmp	r3, #9
 8014328:	d94b      	bls.n	80143c2 <_vfiprintf_r+0x1a2>
 801432a:	b1b0      	cbz	r0, 801435a <_vfiprintf_r+0x13a>
 801432c:	9207      	str	r2, [sp, #28]
 801432e:	e014      	b.n	801435a <_vfiprintf_r+0x13a>
 8014330:	eba0 0308 	sub.w	r3, r0, r8
 8014334:	fa09 f303 	lsl.w	r3, r9, r3
 8014338:	4313      	orrs	r3, r2
 801433a:	9304      	str	r3, [sp, #16]
 801433c:	46a2      	mov	sl, r4
 801433e:	e7d2      	b.n	80142e6 <_vfiprintf_r+0xc6>
 8014340:	9b03      	ldr	r3, [sp, #12]
 8014342:	1d19      	adds	r1, r3, #4
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	9103      	str	r1, [sp, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	bfbb      	ittet	lt
 801434c:	425b      	neglt	r3, r3
 801434e:	f042 0202 	orrlt.w	r2, r2, #2
 8014352:	9307      	strge	r3, [sp, #28]
 8014354:	9307      	strlt	r3, [sp, #28]
 8014356:	bfb8      	it	lt
 8014358:	9204      	strlt	r2, [sp, #16]
 801435a:	7823      	ldrb	r3, [r4, #0]
 801435c:	2b2e      	cmp	r3, #46	@ 0x2e
 801435e:	d10a      	bne.n	8014376 <_vfiprintf_r+0x156>
 8014360:	7863      	ldrb	r3, [r4, #1]
 8014362:	2b2a      	cmp	r3, #42	@ 0x2a
 8014364:	d132      	bne.n	80143cc <_vfiprintf_r+0x1ac>
 8014366:	9b03      	ldr	r3, [sp, #12]
 8014368:	1d1a      	adds	r2, r3, #4
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	9203      	str	r2, [sp, #12]
 801436e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014372:	3402      	adds	r4, #2
 8014374:	9305      	str	r3, [sp, #20]
 8014376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801444c <_vfiprintf_r+0x22c>
 801437a:	7821      	ldrb	r1, [r4, #0]
 801437c:	2203      	movs	r2, #3
 801437e:	4650      	mov	r0, sl
 8014380:	f7eb ffae 	bl	80002e0 <memchr>
 8014384:	b138      	cbz	r0, 8014396 <_vfiprintf_r+0x176>
 8014386:	9b04      	ldr	r3, [sp, #16]
 8014388:	eba0 000a 	sub.w	r0, r0, sl
 801438c:	2240      	movs	r2, #64	@ 0x40
 801438e:	4082      	lsls	r2, r0
 8014390:	4313      	orrs	r3, r2
 8014392:	3401      	adds	r4, #1
 8014394:	9304      	str	r3, [sp, #16]
 8014396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801439a:	4829      	ldr	r0, [pc, #164]	@ (8014440 <_vfiprintf_r+0x220>)
 801439c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143a0:	2206      	movs	r2, #6
 80143a2:	f7eb ff9d 	bl	80002e0 <memchr>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d03f      	beq.n	801442a <_vfiprintf_r+0x20a>
 80143aa:	4b26      	ldr	r3, [pc, #152]	@ (8014444 <_vfiprintf_r+0x224>)
 80143ac:	bb1b      	cbnz	r3, 80143f6 <_vfiprintf_r+0x1d6>
 80143ae:	9b03      	ldr	r3, [sp, #12]
 80143b0:	3307      	adds	r3, #7
 80143b2:	f023 0307 	bic.w	r3, r3, #7
 80143b6:	3308      	adds	r3, #8
 80143b8:	9303      	str	r3, [sp, #12]
 80143ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143bc:	443b      	add	r3, r7
 80143be:	9309      	str	r3, [sp, #36]	@ 0x24
 80143c0:	e76a      	b.n	8014298 <_vfiprintf_r+0x78>
 80143c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80143c6:	460c      	mov	r4, r1
 80143c8:	2001      	movs	r0, #1
 80143ca:	e7a8      	b.n	801431e <_vfiprintf_r+0xfe>
 80143cc:	2300      	movs	r3, #0
 80143ce:	3401      	adds	r4, #1
 80143d0:	9305      	str	r3, [sp, #20]
 80143d2:	4619      	mov	r1, r3
 80143d4:	f04f 0c0a 	mov.w	ip, #10
 80143d8:	4620      	mov	r0, r4
 80143da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143de:	3a30      	subs	r2, #48	@ 0x30
 80143e0:	2a09      	cmp	r2, #9
 80143e2:	d903      	bls.n	80143ec <_vfiprintf_r+0x1cc>
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d0c6      	beq.n	8014376 <_vfiprintf_r+0x156>
 80143e8:	9105      	str	r1, [sp, #20]
 80143ea:	e7c4      	b.n	8014376 <_vfiprintf_r+0x156>
 80143ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80143f0:	4604      	mov	r4, r0
 80143f2:	2301      	movs	r3, #1
 80143f4:	e7f0      	b.n	80143d8 <_vfiprintf_r+0x1b8>
 80143f6:	ab03      	add	r3, sp, #12
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	462a      	mov	r2, r5
 80143fc:	4b12      	ldr	r3, [pc, #72]	@ (8014448 <_vfiprintf_r+0x228>)
 80143fe:	a904      	add	r1, sp, #16
 8014400:	4630      	mov	r0, r6
 8014402:	f7fd f9c9 	bl	8011798 <_printf_float>
 8014406:	4607      	mov	r7, r0
 8014408:	1c78      	adds	r0, r7, #1
 801440a:	d1d6      	bne.n	80143ba <_vfiprintf_r+0x19a>
 801440c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801440e:	07d9      	lsls	r1, r3, #31
 8014410:	d405      	bmi.n	801441e <_vfiprintf_r+0x1fe>
 8014412:	89ab      	ldrh	r3, [r5, #12]
 8014414:	059a      	lsls	r2, r3, #22
 8014416:	d402      	bmi.n	801441e <_vfiprintf_r+0x1fe>
 8014418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801441a:	f7fd ffd1 	bl	80123c0 <__retarget_lock_release_recursive>
 801441e:	89ab      	ldrh	r3, [r5, #12]
 8014420:	065b      	lsls	r3, r3, #25
 8014422:	f53f af1f 	bmi.w	8014264 <_vfiprintf_r+0x44>
 8014426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014428:	e71e      	b.n	8014268 <_vfiprintf_r+0x48>
 801442a:	ab03      	add	r3, sp, #12
 801442c:	9300      	str	r3, [sp, #0]
 801442e:	462a      	mov	r2, r5
 8014430:	4b05      	ldr	r3, [pc, #20]	@ (8014448 <_vfiprintf_r+0x228>)
 8014432:	a904      	add	r1, sp, #16
 8014434:	4630      	mov	r0, r6
 8014436:	f7fd fc37 	bl	8011ca8 <_printf_i>
 801443a:	e7e4      	b.n	8014406 <_vfiprintf_r+0x1e6>
 801443c:	08015224 	.word	0x08015224
 8014440:	0801522e 	.word	0x0801522e
 8014444:	08011799 	.word	0x08011799
 8014448:	080141fb 	.word	0x080141fb
 801444c:	0801522a 	.word	0x0801522a

08014450 <__sflush_r>:
 8014450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014458:	0716      	lsls	r6, r2, #28
 801445a:	4605      	mov	r5, r0
 801445c:	460c      	mov	r4, r1
 801445e:	d454      	bmi.n	801450a <__sflush_r+0xba>
 8014460:	684b      	ldr	r3, [r1, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	dc02      	bgt.n	801446c <__sflush_r+0x1c>
 8014466:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014468:	2b00      	cmp	r3, #0
 801446a:	dd48      	ble.n	80144fe <__sflush_r+0xae>
 801446c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801446e:	2e00      	cmp	r6, #0
 8014470:	d045      	beq.n	80144fe <__sflush_r+0xae>
 8014472:	2300      	movs	r3, #0
 8014474:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014478:	682f      	ldr	r7, [r5, #0]
 801447a:	6a21      	ldr	r1, [r4, #32]
 801447c:	602b      	str	r3, [r5, #0]
 801447e:	d030      	beq.n	80144e2 <__sflush_r+0x92>
 8014480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014482:	89a3      	ldrh	r3, [r4, #12]
 8014484:	0759      	lsls	r1, r3, #29
 8014486:	d505      	bpl.n	8014494 <__sflush_r+0x44>
 8014488:	6863      	ldr	r3, [r4, #4]
 801448a:	1ad2      	subs	r2, r2, r3
 801448c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801448e:	b10b      	cbz	r3, 8014494 <__sflush_r+0x44>
 8014490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014492:	1ad2      	subs	r2, r2, r3
 8014494:	2300      	movs	r3, #0
 8014496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014498:	6a21      	ldr	r1, [r4, #32]
 801449a:	4628      	mov	r0, r5
 801449c:	47b0      	blx	r6
 801449e:	1c43      	adds	r3, r0, #1
 80144a0:	89a3      	ldrh	r3, [r4, #12]
 80144a2:	d106      	bne.n	80144b2 <__sflush_r+0x62>
 80144a4:	6829      	ldr	r1, [r5, #0]
 80144a6:	291d      	cmp	r1, #29
 80144a8:	d82b      	bhi.n	8014502 <__sflush_r+0xb2>
 80144aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014554 <__sflush_r+0x104>)
 80144ac:	40ca      	lsrs	r2, r1
 80144ae:	07d6      	lsls	r6, r2, #31
 80144b0:	d527      	bpl.n	8014502 <__sflush_r+0xb2>
 80144b2:	2200      	movs	r2, #0
 80144b4:	6062      	str	r2, [r4, #4]
 80144b6:	04d9      	lsls	r1, r3, #19
 80144b8:	6922      	ldr	r2, [r4, #16]
 80144ba:	6022      	str	r2, [r4, #0]
 80144bc:	d504      	bpl.n	80144c8 <__sflush_r+0x78>
 80144be:	1c42      	adds	r2, r0, #1
 80144c0:	d101      	bne.n	80144c6 <__sflush_r+0x76>
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	b903      	cbnz	r3, 80144c8 <__sflush_r+0x78>
 80144c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80144c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144ca:	602f      	str	r7, [r5, #0]
 80144cc:	b1b9      	cbz	r1, 80144fe <__sflush_r+0xae>
 80144ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144d2:	4299      	cmp	r1, r3
 80144d4:	d002      	beq.n	80144dc <__sflush_r+0x8c>
 80144d6:	4628      	mov	r0, r5
 80144d8:	f7fe fd78 	bl	8012fcc <_free_r>
 80144dc:	2300      	movs	r3, #0
 80144de:	6363      	str	r3, [r4, #52]	@ 0x34
 80144e0:	e00d      	b.n	80144fe <__sflush_r+0xae>
 80144e2:	2301      	movs	r3, #1
 80144e4:	4628      	mov	r0, r5
 80144e6:	47b0      	blx	r6
 80144e8:	4602      	mov	r2, r0
 80144ea:	1c50      	adds	r0, r2, #1
 80144ec:	d1c9      	bne.n	8014482 <__sflush_r+0x32>
 80144ee:	682b      	ldr	r3, [r5, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d0c6      	beq.n	8014482 <__sflush_r+0x32>
 80144f4:	2b1d      	cmp	r3, #29
 80144f6:	d001      	beq.n	80144fc <__sflush_r+0xac>
 80144f8:	2b16      	cmp	r3, #22
 80144fa:	d11e      	bne.n	801453a <__sflush_r+0xea>
 80144fc:	602f      	str	r7, [r5, #0]
 80144fe:	2000      	movs	r0, #0
 8014500:	e022      	b.n	8014548 <__sflush_r+0xf8>
 8014502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014506:	b21b      	sxth	r3, r3
 8014508:	e01b      	b.n	8014542 <__sflush_r+0xf2>
 801450a:	690f      	ldr	r7, [r1, #16]
 801450c:	2f00      	cmp	r7, #0
 801450e:	d0f6      	beq.n	80144fe <__sflush_r+0xae>
 8014510:	0793      	lsls	r3, r2, #30
 8014512:	680e      	ldr	r6, [r1, #0]
 8014514:	bf08      	it	eq
 8014516:	694b      	ldreq	r3, [r1, #20]
 8014518:	600f      	str	r7, [r1, #0]
 801451a:	bf18      	it	ne
 801451c:	2300      	movne	r3, #0
 801451e:	eba6 0807 	sub.w	r8, r6, r7
 8014522:	608b      	str	r3, [r1, #8]
 8014524:	f1b8 0f00 	cmp.w	r8, #0
 8014528:	dde9      	ble.n	80144fe <__sflush_r+0xae>
 801452a:	6a21      	ldr	r1, [r4, #32]
 801452c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801452e:	4643      	mov	r3, r8
 8014530:	463a      	mov	r2, r7
 8014532:	4628      	mov	r0, r5
 8014534:	47b0      	blx	r6
 8014536:	2800      	cmp	r0, #0
 8014538:	dc08      	bgt.n	801454c <__sflush_r+0xfc>
 801453a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801453e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	f04f 30ff 	mov.w	r0, #4294967295
 8014548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801454c:	4407      	add	r7, r0
 801454e:	eba8 0800 	sub.w	r8, r8, r0
 8014552:	e7e7      	b.n	8014524 <__sflush_r+0xd4>
 8014554:	20400001 	.word	0x20400001

08014558 <_fflush_r>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	690b      	ldr	r3, [r1, #16]
 801455c:	4605      	mov	r5, r0
 801455e:	460c      	mov	r4, r1
 8014560:	b913      	cbnz	r3, 8014568 <_fflush_r+0x10>
 8014562:	2500      	movs	r5, #0
 8014564:	4628      	mov	r0, r5
 8014566:	bd38      	pop	{r3, r4, r5, pc}
 8014568:	b118      	cbz	r0, 8014572 <_fflush_r+0x1a>
 801456a:	6a03      	ldr	r3, [r0, #32]
 801456c:	b90b      	cbnz	r3, 8014572 <_fflush_r+0x1a>
 801456e:	f7fd fd45 	bl	8011ffc <__sinit>
 8014572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d0f3      	beq.n	8014562 <_fflush_r+0xa>
 801457a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801457c:	07d0      	lsls	r0, r2, #31
 801457e:	d404      	bmi.n	801458a <_fflush_r+0x32>
 8014580:	0599      	lsls	r1, r3, #22
 8014582:	d402      	bmi.n	801458a <_fflush_r+0x32>
 8014584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014586:	f7fd ff1a 	bl	80123be <__retarget_lock_acquire_recursive>
 801458a:	4628      	mov	r0, r5
 801458c:	4621      	mov	r1, r4
 801458e:	f7ff ff5f 	bl	8014450 <__sflush_r>
 8014592:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014594:	07da      	lsls	r2, r3, #31
 8014596:	4605      	mov	r5, r0
 8014598:	d4e4      	bmi.n	8014564 <_fflush_r+0xc>
 801459a:	89a3      	ldrh	r3, [r4, #12]
 801459c:	059b      	lsls	r3, r3, #22
 801459e:	d4e1      	bmi.n	8014564 <_fflush_r+0xc>
 80145a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145a2:	f7fd ff0d 	bl	80123c0 <__retarget_lock_release_recursive>
 80145a6:	e7dd      	b.n	8014564 <_fflush_r+0xc>

080145a8 <__swbuf_r>:
 80145a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145aa:	460e      	mov	r6, r1
 80145ac:	4614      	mov	r4, r2
 80145ae:	4605      	mov	r5, r0
 80145b0:	b118      	cbz	r0, 80145ba <__swbuf_r+0x12>
 80145b2:	6a03      	ldr	r3, [r0, #32]
 80145b4:	b90b      	cbnz	r3, 80145ba <__swbuf_r+0x12>
 80145b6:	f7fd fd21 	bl	8011ffc <__sinit>
 80145ba:	69a3      	ldr	r3, [r4, #24]
 80145bc:	60a3      	str	r3, [r4, #8]
 80145be:	89a3      	ldrh	r3, [r4, #12]
 80145c0:	071a      	lsls	r2, r3, #28
 80145c2:	d501      	bpl.n	80145c8 <__swbuf_r+0x20>
 80145c4:	6923      	ldr	r3, [r4, #16]
 80145c6:	b943      	cbnz	r3, 80145da <__swbuf_r+0x32>
 80145c8:	4621      	mov	r1, r4
 80145ca:	4628      	mov	r0, r5
 80145cc:	f000 f82a 	bl	8014624 <__swsetup_r>
 80145d0:	b118      	cbz	r0, 80145da <__swbuf_r+0x32>
 80145d2:	f04f 37ff 	mov.w	r7, #4294967295
 80145d6:	4638      	mov	r0, r7
 80145d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	6922      	ldr	r2, [r4, #16]
 80145de:	1a98      	subs	r0, r3, r2
 80145e0:	6963      	ldr	r3, [r4, #20]
 80145e2:	b2f6      	uxtb	r6, r6
 80145e4:	4283      	cmp	r3, r0
 80145e6:	4637      	mov	r7, r6
 80145e8:	dc05      	bgt.n	80145f6 <__swbuf_r+0x4e>
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f7ff ffb3 	bl	8014558 <_fflush_r>
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d1ed      	bne.n	80145d2 <__swbuf_r+0x2a>
 80145f6:	68a3      	ldr	r3, [r4, #8]
 80145f8:	3b01      	subs	r3, #1
 80145fa:	60a3      	str	r3, [r4, #8]
 80145fc:	6823      	ldr	r3, [r4, #0]
 80145fe:	1c5a      	adds	r2, r3, #1
 8014600:	6022      	str	r2, [r4, #0]
 8014602:	701e      	strb	r6, [r3, #0]
 8014604:	6962      	ldr	r2, [r4, #20]
 8014606:	1c43      	adds	r3, r0, #1
 8014608:	429a      	cmp	r2, r3
 801460a:	d004      	beq.n	8014616 <__swbuf_r+0x6e>
 801460c:	89a3      	ldrh	r3, [r4, #12]
 801460e:	07db      	lsls	r3, r3, #31
 8014610:	d5e1      	bpl.n	80145d6 <__swbuf_r+0x2e>
 8014612:	2e0a      	cmp	r6, #10
 8014614:	d1df      	bne.n	80145d6 <__swbuf_r+0x2e>
 8014616:	4621      	mov	r1, r4
 8014618:	4628      	mov	r0, r5
 801461a:	f7ff ff9d 	bl	8014558 <_fflush_r>
 801461e:	2800      	cmp	r0, #0
 8014620:	d0d9      	beq.n	80145d6 <__swbuf_r+0x2e>
 8014622:	e7d6      	b.n	80145d2 <__swbuf_r+0x2a>

08014624 <__swsetup_r>:
 8014624:	b538      	push	{r3, r4, r5, lr}
 8014626:	4b29      	ldr	r3, [pc, #164]	@ (80146cc <__swsetup_r+0xa8>)
 8014628:	4605      	mov	r5, r0
 801462a:	6818      	ldr	r0, [r3, #0]
 801462c:	460c      	mov	r4, r1
 801462e:	b118      	cbz	r0, 8014638 <__swsetup_r+0x14>
 8014630:	6a03      	ldr	r3, [r0, #32]
 8014632:	b90b      	cbnz	r3, 8014638 <__swsetup_r+0x14>
 8014634:	f7fd fce2 	bl	8011ffc <__sinit>
 8014638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801463c:	0719      	lsls	r1, r3, #28
 801463e:	d422      	bmi.n	8014686 <__swsetup_r+0x62>
 8014640:	06da      	lsls	r2, r3, #27
 8014642:	d407      	bmi.n	8014654 <__swsetup_r+0x30>
 8014644:	2209      	movs	r2, #9
 8014646:	602a      	str	r2, [r5, #0]
 8014648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801464c:	81a3      	strh	r3, [r4, #12]
 801464e:	f04f 30ff 	mov.w	r0, #4294967295
 8014652:	e033      	b.n	80146bc <__swsetup_r+0x98>
 8014654:	0758      	lsls	r0, r3, #29
 8014656:	d512      	bpl.n	801467e <__swsetup_r+0x5a>
 8014658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801465a:	b141      	cbz	r1, 801466e <__swsetup_r+0x4a>
 801465c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014660:	4299      	cmp	r1, r3
 8014662:	d002      	beq.n	801466a <__swsetup_r+0x46>
 8014664:	4628      	mov	r0, r5
 8014666:	f7fe fcb1 	bl	8012fcc <_free_r>
 801466a:	2300      	movs	r3, #0
 801466c:	6363      	str	r3, [r4, #52]	@ 0x34
 801466e:	89a3      	ldrh	r3, [r4, #12]
 8014670:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014674:	81a3      	strh	r3, [r4, #12]
 8014676:	2300      	movs	r3, #0
 8014678:	6063      	str	r3, [r4, #4]
 801467a:	6923      	ldr	r3, [r4, #16]
 801467c:	6023      	str	r3, [r4, #0]
 801467e:	89a3      	ldrh	r3, [r4, #12]
 8014680:	f043 0308 	orr.w	r3, r3, #8
 8014684:	81a3      	strh	r3, [r4, #12]
 8014686:	6923      	ldr	r3, [r4, #16]
 8014688:	b94b      	cbnz	r3, 801469e <__swsetup_r+0x7a>
 801468a:	89a3      	ldrh	r3, [r4, #12]
 801468c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014694:	d003      	beq.n	801469e <__swsetup_r+0x7a>
 8014696:	4621      	mov	r1, r4
 8014698:	4628      	mov	r0, r5
 801469a:	f000 f893 	bl	80147c4 <__smakebuf_r>
 801469e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146a2:	f013 0201 	ands.w	r2, r3, #1
 80146a6:	d00a      	beq.n	80146be <__swsetup_r+0x9a>
 80146a8:	2200      	movs	r2, #0
 80146aa:	60a2      	str	r2, [r4, #8]
 80146ac:	6962      	ldr	r2, [r4, #20]
 80146ae:	4252      	negs	r2, r2
 80146b0:	61a2      	str	r2, [r4, #24]
 80146b2:	6922      	ldr	r2, [r4, #16]
 80146b4:	b942      	cbnz	r2, 80146c8 <__swsetup_r+0xa4>
 80146b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146ba:	d1c5      	bne.n	8014648 <__swsetup_r+0x24>
 80146bc:	bd38      	pop	{r3, r4, r5, pc}
 80146be:	0799      	lsls	r1, r3, #30
 80146c0:	bf58      	it	pl
 80146c2:	6962      	ldrpl	r2, [r4, #20]
 80146c4:	60a2      	str	r2, [r4, #8]
 80146c6:	e7f4      	b.n	80146b2 <__swsetup_r+0x8e>
 80146c8:	2000      	movs	r0, #0
 80146ca:	e7f7      	b.n	80146bc <__swsetup_r+0x98>
 80146cc:	240001f8 	.word	0x240001f8

080146d0 <_sbrk_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4d06      	ldr	r5, [pc, #24]	@ (80146ec <_sbrk_r+0x1c>)
 80146d4:	2300      	movs	r3, #0
 80146d6:	4604      	mov	r4, r0
 80146d8:	4608      	mov	r0, r1
 80146da:	602b      	str	r3, [r5, #0]
 80146dc:	f7f0 feae 	bl	800543c <_sbrk>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d102      	bne.n	80146ea <_sbrk_r+0x1a>
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	b103      	cbz	r3, 80146ea <_sbrk_r+0x1a>
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	24006208 	.word	0x24006208

080146f0 <__assert_func>:
 80146f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146f2:	4614      	mov	r4, r2
 80146f4:	461a      	mov	r2, r3
 80146f6:	4b09      	ldr	r3, [pc, #36]	@ (801471c <__assert_func+0x2c>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4605      	mov	r5, r0
 80146fc:	68d8      	ldr	r0, [r3, #12]
 80146fe:	b14c      	cbz	r4, 8014714 <__assert_func+0x24>
 8014700:	4b07      	ldr	r3, [pc, #28]	@ (8014720 <__assert_func+0x30>)
 8014702:	9100      	str	r1, [sp, #0]
 8014704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014708:	4906      	ldr	r1, [pc, #24]	@ (8014724 <__assert_func+0x34>)
 801470a:	462b      	mov	r3, r5
 801470c:	f000 f822 	bl	8014754 <fiprintf>
 8014710:	f000 f8b6 	bl	8014880 <abort>
 8014714:	4b04      	ldr	r3, [pc, #16]	@ (8014728 <__assert_func+0x38>)
 8014716:	461c      	mov	r4, r3
 8014718:	e7f3      	b.n	8014702 <__assert_func+0x12>
 801471a:	bf00      	nop
 801471c:	240001f8 	.word	0x240001f8
 8014720:	08015235 	.word	0x08015235
 8014724:	08015242 	.word	0x08015242
 8014728:	08015270 	.word	0x08015270

0801472c <_calloc_r>:
 801472c:	b570      	push	{r4, r5, r6, lr}
 801472e:	fba1 5402 	umull	r5, r4, r1, r2
 8014732:	b934      	cbnz	r4, 8014742 <_calloc_r+0x16>
 8014734:	4629      	mov	r1, r5
 8014736:	f7fe fff7 	bl	8013728 <_malloc_r>
 801473a:	4606      	mov	r6, r0
 801473c:	b928      	cbnz	r0, 801474a <_calloc_r+0x1e>
 801473e:	4630      	mov	r0, r6
 8014740:	bd70      	pop	{r4, r5, r6, pc}
 8014742:	220c      	movs	r2, #12
 8014744:	6002      	str	r2, [r0, #0]
 8014746:	2600      	movs	r6, #0
 8014748:	e7f9      	b.n	801473e <_calloc_r+0x12>
 801474a:	462a      	mov	r2, r5
 801474c:	4621      	mov	r1, r4
 801474e:	f7fd fcfa 	bl	8012146 <memset>
 8014752:	e7f4      	b.n	801473e <_calloc_r+0x12>

08014754 <fiprintf>:
 8014754:	b40e      	push	{r1, r2, r3}
 8014756:	b503      	push	{r0, r1, lr}
 8014758:	4601      	mov	r1, r0
 801475a:	ab03      	add	r3, sp, #12
 801475c:	4805      	ldr	r0, [pc, #20]	@ (8014774 <fiprintf+0x20>)
 801475e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014762:	6800      	ldr	r0, [r0, #0]
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	f7ff fd5b 	bl	8014220 <_vfiprintf_r>
 801476a:	b002      	add	sp, #8
 801476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014770:	b003      	add	sp, #12
 8014772:	4770      	bx	lr
 8014774:	240001f8 	.word	0x240001f8

08014778 <__swhatbuf_r>:
 8014778:	b570      	push	{r4, r5, r6, lr}
 801477a:	460c      	mov	r4, r1
 801477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014780:	2900      	cmp	r1, #0
 8014782:	b096      	sub	sp, #88	@ 0x58
 8014784:	4615      	mov	r5, r2
 8014786:	461e      	mov	r6, r3
 8014788:	da0d      	bge.n	80147a6 <__swhatbuf_r+0x2e>
 801478a:	89a3      	ldrh	r3, [r4, #12]
 801478c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014790:	f04f 0100 	mov.w	r1, #0
 8014794:	bf14      	ite	ne
 8014796:	2340      	movne	r3, #64	@ 0x40
 8014798:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801479c:	2000      	movs	r0, #0
 801479e:	6031      	str	r1, [r6, #0]
 80147a0:	602b      	str	r3, [r5, #0]
 80147a2:	b016      	add	sp, #88	@ 0x58
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	466a      	mov	r2, sp
 80147a8:	f000 f848 	bl	801483c <_fstat_r>
 80147ac:	2800      	cmp	r0, #0
 80147ae:	dbec      	blt.n	801478a <__swhatbuf_r+0x12>
 80147b0:	9901      	ldr	r1, [sp, #4]
 80147b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80147b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80147ba:	4259      	negs	r1, r3
 80147bc:	4159      	adcs	r1, r3
 80147be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147c2:	e7eb      	b.n	801479c <__swhatbuf_r+0x24>

080147c4 <__smakebuf_r>:
 80147c4:	898b      	ldrh	r3, [r1, #12]
 80147c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147c8:	079d      	lsls	r5, r3, #30
 80147ca:	4606      	mov	r6, r0
 80147cc:	460c      	mov	r4, r1
 80147ce:	d507      	bpl.n	80147e0 <__smakebuf_r+0x1c>
 80147d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	6123      	str	r3, [r4, #16]
 80147d8:	2301      	movs	r3, #1
 80147da:	6163      	str	r3, [r4, #20]
 80147dc:	b003      	add	sp, #12
 80147de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147e0:	ab01      	add	r3, sp, #4
 80147e2:	466a      	mov	r2, sp
 80147e4:	f7ff ffc8 	bl	8014778 <__swhatbuf_r>
 80147e8:	9f00      	ldr	r7, [sp, #0]
 80147ea:	4605      	mov	r5, r0
 80147ec:	4639      	mov	r1, r7
 80147ee:	4630      	mov	r0, r6
 80147f0:	f7fe ff9a 	bl	8013728 <_malloc_r>
 80147f4:	b948      	cbnz	r0, 801480a <__smakebuf_r+0x46>
 80147f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147fa:	059a      	lsls	r2, r3, #22
 80147fc:	d4ee      	bmi.n	80147dc <__smakebuf_r+0x18>
 80147fe:	f023 0303 	bic.w	r3, r3, #3
 8014802:	f043 0302 	orr.w	r3, r3, #2
 8014806:	81a3      	strh	r3, [r4, #12]
 8014808:	e7e2      	b.n	80147d0 <__smakebuf_r+0xc>
 801480a:	89a3      	ldrh	r3, [r4, #12]
 801480c:	6020      	str	r0, [r4, #0]
 801480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014812:	81a3      	strh	r3, [r4, #12]
 8014814:	9b01      	ldr	r3, [sp, #4]
 8014816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801481a:	b15b      	cbz	r3, 8014834 <__smakebuf_r+0x70>
 801481c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014820:	4630      	mov	r0, r6
 8014822:	f000 f81d 	bl	8014860 <_isatty_r>
 8014826:	b128      	cbz	r0, 8014834 <__smakebuf_r+0x70>
 8014828:	89a3      	ldrh	r3, [r4, #12]
 801482a:	f023 0303 	bic.w	r3, r3, #3
 801482e:	f043 0301 	orr.w	r3, r3, #1
 8014832:	81a3      	strh	r3, [r4, #12]
 8014834:	89a3      	ldrh	r3, [r4, #12]
 8014836:	431d      	orrs	r5, r3
 8014838:	81a5      	strh	r5, [r4, #12]
 801483a:	e7cf      	b.n	80147dc <__smakebuf_r+0x18>

0801483c <_fstat_r>:
 801483c:	b538      	push	{r3, r4, r5, lr}
 801483e:	4d07      	ldr	r5, [pc, #28]	@ (801485c <_fstat_r+0x20>)
 8014840:	2300      	movs	r3, #0
 8014842:	4604      	mov	r4, r0
 8014844:	4608      	mov	r0, r1
 8014846:	4611      	mov	r1, r2
 8014848:	602b      	str	r3, [r5, #0]
 801484a:	f7f0 fdcf 	bl	80053ec <_fstat>
 801484e:	1c43      	adds	r3, r0, #1
 8014850:	d102      	bne.n	8014858 <_fstat_r+0x1c>
 8014852:	682b      	ldr	r3, [r5, #0]
 8014854:	b103      	cbz	r3, 8014858 <_fstat_r+0x1c>
 8014856:	6023      	str	r3, [r4, #0]
 8014858:	bd38      	pop	{r3, r4, r5, pc}
 801485a:	bf00      	nop
 801485c:	24006208 	.word	0x24006208

08014860 <_isatty_r>:
 8014860:	b538      	push	{r3, r4, r5, lr}
 8014862:	4d06      	ldr	r5, [pc, #24]	@ (801487c <_isatty_r+0x1c>)
 8014864:	2300      	movs	r3, #0
 8014866:	4604      	mov	r4, r0
 8014868:	4608      	mov	r0, r1
 801486a:	602b      	str	r3, [r5, #0]
 801486c:	f7f0 fdce 	bl	800540c <_isatty>
 8014870:	1c43      	adds	r3, r0, #1
 8014872:	d102      	bne.n	801487a <_isatty_r+0x1a>
 8014874:	682b      	ldr	r3, [r5, #0]
 8014876:	b103      	cbz	r3, 801487a <_isatty_r+0x1a>
 8014878:	6023      	str	r3, [r4, #0]
 801487a:	bd38      	pop	{r3, r4, r5, pc}
 801487c:	24006208 	.word	0x24006208

08014880 <abort>:
 8014880:	b508      	push	{r3, lr}
 8014882:	2006      	movs	r0, #6
 8014884:	f000 f82c 	bl	80148e0 <raise>
 8014888:	2001      	movs	r0, #1
 801488a:	f7f0 fd7b 	bl	8005384 <_exit>

0801488e <_raise_r>:
 801488e:	291f      	cmp	r1, #31
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	4605      	mov	r5, r0
 8014894:	460c      	mov	r4, r1
 8014896:	d904      	bls.n	80148a2 <_raise_r+0x14>
 8014898:	2316      	movs	r3, #22
 801489a:	6003      	str	r3, [r0, #0]
 801489c:	f04f 30ff 	mov.w	r0, #4294967295
 80148a0:	bd38      	pop	{r3, r4, r5, pc}
 80148a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80148a4:	b112      	cbz	r2, 80148ac <_raise_r+0x1e>
 80148a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80148aa:	b94b      	cbnz	r3, 80148c0 <_raise_r+0x32>
 80148ac:	4628      	mov	r0, r5
 80148ae:	f000 f831 	bl	8014914 <_getpid_r>
 80148b2:	4622      	mov	r2, r4
 80148b4:	4601      	mov	r1, r0
 80148b6:	4628      	mov	r0, r5
 80148b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148bc:	f000 b818 	b.w	80148f0 <_kill_r>
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d00a      	beq.n	80148da <_raise_r+0x4c>
 80148c4:	1c59      	adds	r1, r3, #1
 80148c6:	d103      	bne.n	80148d0 <_raise_r+0x42>
 80148c8:	2316      	movs	r3, #22
 80148ca:	6003      	str	r3, [r0, #0]
 80148cc:	2001      	movs	r0, #1
 80148ce:	e7e7      	b.n	80148a0 <_raise_r+0x12>
 80148d0:	2100      	movs	r1, #0
 80148d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148d6:	4620      	mov	r0, r4
 80148d8:	4798      	blx	r3
 80148da:	2000      	movs	r0, #0
 80148dc:	e7e0      	b.n	80148a0 <_raise_r+0x12>
	...

080148e0 <raise>:
 80148e0:	4b02      	ldr	r3, [pc, #8]	@ (80148ec <raise+0xc>)
 80148e2:	4601      	mov	r1, r0
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	f7ff bfd2 	b.w	801488e <_raise_r>
 80148ea:	bf00      	nop
 80148ec:	240001f8 	.word	0x240001f8

080148f0 <_kill_r>:
 80148f0:	b538      	push	{r3, r4, r5, lr}
 80148f2:	4d07      	ldr	r5, [pc, #28]	@ (8014910 <_kill_r+0x20>)
 80148f4:	2300      	movs	r3, #0
 80148f6:	4604      	mov	r4, r0
 80148f8:	4608      	mov	r0, r1
 80148fa:	4611      	mov	r1, r2
 80148fc:	602b      	str	r3, [r5, #0]
 80148fe:	f7f0 fd31 	bl	8005364 <_kill>
 8014902:	1c43      	adds	r3, r0, #1
 8014904:	d102      	bne.n	801490c <_kill_r+0x1c>
 8014906:	682b      	ldr	r3, [r5, #0]
 8014908:	b103      	cbz	r3, 801490c <_kill_r+0x1c>
 801490a:	6023      	str	r3, [r4, #0]
 801490c:	bd38      	pop	{r3, r4, r5, pc}
 801490e:	bf00      	nop
 8014910:	24006208 	.word	0x24006208

08014914 <_getpid_r>:
 8014914:	f7f0 bd1e 	b.w	8005354 <_getpid>

08014918 <fmax>:
 8014918:	b508      	push	{r3, lr}
 801491a:	ed2d 8b04 	vpush	{d8-d9}
 801491e:	eeb0 8b40 	vmov.f64	d8, d0
 8014922:	eeb0 9b41 	vmov.f64	d9, d1
 8014926:	f000 f831 	bl	801498c <__fpclassifyd>
 801492a:	b930      	cbnz	r0, 801493a <fmax+0x22>
 801492c:	eeb0 8b49 	vmov.f64	d8, d9
 8014930:	eeb0 0b48 	vmov.f64	d0, d8
 8014934:	ecbd 8b04 	vpop	{d8-d9}
 8014938:	bd08      	pop	{r3, pc}
 801493a:	eeb0 0b49 	vmov.f64	d0, d9
 801493e:	f000 f825 	bl	801498c <__fpclassifyd>
 8014942:	2800      	cmp	r0, #0
 8014944:	d0f4      	beq.n	8014930 <fmax+0x18>
 8014946:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494e:	dded      	ble.n	801492c <fmax+0x14>
 8014950:	e7ee      	b.n	8014930 <fmax+0x18>

08014952 <fmin>:
 8014952:	b508      	push	{r3, lr}
 8014954:	ed2d 8b04 	vpush	{d8-d9}
 8014958:	eeb0 8b40 	vmov.f64	d8, d0
 801495c:	eeb0 9b41 	vmov.f64	d9, d1
 8014960:	f000 f814 	bl	801498c <__fpclassifyd>
 8014964:	b930      	cbnz	r0, 8014974 <fmin+0x22>
 8014966:	eeb0 8b49 	vmov.f64	d8, d9
 801496a:	eeb0 0b48 	vmov.f64	d0, d8
 801496e:	ecbd 8b04 	vpop	{d8-d9}
 8014972:	bd08      	pop	{r3, pc}
 8014974:	eeb0 0b49 	vmov.f64	d0, d9
 8014978:	f000 f808 	bl	801498c <__fpclassifyd>
 801497c:	2800      	cmp	r0, #0
 801497e:	d0f4      	beq.n	801496a <fmin+0x18>
 8014980:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014988:	d5ed      	bpl.n	8014966 <fmin+0x14>
 801498a:	e7ee      	b.n	801496a <fmin+0x18>

0801498c <__fpclassifyd>:
 801498c:	ec51 0b10 	vmov	r0, r1, d0
 8014990:	460b      	mov	r3, r1
 8014992:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8014996:	b510      	push	{r4, lr}
 8014998:	d104      	bne.n	80149a4 <__fpclassifyd+0x18>
 801499a:	2800      	cmp	r0, #0
 801499c:	bf0c      	ite	eq
 801499e:	2002      	moveq	r0, #2
 80149a0:	2003      	movne	r0, #3
 80149a2:	bd10      	pop	{r4, pc}
 80149a4:	4a09      	ldr	r2, [pc, #36]	@ (80149cc <__fpclassifyd+0x40>)
 80149a6:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 80149aa:	4294      	cmp	r4, r2
 80149ac:	d908      	bls.n	80149c0 <__fpclassifyd+0x34>
 80149ae:	4a08      	ldr	r2, [pc, #32]	@ (80149d0 <__fpclassifyd+0x44>)
 80149b0:	4213      	tst	r3, r2
 80149b2:	d007      	beq.n	80149c4 <__fpclassifyd+0x38>
 80149b4:	4291      	cmp	r1, r2
 80149b6:	d107      	bne.n	80149c8 <__fpclassifyd+0x3c>
 80149b8:	fab0 f080 	clz	r0, r0
 80149bc:	0940      	lsrs	r0, r0, #5
 80149be:	e7f0      	b.n	80149a2 <__fpclassifyd+0x16>
 80149c0:	2004      	movs	r0, #4
 80149c2:	e7ee      	b.n	80149a2 <__fpclassifyd+0x16>
 80149c4:	2003      	movs	r0, #3
 80149c6:	e7ec      	b.n	80149a2 <__fpclassifyd+0x16>
 80149c8:	2000      	movs	r0, #0
 80149ca:	e7ea      	b.n	80149a2 <__fpclassifyd+0x16>
 80149cc:	7fdfffff 	.word	0x7fdfffff
 80149d0:	7ff00000 	.word	0x7ff00000

080149d4 <fmaxf>:
 80149d4:	b508      	push	{r3, lr}
 80149d6:	ed2d 8b02 	vpush	{d8}
 80149da:	eeb0 8a40 	vmov.f32	s16, s0
 80149de:	eef0 8a60 	vmov.f32	s17, s1
 80149e2:	f000 f815 	bl	8014a10 <__fpclassifyf>
 80149e6:	b930      	cbnz	r0, 80149f6 <fmaxf+0x22>
 80149e8:	eeb0 8a68 	vmov.f32	s16, s17
 80149ec:	eeb0 0a48 	vmov.f32	s0, s16
 80149f0:	ecbd 8b02 	vpop	{d8}
 80149f4:	bd08      	pop	{r3, pc}
 80149f6:	eeb0 0a68 	vmov.f32	s0, s17
 80149fa:	f000 f809 	bl	8014a10 <__fpclassifyf>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d0f4      	beq.n	80149ec <fmaxf+0x18>
 8014a02:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0a:	dded      	ble.n	80149e8 <fmaxf+0x14>
 8014a0c:	e7ee      	b.n	80149ec <fmaxf+0x18>
	...

08014a10 <__fpclassifyf>:
 8014a10:	ee10 3a10 	vmov	r3, s0
 8014a14:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014a18:	d00d      	beq.n	8014a36 <__fpclassifyf+0x26>
 8014a1a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014a1e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014a22:	d30a      	bcc.n	8014a3a <__fpclassifyf+0x2a>
 8014a24:	4b07      	ldr	r3, [pc, #28]	@ (8014a44 <__fpclassifyf+0x34>)
 8014a26:	1e42      	subs	r2, r0, #1
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d908      	bls.n	8014a3e <__fpclassifyf+0x2e>
 8014a2c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014a30:	4258      	negs	r0, r3
 8014a32:	4158      	adcs	r0, r3
 8014a34:	4770      	bx	lr
 8014a36:	2002      	movs	r0, #2
 8014a38:	4770      	bx	lr
 8014a3a:	2004      	movs	r0, #4
 8014a3c:	4770      	bx	lr
 8014a3e:	2003      	movs	r0, #3
 8014a40:	4770      	bx	lr
 8014a42:	bf00      	nop
 8014a44:	007ffffe 	.word	0x007ffffe

08014a48 <sinf_poly>:
 8014a48:	07cb      	lsls	r3, r1, #31
 8014a4a:	d412      	bmi.n	8014a72 <sinf_poly+0x2a>
 8014a4c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014a50:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014a54:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014a58:	eea6 7b01 	vfma.f64	d7, d6, d1
 8014a5c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014a60:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014a64:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014a68:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014a6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014a70:	4770      	bx	lr
 8014a72:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014a76:	ee21 5b01 	vmul.f64	d5, d1, d1
 8014a7a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8014a7e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014a82:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014a86:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014a8a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014a8e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014a92:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014a96:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014a9a:	e7e5      	b.n	8014a68 <sinf_poly+0x20>
 8014a9c:	0000      	movs	r0, r0
	...

08014aa0 <sinf>:
 8014aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aa2:	ee10 4a10 	vmov	r4, s0
 8014aa6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014aaa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014aae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014ab2:	eef0 7a40 	vmov.f32	s15, s0
 8014ab6:	d218      	bcs.n	8014aea <sinf+0x4a>
 8014ab8:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014abc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014ac0:	d20a      	bcs.n	8014ad8 <sinf+0x38>
 8014ac2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8014ac6:	d103      	bne.n	8014ad0 <sinf+0x30>
 8014ac8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8014acc:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8014ad4:	b003      	add	sp, #12
 8014ad6:	bd30      	pop	{r4, r5, pc}
 8014ad8:	483b      	ldr	r0, [pc, #236]	@ (8014bc8 <sinf+0x128>)
 8014ada:	eeb0 0b46 	vmov.f64	d0, d6
 8014ade:	2100      	movs	r1, #0
 8014ae0:	b003      	add	sp, #12
 8014ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ae6:	f7ff bfaf 	b.w	8014a48 <sinf_poly>
 8014aea:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014aee:	4293      	cmp	r3, r2
 8014af0:	d824      	bhi.n	8014b3c <sinf+0x9c>
 8014af2:	4b35      	ldr	r3, [pc, #212]	@ (8014bc8 <sinf+0x128>)
 8014af4:	ed93 7b08 	vldr	d7, [r3, #32]
 8014af8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014afc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b00:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014b04:	ee17 1a90 	vmov	r1, s15
 8014b08:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8014b0c:	1609      	asrs	r1, r1, #24
 8014b0e:	ee07 1a90 	vmov	s15, r1
 8014b12:	f001 0203 	and.w	r2, r1, #3
 8014b16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014b1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014b1e:	ed92 0b00 	vldr	d0, [r2]
 8014b22:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8014b26:	f011 0f02 	tst.w	r1, #2
 8014b2a:	eea5 6b47 	vfms.f64	d6, d5, d7
 8014b2e:	bf08      	it	eq
 8014b30:	4618      	moveq	r0, r3
 8014b32:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014b36:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014b3a:	e7d1      	b.n	8014ae0 <sinf+0x40>
 8014b3c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014b40:	d237      	bcs.n	8014bb2 <sinf+0x112>
 8014b42:	4922      	ldr	r1, [pc, #136]	@ (8014bcc <sinf+0x12c>)
 8014b44:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014b48:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014b4c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014b50:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014b54:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014b58:	6a10      	ldr	r0, [r2, #32]
 8014b5a:	6912      	ldr	r2, [r2, #16]
 8014b5c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014b60:	40ab      	lsls	r3, r5
 8014b62:	fba0 5003 	umull	r5, r0, r0, r3
 8014b66:	4359      	muls	r1, r3
 8014b68:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014b6c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014b70:	0f9d      	lsrs	r5, r3, #30
 8014b72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014b76:	1ac9      	subs	r1, r1, r3
 8014b78:	f7eb fd98 	bl	80006ac <__aeabi_l2d>
 8014b7c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014b80:	4b11      	ldr	r3, [pc, #68]	@ (8014bc8 <sinf+0x128>)
 8014b82:	f004 0203 	and.w	r2, r4, #3
 8014b86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014b8a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8014bc0 <sinf+0x120>
 8014b8e:	ed92 0b00 	vldr	d0, [r2]
 8014b92:	ec41 0b17 	vmov	d7, r0, r1
 8014b96:	f014 0f02 	tst.w	r4, #2
 8014b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b9e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014ba2:	4629      	mov	r1, r5
 8014ba4:	bf08      	it	eq
 8014ba6:	4618      	moveq	r0, r3
 8014ba8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014bac:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014bb0:	e796      	b.n	8014ae0 <sinf+0x40>
 8014bb2:	b003      	add	sp, #12
 8014bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bb8:	f000 b8e4 	b.w	8014d84 <__math_invalidf>
 8014bbc:	f3af 8000 	nop.w
 8014bc0:	54442d18 	.word	0x54442d18
 8014bc4:	3c1921fb 	.word	0x3c1921fb
 8014bc8:	08015530 	.word	0x08015530
 8014bcc:	080154cc 	.word	0x080154cc

08014bd0 <sinf_poly>:
 8014bd0:	07cb      	lsls	r3, r1, #31
 8014bd2:	d412      	bmi.n	8014bfa <sinf_poly+0x2a>
 8014bd4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014bd8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014bdc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014be0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8014be4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014be8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014bec:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014bf0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014bf4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014bf8:	4770      	bx	lr
 8014bfa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014bfe:	ee21 5b01 	vmul.f64	d5, d1, d1
 8014c02:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8014c06:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014c0a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014c0e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014c12:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014c16:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014c1a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014c1e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014c22:	e7e5      	b.n	8014bf0 <sinf_poly+0x20>
 8014c24:	0000      	movs	r0, r0
	...

08014c28 <cosf>:
 8014c28:	b538      	push	{r3, r4, r5, lr}
 8014c2a:	ee10 4a10 	vmov	r4, s0
 8014c2e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014c32:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014c36:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8014c3a:	d21f      	bcs.n	8014c7c <cosf+0x54>
 8014c3c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014c40:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014c44:	f0c0 8082 	bcc.w	8014d4c <cosf+0x124>
 8014c48:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014c4c:	4b44      	ldr	r3, [pc, #272]	@ (8014d60 <cosf+0x138>)
 8014c4e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8014c52:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014c56:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8014c5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014c5e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014c62:	eea7 0b05 	vfma.f64	d0, d7, d5
 8014c66:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8014c6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014c6e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014c72:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014c76:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014c7a:	bd38      	pop	{r3, r4, r5, pc}
 8014c7c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d829      	bhi.n	8014cd8 <cosf+0xb0>
 8014c84:	4b36      	ldr	r3, [pc, #216]	@ (8014d60 <cosf+0x138>)
 8014c86:	ed93 6b08 	vldr	d6, [r3, #32]
 8014c8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014c8e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8014c92:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014c96:	ee16 1a90 	vmov	r1, s13
 8014c9a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8014c9e:	1609      	asrs	r1, r1, #24
 8014ca0:	ee06 1a90 	vmov	s13, r1
 8014ca4:	f001 0203 	and.w	r2, r1, #3
 8014ca8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014cac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014cb0:	ed92 0b00 	vldr	d0, [r2]
 8014cb4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8014cb8:	f011 0f02 	tst.w	r1, #2
 8014cbc:	f081 0101 	eor.w	r1, r1, #1
 8014cc0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8014cc4:	bf08      	it	eq
 8014cc6:	4618      	moveq	r0, r3
 8014cc8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014cd4:	f7ff bf7c 	b.w	8014bd0 <sinf_poly>
 8014cd8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014cdc:	d232      	bcs.n	8014d44 <cosf+0x11c>
 8014cde:	4921      	ldr	r1, [pc, #132]	@ (8014d64 <cosf+0x13c>)
 8014ce0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014ce4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014ce8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014cec:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014cf0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014cf4:	6a10      	ldr	r0, [r2, #32]
 8014cf6:	6912      	ldr	r2, [r2, #16]
 8014cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014cfc:	40ab      	lsls	r3, r5
 8014cfe:	fba0 5003 	umull	r5, r0, r0, r3
 8014d02:	4359      	muls	r1, r3
 8014d04:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014d08:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014d0c:	0f9d      	lsrs	r5, r3, #30
 8014d0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014d12:	1ac9      	subs	r1, r1, r3
 8014d14:	f7eb fcca 	bl	80006ac <__aeabi_l2d>
 8014d18:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014d1c:	4b10      	ldr	r3, [pc, #64]	@ (8014d60 <cosf+0x138>)
 8014d1e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8014d58 <cosf+0x130>
 8014d22:	ec41 0b17 	vmov	d7, r0, r1
 8014d26:	f004 0203 	and.w	r2, r4, #3
 8014d2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014d2e:	ed92 0b00 	vldr	d0, [r2]
 8014d32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014d36:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014d3a:	f014 0f02 	tst.w	r4, #2
 8014d3e:	f085 0101 	eor.w	r1, r5, #1
 8014d42:	e7bf      	b.n	8014cc4 <cosf+0x9c>
 8014d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d48:	f000 b81c 	b.w	8014d84 <__math_invalidf>
 8014d4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014d50:	e793      	b.n	8014c7a <cosf+0x52>
 8014d52:	bf00      	nop
 8014d54:	f3af 8000 	nop.w
 8014d58:	54442d18 	.word	0x54442d18
 8014d5c:	3c1921fb 	.word	0x3c1921fb
 8014d60:	08015530 	.word	0x08015530
 8014d64:	080154cc 	.word	0x080154cc

08014d68 <with_errnof>:
 8014d68:	b510      	push	{r4, lr}
 8014d6a:	ed2d 8b02 	vpush	{d8}
 8014d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8014d72:	4604      	mov	r4, r0
 8014d74:	f7fd faf8 	bl	8012368 <__errno>
 8014d78:	eeb0 0a48 	vmov.f32	s0, s16
 8014d7c:	ecbd 8b02 	vpop	{d8}
 8014d80:	6004      	str	r4, [r0, #0]
 8014d82:	bd10      	pop	{r4, pc}

08014d84 <__math_invalidf>:
 8014d84:	eef0 7a40 	vmov.f32	s15, s0
 8014d88:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014d8c:	eef4 7a67 	vcmp.f32	s15, s15
 8014d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d94:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014d98:	d602      	bvs.n	8014da0 <__math_invalidf+0x1c>
 8014d9a:	2021      	movs	r0, #33	@ 0x21
 8014d9c:	f7ff bfe4 	b.w	8014d68 <with_errnof>
 8014da0:	4770      	bx	lr
	...

08014da4 <_init>:
 8014da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014da6:	bf00      	nop
 8014da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014daa:	bc08      	pop	{r3}
 8014dac:	469e      	mov	lr, r3
 8014dae:	4770      	bx	lr

08014db0 <_fini>:
 8014db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db2:	bf00      	nop
 8014db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014db6:	bc08      	pop	{r3}
 8014db8:	469e      	mov	lr, r3
 8014dba:	4770      	bx	lr
