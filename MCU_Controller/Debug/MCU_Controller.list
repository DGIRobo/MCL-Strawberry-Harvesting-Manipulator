
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  080111f8  080111f8  000121f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011990  08011990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011998  08011998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801199c  0801199c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  080119a0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000053c4  24000248  08011be8  00013248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400560c  08011be8  0001360c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b92b  00000000  00000000  00013276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dc2  00000000  00000000  0003eba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e28  00000000  00000000  00043968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  00045790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000060b6  00000000  00000000  00046eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024437  00000000  00000000  0004cf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e859  00000000  00000000  000713a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001efbfd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000928c  00000000  00000000  001efcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001f8f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  001f8fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  001fa063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080111dc 	.word	0x080111dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	080111dc 	.word	0x080111dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b988 	b.w	8000c4c <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	468e      	mov	lr, r1
 800095c:	4604      	mov	r4, r0
 800095e:	4688      	mov	r8, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d14a      	bne.n	80009fa <__udivmoddi4+0xa6>
 8000964:	428a      	cmp	r2, r1
 8000966:	4617      	mov	r7, r2
 8000968:	d962      	bls.n	8000a30 <__udivmoddi4+0xdc>
 800096a:	fab2 f682 	clz	r6, r2
 800096e:	b14e      	cbz	r6, 8000984 <__udivmoddi4+0x30>
 8000970:	f1c6 0320 	rsb	r3, r6, #32
 8000974:	fa01 f806 	lsl.w	r8, r1, r6
 8000978:	fa20 f303 	lsr.w	r3, r0, r3
 800097c:	40b7      	lsls	r7, r6
 800097e:	ea43 0808 	orr.w	r8, r3, r8
 8000982:	40b4      	lsls	r4, r6
 8000984:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000990:	0c23      	lsrs	r3, r4, #16
 8000992:	fb0e 8811 	mls	r8, lr, r1, r8
 8000996:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800099a:	fb01 f20c 	mul.w	r2, r1, ip
 800099e:	429a      	cmp	r2, r3
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0x62>
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80009a8:	f080 80ea 	bcs.w	8000b80 <__udivmoddi4+0x22c>
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f240 80e7 	bls.w	8000b80 <__udivmoddi4+0x22c>
 80009b2:	3902      	subs	r1, #2
 80009b4:	443b      	add	r3, r7
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	b2a3      	uxth	r3, r4
 80009ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80009be:	fb0e 2210 	mls	r2, lr, r0, r2
 80009c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80009ca:	459c      	cmp	ip, r3
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x8e>
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009d4:	f080 80d6 	bcs.w	8000b84 <__udivmoddi4+0x230>
 80009d8:	459c      	cmp	ip, r3
 80009da:	f240 80d3 	bls.w	8000b84 <__udivmoddi4+0x230>
 80009de:	443b      	add	r3, r7
 80009e0:	3802      	subs	r0, #2
 80009e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e6:	eba3 030c 	sub.w	r3, r3, ip
 80009ea:	2100      	movs	r1, #0
 80009ec:	b11d      	cbz	r5, 80009f6 <__udivmoddi4+0xa2>
 80009ee:	40f3      	lsrs	r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	e9c5 3200 	strd	r3, r2, [r5]
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d905      	bls.n	8000a0a <__udivmoddi4+0xb6>
 80009fe:	b10d      	cbz	r5, 8000a04 <__udivmoddi4+0xb0>
 8000a00:	e9c5 0100 	strd	r0, r1, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4608      	mov	r0, r1
 8000a08:	e7f5      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a0a:	fab3 f183 	clz	r1, r3
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d146      	bne.n	8000aa0 <__udivmoddi4+0x14c>
 8000a12:	4573      	cmp	r3, lr
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xc8>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 8105 	bhi.w	8000c26 <__udivmoddi4+0x2d2>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	4690      	mov	r8, r2
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e5      	beq.n	80009f6 <__udivmoddi4+0xa2>
 8000a2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a2e:	e7e2      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	f000 8090 	beq.w	8000b56 <__udivmoddi4+0x202>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f040 80a4 	bne.w	8000b88 <__udivmoddi4+0x234>
 8000a40:	1a8a      	subs	r2, r1, r2
 8000a42:	0c03      	lsrs	r3, r0, #16
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	b280      	uxth	r0, r0
 8000a4a:	b2bc      	uxth	r4, r7
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d907      	bls.n	8000a72 <__udivmoddi4+0x11e>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x11c>
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	f200 80e0 	bhi.w	8000c30 <__udivmoddi4+0x2dc>
 8000a70:	46c4      	mov	ip, r8
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a80:	fb02 f404 	mul.w	r4, r2, r4
 8000a84:	429c      	cmp	r4, r3
 8000a86:	d907      	bls.n	8000a98 <__udivmoddi4+0x144>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x142>
 8000a90:	429c      	cmp	r4, r3
 8000a92:	f200 80ca 	bhi.w	8000c2a <__udivmoddi4+0x2d6>
 8000a96:	4602      	mov	r2, r0
 8000a98:	1b1b      	subs	r3, r3, r4
 8000a9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a9e:	e7a5      	b.n	80009ec <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aaa:	431f      	orrs	r7, r3
 8000aac:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ab4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ab8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000abc:	4323      	orrs	r3, r4
 8000abe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ac2:	fa1f fc87 	uxth.w	ip, r7
 8000ac6:	fbbe f0f9 	udiv	r0, lr, r9
 8000aca:	0c1c      	lsrs	r4, r3, #16
 8000acc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ad4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ad8:	45a6      	cmp	lr, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x1a0>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	f080 809c 	bcs.w	8000c22 <__udivmoddi4+0x2ce>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f240 8099 	bls.w	8000c22 <__udivmoddi4+0x2ce>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	eba4 040e 	sub.w	r4, r4, lr
 8000af8:	fa1f fe83 	uxth.w	lr, r3
 8000afc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b00:	fb09 4413 	mls	r4, r9, r3, r4
 8000b04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0c:	45a4      	cmp	ip, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x1ce>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b16:	f080 8082 	bcs.w	8000c1e <__udivmoddi4+0x2ca>
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d97f      	bls.n	8000c1e <__udivmoddi4+0x2ca>
 8000b1e:	3b02      	subs	r3, #2
 8000b20:	443c      	add	r4, r7
 8000b22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b2e:	4564      	cmp	r4, ip
 8000b30:	4673      	mov	r3, lr
 8000b32:	46e1      	mov	r9, ip
 8000b34:	d362      	bcc.n	8000bfc <__udivmoddi4+0x2a8>
 8000b36:	d05f      	beq.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b38:	b15d      	cbz	r5, 8000b52 <__udivmoddi4+0x1fe>
 8000b3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b42:	fa04 f606 	lsl.w	r6, r4, r6
 8000b46:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b52:	2100      	movs	r1, #0
 8000b54:	e74f      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000b56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b5a:	0c01      	lsrs	r1, r0, #16
 8000b5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b60:	b280      	uxth	r0, r0
 8000b62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b66:	463b      	mov	r3, r7
 8000b68:	4638      	mov	r0, r7
 8000b6a:	463c      	mov	r4, r7
 8000b6c:	46b8      	mov	r8, r7
 8000b6e:	46be      	mov	lr, r7
 8000b70:	2620      	movs	r6, #32
 8000b72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b76:	eba2 0208 	sub.w	r2, r2, r8
 8000b7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b7e:	e766      	b.n	8000a4e <__udivmoddi4+0xfa>
 8000b80:	4601      	mov	r1, r0
 8000b82:	e718      	b.n	80009b6 <__udivmoddi4+0x62>
 8000b84:	4610      	mov	r0, r2
 8000b86:	e72c      	b.n	80009e2 <__udivmoddi4+0x8e>
 8000b88:	f1c6 0220 	rsb	r2, r6, #32
 8000b8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	40b1      	lsls	r1, r6
 8000b94:	fa20 f202 	lsr.w	r2, r0, r2
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ba8:	0c11      	lsrs	r1, r2, #16
 8000baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bae:	fb08 f904 	mul.w	r9, r8, r4
 8000bb2:	40b0      	lsls	r0, r6
 8000bb4:	4589      	cmp	r9, r1
 8000bb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	d93e      	bls.n	8000c3c <__udivmoddi4+0x2e8>
 8000bbe:	1879      	adds	r1, r7, r1
 8000bc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bc4:	d201      	bcs.n	8000bca <__udivmoddi4+0x276>
 8000bc6:	4589      	cmp	r9, r1
 8000bc8:	d81f      	bhi.n	8000c0a <__udivmoddi4+0x2b6>
 8000bca:	eba1 0109 	sub.w	r1, r1, r9
 8000bce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd2:	fb09 f804 	mul.w	r8, r9, r4
 8000bd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be0:	4542      	cmp	r2, r8
 8000be2:	d229      	bcs.n	8000c38 <__udivmoddi4+0x2e4>
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bea:	d2c4      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bec:	4542      	cmp	r2, r8
 8000bee:	d2c2      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bf0:	f1a9 0102 	sub.w	r1, r9, #2
 8000bf4:	443a      	add	r2, r7
 8000bf6:	e7be      	b.n	8000b76 <__udivmoddi4+0x222>
 8000bf8:	45f0      	cmp	r8, lr
 8000bfa:	d29d      	bcs.n	8000b38 <__udivmoddi4+0x1e4>
 8000bfc:	ebbe 0302 	subs.w	r3, lr, r2
 8000c00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c04:	3801      	subs	r0, #1
 8000c06:	46e1      	mov	r9, ip
 8000c08:	e796      	b.n	8000b38 <__udivmoddi4+0x1e4>
 8000c0a:	eba7 0909 	sub.w	r9, r7, r9
 8000c0e:	4449      	add	r1, r9
 8000c10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c18:	fb09 f804 	mul.w	r8, r9, r4
 8000c1c:	e7db      	b.n	8000bd6 <__udivmoddi4+0x282>
 8000c1e:	4673      	mov	r3, lr
 8000c20:	e77f      	b.n	8000b22 <__udivmoddi4+0x1ce>
 8000c22:	4650      	mov	r0, sl
 8000c24:	e766      	b.n	8000af4 <__udivmoddi4+0x1a0>
 8000c26:	4608      	mov	r0, r1
 8000c28:	e6fd      	b.n	8000a26 <__udivmoddi4+0xd2>
 8000c2a:	443b      	add	r3, r7
 8000c2c:	3a02      	subs	r2, #2
 8000c2e:	e733      	b.n	8000a98 <__udivmoddi4+0x144>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	e71c      	b.n	8000a72 <__udivmoddi4+0x11e>
 8000c38:	4649      	mov	r1, r9
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x222>
 8000c3c:	eba1 0109 	sub.w	r1, r1, r9
 8000c40:	46c4      	mov	ip, r8
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	e7c4      	b.n	8000bd6 <__udivmoddi4+0x282>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
int _write(int file, char* p, int len){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	/*for(int i=0; i<len; i++){
		ITM_SendChar((*p++));
	}*/
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <_write+0x28>)
 8000c68:	f009 fa94 	bl	800a194 <HAL_UART_Transmit>
	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000328 	.word	0x24000328

08000c7c <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	2400040c 	.word	0x2400040c

08000cac <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8000cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cc0:	f7ff ffdc 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	ed2d 8b02 	vpush	{d8}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cdc:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ce0:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ce4:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 8000ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 8000cf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	d502      	bpl.n	8000d0e <float32_t_to_uint+0x42>
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	60f9      	str	r1, [r7, #12]
 8000d0c:	e00a      	b.n	8000d24 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8000d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	dd01      	ble.n	8000d24 <float32_t_to_uint+0x58>
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8000d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d2c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000d30:	f04f 0001 	mov.w	r0, #1
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	683c      	ldr	r4, [r7, #0]
 8000d3a:	f1a4 0620 	sub.w	r6, r4, #32
 8000d3e:	f1c4 0520 	rsb	r5, r4, #32
 8000d42:	fa01 f304 	lsl.w	r3, r1, r4
 8000d46:	fa00 f606 	lsl.w	r6, r0, r6
 8000d4a:	4333      	orrs	r3, r6
 8000d4c:	fa20 f505 	lsr.w	r5, r0, r5
 8000d50:	432b      	orrs	r3, r5
 8000d52:	fa00 f204 	lsl.w	r2, r0, r4
 8000d56:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000d5a:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000d5e:	4640      	mov	r0, r8
 8000d60:	4649      	mov	r1, r9
 8000d62:	f7ff fd99 	bl	8000898 <__aeabi_ul2f>
 8000d66:	ee06 0a90 	vmov	s13, r0
 8000d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7a:	ee17 3a90 	vmov	r3, s15
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	ecbd 8b02 	vpop	{d8}
 8000d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d8c <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d90:	ed2d 8b02 	vpush	{d8}
 8000d94:	b087      	sub	sp, #28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d9e:	edc7 0a01 	vstr	s1, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8000da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db0:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	ee07 1a90 	vmov	s15, r1
 8000dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000dca:	f04f 0001 	mov.w	r0, #1
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	683c      	ldr	r4, [r7, #0]
 8000dd4:	f1a4 0620 	sub.w	r6, r4, #32
 8000dd8:	f1c4 0520 	rsb	r5, r4, #32
 8000ddc:	fa01 f304 	lsl.w	r3, r1, r4
 8000de0:	fa00 f606 	lsl.w	r6, r0, r6
 8000de4:	4333      	orrs	r3, r6
 8000de6:	fa20 f505 	lsr.w	r5, r0, r5
 8000dea:	432b      	orrs	r3, r5
 8000dec:	fa00 f204 	lsl.w	r2, r0, r4
 8000df0:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000df4:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000df8:	4640      	mov	r0, r8
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fd4c 	bl	8000898 <__aeabi_ul2f>
 8000e00:	ee07 0a90 	vmov	s15, r0
 8000e04:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e20 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8000e2a:	23ff      	movs	r3, #255	@ 0xff
 8000e2c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000e32:	23ff      	movs	r3, #255	@ 0xff
 8000e34:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000e36:	23ff      	movs	r3, #255	@ 0xff
 8000e38:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000e3a:	23ff      	movs	r3, #255	@ 0xff
 8000e3c:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000e3e:	23ff      	movs	r3, #255	@ 0xff
 8000e40:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000e42:	23ff      	movs	r3, #255	@ 0xff
 8000e44:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 8000e46:	23fe      	movs	r3, #254	@ 0xfe
 8000e48:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e4e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	461a      	mov	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MIT_reset_origin+0x8c>)
 8000e8a:	f004 fe98 	bl	8005bbe <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <MIT_reset_origin+0x7e>
		sta = 1;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MIT_reset_origin+0x90>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000e9a:	f003 fd33 	bl	8004904 <Error_Handler>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000264 	.word	0x24000264
 8000eac:	24000288 	.word	0x24000288
 8000eb0:	24000a78 	.word	0x24000a78

08000eb4 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000ec2:	23ff      	movs	r3, #255	@ 0xff
 8000ec4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000ec6:	23ff      	movs	r3, #255	@ 0xff
 8000ec8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000eca:	23ff      	movs	r3, #255	@ 0xff
 8000ecc:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000ece:	23ff      	movs	r3, #255	@ 0xff
 8000ed0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000ed2:	23ff      	movs	r3, #255	@ 0xff
 8000ed4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8000eda:	23fc      	movs	r3, #252	@ 0xfc
 8000edc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MIT_enter_control_mode+0x8c>)
 8000f1e:	f004 fe4e 	bl	8005bbe <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <MIT_enter_control_mode+0x7e>
		sta = 1;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MIT_enter_control_mode+0x90>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000f2e:	f003 fce9 	bl	8004904 <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24000264 	.word	0x24000264
 8000f40:	24000288 	.word	0x24000288
 8000f44:	24000a78 	.word	0x24000a78

08000f48 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000f5e:	23ff      	movs	r3, #255	@ 0xff
 8000f60:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000f62:	23ff      	movs	r3, #255	@ 0xff
 8000f64:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000f66:	23ff      	movs	r3, #255	@ 0xff
 8000f68:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000f6a:	23ff      	movs	r3, #255	@ 0xff
 8000f6c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8000f6e:	23fd      	movs	r3, #253	@ 0xfd
 8000f70:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f76:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	461a      	mov	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <MIT_exit_control_mode+0x8c>)
 8000fb2:	f004 fe04 	bl	8005bbe <HAL_FDCAN_AddMessageToTxFifoQ>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <MIT_exit_control_mode+0x7e>
		sta = 1;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MIT_exit_control_mode+0x90>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000fc2:	f003 fc9f 	bl	8004904 <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000264 	.word	0x24000264
 8000fd4:	24000288 	.word	0x24000288
 8000fd8:	24000a78 	.word	0x24000a78

08000fdc <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3303      	adds	r3, #3
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3305      	adds	r3, #5
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	121b      	asrs	r3, r3, #8
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	f002 020f 	and.w	r2, r2, #15
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3307      	adds	r3, #7
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	ed87 0a00 	vstr	s0, [r7]
 800104c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MIT_Mode+0xd8>)
 8001050:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MIT_Mode+0xdc>)
 8001054:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	edd7 6a00 	vldr	s13, [r7]
 8001062:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001066:	eeb0 1b46 	vmov.f64	d1, d6
 800106a:	eeb0 0b47 	vmov.f64	d0, d7
 800106e:	f00f fe71 	bl	8010d54 <fmax>
 8001072:	eeb0 6b40 	vmov.f64	d6, d0
 8001076:	edd7 7a06 	vldr	s15, [r7, #24]
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	eeb0 1b47 	vmov.f64	d1, d7
 8001082:	eeb0 0b46 	vmov.f64	d0, d6
 8001086:	f00f fe82 	bl	8010d8e <fmin>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001096:	200c      	movs	r0, #12
 8001098:	ed97 1a06 	vldr	s2, [r7, #24]
 800109c:	edd7 0a07 	vldr	s1, [r7, #28]
 80010a0:	ed97 0a00 	vldr	s0, [r7]
 80010a4:	f7ff fe12 	bl	8000ccc <float32_t_to_uint>
 80010a8:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff91 	bl	8000fdc <MIT_TxData>

	TxHeader.Identifier = motor_id;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <MIT_Mode+0xe0>)
 80010be:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MIT_Mode+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MIT_Mode+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MIT_Mode+0xe0>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MIT_Mode+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MIT_Mode+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MIT_Mode+0xe0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MIT_Mode+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MIT_Mode+0xe0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	461a      	mov	r2, r3
 80010f6:	490a      	ldr	r1, [pc, #40]	@ (8001120 <MIT_Mode+0xe0>)
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <MIT_Mode+0xe4>)
 80010fa:	f004 fd60 	bl	8005bbe <HAL_FDCAN_AddMessageToTxFifoQ>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <MIT_Mode+0xce>
		sta = 1;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MIT_Mode+0xe8>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800110a:	f003 fbfb 	bl	8004904 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	c1c80000 	.word	0xc1c80000
 800111c:	41c80000 	.word	0x41c80000
 8001120:	24000264 	.word	0x24000264
 8001124:	24000288 	.word	0x24000288
 8001128:	24000a78 	.word	0x24000a78

0800112c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b092      	sub	sp, #72	@ 0x48
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d04b      	beq.n	80011d8 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001140:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	2140      	movs	r1, #64	@ 0x40
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f004 fd92 	bl	8005c74 <HAL_FDCAN_GetRxMessage>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
            Error_Handler();
 800115c:	f003 fbd2 	bl	8004904 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001160:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001164:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
 800116c:	e02b      	b.n	80011c6 <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 800116e:	4a1d      	ldr	r2, [pc, #116]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001172:	2198      	movs	r1, #152	@ 0x98
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	3308      	adds	r3, #8
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001182:	429a      	cmp	r2, r3
 8001184:	d11c      	bne.n	80011c0 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	2198      	movs	r1, #152	@ 0x98
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	3310      	adds	r3, #16
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800119e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80011a2:	2300      	movs	r3, #0
 80011a4:	f00a fd60 	bl	800bc68 <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00f      	beq.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	f3bf 8f6f 	isb	sy
                break;
 80011be:	e006      	b.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 80011c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c2:	3301      	adds	r3, #1
 80011c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80011c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	ddd0      	ble.n	800116e <HAL_FDCAN_RxFifo0Callback+0x42>
 80011cc:	e000      	b.n	80011d0 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 80011ce:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80011d4:	f005 fe1d 	bl	8006e12 <HAL_GPIO_TogglePin>
    }
}
 80011d8:	bf00      	nop
 80011da:	3748      	adds	r7, #72	@ 0x48
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	24000a78 	.word	0x24000a78
 80011e4:	2400040c 	.word	0x2400040c
 80011e8:	e000ed04 	.word	0xe000ed04
 80011ec:	58021000 	.word	0x58021000

080011f0 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80011fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8001202:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001206:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001280 <tustin_derivative+0x90>
 800120a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001228:	ed97 7a03 	vldr	s14, [r7, #12]
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001238:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001284 <tustin_derivative+0x94>
 800123c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001244:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001254:	edd7 7a05 	vldr	s15, [r7, #20]
 8001258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001284 <tustin_derivative+0x94>
 8001260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40490fd8 	.word	0x40490fd8
 8001284:	3b03126f 	.word	0x3b03126f

08001288 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 80012e6:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 80012f0:	61bb      	str	r3, [r7, #24]
	uint8_t buf[8];
	if (xQueueReceive(m->canRxQueue, buf, pdMS_TO_TICKS(1)) == pdPASS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fd51 	bl	800bda4 <xQueueReceive>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11f      	bne.n	8001348 <motor_encoder_read+0xc0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((buf[1]<<8)|buf[2]);
 8001308:	7a7b      	ldrb	r3, [r7, #9]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7aba      	ldrb	r2, [r7, #10]
 800130e:	4313      	orrs	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001312:	2110      	movs	r1, #16
 8001314:	edd7 0a06 	vldr	s1, [r7, #24]
 8001318:	ed97 0a07 	vldr	s0, [r7, #28]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff fd35 	bl	8000d8c <uint_to_float32_t>
 8001322:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001326:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80013c8 <motor_encoder_read+0x140>
 800132a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a03 	vldr	s15, [r3, #12]
 8001334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001338:	edd7 7a04 	vldr	s15, [r7, #16]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001346:	e004      	b.n	8001352 <motor_encoder_read+0xca>
	}
	else
	{
		sta = 2;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <motor_encoder_read+0x144>)
 800134a:	2202      	movs	r2, #2
 800134c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800134e:	f003 fad9 	bl	8004904 <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	ed93 6a06 	vldr	s12, [r3, #24]
 800136a:	eef0 1a46 	vmov.f32	s3, s12
 800136e:	eeb0 1a66 	vmov.f32	s2, s13
 8001372:	eef0 0a47 	vmov.f32	s1, s14
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f7ff ff39 	bl	80011f0 <tustin_derivative>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 6a06 	vldr	s12, [r3, #24]
 80013a0:	eef0 1a46 	vmov.f32	s3, s12
 80013a4:	eeb0 1a66 	vmov.f32	s2, s13
 80013a8:	eef0 0a47 	vmov.f32	s1, s14
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f7ff ff1e 	bl	80011f0 <tustin_derivative>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40490fd8 	.word	0x40490fd8
 80013cc:	24000a78 	.word	0x24000a78

080013d0 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e2:	ed97 7a00 	vldr	s14, [r7]
 80013e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 7a05 	vldr	s14, [r3, #20]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd1a      	ble.n	8001450 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a04 	vldr	s15, [r3, #16]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800145c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	d400      	bmi.n	8001468 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001466:	e01a      	b.n	800149e <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a05 	vldr	s15, [r3, #20]
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a04 	vldr	s15, [r3, #16]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f00f fd09 	bl	8010ed8 <sinf>
 80014c6:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f00f fdc2 	bl	8011060 <cosf>
 80014dc:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014e6:	3304      	adds	r3, #4
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	f00f fcf2 	bl	8010ed8 <sinf>
 80014f4:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014fe:	3304      	adds	r3, #4
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f00f fdaa 	bl	8011060 <cosf>
 800150c:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001516:	3308      	adds	r3, #8
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f00f fcda 	bl	8010ed8 <sinf>
 8001524:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800152e:	3308      	adds	r3, #8
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f00f fd92 	bl	8011060 <cosf>
 800153c:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
 8001544:	e02c      	b.n	80015a0 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	441a      	add	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	441a      	add	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	ddcf      	ble.n	8001546 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80015be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015fe:	3304      	adds	r3, #4
 8001600:	edd7 7a08 	vldr	s15, [r7, #32]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001618:	edd7 7a06 	vldr	s15, [r7, #24]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001638:	3308      	adds	r3, #8
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001654:	461a      	mov	r2, r3
 8001656:	f00c fd75 	bl	800e144 <arm_mat_mult_f32>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <robot_forward_kinematics_cal+0x1be>
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <robot_forward_kinematics_cal+0x1c8>)
 8001662:	2204      	movs	r2, #4
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f003 f94d 	bl	8004904 <Error_Handler>
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000a78 	.word	0x24000a78

08001678 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0f0      	sub	sp, #448	@ 0x1c0
 800167c:	af00      	add	r7, sp, #0
 800167e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001682:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001686:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001688:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800168c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f00f fc1b 	bl	8010ed8 <sinf>
 80016a2:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80016a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f00f fcd0 	bl	8011060 <cosf>
 80016c0:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80016c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016d2:	3304      	adds	r3, #4
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f00f fbfc 	bl	8010ed8 <sinf>
 80016e0:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80016e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016f2:	3304      	adds	r3, #4
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	f00f fcb0 	bl	8011060 <cosf>
 8001700:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001704:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001708:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001712:	3308      	adds	r3, #8
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f00f fbdc 	bl	8010ed8 <sinf>
 8001720:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001728:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001732:	3308      	adds	r3, #8
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f00f fc90 	bl	8011060 <cosf>
 8001740:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8001744:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001748:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001752:	3308      	adds	r3, #8
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	f00f fbb0 	bl	8010ed8 <sinf>
 8001778:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 800177c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800178a:	3308      	adds	r3, #8
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001794:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800179e:	3304      	adds	r3, #4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f00f fc58 	bl	8011060 <cosf>
 80017b0:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 80017b4:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80017b8:	eeb1 7a67 	vneg.f32	s14, s15
 80017bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 80017ca:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80017ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 80017e0:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80017e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001802:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001806:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001810:	eeb1 7a67 	vneg.f32	s14, s15
 8001814:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001820:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800182a:	3304      	adds	r3, #4
 800182c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8001838:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800183c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001846:	eeb1 7a67 	vneg.f32	s14, s15
 800184a:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001856:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001860:	3308      	adds	r3, #8
 8001862:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800186e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800187c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001888:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001892:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 80018ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80018d8:	eeb1 7a67 	vneg.f32	s14, s15
 80018dc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001900:	3301      	adds	r3, #1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001920:	eeb1 7a67 	vneg.f32	s14, s15
 8001924:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800193a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800193e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001948:	3302      	adds	r3, #2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 800195a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800195e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 8001980:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800198e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001992:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800199c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	3304      	adds	r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 80019bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80019ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019e6:	3301      	adds	r3, #1
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 80019f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8001a06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f00c fb36 	bl	800e088 <arm_mat_trans_f32>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <robot_model_param_cal+0x3b8>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f002 ff6c 	bl	8004904 <Error_Handler>
 8001a2c:	e002      	b.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a2e:	bf00      	nop
 8001a30:	24000a78 	.word	0x24000a78

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8001a34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001a42:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8001a58:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001a68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8001a76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8001a84:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a88:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001a92:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001aac:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001abc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001aca:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ace:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad2:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001ada:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ade:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001aec:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001af0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001afe:	eeb1 7a67 	vneg.f32	s14, s15
 8001b02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001b44:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b66:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001b74:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b76:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8001b7e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001b8c:	eeb1 7a67 	vneg.f32	s14, s15
 8001b90:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001bb8:	3308      	adds	r3, #8
 8001bba:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 8001bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001bd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001be2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001be6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	6852      	ldr	r2, [r2, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001bf8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8001c06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001c14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c38:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001c46:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c4a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8001c62:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001c70:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001ca2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ca6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8001cc2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001cd0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001cde:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8001cf4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cf8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d10:	3302      	adds	r3, #2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3304      	adds	r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8001d3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d58:	3301      	adds	r3, #1
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001d62:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8001d6c:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001d6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001d7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8001dcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dd0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001dda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001de8:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001dec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001dfe:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e1c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e32:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e42:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e64:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	ed93 5a00 	vldr	s10, [r3]
 8001e80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e8e:	3304      	adds	r3, #4
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e98:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ea8:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8001eac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001eba:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ebe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ec2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8001ed4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ed8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001ee2:	eeb1 7a67 	vneg.f32	s14, s15
 8001ee6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001efc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f20:	3308      	adds	r3, #8
 8001f22:	edd3 6a00 	vldr	s13, [r3]
 8001f26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f34:	3304      	adds	r3, #4
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f50:	3308      	adds	r3, #8
 8001f52:	edd3 6a00 	vldr	s13, [r3]
 8001f56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f64:	3304      	adds	r3, #4
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8001f86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001f94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001faa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fce:	3304      	adds	r3, #4
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ff0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002004:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002008:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002018:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 8002026:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800202a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800203c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002046:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800204a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002278 <robot_model_param_cal+0xc00>
 8002060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002064:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002068:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002072:	3304      	adds	r3, #4
 8002074:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 800208e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002278 <robot_model_param_cal+0xc00>
 8002092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002096:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80020b6:	3308      	adds	r3, #8
 80020b8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 80020c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80020d2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80020e8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 80020f8:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 80020fc:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002108:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800210c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002118:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800211c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002126:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800212a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800227c <robot_model_param_cal+0xc04>
 800213c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002140:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002144:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800214e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002152:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002280 <robot_model_param_cal+0xc08>
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	eef0 0a67 	vmov.f32	s1, s15
 800216c:	eeb0 0a66 	vmov.f32	s0, s13
 8002170:	f00e fe4e 	bl	8010e10 <fmaxf>
 8002174:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002178:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <robot_model_param_cal+0xc0c>)
 800217a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 800217e:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002182:	eef0 7ae7 	vabs.f32	s15, s15
 8002186:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 800218a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	dc0b      	bgt.n	80021ac <robot_model_param_cal+0xb34>
 8002194:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002198:	eef0 7ae7 	vabs.f32	s15, s15
 800219c:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	f340 82aa 	ble.w	8002700 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80021b4:	2203      	movs	r2, #3
 80021b6:	2103      	movs	r1, #3
 80021b8:	f00c f966 	bl	800e488 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 80021bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c0:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	f00c f95e 	bl	800e488 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 80021cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021d0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 80021d4:	2203      	movs	r2, #3
 80021d6:	2103      	movs	r1, #3
 80021d8:	f00c f956 	bl	800e488 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80021dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80021ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80021f8:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80021fc:	4619      	mov	r1, r3
 80021fe:	f00b ffa1 	bl	800e144 <arm_mat_mult_f32>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <robot_model_param_cal+0xb9a>
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <robot_model_param_cal+0xc10>)
 800220a:	2204      	movs	r2, #4
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f002 fb79 	bl	8004904 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002212:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002216:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002222:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002226:	edd3 7a04 	vldr	s15, [r3, #16]
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002232:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002236:	edd3 7a08 	vldr	s15, [r3, #32]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002242:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002246:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800227c <robot_model_param_cal+0xc04>
 8002252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002256:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800228c <robot_model_param_cal+0xc14>
 800225a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800225e:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002262:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002266:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800226a:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002274:	e023      	b.n	80022be <robot_model_param_cal+0xc46>
 8002276:	bf00      	nop
 8002278:	411ce80a 	.word	0x411ce80a
 800227c:	358637bd 	.word	0x358637bd
 8002280:	34000000 	.word	0x34000000
 8002284:	358637bd 	.word	0x358637bd
 8002288:	24000a78 	.word	0x24000a78
 800228c:	3d4ccccd 	.word	0x3d4ccccd
 8002290:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002294:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002298:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 80022aa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	dde4      	ble.n	8002290 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 80022c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022e2:	edc3 7a00 	vstr	s15, [r3]
 80022e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80022f2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002302:	edc3 7a04 	vstr	s15, [r3, #16]
 8002306:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800230a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800230e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002312:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800231e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002322:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002326:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800232a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f00b ffab 	bl	800e28c <arm_mat_inverse_f32>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <robot_model_param_cal+0xcce>
 800233c:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <robot_model_param_cal+0xed0>)
 800233e:	2204      	movs	r2, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f002 fadf 	bl	8004904 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002346:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800234a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8002354:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002358:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002362:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002366:	4619      	mov	r1, r3
 8002368:	f00b feec 	bl	800e144 <arm_mat_mult_f32>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <robot_model_param_cal+0xd04>
 8002372:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002374:	2204      	movs	r2, #4
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f002 fac4 	bl	8004904 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800237c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002380:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 800238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f00b fe74 	bl	800e088 <arm_mat_trans_f32>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <robot_model_param_cal+0xd38>
 80023a6:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <robot_model_param_cal+0xed0>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f002 faaa 	bl	8004904 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 80023b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023b4:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80023b8:	2203      	movs	r2, #3
 80023ba:	2103      	movs	r1, #3
 80023bc:	f00c f864 	bl	800e488 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 80023c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80023c4:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80023c8:	2203      	movs	r2, #3
 80023ca:	2103      	movs	r1, #3
 80023cc:	f00c f85c 	bl	800e488 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 80023d0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80023d4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80023d8:	2203      	movs	r2, #3
 80023da:	2103      	movs	r1, #3
 80023dc:	f00c f854 	bl	800e488 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 80023e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80023e4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80023e8:	2203      	movs	r2, #3
 80023ea:	2103      	movs	r1, #3
 80023ec:	f00c f84c 	bl	800e488 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 80023f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023f4:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80023f8:	2203      	movs	r2, #3
 80023fa:	2103      	movs	r1, #3
 80023fc:	f00c f844 	bl	800e488 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002400:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002404:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 800240e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f00b ff39 	bl	800e28c <arm_mat_inverse_f32>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 80b2 	bne.w	8002586 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002422:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002426:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002430:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002434:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002438:	4618      	mov	r0, r3
 800243a:	f00b fe83 	bl	800e144 <arm_mat_mult_f32>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <robot_model_param_cal+0xdd6>
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002446:	2204      	movs	r2, #4
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f002 fa5b 	bl	8004904 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800244e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002452:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 800245c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002464:	4618      	mov	r0, r3
 8002466:	f00b fe6d 	bl	800e144 <arm_mat_mult_f32>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <robot_model_param_cal+0xe02>
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002472:	2204      	movs	r2, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f002 fa45 	bl	8004904 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002480:	e016      	b.n	80024b0 <robot_model_param_cal+0xe38>
 8002482:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002486:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 800248a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002498:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 800249c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80024b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	dde4      	ble.n	8002482 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 80024c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024dc:	edc3 7a00 	vstr	s15, [r3]
 80024e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024ec:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024fc:	edc3 7a04 	vstr	s15, [r3, #16]
 8002500:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002508:	ed93 7a08 	vldr	s14, [r3, #32]
 800250c:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800251c:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002520:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f00b feae 	bl	800e28c <arm_mat_inverse_f32>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <robot_model_param_cal+0xec8>
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002538:	2204      	movs	r2, #4
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f002 f9e2 	bl	8004904 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002546:	e01a      	b.n	800257e <robot_model_param_cal+0xf06>
 8002548:	24000a78 	.word	0x24000a78
 800254c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002550:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 800255a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 800256c:	443a      	add	r2, r7
 800256e:	3ae0      	subs	r2, #224	@ 0xe0
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800257e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002582:	2b08      	cmp	r3, #8
 8002584:	dde2      	ble.n	800254c <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002586:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002594:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002598:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80025a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025b4:	3304      	adds	r3, #4
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80025bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025ca:	3308      	adds	r3, #8
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80025d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80025e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80025f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002606:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800260a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002614:	3301      	adds	r3, #1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002628:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800262c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002636:	3301      	adds	r3, #1
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002640:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002644:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800264e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002652:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800265c:	3302      	adds	r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002668:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002676:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800267a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 800268e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800269c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80026b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80026c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 80026d2:	3301      	adds	r3, #1
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	441a      	add	r2, r3
 80026d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 80026e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026f4:	3301      	adds	r3, #1
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	601a      	str	r2, [r3, #0]
	{
 80026fe:	e227      	b.n	8002b50 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002700:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002704:	eef1 6a67 	vneg.f32	s13, s15
 8002708:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800270c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002716:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002722:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002726:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002730:	3304      	adds	r3, #4
 8002732:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8002736:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800273a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 8002742:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002746:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002750:	3308      	adds	r3, #8
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8002758:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800275c:	eeb1 7a67 	vneg.f32	s14, s15
 8002760:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002764:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002768:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800276c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002776:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002782:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800278c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 80027a6:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80027aa:	eeb1 7a67 	vneg.f32	s14, s15
 80027ae:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80027b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80027c4:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80027da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80027e8:	3301      	adds	r3, #1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 80027f6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80027fa:	eef1 6a67 	vneg.f32	s13, s15
 80027fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002802:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800280c:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002818:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002822:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002826:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002830:	3302      	adds	r3, #2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 800283e:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 8002842:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002846:	ee67 6a27 	vmul.f32	s13, s14, s15
 800284a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800284e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002858:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800285c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002860:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002864:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800286e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8002888:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800288c:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002890:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002894:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002898:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028a2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3304      	adds	r3, #4
 80028ca:	4413      	add	r3, r2
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 80028d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028e2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002918:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002926:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f00b fba6 	bl	800e088 <arm_mat_trans_f32>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <robot_model_param_cal+0x12d4>
 8002942:	4b86      	ldr	r3, [pc, #536]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002944:	2204      	movs	r2, #4
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f001 ffdc 	bl	8004904 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 800294c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002950:	2224      	movs	r2, #36	@ 0x24
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f00c fae8 	bl	800ef2a <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 800295a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800295e:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002962:	2203      	movs	r2, #3
 8002964:	2103      	movs	r1, #3
 8002966:	f00b fd8f 	bl	800e488 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800296a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800296e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 8002978:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800297c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002986:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800298a:	4619      	mov	r1, r3
 800298c:	f00b fbda 	bl	800e144 <arm_mat_mult_f32>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <robot_model_param_cal+0x1328>
 8002996:	4b71      	ldr	r3, [pc, #452]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002998:	2204      	movs	r2, #4
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f001 ffb2 	bl	8004904 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80029a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 80029ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 80029bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029c0:	4619      	mov	r1, r3
 80029c2:	f00b fbbf 	bl	800e144 <arm_mat_mult_f32>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <robot_model_param_cal+0x135e>
 80029cc:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 80029ce:	2204      	movs	r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f001 ff97 	bl	8004904 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80029d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80029e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80029f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029fa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a04:	3304      	adds	r3, #4
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002a48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002a56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002a64:	3301      	adds	r3, #1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002a78:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a86:	3301      	adds	r3, #1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a90:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002aac:	3302      	adds	r3, #2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002ab8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002abc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002ac6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002ade:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3304      	adds	r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002b06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002b22:	3301      	adds	r3, #1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	441a      	add	r2, r3
 8002b28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	601a      	str	r2, [r3, #0]
	}
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	24000a78 	.word	0x24000a78

08002b60 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	e0cb      	b.n	8002d06 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3374      	adds	r3, #116	@ 0x74
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2198      	movs	r1, #152	@ 0x98
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	332c      	adds	r3, #44	@ 0x2c
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b92:	4bae      	ldr	r3, [pc, #696]	@ (8002e4c <robot_state_update+0x2ec>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3374      	adds	r3, #116	@ 0x74
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2198      	movs	r1, #152	@ 0x98
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3330      	adds	r3, #48	@ 0x30
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e4c <robot_state_update+0x2ec>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3374      	adds	r3, #116	@ 0x74
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2198      	movs	r1, #152	@ 0x98
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3334      	adds	r3, #52	@ 0x34
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3374      	adds	r3, #116	@ 0x74
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2198      	movs	r1, #152	@ 0x98
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3338      	adds	r3, #56	@ 0x38
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3374      	adds	r3, #116	@ 0x74
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2198      	movs	r1, #152	@ 0x98
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	333c      	adds	r3, #60	@ 0x3c
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3374      	adds	r3, #116	@ 0x74
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2198      	movs	r1, #152	@ 0x98
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3340      	adds	r3, #64	@ 0x40
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3374      	adds	r3, #116	@ 0x74
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	2198      	movs	r1, #152	@ 0x98
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3301      	adds	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f77f af30 	ble.w	8002b6e <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002d36:	3308      	adds	r3, #8
 8002d38:	ed93 7a00 	vldr	s14, [r3]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002d42:	3304      	adds	r3, #4
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d4e:	3308      	adds	r3, #8
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e036      	b.n	8002dcc <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	337c      	adds	r3, #124	@ 0x7c
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d84:	dd05      	ble.n	8002d92 <robot_state_update+0x232>
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <robot_state_update+0x2f0>)
 8002d88:	2205      	movs	r2, #5
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f001 fdba 	bl	8004904 <Error_Handler>
 8002d90:	e019      	b.n	8002dc6 <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	337e      	adds	r3, #126	@ 0x7e
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d504      	bpl.n	8002dc6 <robot_state_update+0x266>
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <robot_state_update+0x2f0>)
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f001 fd9f 	bl	8004904 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	ddc5      	ble.n	8002d5e <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fc50 	bl	8001678 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe fb67 	bl	80014ac <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e02c      	b.n	8002e3e <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	ddcf      	ble.n	8002de4 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e03f      	b.n	8002eca <robot_state_update+0x36a>
 8002e4a:	bf00      	nop
 8002e4c:	240003e8 	.word	0x240003e8
 8002e50:	24000a78 	.word	0x24000a78
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	ddc1      	ble.n	8002e54 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e01e      	b.n	8002f14 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	dddd      	ble.n	8002ed6 <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f00b f909 	bl	800e144 <arm_mat_mult_f32>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <robot_state_update+0x3e2>
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <robot_state_update+0x3ec>)
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f001 fce1 	bl	8004904 <Error_Handler>
}
 8002f42:	bf00      	nop
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	24000a78 	.word	0x24000a78

08002f50 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e040      	b.n	8002fe6 <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3304      	adds	r3, #4
 8002fac:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fce:	4413      	add	r3, r2
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	ddbb      	ble.n	8002f64 <robot_pos_pid_gain_setting+0x14>
	}
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e145      	b.n	800329c <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003010:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 80032d4 <robot_pos_pid+0x2d8>
 8003014:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003034:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	ed93 7a00 	vldr	s14, [r3]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003080:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80032d8 <robot_pos_pid+0x2dc>
 80030ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80030da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	edd3 5a00 	vldr	s11, [r3]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003114:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	edd3 5a00 	vldr	s11, [r3]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800315a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003186:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319e:	ee37 5b07 	vadd.f64	d5, d7, d7
 80031a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80031ae:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80032d8 <robot_pos_pid+0x2dc>
 80031b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ba:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	ed93 7a00 	vldr	s14, [r3]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031ea:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80032d8 <robot_pos_pid+0x2dc>
 80031ee:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031fe:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003202:	edd7 7a04 	vldr	s15, [r7, #16]
 8003206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800320a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800320e:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80032d8 <robot_pos_pid+0x2dc>
 8003212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003216:	ee35 7b07 	vadd.f64	d7, d5, d7
 800321a:	ee84 5b07 	vdiv.f64	d5, d4, d7
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003236:	ee36 7b47 	vsub.f64	d7, d6, d7
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800324a:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003292:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	f77f aeb6 	ble.w	8003010 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80032b6:	461a      	mov	r2, r3
 80032b8:	f00a ff44 	bl	800e144 <arm_mat_mult_f32>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <robot_pos_pid+0x2d0>
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <robot_pos_pid+0x2e0>)
 80032c4:	2204      	movs	r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f001 fb1c 	bl	8004904 <Error_Handler>
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40490fd8 	.word	0x40490fd8
 80032d8:	3b03126f 	.word	0x3b03126f
 80032dc:	24000a78 	.word	0x24000a78

080032e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	e060      	b.n	80033ae <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	49bf      	ldr	r1, [pc, #764]	@ (80035f0 <main+0x310>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2098      	movs	r0, #152	@ 0x98
 80032f6:	fb00 f303 	mul.w	r3, r0, r3
 80032fa:	440b      	add	r3, r1
 80032fc:	3308      	adds	r3, #8
 80032fe:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 8003300:	4abb      	ldr	r2, [pc, #748]	@ (80035f0 <main+0x310>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2198      	movs	r1, #152	@ 0x98
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	330c      	adds	r3, #12
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 8003312:	4ab7      	ldr	r2, [pc, #732]	@ (80035f0 <main+0x310>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2198      	movs	r1, #152	@ 0x98
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3314      	adds	r3, #20
 8003320:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003324:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 8003326:	4ab2      	ldr	r2, [pc, #712]	@ (80035f0 <main+0x310>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2198      	movs	r1, #152	@ 0x98
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3318      	adds	r3, #24
 8003334:	4aaf      	ldr	r2, [pc, #700]	@ (80035f4 <main+0x314>)
 8003336:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 8003338:	4aad      	ldr	r2, [pc, #692]	@ (80035f0 <main+0x310>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2198      	movs	r1, #152	@ 0x98
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	331c      	adds	r3, #28
 8003346:	4aac      	ldr	r2, [pc, #688]	@ (80035f8 <main+0x318>)
 8003348:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 800334a:	2200      	movs	r2, #0
 800334c:	2108      	movs	r1, #8
 800334e:	2008      	movs	r0, #8
 8003350:	f008 fb29 	bl	800b9a6 <xQueueGenericCreate>
 8003354:	4602      	mov	r2, r0
 8003356:	49a6      	ldr	r1, [pc, #664]	@ (80035f0 <main+0x310>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2098      	movs	r0, #152	@ 0x98
 800335c:	fb00 f303 	mul.w	r3, r0, r3
 8003360:	440b      	add	r3, r1
 8003362:	3310      	adds	r3, #16
 8003364:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 8003366:	4aa2      	ldr	r2, [pc, #648]	@ (80035f0 <main+0x310>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2198      	movs	r1, #152	@ 0x98
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3310      	adds	r3, #16
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <main+0xa4>
			sta = 3;
 800337a:	4ba0      	ldr	r3, [pc, #640]	@ (80035fc <main+0x31c>)
 800337c:	2203      	movs	r2, #3
 800337e:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003380:	f001 fac0 	bl	8004904 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8003384:	4a9a      	ldr	r2, [pc, #616]	@ (80035f0 <main+0x310>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2198      	movs	r1, #152	@ 0x98
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3394      	adds	r3, #148	@ 0x94
 8003392:	4a9b      	ldr	r2, [pc, #620]	@ (8003600 <main+0x320>)
 8003394:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 8003396:	4a96      	ldr	r2, [pc, #600]	@ (80035f0 <main+0x310>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	2198      	movs	r1, #152	@ 0x98
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	4a97      	ldr	r2, [pc, #604]	@ (8003604 <main+0x324>)
 80033a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3301      	adds	r3, #1
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	dd9b      	ble.n	80032ec <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 80033b4:	4b94      	ldr	r3, [pc, #592]	@ (8003608 <main+0x328>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	2103      	movs	r1, #3
 80033ba:	4894      	ldr	r0, [pc, #592]	@ (800360c <main+0x32c>)
 80033bc:	f00b f864 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 80033c0:	4b93      	ldr	r3, [pc, #588]	@ (8003610 <main+0x330>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	2103      	movs	r1, #3
 80033c6:	4893      	ldr	r0, [pc, #588]	@ (8003614 <main+0x334>)
 80033c8:	f00b f85e 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 80033cc:	4b92      	ldr	r3, [pc, #584]	@ (8003618 <main+0x338>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	2103      	movs	r1, #3
 80033d2:	4892      	ldr	r0, [pc, #584]	@ (800361c <main+0x33c>)
 80033d4:	f00b f858 	bl	800e488 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 80033d8:	4b85      	ldr	r3, [pc, #532]	@ (80035f0 <main+0x310>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 80033de:	4b84      	ldr	r3, [pc, #528]	@ (80035f0 <main+0x310>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 80033e4:	4b82      	ldr	r3, [pc, #520]	@ (80035f0 <main+0x310>)
 80033e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003620 <main+0x340>)
 80033e8:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 80033ec:	4b80      	ldr	r3, [pc, #512]	@ (80035f0 <main+0x310>)
 80033ee:	4a8c      	ldr	r2, [pc, #560]	@ (8003620 <main+0x340>)
 80033f0:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <main+0x310>)
 80033f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033fa:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 80033fe:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8003624 <main+0x344>
 8003402:	eef1 7a67 	vneg.f32	s15, s15
 8003406:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <main+0x310>)
 8003408:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 800340c:	4a86      	ldr	r2, [pc, #536]	@ (8003628 <main+0x348>)
 800340e:	4b78      	ldr	r3, [pc, #480]	@ (80035f0 <main+0x310>)
 8003410:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 8003414:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <main+0x310>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 800341e:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003624 <main+0x344>
 8003422:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800362c <main+0x34c>
 8003426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003630 <main+0x350>
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <main+0x310>)
 8003434:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 8003438:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003624 <main+0x344>
 800343c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800362c <main+0x34c>
 8003440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003444:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003634 <main+0x354>
 8003448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344c:	4b68      	ldr	r3, [pc, #416]	@ (80035f0 <main+0x310>)
 800344e:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003452:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003624 <main+0x344>
 8003456:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800362c <main+0x34c>
 800345a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003638 <main+0x358>
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <main+0x310>)
 8003468:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 800346c:	4b60      	ldr	r3, [pc, #384]	@ (80035f0 <main+0x310>)
 800346e:	4a73      	ldr	r2, [pc, #460]	@ (800363c <main+0x35c>)
 8003470:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 8003474:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <main+0x310>)
 8003476:	4a72      	ldr	r2, [pc, #456]	@ (8003640 <main+0x360>)
 8003478:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <main+0x310>)
 800347e:	4a70      	ldr	r2, [pc, #448]	@ (8003640 <main+0x360>)
 8003480:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 8003484:	4b5a      	ldr	r3, [pc, #360]	@ (80035f0 <main+0x310>)
 8003486:	4a6f      	ldr	r2, [pc, #444]	@ (8003644 <main+0x364>)
 8003488:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 800348c:	4b58      	ldr	r3, [pc, #352]	@ (80035f0 <main+0x310>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 8003496:	4b56      	ldr	r3, [pc, #344]	@ (80035f0 <main+0x310>)
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <main+0x310>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 80034aa:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <main+0x310>)
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 80034b4:	4b4e      	ldr	r3, [pc, #312]	@ (80035f0 <main+0x310>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 80034be:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <main+0x310>)
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <main+0x310>)
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 80034d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <main+0x368>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	2103      	movs	r1, #3
 80034d8:	485c      	ldr	r0, [pc, #368]	@ (800364c <main+0x36c>)
 80034da:	f00a ffd5 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <main+0x370>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	2103      	movs	r1, #3
 80034e4:	485b      	ldr	r0, [pc, #364]	@ (8003654 <main+0x374>)
 80034e6:	f00a ffcf 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 80034ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003658 <main+0x378>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	2103      	movs	r1, #3
 80034f0:	485a      	ldr	r0, [pc, #360]	@ (800365c <main+0x37c>)
 80034f2:	f00a ffc9 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80034f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003660 <main+0x380>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	2103      	movs	r1, #3
 80034fc:	4859      	ldr	r0, [pc, #356]	@ (8003664 <main+0x384>)
 80034fe:	f00a ffc3 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 8003502:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <main+0x388>)
 8003504:	2201      	movs	r2, #1
 8003506:	2103      	movs	r1, #3
 8003508:	4858      	ldr	r0, [pc, #352]	@ (800366c <main+0x38c>)
 800350a:	f00a ffbd 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <main+0x390>)
 8003510:	2201      	movs	r2, #1
 8003512:	2103      	movs	r1, #3
 8003514:	4857      	ldr	r0, [pc, #348]	@ (8003674 <main+0x394>)
 8003516:	f00a ffb7 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 800351a:	4b57      	ldr	r3, [pc, #348]	@ (8003678 <main+0x398>)
 800351c:	2201      	movs	r2, #1
 800351e:	2103      	movs	r1, #3
 8003520:	4856      	ldr	r0, [pc, #344]	@ (800367c <main+0x39c>)
 8003522:	f00a ffb1 	bl	800e488 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 8003526:	4b56      	ldr	r3, [pc, #344]	@ (8003680 <main+0x3a0>)
 8003528:	2201      	movs	r2, #1
 800352a:	2103      	movs	r1, #3
 800352c:	4855      	ldr	r0, [pc, #340]	@ (8003684 <main+0x3a4>)
 800352e:	f00a ffab 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 8003532:	4b55      	ldr	r3, [pc, #340]	@ (8003688 <main+0x3a8>)
 8003534:	2201      	movs	r2, #1
 8003536:	2103      	movs	r1, #3
 8003538:	4854      	ldr	r0, [pc, #336]	@ (800368c <main+0x3ac>)
 800353a:	f00a ffa5 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 800353e:	4b54      	ldr	r3, [pc, #336]	@ (8003690 <main+0x3b0>)
 8003540:	2201      	movs	r2, #1
 8003542:	2103      	movs	r1, #3
 8003544:	4853      	ldr	r0, [pc, #332]	@ (8003694 <main+0x3b4>)
 8003546:	f00a ff9f 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 800354a:	4b53      	ldr	r3, [pc, #332]	@ (8003698 <main+0x3b8>)
 800354c:	2201      	movs	r2, #1
 800354e:	2103      	movs	r1, #3
 8003550:	4852      	ldr	r0, [pc, #328]	@ (800369c <main+0x3bc>)
 8003552:	f00a ff99 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8003556:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <main+0x3c0>)
 8003558:	2201      	movs	r2, #1
 800355a:	2103      	movs	r1, #3
 800355c:	4851      	ldr	r0, [pc, #324]	@ (80036a4 <main+0x3c4>)
 800355e:	f00a ff93 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003562:	4b51      	ldr	r3, [pc, #324]	@ (80036a8 <main+0x3c8>)
 8003564:	2201      	movs	r2, #1
 8003566:	2103      	movs	r1, #3
 8003568:	4850      	ldr	r0, [pc, #320]	@ (80036ac <main+0x3cc>)
 800356a:	f00a ff8d 	bl	800e488 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 800356e:	4b50      	ldr	r3, [pc, #320]	@ (80036b0 <main+0x3d0>)
 8003570:	2203      	movs	r2, #3
 8003572:	2103      	movs	r1, #3
 8003574:	484f      	ldr	r0, [pc, #316]	@ (80036b4 <main+0x3d4>)
 8003576:	f00a ff87 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 800357a:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <main+0x3d8>)
 800357c:	2203      	movs	r2, #3
 800357e:	2103      	movs	r1, #3
 8003580:	484e      	ldr	r0, [pc, #312]	@ (80036bc <main+0x3dc>)
 8003582:	f00a ff81 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8003586:	4b4e      	ldr	r3, [pc, #312]	@ (80036c0 <main+0x3e0>)
 8003588:	2203      	movs	r2, #3
 800358a:	2103      	movs	r1, #3
 800358c:	484d      	ldr	r0, [pc, #308]	@ (80036c4 <main+0x3e4>)
 800358e:	f00a ff7b 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8003592:	4b4d      	ldr	r3, [pc, #308]	@ (80036c8 <main+0x3e8>)
 8003594:	2203      	movs	r2, #3
 8003596:	2103      	movs	r1, #3
 8003598:	484c      	ldr	r0, [pc, #304]	@ (80036cc <main+0x3ec>)
 800359a:	f00a ff75 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 800359e:	4b4c      	ldr	r3, [pc, #304]	@ (80036d0 <main+0x3f0>)
 80035a0:	2203      	movs	r2, #3
 80035a2:	2103      	movs	r1, #3
 80035a4:	484b      	ldr	r0, [pc, #300]	@ (80036d4 <main+0x3f4>)
 80035a6:	f00a ff6f 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 80035aa:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <main+0x3f8>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	2103      	movs	r1, #3
 80035b0:	484a      	ldr	r0, [pc, #296]	@ (80036dc <main+0x3fc>)
 80035b2:	f00a ff69 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 80035b6:	4b4a      	ldr	r3, [pc, #296]	@ (80036e0 <main+0x400>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	2103      	movs	r1, #3
 80035bc:	4849      	ldr	r0, [pc, #292]	@ (80036e4 <main+0x404>)
 80035be:	f00a ff63 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 80035c2:	4b49      	ldr	r3, [pc, #292]	@ (80036e8 <main+0x408>)
 80035c4:	2203      	movs	r2, #3
 80035c6:	2103      	movs	r1, #3
 80035c8:	4848      	ldr	r0, [pc, #288]	@ (80036ec <main+0x40c>)
 80035ca:	f00a ff5d 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 80035ce:	4b48      	ldr	r3, [pc, #288]	@ (80036f0 <main+0x410>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	2103      	movs	r1, #3
 80035d4:	4847      	ldr	r0, [pc, #284]	@ (80036f4 <main+0x414>)
 80035d6:	f00a ff57 	bl	800e488 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <main+0x418>)
 80035dc:	2201      	movs	r2, #1
 80035de:	2103      	movs	r1, #3
 80035e0:	4846      	ldr	r0, [pc, #280]	@ (80036fc <main+0x41c>)
 80035e2:	f00a ff51 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 80035e6:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <main+0x420>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	2103      	movs	r1, #3
 80035ec:	e08a      	b.n	8003704 <main+0x424>
 80035ee:	bf00      	nop
 80035f0:	2400040c 	.word	0x2400040c
 80035f4:	41200000 	.word	0x41200000
 80035f8:	3dfbe76d 	.word	0x3dfbe76d
 80035fc:	24000a78 	.word	0x24000a78
 8003600:	40e66666 	.word	0x40e66666
 8003604:	c0e66666 	.word	0xc0e66666
 8003608:	24000000 	.word	0x24000000
 800360c:	240003e8 	.word	0x240003e8
 8003610:	2400000c 	.word	0x2400000c
 8003614:	240003f0 	.word	0x240003f0
 8003618:	24000018 	.word	0x24000018
 800361c:	240003f8 	.word	0x240003f8
 8003620:	bf800000 	.word	0xbf800000
 8003624:	40490fd8 	.word	0x40490fd8
 8003628:	40490fd8 	.word	0x40490fd8
 800362c:	43340000 	.word	0x43340000
 8003630:	42aa0000 	.word	0x42aa0000
 8003634:	c3200000 	.word	0xc3200000
 8003638:	c2200000 	.word	0xc2200000
 800363c:	3e343958 	.word	0x3e343958
 8003640:	3eeb851f 	.word	0x3eeb851f
 8003644:	407c209b 	.word	0x407c209b
 8003648:	240005f0 	.word	0x240005f0
 800364c:	240005e8 	.word	0x240005e8
 8003650:	2400061c 	.word	0x2400061c
 8003654:	24000614 	.word	0x24000614
 8003658:	24000630 	.word	0x24000630
 800365c:	24000628 	.word	0x24000628
 8003660:	24000644 	.word	0x24000644
 8003664:	2400063c 	.word	0x2400063c
 8003668:	24000658 	.word	0x24000658
 800366c:	24000650 	.word	0x24000650
 8003670:	2400066c 	.word	0x2400066c
 8003674:	24000664 	.word	0x24000664
 8003678:	24000680 	.word	0x24000680
 800367c:	24000678 	.word	0x24000678
 8003680:	24000694 	.word	0x24000694
 8003684:	2400068c 	.word	0x2400068c
 8003688:	240006a8 	.word	0x240006a8
 800368c:	240006a0 	.word	0x240006a0
 8003690:	240006bc 	.word	0x240006bc
 8003694:	240006b4 	.word	0x240006b4
 8003698:	240006d0 	.word	0x240006d0
 800369c:	240006c8 	.word	0x240006c8
 80036a0:	240006e4 	.word	0x240006e4
 80036a4:	240006dc 	.word	0x240006dc
 80036a8:	240006f8 	.word	0x240006f8
 80036ac:	240006f0 	.word	0x240006f0
 80036b0:	24000738 	.word	0x24000738
 80036b4:	24000730 	.word	0x24000730
 80036b8:	24000764 	.word	0x24000764
 80036bc:	2400075c 	.word	0x2400075c
 80036c0:	24000790 	.word	0x24000790
 80036c4:	24000788 	.word	0x24000788
 80036c8:	240007bc 	.word	0x240007bc
 80036cc:	240007b4 	.word	0x240007b4
 80036d0:	240007e8 	.word	0x240007e8
 80036d4:	240007e0 	.word	0x240007e0
 80036d8:	24000814 	.word	0x24000814
 80036dc:	2400080c 	.word	0x2400080c
 80036e0:	24000828 	.word	0x24000828
 80036e4:	24000820 	.word	0x24000820
 80036e8:	2400083c 	.word	0x2400083c
 80036ec:	24000834 	.word	0x24000834
 80036f0:	24000868 	.word	0x24000868
 80036f4:	24000860 	.word	0x24000860
 80036f8:	240008d0 	.word	0x240008d0
 80036fc:	240008c8 	.word	0x240008c8
 8003700:	240008e4 	.word	0x240008e4
 8003704:	4851      	ldr	r0, [pc, #324]	@ (800384c <main+0x56c>)
 8003706:	f00a febf 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 800370a:	4b51      	ldr	r3, [pc, #324]	@ (8003850 <main+0x570>)
 800370c:	2201      	movs	r2, #1
 800370e:	2103      	movs	r1, #3
 8003710:	4850      	ldr	r0, [pc, #320]	@ (8003854 <main+0x574>)
 8003712:	f00a feb9 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8003716:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <main+0x578>)
 8003718:	2201      	movs	r2, #1
 800371a:	2103      	movs	r1, #3
 800371c:	484f      	ldr	r0, [pc, #316]	@ (800385c <main+0x57c>)
 800371e:	f00a feb3 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8003722:	4b4f      	ldr	r3, [pc, #316]	@ (8003860 <main+0x580>)
 8003724:	2201      	movs	r2, #1
 8003726:	2103      	movs	r1, #3
 8003728:	484e      	ldr	r0, [pc, #312]	@ (8003864 <main+0x584>)
 800372a:	f00a fead 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 800372e:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <main+0x588>)
 8003730:	2201      	movs	r2, #1
 8003732:	2103      	movs	r1, #3
 8003734:	484d      	ldr	r0, [pc, #308]	@ (800386c <main+0x58c>)
 8003736:	f00a fea7 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 800373a:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <main+0x590>)
 800373c:	2201      	movs	r2, #1
 800373e:	2103      	movs	r1, #3
 8003740:	484c      	ldr	r0, [pc, #304]	@ (8003874 <main+0x594>)
 8003742:	f00a fea1 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8003746:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <main+0x598>)
 8003748:	2201      	movs	r2, #1
 800374a:	2103      	movs	r1, #3
 800374c:	484b      	ldr	r0, [pc, #300]	@ (800387c <main+0x59c>)
 800374e:	f00a fe9b 	bl	800e488 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8003752:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <main+0x5a0>)
 8003754:	2201      	movs	r2, #1
 8003756:	2103      	movs	r1, #3
 8003758:	484a      	ldr	r0, [pc, #296]	@ (8003884 <main+0x5a4>)
 800375a:	f00a fe95 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <main+0x5a8>)
 8003760:	2201      	movs	r2, #1
 8003762:	2103      	movs	r1, #3
 8003764:	4849      	ldr	r0, [pc, #292]	@ (800388c <main+0x5ac>)
 8003766:	f00a fe8f 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 800376a:	4b49      	ldr	r3, [pc, #292]	@ (8003890 <main+0x5b0>)
 800376c:	2201      	movs	r2, #1
 800376e:	2103      	movs	r1, #3
 8003770:	4848      	ldr	r0, [pc, #288]	@ (8003894 <main+0x5b4>)
 8003772:	f00a fe89 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8003776:	4b48      	ldr	r3, [pc, #288]	@ (8003898 <main+0x5b8>)
 8003778:	2201      	movs	r2, #1
 800377a:	2103      	movs	r1, #3
 800377c:	4847      	ldr	r0, [pc, #284]	@ (800389c <main+0x5bc>)
 800377e:	f00a fe83 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8003782:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <main+0x5c0>)
 8003784:	2201      	movs	r2, #1
 8003786:	2103      	movs	r1, #3
 8003788:	4846      	ldr	r0, [pc, #280]	@ (80038a4 <main+0x5c4>)
 800378a:	f00a fe7d 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <main+0x5c8>)
 8003790:	2201      	movs	r2, #1
 8003792:	2103      	movs	r1, #3
 8003794:	4845      	ldr	r0, [pc, #276]	@ (80038ac <main+0x5cc>)
 8003796:	f00a fe77 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 800379a:	4b45      	ldr	r3, [pc, #276]	@ (80038b0 <main+0x5d0>)
 800379c:	2201      	movs	r2, #1
 800379e:	2103      	movs	r1, #3
 80037a0:	4844      	ldr	r0, [pc, #272]	@ (80038b4 <main+0x5d4>)
 80037a2:	f00a fe71 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 80037a6:	4b44      	ldr	r3, [pc, #272]	@ (80038b8 <main+0x5d8>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	2103      	movs	r1, #3
 80037ac:	4843      	ldr	r0, [pc, #268]	@ (80038bc <main+0x5dc>)
 80037ae:	f00a fe6b 	bl	800e488 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 80037b2:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <main+0x5e0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	2103      	movs	r1, #3
 80037b8:	4842      	ldr	r0, [pc, #264]	@ (80038c4 <main+0x5e4>)
 80037ba:	f00a fe65 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <main+0x5e8>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	2103      	movs	r1, #3
 80037c4:	4841      	ldr	r0, [pc, #260]	@ (80038cc <main+0x5ec>)
 80037c6:	f00a fe5f 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <main+0x5f0>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	2103      	movs	r1, #3
 80037d0:	4840      	ldr	r0, [pc, #256]	@ (80038d4 <main+0x5f4>)
 80037d2:	f00a fe59 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 80037d6:	4b40      	ldr	r3, [pc, #256]	@ (80038d8 <main+0x5f8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	2103      	movs	r1, #3
 80037dc:	483f      	ldr	r0, [pc, #252]	@ (80038dc <main+0x5fc>)
 80037de:	f00a fe53 	bl	800e488 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 80037e2:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <main+0x600>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	2103      	movs	r1, #3
 80037e8:	483e      	ldr	r0, [pc, #248]	@ (80038e4 <main+0x604>)
 80037ea:	f00a fe4d 	bl	800e488 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80037ee:	f001 f84b 	bl	8004888 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f2:	f001 fd93 	bl	800531c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f6:	f000 f883 	bl	8003900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fa:	f000 f9ef 	bl	8003bdc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80037fe:	f000 f8f9 	bl	80039f4 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8003802:	f000 f99f 	bl	8003b44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003806:	f007 fe23 	bl	800b450 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 800380a:	4a37      	ldr	r2, [pc, #220]	@ (80038e8 <main+0x608>)
 800380c:	2100      	movs	r1, #0
 800380e:	4837      	ldr	r0, [pc, #220]	@ (80038ec <main+0x60c>)
 8003810:	f007 fe68 	bl	800b4e4 <osThreadNew>
 8003814:	4603      	mov	r3, r0
 8003816:	4a36      	ldr	r2, [pc, #216]	@ (80038f0 <main+0x610>)
 8003818:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 800381a:	4a36      	ldr	r2, [pc, #216]	@ (80038f4 <main+0x614>)
 800381c:	2100      	movs	r1, #0
 800381e:	4836      	ldr	r0, [pc, #216]	@ (80038f8 <main+0x618>)
 8003820:	f007 fe60 	bl	800b4e4 <osThreadNew>
 8003824:	4603      	mov	r3, r0
 8003826:	4a35      	ldr	r2, [pc, #212]	@ (80038fc <main+0x61c>)
 8003828:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800382a:	2000      	movs	r0, #0
 800382c:	f001 fc74 	bl	8005118 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003830:	2001      	movs	r0, #1
 8003832:	f001 fc71 	bl	8005118 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003836:	2002      	movs	r0, #2
 8003838:	f001 fc6e 	bl	8005118 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800383c:	2101      	movs	r1, #1
 800383e:	2000      	movs	r0, #0
 8003840:	f001 fce0 	bl	8005204 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8003844:	f007 fe28 	bl	800b498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <main+0x568>
 800384c:	240008dc 	.word	0x240008dc
 8003850:	240008f8 	.word	0x240008f8
 8003854:	240008f0 	.word	0x240008f0
 8003858:	2400090c 	.word	0x2400090c
 800385c:	24000904 	.word	0x24000904
 8003860:	24000920 	.word	0x24000920
 8003864:	24000918 	.word	0x24000918
 8003868:	24000934 	.word	0x24000934
 800386c:	2400092c 	.word	0x2400092c
 8003870:	24000948 	.word	0x24000948
 8003874:	24000940 	.word	0x24000940
 8003878:	2400095c 	.word	0x2400095c
 800387c:	24000954 	.word	0x24000954
 8003880:	2400097c 	.word	0x2400097c
 8003884:	24000974 	.word	0x24000974
 8003888:	24000990 	.word	0x24000990
 800388c:	24000988 	.word	0x24000988
 8003890:	240009a4 	.word	0x240009a4
 8003894:	2400099c 	.word	0x2400099c
 8003898:	240009b8 	.word	0x240009b8
 800389c:	240009b0 	.word	0x240009b0
 80038a0:	240009cc 	.word	0x240009cc
 80038a4:	240009c4 	.word	0x240009c4
 80038a8:	240009e0 	.word	0x240009e0
 80038ac:	240009d8 	.word	0x240009d8
 80038b0:	240009f4 	.word	0x240009f4
 80038b4:	240009ec 	.word	0x240009ec
 80038b8:	24000a08 	.word	0x24000a08
 80038bc:	24000a00 	.word	0x24000a00
 80038c0:	24000a1c 	.word	0x24000a1c
 80038c4:	24000a14 	.word	0x24000a14
 80038c8:	24000a30 	.word	0x24000a30
 80038cc:	24000a28 	.word	0x24000a28
 80038d0:	24000a44 	.word	0x24000a44
 80038d4:	24000a3c 	.word	0x24000a3c
 80038d8:	24000a58 	.word	0x24000a58
 80038dc:	24000a50 	.word	0x24000a50
 80038e0:	24000a6c 	.word	0x24000a6c
 80038e4:	24000a64 	.word	0x24000a64
 80038e8:	08011438 	.word	0x08011438
 80038ec:	08003cc1 	.word	0x08003cc1
 80038f0:	240003bc 	.word	0x240003bc
 80038f4:	0801145c 	.word	0x0801145c
 80038f8:	08004455 	.word	0x08004455
 80038fc:	240003c0 	.word	0x240003c0

08003900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b09c      	sub	sp, #112	@ 0x70
 8003904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390a:	224c      	movs	r2, #76	@ 0x4c
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f00b fb0b 	bl	800ef2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	2220      	movs	r2, #32
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f00b fb05 	bl	800ef2a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003920:	2002      	movs	r0, #2
 8003922:	f003 fa91 	bl	8006e48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	2300      	movs	r3, #0
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4b30      	ldr	r3, [pc, #192]	@ (80039ec <SystemClock_Config+0xec>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4a2f      	ldr	r2, [pc, #188]	@ (80039ec <SystemClock_Config+0xec>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003936:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <SystemClock_Config+0xec>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <SystemClock_Config+0xf0>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <SystemClock_Config+0xf0>)
 8003946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <SystemClock_Config+0xf0>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003958:	bf00      	nop
 800395a:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <SystemClock_Config+0xf0>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003966:	d1f8      	bne.n	800395a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003968:	2301      	movs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800396c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003972:	2302      	movs	r3, #2
 8003974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003976:	2302      	movs	r3, #2
 8003978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800397e:	2364      	movs	r3, #100	@ 0x64
 8003980:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003982:	2302      	movs	r3, #2
 8003984:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8003986:	2310      	movs	r3, #16
 8003988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800398a:	2302      	movs	r3, #2
 800398c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800398e:	230c      	movs	r3, #12
 8003990:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003992:	2300      	movs	r3, #0
 8003994:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800399a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa8c 	bl	8006ebc <HAL_RCC_OscConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80039aa:	f000 ffab 	bl	8004904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039ae:	233f      	movs	r3, #63	@ 0x3f
 80039b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b2:	2303      	movs	r3, #3
 80039b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80039ba:	2308      	movs	r3, #8
 80039bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80039be:	2340      	movs	r3, #64	@ 0x40
 80039c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80039c2:	2340      	movs	r3, #64	@ 0x40
 80039c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80039c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80039cc:	2340      	movs	r3, #64	@ 0x40
 80039ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	2102      	movs	r1, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fecb 	bl	8007770 <HAL_RCC_ClockConfig>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80039e0:	f000 ff90 	bl	8004904 <Error_Handler>
  }
}
 80039e4:	bf00      	nop
 80039e6:	3770      	adds	r7, #112	@ 0x70
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58000400 	.word	0x58000400
 80039f0:	58024800 	.word	0x58024800

080039f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80039fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 80039fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003b38 <MX_FDCAN1_Init+0x144>)
 80039fe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003a00:	4b4c      	ldr	r3, [pc, #304]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a06:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003a0c:	4b49      	ldr	r3, [pc, #292]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003a12:	4b48      	ldr	r3, [pc, #288]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003a18:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003a1e:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8003a24:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a26:	2208      	movs	r2, #8
 8003a28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8003a2a:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a2c:	221f      	movs	r2, #31
 8003a2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003a30:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a32:	2208      	movs	r2, #8
 8003a34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a3e:	2204      	movs	r2, #4
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003a42:	4b3c      	ldr	r3, [pc, #240]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a44:	2205      	movs	r2, #5
 8003a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003a48:	4b3a      	ldr	r3, [pc, #232]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003a4e:	4b39      	ldr	r3, [pc, #228]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003a54:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a68:	2204      	movs	r2, #4
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003a72:	4b30      	ldr	r3, [pc, #192]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a74:	2204      	movs	r2, #4
 8003a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8003a78:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a80:	2204      	movs	r2, #4
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8003a84:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a86:	2210      	movs	r2, #16
 8003a88:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8003a90:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a92:	2220      	movs	r2, #32
 8003a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003a96:	4b27      	ldr	r3, [pc, #156]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003aa2:	4824      	ldr	r0, [pc, #144]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003aa4:	f001 fe82 	bl	80057ac <HAL_FDCAN_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003aae:	f000 ff29 	bl	8004904 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	481f      	ldr	r0, [pc, #124]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003ab8:	f002 fa5a 	bl	8005f70 <HAL_FDCAN_ActivateNotification>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <MX_FDCAN1_Init+0x148>)
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003ac8:	f000 ff1c 	bl	8004904 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003acc:	4819      	ldr	r0, [pc, #100]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003ace:	f002 f84b 	bl	8005b68 <HAL_FDCAN_Start>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8003ad8:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <MX_FDCAN1_Init+0x148>)
 8003ada:	2203      	movs	r2, #3
 8003adc:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003ade:	f000 ff11 	bl	8004904 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e01d      	b.n	8003b24 <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003ae8:	4812      	ldr	r0, [pc, #72]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003aea:	f002 fa2f 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d014      	beq.n	8003b1e <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003af4:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <MX_FDCAN1_Init+0x14c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2198      	movs	r1, #152	@ 0x98
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3308      	adds	r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fa1e 	bl	8000f48 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <MX_FDCAN1_Init+0x14c>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2198      	movs	r1, #152	@ 0x98
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	330c      	adds	r3, #12
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3301      	adds	r3, #1
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	ddde      	ble.n	8003ae8 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	24000288 	.word	0x24000288
 8003b38:	4000a000 	.word	0x4000a000
 8003b3c:	24000a78 	.word	0x24000a78
 8003b40:	2400040c 	.word	0x2400040c

08003b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b48:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b4a:	4a23      	ldr	r2, [pc, #140]	@ (8003bd8 <MX_USART3_UART_Init+0x94>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b8c:	4811      	ldr	r0, [pc, #68]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b8e:	f006 fab1 	bl	800a0f4 <HAL_UART_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003b98:	f000 feb4 	bl	8004904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	480d      	ldr	r0, [pc, #52]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003ba0:	f007 fb47 	bl	800b232 <HAL_UARTEx_SetTxFifoThreshold>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003baa:	f000 feab 	bl	8004904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4808      	ldr	r0, [pc, #32]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003bb2:	f007 fb7c 	bl	800b2ae <HAL_UARTEx_SetRxFifoThreshold>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003bbc:	f000 fea2 	bl	8004904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003bc0:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003bc2:	f007 fafd 	bl	800b1c0 <HAL_UARTEx_DisableFifoMode>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003bcc:	f000 fe9a 	bl	8004904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	24000328 	.word	0x24000328
 8003bd8:	40004800 	.word	0x40004800

08003bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf8:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c02:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c10:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c16:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c20:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2e:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c34:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c52:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c6a:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c70:	4a11      	ldr	r2, [pc, #68]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c72:	f043 0310 	orr.w	r3, r3, #16
 8003c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	480b      	ldr	r0, [pc, #44]	@ (8003cbc <MX_GPIO_Init+0xe0>)
 8003c8e:	f003 f8a7 	bl	8006de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c92:	2302      	movs	r3, #2
 8003c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4804      	ldr	r0, [pc, #16]	@ (8003cbc <MX_GPIO_Init+0xe0>)
 8003caa:	f002 fee9 	bl	8006a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cae:	bf00      	nop
 8003cb0:	3728      	adds	r7, #40	@ 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	58021000 	.word	0x58021000

08003cc0 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	ed2d 8b02 	vpush	{d8}
 8003cc6:	b090      	sub	sp, #64	@ 0x40
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 8003ccc:	f008 fe14 	bl	800c8f8 <xTaskGetTickCount>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f008 fc6e 	bl	800c5c0 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8003ce4:	4b83      	ldr	r3, [pc, #524]	@ (8003ef4 <ControlTask+0x234>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a83      	ldr	r2, [pc, #524]	@ (8003ef8 <ControlTask+0x238>)
 8003cea:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	4b80      	ldr	r3, [pc, #512]	@ (8003ef4 <ControlTask+0x234>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef4 <ControlTask+0x234>)
 8003cf8:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	487f      	ldr	r0, [pc, #508]	@ (8003efc <ControlTask+0x23c>)
 8003cfe:	f003 f888 	bl	8006e12 <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <ControlTask+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 80eb 	bne.w	8003ee2 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f00 <ControlTask+0x240>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d152      	bne.n	8003dba <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003d14:	2300      	movs	r3, #0
 8003d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d18:	e048      	b.n	8003dac <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003d1a:	2180      	movs	r1, #128	@ 0x80
 8003d1c:	4877      	ldr	r0, [pc, #476]	@ (8003efc <ControlTask+0x23c>)
 8003d1e:	f003 f878 	bl	8006e12 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003d22:	4a77      	ldr	r2, [pc, #476]	@ (8003f00 <ControlTask+0x240>)
 8003d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d26:	2198      	movs	r1, #152	@ 0x98
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	338c      	adds	r3, #140	@ 0x8c
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003d36:	4873      	ldr	r0, [pc, #460]	@ (8003f04 <ControlTask+0x244>)
 8003d38:	f002 f908 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003d42:	4a6f      	ldr	r2, [pc, #444]	@ (8003f00 <ControlTask+0x240>)
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	2198      	movs	r1, #152	@ 0x98
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3308      	adds	r3, #8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	496a      	ldr	r1, [pc, #424]	@ (8003f00 <ControlTask+0x240>)
 8003d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d58:	2098      	movs	r0, #152	@ 0x98
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	440b      	add	r3, r1
 8003d60:	338c      	adds	r3, #140	@ 0x8c
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fd f968 	bl	8001040 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003d70:	4864      	ldr	r0, [pc, #400]	@ (8003f04 <ControlTask+0x244>)
 8003d72:	f002 f8eb 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d014      	beq.n	8003da6 <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003d7c:	4a60      	ldr	r2, [pc, #384]	@ (8003f00 <ControlTask+0x240>)
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	2198      	movs	r1, #152	@ 0x98
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3308      	adds	r3, #8
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd f8da 	bl	8000f48 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 8003d94:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <ControlTask+0x240>)
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	2198      	movs	r1, #152	@ 0x98
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	330c      	adds	r3, #12
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	3301      	adds	r3, #1
 8003daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	ddb3      	ble.n	8003d1a <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 8003db2:	4b53      	ldr	r3, [pc, #332]	@ (8003f00 <ControlTask+0x240>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e78e      	b.n	8003cd8 <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dbe:	e00e      	b.n	8003dde <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	2298      	movs	r2, #152	@ 0x98
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	3308      	adds	r3, #8
 8003dca:	4a4d      	ldr	r2, [pc, #308]	@ (8003f00 <ControlTask+0x240>)
 8003dcc:	4413      	add	r3, r2
 8003dce:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8003f08 <ControlTask+0x248>
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fa58 	bl	8001288 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	3301      	adds	r3, #1
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	dded      	ble.n	8003dc0 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8003de4:	4846      	ldr	r0, [pc, #280]	@ (8003f00 <ControlTask+0x240>)
 8003de6:	f7fe febb 	bl	8002b60 <robot_state_update>
				// 2. 로봇의 task space PID값 설정
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 8003dea:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <ControlTask+0x24c>)
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <ControlTask+0x250>)
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4b48      	ldr	r3, [pc, #288]	@ (8003f14 <ControlTask+0x254>)
 8003df4:	4a48      	ldr	r2, [pc, #288]	@ (8003f18 <ControlTask+0x258>)
 8003df6:	4949      	ldr	r1, [pc, #292]	@ (8003f1c <ControlTask+0x25c>)
 8003df8:	4841      	ldr	r0, [pc, #260]	@ (8003f00 <ControlTask+0x240>)
 8003dfa:	f7ff f8a9 	bl	8002f50 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 8003dfe:	4b48      	ldr	r3, [pc, #288]	@ (8003f20 <ControlTask+0x260>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	ed93 8a00 	vldr	s16, [r3]
 8003e06:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8003f24 <ControlTask+0x264>
 8003e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e0e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003e12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e16:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <ControlTask+0x234>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8003f28 <ControlTask+0x268>
 8003e2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	f00d f851 	bl	8010ed8 <sinf>
 8003e36:	eef0 7a40 	vmov.f32	s15, s0
 8003e3a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003f2c <ControlTask+0x26c>
 8003e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <ControlTask+0x270>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e4a:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 8003e4e:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <ControlTask+0x270>)
 8003e50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e54:	482a      	ldr	r0, [pc, #168]	@ (8003f00 <ControlTask+0x240>)
 8003e56:	f7ff f8d1 	bl	8002ffc <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e5e:	e03c      	b.n	8003eda <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	2298      	movs	r2, #152	@ 0x98
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	3308      	adds	r3, #8
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <ControlTask+0x240>)
 8003e6c:	1899      	adds	r1, r3, r2
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <ControlTask+0x240>)
 8003e70:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	4a20      	ldr	r2, [pc, #128]	@ (8003f00 <ControlTask+0x240>)
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e82:	3374      	adds	r3, #116	@ 0x74
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	4608      	mov	r0, r1
 8003e96:	f7fd fa9b 	bl	80013d0 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003e9a:	481a      	ldr	r0, [pc, #104]	@ (8003f04 <ControlTask+0x244>)
 8003e9c:	f002 f856 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <ControlTask+0x214>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <ControlTask+0x240>)
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	2198      	movs	r1, #152	@ 0x98
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4911      	ldr	r1, [pc, #68]	@ (8003f00 <ControlTask+0x240>)
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2098      	movs	r0, #152	@ 0x98
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	338c      	adds	r3, #140	@ 0x8c
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7fd f8b6 	bl	8001040 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	ddbf      	ble.n	8003e60 <ControlTask+0x1a0>
 8003ee0:	e6fa      	b.n	8003cd8 <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <ControlTask+0x240>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f47f aef6 	bne.w	8003cd8 <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003eec:	2300      	movs	r3, #0
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef0:	e1ed      	b.n	80042ce <ControlTask+0x60e>
 8003ef2:	bf00      	nop
 8003ef4:	240003c4 	.word	0x240003c4
 8003ef8:	240003c8 	.word	0x240003c8
 8003efc:	58020400 	.word	0x58020400
 8003f00:	2400040c 	.word	0x2400040c
 8003f04:	24000288 	.word	0x24000288
 8003f08:	428c0000 	.word	0x428c0000
 8003f0c:	24000048 	.word	0x24000048
 8003f10:	24000400 	.word	0x24000400
 8003f14:	24000030 	.word	0x24000030
 8003f18:	2400003c 	.word	0x2400003c
 8003f1c:	24000024 	.word	0x24000024
 8003f20:	240003f0 	.word	0x240003f0
 8003f24:	40490fd8 	.word	0x40490fd8
 8003f28:	447a0000 	.word	0x447a0000
 8003f2c:	3e4ccccd 	.word	0x3e4ccccd
 8003f30:	240003f8 	.word	0x240003f8
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003f34:	2180      	movs	r1, #128	@ 0x80
 8003f36:	48bf      	ldr	r0, [pc, #764]	@ (8004234 <ControlTask+0x574>)
 8003f38:	f002 ff6b 	bl	8006e12 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8003f3c:	4bbe      	ldr	r3, [pc, #760]	@ (8004238 <ControlTask+0x578>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8003f42:	4bbe      	ldr	r3, [pc, #760]	@ (800423c <ControlTask+0x57c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003f48:	48bd      	ldr	r0, [pc, #756]	@ (8004240 <ControlTask+0x580>)
 8003f4a:	f001 ffff 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8003f54:	4abb      	ldr	r2, [pc, #748]	@ (8004244 <ControlTask+0x584>)
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	2198      	movs	r1, #152	@ 0x98
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3308      	adds	r3, #8
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc ff5a 	bl	8000e20 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8003f6c:	bf00      	nop
 8003f6e:	4ab5      	ldr	r2, [pc, #724]	@ (8004244 <ControlTask+0x584>)
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2198      	movs	r1, #152	@ 0x98
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f107 010c 	add.w	r1, r7, #12
 8003f82:	2200      	movs	r2, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f007 ff0d 	bl	800bda4 <xQueueReceive>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d0ee      	beq.n	8003f6e <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003f90:	48ab      	ldr	r0, [pc, #684]	@ (8004240 <ControlTask+0x580>)
 8003f92:	f001 ffdb 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d014      	beq.n	8003fc6 <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8003f9c:	4aa9      	ldr	r2, [pc, #676]	@ (8004244 <ControlTask+0x584>)
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	2198      	movs	r1, #152	@ 0x98
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3308      	adds	r3, #8
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc ff80 	bl	8000eb4 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8003fb4:	4aa3      	ldr	r2, [pc, #652]	@ (8004244 <ControlTask+0x584>)
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	2198      	movs	r1, #152	@ 0x98
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003fc6:	4a9f      	ldr	r2, [pc, #636]	@ (8004244 <ControlTask+0x584>)
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	2198      	movs	r1, #152	@ 0x98
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	338c      	adds	r3, #140	@ 0x8c
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 8003fda:	4a9a      	ldr	r2, [pc, #616]	@ (8004244 <ControlTask+0x584>)
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	2198      	movs	r1, #152	@ 0x98
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3390      	adds	r3, #144	@ 0x90
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 8003fee:	4a95      	ldr	r2, [pc, #596]	@ (8004244 <ControlTask+0x584>)
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	2198      	movs	r1, #152	@ 0x98
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004004:	4a8f      	ldr	r2, [pc, #572]	@ (8004244 <ControlTask+0x584>)
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	2198      	movs	r1, #152	@ 0x98
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	332c      	adds	r3, #44	@ 0x2c
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004018:	4a8a      	ldr	r2, [pc, #552]	@ (8004244 <ControlTask+0x584>)
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2198      	movs	r1, #152	@ 0x98
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	332c      	adds	r3, #44	@ 0x2c
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4986      	ldr	r1, [pc, #536]	@ (8004244 <ControlTask+0x584>)
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	2098      	movs	r0, #152	@ 0x98
 800402e:	fb00 f303 	mul.w	r3, r0, r3
 8004032:	440b      	add	r3, r1
 8004034:	3330      	adds	r3, #48	@ 0x30
 8004036:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004038:	4a82      	ldr	r2, [pc, #520]	@ (8004244 <ControlTask+0x584>)
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	2198      	movs	r1, #152	@ 0x98
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3334      	adds	r3, #52	@ 0x34
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 800404c:	4a7d      	ldr	r2, [pc, #500]	@ (8004244 <ControlTask+0x584>)
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	2198      	movs	r1, #152	@ 0x98
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3334      	adds	r3, #52	@ 0x34
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4979      	ldr	r1, [pc, #484]	@ (8004244 <ControlTask+0x584>)
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	2098      	movs	r0, #152	@ 0x98
 8004062:	fb00 f303 	mul.w	r3, r0, r3
 8004066:	440b      	add	r3, r1
 8004068:	3338      	adds	r3, #56	@ 0x38
 800406a:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 800406c:	4a76      	ldr	r2, [pc, #472]	@ (8004248 <ControlTask+0x588>)
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4973      	ldr	r1, [pc, #460]	@ (8004244 <ControlTask+0x584>)
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2098      	movs	r0, #152	@ 0x98
 800407c:	fb00 f303 	mul.w	r3, r0, r3
 8004080:	440b      	add	r3, r1
 8004082:	3324      	adds	r3, #36	@ 0x24
 8004084:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 8004086:	4a71      	ldr	r2, [pc, #452]	@ (800424c <ControlTask+0x58c>)
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	496c      	ldr	r1, [pc, #432]	@ (8004244 <ControlTask+0x584>)
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	2098      	movs	r0, #152	@ 0x98
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	440b      	add	r3, r1
 800409c:	3328      	adds	r3, #40	@ 0x28
 800409e:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 80040a0:	4a68      	ldr	r2, [pc, #416]	@ (8004244 <ControlTask+0x584>)
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2198      	movs	r1, #152	@ 0x98
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3324      	adds	r3, #36	@ 0x24
 80040ae:	ed93 7a00 	vldr	s14, [r3]
 80040b2:	4a64      	ldr	r2, [pc, #400]	@ (8004244 <ControlTask+0x584>)
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2198      	movs	r1, #152	@ 0x98
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	332c      	adds	r3, #44	@ 0x2c
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004244 <ControlTask+0x584>)
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2198      	movs	r1, #152	@ 0x98
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3344      	adds	r3, #68	@ 0x44
 80040d6:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 80040da:	4a5a      	ldr	r2, [pc, #360]	@ (8004244 <ControlTask+0x584>)
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	2198      	movs	r1, #152	@ 0x98
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3344      	adds	r3, #68	@ 0x44
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4956      	ldr	r1, [pc, #344]	@ (8004244 <ControlTask+0x584>)
 80040ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ee:	2098      	movs	r0, #152	@ 0x98
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	440b      	add	r3, r1
 80040f6:	3348      	adds	r3, #72	@ 0x48
 80040f8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 80040fa:	4a52      	ldr	r2, [pc, #328]	@ (8004244 <ControlTask+0x584>)
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	2198      	movs	r1, #152	@ 0x98
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	334c      	adds	r3, #76	@ 0x4c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 800410e:	4a4d      	ldr	r2, [pc, #308]	@ (8004244 <ControlTask+0x584>)
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	2198      	movs	r1, #152	@ 0x98
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3350      	adds	r3, #80	@ 0x50
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = strawberry_robot.motors[i].pos_I_term_old;
 8004122:	4a48      	ldr	r2, [pc, #288]	@ (8004244 <ControlTask+0x584>)
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	2198      	movs	r1, #152	@ 0x98
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3354      	adds	r3, #84	@ 0x54
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4944      	ldr	r1, [pc, #272]	@ (8004244 <ControlTask+0x584>)
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	2098      	movs	r0, #152	@ 0x98
 8004138:	fb00 f303 	mul.w	r3, r0, r3
 800413c:	440b      	add	r3, r1
 800413e:	3350      	adds	r3, #80	@ 0x50
 8004140:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004142:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <ControlTask+0x584>)
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	2198      	movs	r1, #152	@ 0x98
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3358      	adds	r3, #88	@ 0x58
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = strawberry_robot.motors[i].pos_D_term_old;
 8004156:	4a3b      	ldr	r2, [pc, #236]	@ (8004244 <ControlTask+0x584>)
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	2198      	movs	r1, #152	@ 0x98
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	335c      	adds	r3, #92	@ 0x5c
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4937      	ldr	r1, [pc, #220]	@ (8004244 <ControlTask+0x584>)
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	2098      	movs	r0, #152	@ 0x98
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	440b      	add	r3, r1
 8004172:	3358      	adds	r3, #88	@ 0x58
 8004174:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 8004176:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <ControlTask+0x584>)
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	2198      	movs	r1, #152	@ 0x98
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3328      	adds	r3, #40	@ 0x28
 8004184:	ed93 7a00 	vldr	s14, [r3]
 8004188:	4a2e      	ldr	r2, [pc, #184]	@ (8004244 <ControlTask+0x584>)
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	2198      	movs	r1, #152	@ 0x98
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3334      	adds	r3, #52	@ 0x34
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419e:	4a29      	ldr	r2, [pc, #164]	@ (8004244 <ControlTask+0x584>)
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2198      	movs	r1, #152	@ 0x98
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3360      	adds	r3, #96	@ 0x60
 80041ac:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <ControlTask+0x584>)
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	2198      	movs	r1, #152	@ 0x98
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3360      	adds	r3, #96	@ 0x60
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4920      	ldr	r1, [pc, #128]	@ (8004244 <ControlTask+0x584>)
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2098      	movs	r0, #152	@ 0x98
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	440b      	add	r3, r1
 80041cc:	3364      	adds	r3, #100	@ 0x64
 80041ce:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <ControlTask+0x584>)
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	2198      	movs	r1, #152	@ 0x98
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3368      	adds	r3, #104	@ 0x68
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 80041e4:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <ControlTask+0x584>)
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	2198      	movs	r1, #152	@ 0x98
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	336c      	adds	r3, #108	@ 0x6c
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 80041f8:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <ControlTask+0x584>)
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	2198      	movs	r1, #152	@ 0x98
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	336c      	adds	r3, #108	@ 0x6c
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	490e      	ldr	r1, [pc, #56]	@ (8004244 <ControlTask+0x584>)
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2098      	movs	r0, #152	@ 0x98
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	440b      	add	r3, r1
 8004214:	3370      	adds	r3, #112	@ 0x70
 8004216:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <ControlTask+0x584>)
 800421a:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <ControlTask+0x584>)
 800422c:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004230:	e00e      	b.n	8004250 <ControlTask+0x590>
 8004232:	bf00      	nop
 8004234:	58020400 	.word	0x58020400
 8004238:	240003c4 	.word	0x240003c4
 800423c:	240003c8 	.word	0x240003c8
 8004240:	24000288 	.word	0x24000288
 8004244:	2400040c 	.word	0x2400040c
 8004248:	240003d0 	.word	0x240003d0
 800424c:	240003dc 	.word	0x240003dc
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 800425c:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <ControlTask+0x78c>)
 800425e:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 800426e:	4b77      	ldr	r3, [pc, #476]	@ (800444c <ControlTask+0x78c>)
 8004270:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 8004280:	4b72      	ldr	r3, [pc, #456]	@ (800444c <ControlTask+0x78c>)
 8004282:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 8004292:	4b6e      	ldr	r3, [pc, #440]	@ (800444c <ControlTask+0x78c>)
 8004294:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80042a4:	4b69      	ldr	r3, [pc, #420]	@ (800444c <ControlTask+0x78c>)
 80042a6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80042b6:	4b65      	ldr	r3, [pc, #404]	@ (800444c <ControlTask+0x78c>)
 80042b8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	3301      	adds	r3, #1
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	f77f ae2f 	ble.w	8003f34 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	e060      	b.n	800439e <ControlTask+0x6de>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 80042dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004450 <ControlTask+0x790>)
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	4b59      	ldr	r3, [pc, #356]	@ (800444c <ControlTask+0x78c>)
 80042e8:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 80042f6:	4b55      	ldr	r3, [pc, #340]	@ (800444c <ControlTask+0x78c>)
 80042f8:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <ControlTask+0x78c>)
 800430a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 800431a:	4b4c      	ldr	r3, [pc, #304]	@ (800444c <ControlTask+0x78c>)
 800431c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 800432c:	4b47      	ldr	r3, [pc, #284]	@ (800444c <ControlTask+0x78c>)
 800432e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 800433e:	4b43      	ldr	r3, [pc, #268]	@ (800444c <ControlTask+0x78c>)
 8004340:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004350:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <ControlTask+0x78c>)
 8004352:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004362:	4b3a      	ldr	r3, [pc, #232]	@ (800444c <ControlTask+0x78c>)
 8004364:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 8004374:	4b35      	ldr	r3, [pc, #212]	@ (800444c <ControlTask+0x78c>)
 8004376:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 8004386:	4b31      	ldr	r3, [pc, #196]	@ (800444c <ControlTask+0x78c>)
 8004388:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	3301      	adds	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	dd9b      	ble.n	80042dc <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80043a4:	2300      	movs	r3, #0
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	e00b      	b.n	80043c2 <ControlTask+0x702>
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <ControlTask+0x78c>)
 80043ac:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	3301      	adds	r3, #1
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	ddf0      	ble.n	80043aa <ControlTask+0x6ea>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <ControlTask+0x78c>)
 80043ca:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043d2:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <ControlTask+0x78c>)
 80043d6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043da:	3310      	adds	r3, #16
 80043dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043e0:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 80043e2:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <ControlTask+0x78c>)
 80043e4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043e8:	3320      	adds	r3, #32
 80043ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043ee:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e00b      	b.n	800440e <ControlTask+0x74e>
 80043f6:	4b15      	ldr	r3, [pc, #84]	@ (800444c <ControlTask+0x78c>)
 80043f8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b08      	cmp	r3, #8
 8004412:	ddf0      	ble.n	80043f6 <ControlTask+0x736>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004414:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <ControlTask+0x78c>)
 8004416:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800441a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800441e:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004420:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <ControlTask+0x78c>)
 8004422:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004426:	3310      	adds	r3, #16
 8004428:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800442c:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <ControlTask+0x78c>)
 8004430:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004434:	3320      	adds	r3, #32
 8004436:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800443a:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <ControlTask+0x78c>)
 800443e:	f7fe fb8f 	bl	8002b60 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004442:	4b02      	ldr	r3, [pc, #8]	@ (800444c <ControlTask+0x78c>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004448:	e446      	b.n	8003cd8 <ControlTask+0x18>
 800444a:	bf00      	nop
 800444c:	2400040c 	.word	0x2400040c
 8004450:	240003f8 	.word	0x240003f8

08004454 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	ed2d 8b10 	vpush	{d8-d15}
 800445a:	b0c7      	sub	sp, #284	@ 0x11c
 800445c:	af34      	add	r7, sp, #208	@ 0xd0
 800445e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8004460:	f008 fa4a 	bl	800c8f8 <xTaskGetTickCount>
 8004464:	4603      	mov	r3, r0
 8004466:	643b      	str	r3, [r7, #64]	@ 0x40

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004468:	2301      	movs	r3, #1
 800446a:	647b      	str	r3, [r7, #68]	@ 0x44

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 800446c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004470:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004472:	4618      	mov	r0, r3
 8004474:	f008 f8a4 	bl	800c5c0 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8004478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447a:	005a      	lsls	r2, r3, #1
 800447c:	4b98      	ldr	r3, [pc, #608]	@ (80046e0 <DataLoggingTask+0x28c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4413      	add	r3, r2
 8004482:	4a97      	ldr	r2, [pc, #604]	@ (80046e0 <DataLoggingTask+0x28c>)
 8004484:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 8004486:	4b97      	ldr	r3, [pc, #604]	@ (80046e4 <DataLoggingTask+0x290>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	f040 8134 	bne.w	80046f8 <DataLoggingTask+0x2a4>
			{
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 8004490:	4b95      	ldr	r3, [pc, #596]	@ (80046e8 <DataLoggingTask+0x294>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800449c:	eddf 6a93 	vldr	s13, [pc, #588]	@ 80046ec <DataLoggingTask+0x298>
 80044a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80044a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044a8:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
						(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 80044ac:	4b8e      	ldr	r3, [pc, #568]	@ (80046e8 <DataLoggingTask+0x294>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b8f      	ldr	r3, [pc, #572]	@ (80046f0 <DataLoggingTask+0x29c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044be:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80046ec <DataLoggingTask+0x298>
 80044c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80044c6:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
 80044ca:	4b86      	ldr	r3, [pc, #536]	@ (80046e4 <DataLoggingTask+0x290>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044d0:	4a84      	ldr	r2, [pc, #528]	@ (80046e4 <DataLoggingTask+0x290>)
 80044d2:	6892      	ldr	r2, [r2, #8]
 80044d4:	4983      	ldr	r1, [pc, #524]	@ (80046e4 <DataLoggingTask+0x290>)
 80044d6:	68c9      	ldr	r1, [r1, #12]
						strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 80044d8:	4882      	ldr	r0, [pc, #520]	@ (80046e4 <DataLoggingTask+0x290>)
 80044da:	edd0 7a23 	vldr	s15, [r0, #140]	@ 0x8c
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80044de:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80044e2:	4880      	ldr	r0, [pc, #512]	@ (80046e4 <DataLoggingTask+0x290>)
 80044e4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
 80044e8:	4c7e      	ldr	r4, [pc, #504]	@ (80046e4 <DataLoggingTask+0x290>)
 80044ea:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
						strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 80044ee:	4d7d      	ldr	r5, [pc, #500]	@ (80046e4 <DataLoggingTask+0x290>)
 80044f0:	edd5 7a49 	vldr	s15, [r5, #292]	@ 0x124
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80044f4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80044f8:	4d7a      	ldr	r5, [pc, #488]	@ (80046e4 <DataLoggingTask+0x290>)
 80044fa:	f8d5 5138 	ldr.w	r5, [r5, #312]	@ 0x138
 80044fe:	4e79      	ldr	r6, [pc, #484]	@ (80046e4 <DataLoggingTask+0x290>)
 8004500:	f8d6 613c 	ldr.w	r6, [r6, #316]	@ 0x13c
						strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8004504:	4b77      	ldr	r3, [pc, #476]	@ (80046e4 <DataLoggingTask+0x290>)
 8004506:	edd3 7a6f 	vldr	s15, [r3, #444]	@ 0x1bc
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800450a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 800450e:	4b75      	ldr	r3, [pc, #468]	@ (80046e4 <DataLoggingTask+0x290>)
 8004510:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004514:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004518:	eeb7 bae7 	vcvt.f64.f32	d11, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 800451c:	4b71      	ldr	r3, [pc, #452]	@ (80046e4 <DataLoggingTask+0x290>)
 800451e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004522:	f103 0c04 	add.w	ip, r3, #4
 8004526:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800452a:	eeb7 cae7 	vcvt.f64.f32	d12, s15
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 800452e:	4b6d      	ldr	r3, [pc, #436]	@ (80046e4 <DataLoggingTask+0x290>)
 8004530:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004534:	f103 0c08 	add.w	ip, r3, #8
 8004538:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800453c:	eeb7 dae7 	vcvt.f64.f32	d13, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004540:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <DataLoggingTask+0x290>)
 8004542:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004546:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800454a:	eeb7 eae7 	vcvt.f64.f32	d14, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 800454e:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <DataLoggingTask+0x290>)
 8004550:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004554:	f103 0c04 	add.w	ip, r3, #4
 8004558:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800455c:	eeb7 fae7 	vcvt.f64.f32	d15, s15
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004560:	4b60      	ldr	r3, [pc, #384]	@ (80046e4 <DataLoggingTask+0x290>)
 8004562:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004566:	f103 0c08 	add.w	ip, r3, #8
 800456a:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800456e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004572:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004576:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <DataLoggingTask+0x290>)
 8004578:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 800457c:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004580:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004584:	ed87 5b08 	vstr	d5, [r7, #32]
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004588:	4b56      	ldr	r3, [pc, #344]	@ (80046e4 <DataLoggingTask+0x290>)
 800458a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 800458e:	f103 0c04 	add.w	ip, r3, #4
 8004592:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 8004596:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800459a:	ed87 4b06 	vstr	d4, [r7, #24]
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 800459e:	4b51      	ldr	r3, [pc, #324]	@ (80046e4 <DataLoggingTask+0x290>)
 80045a0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80045a4:	f103 0c08 	add.w	ip, r3, #8
 80045a8:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80045ac:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
 80045b0:	ed87 3b04 	vstr	d3, [r7, #16]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <DataLoggingTask+0x290>)
 80045b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045ba:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80045be:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 80045c2:	ed87 2b02 	vstr	d2, [r7, #8]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <DataLoggingTask+0x290>)
 80045c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045cc:	f103 0c04 	add.w	ip, r3, #4
 80045d0:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80045d4:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
 80045d8:	ed87 1b00 	vstr	d1, [r7]
						strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2],
 80045dc:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <DataLoggingTask+0x290>)
 80045de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045e2:	f103 0c08 	add.w	ip, r3, #8
 80045e6:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80045ea:	eeb7 1ae7 	vcvt.f64.f32	d1, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <DataLoggingTask+0x290>)
 80045f0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80045f4:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 80045f8:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 80045fc:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <DataLoggingTask+0x290>)
 80045fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004602:	f103 0c04 	add.w	ip, r3, #4
 8004606:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800460a:	eeb7 3ae7 	vcvt.f64.f32	d3, s15
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2],
 800460e:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <DataLoggingTask+0x290>)
 8004610:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004614:	f103 0c08 	add.w	ip, r3, #8
 8004618:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800461c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <DataLoggingTask+0x290>)
 8004622:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004626:	edd3 7a00 	vldr	s15, [r3]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800462a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 800462e:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <DataLoggingTask+0x290>)
 8004630:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004634:	f103 0c04 	add.w	ip, r3, #4
 8004638:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800463c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 8004640:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <DataLoggingTask+0x290>)
 8004642:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004646:	f103 0c08 	add.w	ip, r3, #8
 800464a:	eddc 7a00 	vldr	s15, [ip]
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800464e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004652:	ed8d 7b32 	vstr	d7, [sp, #200]	@ 0xc8
 8004656:	ed8d 6b30 	vstr	d6, [sp, #192]	@ 0xc0
 800465a:	ed8d 5b2e 	vstr	d5, [sp, #184]	@ 0xb8
 800465e:	ed8d 4b2c 	vstr	d4, [sp, #176]	@ 0xb0
 8004662:	ed8d 3b2a 	vstr	d3, [sp, #168]	@ 0xa8
 8004666:	ed8d 2b28 	vstr	d2, [sp, #160]	@ 0xa0
 800466a:	ed8d 1b26 	vstr	d1, [sp, #152]	@ 0x98
 800466e:	ed97 1b00 	vldr	d1, [r7]
 8004672:	ed8d 1b24 	vstr	d1, [sp, #144]	@ 0x90
 8004676:	ed97 2b02 	vldr	d2, [r7, #8]
 800467a:	ed8d 2b22 	vstr	d2, [sp, #136]	@ 0x88
 800467e:	ed97 3b04 	vldr	d3, [r7, #16]
 8004682:	ed8d 3b20 	vstr	d3, [sp, #128]	@ 0x80
 8004686:	ed97 4b06 	vldr	d4, [r7, #24]
 800468a:	ed8d 4b1e 	vstr	d4, [sp, #120]	@ 0x78
 800468e:	ed97 5b08 	vldr	d5, [r7, #32]
 8004692:	ed8d 5b1c 	vstr	d5, [sp, #112]	@ 0x70
 8004696:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800469a:	ed8d 6b1a 	vstr	d6, [sp, #104]	@ 0x68
 800469e:	ed8d fb18 	vstr	d15, [sp, #96]	@ 0x60
 80046a2:	ed8d eb16 	vstr	d14, [sp, #88]	@ 0x58
 80046a6:	ed8d db14 	vstr	d13, [sp, #80]	@ 0x50
 80046aa:	ed8d cb12 	vstr	d12, [sp, #72]	@ 0x48
 80046ae:	ed8d bb10 	vstr	d11, [sp, #64]	@ 0x40
 80046b2:	ed8d ab0e 	vstr	d10, [sp, #56]	@ 0x38
 80046b6:	960d      	str	r6, [sp, #52]	@ 0x34
 80046b8:	950c      	str	r5, [sp, #48]	@ 0x30
 80046ba:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 80046be:	9409      	str	r4, [sp, #36]	@ 0x24
 80046c0:	9008      	str	r0, [sp, #32]
 80046c2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80046c6:	9104      	str	r1, [sp, #16]
 80046c8:	9203      	str	r2, [sp, #12]
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	ed8d 0b00 	vstr	d0, [sp]
 80046d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80046d6:	4807      	ldr	r0, [pc, #28]	@ (80046f4 <DataLoggingTask+0x2a0>)
 80046d8:	f00a fbd2 	bl	800ee80 <iprintf>
 80046dc:	e6c6      	b.n	800446c <DataLoggingTask+0x18>
 80046de:	bf00      	nop
 80046e0:	240003cc 	.word	0x240003cc
 80046e4:	2400040c 	.word	0x2400040c
 80046e8:	240003c4 	.word	0x240003c4
 80046ec:	447a0000 	.word	0x447a0000
 80046f0:	240003c8 	.word	0x240003c8
 80046f4:	0801120c 	.word	0x0801120c
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
				(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 80046f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004874 <DataLoggingTask+0x420>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004704:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8004878 <DataLoggingTask+0x424>
 8004708:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800470c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
				(float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode,
 8004710:	4b58      	ldr	r3, [pc, #352]	@ (8004874 <DataLoggingTask+0x420>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b59      	ldr	r3, [pc, #356]	@ (800487c <DataLoggingTask+0x428>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004722:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8004878 <DataLoggingTask+0x424>
 8004726:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%8.3f, %8.3f, %8d, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8d, %8d, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f, %8.3f]\r\n",
 800472a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800472e:	4b54      	ldr	r3, [pc, #336]	@ (8004880 <DataLoggingTask+0x42c>)
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <DataLoggingTask+0x42c>)
 8004734:	6898      	ldr	r0, [r3, #8]
 8004736:	4b52      	ldr	r3, [pc, #328]	@ (8004880 <DataLoggingTask+0x42c>)
 8004738:	68dc      	ldr	r4, [r3, #12]
 800473a:	4b51      	ldr	r3, [pc, #324]	@ (8004880 <DataLoggingTask+0x42c>)
 800473c:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 8004740:	4b4f      	ldr	r3, [pc, #316]	@ (8004880 <DataLoggingTask+0x42c>)
 8004742:	f8d3 60a4 	ldr.w	r6, [r3, #164]	@ 0xa4
 8004746:	4b4e      	ldr	r3, [pc, #312]	@ (8004880 <DataLoggingTask+0x42c>)
 8004748:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800474c:	633b      	str	r3, [r7, #48]	@ 0x30
 800474e:	4b4c      	ldr	r3, [pc, #304]	@ (8004880 <DataLoggingTask+0x42c>)
 8004750:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8004754:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	e9cd 2332 	strd	r2, r3, [sp, #200]	@ 0xc8
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9cd 232e 	strd	r2, r3, [sp, #184]	@ 0xb8
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9cd 2328 	strd	r2, r3, [sp, #160]	@ 0xa0
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9cd 2326 	strd	r2, r3, [sp, #152]	@ 0x98
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e9cd 2322 	strd	r2, r3, [sp, #136]	@ 0x88
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800483a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800483c:	920d      	str	r2, [sp, #52]	@ 0x34
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	930c      	str	r3, [sp, #48]	@ 0x30
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800484e:	9609      	str	r6, [sp, #36]	@ 0x24
 8004850:	9508      	str	r5, [sp, #32]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800485e:	9404      	str	r4, [sp, #16]
 8004860:	9003      	str	r0, [sp, #12]
 8004862:	9102      	str	r1, [sp, #8]
 8004864:	ed8d 7b00 	vstr	d7, [sp]
 8004868:	ec53 2b15 	vmov	r2, r3, d5
 800486c:	4805      	ldr	r0, [pc, #20]	@ (8004884 <DataLoggingTask+0x430>)
 800486e:	f00a fb07 	bl	800ee80 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004872:	e5fb      	b.n	800446c <DataLoggingTask+0x18>
 8004874:	240003c4 	.word	0x240003c4
 8004878:	447a0000 	.word	0x447a0000
 800487c:	240003c8 	.word	0x240003c8
 8004880:	2400040c 	.word	0x2400040c
 8004884:	0801120c 	.word	0x0801120c

08004888 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800488e:	463b      	mov	r3, r7
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800489a:	f000 feab 	bl	80055f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800489e:	2301      	movs	r3, #1
 80048a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80048aa:	231f      	movs	r3, #31
 80048ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80048ae:	2387      	movs	r3, #135	@ 0x87
 80048b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80048b6:	2300      	movs	r3, #0
 80048b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80048be:	2301      	movs	r3, #1
 80048c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80048ca:	463b      	mov	r3, r7
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fec9 	bl	8005664 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80048d2:	2004      	movs	r0, #4
 80048d4:	f000 fea6 	bl	8005624 <HAL_MPU_Enable>

}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80048f2:	f000 fd4f 	bl	8005394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40001400 	.word	0x40001400

08004904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 800490a:	4b52      	ldr	r3, [pc, #328]	@ (8004a54 <Error_Handler+0x150>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d148      	bne.n	80049a4 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	e03f      	b.n	8004998 <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	484f      	ldr	r0, [pc, #316]	@ (8004a58 <Error_Handler+0x154>)
 800491c:	f002 fa79 	bl	8006e12 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8004920:	4a4c      	ldr	r2, [pc, #304]	@ (8004a54 <Error_Handler+0x150>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2198      	movs	r1, #152	@ 0x98
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	338c      	adds	r3, #140	@ 0x8c
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004934:	4849      	ldr	r0, [pc, #292]	@ (8004a5c <Error_Handler+0x158>)
 8004936:	f001 fb09 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004940:	4a44      	ldr	r2, [pc, #272]	@ (8004a54 <Error_Handler+0x150>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2198      	movs	r1, #152	@ 0x98
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3308      	adds	r3, #8
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	4940      	ldr	r1, [pc, #256]	@ (8004a54 <Error_Handler+0x150>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2098      	movs	r0, #152	@ 0x98
 8004958:	fb00 f303 	mul.w	r3, r0, r3
 800495c:	440b      	add	r3, r1
 800495e:	338c      	adds	r3, #140	@ 0x8c
 8004960:	edd3 7a00 	vldr	s15, [r3]
 8004964:	eeb0 0a67 	vmov.f32	s0, s15
 8004968:	4610      	mov	r0, r2
 800496a:	f7fc fb69 	bl	8001040 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800496e:	483b      	ldr	r0, [pc, #236]	@ (8004a5c <Error_Handler+0x158>)
 8004970:	f001 faec 	bl	8005f4c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 800497a:	4a36      	ldr	r2, [pc, #216]	@ (8004a54 <Error_Handler+0x150>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2198      	movs	r1, #152	@ 0x98
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3308      	adds	r3, #8
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	4618      	mov	r0, r3
 800498e:	f7fc fadb 	bl	8000f48 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3301      	adds	r3, #1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	ddbc      	ble.n	8004918 <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 800499e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <Error_Handler+0x150>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 80049a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a60 <Error_Handler+0x15c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d82f      	bhi.n	8004a0e <Error_Handler+0x10a>
 80049ae:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <Error_Handler+0xb0>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049c9 	.word	0x080049c9
 80049b8:	080049d7 	.word	0x080049d7
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049f3 	.word	0x080049f3
 80049c4:	08004a01 	.word	0x08004a01
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <Error_Handler+0x15c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4825      	ldr	r0, [pc, #148]	@ (8004a64 <Error_Handler+0x160>)
 80049d0:	f00a fa56 	bl	800ee80 <iprintf>
 80049d4:	e01e      	b.n	8004a14 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 80049d6:	4b22      	ldr	r3, [pc, #136]	@ (8004a60 <Error_Handler+0x15c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4619      	mov	r1, r3
 80049dc:	4822      	ldr	r0, [pc, #136]	@ (8004a68 <Error_Handler+0x164>)
 80049de:	f00a fa4f 	bl	800ee80 <iprintf>
 80049e2:	e017      	b.n	8004a14 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 80049e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <Error_Handler+0x15c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	4820      	ldr	r0, [pc, #128]	@ (8004a6c <Error_Handler+0x168>)
 80049ec:	f00a fa48 	bl	800ee80 <iprintf>
 80049f0:	e010      	b.n	8004a14 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 80049f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <Error_Handler+0x15c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	481d      	ldr	r0, [pc, #116]	@ (8004a70 <Error_Handler+0x16c>)
 80049fa:	f00a fa41 	bl	800ee80 <iprintf>
 80049fe:	e009      	b.n	8004a14 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8004a00:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <Error_Handler+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	481b      	ldr	r0, [pc, #108]	@ (8004a74 <Error_Handler+0x170>)
 8004a08:	f00a fa3a 	bl	800ee80 <iprintf>
 8004a0c:	e002      	b.n	8004a14 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8004a0e:	481a      	ldr	r0, [pc, #104]	@ (8004a78 <Error_Handler+0x174>)
 8004a10:	f00a fa36 	bl	800ee80 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	e012      	b.n	8004a40 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8004a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a1e:	480e      	ldr	r0, [pc, #56]	@ (8004a58 <Error_Handler+0x154>)
 8004a20:	f002 f9f7 	bl	8006e12 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8004a24:	20c8      	movs	r0, #200	@ 0xc8
 8004a26:	f000 fcd5 	bl	80053d4 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8004a2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a2e:	480a      	ldr	r0, [pc, #40]	@ (8004a58 <Error_Handler+0x154>)
 8004a30:	f002 f9ef 	bl	8006e12 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8004a34:	20c8      	movs	r0, #200	@ 0xc8
 8004a36:	f000 fccd 	bl	80053d4 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <Error_Handler+0x15c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	dbe7      	blt.n	8004a1a <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8004a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a4e:	f000 fcc1 	bl	80053d4 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004a52:	e7df      	b.n	8004a14 <Error_Handler+0x110>
 8004a54:	2400040c 	.word	0x2400040c
 8004a58:	58020400 	.word	0x58020400
 8004a5c:	24000288 	.word	0x24000288
 8004a60:	24000a78 	.word	0x24000a78
 8004a64:	080112d4 	.word	0x080112d4
 8004a68:	080112fc 	.word	0x080112fc
 8004a6c:	08011324 	.word	0x08011324
 8004a70:	08011358 	.word	0x08011358
 8004a74:	0801138c 	.word	0x0801138c
 8004a78:	080113c0 	.word	0x080113c0

08004a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a82:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <HAL_MspInit+0x38>)
 8004a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <HAL_MspInit+0x38>)
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a92:	4b08      	ldr	r3, [pc, #32]	@ (8004ab4 <HAL_MspInit+0x38>)
 8004a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	f06f 0001 	mvn.w	r0, #1
 8004aa8:	f000 fd7c 	bl	80055a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	58024400 	.word	0x58024400

08004ab8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b0ba      	sub	sp, #232	@ 0xe8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	22c0      	movs	r2, #192	@ 0xc0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f00a fa26 	bl	800ef2a <memset>
  if(hfdcan->Instance==FDCAN1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a37      	ldr	r2, [pc, #220]	@ (8004bc0 <HAL_FDCAN_MspInit+0x108>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d166      	bne.n	8004bb6 <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8004af4:	2301      	movs	r3, #1
 8004af6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8004af8:	2364      	movs	r3, #100	@ 0x64
 8004afa:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004afc:	2302      	movs	r3, #2
 8004afe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8004b00:	2314      	movs	r3, #20
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004b04:	2302      	movs	r3, #2
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004b08:	23c0      	movs	r3, #192	@ 0xc0
 8004b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8004b14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b1c:	f107 0310 	add.w	r3, r7, #16
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 f9f3 	bl	8007f0c <HAL_RCCEx_PeriphCLKConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8004b2c:	f7ff feea 	bl	8004904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004b30:	4b24      	ldr	r3, [pc, #144]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b36:	4a23      	ldr	r2, [pc, #140]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004b40:	4b20      	ldr	r3, [pc, #128]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b54:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b56:	f043 0308 	orr.w	r3, r3, #8
 8004b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b5e:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <HAL_FDCAN_MspInit+0x10c>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004b84:	2309      	movs	r3, #9
 8004b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	480d      	ldr	r0, [pc, #52]	@ (8004bc8 <HAL_FDCAN_MspInit+0x110>)
 8004b92:	f001 ff75 	bl	8006a80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8004b96:	2200      	movs	r2, #0
 8004b98:	2105      	movs	r1, #5
 8004b9a:	2013      	movs	r0, #19
 8004b9c:	f000 fd02 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004ba0:	2013      	movs	r0, #19
 8004ba2:	f000 fd19 	bl	80055d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2105      	movs	r1, #5
 8004baa:	2015      	movs	r0, #21
 8004bac:	f000 fcfa 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004bb0:	2015      	movs	r0, #21
 8004bb2:	f000 fd11 	bl	80055d8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004bb6:	bf00      	nop
 8004bb8:	37e8      	adds	r7, #232	@ 0xe8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4000a000 	.word	0x4000a000
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	58020c00 	.word	0x58020c00

08004bcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b0ba      	sub	sp, #232	@ 0xe8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	22c0      	movs	r2, #192	@ 0xc0
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f00a f99c 	bl	800ef2a <memset>
  if(huart->Instance==USART3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a27      	ldr	r2, [pc, #156]	@ (8004c94 <HAL_UART_MspInit+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d146      	bne.n	8004c8a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004bfc:	f04f 0202 	mov.w	r2, #2
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c0e:	f107 0310 	add.w	r3, r7, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 f97a 	bl	8007f0c <HAL_RCCEx_PeriphCLKConfig>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004c1e:	f7ff fe71 	bl	8004904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c22:	4b1d      	ldr	r3, [pc, #116]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c28:	4a1b      	ldr	r2, [pc, #108]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c32:	4b19      	ldr	r3, [pc, #100]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c40:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	4a14      	ldr	r2, [pc, #80]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c50:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <HAL_UART_MspInit+0xcc>)
 8004c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c66:	2302      	movs	r3, #2
 8004c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c78:	2307      	movs	r3, #7
 8004c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4805      	ldr	r0, [pc, #20]	@ (8004c9c <HAL_UART_MspInit+0xd0>)
 8004c86:	f001 fefb 	bl	8006a80 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004c8a:	bf00      	nop
 8004c8c:	37e8      	adds	r7, #232	@ 0xe8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40004800 	.word	0x40004800
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	58020c00 	.word	0x58020c00

08004ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b090      	sub	sp, #64	@ 0x40
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d827      	bhi.n	8004cfe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	2037      	movs	r0, #55	@ 0x37
 8004cb4:	f000 fc76 	bl	80055a4 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004cb8:	2037      	movs	r0, #55	@ 0x37
 8004cba:	f000 fc8d 	bl	80055d8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004cbe:	4a29      	ldr	r2, [pc, #164]	@ (8004d64 <HAL_InitTick+0xc4>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004cc4:	4b28      	ldr	r3, [pc, #160]	@ (8004d68 <HAL_InitTick+0xc8>)
 8004cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cca:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_InitTick+0xc8>)
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cd4:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <HAL_InitTick+0xc8>)
 8004cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ce2:	f107 0210 	add.w	r2, r7, #16
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f003 f8cb 	bl	8007e88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_InitTick+0x6a>
 8004cfc:	e001      	b.n	8004d02 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e02b      	b.n	8004d5a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d02:	f003 f895 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 8004d06:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8004d08:	e004      	b.n	8004d14 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d0a:	f003 f891 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d16:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <HAL_InitTick+0xcc>)
 8004d18:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1c:	0c9b      	lsrs	r3, r3, #18
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004d22:	4b13      	ldr	r3, [pc, #76]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d24:	4a13      	ldr	r2, [pc, #76]	@ (8004d74 <HAL_InitTick+0xd4>)
 8004d26:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004d28:	4b11      	ldr	r3, [pc, #68]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d2e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004d30:	4a0f      	ldr	r2, [pc, #60]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004d36:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004d42:	480b      	ldr	r0, [pc, #44]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d44:	f004 ff0e 	bl	8009b64 <HAL_TIM_Base_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8004d4e:	4808      	ldr	r0, [pc, #32]	@ (8004d70 <HAL_InitTick+0xd0>)
 8004d50:	f004 ff6a 	bl	8009c28 <HAL_TIM_Base_Start_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	e000      	b.n	8004d5a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3740      	adds	r7, #64	@ 0x40
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	24000074 	.word	0x24000074
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	431bde83 	.word	0x431bde83
 8004d70:	24000a7c 	.word	0x24000a7c
 8004d74:	40001400 	.word	0x40001400

08004d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <NMI_Handler+0x4>

08004d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <HardFault_Handler+0x4>

08004d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <MemManage_Handler+0x4>

08004d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <BusFault_Handler+0x4>

08004d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <UsageFault_Handler+0x4>

08004da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004db4:	4802      	ldr	r0, [pc, #8]	@ (8004dc0 <FDCAN1_IT0_IRQHandler+0x10>)
 8004db6:	f001 f955 	bl	8006064 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	24000288 	.word	0x24000288

08004dc4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004dc8:	4802      	ldr	r0, [pc, #8]	@ (8004dd4 <FDCAN1_IT1_IRQHandler+0x10>)
 8004dca:	f001 f94b 	bl	8006064 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	24000288 	.word	0x24000288

08004dd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f000 fa83 	bl	80052e8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <TIM7_IRQHandler+0x10>)
 8004dee:	f004 ff93 	bl	8009d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	24000a7c 	.word	0x24000a7c

08004dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return 1;
 8004e00:	2301      	movs	r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_kill>:

int _kill(int pid, int sig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e16:	f00a f939 	bl	800f08c <__errno>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2216      	movs	r2, #22
 8004e1e:	601a      	str	r2, [r3, #0]
  return -1;
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_exit>:

void _exit (int status)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ffe7 	bl	8004e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e3e:	bf00      	nop
 8004e40:	e7fd      	b.n	8004e3e <_exit+0x12>

08004e42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e00a      	b.n	8004e6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e54:	f3af 8000 	nop.w
 8004e58:	4601      	mov	r1, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	60ba      	str	r2, [r7, #8]
 8004e60:	b2ca      	uxtb	r2, r1
 8004e62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3301      	adds	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dbf0      	blt.n	8004e54 <_read+0x12>
  }

  return len;
 8004e72:	687b      	ldr	r3, [r7, #4]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_close>:
  }
  return len;
}

int _close(int file)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ea4:	605a      	str	r2, [r3, #4]
  return 0;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <_isatty>:

int _isatty(int file)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <_sbrk+0x5c>)
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <_sbrk+0x60>)
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <_sbrk+0x64>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <_sbrk+0x64>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <_sbrk+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f06:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <_sbrk+0x64>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f14:	f00a f8ba 	bl	800f08c <__errno>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e009      	b.n	8004f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	@ (8004f48 <_sbrk+0x64>)
 8004f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	24080000 	.word	0x24080000
 8004f44:	00000400 	.word	0x00000400
 8004f48:	24000ac8 	.word	0x24000ac8
 8004f4c:	24005610 	.word	0x24005610

08004f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f54:	4b43      	ldr	r3, [pc, #268]	@ (8005064 <SystemInit+0x114>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	4a42      	ldr	r2, [pc, #264]	@ (8005064 <SystemInit+0x114>)
 8004f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f64:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <SystemInit+0x118>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d807      	bhi.n	8004f80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f70:	4b3d      	ldr	r3, [pc, #244]	@ (8005068 <SystemInit+0x118>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 030f 	bic.w	r3, r3, #15
 8004f78:	4a3b      	ldr	r2, [pc, #236]	@ (8005068 <SystemInit+0x118>)
 8004f7a:	f043 0307 	orr.w	r3, r3, #7
 8004f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004f80:	4b3a      	ldr	r3, [pc, #232]	@ (800506c <SystemInit+0x11c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a39      	ldr	r2, [pc, #228]	@ (800506c <SystemInit+0x11c>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004f8c:	4b37      	ldr	r3, [pc, #220]	@ (800506c <SystemInit+0x11c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004f92:	4b36      	ldr	r3, [pc, #216]	@ (800506c <SystemInit+0x11c>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4935      	ldr	r1, [pc, #212]	@ (800506c <SystemInit+0x11c>)
 8004f98:	4b35      	ldr	r3, [pc, #212]	@ (8005070 <SystemInit+0x120>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f9e:	4b32      	ldr	r3, [pc, #200]	@ (8005068 <SystemInit+0x118>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004faa:	4b2f      	ldr	r3, [pc, #188]	@ (8005068 <SystemInit+0x118>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 030f 	bic.w	r3, r3, #15
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <SystemInit+0x118>)
 8004fb4:	f043 0307 	orr.w	r3, r3, #7
 8004fb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004fba:	4b2c      	ldr	r3, [pc, #176]	@ (800506c <SystemInit+0x11c>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800506c <SystemInit+0x11c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004fc6:	4b29      	ldr	r3, [pc, #164]	@ (800506c <SystemInit+0x11c>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004fcc:	4b27      	ldr	r3, [pc, #156]	@ (800506c <SystemInit+0x11c>)
 8004fce:	4a29      	ldr	r2, [pc, #164]	@ (8005074 <SystemInit+0x124>)
 8004fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004fd2:	4b26      	ldr	r3, [pc, #152]	@ (800506c <SystemInit+0x11c>)
 8004fd4:	4a28      	ldr	r2, [pc, #160]	@ (8005078 <SystemInit+0x128>)
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004fd8:	4b24      	ldr	r3, [pc, #144]	@ (800506c <SystemInit+0x11c>)
 8004fda:	4a28      	ldr	r2, [pc, #160]	@ (800507c <SystemInit+0x12c>)
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004fde:	4b23      	ldr	r3, [pc, #140]	@ (800506c <SystemInit+0x11c>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004fe4:	4b21      	ldr	r3, [pc, #132]	@ (800506c <SystemInit+0x11c>)
 8004fe6:	4a25      	ldr	r2, [pc, #148]	@ (800507c <SystemInit+0x12c>)
 8004fe8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004fea:	4b20      	ldr	r3, [pc, #128]	@ (800506c <SystemInit+0x11c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800506c <SystemInit+0x11c>)
 8004ff2:	4a22      	ldr	r2, [pc, #136]	@ (800507c <SystemInit+0x12c>)
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <SystemInit+0x11c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <SystemInit+0x11c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <SystemInit+0x11c>)
 8005002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005008:	4b18      	ldr	r3, [pc, #96]	@ (800506c <SystemInit+0x11c>)
 800500a:	2200      	movs	r2, #0
 800500c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800500e:	4b1c      	ldr	r3, [pc, #112]	@ (8005080 <SystemInit+0x130>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <SystemInit+0x134>)
 8005014:	4013      	ands	r3, r2
 8005016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800501a:	d202      	bcs.n	8005022 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800501c:	4b1a      	ldr	r3, [pc, #104]	@ (8005088 <SystemInit+0x138>)
 800501e:	2201      	movs	r2, #1
 8005020:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8005022:	4b12      	ldr	r3, [pc, #72]	@ (800506c <SystemInit+0x11c>)
 8005024:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d113      	bne.n	8005058 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005030:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <SystemInit+0x11c>)
 8005032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005036:	4a0d      	ldr	r2, [pc, #52]	@ (800506c <SystemInit+0x11c>)
 8005038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800503c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005040:	4b12      	ldr	r3, [pc, #72]	@ (800508c <SystemInit+0x13c>)
 8005042:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005046:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <SystemInit+0x11c>)
 800504a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800504e:	4a07      	ldr	r2, [pc, #28]	@ (800506c <SystemInit+0x11c>)
 8005050:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005054:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000ed00 	.word	0xe000ed00
 8005068:	52002000 	.word	0x52002000
 800506c:	58024400 	.word	0x58024400
 8005070:	eaf6ed7f 	.word	0xeaf6ed7f
 8005074:	02020200 	.word	0x02020200
 8005078:	01ff0000 	.word	0x01ff0000
 800507c:	01010280 	.word	0x01010280
 8005080:	5c001000 	.word	0x5c001000
 8005084:	ffff0000 	.word	0xffff0000
 8005088:	51008108 	.word	0x51008108
 800508c:	52004000 	.word	0x52004000

08005090 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <ExitRun0Mode+0x2c>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a08      	ldr	r2, [pc, #32]	@ (80050bc <ExitRun0Mode+0x2c>)
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80050a0:	bf00      	nop
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <ExitRun0Mode+0x2c>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f9      	beq.n	80050a2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	58024800 	.word	0x58024800

080050c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050c0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80050fc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80050c4:	f7ff ffe4 	bl	8005090 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80050c8:	f7ff ff42 	bl	8004f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050cc:	480c      	ldr	r0, [pc, #48]	@ (8005100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050ce:	490d      	ldr	r1, [pc, #52]	@ (8005104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050d4:	e002      	b.n	80050dc <LoopCopyDataInit>

080050d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050da:	3304      	adds	r3, #4

080050dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050e0:	d3f9      	bcc.n	80050d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050e2:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80050e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050e8:	e001      	b.n	80050ee <LoopFillZerobss>

080050ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050ec:	3204      	adds	r2, #4

080050ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050f0:	d3fb      	bcc.n	80050ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050f2:	f009 ffd1 	bl	800f098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050f6:	f7fe f8f3 	bl	80032e0 <main>
  bx  lr
 80050fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005100:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005104:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8005108:	080119a0 	.word	0x080119a0
  ldr r2, =_sbss
 800510c:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005110:	2400560c 	.word	0x2400560c

08005114 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005114:	e7fe      	b.n	8005114 <ADC3_IRQHandler>
	...

08005118 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	@ 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <BSP_LED_Init+0x28>
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d006      	beq.n	8005140 <BSP_LED_Init+0x28>
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d003      	beq.n	8005140 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005138:	f06f 0301 	mvn.w	r3, #1
 800513c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800513e:	e055      	b.n	80051ec <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8005146:	4b2c      	ldr	r3, [pc, #176]	@ (80051f8 <BSP_LED_Init+0xe0>)
 8005148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800514c:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <BSP_LED_Init+0xe0>)
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005156:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <BSP_LED_Init+0xe0>)
 8005158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	e021      	b.n	80051aa <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10f      	bne.n	800518c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800516c:	4b22      	ldr	r3, [pc, #136]	@ (80051f8 <BSP_LED_Init+0xe0>)
 800516e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005172:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <BSP_LED_Init+0xe0>)
 8005174:	f043 0302 	orr.w	r3, r3, #2
 8005178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800517c:	4b1e      	ldr	r3, [pc, #120]	@ (80051f8 <BSP_LED_Init+0xe0>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	e00e      	b.n	80051aa <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800518c:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <BSP_LED_Init+0xe0>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005192:	4a19      	ldr	r2, [pc, #100]	@ (80051f8 <BSP_LED_Init+0xe0>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800519c:	4b16      	ldr	r3, [pc, #88]	@ (80051f8 <BSP_LED_Init+0xe0>)
 800519e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <BSP_LED_Init+0xe4>)
 80051ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80051b4:	2301      	movs	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051bc:	2303      	movs	r3, #3
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005200 <BSP_LED_Init+0xe8>)
 80051c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c8:	f107 0218 	add.w	r2, r7, #24
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fc56 	bl	8006a80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005200 <BSP_LED_Init+0xe8>)
 80051d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	4a07      	ldr	r2, [pc, #28]	@ (80051fc <BSP_LED_Init+0xe4>)
 80051e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e4:	2200      	movs	r2, #0
 80051e6:	4619      	mov	r1, r3
 80051e8:	f001 fdfa 	bl	8006de0 <HAL_GPIO_WritePin>
  }

  return ret;
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3730      	adds	r7, #48	@ 0x30
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	08011490 	.word	0x08011490
 8005200:	2400005c 	.word	0x2400005c

08005204 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	460a      	mov	r2, r1
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	4613      	mov	r3, r2
 8005212:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005214:	4b2e      	ldr	r3, [pc, #184]	@ (80052d0 <BSP_PB_Init+0xcc>)
 8005216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800521a:	4a2d      	ldr	r2, [pc, #180]	@ (80052d0 <BSP_PB_Init+0xcc>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005224:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <BSP_PB_Init+0xcc>)
 8005226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005236:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005238:	2302      	movs	r3, #2
 800523a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800523c:	2302      	movs	r3, #2
 800523e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	4a21      	ldr	r2, [pc, #132]	@ (80052d4 <BSP_PB_Init+0xd0>)
 800524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005252:	f107 020c 	add.w	r2, r7, #12
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f001 fc11 	bl	8006a80 <HAL_GPIO_Init>
 800525e:	e031      	b.n	80052c4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005260:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005264:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	4a1a      	ldr	r2, [pc, #104]	@ (80052d4 <BSP_PB_Init+0xd0>)
 800526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fc03 	bl	8006a80 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4a16      	ldr	r2, [pc, #88]	@ (80052d8 <BSP_PB_Init+0xd4>)
 8005280:	441a      	add	r2, r3
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	4915      	ldr	r1, [pc, #84]	@ (80052dc <BSP_PB_Init+0xd8>)
 8005286:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fa48 	bl	8005722 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4a10      	ldr	r2, [pc, #64]	@ (80052d8 <BSP_PB_Init+0xd4>)
 8005298:	1898      	adds	r0, r3, r2
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <BSP_PB_Init+0xdc>)
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	461a      	mov	r2, r3
 80052a4:	2100      	movs	r1, #0
 80052a6:	f000 fa1d 	bl	80056e4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80052aa:	2028      	movs	r0, #40	@ 0x28
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	4a0d      	ldr	r2, [pc, #52]	@ (80052e4 <BSP_PB_Init+0xe0>)
 80052b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b4:	2200      	movs	r2, #0
 80052b6:	4619      	mov	r1, r3
 80052b8:	f000 f974 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80052bc:	2328      	movs	r3, #40	@ 0x28
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f98a 	bl	80055d8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	58024400 	.word	0x58024400
 80052d4:	24000068 	.word	0x24000068
 80052d8:	24000acc 	.word	0x24000acc
 80052dc:	08011498 	.word	0x08011498
 80052e0:	2400006c 	.word	0x2400006c
 80052e4:	24000070 	.word	0x24000070

080052e8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4a04      	ldr	r2, [pc, #16]	@ (8005308 <BSP_PB_IRQHandler+0x20>)
 80052f8:	4413      	add	r3, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fa26 	bl	800574c <HAL_EXTI_IRQHandler>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	24000acc 	.word	0x24000acc

0800530c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005310:	2000      	movs	r0, #0
 8005312:	f7fb fccb 	bl	8000cac <BSP_PB_Callback>
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005322:	2003      	movs	r0, #3
 8005324:	f000 f933 	bl	800558e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005328:	f002 fbd8 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <HAL_Init+0x68>)
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	4913      	ldr	r1, [pc, #76]	@ (8005388 <HAL_Init+0x6c>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005346:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <HAL_Init+0x68>)
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	4a0e      	ldr	r2, [pc, #56]	@ (8005388 <HAL_Init+0x6c>)
 8005350:	5cd3      	ldrb	r3, [r2, r3]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	4a0b      	ldr	r2, [pc, #44]	@ (800538c <HAL_Init+0x70>)
 800535e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005360:	4a0b      	ldr	r2, [pc, #44]	@ (8005390 <HAL_Init+0x74>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005366:	200f      	movs	r0, #15
 8005368:	f7ff fc9a 	bl	8004ca0 <HAL_InitTick>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e002      	b.n	800537c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005376:	f7ff fb81 	bl	8004a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	58024400 	.word	0x58024400
 8005388:	08011480 	.word	0x08011480
 800538c:	24000058 	.word	0x24000058
 8005390:	24000054 	.word	0x24000054

08005394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005398:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <HAL_IncTick+0x20>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_IncTick+0x24>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a04      	ldr	r2, [pc, #16]	@ (80053b8 <HAL_IncTick+0x24>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	24000078 	.word	0x24000078
 80053b8:	24000ad4 	.word	0x24000ad4

080053bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return uwTick;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_GetTick+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	24000ad4 	.word	0x24000ad4

080053d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7ff ffee 	bl	80053bc <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d005      	beq.n	80053fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <HAL_Delay+0x44>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053fa:	bf00      	nop
 80053fc:	f7ff ffde 	bl	80053bc <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d8f7      	bhi.n	80053fc <HAL_Delay+0x28>
  {
  }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	24000078 	.word	0x24000078

0800541c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005420:	4b03      	ldr	r3, [pc, #12]	@ (8005430 <HAL_GetREVID+0x14>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	0c1b      	lsrs	r3, r3, #16
}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	5c001000 	.word	0x5c001000

08005434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005444:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <__NVIC_SetPriorityGrouping+0x40>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 800545e:	4313      	orrs	r3, r2
 8005460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005462:	4a04      	ldr	r2, [pc, #16]	@ (8005474 <__NVIC_SetPriorityGrouping+0x40>)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	60d3      	str	r3, [r2, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000ed00 	.word	0xe000ed00
 8005478:	05fa0000 	.word	0x05fa0000

0800547c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b04      	ldr	r3, [pc, #16]	@ (8005494 <__NVIC_GetPriorityGrouping+0x18>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0307 	and.w	r3, r3, #7
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db0b      	blt.n	80054c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	4907      	ldr	r1, [pc, #28]	@ (80054d0 <__NVIC_EnableIRQ+0x38>)
 80054b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	fa00 f202 	lsl.w	r2, r0, r2
 80054be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	@ (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	@ (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
         );
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	@ 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ff4c 	bl	8005434 <__NVIC_SetPriorityGrouping>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055b2:	f7ff ff63 	bl	800547c <__NVIC_GetPriorityGrouping>
 80055b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	6978      	ldr	r0, [r7, #20]
 80055be:	f7ff ffb3 	bl	8005528 <NVIC_EncodePriority>
 80055c2:	4602      	mov	r2, r0
 80055c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff ff82 	bl	80054d4 <__NVIC_SetPriority>
}
 80055d0:	bf00      	nop
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff ff56 	bl	8005498 <__NVIC_EnableIRQ>
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80055f8:	f3bf 8f5f 	dmb	sy
}
 80055fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_MPU_Disable+0x28>)
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	4a06      	ldr	r2, [pc, #24]	@ (800561c <HAL_MPU_Disable+0x28>)
 8005604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005608:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800560a:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_MPU_Disable+0x2c>)
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000ed00 	.word	0xe000ed00
 8005620:	e000ed90 	.word	0xe000ed90

08005624 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800562c:	4a0b      	ldr	r2, [pc, #44]	@ (800565c <HAL_MPU_Enable+0x38>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <HAL_MPU_Enable+0x3c>)
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <HAL_MPU_Enable+0x3c>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005642:	f3bf 8f4f 	dsb	sy
}
 8005646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005648:	f3bf 8f6f 	isb	sy
}
 800564c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	e000ed90 	.word	0xe000ed90
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	785a      	ldrb	r2, [r3, #1]
 8005670:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <HAL_MPU_ConfigRegion+0x7c>)
 8005672:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005674:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <HAL_MPU_ConfigRegion+0x7c>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	4a19      	ldr	r2, [pc, #100]	@ (80056e0 <HAL_MPU_ConfigRegion+0x7c>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005680:	4a17      	ldr	r2, [pc, #92]	@ (80056e0 <HAL_MPU_ConfigRegion+0x7c>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7b1b      	ldrb	r3, [r3, #12]
 800568c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	7adb      	ldrb	r3, [r3, #11]
 8005692:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005694:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7a9b      	ldrb	r3, [r3, #10]
 800569a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800569c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7b5b      	ldrb	r3, [r3, #13]
 80056a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80056a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7b9b      	ldrb	r3, [r3, #14]
 80056aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80056ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7bdb      	ldrb	r3, [r3, #15]
 80056b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80056b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	7a5b      	ldrb	r3, [r3, #9]
 80056ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80056bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7a1b      	ldrb	r3, [r3, #8]
 80056c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80056c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056cc:	4a04      	ldr	r2, [pc, #16]	@ (80056e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80056ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056d0:	6113      	str	r3, [r2, #16]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	e000ed90 	.word	0xe000ed90

080056e4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	460b      	mov	r3, r1
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e00a      	b.n	8005716 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]
      break;
 800570c:	e002      	b.n	8005714 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
      break;
 8005712:	bf00      	nop
  }

  return status;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e003      	b.n	800573e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	011a      	lsls	r2, r3, #4
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <HAL_EXTI_IRQHandler+0x5c>)
 8005776:	4413      	add	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4798      	blx	r3
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	58000088 	.word	0x58000088

080057ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b098      	sub	sp, #96	@ 0x60
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057b4:	4a84      	ldr	r2, [pc, #528]	@ (80059c8 <HAL_FDCAN_Init+0x21c>)
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4611      	mov	r1, r2
 80057bc:	224c      	movs	r2, #76	@ 0x4c
 80057be:	4618      	mov	r0, r3
 80057c0:	f009 fc91 	bl	800f0e6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e1c6      	b.n	8005b5c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7e      	ldr	r2, [pc, #504]	@ (80059cc <HAL_FDCAN_Init+0x220>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d106      	bne.n	80057e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f95c 	bl	8004ab8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0210 	bic.w	r2, r2, #16
 800580e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005810:	f7ff fdd4 	bl	80053bc <HAL_GetTick>
 8005814:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005816:	e014      	b.n	8005842 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005818:	f7ff fdd0 	bl	80053bc <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b0a      	cmp	r3, #10
 8005824:	d90d      	bls.n	8005842 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2203      	movs	r2, #3
 800583a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e18c      	b.n	8005b5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d0e3      	beq.n	8005818 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005860:	f7ff fdac 	bl	80053bc <HAL_GetTick>
 8005864:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005866:	e014      	b.n	8005892 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005868:	f7ff fda8 	bl	80053bc <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b0a      	cmp	r3, #10
 8005874:	d90d      	bls.n	8005892 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800587c:	f043 0201 	orr.w	r2, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2203      	movs	r2, #3
 800588a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e164      	b.n	8005b5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0e3      	beq.n	8005868 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0202 	orr.w	r2, r2, #2
 80058ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7c1b      	ldrb	r3, [r3, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c6:	619a      	str	r2, [r3, #24]
 80058c8:	e007      	b.n	80058da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7c5b      	ldrb	r3, [r3, #17]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e007      	b.n	8005904 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005902:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c9b      	ldrb	r3, [r3, #18]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591a:	619a      	str	r2, [r3, #24]
 800591c:	e007      	b.n	800592e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800592c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005952:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0210 	bic.w	r2, r2, #16
 8005962:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d108      	bne.n	800597e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0204 	orr.w	r2, r2, #4
 800597a:	619a      	str	r2, [r3, #24]
 800597c:	e030      	b.n	80059e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02c      	beq.n	80059e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d020      	beq.n	80059d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800599c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0210 	orr.w	r2, r2, #16
 80059ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d114      	bne.n	80059e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699a      	ldr	r2, [r3, #24]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0220 	orr.w	r2, r2, #32
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e00b      	b.n	80059e0 <HAL_FDCAN_Init+0x234>
 80059c8:	080113d4 	.word	0x080113d4
 80059cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0220 	orr.w	r2, r2, #32
 80059de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a08:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a0a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a14:	d115      	bne.n	8005a42 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	3b01      	subs	r3, #1
 8005a22:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a24:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a2e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	3b01      	subs	r3, #1
 8005a38:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a3e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a40:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a68:	4413      	add	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a76:	f023 0107 	bic.w	r1, r3, #7
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	3360      	adds	r3, #96	@ 0x60
 8005a82:	443b      	add	r3, r7
 8005a84:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d011      	beq.n	8005abe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aa2:	f023 0107 	bic.w	r1, r3, #7
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	3360      	adds	r3, #96	@ 0x60
 8005aae:	443b      	add	r3, r7
 8005ab0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ace:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	3360      	adds	r3, #96	@ 0x60
 8005ada:	443b      	add	r3, r7
 8005adc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005afc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	3360      	adds	r3, #96	@ 0x60
 8005b08:	443b      	add	r3, r7
 8005b0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	@ (8005b64 <HAL_FDCAN_Init+0x3b8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d107      	bne.n	8005b34 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f022 0203 	bic.w	r2, r2, #3
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fd93 	bl	8006678 <FDCAN_CalcultateRamBlockAddresses>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005b58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3760      	adds	r7, #96	@ 0x60
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	4000a000 	.word	0x4000a000

08005b68 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d111      	bne.n	8005ba0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e008      	b.n	8005bb2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d141      	bne.n	8005c5a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bde:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e038      	b.n	8005c6c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e026      	b.n	8005c6c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fea5 	bl	8006984 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2101      	movs	r1, #1
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	fa01 f202 	lsl.w	r2, r1, r2
 8005c46:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e008      	b.n	8005c6c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c60:	f043 0208 	orr.w	r2, r3, #8
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b08b      	sub	sp, #44	@ 0x2c
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c8c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005c8e:	7efb      	ldrb	r3, [r7, #27]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	f040 8149 	bne.w	8005f28 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d14c      	bne.n	8005d36 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ca4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e13c      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e12a      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cf4:	d10a      	bne.n	8005d0c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d06:	d101      	bne.n	8005d0c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	e068      	b.n	8005e08 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b41      	cmp	r3, #65	@ 0x41
 8005d3a:	d14c      	bne.n	8005dd6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0ec      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0da      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d94:	d10a      	bne.n	8005dac <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da6:	d101      	bne.n	8005dac <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd4:	e018      	b.n	8005e08 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d309      	bcc.n	8005df4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0a2      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	0c9b      	lsrs	r3, r3, #18
 8005e22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e005      	b.n	8005e38 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	3304      	adds	r3, #4
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	0e1b      	lsrs	r3, r3, #24
 8005e8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	0fda      	lsrs	r2, r3, #31
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	e00a      	b.n	8005ec4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	440b      	add	r3, r1
 8005eba:	7812      	ldrb	r2, [r2, #0]
 8005ebc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d3ec      	bcc.n	8005eae <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b40      	cmp	r3, #64	@ 0x40
 8005ed8:	d105      	bne.n	8005ee6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005ee4:	e01e      	b.n	8005f24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b41      	cmp	r3, #65	@ 0x41
 8005eea:	d105      	bne.n	8005ef8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005ef6:	e015      	b.n	8005f24 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b1f      	cmp	r3, #31
 8005efc:	d808      	bhi.n	8005f10 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2101      	movs	r1, #1
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005f0e:	e009      	b.n	8005f24 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e008      	b.n	8005f3a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	372c      	adds	r7, #44	@ 0x2c
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	0801149c 	.word	0x0801149c

08005f4c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005f62:	68fb      	ldr	r3, [r7, #12]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005f82:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d002      	beq.n	8005f90 <HAL_FDCAN_ActivateNotification+0x20>
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d155      	bne.n	800603c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fae:	e014      	b.n	8005fda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d108      	bne.n	8005fd2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0202 	orr.w	r2, r2, #2
 8005fce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fd0:	e003      	b.n	8005fda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	430a      	orrs	r2, r1
 8006012:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <HAL_FDCAN_ActivateNotification+0xec>)
 8006020:	4013      	ands	r3, r2
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	430b      	orrs	r3, r1
 8006028:	6553      	str	r3, [r2, #84]	@ 0x54
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <HAL_FDCAN_ActivateNotification+0xf0>)
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	0f9b      	lsrs	r3, r3, #30
 8006032:	490b      	ldr	r1, [pc, #44]	@ (8006060 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e008      	b.n	800604e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006042:	f043 0202 	orr.w	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	3fcfffff 	.word	0x3fcfffff
 8006060:	4000a800 	.word	0x4000a800

08006064 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b096      	sub	sp, #88	@ 0x58
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800606c:	4b9a      	ldr	r3, [pc, #616]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	079b      	lsls	r3, r3, #30
 8006072:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006074:	4b98      	ldr	r3, [pc, #608]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	079b      	lsls	r3, r3, #30
 800607a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800607c:	4013      	ands	r3, r2
 800607e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800608a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006094:	4013      	ands	r3, r2
 8006096:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060ac:	4013      	ands	r3, r2
 80060ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c4:	4013      	ands	r3, r2
 80060c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80060d2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060dc:	4013      	ands	r3, r2
 80060de:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80060ea:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060f4:	4013      	ands	r3, r2
 80060f6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d010      	beq.n	8006136 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	0a1b      	lsrs	r3, r3, #8
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006128:	651a      	str	r2, [r3, #80]	@ 0x50
 800612a:	4b6b      	ldr	r3, [pc, #428]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 800612c:	2200      	movs	r2, #0
 800612e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fa54 	bl	80065de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	0a9b      	lsrs	r3, r3, #10
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01d      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	0a9b      	lsrs	r3, r3, #10
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006162:	4013      	ands	r3, r2
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800616e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006170:	4b59      	ldr	r3, [pc, #356]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006176:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa07 	bl	800658c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800617e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00d      	beq.n	80061a0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800618a:	4b54      	ldr	r3, [pc, #336]	@ (80062dc <HAL_FDCAN_IRQHandler+0x278>)
 800618c:	400b      	ands	r3, r1
 800618e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006190:	4a51      	ldr	r2, [pc, #324]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 8006192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006194:	0f9b      	lsrs	r3, r3, #30
 8006196:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9c0 	bl	8006520 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80061a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061ac:	4b4b      	ldr	r3, [pc, #300]	@ (80062dc <HAL_FDCAN_IRQHandler+0x278>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b2:	4a49      	ldr	r2, [pc, #292]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 80061b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b6:	0f9b      	lsrs	r3, r3, #30
 80061b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80061ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9ba 	bl	8006536 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80061c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80061ce:	4b43      	ldr	r3, [pc, #268]	@ (80062dc <HAL_FDCAN_IRQHandler+0x278>)
 80061d0:	400b      	ands	r3, r1
 80061d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d4:	4a40      	ldr	r2, [pc, #256]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 80061d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d8:	0f9b      	lsrs	r3, r3, #30
 80061da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80061dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fa ffa4 	bl	800112c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80061e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80061f0:	4b3a      	ldr	r3, [pc, #232]	@ (80062dc <HAL_FDCAN_IRQHandler+0x278>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f6:	4a38      	ldr	r2, [pc, #224]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 80061f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061fa:	0f9b      	lsrs	r3, r3, #30
 80061fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80061fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9a3 	bl	800654c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	0adb      	lsrs	r3, r3, #11
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	0adb      	lsrs	r3, r3, #11
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006226:	651a      	str	r2, [r3, #80]	@ 0x50
 8006228:	4b2b      	ldr	r3, [pc, #172]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 800622a:	2200      	movs	r2, #0
 800622c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f997 	bl	8006562 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006236:	0a5b      	lsrs	r3, r3, #9
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01d      	beq.n	800627c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	0a5b      	lsrs	r3, r3, #9
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d017      	beq.n	800627c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006254:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800625e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006260:	4013      	ands	r3, r2
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800626c:	651a      	str	r2, [r3, #80]	@ 0x50
 800626e:	4b1a      	ldr	r3, [pc, #104]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f97d 	bl	8006576 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627e:	0cdb      	lsrs	r3, r3, #19
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800629c:	651a      	str	r2, [r3, #80]	@ 0x50
 800629e:	4b0e      	ldr	r3, [pc, #56]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f97c 	bl	80065a2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d010      	beq.n	80062e4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80062ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80062cc:	4b02      	ldr	r3, [pc, #8]	@ (80062d8 <HAL_FDCAN_IRQHandler+0x274>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	e004      	b.n	80062e0 <HAL_FDCAN_IRQHandler+0x27c>
 80062d6:	bf00      	nop
 80062d8:	4000a800 	.word	0x4000a800
 80062dc:	3fcfffff 	.word	0x3fcfffff
 80062e0:	f000 f969 	bl	80065b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80062e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e6:	0c9b      	lsrs	r3, r3, #18
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d010      	beq.n	8006312 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	0c9b      	lsrs	r3, r3, #18
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006304:	651a      	str	r2, [r3, #80]	@ 0x50
 8006306:	4b83      	ldr	r3, [pc, #524]	@ (8006514 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f95c 	bl	80065ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006314:	0c5b      	lsrs	r3, r3, #17
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d015      	beq.n	800634a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	0c5b      	lsrs	r3, r3, #17
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00f      	beq.n	800634a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006332:	651a      	str	r2, [r3, #80]	@ 0x50
 8006334:	4b77      	ldr	r3, [pc, #476]	@ (8006514 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006340:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800634a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006356:	4b70      	ldr	r3, [pc, #448]	@ (8006518 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006358:	400b      	ands	r3, r1
 800635a:	6513      	str	r3, [r2, #80]	@ 0x50
 800635c:	4a6d      	ldr	r2, [pc, #436]	@ (8006514 <HAL_FDCAN_IRQHandler+0x4b0>)
 800635e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006360:	0f9b      	lsrs	r3, r3, #30
 8006362:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f94d 	bl	8006606 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800636c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800636e:	2b00      	cmp	r3, #0
 8006370:	d011      	beq.n	8006396 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006378:	4b67      	ldr	r3, [pc, #412]	@ (8006518 <HAL_FDCAN_IRQHandler+0x4b4>)
 800637a:	400b      	ands	r3, r1
 800637c:	6513      	str	r3, [r2, #80]	@ 0x50
 800637e:	4a65      	ldr	r2, [pc, #404]	@ (8006514 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006382:	0f9b      	lsrs	r3, r3, #30
 8006384:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800638c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a60      	ldr	r2, [pc, #384]	@ (800651c <HAL_FDCAN_IRQHandler+0x4b8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	f040 80ac 	bne.w	80064fa <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a4 	beq.w	80064fa <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063c6:	4013      	ands	r3, r2
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063de:	4013      	ands	r3, r2
 80063e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	4013      	ands	r3, r2
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8006404:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	4013      	ands	r3, r2
 8006410:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800641c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	4013      	ands	r3, r2
 8006428:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006446:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006448:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f8e6 	bl	800661c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800645c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800645e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8e6 	bl	8006632 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	099b      	lsrs	r3, r3, #6
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01a      	beq.n	80064a8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	099b      	lsrs	r3, r3, #6
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d014      	beq.n	80064a8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b29b      	uxth	r3, r3
 8006488:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006494:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2240      	movs	r2, #64	@ 0x40
 800649c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	6939      	ldr	r1, [r7, #16]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f8d0 	bl	8006648 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80064b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8d1 	bl	8006660 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f874 	bl	80065f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800650a:	bf00      	nop
 800650c:	3758      	adds	r7, #88	@ 0x58
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	4000a800 	.word	0x4000a800
 8006518:	3fcfffff 	.word	0x3fcfffff
 800651c:	4000a000 	.word	0x4000a000

08006520 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006684:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800668e:	4ba7      	ldr	r3, [pc, #668]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006690:	4013      	ands	r3, r2
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0091      	lsls	r1, r2, #2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	430b      	orrs	r3, r1
 800669c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	041a      	lsls	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	4413      	add	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80066ce:	4b97      	ldr	r3, [pc, #604]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	0091      	lsls	r1, r2, #2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	430b      	orrs	r3, r1
 80066dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f0:	041a      	lsls	r2, r3, #16
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006710:	4b86      	ldr	r3, [pc, #536]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0091      	lsls	r1, r2, #2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	430b      	orrs	r3, r1
 800671e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800672a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	041a      	lsls	r2, r3, #16
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006746:	fb02 f303 	mul.w	r3, r2, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006758:	4b74      	ldr	r3, [pc, #464]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0091      	lsls	r1, r2, #2
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	430b      	orrs	r3, r1
 8006766:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006772:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677a:	041a      	lsls	r2, r3, #16
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80067a0:	4b62      	ldr	r3, [pc, #392]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	0091      	lsls	r1, r2, #2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80067cc:	4b57      	ldr	r3, [pc, #348]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	0091      	lsls	r1, r2, #2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	430b      	orrs	r3, r1
 80067da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067e6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ee:	041a      	lsls	r2, r3, #16
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4413      	add	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800680e:	4b47      	ldr	r3, [pc, #284]	@ (800692c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006810:	4013      	ands	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0091      	lsls	r1, r2, #2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	430b      	orrs	r3, r1
 800681c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006828:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006830:	041a      	lsls	r2, r3, #16
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006844:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800684c:	061a      	lsls	r2, r3, #24
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800685c:	4b34      	ldr	r3, [pc, #208]	@ (8006930 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800685e:	4413      	add	r3, r2
 8006860:	009a      	lsls	r2, r3, #2
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80068b0:	441a      	add	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80068c8:	441a      	add	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	441a      	add	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006922:	4a04      	ldr	r2, [pc, #16]	@ (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d915      	bls.n	8006954 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006928:	e006      	b.n	8006938 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800692a:	bf00      	nop
 800692c:	ffff0003 	.word	0xffff0003
 8006930:	10002b00 	.word	0x10002b00
 8006934:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e010      	b.n	8006976 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e005      	b.n	8006968 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3304      	adds	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d3f3      	bcc.n	800695c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006984:	b480      	push	{r7}
 8006986:	b089      	sub	sp, #36	@ 0x24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80069a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e00a      	b.n	80069c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80069b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80069be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80069d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80069d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80069dc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	3304      	adds	r3, #4
 8006a08:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3304      	adds	r3, #4
 8006a14:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e020      	b.n	8006a5e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	440b      	add	r3, r1
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a34:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	440b      	add	r3, r1
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a42:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	440a      	add	r2, r1
 8006a4a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006a4c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	3304      	adds	r3, #4
 8006a56:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4a06      	ldr	r2, [pc, #24]	@ (8006a7c <FDCAN_CopyMessageToRAM+0xf8>)
 8006a64:	5cd3      	ldrb	r3, [r2, r3]
 8006a66:	461a      	mov	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d3d6      	bcc.n	8006a1c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	3724      	adds	r7, #36	@ 0x24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	0801149c 	.word	0x0801149c

08006a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	@ 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a8e:	4b89      	ldr	r3, [pc, #548]	@ (8006cb4 <HAL_GPIO_Init+0x234>)
 8006a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a92:	e194      	b.n	8006dbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8186 	beq.w	8006db8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d005      	beq.n	8006ac4 <HAL_GPIO_Init+0x44>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d130      	bne.n	8006b26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	2203      	movs	r2, #3
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006afa:	2201      	movs	r2, #1
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43db      	mvns	r3, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0201 	and.w	r2, r3, #1
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d017      	beq.n	8006b62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d123      	bne.n	8006bb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	08da      	lsrs	r2, r3, #3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3208      	adds	r2, #8
 8006b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	220f      	movs	r2, #15
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	08da      	lsrs	r2, r3, #3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3208      	adds	r2, #8
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 0203 	and.w	r2, r3, #3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80e0 	beq.w	8006db8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb8 <HAL_GPIO_Init+0x238>)
 8006bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb8 <HAL_GPIO_Init+0x238>)
 8006c00:	f043 0302 	orr.w	r3, r3, #2
 8006c04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006c08:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb8 <HAL_GPIO_Init+0x238>)
 8006c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c16:	4a29      	ldr	r2, [pc, #164]	@ (8006cbc <HAL_GPIO_Init+0x23c>)
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	089b      	lsrs	r3, r3, #2
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	220f      	movs	r2, #15
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	4013      	ands	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	@ (8006cc0 <HAL_GPIO_Init+0x240>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d052      	beq.n	8006ce8 <HAL_GPIO_Init+0x268>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc4 <HAL_GPIO_Init+0x244>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d031      	beq.n	8006cae <HAL_GPIO_Init+0x22e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc8 <HAL_GPIO_Init+0x248>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d02b      	beq.n	8006caa <HAL_GPIO_Init+0x22a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ccc <HAL_GPIO_Init+0x24c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d025      	beq.n	8006ca6 <HAL_GPIO_Init+0x226>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <HAL_GPIO_Init+0x250>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01f      	beq.n	8006ca2 <HAL_GPIO_Init+0x222>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd4 <HAL_GPIO_Init+0x254>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d019      	beq.n	8006c9e <HAL_GPIO_Init+0x21e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd8 <HAL_GPIO_Init+0x258>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_GPIO_Init+0x21a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a19      	ldr	r2, [pc, #100]	@ (8006cdc <HAL_GPIO_Init+0x25c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00d      	beq.n	8006c96 <HAL_GPIO_Init+0x216>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a18      	ldr	r2, [pc, #96]	@ (8006ce0 <HAL_GPIO_Init+0x260>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <HAL_GPIO_Init+0x212>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a17      	ldr	r2, [pc, #92]	@ (8006ce4 <HAL_GPIO_Init+0x264>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d101      	bne.n	8006c8e <HAL_GPIO_Init+0x20e>
 8006c8a:	2309      	movs	r3, #9
 8006c8c:	e02d      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006c8e:	230a      	movs	r3, #10
 8006c90:	e02b      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006c92:	2308      	movs	r3, #8
 8006c94:	e029      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006c96:	2307      	movs	r3, #7
 8006c98:	e027      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006c9a:	2306      	movs	r3, #6
 8006c9c:	e025      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006c9e:	2305      	movs	r3, #5
 8006ca0:	e023      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	e021      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e01f      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e01d      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e01b      	b.n	8006cea <HAL_GPIO_Init+0x26a>
 8006cb2:	bf00      	nop
 8006cb4:	58000080 	.word	0x58000080
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	58000400 	.word	0x58000400
 8006cc0:	58020000 	.word	0x58020000
 8006cc4:	58020400 	.word	0x58020400
 8006cc8:	58020800 	.word	0x58020800
 8006ccc:	58020c00 	.word	0x58020c00
 8006cd0:	58021000 	.word	0x58021000
 8006cd4:	58021400 	.word	0x58021400
 8006cd8:	58021800 	.word	0x58021800
 8006cdc:	58021c00 	.word	0x58021c00
 8006ce0:	58022000 	.word	0x58022000
 8006ce4:	58022400 	.word	0x58022400
 8006ce8:	2300      	movs	r3, #0
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	f002 0203 	and.w	r2, r2, #3
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	4093      	lsls	r3, r2
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cfa:	4938      	ldr	r1, [pc, #224]	@ (8006ddc <HAL_GPIO_Init+0x35c>)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	3302      	adds	r3, #2
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	43db      	mvns	r3, r3
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	4013      	ands	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	4013      	ands	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4013      	ands	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	43db      	mvns	r3, r3
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f ae63 	bne.w	8006a94 <HAL_GPIO_Init+0x14>
  }
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	3724      	adds	r7, #36	@ 0x24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	58000400 	.word	0x58000400

08006de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
 8006dec:	4613      	mov	r3, r2
 8006dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006df0:	787b      	ldrb	r3, [r7, #1]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006dfc:	e003      	b.n	8006e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dfe:	887b      	ldrh	r3, [r7, #2]
 8006e00:	041a      	lsls	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	619a      	str	r2, [r3, #24]
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e24:	887a      	ldrh	r2, [r7, #2]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	041a      	lsls	r2, r3, #16
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	43d9      	mvns	r1, r3
 8006e30:	887b      	ldrh	r3, [r7, #2]
 8006e32:	400b      	ands	r3, r1
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	619a      	str	r2, [r3, #24]
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e50:	4b19      	ldr	r3, [pc, #100]	@ (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d00a      	beq.n	8006e72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e5c:	4b16      	ldr	r3, [pc, #88]	@ (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d001      	beq.n	8006e6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e01f      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e01d      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e72:	4b11      	ldr	r3, [pc, #68]	@ (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f023 0207 	bic.w	r2, r3, #7
 8006e7a:	490f      	ldr	r1, [pc, #60]	@ (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e82:	f7fe fa9b 	bl	80053bc <HAL_GetTick>
 8006e86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e88:	e009      	b.n	8006e9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e8a:	f7fe fa97 	bl	80053bc <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e98:	d901      	bls.n	8006e9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e007      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eaa:	d1ee      	bne.n	8006e8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024800 	.word	0x58024800

08006ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08c      	sub	sp, #48	@ 0x30
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f000 bc48 	b.w	8007760 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8088 	beq.w	8006fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ede:	4b99      	ldr	r3, [pc, #612]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ee8:	4b96      	ldr	r3, [pc, #600]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d007      	beq.n	8006f04 <HAL_RCC_OscConfig+0x48>
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef6:	2b18      	cmp	r3, #24
 8006ef8:	d111      	bne.n	8006f1e <HAL_RCC_OscConfig+0x62>
 8006efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f04:	4b8f      	ldr	r3, [pc, #572]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d06d      	beq.n	8006fec <HAL_RCC_OscConfig+0x130>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d169      	bne.n	8006fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f000 bc21 	b.w	8007760 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f26:	d106      	bne.n	8006f36 <HAL_RCC_OscConfig+0x7a>
 8006f28:	4b86      	ldr	r3, [pc, #536]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a85      	ldr	r2, [pc, #532]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e02e      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10c      	bne.n	8006f58 <HAL_RCC_OscConfig+0x9c>
 8006f3e:	4b81      	ldr	r3, [pc, #516]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a80      	ldr	r2, [pc, #512]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b7e      	ldr	r3, [pc, #504]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e01d      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCC_OscConfig+0xc0>
 8006f62:	4b78      	ldr	r3, [pc, #480]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a77      	ldr	r2, [pc, #476]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4b75      	ldr	r3, [pc, #468]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a74      	ldr	r2, [pc, #464]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e00b      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f7c:	4b71      	ldr	r3, [pc, #452]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	4b6e      	ldr	r3, [pc, #440]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d013      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fe fa0e 	bl	80053bc <HAL_GetTick>
 8006fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa4:	f7fe fa0a 	bl	80053bc <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	@ 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e3d4      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fb6:	4b63      	ldr	r3, [pc, #396]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0xe8>
 8006fc2:	e014      	b.n	8006fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fe f9fa 	bl	80053bc <HAL_GetTick>
 8006fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fcc:	f7fe f9f6 	bl	80053bc <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b64      	cmp	r3, #100	@ 0x64
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e3c0      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fde:	4b59      	ldr	r3, [pc, #356]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f0      	bne.n	8006fcc <HAL_RCC_OscConfig+0x110>
 8006fea:	e000      	b.n	8006fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80ca 	beq.w	8007190 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffc:	4b51      	ldr	r3, [pc, #324]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007004:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007006:	4b4f      	ldr	r3, [pc, #316]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_RCC_OscConfig+0x166>
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	2b18      	cmp	r3, #24
 8007016:	d156      	bne.n	80070c6 <HAL_RCC_OscConfig+0x20a>
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d151      	bne.n	80070c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007022:	4b48      	ldr	r3, [pc, #288]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_RCC_OscConfig+0x17e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e392      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800703a:	4b42      	ldr	r3, [pc, #264]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 0219 	bic.w	r2, r3, #25
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	493f      	ldr	r1, [pc, #252]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fe f9b6 	bl	80053bc <HAL_GetTick>
 8007050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007054:	f7fe f9b2 	bl	80053bc <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e37c      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007066:	4b37      	ldr	r3, [pc, #220]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007072:	f7fe f9d3 	bl	800541c <HAL_GetREVID>
 8007076:	4603      	mov	r3, r0
 8007078:	f241 0203 	movw	r2, #4099	@ 0x1003
 800707c:	4293      	cmp	r3, r2
 800707e:	d817      	bhi.n	80070b0 <HAL_RCC_OscConfig+0x1f4>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b40      	cmp	r3, #64	@ 0x40
 8007086:	d108      	bne.n	800709a <HAL_RCC_OscConfig+0x1de>
 8007088:	4b2e      	ldr	r3, [pc, #184]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007090:	4a2c      	ldr	r2, [pc, #176]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007096:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007098:	e07a      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b2a      	ldr	r3, [pc, #168]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	031b      	lsls	r3, r3, #12
 80070a8:	4926      	ldr	r1, [pc, #152]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ae:	e06f      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b0:	4b24      	ldr	r3, [pc, #144]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	061b      	lsls	r3, r3, #24
 80070be:	4921      	ldr	r1, [pc, #132]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c4:	e064      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d047      	beq.n	800715e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 0219 	bic.w	r2, r3, #25
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	491a      	ldr	r1, [pc, #104]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fe f96c 	bl	80053bc <HAL_GetTick>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e8:	f7fe f968 	bl	80053bc <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e332      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070fa:	4b12      	ldr	r3, [pc, #72]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007106:	f7fe f989 	bl	800541c <HAL_GetREVID>
 800710a:	4603      	mov	r3, r0
 800710c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007110:	4293      	cmp	r3, r2
 8007112:	d819      	bhi.n	8007148 <HAL_RCC_OscConfig+0x28c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b40      	cmp	r3, #64	@ 0x40
 800711a:	d108      	bne.n	800712e <HAL_RCC_OscConfig+0x272>
 800711c:	4b09      	ldr	r3, [pc, #36]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007124:	4a07      	ldr	r2, [pc, #28]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e030      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
 800712e:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	031b      	lsls	r3, r3, #12
 800713c:	4901      	ldr	r1, [pc, #4]	@ (8007144 <HAL_RCC_OscConfig+0x288>)
 800713e:	4313      	orrs	r3, r2
 8007140:	604b      	str	r3, [r1, #4]
 8007142:	e025      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
 8007144:	58024400 	.word	0x58024400
 8007148:	4b9a      	ldr	r3, [pc, #616]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	4997      	ldr	r1, [pc, #604]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	e018      	b.n	8007190 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800715e:	4b95      	ldr	r3, [pc, #596]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a94      	ldr	r2, [pc, #592]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fe f927 	bl	80053bc <HAL_GetTick>
 800716e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007172:	f7fe f923 	bl	80053bc <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e2ed      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007184:	4b8b      	ldr	r3, [pc, #556]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80a9 	beq.w	80072f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800719e:	4b85      	ldr	r3, [pc, #532]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071a8:	4b82      	ldr	r3, [pc, #520]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d007      	beq.n	80071c4 <HAL_RCC_OscConfig+0x308>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b18      	cmp	r3, #24
 80071b8:	d13a      	bne.n	8007230 <HAL_RCC_OscConfig+0x374>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d135      	bne.n	8007230 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071c4:	4b7b      	ldr	r3, [pc, #492]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <HAL_RCC_OscConfig+0x320>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b80      	cmp	r3, #128	@ 0x80
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e2c1      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071dc:	f7fe f91e 	bl	800541c <HAL_GetREVID>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d817      	bhi.n	800721a <HAL_RCC_OscConfig+0x35e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d108      	bne.n	8007204 <HAL_RCC_OscConfig+0x348>
 80071f2:	4b70      	ldr	r3, [pc, #448]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80071fa:	4a6e      	ldr	r2, [pc, #440]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80071fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007200:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007202:	e075      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007204:	4b6b      	ldr	r3, [pc, #428]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	069b      	lsls	r3, r3, #26
 8007212:	4968      	ldr	r1, [pc, #416]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007214:	4313      	orrs	r3, r2
 8007216:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007218:	e06a      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800721a:	4b66      	ldr	r3, [pc, #408]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	061b      	lsls	r3, r3, #24
 8007228:	4962      	ldr	r1, [pc, #392]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800722e:	e05f      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d042      	beq.n	80072be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007238:	4b5e      	ldr	r3, [pc, #376]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5d      	ldr	r2, [pc, #372]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800723e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fe f8ba 	bl	80053bc <HAL_GetTick>
 8007248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800724c:	f7fe f8b6 	bl	80053bc <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e280      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800725e:	4b55      	ldr	r3, [pc, #340]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800726a:	f7fe f8d7 	bl	800541c <HAL_GetREVID>
 800726e:	4603      	mov	r3, r0
 8007270:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007274:	4293      	cmp	r3, r2
 8007276:	d817      	bhi.n	80072a8 <HAL_RCC_OscConfig+0x3ec>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	2b20      	cmp	r3, #32
 800727e:	d108      	bne.n	8007292 <HAL_RCC_OscConfig+0x3d6>
 8007280:	4b4c      	ldr	r3, [pc, #304]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007288:	4a4a      	ldr	r2, [pc, #296]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800728a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800728e:	6053      	str	r3, [r2, #4]
 8007290:	e02e      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
 8007292:	4b48      	ldr	r3, [pc, #288]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	069b      	lsls	r3, r3, #26
 80072a0:	4944      	ldr	r1, [pc, #272]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	604b      	str	r3, [r1, #4]
 80072a6:	e023      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
 80072a8:	4b42      	ldr	r3, [pc, #264]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	061b      	lsls	r3, r3, #24
 80072b6:	493f      	ldr	r1, [pc, #252]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60cb      	str	r3, [r1, #12]
 80072bc:	e018      	b.n	80072f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072be:	4b3d      	ldr	r3, [pc, #244]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a3c      	ldr	r2, [pc, #240]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ca:	f7fe f877 	bl	80053bc <HAL_GetTick>
 80072ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072d2:	f7fe f873 	bl	80053bc <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e23d      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072e4:	4b33      	ldr	r3, [pc, #204]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f0      	bne.n	80072d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d036      	beq.n	800736a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d019      	beq.n	8007338 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007304:	4b2b      	ldr	r3, [pc, #172]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007308:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800730a:	f043 0301 	orr.w	r3, r3, #1
 800730e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007310:	f7fe f854 	bl	80053bc <HAL_GetTick>
 8007314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007318:	f7fe f850 	bl	80053bc <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e21a      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800732a:	4b22      	ldr	r3, [pc, #136]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0f0      	beq.n	8007318 <HAL_RCC_OscConfig+0x45c>
 8007336:	e018      	b.n	800736a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007338:	4b1e      	ldr	r3, [pc, #120]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800733a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733c:	4a1d      	ldr	r2, [pc, #116]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fe f83a 	bl	80053bc <HAL_GetTick>
 8007348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800734c:	f7fe f836 	bl	80053bc <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e200      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800735e:	4b15      	ldr	r3, [pc, #84]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	d039      	beq.n	80073ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01c      	beq.n	80073b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 8007384:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007388:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800738a:	f7fe f817 	bl	80053bc <HAL_GetTick>
 800738e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007392:	f7fe f813 	bl	80053bc <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e1dd      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073a4:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <HAL_RCC_OscConfig+0x4f8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x4d6>
 80073b0:	e01b      	b.n	80073ea <HAL_RCC_OscConfig+0x52e>
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073b8:	4b9b      	ldr	r3, [pc, #620]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a9a      	ldr	r2, [pc, #616]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80073be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073c4:	f7fd fffa 	bl	80053bc <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073cc:	f7fd fff6 	bl	80053bc <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e1c0      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073de:	4b92      	ldr	r3, [pc, #584]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8081 	beq.w	80074fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073f8:	4b8c      	ldr	r3, [pc, #560]	@ (800762c <HAL_RCC_OscConfig+0x770>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a8b      	ldr	r2, [pc, #556]	@ (800762c <HAL_RCC_OscConfig+0x770>)
 80073fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007404:	f7fd ffda 	bl	80053bc <HAL_GetTick>
 8007408:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800740c:	f7fd ffd6 	bl	80053bc <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	@ 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e1a0      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800741e:	4b83      	ldr	r3, [pc, #524]	@ (800762c <HAL_RCC_OscConfig+0x770>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d106      	bne.n	8007440 <HAL_RCC_OscConfig+0x584>
 8007432:	4b7d      	ldr	r3, [pc, #500]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007436:	4a7c      	ldr	r2, [pc, #496]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	6713      	str	r3, [r2, #112]	@ 0x70
 800743e:	e02d      	b.n	800749c <HAL_RCC_OscConfig+0x5e0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10c      	bne.n	8007462 <HAL_RCC_OscConfig+0x5a6>
 8007448:	4b77      	ldr	r3, [pc, #476]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800744a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744c:	4a76      	ldr	r2, [pc, #472]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	6713      	str	r3, [r2, #112]	@ 0x70
 8007454:	4b74      	ldr	r3, [pc, #464]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007458:	4a73      	ldr	r2, [pc, #460]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800745a:	f023 0304 	bic.w	r3, r3, #4
 800745e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007460:	e01c      	b.n	800749c <HAL_RCC_OscConfig+0x5e0>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b05      	cmp	r3, #5
 8007468:	d10c      	bne.n	8007484 <HAL_RCC_OscConfig+0x5c8>
 800746a:	4b6f      	ldr	r3, [pc, #444]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	4a6e      	ldr	r2, [pc, #440]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	6713      	str	r3, [r2, #112]	@ 0x70
 8007476:	4b6c      	ldr	r3, [pc, #432]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747a:	4a6b      	ldr	r2, [pc, #428]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800747c:	f043 0301 	orr.w	r3, r3, #1
 8007480:	6713      	str	r3, [r2, #112]	@ 0x70
 8007482:	e00b      	b.n	800749c <HAL_RCC_OscConfig+0x5e0>
 8007484:	4b68      	ldr	r3, [pc, #416]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007488:	4a67      	ldr	r2, [pc, #412]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007490:	4b65      	ldr	r3, [pc, #404]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007494:	4a64      	ldr	r2, [pc, #400]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007496:	f023 0304 	bic.w	r3, r3, #4
 800749a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d015      	beq.n	80074d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fd ff8a 	bl	80053bc <HAL_GetTick>
 80074a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ac:	f7fd ff86 	bl	80053bc <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e14e      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074c2:	4b59      	ldr	r3, [pc, #356]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0ee      	beq.n	80074ac <HAL_RCC_OscConfig+0x5f0>
 80074ce:	e014      	b.n	80074fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d0:	f7fd ff74 	bl	80053bc <HAL_GetTick>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074d6:	e00a      	b.n	80074ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d8:	f7fd ff70 	bl	80053bc <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e138      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1ee      	bne.n	80074d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 812d 	beq.w	800775e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007504:	4b48      	ldr	r3, [pc, #288]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800750c:	2b18      	cmp	r3, #24
 800750e:	f000 80bd 	beq.w	800768c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007516:	2b02      	cmp	r3, #2
 8007518:	f040 809e 	bne.w	8007658 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751c:	4b42      	ldr	r3, [pc, #264]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a41      	ldr	r2, [pc, #260]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007528:	f7fd ff48 	bl	80053bc <HAL_GetTick>
 800752c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007530:	f7fd ff44 	bl	80053bc <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e10e      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007542:	4b39      	ldr	r3, [pc, #228]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800754e:	4b36      	ldr	r3, [pc, #216]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007552:	4b37      	ldr	r3, [pc, #220]	@ (8007630 <HAL_RCC_OscConfig+0x774>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800755e:	0112      	lsls	r2, r2, #4
 8007560:	430a      	orrs	r2, r1
 8007562:	4931      	ldr	r1, [pc, #196]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007564:	4313      	orrs	r3, r2
 8007566:	628b      	str	r3, [r1, #40]	@ 0x28
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	3b01      	subs	r3, #1
 800756e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007576:	3b01      	subs	r3, #1
 8007578:	025b      	lsls	r3, r3, #9
 800757a:	b29b      	uxth	r3, r3
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007582:	3b01      	subs	r3, #1
 8007584:	041b      	lsls	r3, r3, #16
 8007586:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	3b01      	subs	r3, #1
 8007592:	061b      	lsls	r3, r3, #24
 8007594:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007598:	4923      	ldr	r1, [pc, #140]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800759e:	4b22      	ldr	r3, [pc, #136]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	4a21      	ldr	r2, [pc, #132]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ae:	4b21      	ldr	r3, [pc, #132]	@ (8007634 <HAL_RCC_OscConfig+0x778>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075b6:	00d2      	lsls	r2, r2, #3
 80075b8:	491b      	ldr	r1, [pc, #108]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075be:	4b1a      	ldr	r3, [pc, #104]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c2:	f023 020c 	bic.w	r2, r3, #12
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	4917      	ldr	r1, [pc, #92]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075d0:	4b15      	ldr	r3, [pc, #84]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	f023 0202 	bic.w	r2, r3, #2
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075dc:	4912      	ldr	r1, [pc, #72]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075e2:	4b11      	ldr	r3, [pc, #68]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	4a10      	ldr	r2, [pc, #64]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007604:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007606:	4b08      	ldr	r3, [pc, #32]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a07      	ldr	r2, [pc, #28]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007612:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a04      	ldr	r2, [pc, #16]	@ (8007628 <HAL_RCC_OscConfig+0x76c>)
 8007618:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800761c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761e:	f7fd fecd 	bl	80053bc <HAL_GetTick>
 8007622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007624:	e011      	b.n	800764a <HAL_RCC_OscConfig+0x78e>
 8007626:	bf00      	nop
 8007628:	58024400 	.word	0x58024400
 800762c:	58024800 	.word	0x58024800
 8007630:	fffffc0c 	.word	0xfffffc0c
 8007634:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007638:	f7fd fec0 	bl	80053bc <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e08a      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800764a:	4b47      	ldr	r3, [pc, #284]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f0      	beq.n	8007638 <HAL_RCC_OscConfig+0x77c>
 8007656:	e082      	b.n	800775e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007658:	4b43      	ldr	r3, [pc, #268]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a42      	ldr	r2, [pc, #264]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800765e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fd feaa 	bl	80053bc <HAL_GetTick>
 8007668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800766c:	f7fd fea6 	bl	80053bc <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e070      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800767e:	4b3a      	ldr	r3, [pc, #232]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0x7b0>
 800768a:	e068      	b.n	800775e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800768c:	4b36      	ldr	r3, [pc, #216]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007690:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007692:	4b35      	ldr	r3, [pc, #212]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	2b01      	cmp	r3, #1
 800769e:	d031      	beq.n	8007704 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f003 0203 	and.w	r2, r3, #3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d12a      	bne.n	8007704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	091b      	lsrs	r3, r3, #4
 80076b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d122      	bne.n	8007704 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d11a      	bne.n	8007704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	0a5b      	lsrs	r3, r3, #9
 80076d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d111      	bne.n	8007704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0c1b      	lsrs	r3, r3, #16
 80076e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d108      	bne.n	8007704 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	0e1b      	lsrs	r3, r3, #24
 80076f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d001      	beq.n	8007708 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e02b      	b.n	8007760 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007708:	4b17      	ldr	r3, [pc, #92]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800770a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770c:	08db      	lsrs	r3, r3, #3
 800770e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007712:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	429a      	cmp	r2, r3
 800771c:	d01f      	beq.n	800775e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800771e:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	4a11      	ldr	r2, [pc, #68]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007724:	f023 0301 	bic.w	r3, r3, #1
 8007728:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800772a:	f7fd fe47 	bl	80053bc <HAL_GetTick>
 800772e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007730:	bf00      	nop
 8007732:	f7fd fe43 	bl	80053bc <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	4293      	cmp	r3, r2
 800773c:	d0f9      	beq.n	8007732 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800773e:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007742:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <HAL_RCC_OscConfig+0x8b0>)
 8007744:	4013      	ands	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800774a:	00d2      	lsls	r2, r2, #3
 800774c:	4906      	ldr	r1, [pc, #24]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 800774e:	4313      	orrs	r3, r2
 8007750:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007752:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	4a04      	ldr	r2, [pc, #16]	@ (8007768 <HAL_RCC_OscConfig+0x8ac>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3730      	adds	r7, #48	@ 0x30
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	58024400 	.word	0x58024400
 800776c:	ffff0007 	.word	0xffff0007

08007770 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e19c      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007784:	4b8a      	ldr	r3, [pc, #552]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d910      	bls.n	80077b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007792:	4b87      	ldr	r3, [pc, #540]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f023 020f 	bic.w	r2, r3, #15
 800779a:	4985      	ldr	r1, [pc, #532]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a2:	4b83      	ldr	r3, [pc, #524]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e184      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d010      	beq.n	80077e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	4b7b      	ldr	r3, [pc, #492]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d908      	bls.n	80077e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077d0:	4b78      	ldr	r3, [pc, #480]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	4975      	ldr	r1, [pc, #468]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	4b70      	ldr	r3, [pc, #448]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d908      	bls.n	8007810 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077fe:	4b6d      	ldr	r3, [pc, #436]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	496a      	ldr	r1, [pc, #424]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800780c:	4313      	orrs	r3, r2
 800780e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	4b64      	ldr	r3, [pc, #400]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007828:	429a      	cmp	r2, r3
 800782a:	d908      	bls.n	800783e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800782c:	4b61      	ldr	r3, [pc, #388]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	495e      	ldr	r1, [pc, #376]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800783a:	4313      	orrs	r3, r2
 800783c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d010      	beq.n	800786c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	4b59      	ldr	r3, [pc, #356]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007856:	429a      	cmp	r2, r3
 8007858:	d908      	bls.n	800786c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800785a:	4b56      	ldr	r3, [pc, #344]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	4953      	ldr	r1, [pc, #332]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007868:	4313      	orrs	r3, r2
 800786a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d010      	beq.n	800789a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	4b4d      	ldr	r3, [pc, #308]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	429a      	cmp	r2, r3
 8007886:	d908      	bls.n	800789a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007888:	4b4a      	ldr	r3, [pc, #296]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	f023 020f 	bic.w	r2, r3, #15
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	4947      	ldr	r1, [pc, #284]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007896:	4313      	orrs	r3, r2
 8007898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d055      	beq.n	8007952 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078a6:	4b43      	ldr	r3, [pc, #268]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	4940      	ldr	r1, [pc, #256]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d107      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078c0:	4b3c      	ldr	r3, [pc, #240]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d121      	bne.n	8007910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0f6      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d107      	bne.n	80078e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078d8:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d115      	bne.n	8007910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0ea      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078f0:	4b30      	ldr	r3, [pc, #192]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0de      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007900:	4b2c      	ldr	r3, [pc, #176]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0d6      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007910:	4b28      	ldr	r3, [pc, #160]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f023 0207 	bic.w	r2, r3, #7
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4925      	ldr	r1, [pc, #148]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800791e:	4313      	orrs	r3, r2
 8007920:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007922:	f7fd fd4b 	bl	80053bc <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007928:	e00a      	b.n	8007940 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800792a:	f7fd fd47 	bl	80053bc <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0be      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007940:	4b1c      	ldr	r3, [pc, #112]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	429a      	cmp	r2, r3
 8007950:	d1eb      	bne.n	800792a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d010      	beq.n	8007980 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	4b14      	ldr	r3, [pc, #80]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	429a      	cmp	r2, r3
 800796c:	d208      	bcs.n	8007980 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800796e:	4b11      	ldr	r3, [pc, #68]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f023 020f 	bic.w	r2, r3, #15
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	490e      	ldr	r1, [pc, #56]	@ (80079b4 <HAL_RCC_ClockConfig+0x244>)
 800797c:	4313      	orrs	r3, r2
 800797e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007980:	4b0b      	ldr	r3, [pc, #44]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d214      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b08      	ldr	r3, [pc, #32]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 020f 	bic.w	r2, r3, #15
 8007996:	4906      	ldr	r1, [pc, #24]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800799e:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <HAL_RCC_ClockConfig+0x240>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e086      	b.n	8007abe <HAL_RCC_ClockConfig+0x34e>
 80079b0:	52002000 	.word	0x52002000
 80079b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d208      	bcs.n	80079e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079d4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	4939      	ldr	r1, [pc, #228]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d010      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695a      	ldr	r2, [r3, #20]
 80079f6:	4b34      	ldr	r3, [pc, #208]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d208      	bcs.n	8007a14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a02:	4b31      	ldr	r3, [pc, #196]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	492e      	ldr	r1, [pc, #184]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	4b28      	ldr	r3, [pc, #160]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d208      	bcs.n	8007a42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a30:	4b25      	ldr	r3, [pc, #148]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	4922      	ldr	r1, [pc, #136]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d010      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69da      	ldr	r2, [r3, #28]
 8007a52:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d208      	bcs.n	8007a70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	4917      	ldr	r1, [pc, #92]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a70:	f000 f834 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b14      	ldr	r3, [pc, #80]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	4912      	ldr	r1, [pc, #72]	@ (8007acc <HAL_RCC_ClockConfig+0x35c>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	f003 031f 	and.w	r3, r3, #31
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac8 <HAL_RCC_ClockConfig+0x358>)
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	4a0d      	ldr	r2, [pc, #52]	@ (8007acc <HAL_RCC_ClockConfig+0x35c>)
 8007a98:	5cd3      	ldrb	r3, [r2, r3]
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad0 <HAL_RCC_ClockConfig+0x360>)
 8007aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad4 <HAL_RCC_ClockConfig+0x364>)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007aae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad8 <HAL_RCC_ClockConfig+0x368>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fd f8f4 	bl	8004ca0 <HAL_InitTick>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	08011480 	.word	0x08011480
 8007ad0:	24000058 	.word	0x24000058
 8007ad4:	24000054 	.word	0x24000054
 8007ad8:	24000074 	.word	0x24000074

08007adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	@ 0x24
 8007ae0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ae2:	4bb3      	ldr	r3, [pc, #716]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aea:	2b18      	cmp	r3, #24
 8007aec:	f200 8155 	bhi.w	8007d9a <HAL_RCC_GetSysClockFreq+0x2be>
 8007af0:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007d9b 	.word	0x08007d9b
 8007b00:	08007d9b 	.word	0x08007d9b
 8007b04:	08007d9b 	.word	0x08007d9b
 8007b08:	08007d9b 	.word	0x08007d9b
 8007b0c:	08007d9b 	.word	0x08007d9b
 8007b10:	08007d9b 	.word	0x08007d9b
 8007b14:	08007d9b 	.word	0x08007d9b
 8007b18:	08007b83 	.word	0x08007b83
 8007b1c:	08007d9b 	.word	0x08007d9b
 8007b20:	08007d9b 	.word	0x08007d9b
 8007b24:	08007d9b 	.word	0x08007d9b
 8007b28:	08007d9b 	.word	0x08007d9b
 8007b2c:	08007d9b 	.word	0x08007d9b
 8007b30:	08007d9b 	.word	0x08007d9b
 8007b34:	08007d9b 	.word	0x08007d9b
 8007b38:	08007b89 	.word	0x08007b89
 8007b3c:	08007d9b 	.word	0x08007d9b
 8007b40:	08007d9b 	.word	0x08007d9b
 8007b44:	08007d9b 	.word	0x08007d9b
 8007b48:	08007d9b 	.word	0x08007d9b
 8007b4c:	08007d9b 	.word	0x08007d9b
 8007b50:	08007d9b 	.word	0x08007d9b
 8007b54:	08007d9b 	.word	0x08007d9b
 8007b58:	08007b8f 	.word	0x08007b8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5c:	4b94      	ldr	r3, [pc, #592]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b68:	4b91      	ldr	r3, [pc, #580]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	08db      	lsrs	r3, r3, #3
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	4a90      	ldr	r2, [pc, #576]	@ (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
 8007b78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b7a:	e111      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b7e:	61bb      	str	r3, [r7, #24]
      break;
 8007b80:	e10e      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b82:	4b8d      	ldr	r3, [pc, #564]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b84:	61bb      	str	r3, [r7, #24]
      break;
 8007b86:	e10b      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b88:	4b8c      	ldr	r3, [pc, #560]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b8a:	61bb      	str	r3, [r7, #24]
      break;
 8007b8c:	e108      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b8e:	4b88      	ldr	r3, [pc, #544]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b98:	4b85      	ldr	r3, [pc, #532]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ba4:	4b82      	ldr	r3, [pc, #520]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bae:	4b80      	ldr	r3, [pc, #512]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	08db      	lsrs	r3, r3, #3
 8007bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80e1 	beq.w	8007d94 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	f000 8083 	beq.w	8007ce0 <HAL_RCC_GetSysClockFreq+0x204>
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f200 80a1 	bhi.w	8007d24 <HAL_RCC_GetSysClockFreq+0x248>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_RCC_GetSysClockFreq+0x114>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d056      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bee:	e099      	b.n	8007d24 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02d      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	08db      	lsrs	r3, r3, #3
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	4a6b      	ldr	r2, [pc, #428]	@ (8007db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c08:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b62      	ldr	r3, [pc, #392]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c56:	e087      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007dc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b51      	ldr	r3, [pc, #324]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c9a:	e065      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b40      	ldr	r3, [pc, #256]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cde:	e043      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007dcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d22:	e021      	b.n	8007d68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b1e      	ldr	r3, [pc, #120]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6c:	0a5b      	lsrs	r3, r3, #9
 8007d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d72:	3301      	adds	r3, #1
 8007d74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8c:	ee17 3a90 	vmov	r3, s15
 8007d90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d92:	e005      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
      break;
 8007d98:	e002      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d9a:	4b07      	ldr	r3, [pc, #28]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d9c:	61bb      	str	r3, [r7, #24]
      break;
 8007d9e:	bf00      	nop
  }

  return sysclockfreq;
 8007da0:	69bb      	ldr	r3, [r7, #24]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	@ 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	03d09000 	.word	0x03d09000
 8007db8:	003d0900 	.word	0x003d0900
 8007dbc:	007a1200 	.word	0x007a1200
 8007dc0:	46000000 	.word	0x46000000
 8007dc4:	4c742400 	.word	0x4c742400
 8007dc8:	4a742400 	.word	0x4a742400
 8007dcc:	4af42400 	.word	0x4af42400

08007dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007dd6:	f7ff fe81 	bl	8007adc <HAL_RCC_GetSysClockFreq>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	4b10      	ldr	r3, [pc, #64]	@ (8007e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	490f      	ldr	r1, [pc, #60]	@ (8007e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007de8:	5ccb      	ldrb	r3, [r1, r3]
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007df4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	4a09      	ldr	r2, [pc, #36]	@ (8007e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dfe:	5cd3      	ldrb	r3, [r2, r3]
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0a:	4a07      	ldr	r2, [pc, #28]	@ (8007e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e0e:	4a07      	ldr	r2, [pc, #28]	@ (8007e2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e14:	4b04      	ldr	r3, [pc, #16]	@ (8007e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	58024400 	.word	0x58024400
 8007e24:	08011480 	.word	0x08011480
 8007e28:	24000058 	.word	0x24000058
 8007e2c:	24000054 	.word	0x24000054

08007e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e34:	f7ff ffcc 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	4b06      	ldr	r3, [pc, #24]	@ (8007e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	4904      	ldr	r1, [pc, #16]	@ (8007e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e46:	5ccb      	ldrb	r3, [r1, r3]
 8007e48:	f003 031f 	and.w	r3, r3, #31
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	58024400 	.word	0x58024400
 8007e58:	08011480 	.word	0x08011480

08007e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e60:	f7ff ffb6 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8007e64:	4602      	mov	r2, r0
 8007e66:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	4904      	ldr	r1, [pc, #16]	@ (8007e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e72:	5ccb      	ldrb	r3, [r1, r3]
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	58024400 	.word	0x58024400
 8007e84:	08011480 	.word	0x08011480

08007e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	223f      	movs	r2, #63	@ 0x3f
 8007e96:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e98:	4b1a      	ldr	r3, [pc, #104]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0207 	and.w	r2, r3, #7
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ea4:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007eb0:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ebc:	4b11      	ldr	r3, [pc, #68]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ee0:	4b08      	ldr	r3, [pc, #32]	@ (8007f04 <HAL_RCC_GetClockConfig+0x7c>)
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007eec:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <HAL_RCC_GetClockConfig+0x80>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	601a      	str	r2, [r3, #0]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	58024400 	.word	0x58024400
 8007f08:	52002000 	.word	0x52002000

08007f0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f10:	b0ca      	sub	sp, #296	@ 0x128
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f30:	2500      	movs	r5, #0
 8007f32:	ea54 0305 	orrs.w	r3, r4, r5
 8007f36:	d049      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f42:	d02f      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f48:	d828      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f4e:	d01a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f54:	d822      	bhi.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5e:	d007      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f60:	e01c      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f62:	4bb8      	ldr	r3, [pc, #736]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	4ab7      	ldr	r2, [pc, #732]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f6e:	e01a      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	3308      	adds	r3, #8
 8007f76:	2102      	movs	r1, #2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fc8f 	bl	800989c <RCCEx_PLL2_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f84:	e00f      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	3328      	adds	r3, #40	@ 0x28
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fd36 	bl	8009a00 <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f9a:	e004      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fae:	4ba5      	ldr	r3, [pc, #660]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fbc:	4aa1      	ldr	r2, [pc, #644]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fbe:	430b      	orrs	r3, r1
 8007fc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fc2:	e003      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007fd8:	f04f 0900 	mov.w	r9, #0
 8007fdc:	ea58 0309 	orrs.w	r3, r8, r9
 8007fe0:	d047      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d82a      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007fec:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008009 	.word	0x08008009
 8007ff8:	08008017 	.word	0x08008017
 8007ffc:	0800802d 	.word	0x0800802d
 8008000:	0800804b 	.word	0x0800804b
 8008004:	0800804b 	.word	0x0800804b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008008:	4b8e      	ldr	r3, [pc, #568]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800800a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800c:	4a8d      	ldr	r2, [pc, #564]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800800e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008014:	e01a      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801a:	3308      	adds	r3, #8
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fc3c 	bl	800989c <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800802a:	e00f      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800802c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008030:	3328      	adds	r3, #40	@ 0x28
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fce3 	bl	8009a00 <RCCEx_PLL3_Config>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008054:	4b7b      	ldr	r3, [pc, #492]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008058:	f023 0107 	bic.w	r1, r3, #7
 800805c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	4a78      	ldr	r2, [pc, #480]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008064:	430b      	orrs	r3, r1
 8008066:	6513      	str	r3, [r2, #80]	@ 0x50
 8008068:	e003      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800807e:	f04f 0b00 	mov.w	fp, #0
 8008082:	ea5a 030b 	orrs.w	r3, sl, fp
 8008086:	d04c      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	d030      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008098:	d829      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800809a:	2bc0      	cmp	r3, #192	@ 0xc0
 800809c:	d02d      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800809e:	2bc0      	cmp	r3, #192	@ 0xc0
 80080a0:	d825      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080a2:	2b80      	cmp	r3, #128	@ 0x80
 80080a4:	d018      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d821      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80080ae:	2b40      	cmp	r3, #64	@ 0x40
 80080b0:	d007      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80080b2:	e01c      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4b63      	ldr	r3, [pc, #396]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a62      	ldr	r2, [pc, #392]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080c0:	e01c      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c6:	3308      	adds	r3, #8
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fbe6 	bl	800989c <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080d6:	e011      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080dc:	3328      	adds	r3, #40	@ 0x28
 80080de:	2100      	movs	r1, #0
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 fc8d 	bl	8009a00 <RCCEx_PLL3_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008104:	4b4f      	ldr	r3, [pc, #316]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008108:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008112:	4a4c      	ldr	r2, [pc, #304]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6513      	str	r3, [r2, #80]	@ 0x50
 8008118:	e003      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800812e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008138:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d053      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800814a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800814e:	d035      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008154:	d82e      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008156:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800815a:	d031      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800815c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008160:	d828      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008166:	d01a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800816c:	d822      	bhi.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008172:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008176:	d007      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008178:	e01c      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817a:	4b32      	ldr	r3, [pc, #200]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	4a31      	ldr	r2, [pc, #196]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008186:	e01c      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800818c:	3308      	adds	r3, #8
 800818e:	2100      	movs	r1, #0
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fb83 	bl	800989c <RCCEx_PLL2_Config>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800819c:	e011      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a2:	3328      	adds	r3, #40	@ 0x28
 80081a4:	2100      	movs	r1, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fc2a 	bl	8009a00 <RCCEx_PLL3_Config>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081b2:	e006      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081ba:	e002      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80081bc:	bf00      	nop
 80081be:	e000      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80081c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80081da:	4a1a      	ldr	r2, [pc, #104]	@ (8008244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081dc:	430b      	orrs	r3, r1
 80081de:	6593      	str	r3, [r2, #88]	@ 0x58
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80081f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80081fa:	2300      	movs	r3, #0
 80081fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008200:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008204:	460b      	mov	r3, r1
 8008206:	4313      	orrs	r3, r2
 8008208:	d056      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008212:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008216:	d038      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800821c:	d831      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800821e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008222:	d034      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008224:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008228:	d82b      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800822a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800822e:	d01d      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008230:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008234:	d825      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800823a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800823e:	d00a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008240:	e01f      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008248:	4ba2      	ldr	r3, [pc, #648]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	4aa1      	ldr	r2, [pc, #644]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800824e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008254:	e01c      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825a:	3308      	adds	r3, #8
 800825c:	2100      	movs	r1, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fb1c 	bl	800989c <RCCEx_PLL2_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800826a:	e011      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	3328      	adds	r3, #40	@ 0x28
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fbc3 	bl	8009a00 <RCCEx_PLL3_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008280:	e006      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008288:	e002      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800828e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10b      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008298:	4b8e      	ldr	r3, [pc, #568]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800829a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082a8:	4a8a      	ldr	r2, [pc, #552]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082aa:	430b      	orrs	r3, r1
 80082ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80082ae:	e003      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80082c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80082d2:	460b      	mov	r3, r1
 80082d4:	4313      	orrs	r3, r2
 80082d6:	d03a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082de:	2b30      	cmp	r3, #48	@ 0x30
 80082e0:	d01f      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80082e2:	2b30      	cmp	r3, #48	@ 0x30
 80082e4:	d819      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d00c      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d815      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d019      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d111      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f6:	4b77      	ldr	r3, [pc, #476]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fa:	4a76      	ldr	r2, [pc, #472]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008300:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008302:	e011      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	3308      	adds	r3, #8
 800830a:	2102      	movs	r1, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f001 fac5 	bl	800989c <RCCEx_PLL2_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008320:	e002      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008322:	bf00      	nop
 8008324:	e000      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008330:	4b68      	ldr	r3, [pc, #416]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008334:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800833e:	4a65      	ldr	r2, [pc, #404]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008340:	430b      	orrs	r3, r1
 8008342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008344:	e003      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800835a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800835e:	2300      	movs	r3, #0
 8008360:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008364:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008368:	460b      	mov	r3, r1
 800836a:	4313      	orrs	r3, r2
 800836c:	d051      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008378:	d035      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800837a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800837e:	d82e      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008380:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008384:	d031      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008386:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800838a:	d828      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800838c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008390:	d01a      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008396:	d822      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800839c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a0:	d007      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80083a2:	e01c      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a4:	4b4b      	ldr	r3, [pc, #300]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a8:	4a4a      	ldr	r2, [pc, #296]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083b0:	e01c      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	3308      	adds	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fa6e 	bl	800989c <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083c6:	e011      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083cc:	3328      	adds	r3, #40	@ 0x28
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fb15 	bl	8009a00 <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083dc:	e006      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e4:	e002      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083e6:	bf00      	nop
 80083e8:	e000      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80083ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083f4:	4b37      	ldr	r3, [pc, #220]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008402:	4a34      	ldr	r2, [pc, #208]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008404:	430b      	orrs	r3, r1
 8008406:	6513      	str	r3, [r2, #80]	@ 0x50
 8008408:	e003      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800841e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008422:	2300      	movs	r3, #0
 8008424:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008428:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800842c:	460b      	mov	r3, r1
 800842e:	4313      	orrs	r3, r2
 8008430:	d056      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800843c:	d033      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800843e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008442:	d82c      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008448:	d02f      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800844a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800844e:	d826      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008454:	d02b      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008456:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800845a:	d820      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800845c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008460:	d012      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008466:	d81a      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d022      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008470:	d115      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008476:	3308      	adds	r3, #8
 8008478:	2101      	movs	r1, #1
 800847a:	4618      	mov	r0, r3
 800847c:	f001 fa0e 	bl	800989c <RCCEx_PLL2_Config>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008486:	e015      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	3328      	adds	r3, #40	@ 0x28
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fab5 	bl	8009a00 <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800849c:	e00a      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084a4:	e006      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084a6:	bf00      	nop
 80084a8:	e004      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084aa:	bf00      	nop
 80084ac:	e002      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10d      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084bc:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ca:	4a02      	ldr	r2, [pc, #8]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80084d0:	e006      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80084ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d055      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800850c:	d033      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800850e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008512:	d82c      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008518:	d02f      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851e:	d826      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008520:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008524:	d02b      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008526:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800852a:	d820      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800852c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008530:	d012      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008536:	d81a      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d022      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800853c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008540:	d115      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	3308      	adds	r3, #8
 8008548:	2101      	movs	r1, #1
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f9a6 	bl	800989c <RCCEx_PLL2_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008556:	e015      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855c:	3328      	adds	r3, #40	@ 0x28
 800855e:	2101      	movs	r1, #1
 8008560:	4618      	mov	r0, r3
 8008562:	f001 fa4d 	bl	8009a00 <RCCEx_PLL3_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800856c:	e00a      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008574:	e006      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008576:	bf00      	nop
 8008578:	e004      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800857a:	bf00      	nop
 800857c:	e002      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800857e:	bf00      	nop
 8008580:	e000      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800858c:	4ba3      	ldr	r3, [pc, #652]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800858e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008590:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800859c:	4a9f      	ldr	r2, [pc, #636]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800859e:	430b      	orrs	r3, r1
 80085a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80085b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085bc:	2300      	movs	r3, #0
 80085be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085c6:	460b      	mov	r3, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	d037      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d6:	d00e      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80085d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085dc:	d816      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d018      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80085e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e6:	d111      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e8:	4b8c      	ldr	r3, [pc, #560]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	4a8b      	ldr	r2, [pc, #556]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085f4:	e00f      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	3308      	adds	r3, #8
 80085fc:	2101      	movs	r1, #1
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f94c 	bl	800989c <RCCEx_PLL2_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800860a:	e004      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008612:	e000      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800861e:	4b7f      	ldr	r3, [pc, #508]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008622:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862c:	4a7b      	ldr	r2, [pc, #492]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800862e:	430b      	orrs	r3, r1
 8008630:	6513      	str	r3, [r2, #80]	@ 0x50
 8008632:	e003      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008652:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008656:	460b      	mov	r3, r1
 8008658:	4313      	orrs	r3, r2
 800865a:	d039      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008662:	2b03      	cmp	r3, #3
 8008664:	d81c      	bhi.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086a9 	.word	0x080086a9
 8008670:	0800867d 	.word	0x0800867d
 8008674:	0800868b 	.word	0x0800868b
 8008678:	080086a9 	.word	0x080086a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867c:	4b67      	ldr	r3, [pc, #412]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800867e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008680:	4a66      	ldr	r2, [pc, #408]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	3308      	adds	r3, #8
 8008690:	2102      	movs	r1, #2
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f902 	bl	800989c <RCCEx_PLL2_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800869e:	e004      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80086a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086b2:	4b5a      	ldr	r3, [pc, #360]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b6:	f023 0103 	bic.w	r1, r3, #3
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086c0:	4a56      	ldr	r2, [pc, #344]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086c2:	430b      	orrs	r3, r1
 80086c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086c6:	e003      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80086dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80086ea:	460b      	mov	r3, r1
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f000 809f 	beq.w	8008830 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086fe:	f7fc fe5d 	bl	80053bc <HAL_GetTick>
 8008702:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008706:	e00b      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008708:	f7fc fe58 	bl	80053bc <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b64      	cmp	r3, #100	@ 0x64
 8008716:	d903      	bls.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800871e:	e005      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008720:	4b3f      	ldr	r3, [pc, #252]	@ (8008820 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0ed      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	2b00      	cmp	r3, #0
 8008732:	d179      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008734:	4b39      	ldr	r3, [pc, #228]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008736:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008740:	4053      	eors	r3, r2
 8008742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008746:	2b00      	cmp	r3, #0
 8008748:	d015      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800874a:	4b34      	ldr	r3, [pc, #208]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008752:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008756:	4b31      	ldr	r3, [pc, #196]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	4a30      	ldr	r2, [pc, #192]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800875c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008760:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008762:	4b2e      	ldr	r3, [pc, #184]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008766:	4a2d      	ldr	r2, [pc, #180]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800876e:	4a2b      	ldr	r2, [pc, #172]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008770:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008774:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800877e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008782:	d118      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fc fe1a 	bl	80053bc <HAL_GetTick>
 8008788:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800878c:	e00d      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800878e:	f7fc fe15 	bl	80053bc <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008798:	1ad2      	subs	r2, r2, r3
 800879a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800879e:	429a      	cmp	r2, r3
 80087a0:	d903      	bls.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80087a8:	e005      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087aa:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0eb      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80087b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d129      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087ce:	d10e      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80087d0:	4b12      	ldr	r3, [pc, #72]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087e0:	091a      	lsrs	r2, r3, #4
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	4a0d      	ldr	r2, [pc, #52]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6113      	str	r3, [r2, #16]
 80087ec:	e005      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80087ee:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	4a0a      	ldr	r2, [pc, #40]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087f8:	6113      	str	r3, [r2, #16]
 80087fa:	4b08      	ldr	r3, [pc, #32]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800880a:	4a04      	ldr	r2, [pc, #16]	@ (800881c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008810:	e00e      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800881a:	e009      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800881c:	58024400 	.word	0x58024400
 8008820:	58024800 	.word	0x58024800
 8008824:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f002 0301 	and.w	r3, r2, #1
 800883c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008840:	2300      	movs	r3, #0
 8008842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008846:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800884a:	460b      	mov	r3, r1
 800884c:	4313      	orrs	r3, r2
 800884e:	f000 8089 	beq.w	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008858:	2b28      	cmp	r3, #40	@ 0x28
 800885a:	d86b      	bhi.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800885c:	a201      	add	r2, pc, #4	@ (adr r2, 8008864 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	0800893d 	.word	0x0800893d
 8008868:	08008935 	.word	0x08008935
 800886c:	08008935 	.word	0x08008935
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	08008935 	.word	0x08008935
 8008884:	08008909 	.word	0x08008909
 8008888:	08008935 	.word	0x08008935
 800888c:	08008935 	.word	0x08008935
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008935 	.word	0x08008935
 80088a4:	0800891f 	.word	0x0800891f
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	0800893d 	.word	0x0800893d
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	08008935 	.word	0x08008935
 8008904:	0800893d 	.word	0x0800893d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890c:	3308      	adds	r3, #8
 800890e:	2101      	movs	r1, #1
 8008910:	4618      	mov	r0, r3
 8008912:	f000 ffc3 	bl	800989c <RCCEx_PLL2_Config>
 8008916:	4603      	mov	r3, r0
 8008918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800891c:	e00f      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	3328      	adds	r3, #40	@ 0x28
 8008924:	2101      	movs	r1, #1
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f86a 	bl	8009a00 <RCCEx_PLL3_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008932:	e004      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800893a:	e000      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800893c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800893e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008946:	4bbf      	ldr	r3, [pc, #764]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800894e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008954:	4abb      	ldr	r2, [pc, #748]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008956:	430b      	orrs	r3, r1
 8008958:	6553      	str	r3, [r2, #84]	@ 0x54
 800895a:	e003      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f002 0302 	and.w	r3, r2, #2
 8008970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800897a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800897e:	460b      	mov	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	d041      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800898a:	2b05      	cmp	r3, #5
 800898c:	d824      	bhi.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800898e:	a201      	add	r2, pc, #4	@ (adr r2, 8008994 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	080089e1 	.word	0x080089e1
 8008998:	080089ad 	.word	0x080089ad
 800899c:	080089c3 	.word	0x080089c3
 80089a0:	080089e1 	.word	0x080089e1
 80089a4:	080089e1 	.word	0x080089e1
 80089a8:	080089e1 	.word	0x080089e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b0:	3308      	adds	r3, #8
 80089b2:	2101      	movs	r1, #1
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 ff71 	bl	800989c <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089c0:	e00f      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c6:	3328      	adds	r3, #40	@ 0x28
 80089c8:	2101      	movs	r1, #1
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 f818 	bl	8009a00 <RCCEx_PLL3_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089d6:	e004      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089de:	e000      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80089e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089ea:	4b96      	ldr	r3, [pc, #600]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ee:	f023 0107 	bic.w	r1, r3, #7
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089f8:	4a92      	ldr	r2, [pc, #584]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80089fe:	e003      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f002 0304 	and.w	r3, r2, #4
 8008a14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4313      	orrs	r3, r2
 8008a26:	d044      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a30:	2b05      	cmp	r3, #5
 8008a32:	d825      	bhi.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008a34:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a89 	.word	0x08008a89
 8008a40:	08008a55 	.word	0x08008a55
 8008a44:	08008a6b 	.word	0x08008a6b
 8008a48:	08008a89 	.word	0x08008a89
 8008a4c:	08008a89 	.word	0x08008a89
 8008a50:	08008a89 	.word	0x08008a89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a58:	3308      	adds	r3, #8
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 ff1d 	bl	800989c <RCCEx_PLL2_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a68:	e00f      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6e:	3328      	adds	r3, #40	@ 0x28
 8008a70:	2101      	movs	r1, #1
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 ffc4 	bl	8009a00 <RCCEx_PLL3_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a7e:	e004      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a86:	e000      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10b      	bne.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a92:	4b6c      	ldr	r3, [pc, #432]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a96:	f023 0107 	bic.w	r1, r3, #7
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa2:	4a68      	ldr	r2, [pc, #416]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008aa8:	e003      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f002 0320 	and.w	r3, r2, #32
 8008abe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008acc:	460b      	mov	r3, r1
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	d055      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ade:	d033      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ae4:	d82c      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aea:	d02f      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af0:	d826      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008af2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008af6:	d02b      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008af8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008afc:	d820      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b02:	d012      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b08:	d81a      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d022      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b12:	d115      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b18:	3308      	adds	r3, #8
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 febd 	bl	800989c <RCCEx_PLL2_Config>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b28:	e015      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2e:	3328      	adds	r3, #40	@ 0x28
 8008b30:	2102      	movs	r1, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 ff64 	bl	8009a00 <RCCEx_PLL3_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b3e:	e00a      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b46:	e006      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b48:	bf00      	nop
 8008b4a:	e004      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b4c:	bf00      	nop
 8008b4e:	e002      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b5e:	4b39      	ldr	r3, [pc, #228]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b6e:	4a35      	ldr	r2, [pc, #212]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b70:	430b      	orrs	r3, r1
 8008b72:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b74:	e003      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	d058      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ba6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008baa:	d033      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008bac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bb0:	d82c      	bhi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb6:	d02f      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bbc:	d826      	bhi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bc2:	d02b      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008bc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bc8:	d820      	bhi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bce:	d012      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd4:	d81a      	bhi.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d022      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bde:	d115      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be4:	3308      	adds	r3, #8
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fe57 	bl	800989c <RCCEx_PLL2_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bf4:	e015      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfa:	3328      	adds	r3, #40	@ 0x28
 8008bfc:	2102      	movs	r1, #2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fefe 	bl	8009a00 <RCCEx_PLL3_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c0a:	e00a      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c12:	e006      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c14:	bf00      	nop
 8008c16:	e004      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c18:	bf00      	nop
 8008c1a:	e002      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c1c:	bf00      	nop
 8008c1e:	e000      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10e      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c2a:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c3a:	4a02      	ldr	r2, [pc, #8]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c40:	e006      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008c42:	bf00      	nop
 8008c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	d055      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c7c:	d033      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008c7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c82:	d82c      	bhi.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c88:	d02f      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c8e:	d826      	bhi.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c94:	d02b      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008c96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c9a:	d820      	bhi.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ca0:	d012      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008ca2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ca6:	d81a      	bhi.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d022      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb0:	d115      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fdee 	bl	800989c <RCCEx_PLL2_Config>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cc6:	e015      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	3328      	adds	r3, #40	@ 0x28
 8008cce:	2102      	movs	r1, #2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fe95 	bl	8009a00 <RCCEx_PLL3_Config>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cdc:	e00a      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ce4:	e006      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ce6:	bf00      	nop
 8008ce8:	e004      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cea:	bf00      	nop
 8008cec:	e002      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cee:	bf00      	nop
 8008cf0:	e000      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008cfc:	4ba1      	ldr	r3, [pc, #644]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d0c:	4a9d      	ldr	r2, [pc, #628]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d0e:	430b      	orrs	r3, r1
 8008d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d12:	e003      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f002 0308 	and.w	r3, r2, #8
 8008d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008d36:	460b      	mov	r3, r1
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	d01e      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d48:	d10c      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4e:	3328      	adds	r3, #40	@ 0x28
 8008d50:	2102      	movs	r1, #2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fe54 	bl	8009a00 <RCCEx_PLL3_Config>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d64:	4b87      	ldr	r3, [pc, #540]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d74:	4a83      	ldr	r2, [pc, #524]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f002 0310 	and.w	r3, r2, #16
 8008d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d94:	460b      	mov	r3, r1
 8008d96:	4313      	orrs	r3, r2
 8008d98:	d01e      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da6:	d10c      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dac:	3328      	adds	r3, #40	@ 0x28
 8008dae:	2102      	movs	r1, #2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fe25 	bl	8009a00 <RCCEx_PLL3_Config>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dc2:	4b70      	ldr	r3, [pc, #448]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008de8:	2300      	movs	r3, #0
 8008dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008dee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008df2:	460b      	mov	r3, r1
 8008df4:	4313      	orrs	r3, r2
 8008df6:	d03e      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e04:	d022      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e0a:	d81b      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e14:	d00b      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008e16:	e015      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fd3b 	bl	800989c <RCCEx_PLL2_Config>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e2c:	e00f      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e32:	3328      	adds	r3, #40	@ 0x28
 8008e34:	2102      	movs	r1, #2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fde2 	bl	8009a00 <RCCEx_PLL3_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e42:	e004      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e4a:	e000      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10b      	bne.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e56:	4b4b      	ldr	r3, [pc, #300]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e66:	4a47      	ldr	r2, [pc, #284]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e6c:	e003      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e84:	2300      	movs	r3, #0
 8008e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	d03b      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e9e:	d01f      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ea0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ea4:	d818      	bhi.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eaa:	d003      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008eac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008eb2:	e011      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4b33      	ldr	r3, [pc, #204]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4a32      	ldr	r2, [pc, #200]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ec0:	e00f      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	3328      	adds	r3, #40	@ 0x28
 8008ec8:	2101      	movs	r1, #1
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fd98 	bl	8009a00 <RCCEx_PLL3_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ed6:	e004      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ede:	e000      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10b      	bne.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008eea:	4b26      	ldr	r3, [pc, #152]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008efa:	4a22      	ldr	r2, [pc, #136]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f00:	e003      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008f16:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f18:	2300      	movs	r3, #0
 8008f1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d034      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f34:	d007      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008f36:	e011      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4b12      	ldr	r3, [pc, #72]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f44:	e00e      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fca4 	bl	800989c <RCCEx_PLL2_Config>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f5a:	e003      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10d      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7a:	4a02      	ldr	r2, [pc, #8]	@ (8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f80:	e006      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008f82:	bf00      	nop
 8008f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fa2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d00c      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	3328      	adds	r3, #40	@ 0x28
 8008fb2:	2102      	movs	r1, #2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fd23 	bl	8009a00 <RCCEx_PLL3_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008fd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d038      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fee:	d018      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ff4:	d811      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffa:	d014      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009000:	d80b      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800900a:	d106      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800900c:	4bc3      	ldr	r3, [pc, #780]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	4ac2      	ldr	r2, [pc, #776]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009018:	e008      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009020:	e004      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009022:	bf00      	nop
 8009024:	e002      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009026:	bf00      	nop
 8009028:	e000      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800902a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800902c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009034:	4bb9      	ldr	r3, [pc, #740]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009038:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009044:	4ab5      	ldr	r2, [pc, #724]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009046:	430b      	orrs	r3, r1
 8009048:	6553      	str	r3, [r2, #84]	@ 0x54
 800904a:	e003      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009060:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009062:	2300      	movs	r3, #0
 8009064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009066:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009070:	4baa      	ldr	r3, [pc, #680]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009074:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800907e:	4aa7      	ldr	r2, [pc, #668]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009080:	430b      	orrs	r3, r1
 8009082:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009090:	653b      	str	r3, [r7, #80]	@ 0x50
 8009092:	2300      	movs	r3, #0
 8009094:	657b      	str	r3, [r7, #84]	@ 0x54
 8009096:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800909a:	460b      	mov	r3, r1
 800909c:	4313      	orrs	r3, r2
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80090a0:	4b9e      	ldr	r3, [pc, #632]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090b0:	4a9a      	ldr	r2, [pc, #616]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090b2:	430b      	orrs	r3, r1
 80090b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80090c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c4:	2300      	movs	r3, #0
 80090c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80090cc:	460b      	mov	r3, r1
 80090ce:	4313      	orrs	r3, r2
 80090d0:	d009      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090d2:	4b92      	ldr	r3, [pc, #584]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090e0:	4a8e      	ldr	r2, [pc, #568]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090e2:	430b      	orrs	r3, r1
 80090e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80090f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090f4:	2300      	movs	r3, #0
 80090f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80090fc:	460b      	mov	r3, r1
 80090fe:	4313      	orrs	r3, r2
 8009100:	d00e      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009102:	4b86      	ldr	r3, [pc, #536]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	4a85      	ldr	r2, [pc, #532]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009108:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800910c:	6113      	str	r3, [r2, #16]
 800910e:	4b83      	ldr	r3, [pc, #524]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009110:	6919      	ldr	r1, [r3, #16]
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009116:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800911a:	4a80      	ldr	r2, [pc, #512]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800911c:	430b      	orrs	r3, r1
 800911e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800912c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800912e:	2300      	movs	r3, #0
 8009130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009132:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009136:	460b      	mov	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	d009      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800913c:	4b77      	ldr	r3, [pc, #476]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800913e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009140:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914a:	4a74      	ldr	r2, [pc, #464]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800914c:	430b      	orrs	r3, r1
 800914e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800915c:	633b      	str	r3, [r7, #48]	@ 0x30
 800915e:	2300      	movs	r3, #0
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
 8009162:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800916c:	4b6b      	ldr	r3, [pc, #428]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800916e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009170:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800917c:	4a67      	ldr	r2, [pc, #412]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800917e:	430b      	orrs	r3, r1
 8009180:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	2100      	movs	r1, #0
 800918c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009194:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009198:	460b      	mov	r3, r1
 800919a:	4313      	orrs	r3, r2
 800919c:	d011      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	3308      	adds	r3, #8
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fb78 	bl	800989c <RCCEx_PLL2_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	2100      	movs	r1, #0
 80091cc:	6239      	str	r1, [r7, #32]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80091d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091d8:	460b      	mov	r3, r1
 80091da:	4313      	orrs	r3, r2
 80091dc:	d011      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e2:	3308      	adds	r3, #8
 80091e4:	2101      	movs	r1, #1
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fb58 	bl	800989c <RCCEx_PLL2_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	2100      	movs	r1, #0
 800920c:	61b9      	str	r1, [r7, #24]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009218:	460b      	mov	r3, r1
 800921a:	4313      	orrs	r3, r2
 800921c:	d011      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	3308      	adds	r3, #8
 8009224:	2102      	movs	r1, #2
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fb38 	bl	800989c <RCCEx_PLL2_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	2100      	movs	r1, #0
 800924c:	6139      	str	r1, [r7, #16]
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009258:	460b      	mov	r3, r1
 800925a:	4313      	orrs	r3, r2
 800925c:	d011      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009262:	3328      	adds	r3, #40	@ 0x28
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fbca 	bl	8009a00 <RCCEx_PLL3_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800927e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	2100      	movs	r1, #0
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009298:	460b      	mov	r3, r1
 800929a:	4313      	orrs	r3, r2
 800929c:	d011      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	3328      	adds	r3, #40	@ 0x28
 80092a4:	2101      	movs	r1, #1
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fbaa 	bl	8009a00 <RCCEx_PLL3_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	2100      	movs	r1, #0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	607b      	str	r3, [r7, #4]
 80092d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092d8:	460b      	mov	r3, r1
 80092da:	4313      	orrs	r3, r2
 80092dc:	d011      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e2:	3328      	adds	r3, #40	@ 0x28
 80092e4:	2102      	movs	r1, #2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fb8a 	bl	8009a00 <RCCEx_PLL3_Config>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009302:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
}
 8009310:	4618      	mov	r0, r3
 8009312:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009316:	46bd      	mov	sp, r7
 8009318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800931c:	58024400 	.word	0x58024400

08009320 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009324:	f7fe fd54 	bl	8007dd0 <HAL_RCC_GetHCLKFreq>
 8009328:	4602      	mov	r2, r0
 800932a:	4b06      	ldr	r3, [pc, #24]	@ (8009344 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	4904      	ldr	r1, [pc, #16]	@ (8009348 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009336:	5ccb      	ldrb	r3, [r1, r3]
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009340:	4618      	mov	r0, r3
 8009342:	bd80      	pop	{r7, pc}
 8009344:	58024400 	.word	0x58024400
 8009348:	08011480 	.word	0x08011480

0800934c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	@ 0x24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009354:	4ba1      	ldr	r3, [pc, #644]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800935e:	4b9f      	ldr	r3, [pc, #636]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009362:	0b1b      	lsrs	r3, r3, #12
 8009364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009368:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800936a:	4b9c      	ldr	r3, [pc, #624]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	091b      	lsrs	r3, r3, #4
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009376:	4b99      	ldr	r3, [pc, #612]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937a:	08db      	lsrs	r3, r3, #3
 800937c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	fb02 f303 	mul.w	r3, r2, r3
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 8111 	beq.w	80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b02      	cmp	r3, #2
 800939e:	f000 8083 	beq.w	80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	f200 80a1 	bhi.w	80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d056      	beq.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093b6:	e099      	b.n	80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b8:	4b88      	ldr	r3, [pc, #544]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0320 	and.w	r3, r3, #32
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d02d      	beq.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093c4:	4b85      	ldr	r3, [pc, #532]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	08db      	lsrs	r3, r3, #3
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	4a84      	ldr	r2, [pc, #528]	@ (80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
 80093d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b7b      	ldr	r3, [pc, #492]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009402:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800941e:	e087      	b.n	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b6a      	ldr	r3, [pc, #424]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a03 	vldr	s12, [r7, #12]
 8009446:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009462:	e065      	b.n	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b59      	ldr	r3, [pc, #356]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a03 	vldr	s12, [r7, #12]
 800948a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094a6:	e043      	b.n	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b48      	ldr	r3, [pc, #288]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ea:	e021      	b.n	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fe:	4b37      	ldr	r3, [pc, #220]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009512:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800952e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009530:	4b2a      	ldr	r3, [pc, #168]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009534:	0a5b      	lsrs	r3, r3, #9
 8009536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800954a:	edd7 6a07 	vldr	s13, [r7, #28]
 800954e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009556:	ee17 2a90 	vmov	r2, s15
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800955e:	4b1f      	ldr	r3, [pc, #124]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009578:	edd7 6a07 	vldr	s13, [r7, #28]
 800957c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009584:	ee17 2a90 	vmov	r2, s15
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800958c:	4b13      	ldr	r3, [pc, #76]	@ (80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	0e1b      	lsrs	r3, r3, #24
 8009592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b2:	ee17 2a90 	vmov	r2, s15
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80095ba:	e008      	b.n	80095ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	609a      	str	r2, [r3, #8]
}
 80095ce:	bf00      	nop
 80095d0:	3724      	adds	r7, #36	@ 0x24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	58024400 	.word	0x58024400
 80095e0:	03d09000 	.word	0x03d09000
 80095e4:	46000000 	.word	0x46000000
 80095e8:	4c742400 	.word	0x4c742400
 80095ec:	4a742400 	.word	0x4a742400
 80095f0:	4af42400 	.word	0x4af42400

080095f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b089      	sub	sp, #36	@ 0x24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095fc:	4ba1      	ldr	r3, [pc, #644]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009606:	4b9f      	ldr	r3, [pc, #636]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	0d1b      	lsrs	r3, r3, #20
 800960c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009610:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009612:	4b9c      	ldr	r3, [pc, #624]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800961e:	4b99      	ldr	r3, [pc, #612]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009622:	08db      	lsrs	r3, r3, #3
 8009624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8111 	beq.w	8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b02      	cmp	r3, #2
 8009646:	f000 8083 	beq.w	8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b02      	cmp	r3, #2
 800964e:	f200 80a1 	bhi.w	8009794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d056      	beq.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800965e:	e099      	b.n	8009794 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009660:	4b88      	ldr	r3, [pc, #544]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d02d      	beq.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800966c:	4b85      	ldr	r3, [pc, #532]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	08db      	lsrs	r3, r3, #3
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	4a84      	ldr	r2, [pc, #528]	@ (8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b7b      	ldr	r3, [pc, #492]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096c6:	e087      	b.n	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096da:	4b6a      	ldr	r3, [pc, #424]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970a:	e065      	b.n	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009716:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800971a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971e:	4b59      	ldr	r3, [pc, #356]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009732:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974e:	e043      	b.n	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009898 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800975e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009762:	4b48      	ldr	r3, [pc, #288]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009772:	ed97 6a03 	vldr	s12, [r7, #12]
 8009776:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800977a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009792:	e021      	b.n	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a6:	4b37      	ldr	r3, [pc, #220]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80097d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	0a5b      	lsrs	r3, r3, #9
 80097de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097fe:	ee17 2a90 	vmov	r2, s15
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009806:	4b1f      	ldr	r3, [pc, #124]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980a:	0c1b      	lsrs	r3, r3, #16
 800980c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009810:	ee07 3a90 	vmov	s15, r3
 8009814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009818:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800981c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009820:	edd7 6a07 	vldr	s13, [r7, #28]
 8009824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800982c:	ee17 2a90 	vmov	r2, s15
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009834:	4b13      	ldr	r3, [pc, #76]	@ (8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009838:	0e1b      	lsrs	r3, r3, #24
 800983a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800984a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800984e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800985a:	ee17 2a90 	vmov	r2, s15
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009862:	e008      	b.n	8009876 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	609a      	str	r2, [r3, #8]
}
 8009876:	bf00      	nop
 8009878:	3724      	adds	r7, #36	@ 0x24
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	58024400 	.word	0x58024400
 8009888:	03d09000 	.word	0x03d09000
 800988c:	46000000 	.word	0x46000000
 8009890:	4c742400 	.word	0x4c742400
 8009894:	4a742400 	.word	0x4a742400
 8009898:	4af42400 	.word	0x4af42400

0800989c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098aa:	4b53      	ldr	r3, [pc, #332]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d101      	bne.n	80098ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e099      	b.n	80099ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098ba:	4b4f      	ldr	r3, [pc, #316]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a4e      	ldr	r2, [pc, #312]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098c6:	f7fb fd79 	bl	80053bc <HAL_GetTick>
 80098ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098cc:	e008      	b.n	80098e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098ce:	f7fb fd75 	bl	80053bc <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d901      	bls.n	80098e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e086      	b.n	80099ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098e0:	4b45      	ldr	r3, [pc, #276]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098ec:	4b42      	ldr	r3, [pc, #264]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	031b      	lsls	r3, r3, #12
 80098fa:	493f      	ldr	r1, [pc, #252]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	3b01      	subs	r3, #1
 8009906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	3b01      	subs	r3, #1
 8009910:	025b      	lsls	r3, r3, #9
 8009912:	b29b      	uxth	r3, r3
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	3b01      	subs	r3, #1
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	3b01      	subs	r3, #1
 800992a:	061b      	lsls	r3, r3, #24
 800992c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009930:	4931      	ldr	r1, [pc, #196]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009932:	4313      	orrs	r3, r2
 8009934:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009936:	4b30      	ldr	r3, [pc, #192]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	492d      	ldr	r1, [pc, #180]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009944:	4313      	orrs	r3, r2
 8009946:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009948:	4b2b      	ldr	r3, [pc, #172]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	f023 0220 	bic.w	r2, r3, #32
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	4928      	ldr	r1, [pc, #160]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800995a:	4b27      	ldr	r3, [pc, #156]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	4a26      	ldr	r2, [pc, #152]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009960:	f023 0310 	bic.w	r3, r3, #16
 8009964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009966:	4b24      	ldr	r3, [pc, #144]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800996a:	4b24      	ldr	r3, [pc, #144]	@ (80099fc <RCCEx_PLL2_Config+0x160>)
 800996c:	4013      	ands	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	69d2      	ldr	r2, [r2, #28]
 8009972:	00d2      	lsls	r2, r2, #3
 8009974:	4920      	ldr	r1, [pc, #128]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800997a:	4b1f      	ldr	r3, [pc, #124]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 800997c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997e:	4a1e      	ldr	r2, [pc, #120]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009980:	f043 0310 	orr.w	r3, r3, #16
 8009984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d106      	bne.n	800999a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800998c:	4b1a      	ldr	r3, [pc, #104]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 800998e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009990:	4a19      	ldr	r2, [pc, #100]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 8009992:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009996:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009998:	e00f      	b.n	80099ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d106      	bne.n	80099ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099a0:	4b15      	ldr	r3, [pc, #84]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	4a14      	ldr	r2, [pc, #80]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099ac:	e005      	b.n	80099ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099ae:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b2:	4a11      	ldr	r2, [pc, #68]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099ba:	4b0f      	ldr	r3, [pc, #60]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a0e      	ldr	r2, [pc, #56]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c6:	f7fb fcf9 	bl	80053bc <HAL_GetTick>
 80099ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099cc:	e008      	b.n	80099e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099ce:	f7fb fcf5 	bl	80053bc <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e006      	b.n	80099ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <RCCEx_PLL2_Config+0x15c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f0      	beq.n	80099ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	ffff0007 	.word	0xffff0007

08009a00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a0e:	4b53      	ldr	r3, [pc, #332]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d101      	bne.n	8009a1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e099      	b.n	8009b52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a4e      	ldr	r2, [pc, #312]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2a:	f7fb fcc7 	bl	80053bc <HAL_GetTick>
 8009a2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a30:	e008      	b.n	8009a44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a32:	f7fb fcc3 	bl	80053bc <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d901      	bls.n	8009a44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e086      	b.n	8009b52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a44:	4b45      	ldr	r3, [pc, #276]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1f0      	bne.n	8009a32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a50:	4b42      	ldr	r3, [pc, #264]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	051b      	lsls	r3, r3, #20
 8009a5e:	493f      	ldr	r1, [pc, #252]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	025b      	lsls	r3, r3, #9
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	041b      	lsls	r3, r3, #16
 8009a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	061b      	lsls	r3, r3, #24
 8009a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a94:	4931      	ldr	r1, [pc, #196]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a9a:	4b30      	ldr	r3, [pc, #192]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	492d      	ldr	r1, [pc, #180]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009aac:	4b2b      	ldr	r3, [pc, #172]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	4928      	ldr	r1, [pc, #160]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	4a26      	ldr	r2, [pc, #152]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aca:	4b24      	ldr	r3, [pc, #144]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ace:	4b24      	ldr	r3, [pc, #144]	@ (8009b60 <RCCEx_PLL3_Config+0x160>)
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	69d2      	ldr	r2, [r2, #28]
 8009ad6:	00d2      	lsls	r2, r2, #3
 8009ad8:	4920      	ldr	r1, [pc, #128]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ade:	4b1f      	ldr	r3, [pc, #124]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009af0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	4a19      	ldr	r2, [pc, #100]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009af6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009afc:	e00f      	b.n	8009b1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d106      	bne.n	8009b12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b04:	4b15      	ldr	r3, [pc, #84]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	4a14      	ldr	r2, [pc, #80]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b10:	e005      	b.n	8009b1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b12:	4b12      	ldr	r3, [pc, #72]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	4a11      	ldr	r2, [pc, #68]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a0e      	ldr	r2, [pc, #56]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2a:	f7fb fc47 	bl	80053bc <HAL_GetTick>
 8009b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b30:	e008      	b.n	8009b44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b32:	f7fb fc43 	bl	80053bc <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d901      	bls.n	8009b44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e006      	b.n	8009b52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <RCCEx_PLL3_Config+0x15c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f0      	beq.n	8009b32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	ffff0007 	.word	0xffff0007

08009b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e049      	b.n	8009c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f841 	bl	8009c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f000 f9e8 	bl	8009f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d001      	beq.n	8009c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e054      	b.n	8009cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0201 	orr.w	r2, r2, #1
 8009c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a26      	ldr	r2, [pc, #152]	@ (8009cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d022      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6a:	d01d      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a22      	ldr	r2, [pc, #136]	@ (8009cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d018      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a21      	ldr	r2, [pc, #132]	@ (8009d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a1f      	ldr	r2, [pc, #124]	@ (8009d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d00e      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d009      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a1c      	ldr	r2, [pc, #112]	@ (8009d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <HAL_TIM_Base_Start_IT+0x80>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8009d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d115      	bne.n	8009cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689a      	ldr	r2, [r3, #8]
 8009cae:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <HAL_TIM_Base_Start_IT+0xec>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b06      	cmp	r3, #6
 8009cb8:	d015      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cc0:	d011      	beq.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0201 	orr.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd2:	e008      	b.n	8009ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e000      	b.n	8009ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40000400 	.word	0x40000400
 8009d00:	40000800 	.word	0x40000800
 8009d04:	40000c00 	.word	0x40000c00
 8009d08:	40010400 	.word	0x40010400
 8009d0c:	40001800 	.word	0x40001800
 8009d10:	40014000 	.word	0x40014000
 8009d14:	00010007 	.word	0x00010007

08009d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01b      	beq.n	8009d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0202 	mvn.w	r2, #2
 8009d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f8e9 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009d68:	e005      	b.n	8009d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8db 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f8ec 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d020      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0304 	and.w	r3, r3, #4
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01b      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0204 	mvn.w	r2, #4
 8009d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8c3 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009db4:	e005      	b.n	8009dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8b5 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f8c6 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d020      	beq.n	8009e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01b      	beq.n	8009e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0208 	mvn.w	r2, #8
 8009de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2204      	movs	r2, #4
 8009dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f89d 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009e00:	e005      	b.n	8009e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f88f 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f8a0 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d020      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01b      	beq.n	8009e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0210 	mvn.w	r2, #16
 8009e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2208      	movs	r2, #8
 8009e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f877 	bl	8009f3a <HAL_TIM_IC_CaptureCallback>
 8009e4c:	e005      	b.n	8009e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f869 	bl	8009f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f87a 	bl	8009f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0201 	mvn.w	r2, #1
 8009e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fa fd2e 	bl	80048e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f90d 	bl	800a0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f905 	bl	800a0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f834 	bl	8009f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00c      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f06f 0220 	mvn.w	r2, #32
 8009f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8cd 	bl	800a0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a43      	ldr	r2, [pc, #268]	@ (800a098 <TIM_Base_SetConfig+0x120>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d013      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f96:	d00f      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a40      	ldr	r2, [pc, #256]	@ (800a09c <TIM_Base_SetConfig+0x124>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00b      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3f      	ldr	r2, [pc, #252]	@ (800a0a0 <TIM_Base_SetConfig+0x128>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d007      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a3e      	ldr	r2, [pc, #248]	@ (800a0a4 <TIM_Base_SetConfig+0x12c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a3d      	ldr	r2, [pc, #244]	@ (800a0a8 <TIM_Base_SetConfig+0x130>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d108      	bne.n	8009fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a32      	ldr	r2, [pc, #200]	@ (800a098 <TIM_Base_SetConfig+0x120>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d01f      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd8:	d01b      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800a09c <TIM_Base_SetConfig+0x124>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d017      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2e      	ldr	r2, [pc, #184]	@ (800a0a0 <TIM_Base_SetConfig+0x128>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d013      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a2d      	ldr	r2, [pc, #180]	@ (800a0a4 <TIM_Base_SetConfig+0x12c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d00f      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a2c      	ldr	r2, [pc, #176]	@ (800a0a8 <TIM_Base_SetConfig+0x130>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d00b      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a2b      	ldr	r2, [pc, #172]	@ (800a0ac <TIM_Base_SetConfig+0x134>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d007      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b0 <TIM_Base_SetConfig+0x138>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d003      	beq.n	800a012 <TIM_Base_SetConfig+0x9a>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a29      	ldr	r2, [pc, #164]	@ (800a0b4 <TIM_Base_SetConfig+0x13c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d108      	bne.n	800a024 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a14      	ldr	r2, [pc, #80]	@ (800a098 <TIM_Base_SetConfig+0x120>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00f      	beq.n	800a06a <TIM_Base_SetConfig+0xf2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a16      	ldr	r2, [pc, #88]	@ (800a0a8 <TIM_Base_SetConfig+0x130>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00b      	beq.n	800a06a <TIM_Base_SetConfig+0xf2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a15      	ldr	r2, [pc, #84]	@ (800a0ac <TIM_Base_SetConfig+0x134>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <TIM_Base_SetConfig+0xf2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a14      	ldr	r2, [pc, #80]	@ (800a0b0 <TIM_Base_SetConfig+0x138>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d003      	beq.n	800a06a <TIM_Base_SetConfig+0xf2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a13      	ldr	r2, [pc, #76]	@ (800a0b4 <TIM_Base_SetConfig+0x13c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d103      	bne.n	800a072 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	691a      	ldr	r2, [r3, #16]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f043 0204 	orr.w	r2, r3, #4
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	601a      	str	r2, [r3, #0]
}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	40010000 	.word	0x40010000
 800a09c:	40000400 	.word	0x40000400
 800a0a0:	40000800 	.word	0x40000800
 800a0a4:	40000c00 	.word	0x40000c00
 800a0a8:	40010400 	.word	0x40010400
 800a0ac:	40014000 	.word	0x40014000
 800a0b0:	40014400 	.word	0x40014400
 800a0b4:	40014800 	.word	0x40014800

0800a0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e042      	b.n	800a18c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7fa fd57 	bl	8004bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2224      	movs	r2, #36	@ 0x24
 800a122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0201 	bic.w	r2, r2, #1
 800a134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fe1e 	bl	800ad80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f8b3 	bl	800a2b0 <UART_SetConfig>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e01b      	b.n	800a18c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0201 	orr.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fe9d 	bl	800aec4 <UART_CheckIdleState>
 800a18a:	4603      	mov	r3, r0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08a      	sub	sp, #40	@ 0x28
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	d17b      	bne.n	800a2a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <HAL_UART_Transmit+0x26>
 800a1b4:	88fb      	ldrh	r3, [r7, #6]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e074      	b.n	800a2a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1ce:	f7fb f8f5 	bl	80053bc <HAL_GetTick>
 800a1d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ec:	d108      	bne.n	800a200 <HAL_UART_Transmit+0x6c>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d104      	bne.n	800a200 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	e003      	b.n	800a208 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a204:	2300      	movs	r3, #0
 800a206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a208:	e030      	b.n	800a26c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2200      	movs	r2, #0
 800a212:	2180      	movs	r1, #128	@ 0x80
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 feff 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e03d      	b.n	800a2a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a240:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	3302      	adds	r3, #2
 800a246:	61bb      	str	r3, [r7, #24]
 800a248:	e007      	b.n	800a25a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	781a      	ldrb	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	3301      	adds	r3, #1
 800a258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a260:	b29b      	uxth	r3, r3
 800a262:	3b01      	subs	r3, #1
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a272:	b29b      	uxth	r3, r3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1c8      	bne.n	800a20a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2200      	movs	r2, #0
 800a280:	2140      	movs	r1, #64	@ 0x40
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fec8 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e006      	b.n	800a2a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	e000      	b.n	800a2a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a2a6:	2302      	movs	r3, #2
  }
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2b4:	b092      	sub	sp, #72	@ 0x48
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	4bbe      	ldr	r3, [pc, #760]	@ (800a5d8 <UART_SetConfig+0x328>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	6812      	ldr	r2, [r2, #0]
 800a2e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4ab3      	ldr	r2, [pc, #716]	@ (800a5dc <UART_SetConfig+0x32c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a318:	4313      	orrs	r3, r2
 800a31a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	4baf      	ldr	r3, [pc, #700]	@ (800a5e0 <UART_SetConfig+0x330>)
 800a324:	4013      	ands	r3, r2
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a336:	f023 010f 	bic.w	r1, r3, #15
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4aa6      	ldr	r2, [pc, #664]	@ (800a5e4 <UART_SetConfig+0x334>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d177      	bne.n	800a440 <UART_SetConfig+0x190>
 800a350:	4ba5      	ldr	r3, [pc, #660]	@ (800a5e8 <UART_SetConfig+0x338>)
 800a352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a358:	2b28      	cmp	r3, #40	@ 0x28
 800a35a:	d86d      	bhi.n	800a438 <UART_SetConfig+0x188>
 800a35c:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <UART_SetConfig+0xb4>)
 800a35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a362:	bf00      	nop
 800a364:	0800a409 	.word	0x0800a409
 800a368:	0800a439 	.word	0x0800a439
 800a36c:	0800a439 	.word	0x0800a439
 800a370:	0800a439 	.word	0x0800a439
 800a374:	0800a439 	.word	0x0800a439
 800a378:	0800a439 	.word	0x0800a439
 800a37c:	0800a439 	.word	0x0800a439
 800a380:	0800a439 	.word	0x0800a439
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a439 	.word	0x0800a439
 800a38c:	0800a439 	.word	0x0800a439
 800a390:	0800a439 	.word	0x0800a439
 800a394:	0800a439 	.word	0x0800a439
 800a398:	0800a439 	.word	0x0800a439
 800a39c:	0800a439 	.word	0x0800a439
 800a3a0:	0800a439 	.word	0x0800a439
 800a3a4:	0800a419 	.word	0x0800a419
 800a3a8:	0800a439 	.word	0x0800a439
 800a3ac:	0800a439 	.word	0x0800a439
 800a3b0:	0800a439 	.word	0x0800a439
 800a3b4:	0800a439 	.word	0x0800a439
 800a3b8:	0800a439 	.word	0x0800a439
 800a3bc:	0800a439 	.word	0x0800a439
 800a3c0:	0800a439 	.word	0x0800a439
 800a3c4:	0800a421 	.word	0x0800a421
 800a3c8:	0800a439 	.word	0x0800a439
 800a3cc:	0800a439 	.word	0x0800a439
 800a3d0:	0800a439 	.word	0x0800a439
 800a3d4:	0800a439 	.word	0x0800a439
 800a3d8:	0800a439 	.word	0x0800a439
 800a3dc:	0800a439 	.word	0x0800a439
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a429 	.word	0x0800a429
 800a3e8:	0800a439 	.word	0x0800a439
 800a3ec:	0800a439 	.word	0x0800a439
 800a3f0:	0800a439 	.word	0x0800a439
 800a3f4:	0800a439 	.word	0x0800a439
 800a3f8:	0800a439 	.word	0x0800a439
 800a3fc:	0800a439 	.word	0x0800a439
 800a400:	0800a439 	.word	0x0800a439
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e222      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e21e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e21a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e216      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e212      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e20e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a438:	2380      	movs	r3, #128	@ 0x80
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e20a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a69      	ldr	r2, [pc, #420]	@ (800a5ec <UART_SetConfig+0x33c>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d130      	bne.n	800a4ac <UART_SetConfig+0x1fc>
 800a44a:	4b67      	ldr	r3, [pc, #412]	@ (800a5e8 <UART_SetConfig+0x338>)
 800a44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	2b05      	cmp	r3, #5
 800a454:	d826      	bhi.n	800a4a4 <UART_SetConfig+0x1f4>
 800a456:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <UART_SetConfig+0x1ac>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a475 	.word	0x0800a475
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a48d 	.word	0x0800a48d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	2300      	movs	r3, #0
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e1ec      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e1e8      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e1e4      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e1e0      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a494:	2320      	movs	r3, #32
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e1dc      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e1d8      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e1d4      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a4f      	ldr	r2, [pc, #316]	@ (800a5f0 <UART_SetConfig+0x340>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d130      	bne.n	800a518 <UART_SetConfig+0x268>
 800a4b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a5e8 <UART_SetConfig+0x338>)
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d826      	bhi.n	800a510 <UART_SetConfig+0x260>
 800a4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c8 <UART_SetConfig+0x218>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a509 	.word	0x0800a509
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e1b6      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e1b2      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e1ae      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e1aa      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a500:	2320      	movs	r3, #32
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e1a6      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a508:	2340      	movs	r3, #64	@ 0x40
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e1a2      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a510:	2380      	movs	r3, #128	@ 0x80
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e19e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a35      	ldr	r2, [pc, #212]	@ (800a5f4 <UART_SetConfig+0x344>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d130      	bne.n	800a584 <UART_SetConfig+0x2d4>
 800a522:	4b31      	ldr	r3, [pc, #196]	@ (800a5e8 <UART_SetConfig+0x338>)
 800a524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d826      	bhi.n	800a57c <UART_SetConfig+0x2cc>
 800a52e:	a201      	add	r2, pc, #4	@ (adr r2, 800a534 <UART_SetConfig+0x284>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a54d 	.word	0x0800a54d
 800a538:	0800a555 	.word	0x0800a555
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a565 	.word	0x0800a565
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e180      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e17c      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e178      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e174      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a56c:	2320      	movs	r3, #32
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e170      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a574:	2340      	movs	r3, #64	@ 0x40
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e16c      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a57c:	2380      	movs	r3, #128	@ 0x80
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e168      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a1b      	ldr	r2, [pc, #108]	@ (800a5f8 <UART_SetConfig+0x348>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d142      	bne.n	800a614 <UART_SetConfig+0x364>
 800a58e:	4b16      	ldr	r3, [pc, #88]	@ (800a5e8 <UART_SetConfig+0x338>)
 800a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	2b05      	cmp	r3, #5
 800a598:	d838      	bhi.n	800a60c <UART_SetConfig+0x35c>
 800a59a:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a0 <UART_SetConfig+0x2f0>)
 800a59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a0:	0800a5b9 	.word	0x0800a5b9
 800a5a4:	0800a5c1 	.word	0x0800a5c1
 800a5a8:	0800a5c9 	.word	0x0800a5c9
 800a5ac:	0800a5d1 	.word	0x0800a5d1
 800a5b0:	0800a5fd 	.word	0x0800a5fd
 800a5b4:	0800a605 	.word	0x0800a605
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5be:	e14a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e146      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e142      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e13e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a5d8:	cfff69f3 	.word	0xcfff69f3
 800a5dc:	58000c00 	.word	0x58000c00
 800a5e0:	11fff4ff 	.word	0x11fff4ff
 800a5e4:	40011000 	.word	0x40011000
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	40004400 	.word	0x40004400
 800a5f0:	40004800 	.word	0x40004800
 800a5f4:	40004c00 	.word	0x40004c00
 800a5f8:	40005000 	.word	0x40005000
 800a5fc:	2320      	movs	r3, #32
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e128      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a604:	2340      	movs	r3, #64	@ 0x40
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e124      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a60c:	2380      	movs	r3, #128	@ 0x80
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a612:	e120      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4acb      	ldr	r2, [pc, #812]	@ (800a948 <UART_SetConfig+0x698>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d176      	bne.n	800a70c <UART_SetConfig+0x45c>
 800a61e:	4bcb      	ldr	r3, [pc, #812]	@ (800a94c <UART_SetConfig+0x69c>)
 800a620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a626:	2b28      	cmp	r3, #40	@ 0x28
 800a628:	d86c      	bhi.n	800a704 <UART_SetConfig+0x454>
 800a62a:	a201      	add	r2, pc, #4	@ (adr r2, 800a630 <UART_SetConfig+0x380>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6d5 	.word	0x0800a6d5
 800a634:	0800a705 	.word	0x0800a705
 800a638:	0800a705 	.word	0x0800a705
 800a63c:	0800a705 	.word	0x0800a705
 800a640:	0800a705 	.word	0x0800a705
 800a644:	0800a705 	.word	0x0800a705
 800a648:	0800a705 	.word	0x0800a705
 800a64c:	0800a705 	.word	0x0800a705
 800a650:	0800a6dd 	.word	0x0800a6dd
 800a654:	0800a705 	.word	0x0800a705
 800a658:	0800a705 	.word	0x0800a705
 800a65c:	0800a705 	.word	0x0800a705
 800a660:	0800a705 	.word	0x0800a705
 800a664:	0800a705 	.word	0x0800a705
 800a668:	0800a705 	.word	0x0800a705
 800a66c:	0800a705 	.word	0x0800a705
 800a670:	0800a6e5 	.word	0x0800a6e5
 800a674:	0800a705 	.word	0x0800a705
 800a678:	0800a705 	.word	0x0800a705
 800a67c:	0800a705 	.word	0x0800a705
 800a680:	0800a705 	.word	0x0800a705
 800a684:	0800a705 	.word	0x0800a705
 800a688:	0800a705 	.word	0x0800a705
 800a68c:	0800a705 	.word	0x0800a705
 800a690:	0800a6ed 	.word	0x0800a6ed
 800a694:	0800a705 	.word	0x0800a705
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a705 	.word	0x0800a705
 800a6a4:	0800a705 	.word	0x0800a705
 800a6a8:	0800a705 	.word	0x0800a705
 800a6ac:	0800a705 	.word	0x0800a705
 800a6b0:	0800a6f5 	.word	0x0800a6f5
 800a6b4:	0800a705 	.word	0x0800a705
 800a6b8:	0800a705 	.word	0x0800a705
 800a6bc:	0800a705 	.word	0x0800a705
 800a6c0:	0800a705 	.word	0x0800a705
 800a6c4:	0800a705 	.word	0x0800a705
 800a6c8:	0800a705 	.word	0x0800a705
 800a6cc:	0800a705 	.word	0x0800a705
 800a6d0:	0800a6fd 	.word	0x0800a6fd
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6da:	e0bc      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a6dc:	2304      	movs	r3, #4
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e2:	e0b8      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ea:	e0b4      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f2:	e0b0      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a6f4:	2320      	movs	r3, #32
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fa:	e0ac      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a6fc:	2340      	movs	r3, #64	@ 0x40
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a702:	e0a8      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a704:	2380      	movs	r3, #128	@ 0x80
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70a:	e0a4      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a8f      	ldr	r2, [pc, #572]	@ (800a950 <UART_SetConfig+0x6a0>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d130      	bne.n	800a778 <UART_SetConfig+0x4c8>
 800a716:	4b8d      	ldr	r3, [pc, #564]	@ (800a94c <UART_SetConfig+0x69c>)
 800a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	2b05      	cmp	r3, #5
 800a720:	d826      	bhi.n	800a770 <UART_SetConfig+0x4c0>
 800a722:	a201      	add	r2, pc, #4	@ (adr r2, 800a728 <UART_SetConfig+0x478>)
 800a724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	0800a751 	.word	0x0800a751
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a746:	e086      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74e:	e082      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a756:	e07e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75e:	e07a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a760:	2320      	movs	r3, #32
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e076      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a768:	2340      	movs	r3, #64	@ 0x40
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e072      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a770:	2380      	movs	r3, #128	@ 0x80
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e06e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a75      	ldr	r2, [pc, #468]	@ (800a954 <UART_SetConfig+0x6a4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d130      	bne.n	800a7e4 <UART_SetConfig+0x534>
 800a782:	4b72      	ldr	r3, [pc, #456]	@ (800a94c <UART_SetConfig+0x69c>)
 800a784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d826      	bhi.n	800a7dc <UART_SetConfig+0x52c>
 800a78e:	a201      	add	r2, pc, #4	@ (adr r2, 800a794 <UART_SetConfig+0x4e4>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7ad 	.word	0x0800a7ad
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7cd 	.word	0x0800a7cd
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e050      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e04c      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7bc:	2308      	movs	r3, #8
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e048      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e044      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7cc:	2320      	movs	r3, #32
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e040      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7d4:	2340      	movs	r3, #64	@ 0x40
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e03c      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7dc:	2380      	movs	r3, #128	@ 0x80
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e038      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a5b      	ldr	r2, [pc, #364]	@ (800a958 <UART_SetConfig+0x6a8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d130      	bne.n	800a850 <UART_SetConfig+0x5a0>
 800a7ee:	4b57      	ldr	r3, [pc, #348]	@ (800a94c <UART_SetConfig+0x69c>)
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d826      	bhi.n	800a848 <UART_SetConfig+0x598>
 800a7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a800 <UART_SetConfig+0x550>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a819 	.word	0x0800a819
 800a804:	0800a821 	.word	0x0800a821
 800a808:	0800a829 	.word	0x0800a829
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a841 	.word	0x0800a841
 800a818:	2302      	movs	r3, #2
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e01a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a820:	2304      	movs	r3, #4
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e016      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a828:	2308      	movs	r3, #8
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e012      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a830:	2310      	movs	r3, #16
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e00e      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a838:	2320      	movs	r3, #32
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e00a      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a840:	2340      	movs	r3, #64	@ 0x40
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e006      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a848:	2380      	movs	r3, #128	@ 0x80
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e002      	b.n	800a856 <UART_SetConfig+0x5a6>
 800a850:	2380      	movs	r3, #128	@ 0x80
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a3f      	ldr	r2, [pc, #252]	@ (800a958 <UART_SetConfig+0x6a8>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	f040 80f8 	bne.w	800aa52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a862:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a866:	2b20      	cmp	r3, #32
 800a868:	dc46      	bgt.n	800a8f8 <UART_SetConfig+0x648>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	f2c0 8082 	blt.w	800a974 <UART_SetConfig+0x6c4>
 800a870:	3b02      	subs	r3, #2
 800a872:	2b1e      	cmp	r3, #30
 800a874:	d87e      	bhi.n	800a974 <UART_SetConfig+0x6c4>
 800a876:	a201      	add	r2, pc, #4	@ (adr r2, 800a87c <UART_SetConfig+0x5cc>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a8ff 	.word	0x0800a8ff
 800a880:	0800a975 	.word	0x0800a975
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a975 	.word	0x0800a975
 800a88c:	0800a975 	.word	0x0800a975
 800a890:	0800a975 	.word	0x0800a975
 800a894:	0800a917 	.word	0x0800a917
 800a898:	0800a975 	.word	0x0800a975
 800a89c:	0800a975 	.word	0x0800a975
 800a8a0:	0800a975 	.word	0x0800a975
 800a8a4:	0800a975 	.word	0x0800a975
 800a8a8:	0800a975 	.word	0x0800a975
 800a8ac:	0800a975 	.word	0x0800a975
 800a8b0:	0800a975 	.word	0x0800a975
 800a8b4:	0800a927 	.word	0x0800a927
 800a8b8:	0800a975 	.word	0x0800a975
 800a8bc:	0800a975 	.word	0x0800a975
 800a8c0:	0800a975 	.word	0x0800a975
 800a8c4:	0800a975 	.word	0x0800a975
 800a8c8:	0800a975 	.word	0x0800a975
 800a8cc:	0800a975 	.word	0x0800a975
 800a8d0:	0800a975 	.word	0x0800a975
 800a8d4:	0800a975 	.word	0x0800a975
 800a8d8:	0800a975 	.word	0x0800a975
 800a8dc:	0800a975 	.word	0x0800a975
 800a8e0:	0800a975 	.word	0x0800a975
 800a8e4:	0800a975 	.word	0x0800a975
 800a8e8:	0800a975 	.word	0x0800a975
 800a8ec:	0800a975 	.word	0x0800a975
 800a8f0:	0800a975 	.word	0x0800a975
 800a8f4:	0800a967 	.word	0x0800a967
 800a8f8:	2b40      	cmp	r3, #64	@ 0x40
 800a8fa:	d037      	beq.n	800a96c <UART_SetConfig+0x6bc>
 800a8fc:	e03a      	b.n	800a974 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8fe:	f7fe fd0f 	bl	8009320 <HAL_RCCEx_GetD3PCLK1Freq>
 800a902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a904:	e03c      	b.n	800a980 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fd1e 	bl	800934c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a914:	e034      	b.n	800a980 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a916:	f107 0318 	add.w	r3, r7, #24
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fe6a 	bl	80095f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e02c      	b.n	800a980 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a926:	4b09      	ldr	r3, [pc, #36]	@ (800a94c <UART_SetConfig+0x69c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d016      	beq.n	800a960 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a932:	4b06      	ldr	r3, [pc, #24]	@ (800a94c <UART_SetConfig+0x69c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	08db      	lsrs	r3, r3, #3
 800a938:	f003 0303 	and.w	r3, r3, #3
 800a93c:	4a07      	ldr	r2, [pc, #28]	@ (800a95c <UART_SetConfig+0x6ac>)
 800a93e:	fa22 f303 	lsr.w	r3, r2, r3
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a944:	e01c      	b.n	800a980 <UART_SetConfig+0x6d0>
 800a946:	bf00      	nop
 800a948:	40011400 	.word	0x40011400
 800a94c:	58024400 	.word	0x58024400
 800a950:	40007800 	.word	0x40007800
 800a954:	40007c00 	.word	0x40007c00
 800a958:	58000c00 	.word	0x58000c00
 800a95c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a960:	4b9d      	ldr	r3, [pc, #628]	@ (800abd8 <UART_SetConfig+0x928>)
 800a962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a964:	e00c      	b.n	800a980 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a966:	4b9d      	ldr	r3, [pc, #628]	@ (800abdc <UART_SetConfig+0x92c>)
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96a:	e009      	b.n	800a980 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a972:	e005      	b.n	800a980 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a97e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a982:	2b00      	cmp	r3, #0
 800a984:	f000 81de 	beq.w	800ad44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	4a94      	ldr	r2, [pc, #592]	@ (800abe0 <UART_SetConfig+0x930>)
 800a98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a992:	461a      	mov	r2, r3
 800a994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a996:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	4413      	add	r3, r2
 800a9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d305      	bcc.n	800a9b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d903      	bls.n	800a9c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9be:	e1c1      	b.n	800ad44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	60bb      	str	r3, [r7, #8]
 800a9c6:	60fa      	str	r2, [r7, #12]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9cc:	4a84      	ldr	r2, [pc, #528]	@ (800abe0 <UART_SetConfig+0x930>)
 800a9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	607a      	str	r2, [r7, #4]
 800a9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9e2:	f7f5 ff9f 	bl	8000924 <__aeabi_uldivmod>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	020b      	lsls	r3, r1, #8
 800a9f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9fc:	0202      	lsls	r2, r0, #8
 800a9fe:	6979      	ldr	r1, [r7, #20]
 800aa00:	6849      	ldr	r1, [r1, #4]
 800aa02:	0849      	lsrs	r1, r1, #1
 800aa04:	2000      	movs	r0, #0
 800aa06:	460c      	mov	r4, r1
 800aa08:	4605      	mov	r5, r0
 800aa0a:	eb12 0804 	adds.w	r8, r2, r4
 800aa0e:	eb43 0905 	adc.w	r9, r3, r5
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	469a      	mov	sl, r3
 800aa1a:	4693      	mov	fp, r2
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	465b      	mov	r3, fp
 800aa20:	4640      	mov	r0, r8
 800aa22:	4649      	mov	r1, r9
 800aa24:	f7f5 ff7e 	bl	8000924 <__aeabi_uldivmod>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa36:	d308      	bcc.n	800aa4a <UART_SetConfig+0x79a>
 800aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa3e:	d204      	bcs.n	800aa4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa46:	60da      	str	r2, [r3, #12]
 800aa48:	e17c      	b.n	800ad44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa50:	e178      	b.n	800ad44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa5a:	f040 80c5 	bne.w	800abe8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	dc48      	bgt.n	800aaf8 <UART_SetConfig+0x848>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	db7b      	blt.n	800ab62 <UART_SetConfig+0x8b2>
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d879      	bhi.n	800ab62 <UART_SetConfig+0x8b2>
 800aa6e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa74 <UART_SetConfig+0x7c4>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800aaff 	.word	0x0800aaff
 800aa78:	0800ab07 	.word	0x0800ab07
 800aa7c:	0800ab63 	.word	0x0800ab63
 800aa80:	0800ab63 	.word	0x0800ab63
 800aa84:	0800ab0f 	.word	0x0800ab0f
 800aa88:	0800ab63 	.word	0x0800ab63
 800aa8c:	0800ab63 	.word	0x0800ab63
 800aa90:	0800ab63 	.word	0x0800ab63
 800aa94:	0800ab1f 	.word	0x0800ab1f
 800aa98:	0800ab63 	.word	0x0800ab63
 800aa9c:	0800ab63 	.word	0x0800ab63
 800aaa0:	0800ab63 	.word	0x0800ab63
 800aaa4:	0800ab63 	.word	0x0800ab63
 800aaa8:	0800ab63 	.word	0x0800ab63
 800aaac:	0800ab63 	.word	0x0800ab63
 800aab0:	0800ab63 	.word	0x0800ab63
 800aab4:	0800ab2f 	.word	0x0800ab2f
 800aab8:	0800ab63 	.word	0x0800ab63
 800aabc:	0800ab63 	.word	0x0800ab63
 800aac0:	0800ab63 	.word	0x0800ab63
 800aac4:	0800ab63 	.word	0x0800ab63
 800aac8:	0800ab63 	.word	0x0800ab63
 800aacc:	0800ab63 	.word	0x0800ab63
 800aad0:	0800ab63 	.word	0x0800ab63
 800aad4:	0800ab63 	.word	0x0800ab63
 800aad8:	0800ab63 	.word	0x0800ab63
 800aadc:	0800ab63 	.word	0x0800ab63
 800aae0:	0800ab63 	.word	0x0800ab63
 800aae4:	0800ab63 	.word	0x0800ab63
 800aae8:	0800ab63 	.word	0x0800ab63
 800aaec:	0800ab63 	.word	0x0800ab63
 800aaf0:	0800ab63 	.word	0x0800ab63
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	2b40      	cmp	r3, #64	@ 0x40
 800aafa:	d02e      	beq.n	800ab5a <UART_SetConfig+0x8aa>
 800aafc:	e031      	b.n	800ab62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aafe:	f7fd f997 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 800ab02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab04:	e033      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab06:	f7fd f9a9 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800ab0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab0c:	e02f      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe fc1a 	bl	800934c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1c:	e027      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab1e:	f107 0318 	add.w	r3, r7, #24
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fd66 	bl	80095f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e01f      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab2e:	4b2d      	ldr	r3, [pc, #180]	@ (800abe4 <UART_SetConfig+0x934>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab3a:	4b2a      	ldr	r3, [pc, #168]	@ (800abe4 <UART_SetConfig+0x934>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	4a24      	ldr	r2, [pc, #144]	@ (800abd8 <UART_SetConfig+0x928>)
 800ab46:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab4c:	e00f      	b.n	800ab6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab4e:	4b22      	ldr	r3, [pc, #136]	@ (800abd8 <UART_SetConfig+0x928>)
 800ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab52:	e00c      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab54:	4b21      	ldr	r3, [pc, #132]	@ (800abdc <UART_SetConfig+0x92c>)
 800ab56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab58:	e009      	b.n	800ab6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab60:	e005      	b.n	800ab6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80e7 	beq.w	800ad44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab7a:	4a19      	ldr	r2, [pc, #100]	@ (800abe0 <UART_SetConfig+0x930>)
 800ab7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab88:	005a      	lsls	r2, r3, #1
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	441a      	add	r2, r3
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	2b0f      	cmp	r3, #15
 800aba0:	d916      	bls.n	800abd0 <UART_SetConfig+0x920>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba8:	d212      	bcs.n	800abd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	b29b      	uxth	r3, r3
 800abae:	f023 030f 	bic.w	r3, r3, #15
 800abb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb6:	085b      	lsrs	r3, r3, #1
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f003 0307 	and.w	r3, r3, #7
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abc2:	4313      	orrs	r3, r2
 800abc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800abcc:	60da      	str	r2, [r3, #12]
 800abce:	e0b9      	b.n	800ad44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abd6:	e0b5      	b.n	800ad44 <UART_SetConfig+0xa94>
 800abd8:	03d09000 	.word	0x03d09000
 800abdc:	003d0900 	.word	0x003d0900
 800abe0:	080114ac 	.word	0x080114ac
 800abe4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800abe8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abec:	2b20      	cmp	r3, #32
 800abee:	dc49      	bgt.n	800ac84 <UART_SetConfig+0x9d4>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db7c      	blt.n	800acee <UART_SetConfig+0xa3e>
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d87a      	bhi.n	800acee <UART_SetConfig+0xa3e>
 800abf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <UART_SetConfig+0x950>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac8b 	.word	0x0800ac8b
 800ac04:	0800ac93 	.word	0x0800ac93
 800ac08:	0800acef 	.word	0x0800acef
 800ac0c:	0800acef 	.word	0x0800acef
 800ac10:	0800ac9b 	.word	0x0800ac9b
 800ac14:	0800acef 	.word	0x0800acef
 800ac18:	0800acef 	.word	0x0800acef
 800ac1c:	0800acef 	.word	0x0800acef
 800ac20:	0800acab 	.word	0x0800acab
 800ac24:	0800acef 	.word	0x0800acef
 800ac28:	0800acef 	.word	0x0800acef
 800ac2c:	0800acef 	.word	0x0800acef
 800ac30:	0800acef 	.word	0x0800acef
 800ac34:	0800acef 	.word	0x0800acef
 800ac38:	0800acef 	.word	0x0800acef
 800ac3c:	0800acef 	.word	0x0800acef
 800ac40:	0800acbb 	.word	0x0800acbb
 800ac44:	0800acef 	.word	0x0800acef
 800ac48:	0800acef 	.word	0x0800acef
 800ac4c:	0800acef 	.word	0x0800acef
 800ac50:	0800acef 	.word	0x0800acef
 800ac54:	0800acef 	.word	0x0800acef
 800ac58:	0800acef 	.word	0x0800acef
 800ac5c:	0800acef 	.word	0x0800acef
 800ac60:	0800acef 	.word	0x0800acef
 800ac64:	0800acef 	.word	0x0800acef
 800ac68:	0800acef 	.word	0x0800acef
 800ac6c:	0800acef 	.word	0x0800acef
 800ac70:	0800acef 	.word	0x0800acef
 800ac74:	0800acef 	.word	0x0800acef
 800ac78:	0800acef 	.word	0x0800acef
 800ac7c:	0800acef 	.word	0x0800acef
 800ac80:	0800ace1 	.word	0x0800ace1
 800ac84:	2b40      	cmp	r3, #64	@ 0x40
 800ac86:	d02e      	beq.n	800ace6 <UART_SetConfig+0xa36>
 800ac88:	e031      	b.n	800acee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac8a:	f7fd f8d1 	bl	8007e30 <HAL_RCC_GetPCLK1Freq>
 800ac8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac90:	e033      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac92:	f7fd f8e3 	bl	8007e5c <HAL_RCC_GetPCLK2Freq>
 800ac96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac98:	e02f      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fb54 	bl	800934c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca8:	e027      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acaa:	f107 0318 	add.w	r3, r7, #24
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fca0 	bl	80095f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb8:	e01f      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acba:	4b2d      	ldr	r3, [pc, #180]	@ (800ad70 <UART_SetConfig+0xac0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <UART_SetConfig+0xac0>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	08db      	lsrs	r3, r3, #3
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	4a28      	ldr	r2, [pc, #160]	@ (800ad74 <UART_SetConfig+0xac4>)
 800acd2:	fa22 f303 	lsr.w	r3, r2, r3
 800acd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acd8:	e00f      	b.n	800acfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800acda:	4b26      	ldr	r3, [pc, #152]	@ (800ad74 <UART_SetConfig+0xac4>)
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acde:	e00c      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ace0:	4b25      	ldr	r3, [pc, #148]	@ (800ad78 <UART_SetConfig+0xac8>)
 800ace2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace4:	e009      	b.n	800acfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ace6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acec:	e005      	b.n	800acfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800acf8:	bf00      	nop
    }

    if (pclk != 0U)
 800acfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d021      	beq.n	800ad44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad04:	4a1d      	ldr	r2, [pc, #116]	@ (800ad7c <UART_SetConfig+0xacc>)
 800ad06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	441a      	add	r2, r3
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	2b0f      	cmp	r3, #15
 800ad28:	d909      	bls.n	800ad3e <UART_SetConfig+0xa8e>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad30:	d205      	bcs.n	800ad3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60da      	str	r2, [r3, #12]
 800ad3c:	e002      	b.n	800ad44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2200      	movs	r2, #0
 800ad58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3748      	adds	r7, #72	@ 0x48
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad6e:	bf00      	nop
 800ad70:	58024400 	.word	0x58024400
 800ad74:	03d09000 	.word	0x03d09000
 800ad78:	003d0900 	.word	0x003d0900
 800ad7c:	080114ac 	.word	0x080114ac

0800ad80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00a      	beq.n	800adaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add0:	f003 0302 	and.w	r3, r3, #2
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00a      	beq.n	800adee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	430a      	orrs	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae14:	f003 0310 	and.w	r3, r3, #16
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00a      	beq.n	800ae32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01a      	beq.n	800ae96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae7e:	d10a      	bne.n	800ae96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	605a      	str	r2, [r3, #4]
  }
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b098      	sub	sp, #96	@ 0x60
 800aec8:	af02      	add	r7, sp, #8
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aed4:	f7fa fa72 	bl	80053bc <HAL_GetTick>
 800aed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d12f      	bne.n	800af48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aef0:	2200      	movs	r2, #0
 800aef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f88e 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d022      	beq.n	800af48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af16:	653b      	str	r3, [r7, #80]	@ 0x50
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af20:	647b      	str	r3, [r7, #68]	@ 0x44
 800af22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af28:	e841 2300 	strex	r3, r2, [r1]
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e6      	bne.n	800af02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2220      	movs	r2, #32
 800af38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e063      	b.n	800b010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	2b04      	cmp	r3, #4
 800af54:	d149      	bne.n	800afea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af5e:	2200      	movs	r2, #0
 800af60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f857 	bl	800b018 <UART_WaitOnFlagUntilTimeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d03c      	beq.n	800afea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	623b      	str	r3, [r7, #32]
   return(result);
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800af90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e6      	bne.n	800af70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3308      	adds	r3, #8
 800afa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f023 0301 	bic.w	r3, r3, #1
 800afb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3308      	adds	r3, #8
 800afc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afc2:	61fa      	str	r2, [r7, #28]
 800afc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	69b9      	ldr	r1, [r7, #24]
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	617b      	str	r3, [r7, #20]
   return(result);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e5      	bne.n	800afa2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e012      	b.n	800b010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2220      	movs	r2, #32
 800afee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3758      	adds	r7, #88	@ 0x58
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	4613      	mov	r3, r2
 800b026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b028:	e04f      	b.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d04b      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b032:	f7fa f9c3 	bl	80053bc <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	69ba      	ldr	r2, [r7, #24]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d302      	bcc.n	800b048 <UART_WaitOnFlagUntilTimeout+0x30>
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e04e      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d037      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b80      	cmp	r3, #128	@ 0x80
 800b05e:	d034      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2b40      	cmp	r3, #64	@ 0x40
 800b064:	d031      	beq.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b08      	cmp	r3, #8
 800b072:	d110      	bne.n	800b096 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2208      	movs	r2, #8
 800b07a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f839 	bl	800b0f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2208      	movs	r2, #8
 800b086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e029      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0a4:	d111      	bne.n	800b0ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f81f 	bl	800b0f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e00f      	b.n	800b0ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69da      	ldr	r2, [r3, #28]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	bf0c      	ite	eq
 800b0da:	2301      	moveq	r3, #1
 800b0dc:	2300      	movne	r3, #0
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d0a0      	beq.n	800b02a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b095      	sub	sp, #84	@ 0x54
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b104:	e853 3f00 	ldrex	r3, [r3]
 800b108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b11a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b11c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e6      	bne.n	800b0fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	4b1e      	ldr	r3, [pc, #120]	@ (800b1bc <UART_EndRxTransfer+0xc8>)
 800b142:	4013      	ands	r3, r2
 800b144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b14e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e5      	bne.n	800b12e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d118      	bne.n	800b19c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	e853 3f00 	ldrex	r3, [r3]
 800b176:	60bb      	str	r3, [r7, #8]
   return(result);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f023 0310 	bic.w	r3, r3, #16
 800b17e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b188:	61bb      	str	r3, [r7, #24]
 800b18a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18c:	6979      	ldr	r1, [r7, #20]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	e841 2300 	strex	r3, r2, [r1]
 800b194:	613b      	str	r3, [r7, #16]
   return(result);
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e6      	bne.n	800b16a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1b0:	bf00      	nop
 800b1b2:	3754      	adds	r7, #84	@ 0x54
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	effffffe 	.word	0xeffffffe

0800b1c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d101      	bne.n	800b1d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e027      	b.n	800b226 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2224      	movs	r2, #36	@ 0x24
 800b1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 0201 	bic.w	r2, r2, #1
 800b1fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b204:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2220      	movs	r2, #32
 800b218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b242:	2b01      	cmp	r3, #1
 800b244:	d101      	bne.n	800b24a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b246:	2302      	movs	r3, #2
 800b248:	e02d      	b.n	800b2a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2224      	movs	r2, #36	@ 0x24
 800b256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 0201 	bic.w	r2, r2, #1
 800b270:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f850 	bl	800b32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2220      	movs	r2, #32
 800b298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b084      	sub	sp, #16
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e02d      	b.n	800b322 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2224      	movs	r2, #36	@ 0x24
 800b2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0201 	bic.w	r2, r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f812 	bl	800b32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
	...

0800b32c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d108      	bne.n	800b34e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b34c:	e031      	b.n	800b3b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b34e:	2310      	movs	r3, #16
 800b350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b352:	2310      	movs	r3, #16
 800b354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	0e5b      	lsrs	r3, r3, #25
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 0307 	and.w	r3, r3, #7
 800b364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	0f5b      	lsrs	r3, r3, #29
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f003 0307 	and.w	r3, r3, #7
 800b374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	7b3a      	ldrb	r2, [r7, #12]
 800b37a:	4911      	ldr	r1, [pc, #68]	@ (800b3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b37c:	5c8a      	ldrb	r2, [r1, r2]
 800b37e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b382:	7b3a      	ldrb	r2, [r7, #12]
 800b384:	490f      	ldr	r1, [pc, #60]	@ (800b3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b388:	fb93 f3f2 	sdiv	r3, r3, r2
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	7b7a      	ldrb	r2, [r7, #13]
 800b398:	4909      	ldr	r1, [pc, #36]	@ (800b3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800b39a:	5c8a      	ldrb	r2, [r1, r2]
 800b39c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3a0:	7b7a      	ldrb	r2, [r7, #13]
 800b3a2:	4908      	ldr	r1, [pc, #32]	@ (800b3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	080114c4 	.word	0x080114c4
 800b3c4:	080114cc 	.word	0x080114cc

0800b3c8 <__NVIC_SetPriority>:
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	6039      	str	r1, [r7, #0]
 800b3d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b3d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	db0a      	blt.n	800b3f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	490c      	ldr	r1, [pc, #48]	@ (800b414 <__NVIC_SetPriority+0x4c>)
 800b3e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3e6:	0112      	lsls	r2, r2, #4
 800b3e8:	b2d2      	uxtb	r2, r2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b3f0:	e00a      	b.n	800b408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4908      	ldr	r1, [pc, #32]	@ (800b418 <__NVIC_SetPriority+0x50>)
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	3b04      	subs	r3, #4
 800b400:	0112      	lsls	r2, r2, #4
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	440b      	add	r3, r1
 800b406:	761a      	strb	r2, [r3, #24]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	e000e100 	.word	0xe000e100
 800b418:	e000ed00 	.word	0xe000ed00

0800b41c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b420:	4b05      	ldr	r3, [pc, #20]	@ (800b438 <SysTick_Handler+0x1c>)
 800b422:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b424:	f001 fdb0 	bl	800cf88 <xTaskGetSchedulerState>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d001      	beq.n	800b432 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b42e:	f002 fbab 	bl	800db88 <xPortSysTickHandler>
  }
}
 800b432:	bf00      	nop
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	e000e010 	.word	0xe000e010

0800b43c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b440:	2100      	movs	r1, #0
 800b442:	f06f 0004 	mvn.w	r0, #4
 800b446:	f7ff ffbf 	bl	800b3c8 <__NVIC_SetPriority>
#endif
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b456:	f3ef 8305 	mrs	r3, IPSR
 800b45a:	603b      	str	r3, [r7, #0]
  return(result);
 800b45c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b462:	f06f 0305 	mvn.w	r3, #5
 800b466:	607b      	str	r3, [r7, #4]
 800b468:	e00c      	b.n	800b484 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b46a:	4b0a      	ldr	r3, [pc, #40]	@ (800b494 <osKernelInitialize+0x44>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b472:	4b08      	ldr	r3, [pc, #32]	@ (800b494 <osKernelInitialize+0x44>)
 800b474:	2201      	movs	r2, #1
 800b476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b478:	2300      	movs	r3, #0
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	e002      	b.n	800b484 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b484:	687b      	ldr	r3, [r7, #4]
}
 800b486:	4618      	mov	r0, r3
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	24000ad8 	.word	0x24000ad8

0800b498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b49e:	f3ef 8305 	mrs	r3, IPSR
 800b4a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b4a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4aa:	f06f 0305 	mvn.w	r3, #5
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	e010      	b.n	800b4d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <osKernelStart+0x48>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d109      	bne.n	800b4ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4ba:	f7ff ffbf 	bl	800b43c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4be:	4b08      	ldr	r3, [pc, #32]	@ (800b4e0 <osKernelStart+0x48>)
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4c4:	f001 f8fc 	bl	800c6c0 <vTaskStartScheduler>
      stat = osOK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	607b      	str	r3, [r7, #4]
 800b4cc:	e002      	b.n	800b4d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4d4:	687b      	ldr	r3, [r7, #4]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	24000ad8 	.word	0x24000ad8

0800b4e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08e      	sub	sp, #56	@ 0x38
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f4:	f3ef 8305 	mrs	r3, IPSR
 800b4f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b4fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d17e      	bne.n	800b5fe <osThreadNew+0x11a>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d07b      	beq.n	800b5fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b506:	2380      	movs	r3, #128	@ 0x80
 800b508:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b50a:	2318      	movs	r3, #24
 800b50c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b512:	f04f 33ff 	mov.w	r3, #4294967295
 800b516:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d045      	beq.n	800b5aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <osThreadNew+0x48>
        name = attr->name;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <osThreadNew+0x6e>
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2b38      	cmp	r3, #56	@ 0x38
 800b544:	d805      	bhi.n	800b552 <osThreadNew+0x6e>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <osThreadNew+0x72>
        return (NULL);
 800b552:	2300      	movs	r3, #0
 800b554:	e054      	b.n	800b600 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	089b      	lsrs	r3, r3, #2
 800b564:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00e      	beq.n	800b58c <osThreadNew+0xa8>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	2ba7      	cmp	r3, #167	@ 0xa7
 800b574:	d90a      	bls.n	800b58c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <osThreadNew+0xa8>
        mem = 1;
 800b586:	2301      	movs	r3, #1
 800b588:	61bb      	str	r3, [r7, #24]
 800b58a:	e010      	b.n	800b5ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10c      	bne.n	800b5ae <osThreadNew+0xca>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d108      	bne.n	800b5ae <osThreadNew+0xca>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <osThreadNew+0xca>
          mem = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61bb      	str	r3, [r7, #24]
 800b5a8:	e001      	b.n	800b5ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d110      	bne.n	800b5d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5bc:	9202      	str	r2, [sp, #8]
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f000 fe3a 	bl	800c244 <xTaskCreateStatic>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	e013      	b.n	800b5fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d110      	bne.n	800b5fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	f107 0310 	add.w	r3, r7, #16
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 fe88 	bl	800c304 <xTaskCreate>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d001      	beq.n	800b5fe <osThreadNew+0x11a>
            hTask = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5fe:	693b      	ldr	r3, [r7, #16]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3728      	adds	r7, #40	@ 0x28
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4a07      	ldr	r2, [pc, #28]	@ (800b634 <vApplicationGetIdleTaskMemory+0x2c>)
 800b618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	4a06      	ldr	r2, [pc, #24]	@ (800b638 <vApplicationGetIdleTaskMemory+0x30>)
 800b61e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2280      	movs	r2, #128	@ 0x80
 800b624:	601a      	str	r2, [r3, #0]
}
 800b626:	bf00      	nop
 800b628:	3714      	adds	r7, #20
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	24000adc 	.word	0x24000adc
 800b638:	24000b84 	.word	0x24000b84

0800b63c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4a07      	ldr	r2, [pc, #28]	@ (800b668 <vApplicationGetTimerTaskMemory+0x2c>)
 800b64c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4a06      	ldr	r2, [pc, #24]	@ (800b66c <vApplicationGetTimerTaskMemory+0x30>)
 800b652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b65a:	601a      	str	r2, [r3, #0]
}
 800b65c:	bf00      	nop
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	24000d84 	.word	0x24000d84
 800b66c:	24000e2c 	.word	0x24000e2c

0800b670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f103 0208 	add.w	r2, r3, #8
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f04f 32ff 	mov.w	r2, #4294967295
 800b688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f103 0208 	add.w	r2, r3, #8
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f103 0208 	add.w	r2, r3, #8
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	689a      	ldr	r2, [r3, #8]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]
}
 800b706:	bf00      	nop
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b712:	b480      	push	{r7}
 800b714:	b085      	sub	sp, #20
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b728:	d103      	bne.n	800b732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	e00c      	b.n	800b74c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3308      	adds	r3, #8
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e002      	b.n	800b740 <vListInsert+0x2e>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d2f6      	bcs.n	800b73a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]
}
 800b778:	bf00      	nop
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6892      	ldr	r2, [r2, #8]
 800b79a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	6852      	ldr	r2, [r2, #4]
 800b7a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d103      	bne.n	800b7b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689a      	ldr	r2, [r3, #8]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	1e5a      	subs	r2, r3, #1
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7fe:	bf00      	nop
 800b800:	bf00      	nop
 800b802:	e7fd      	b.n	800b800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b804:	f002 f930 	bl	800da68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b814:	fb01 f303 	mul.w	r3, r1, r3
 800b818:	441a      	add	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b834:	3b01      	subs	r3, #1
 800b836:	68f9      	ldr	r1, [r7, #12]
 800b838:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	441a      	add	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	22ff      	movs	r2, #255	@ 0xff
 800b848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	22ff      	movs	r2, #255	@ 0xff
 800b850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d114      	bne.n	800b884 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01a      	beq.n	800b898 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3310      	adds	r3, #16
 800b866:	4618      	mov	r0, r3
 800b868:	f001 f9c8 	bl	800cbfc <xTaskRemoveFromEventList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d012      	beq.n	800b898 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b872:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a8 <xQueueGenericReset+0xd0>)
 800b874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	e009      	b.n	800b898 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3310      	adds	r3, #16
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fef1 	bl	800b670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3324      	adds	r3, #36	@ 0x24
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff feec 	bl	800b670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b898:	f002 f918 	bl	800dacc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b89c:	2301      	movs	r3, #1
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08e      	sub	sp, #56	@ 0x38
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10b      	bne.n	800b8d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8d2:	bf00      	nop
 800b8d4:	bf00      	nop
 800b8d6:	e7fd      	b.n	800b8d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10b      	bne.n	800b8f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <xQueueGenericCreateStatic+0x56>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <xQueueGenericCreateStatic+0x5a>
 800b902:	2301      	movs	r3, #1
 800b904:	e000      	b.n	800b908 <xQueueGenericCreateStatic+0x5c>
 800b906:	2300      	movs	r3, #0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10b      	bne.n	800b924 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	623b      	str	r3, [r7, #32]
}
 800b91e:	bf00      	nop
 800b920:	bf00      	nop
 800b922:	e7fd      	b.n	800b920 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d102      	bne.n	800b930 <xQueueGenericCreateStatic+0x84>
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <xQueueGenericCreateStatic+0x88>
 800b930:	2301      	movs	r3, #1
 800b932:	e000      	b.n	800b936 <xQueueGenericCreateStatic+0x8a>
 800b934:	2300      	movs	r3, #0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	61fb      	str	r3, [r7, #28]
}
 800b94c:	bf00      	nop
 800b94e:	bf00      	nop
 800b950:	e7fd      	b.n	800b94e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b952:	2350      	movs	r3, #80	@ 0x50
 800b954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b50      	cmp	r3, #80	@ 0x50
 800b95a:	d00b      	beq.n	800b974 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	61bb      	str	r3, [r7, #24]
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	e7fd      	b.n	800b970 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b974:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00d      	beq.n	800b99c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b988:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	4613      	mov	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f840 	bl	800ba1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3730      	adds	r7, #48	@ 0x30
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b08a      	sub	sp, #40	@ 0x28
 800b9aa:	af02      	add	r7, sp, #8
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	60b9      	str	r1, [r7, #8]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10b      	bne.n	800b9d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	613b      	str	r3, [r7, #16]
}
 800b9cc:	bf00      	nop
 800b9ce:	bf00      	nop
 800b9d0:	e7fd      	b.n	800b9ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	fb02 f303 	mul.w	r3, r2, r3
 800b9da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	3350      	adds	r3, #80	@ 0x50
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f002 f963 	bl	800dcac <pvPortMalloc>
 800b9e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d011      	beq.n	800ba12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	3350      	adds	r3, #80	@ 0x50
 800b9f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba00:	79fa      	ldrb	r2, [r7, #7]
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	4613      	mov	r3, r2
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f805 	bl	800ba1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba12:	69bb      	ldr	r3, [r7, #24]
	}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3720      	adds	r7, #32
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	e002      	b.n	800ba3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	69b8      	ldr	r0, [r7, #24]
 800ba4e:	f7ff fec3 	bl	800b7d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	78fa      	ldrb	r2, [r7, #3]
 800ba56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba5a:	bf00      	nop
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08e      	sub	sp, #56	@ 0x38
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba72:	2300      	movs	r3, #0
 800ba74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10b      	bne.n	800ba98 <xQueueGenericSend+0x34>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d103      	bne.n	800baa6 <xQueueGenericSend+0x42>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <xQueueGenericSend+0x46>
 800baa6:	2301      	movs	r3, #1
 800baa8:	e000      	b.n	800baac <xQueueGenericSend+0x48>
 800baaa:	2300      	movs	r3, #0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10b      	bne.n	800bac8 <xQueueGenericSend+0x64>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bac2:	bf00      	nop
 800bac4:	bf00      	nop
 800bac6:	e7fd      	b.n	800bac4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d103      	bne.n	800bad6 <xQueueGenericSend+0x72>
 800bace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <xQueueGenericSend+0x76>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e000      	b.n	800badc <xQueueGenericSend+0x78>
 800bada:	2300      	movs	r3, #0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10b      	bne.n	800baf8 <xQueueGenericSend+0x94>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	623b      	str	r3, [r7, #32]
}
 800baf2:	bf00      	nop
 800baf4:	bf00      	nop
 800baf6:	e7fd      	b.n	800baf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800baf8:	f001 fa46 	bl	800cf88 <xTaskGetSchedulerState>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <xQueueGenericSend+0xa4>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <xQueueGenericSend+0xa8>
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e000      	b.n	800bb0e <xQueueGenericSend+0xaa>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10b      	bne.n	800bb2a <xQueueGenericSend+0xc6>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	61fb      	str	r3, [r7, #28]
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop
 800bb28:	e7fd      	b.n	800bb26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb2a:	f001 ff9d 	bl	800da68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d302      	bcc.n	800bb40 <xQueueGenericSend+0xdc>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d129      	bne.n	800bb94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	68b9      	ldr	r1, [r7, #8]
 800bb44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb46:	f000 fa0f 	bl	800bf68 <prvCopyDataToQueue>
 800bb4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d010      	beq.n	800bb76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	3324      	adds	r3, #36	@ 0x24
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f001 f84f 	bl	800cbfc <xTaskRemoveFromEventList>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d013      	beq.n	800bb8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb64:	4b3f      	ldr	r3, [pc, #252]	@ (800bc64 <xQueueGenericSend+0x200>)
 800bb66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	e00a      	b.n	800bb8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb7c:	4b39      	ldr	r3, [pc, #228]	@ (800bc64 <xQueueGenericSend+0x200>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb8c:	f001 ff9e 	bl	800dacc <vPortExitCritical>
				return pdPASS;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e063      	b.n	800bc5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb9a:	f001 ff97 	bl	800dacc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e05c      	b.n	800bc5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bba8:	f107 0314 	add.w	r3, r7, #20
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f889 	bl	800ccc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbb6:	f001 ff89 	bl	800dacc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbba:	f000 fdf1 	bl	800c7a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbbe:	f001 ff53 	bl	800da68 <vPortEnterCritical>
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbc8:	b25b      	sxtb	r3, r3
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d103      	bne.n	800bbd8 <xQueueGenericSend+0x174>
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbde:	b25b      	sxtb	r3, r3
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d103      	bne.n	800bbee <xQueueGenericSend+0x18a>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbee:	f001 ff6d 	bl	800dacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbf2:	1d3a      	adds	r2, r7, #4
 800bbf4:	f107 0314 	add.w	r3, r7, #20
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f001 f878 	bl	800ccf0 <xTaskCheckForTimeOut>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d124      	bne.n	800bc50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc08:	f000 faa6 	bl	800c158 <prvIsQueueFull>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d018      	beq.n	800bc44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	3310      	adds	r3, #16
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 ff9c 	bl	800cb58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc22:	f000 fa31 	bl	800c088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc26:	f000 fdc9 	bl	800c7bc <xTaskResumeAll>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f47f af7c 	bne.w	800bb2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bc32:	4b0c      	ldr	r3, [pc, #48]	@ (800bc64 <xQueueGenericSend+0x200>)
 800bc34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	e772      	b.n	800bb2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc46:	f000 fa1f 	bl	800c088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc4a:	f000 fdb7 	bl	800c7bc <xTaskResumeAll>
 800bc4e:	e76c      	b.n	800bb2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc52:	f000 fa19 	bl	800c088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc56:	f000 fdb1 	bl	800c7bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3738      	adds	r7, #56	@ 0x38
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	e000ed04 	.word	0xe000ed04

0800bc68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b090      	sub	sp, #64	@ 0x40
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10b      	bne.n	800bc98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d103      	bne.n	800bca6 <xQueueGenericSendFromISR+0x3e>
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <xQueueGenericSendFromISR+0x42>
 800bca6:	2301      	movs	r3, #1
 800bca8:	e000      	b.n	800bcac <xQueueGenericSendFromISR+0x44>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10b      	bne.n	800bcc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d103      	bne.n	800bcd6 <xQueueGenericSendFromISR+0x6e>
 800bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d101      	bne.n	800bcda <xQueueGenericSendFromISR+0x72>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e000      	b.n	800bcdc <xQueueGenericSendFromISR+0x74>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10b      	bne.n	800bcf8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	623b      	str	r3, [r7, #32]
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	e7fd      	b.n	800bcf4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcf8:	f001 ff96 	bl	800dc28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcfc:	f3ef 8211 	mrs	r2, BASEPRI
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	61fa      	str	r2, [r7, #28]
 800bd12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d302      	bcc.n	800bd2a <xQueueGenericSendFromISR+0xc2>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d12f      	bne.n	800bd8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	68b9      	ldr	r1, [r7, #8]
 800bd3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd40:	f000 f912 	bl	800bf68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d112      	bne.n	800bd74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d016      	beq.n	800bd84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd58:	3324      	adds	r3, #36	@ 0x24
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 ff4e 	bl	800cbfc <xTaskRemoveFromEventList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e007      	b.n	800bd84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	b25a      	sxtb	r2, r3
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bd84:	2301      	movs	r3, #1
 800bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bd88:	e001      	b.n	800bd8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3740      	adds	r7, #64	@ 0x40
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08c      	sub	sp, #48	@ 0x30
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <xQueueReceive+0x32>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	623b      	str	r3, [r7, #32]
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
 800bdd4:	e7fd      	b.n	800bdd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d103      	bne.n	800bde4 <xQueueReceive+0x40>
 800bddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <xQueueReceive+0x44>
 800bde4:	2301      	movs	r3, #1
 800bde6:	e000      	b.n	800bdea <xQueueReceive+0x46>
 800bde8:	2300      	movs	r3, #0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10b      	bne.n	800be06 <xQueueReceive+0x62>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	61fb      	str	r3, [r7, #28]
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	e7fd      	b.n	800be02 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be06:	f001 f8bf 	bl	800cf88 <xTaskGetSchedulerState>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <xQueueReceive+0x72>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <xQueueReceive+0x76>
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <xQueueReceive+0x78>
 800be1a:	2300      	movs	r3, #0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10b      	bne.n	800be38 <xQueueReceive+0x94>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	61bb      	str	r3, [r7, #24]
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	e7fd      	b.n	800be34 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be38:	f001 fe16 	bl	800da68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	d01f      	beq.n	800be88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be4c:	f000 f8f6 	bl	800c03c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be52:	1e5a      	subs	r2, r3, #1
 800be54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00f      	beq.n	800be80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	3310      	adds	r3, #16
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fec9 	bl	800cbfc <xTaskRemoveFromEventList>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d007      	beq.n	800be80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be70:	4b3c      	ldr	r3, [pc, #240]	@ (800bf64 <xQueueReceive+0x1c0>)
 800be72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be80:	f001 fe24 	bl	800dacc <vPortExitCritical>
				return pdPASS;
 800be84:	2301      	movs	r3, #1
 800be86:	e069      	b.n	800bf5c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be8e:	f001 fe1d 	bl	800dacc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be92:	2300      	movs	r3, #0
 800be94:	e062      	b.n	800bf5c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be9c:	f107 0310 	add.w	r3, r7, #16
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 ff0f 	bl	800ccc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bea6:	2301      	movs	r3, #1
 800bea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800beaa:	f001 fe0f 	bl	800dacc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800beae:	f000 fc77 	bl	800c7a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beb2:	f001 fdd9 	bl	800da68 <vPortEnterCritical>
 800beb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	d103      	bne.n	800becc <xQueueReceive+0x128>
 800bec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800becc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bed2:	b25b      	sxtb	r3, r3
 800bed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed8:	d103      	bne.n	800bee2 <xQueueReceive+0x13e>
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bee2:	f001 fdf3 	bl	800dacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bee6:	1d3a      	adds	r2, r7, #4
 800bee8:	f107 0310 	add.w	r3, r7, #16
 800beec:	4611      	mov	r1, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fefe 	bl	800ccf0 <xTaskCheckForTimeOut>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d123      	bne.n	800bf42 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800befa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800befc:	f000 f916 	bl	800c12c <prvIsQueueEmpty>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d017      	beq.n	800bf36 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf08:	3324      	adds	r3, #36	@ 0x24
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fe22 	bl	800cb58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf16:	f000 f8b7 	bl	800c088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf1a:	f000 fc4f 	bl	800c7bc <xTaskResumeAll>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d189      	bne.n	800be38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bf24:	4b0f      	ldr	r3, [pc, #60]	@ (800bf64 <xQueueReceive+0x1c0>)
 800bf26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf2a:	601a      	str	r2, [r3, #0]
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	e780      	b.n	800be38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf38:	f000 f8a6 	bl	800c088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf3c:	f000 fc3e 	bl	800c7bc <xTaskResumeAll>
 800bf40:	e77a      	b.n	800be38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf44:	f000 f8a0 	bl	800c088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf48:	f000 fc38 	bl	800c7bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf4e:	f000 f8ed 	bl	800c12c <prvIsQueueEmpty>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f43f af6f 	beq.w	800be38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3730      	adds	r7, #48	@ 0x30
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	e000ed04 	.word	0xe000ed04

0800bf68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf74:	2300      	movs	r3, #0
 800bf76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10d      	bne.n	800bfa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d14d      	bne.n	800c02a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 f816 	bl	800cfc4 <xTaskPriorityDisinherit>
 800bf98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	609a      	str	r2, [r3, #8]
 800bfa0:	e043      	b.n	800c02a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d119      	bne.n	800bfdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6858      	ldr	r0, [r3, #4]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	f003 f897 	bl	800f0e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d32b      	bcc.n	800c02a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	605a      	str	r2, [r3, #4]
 800bfda:	e026      	b.n	800c02a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68d8      	ldr	r0, [r3, #12]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	f003 f87d 	bl	800f0e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff4:	425b      	negs	r3, r3
 800bff6:	441a      	add	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	d207      	bcs.n	800c018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c010:	425b      	negs	r3, r3
 800c012:	441a      	add	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d105      	bne.n	800c02a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	3b01      	subs	r3, #1
 800c028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c032:	697b      	ldr	r3, [r7, #20]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d018      	beq.n	800c080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c056:	441a      	add	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	429a      	cmp	r2, r3
 800c066:	d303      	bcc.n	800c070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68d9      	ldr	r1, [r3, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c078:	461a      	mov	r2, r3
 800c07a:	6838      	ldr	r0, [r7, #0]
 800c07c:	f003 f833 	bl	800f0e6 <memcpy>
	}
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c090:	f001 fcea 	bl	800da68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c09a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c09c:	e011      	b.n	800c0c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d012      	beq.n	800c0cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3324      	adds	r3, #36	@ 0x24
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fda6 	bl	800cbfc <xTaskRemoveFromEventList>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0b6:	f000 fe7f 	bl	800cdb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dce9      	bgt.n	800c09e <prvUnlockQueue+0x16>
 800c0ca:	e000      	b.n	800c0ce <prvUnlockQueue+0x46>
					break;
 800c0cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	22ff      	movs	r2, #255	@ 0xff
 800c0d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c0d6:	f001 fcf9 	bl	800dacc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0da:	f001 fcc5 	bl	800da68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0e6:	e011      	b.n	800c10c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d012      	beq.n	800c116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	3310      	adds	r3, #16
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 fd81 	bl	800cbfc <xTaskRemoveFromEventList>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c100:	f000 fe5a 	bl	800cdb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	3b01      	subs	r3, #1
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dce9      	bgt.n	800c0e8 <prvUnlockQueue+0x60>
 800c114:	e000      	b.n	800c118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	22ff      	movs	r2, #255	@ 0xff
 800c11c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c120:	f001 fcd4 	bl	800dacc <vPortExitCritical>
}
 800c124:	bf00      	nop
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c134:	f001 fc98 	bl	800da68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c140:	2301      	movs	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	e001      	b.n	800c14a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c14a:	f001 fcbf 	bl	800dacc <vPortExitCritical>

	return xReturn;
 800c14e:	68fb      	ldr	r3, [r7, #12]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c160:	f001 fc82 	bl	800da68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d102      	bne.n	800c176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c170:	2301      	movs	r3, #1
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	e001      	b.n	800c17a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c17a:	f001 fca7 	bl	800dacc <vPortExitCritical>

	return xReturn;
 800c17e:	68fb      	ldr	r3, [r7, #12]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c192:	2300      	movs	r3, #0
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	e014      	b.n	800c1c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c198:	4a0f      	ldr	r2, [pc, #60]	@ (800c1d8 <vQueueAddToRegistry+0x50>)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10b      	bne.n	800c1bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c1a4:	490c      	ldr	r1, [pc, #48]	@ (800c1d8 <vQueueAddToRegistry+0x50>)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c1ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c1d8 <vQueueAddToRegistry+0x50>)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c1ba:	e006      	b.n	800c1ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b07      	cmp	r3, #7
 800c1c6:	d9e7      	bls.n	800c198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	2400122c 	.word	0x2400122c

0800c1dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1ec:	f001 fc3c 	bl	800da68 <vPortEnterCritical>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fc:	d103      	bne.n	800c206 <vQueueWaitForMessageRestricted+0x2a>
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c20c:	b25b      	sxtb	r3, r3
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d103      	bne.n	800c21c <vQueueWaitForMessageRestricted+0x40>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c21c:	f001 fc56 	bl	800dacc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d106      	bne.n	800c236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	3324      	adds	r3, #36	@ 0x24
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 fcb7 	bl	800cba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c236:	6978      	ldr	r0, [r7, #20]
 800c238:	f7ff ff26 	bl	800c088 <prvUnlockQueue>
	}
 800c23c:	bf00      	nop
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	@ 0x38
 800c248:	af04      	add	r7, sp, #16
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	623b      	str	r3, [r7, #32]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <xTaskCreateStatic+0x4a>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	61fb      	str	r3, [r7, #28]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c28e:	23a8      	movs	r3, #168	@ 0xa8
 800c290:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	2ba8      	cmp	r3, #168	@ 0xa8
 800c296:	d00b      	beq.n	800c2b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	61bb      	str	r3, [r7, #24]
}
 800c2aa:	bf00      	nop
 800c2ac:	bf00      	nop
 800c2ae:	e7fd      	b.n	800c2ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01e      	beq.n	800c2f6 <xTaskCreateStatic+0xb2>
 800c2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d01b      	beq.n	800c2f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9303      	str	r3, [sp, #12]
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	f107 0314 	add.w	r3, r7, #20
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 f851 	bl	800c390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2f0:	f000 f8f6 	bl	800c4e0 <prvAddNewTaskToReadyList>
 800c2f4:	e001      	b.n	800c2fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2fa:	697b      	ldr	r3, [r7, #20]
	}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3728      	adds	r7, #40	@ 0x28
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08c      	sub	sp, #48	@ 0x30
 800c308:	af04      	add	r7, sp, #16
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	4613      	mov	r3, r2
 800c312:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c314:	88fb      	ldrh	r3, [r7, #6]
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4618      	mov	r0, r3
 800c31a:	f001 fcc7 	bl	800dcac <pvPortMalloc>
 800c31e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00e      	beq.n	800c344 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c326:	20a8      	movs	r0, #168	@ 0xa8
 800c328:	f001 fcc0 	bl	800dcac <pvPortMalloc>
 800c32c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	631a      	str	r2, [r3, #48]	@ 0x30
 800c33a:	e005      	b.n	800c348 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c33c:	6978      	ldr	r0, [r7, #20]
 800c33e:	f001 fd83 	bl	800de48 <vPortFree>
 800c342:	e001      	b.n	800c348 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c344:	2300      	movs	r3, #0
 800c346:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d017      	beq.n	800c37e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c356:	88fa      	ldrh	r2, [r7, #6]
 800c358:	2300      	movs	r3, #0
 800c35a:	9303      	str	r3, [sp, #12]
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	9302      	str	r3, [sp, #8]
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f80f 	bl	800c390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c372:	69f8      	ldr	r0, [r7, #28]
 800c374:	f000 f8b4 	bl	800c4e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c378:	2301      	movs	r3, #1
 800c37a:	61bb      	str	r3, [r7, #24]
 800c37c:	e002      	b.n	800c384 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c37e:	f04f 33ff 	mov.w	r3, #4294967295
 800c382:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c384:	69bb      	ldr	r3, [r7, #24]
	}
 800c386:	4618      	mov	r0, r3
 800c388:	3720      	adds	r7, #32
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	21a5      	movs	r1, #165	@ 0xa5
 800c3aa:	f002 fdbe 	bl	800ef2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3b2:	6879      	ldr	r1, [r7, #4]
 800c3b4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c3b8:	440b      	add	r3, r1
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00b      	beq.n	800c3ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	617b      	str	r3, [r7, #20]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01f      	beq.n	800c430 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e012      	b.n	800c41c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	7819      	ldrb	r1, [r3, #0]
 800c3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	3334      	adds	r3, #52	@ 0x34
 800c406:	460a      	mov	r2, r1
 800c408:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	4413      	add	r3, r2
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d006      	beq.n	800c424 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	3301      	adds	r3, #1
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	2b0f      	cmp	r3, #15
 800c420:	d9e9      	bls.n	800c3f6 <prvInitialiseNewTask+0x66>
 800c422:	e000      	b.n	800c426 <prvInitialiseNewTask+0x96>
			{
				break;
 800c424:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c42e:	e003      	b.n	800c438 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	2b37      	cmp	r3, #55	@ 0x37
 800c43c:	d901      	bls.n	800c442 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c43e:	2337      	movs	r3, #55	@ 0x37
 800c440:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c446:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c44c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c450:	2200      	movs	r2, #0
 800c452:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c456:	3304      	adds	r3, #4
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff f929 	bl	800b6b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c460:	3318      	adds	r3, #24
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff f924 	bl	800b6b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c46c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c476:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c47c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c480:	2200      	movs	r2, #0
 800c482:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c490:	3354      	adds	r3, #84	@ 0x54
 800c492:	224c      	movs	r2, #76	@ 0x4c
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f002 fd47 	bl	800ef2a <memset>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	4a0d      	ldr	r2, [pc, #52]	@ (800c4d4 <prvInitialiseNewTask+0x144>)
 800c4a0:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800c4d8 <prvInitialiseNewTask+0x148>)
 800c4a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c4dc <prvInitialiseNewTask+0x14c>)
 800c4ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	68f9      	ldr	r1, [r7, #12]
 800c4b2:	69b8      	ldr	r0, [r7, #24]
 800c4b4:	f001 f9a4 	bl	800d800 <pxPortInitialiseStack>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ca:	bf00      	nop
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	240054c0 	.word	0x240054c0
 800c4d8:	24005528 	.word	0x24005528
 800c4dc:	24005590 	.word	0x24005590

0800c4e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4e8:	f001 fabe 	bl	800da68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4ec:	4b2d      	ldr	r3, [pc, #180]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c4f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4f6:	4b2c      	ldr	r3, [pc, #176]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c504:	4b27      	ldr	r3, [pc, #156]	@ (800c5a4 <prvAddNewTaskToReadyList+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d110      	bne.n	800c52e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c50c:	f000 fc78 	bl	800ce00 <prvInitialiseTaskLists>
 800c510:	e00d      	b.n	800c52e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c512:	4b26      	ldr	r3, [pc, #152]	@ (800c5ac <prvAddNewTaskToReadyList+0xcc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c51a:	4b23      	ldr	r3, [pc, #140]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c524:	429a      	cmp	r2, r3
 800c526:	d802      	bhi.n	800c52e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c528:	4a1f      	ldr	r2, [pc, #124]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c52e:	4b20      	ldr	r3, [pc, #128]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	4a1e      	ldr	r2, [pc, #120]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c538:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b0 <prvAddNewTaskToReadyList+0xd0>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c544:	4b1b      	ldr	r3, [pc, #108]	@ (800c5b4 <prvAddNewTaskToReadyList+0xd4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d903      	bls.n	800c554 <prvAddNewTaskToReadyList+0x74>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	4a18      	ldr	r2, [pc, #96]	@ (800c5b4 <prvAddNewTaskToReadyList+0xd4>)
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4a15      	ldr	r2, [pc, #84]	@ (800c5b8 <prvAddNewTaskToReadyList+0xd8>)
 800c562:	441a      	add	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7ff f8ad 	bl	800b6ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c570:	f001 faac 	bl	800dacc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c574:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ac <prvAddNewTaskToReadyList+0xcc>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00e      	beq.n	800c59a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <prvAddNewTaskToReadyList+0xc8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c586:	429a      	cmp	r2, r3
 800c588:	d207      	bcs.n	800c59a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c58a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5bc <prvAddNewTaskToReadyList+0xdc>)
 800c58c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c59a:	bf00      	nop
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	24001740 	.word	0x24001740
 800c5a8:	2400126c 	.word	0x2400126c
 800c5ac:	2400174c 	.word	0x2400174c
 800c5b0:	2400175c 	.word	0x2400175c
 800c5b4:	24001748 	.word	0x24001748
 800c5b8:	24001270 	.word	0x24001270
 800c5bc:	e000ed04 	.word	0xe000ed04

0800c5c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10b      	bne.n	800c5ec <vTaskDelayUntil+0x2c>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	617b      	str	r3, [r7, #20]
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	e7fd      	b.n	800c5e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10b      	bne.n	800c60a <vTaskDelayUntil+0x4a>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	613b      	str	r3, [r7, #16]
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	e7fd      	b.n	800c606 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800c60a:	4b2a      	ldr	r3, [pc, #168]	@ (800c6b4 <vTaskDelayUntil+0xf4>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00b      	beq.n	800c62a <vTaskDelayUntil+0x6a>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60fb      	str	r3, [r7, #12]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800c62a:	f000 f8b9 	bl	800c7a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c62e:	4b22      	ldr	r3, [pc, #136]	@ (800c6b8 <vTaskDelayUntil+0xf8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	4413      	add	r3, r2
 800c63c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6a3a      	ldr	r2, [r7, #32]
 800c644:	429a      	cmp	r2, r3
 800c646:	d20b      	bcs.n	800c660 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d211      	bcs.n	800c676 <vTaskDelayUntil+0xb6>
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	429a      	cmp	r2, r3
 800c658:	d90d      	bls.n	800c676 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c65e:	e00a      	b.n	800c676 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69fa      	ldr	r2, [r7, #28]
 800c666:	429a      	cmp	r2, r3
 800c668:	d303      	bcc.n	800c672 <vTaskDelayUntil+0xb2>
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d901      	bls.n	800c676 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c672:	2301      	movs	r3, #1
 800c674:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2100      	movs	r1, #0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fd0a 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c690:	f000 f894 	bl	800c7bc <xTaskResumeAll>
 800c694:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d107      	bne.n	800c6ac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <vTaskDelayUntil+0xfc>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6ac:	bf00      	nop
 800c6ae:	3728      	adds	r7, #40	@ 0x28
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	24001768 	.word	0x24001768
 800c6b8:	24001744 	.word	0x24001744
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	@ 0x28
 800c6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	1d39      	adds	r1, r7, #4
 800c6d2:	f107 0308 	add.w	r3, r7, #8
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe ff96 	bl	800b608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	9202      	str	r2, [sp, #8]
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	460a      	mov	r2, r1
 800c6ee:	4924      	ldr	r1, [pc, #144]	@ (800c780 <vTaskStartScheduler+0xc0>)
 800c6f0:	4824      	ldr	r0, [pc, #144]	@ (800c784 <vTaskStartScheduler+0xc4>)
 800c6f2:	f7ff fda7 	bl	800c244 <xTaskCreateStatic>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	4a23      	ldr	r2, [pc, #140]	@ (800c788 <vTaskStartScheduler+0xc8>)
 800c6fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6fc:	4b22      	ldr	r3, [pc, #136]	@ (800c788 <vTaskStartScheduler+0xc8>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c704:	2301      	movs	r3, #1
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	e001      	b.n	800c70e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d102      	bne.n	800c71a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c714:	f000 fd1a 	bl	800d14c <xTimerCreateTimerTask>
 800c718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d11b      	bne.n	800c758 <vTaskStartScheduler+0x98>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	613b      	str	r3, [r7, #16]
}
 800c732:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c734:	4b15      	ldr	r3, [pc, #84]	@ (800c78c <vTaskStartScheduler+0xcc>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3354      	adds	r3, #84	@ 0x54
 800c73a:	4a15      	ldr	r2, [pc, #84]	@ (800c790 <vTaskStartScheduler+0xd0>)
 800c73c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c73e:	4b15      	ldr	r3, [pc, #84]	@ (800c794 <vTaskStartScheduler+0xd4>)
 800c740:	f04f 32ff 	mov.w	r2, #4294967295
 800c744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c746:	4b14      	ldr	r3, [pc, #80]	@ (800c798 <vTaskStartScheduler+0xd8>)
 800c748:	2201      	movs	r2, #1
 800c74a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c74c:	4b13      	ldr	r3, [pc, #76]	@ (800c79c <vTaskStartScheduler+0xdc>)
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c752:	f001 f8e5 	bl	800d920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c756:	e00f      	b.n	800c778 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d10b      	bne.n	800c778 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <vTaskStartScheduler+0xb4>
}
 800c778:	bf00      	nop
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08011420 	.word	0x08011420
 800c784:	0800cdd1 	.word	0x0800cdd1
 800c788:	24001764 	.word	0x24001764
 800c78c:	2400126c 	.word	0x2400126c
 800c790:	2400008c 	.word	0x2400008c
 800c794:	24001760 	.word	0x24001760
 800c798:	2400174c 	.word	0x2400174c
 800c79c:	24001744 	.word	0x24001744

0800c7a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7a4:	4b04      	ldr	r3, [pc, #16]	@ (800c7b8 <vTaskSuspendAll+0x18>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	4a03      	ldr	r2, [pc, #12]	@ (800c7b8 <vTaskSuspendAll+0x18>)
 800c7ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7ae:	bf00      	nop
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	24001768 	.word	0x24001768

0800c7bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ca:	4b42      	ldr	r3, [pc, #264]	@ (800c8d4 <xTaskResumeAll+0x118>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10b      	bne.n	800c7ea <xTaskResumeAll+0x2e>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	603b      	str	r3, [r7, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop
 800c7e8:	e7fd      	b.n	800c7e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7ea:	f001 f93d 	bl	800da68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7ee:	4b39      	ldr	r3, [pc, #228]	@ (800c8d4 <xTaskResumeAll+0x118>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	4a37      	ldr	r2, [pc, #220]	@ (800c8d4 <xTaskResumeAll+0x118>)
 800c7f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f8:	4b36      	ldr	r3, [pc, #216]	@ (800c8d4 <xTaskResumeAll+0x118>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d162      	bne.n	800c8c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c800:	4b35      	ldr	r3, [pc, #212]	@ (800c8d8 <xTaskResumeAll+0x11c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d05e      	beq.n	800c8c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c808:	e02f      	b.n	800c86a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80a:	4b34      	ldr	r3, [pc, #208]	@ (800c8dc <xTaskResumeAll+0x120>)
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3318      	adds	r3, #24
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe ffb4 	bl	800b784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3304      	adds	r3, #4
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe ffaf 	bl	800b784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c82a:	4b2d      	ldr	r3, [pc, #180]	@ (800c8e0 <xTaskResumeAll+0x124>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d903      	bls.n	800c83a <xTaskResumeAll+0x7e>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c836:	4a2a      	ldr	r2, [pc, #168]	@ (800c8e0 <xTaskResumeAll+0x124>)
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c83e:	4613      	mov	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4a27      	ldr	r2, [pc, #156]	@ (800c8e4 <xTaskResumeAll+0x128>)
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fe ff3a 	bl	800b6ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c85a:	4b23      	ldr	r3, [pc, #140]	@ (800c8e8 <xTaskResumeAll+0x12c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c860:	429a      	cmp	r2, r3
 800c862:	d302      	bcc.n	800c86a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c864:	4b21      	ldr	r3, [pc, #132]	@ (800c8ec <xTaskResumeAll+0x130>)
 800c866:	2201      	movs	r2, #1
 800c868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c86a:	4b1c      	ldr	r3, [pc, #112]	@ (800c8dc <xTaskResumeAll+0x120>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1cb      	bne.n	800c80a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c878:	f000 fb66 	bl	800cf48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c87c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8f0 <xTaskResumeAll+0x134>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d010      	beq.n	800c8aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c888:	f000 f846 	bl	800c918 <xTaskIncrementTick>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c892:	4b16      	ldr	r3, [pc, #88]	@ (800c8ec <xTaskResumeAll+0x130>)
 800c894:	2201      	movs	r2, #1
 800c896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f1      	bne.n	800c888 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c8a4:	4b12      	ldr	r3, [pc, #72]	@ (800c8f0 <xTaskResumeAll+0x134>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8aa:	4b10      	ldr	r3, [pc, #64]	@ (800c8ec <xTaskResumeAll+0x130>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d009      	beq.n	800c8c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f4 <xTaskResumeAll+0x138>)
 800c8b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8c6:	f001 f901 	bl	800dacc <vPortExitCritical>

	return xAlreadyYielded;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	24001768 	.word	0x24001768
 800c8d8:	24001740 	.word	0x24001740
 800c8dc:	24001700 	.word	0x24001700
 800c8e0:	24001748 	.word	0x24001748
 800c8e4:	24001270 	.word	0x24001270
 800c8e8:	2400126c 	.word	0x2400126c
 800c8ec:	24001754 	.word	0x24001754
 800c8f0:	24001750 	.word	0x24001750
 800c8f4:	e000ed04 	.word	0xe000ed04

0800c8f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8fe:	4b05      	ldr	r3, [pc, #20]	@ (800c914 <xTaskGetTickCount+0x1c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c904:	687b      	ldr	r3, [r7, #4]
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	24001744 	.word	0x24001744

0800c918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c91e:	2300      	movs	r3, #0
 800c920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c922:	4b4f      	ldr	r3, [pc, #316]	@ (800ca60 <xTaskIncrementTick+0x148>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f040 8090 	bne.w	800ca4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c92c:	4b4d      	ldr	r3, [pc, #308]	@ (800ca64 <xTaskIncrementTick+0x14c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c934:	4a4b      	ldr	r2, [pc, #300]	@ (800ca64 <xTaskIncrementTick+0x14c>)
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d121      	bne.n	800c984 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c940:	4b49      	ldr	r3, [pc, #292]	@ (800ca68 <xTaskIncrementTick+0x150>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00b      	beq.n	800c962 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	603b      	str	r3, [r7, #0]
}
 800c95c:	bf00      	nop
 800c95e:	bf00      	nop
 800c960:	e7fd      	b.n	800c95e <xTaskIncrementTick+0x46>
 800c962:	4b41      	ldr	r3, [pc, #260]	@ (800ca68 <xTaskIncrementTick+0x150>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	4b40      	ldr	r3, [pc, #256]	@ (800ca6c <xTaskIncrementTick+0x154>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a3e      	ldr	r2, [pc, #248]	@ (800ca68 <xTaskIncrementTick+0x150>)
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	4a3e      	ldr	r2, [pc, #248]	@ (800ca6c <xTaskIncrementTick+0x154>)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	4b3e      	ldr	r3, [pc, #248]	@ (800ca70 <xTaskIncrementTick+0x158>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca70 <xTaskIncrementTick+0x158>)
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	f000 fae2 	bl	800cf48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c984:	4b3b      	ldr	r3, [pc, #236]	@ (800ca74 <xTaskIncrementTick+0x15c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d349      	bcc.n	800ca22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c98e:	4b36      	ldr	r3, [pc, #216]	@ (800ca68 <xTaskIncrementTick+0x150>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d104      	bne.n	800c9a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c998:	4b36      	ldr	r3, [pc, #216]	@ (800ca74 <xTaskIncrementTick+0x15c>)
 800c99a:	f04f 32ff 	mov.w	r2, #4294967295
 800c99e:	601a      	str	r2, [r3, #0]
					break;
 800c9a0:	e03f      	b.n	800ca22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a2:	4b31      	ldr	r3, [pc, #196]	@ (800ca68 <xTaskIncrementTick+0x150>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d203      	bcs.n	800c9c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9ba:	4a2e      	ldr	r2, [pc, #184]	@ (800ca74 <xTaskIncrementTick+0x15c>)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9c0:	e02f      	b.n	800ca22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fedc 	bl	800b784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3318      	adds	r3, #24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fed3 	bl	800b784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e2:	4b25      	ldr	r3, [pc, #148]	@ (800ca78 <xTaskIncrementTick+0x160>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d903      	bls.n	800c9f2 <xTaskIncrementTick+0xda>
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ee:	4a22      	ldr	r2, [pc, #136]	@ (800ca78 <xTaskIncrementTick+0x160>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4413      	add	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4a1f      	ldr	r2, [pc, #124]	@ (800ca7c <xTaskIncrementTick+0x164>)
 800ca00:	441a      	add	r2, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7fe fe5e 	bl	800b6ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca12:	4b1b      	ldr	r3, [pc, #108]	@ (800ca80 <xTaskIncrementTick+0x168>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d3b8      	bcc.n	800c98e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca20:	e7b5      	b.n	800c98e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca22:	4b17      	ldr	r3, [pc, #92]	@ (800ca80 <xTaskIncrementTick+0x168>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca28:	4914      	ldr	r1, [pc, #80]	@ (800ca7c <xTaskIncrementTick+0x164>)
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	440b      	add	r3, r1
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d901      	bls.n	800ca3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca3e:	4b11      	ldr	r3, [pc, #68]	@ (800ca84 <xTaskIncrementTick+0x16c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ca46:	2301      	movs	r3, #1
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e004      	b.n	800ca56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca88 <xTaskIncrementTick+0x170>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3301      	adds	r3, #1
 800ca52:	4a0d      	ldr	r2, [pc, #52]	@ (800ca88 <xTaskIncrementTick+0x170>)
 800ca54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca56:	697b      	ldr	r3, [r7, #20]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	24001768 	.word	0x24001768
 800ca64:	24001744 	.word	0x24001744
 800ca68:	240016f8 	.word	0x240016f8
 800ca6c:	240016fc 	.word	0x240016fc
 800ca70:	24001758 	.word	0x24001758
 800ca74:	24001760 	.word	0x24001760
 800ca78:	24001748 	.word	0x24001748
 800ca7c:	24001270 	.word	0x24001270
 800ca80:	2400126c 	.word	0x2400126c
 800ca84:	24001754 	.word	0x24001754
 800ca88:	24001750 	.word	0x24001750

0800ca8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca92:	4b2b      	ldr	r3, [pc, #172]	@ (800cb40 <vTaskSwitchContext+0xb4>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca9a:	4b2a      	ldr	r3, [pc, #168]	@ (800cb44 <vTaskSwitchContext+0xb8>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800caa0:	e047      	b.n	800cb32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800caa2:	4b28      	ldr	r3, [pc, #160]	@ (800cb44 <vTaskSwitchContext+0xb8>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa8:	4b27      	ldr	r3, [pc, #156]	@ (800cb48 <vTaskSwitchContext+0xbc>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e011      	b.n	800cad4 <vTaskSwitchContext+0x48>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10b      	bne.n	800cace <vTaskSwitchContext+0x42>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	607b      	str	r3, [r7, #4]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <vTaskSwitchContext+0x3e>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3b01      	subs	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	491d      	ldr	r1, [pc, #116]	@ (800cb4c <vTaskSwitchContext+0xc0>)
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0e3      	beq.n	800cab0 <vTaskSwitchContext+0x24>
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4a16      	ldr	r2, [pc, #88]	@ (800cb4c <vTaskSwitchContext+0xc0>)
 800caf4:	4413      	add	r3, r2
 800caf6:	60bb      	str	r3, [r7, #8]
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	605a      	str	r2, [r3, #4]
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	3308      	adds	r3, #8
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d104      	bne.n	800cb18 <vTaskSwitchContext+0x8c>
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	605a      	str	r2, [r3, #4]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb50 <vTaskSwitchContext+0xc4>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	4a09      	ldr	r2, [pc, #36]	@ (800cb48 <vTaskSwitchContext+0xbc>)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb28:	4b09      	ldr	r3, [pc, #36]	@ (800cb50 <vTaskSwitchContext+0xc4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3354      	adds	r3, #84	@ 0x54
 800cb2e:	4a09      	ldr	r2, [pc, #36]	@ (800cb54 <vTaskSwitchContext+0xc8>)
 800cb30:	6013      	str	r3, [r2, #0]
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	24001768 	.word	0x24001768
 800cb44:	24001754 	.word	0x24001754
 800cb48:	24001748 	.word	0x24001748
 800cb4c:	24001270 	.word	0x24001270
 800cb50:	2400126c 	.word	0x2400126c
 800cb54:	2400008c 	.word	0x2400008c

0800cb58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb80:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <vTaskPlaceOnEventList+0x48>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3318      	adds	r3, #24
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7fe fdc2 	bl	800b712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb8e:	2101      	movs	r1, #1
 800cb90:	6838      	ldr	r0, [r7, #0]
 800cb92:	f000 fa87 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
}
 800cb96:	bf00      	nop
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	2400126c 	.word	0x2400126c

0800cba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10b      	bne.n	800cbce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	617b      	str	r3, [r7, #20]
}
 800cbc8:	bf00      	nop
 800cbca:	bf00      	nop
 800cbcc:	e7fd      	b.n	800cbca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbce:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf8 <vTaskPlaceOnEventListRestricted+0x54>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7fe fd77 	bl	800b6ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	68b8      	ldr	r0, [r7, #8]
 800cbec:	f000 fa5a 	bl	800d0a4 <prvAddCurrentTaskToDelayedList>
	}
 800cbf0:	bf00      	nop
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	2400126c 	.word	0x2400126c

0800cbfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10b      	bne.n	800cc2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60fb      	str	r3, [r7, #12]
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	e7fd      	b.n	800cc26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	3318      	adds	r3, #24
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fda8 	bl	800b784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc34:	4b1d      	ldr	r3, [pc, #116]	@ (800ccac <xTaskRemoveFromEventList+0xb0>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d11d      	bne.n	800cc78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	3304      	adds	r3, #4
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe fd9f 	bl	800b784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc4a:	4b19      	ldr	r3, [pc, #100]	@ (800ccb0 <xTaskRemoveFromEventList+0xb4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d903      	bls.n	800cc5a <xTaskRemoveFromEventList+0x5e>
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc56:	4a16      	ldr	r2, [pc, #88]	@ (800ccb0 <xTaskRemoveFromEventList+0xb4>)
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4a13      	ldr	r2, [pc, #76]	@ (800ccb4 <xTaskRemoveFromEventList+0xb8>)
 800cc68:	441a      	add	r2, r3
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4610      	mov	r0, r2
 800cc72:	f7fe fd2a 	bl	800b6ca <vListInsertEnd>
 800cc76:	e005      	b.n	800cc84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	3318      	adds	r3, #24
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	480e      	ldr	r0, [pc, #56]	@ (800ccb8 <xTaskRemoveFromEventList+0xbc>)
 800cc80:	f7fe fd23 	bl	800b6ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc88:	4b0c      	ldr	r3, [pc, #48]	@ (800ccbc <xTaskRemoveFromEventList+0xc0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d905      	bls.n	800cc9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc92:	2301      	movs	r3, #1
 800cc94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc96:	4b0a      	ldr	r3, [pc, #40]	@ (800ccc0 <xTaskRemoveFromEventList+0xc4>)
 800cc98:	2201      	movs	r2, #1
 800cc9a:	601a      	str	r2, [r3, #0]
 800cc9c:	e001      	b.n	800cca2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cca2:	697b      	ldr	r3, [r7, #20]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	24001768 	.word	0x24001768
 800ccb0:	24001748 	.word	0x24001748
 800ccb4:	24001270 	.word	0x24001270
 800ccb8:	24001700 	.word	0x24001700
 800ccbc:	2400126c 	.word	0x2400126c
 800ccc0:	24001754 	.word	0x24001754

0800ccc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cccc:	4b06      	ldr	r3, [pc, #24]	@ (800cce8 <vTaskInternalSetTimeOutState+0x24>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccd4:	4b05      	ldr	r3, [pc, #20]	@ (800ccec <vTaskInternalSetTimeOutState+0x28>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	605a      	str	r2, [r3, #4]
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	24001758 	.word	0x24001758
 800ccec:	24001744 	.word	0x24001744

0800ccf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10b      	bne.n	800cd18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	613b      	str	r3, [r7, #16]
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10b      	bne.n	800cd36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	60fb      	str	r3, [r7, #12]
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	e7fd      	b.n	800cd32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd36:	f000 fe97 	bl	800da68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd3a:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb0 <xTaskCheckForTimeOut+0xc0>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd52:	d102      	bne.n	800cd5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd54:	2300      	movs	r3, #0
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	e023      	b.n	800cda2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	4b15      	ldr	r3, [pc, #84]	@ (800cdb4 <xTaskCheckForTimeOut+0xc4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d007      	beq.n	800cd76 <xTaskCheckForTimeOut+0x86>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e015      	b.n	800cda2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d20b      	bcs.n	800cd98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	1ad2      	subs	r2, r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ff99 	bl	800ccc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
 800cd96:	e004      	b.n	800cda2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cda2:	f000 fe93 	bl	800dacc <vPortExitCritical>

	return xReturn;
 800cda6:	69fb      	ldr	r3, [r7, #28]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3720      	adds	r7, #32
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	24001744 	.word	0x24001744
 800cdb4:	24001758 	.word	0x24001758

0800cdb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdbc:	4b03      	ldr	r3, [pc, #12]	@ (800cdcc <vTaskMissedYield+0x14>)
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	24001754 	.word	0x24001754

0800cdd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cdd8:	f000 f852 	bl	800ce80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cddc:	4b06      	ldr	r3, [pc, #24]	@ (800cdf8 <prvIdleTask+0x28>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d9f9      	bls.n	800cdd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cde4:	4b05      	ldr	r3, [pc, #20]	@ (800cdfc <prvIdleTask+0x2c>)
 800cde6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cdf4:	e7f0      	b.n	800cdd8 <prvIdleTask+0x8>
 800cdf6:	bf00      	nop
 800cdf8:	24001270 	.word	0x24001270
 800cdfc:	e000ed04 	.word	0xe000ed04

0800ce00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce06:	2300      	movs	r3, #0
 800ce08:	607b      	str	r3, [r7, #4]
 800ce0a:	e00c      	b.n	800ce26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4a12      	ldr	r2, [pc, #72]	@ (800ce60 <prvInitialiseTaskLists+0x60>)
 800ce18:	4413      	add	r3, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe fc28 	bl	800b670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3301      	adds	r3, #1
 800ce24:	607b      	str	r3, [r7, #4]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b37      	cmp	r3, #55	@ 0x37
 800ce2a:	d9ef      	bls.n	800ce0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce2c:	480d      	ldr	r0, [pc, #52]	@ (800ce64 <prvInitialiseTaskLists+0x64>)
 800ce2e:	f7fe fc1f 	bl	800b670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce32:	480d      	ldr	r0, [pc, #52]	@ (800ce68 <prvInitialiseTaskLists+0x68>)
 800ce34:	f7fe fc1c 	bl	800b670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce38:	480c      	ldr	r0, [pc, #48]	@ (800ce6c <prvInitialiseTaskLists+0x6c>)
 800ce3a:	f7fe fc19 	bl	800b670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce3e:	480c      	ldr	r0, [pc, #48]	@ (800ce70 <prvInitialiseTaskLists+0x70>)
 800ce40:	f7fe fc16 	bl	800b670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce44:	480b      	ldr	r0, [pc, #44]	@ (800ce74 <prvInitialiseTaskLists+0x74>)
 800ce46:	f7fe fc13 	bl	800b670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce78 <prvInitialiseTaskLists+0x78>)
 800ce4c:	4a05      	ldr	r2, [pc, #20]	@ (800ce64 <prvInitialiseTaskLists+0x64>)
 800ce4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce50:	4b0a      	ldr	r3, [pc, #40]	@ (800ce7c <prvInitialiseTaskLists+0x7c>)
 800ce52:	4a05      	ldr	r2, [pc, #20]	@ (800ce68 <prvInitialiseTaskLists+0x68>)
 800ce54:	601a      	str	r2, [r3, #0]
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	24001270 	.word	0x24001270
 800ce64:	240016d0 	.word	0x240016d0
 800ce68:	240016e4 	.word	0x240016e4
 800ce6c:	24001700 	.word	0x24001700
 800ce70:	24001714 	.word	0x24001714
 800ce74:	2400172c 	.word	0x2400172c
 800ce78:	240016f8 	.word	0x240016f8
 800ce7c:	240016fc 	.word	0x240016fc

0800ce80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce86:	e019      	b.n	800cebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce88:	f000 fdee 	bl	800da68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce8c:	4b10      	ldr	r3, [pc, #64]	@ (800ced0 <prvCheckTasksWaitingTermination+0x50>)
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fc73 	bl	800b784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ced4 <prvCheckTasksWaitingTermination+0x54>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	4a0b      	ldr	r2, [pc, #44]	@ (800ced4 <prvCheckTasksWaitingTermination+0x54>)
 800cea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cea8:	4b0b      	ldr	r3, [pc, #44]	@ (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3b01      	subs	r3, #1
 800ceae:	4a0a      	ldr	r2, [pc, #40]	@ (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800ceb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ceb2:	f000 fe0b 	bl	800dacc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f810 	bl	800cedc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cebc:	4b06      	ldr	r3, [pc, #24]	@ (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e1      	bne.n	800ce88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	24001714 	.word	0x24001714
 800ced4:	24001740 	.word	0x24001740
 800ced8:	24001728 	.word	0x24001728

0800cedc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3354      	adds	r3, #84	@ 0x54
 800cee8:	4618      	mov	r0, r3
 800ceea:	f002 f83b 	bl	800ef64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d108      	bne.n	800cf0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 ffa3 	bl	800de48 <vPortFree>
				vPortFree( pxTCB );
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 ffa0 	bl	800de48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf08:	e019      	b.n	800cf3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d103      	bne.n	800cf1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 ff97 	bl	800de48 <vPortFree>
	}
 800cf1a:	e010      	b.n	800cf3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d00b      	beq.n	800cf3e <prvDeleteTCB+0x62>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	60fb      	str	r3, [r7, #12]
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <prvDeleteTCB+0x5e>
	}
 800cf3e:	bf00      	nop
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf80 <prvResetNextTaskUnblockTime+0x38>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf58:	4b0a      	ldr	r3, [pc, #40]	@ (800cf84 <prvResetNextTaskUnblockTime+0x3c>)
 800cf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf60:	e008      	b.n	800cf74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf62:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <prvResetNextTaskUnblockTime+0x38>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a04      	ldr	r2, [pc, #16]	@ (800cf84 <prvResetNextTaskUnblockTime+0x3c>)
 800cf72:	6013      	str	r3, [r2, #0]
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	240016f8 	.word	0x240016f8
 800cf84:	24001760 	.word	0x24001760

0800cf88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfbc <xTaskGetSchedulerState+0x34>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf96:	2301      	movs	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	e008      	b.n	800cfae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9c:	4b08      	ldr	r3, [pc, #32]	@ (800cfc0 <xTaskGetSchedulerState+0x38>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	e001      	b.n	800cfae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfae:	687b      	ldr	r3, [r7, #4]
	}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	2400174c 	.word	0x2400174c
 800cfc0:	24001768 	.word	0x24001768

0800cfc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d058      	beq.n	800d08c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cfda:	4b2f      	ldr	r3, [pc, #188]	@ (800d098 <xTaskPriorityDisinherit+0xd4>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d00b      	beq.n	800cffc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	60fb      	str	r3, [r7, #12]
}
 800cff6:	bf00      	nop
 800cff8:	bf00      	nop
 800cffa:	e7fd      	b.n	800cff8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10b      	bne.n	800d01c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	60bb      	str	r3, [r7, #8]
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	e7fd      	b.n	800d018 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d020:	1e5a      	subs	r2, r3, #1
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d02e:	429a      	cmp	r2, r3
 800d030:	d02c      	beq.n	800d08c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d036:	2b00      	cmp	r3, #0
 800d038:	d128      	bne.n	800d08c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fba0 	bl	800b784 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d050:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05c:	4b0f      	ldr	r3, [pc, #60]	@ (800d09c <xTaskPriorityDisinherit+0xd8>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <xTaskPriorityDisinherit+0xa8>
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d068:	4a0c      	ldr	r2, [pc, #48]	@ (800d09c <xTaskPriorityDisinherit+0xd8>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4a09      	ldr	r2, [pc, #36]	@ (800d0a0 <xTaskPriorityDisinherit+0xdc>)
 800d07a:	441a      	add	r2, r3
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fe fb21 	bl	800b6ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d088:	2301      	movs	r3, #1
 800d08a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d08c:	697b      	ldr	r3, [r7, #20]
	}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	2400126c 	.word	0x2400126c
 800d09c:	24001748 	.word	0x24001748
 800d0a0:	24001270 	.word	0x24001270

0800d0a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ae:	4b21      	ldr	r3, [pc, #132]	@ (800d134 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0b4:	4b20      	ldr	r3, [pc, #128]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fb62 	bl	800b784 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c6:	d10a      	bne.n	800d0de <prvAddCurrentTaskToDelayedList+0x3a>
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4819      	ldr	r0, [pc, #100]	@ (800d13c <prvAddCurrentTaskToDelayedList+0x98>)
 800d0d8:	f7fe faf7 	bl	800b6ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0dc:	e026      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0e6:	4b14      	ldr	r3, [pc, #80]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d209      	bcs.n	800d10a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0f6:	4b12      	ldr	r3, [pc, #72]	@ (800d140 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4619      	mov	r1, r3
 800d102:	4610      	mov	r0, r2
 800d104:	f7fe fb05 	bl	800b712 <vListInsert>
}
 800d108:	e010      	b.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d10a:	4b0e      	ldr	r3, [pc, #56]	@ (800d144 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	4b0a      	ldr	r3, [pc, #40]	@ (800d138 <prvAddCurrentTaskToDelayedList+0x94>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3304      	adds	r3, #4
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f7fe fafb 	bl	800b712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d11c:	4b0a      	ldr	r3, [pc, #40]	@ (800d148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	429a      	cmp	r2, r3
 800d124:	d202      	bcs.n	800d12c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d126:	4a08      	ldr	r2, [pc, #32]	@ (800d148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	6013      	str	r3, [r2, #0]
}
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	24001744 	.word	0x24001744
 800d138:	2400126c 	.word	0x2400126c
 800d13c:	2400172c 	.word	0x2400172c
 800d140:	240016fc 	.word	0x240016fc
 800d144:	240016f8 	.word	0x240016f8
 800d148:	24001760 	.word	0x24001760

0800d14c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08a      	sub	sp, #40	@ 0x28
 800d150:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d156:	f000 fb13 	bl	800d780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d15a:	4b1d      	ldr	r3, [pc, #116]	@ (800d1d0 <xTimerCreateTimerTask+0x84>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d021      	beq.n	800d1a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d16a:	1d3a      	adds	r2, r7, #4
 800d16c:	f107 0108 	add.w	r1, r7, #8
 800d170:	f107 030c 	add.w	r3, r7, #12
 800d174:	4618      	mov	r0, r3
 800d176:	f7fe fa61 	bl	800b63c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	9202      	str	r2, [sp, #8]
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	2302      	movs	r3, #2
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	460a      	mov	r2, r1
 800d18c:	4911      	ldr	r1, [pc, #68]	@ (800d1d4 <xTimerCreateTimerTask+0x88>)
 800d18e:	4812      	ldr	r0, [pc, #72]	@ (800d1d8 <xTimerCreateTimerTask+0x8c>)
 800d190:	f7ff f858 	bl	800c244 <xTaskCreateStatic>
 800d194:	4603      	mov	r3, r0
 800d196:	4a11      	ldr	r2, [pc, #68]	@ (800d1dc <xTimerCreateTimerTask+0x90>)
 800d198:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d19a:	4b10      	ldr	r3, [pc, #64]	@ (800d1dc <xTimerCreateTimerTask+0x90>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10b      	bne.n	800d1c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	613b      	str	r3, [r7, #16]
}
 800d1be:	bf00      	nop
 800d1c0:	bf00      	nop
 800d1c2:	e7fd      	b.n	800d1c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d1c4:	697b      	ldr	r3, [r7, #20]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	2400179c 	.word	0x2400179c
 800d1d4:	08011428 	.word	0x08011428
 800d1d8:	0800d319 	.word	0x0800d319
 800d1dc:	240017a0 	.word	0x240017a0

0800d1e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08a      	sub	sp, #40	@ 0x28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
 800d1ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10b      	bne.n	800d210 <xTimerGenericCommand+0x30>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	623b      	str	r3, [r7, #32]
}
 800d20a:	bf00      	nop
 800d20c:	bf00      	nop
 800d20e:	e7fd      	b.n	800d20c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d210:	4b19      	ldr	r3, [pc, #100]	@ (800d278 <xTimerGenericCommand+0x98>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d02a      	beq.n	800d26e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b05      	cmp	r3, #5
 800d228:	dc18      	bgt.n	800d25c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d22a:	f7ff fead 	bl	800cf88 <xTaskGetSchedulerState>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b02      	cmp	r3, #2
 800d232:	d109      	bne.n	800d248 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d234:	4b10      	ldr	r3, [pc, #64]	@ (800d278 <xTimerGenericCommand+0x98>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	f107 0110 	add.w	r1, r7, #16
 800d23c:	2300      	movs	r3, #0
 800d23e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d240:	f7fe fc10 	bl	800ba64 <xQueueGenericSend>
 800d244:	6278      	str	r0, [r7, #36]	@ 0x24
 800d246:	e012      	b.n	800d26e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d248:	4b0b      	ldr	r3, [pc, #44]	@ (800d278 <xTimerGenericCommand+0x98>)
 800d24a:	6818      	ldr	r0, [r3, #0]
 800d24c:	f107 0110 	add.w	r1, r7, #16
 800d250:	2300      	movs	r3, #0
 800d252:	2200      	movs	r2, #0
 800d254:	f7fe fc06 	bl	800ba64 <xQueueGenericSend>
 800d258:	6278      	str	r0, [r7, #36]	@ 0x24
 800d25a:	e008      	b.n	800d26e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d25c:	4b06      	ldr	r3, [pc, #24]	@ (800d278 <xTimerGenericCommand+0x98>)
 800d25e:	6818      	ldr	r0, [r3, #0]
 800d260:	f107 0110 	add.w	r1, r7, #16
 800d264:	2300      	movs	r3, #0
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	f7fe fcfe 	bl	800bc68 <xQueueGenericSendFromISR>
 800d26c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d270:	4618      	mov	r0, r3
 800d272:	3728      	adds	r7, #40	@ 0x28
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	2400179c 	.word	0x2400179c

0800d27c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af02      	add	r7, sp, #8
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d286:	4b23      	ldr	r3, [pc, #140]	@ (800d314 <prvProcessExpiredTimer+0x98>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	3304      	adds	r3, #4
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe fa75 	bl	800b784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2a0:	f003 0304 	and.w	r3, r3, #4
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d023      	beq.n	800d2f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	699a      	ldr	r2, [r3, #24]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	18d1      	adds	r1, r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	6978      	ldr	r0, [r7, #20]
 800d2b6:	f000 f8d5 	bl	800d464 <prvInsertTimerInActiveList>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d020      	beq.n	800d302 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	6978      	ldr	r0, [r7, #20]
 800d2cc:	f7ff ff88 	bl	800d1e0 <xTimerGenericCommand>
 800d2d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d114      	bne.n	800d302 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	60fb      	str	r3, [r7, #12]
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	e7fd      	b.n	800d2ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2f6:	f023 0301 	bic.w	r3, r3, #1
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	6978      	ldr	r0, [r7, #20]
 800d308:	4798      	blx	r3
}
 800d30a:	bf00      	nop
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	24001794 	.word	0x24001794

0800d318 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d320:	f107 0308 	add.w	r3, r7, #8
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f859 	bl	800d3dc <prvGetNextExpireTime>
 800d32a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	4619      	mov	r1, r3
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f000 f805 	bl	800d340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d336:	f000 f8d7 	bl	800d4e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d33a:	bf00      	nop
 800d33c:	e7f0      	b.n	800d320 <prvTimerTask+0x8>
	...

0800d340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d34a:	f7ff fa29 	bl	800c7a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d34e:	f107 0308 	add.w	r3, r7, #8
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f866 	bl	800d424 <prvSampleTimeNow>
 800d358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d130      	bne.n	800d3c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <prvProcessTimerOrBlockTask+0x3c>
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d806      	bhi.n	800d37c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d36e:	f7ff fa25 	bl	800c7bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d372:	68f9      	ldr	r1, [r7, #12]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff ff81 	bl	800d27c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d37a:	e024      	b.n	800d3c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d008      	beq.n	800d394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d382:	4b13      	ldr	r3, [pc, #76]	@ (800d3d0 <prvProcessTimerOrBlockTask+0x90>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <prvProcessTimerOrBlockTask+0x50>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e000      	b.n	800d392 <prvProcessTimerOrBlockTask+0x52>
 800d390:	2300      	movs	r3, #0
 800d392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d394:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d4 <prvProcessTimerOrBlockTask+0x94>)
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f7fe ff1b 	bl	800c1dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d3a6:	f7ff fa09 	bl	800c7bc <xTaskResumeAll>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10a      	bne.n	800d3c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d3b0:	4b09      	ldr	r3, [pc, #36]	@ (800d3d8 <prvProcessTimerOrBlockTask+0x98>)
 800d3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	f3bf 8f6f 	isb	sy
}
 800d3c0:	e001      	b.n	800d3c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d3c2:	f7ff f9fb 	bl	800c7bc <xTaskResumeAll>
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	24001798 	.word	0x24001798
 800d3d4:	2400179c 	.word	0x2400179c
 800d3d8:	e000ed04 	.word	0xe000ed04

0800d3dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800d420 <prvGetNextExpireTime+0x44>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <prvGetNextExpireTime+0x16>
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	e000      	b.n	800d3f4 <prvGetNextExpireTime+0x18>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d105      	bne.n	800d40c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d400:	4b07      	ldr	r3, [pc, #28]	@ (800d420 <prvGetNextExpireTime+0x44>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	e001      	b.n	800d410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d40c:	2300      	movs	r3, #0
 800d40e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d410:	68fb      	ldr	r3, [r7, #12]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	24001794 	.word	0x24001794

0800d424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d42c:	f7ff fa64 	bl	800c8f8 <xTaskGetTickCount>
 800d430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d432:	4b0b      	ldr	r3, [pc, #44]	@ (800d460 <prvSampleTimeNow+0x3c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d205      	bcs.n	800d448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d43c:	f000 f93a 	bl	800d6b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	e002      	b.n	800d44e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d44e:	4a04      	ldr	r2, [pc, #16]	@ (800d460 <prvSampleTimeNow+0x3c>)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d454:	68fb      	ldr	r3, [r7, #12]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	240017a4 	.word	0x240017a4

0800d464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	429a      	cmp	r2, r3
 800d488:	d812      	bhi.n	800d4b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	429a      	cmp	r2, r3
 800d496:	d302      	bcc.n	800d49e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d498:	2301      	movs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	e01b      	b.n	800d4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d49e:	4b10      	ldr	r3, [pc, #64]	@ (800d4e0 <prvInsertTimerInActiveList+0x7c>)
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	f7fe f932 	bl	800b712 <vListInsert>
 800d4ae:	e012      	b.n	800d4d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d206      	bcs.n	800d4c6 <prvInsertTimerInActiveList+0x62>
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d302      	bcc.n	800d4c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	617b      	str	r3, [r7, #20]
 800d4c4:	e007      	b.n	800d4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4c6:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <prvInsertTimerInActiveList+0x80>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	f7fe f91e 	bl	800b712 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d4d6:	697b      	ldr	r3, [r7, #20]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	24001798 	.word	0x24001798
 800d4e4:	24001794 	.word	0x24001794

0800d4e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08e      	sub	sp, #56	@ 0x38
 800d4ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4ee:	e0ce      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	da19      	bge.n	800d52a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d4f6:	1d3b      	adds	r3, r7, #4
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	61fb      	str	r3, [r7, #28]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d520:	6850      	ldr	r0, [r2, #4]
 800d522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d524:	6892      	ldr	r2, [r2, #8]
 800d526:	4611      	mov	r1, r2
 800d528:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f2c0 80ae 	blt.w	800d68e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d540:	3304      	adds	r3, #4
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe f91e 	bl	800b784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d548:	463b      	mov	r3, r7
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff ff6a 	bl	800d424 <prvSampleTimeNow>
 800d550:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2b09      	cmp	r3, #9
 800d556:	f200 8097 	bhi.w	800d688 <prvProcessReceivedCommands+0x1a0>
 800d55a:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <prvProcessReceivedCommands+0x78>)
 800d55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d560:	0800d589 	.word	0x0800d589
 800d564:	0800d589 	.word	0x0800d589
 800d568:	0800d589 	.word	0x0800d589
 800d56c:	0800d5ff 	.word	0x0800d5ff
 800d570:	0800d613 	.word	0x0800d613
 800d574:	0800d65f 	.word	0x0800d65f
 800d578:	0800d589 	.word	0x0800d589
 800d57c:	0800d589 	.word	0x0800d589
 800d580:	0800d5ff 	.word	0x0800d5ff
 800d584:	0800d613 	.word	0x0800d613
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d58e:	f043 0301 	orr.w	r3, r3, #1
 800d592:	b2da      	uxtb	r2, r3
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	18d1      	adds	r1, r2, r3
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5a8:	f7ff ff5c 	bl	800d464 <prvInsertTimerInActiveList>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d06c      	beq.n	800d68c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5c0:	f003 0304 	and.w	r3, r3, #4
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d061      	beq.n	800d68c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	441a      	add	r2, r3
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	2100      	movs	r1, #0
 800d5d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5da:	f7ff fe01 	bl	800d1e0 <xTimerGenericCommand>
 800d5de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d152      	bne.n	800d68c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	61bb      	str	r3, [r7, #24]
}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	e7fd      	b.n	800d5fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d604:	f023 0301 	bic.w	r3, r3, #1
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d610:	e03d      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d618:	f043 0301 	orr.w	r3, r3, #1
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d620:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d628:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10b      	bne.n	800d64a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	617b      	str	r3, [r7, #20]
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	e7fd      	b.n	800d646 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	699a      	ldr	r2, [r3, #24]
 800d64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d650:	18d1      	adds	r1, r2, r3
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d658:	f7ff ff04 	bl	800d464 <prvInsertTimerInActiveList>
					break;
 800d65c:	e017      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d664:	f003 0302 	and.w	r3, r3, #2
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d103      	bne.n	800d674 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d66c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d66e:	f000 fbeb 	bl	800de48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d672:	e00c      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d67a:	f023 0301 	bic.w	r3, r3, #1
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d686:	e002      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d688:	bf00      	nop
 800d68a:	e000      	b.n	800d68e <prvProcessReceivedCommands+0x1a6>
					break;
 800d68c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d68e:	4b08      	ldr	r3, [pc, #32]	@ (800d6b0 <prvProcessReceivedCommands+0x1c8>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	1d39      	adds	r1, r7, #4
 800d694:	2200      	movs	r2, #0
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fb84 	bl	800bda4 <xQueueReceive>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f47f af26 	bne.w	800d4f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	3730      	adds	r7, #48	@ 0x30
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	2400179c 	.word	0x2400179c

0800d6b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6ba:	e049      	b.n	800d750 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6c6:	4b2c      	ldr	r3, [pc, #176]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe f855 	bl	800b784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d02f      	beq.n	800d750 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	699b      	ldr	r3, [r3, #24]
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d90e      	bls.n	800d720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d70e:	4b1a      	ldr	r3, [pc, #104]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3304      	adds	r3, #4
 800d716:	4619      	mov	r1, r3
 800d718:	4610      	mov	r0, r2
 800d71a:	f7fd fffa 	bl	800b712 <vListInsert>
 800d71e:	e017      	b.n	800d750 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d720:	2300      	movs	r3, #0
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	2100      	movs	r1, #0
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7ff fd58 	bl	800d1e0 <xTimerGenericCommand>
 800d730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10b      	bne.n	800d750 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	603b      	str	r3, [r7, #0]
}
 800d74a:	bf00      	nop
 800d74c:	bf00      	nop
 800d74e:	e7fd      	b.n	800d74c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d750:	4b09      	ldr	r3, [pc, #36]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1b0      	bne.n	800d6bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d75a:	4b07      	ldr	r3, [pc, #28]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d760:	4b06      	ldr	r3, [pc, #24]	@ (800d77c <prvSwitchTimerLists+0xc8>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a04      	ldr	r2, [pc, #16]	@ (800d778 <prvSwitchTimerLists+0xc4>)
 800d766:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d768:	4a04      	ldr	r2, [pc, #16]	@ (800d77c <prvSwitchTimerLists+0xc8>)
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	6013      	str	r3, [r2, #0]
}
 800d76e:	bf00      	nop
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	24001794 	.word	0x24001794
 800d77c:	24001798 	.word	0x24001798

0800d780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d786:	f000 f96f 	bl	800da68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d78a:	4b15      	ldr	r3, [pc, #84]	@ (800d7e0 <prvCheckForValidListAndQueue+0x60>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d120      	bne.n	800d7d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d792:	4814      	ldr	r0, [pc, #80]	@ (800d7e4 <prvCheckForValidListAndQueue+0x64>)
 800d794:	f7fd ff6c 	bl	800b670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d798:	4813      	ldr	r0, [pc, #76]	@ (800d7e8 <prvCheckForValidListAndQueue+0x68>)
 800d79a:	f7fd ff69 	bl	800b670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d79e:	4b13      	ldr	r3, [pc, #76]	@ (800d7ec <prvCheckForValidListAndQueue+0x6c>)
 800d7a0:	4a10      	ldr	r2, [pc, #64]	@ (800d7e4 <prvCheckForValidListAndQueue+0x64>)
 800d7a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d7a4:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <prvCheckForValidListAndQueue+0x70>)
 800d7a6:	4a10      	ldr	r2, [pc, #64]	@ (800d7e8 <prvCheckForValidListAndQueue+0x68>)
 800d7a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	4b11      	ldr	r3, [pc, #68]	@ (800d7f4 <prvCheckForValidListAndQueue+0x74>)
 800d7b0:	4a11      	ldr	r2, [pc, #68]	@ (800d7f8 <prvCheckForValidListAndQueue+0x78>)
 800d7b2:	2110      	movs	r1, #16
 800d7b4:	200a      	movs	r0, #10
 800d7b6:	f7fe f879 	bl	800b8ac <xQueueGenericCreateStatic>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	4a08      	ldr	r2, [pc, #32]	@ (800d7e0 <prvCheckForValidListAndQueue+0x60>)
 800d7be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d7c0:	4b07      	ldr	r3, [pc, #28]	@ (800d7e0 <prvCheckForValidListAndQueue+0x60>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d7c8:	4b05      	ldr	r3, [pc, #20]	@ (800d7e0 <prvCheckForValidListAndQueue+0x60>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	490b      	ldr	r1, [pc, #44]	@ (800d7fc <prvCheckForValidListAndQueue+0x7c>)
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fcda 	bl	800c188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7d4:	f000 f97a 	bl	800dacc <vPortExitCritical>
}
 800d7d8:	bf00      	nop
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	2400179c 	.word	0x2400179c
 800d7e4:	2400176c 	.word	0x2400176c
 800d7e8:	24001780 	.word	0x24001780
 800d7ec:	24001794 	.word	0x24001794
 800d7f0:	24001798 	.word	0x24001798
 800d7f4:	24001848 	.word	0x24001848
 800d7f8:	240017a8 	.word	0x240017a8
 800d7fc:	08011430 	.word	0x08011430

0800d800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	3b04      	subs	r3, #4
 800d810:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3b04      	subs	r3, #4
 800d81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f023 0201 	bic.w	r2, r3, #1
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3b04      	subs	r3, #4
 800d82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d830:	4a0c      	ldr	r2, [pc, #48]	@ (800d864 <pxPortInitialiseStack+0x64>)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3b14      	subs	r3, #20
 800d83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3b04      	subs	r3, #4
 800d846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f06f 0202 	mvn.w	r2, #2
 800d84e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3b20      	subs	r3, #32
 800d854:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d856:	68fb      	ldr	r3, [r7, #12]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	0800d869 	.word	0x0800d869

0800d868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d872:	4b13      	ldr	r3, [pc, #76]	@ (800d8c0 <prvTaskExitError+0x58>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87a:	d00b      	beq.n	800d894 <prvTaskExitError+0x2c>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	60fb      	str	r3, [r7, #12]
}
 800d88e:	bf00      	nop
 800d890:	bf00      	nop
 800d892:	e7fd      	b.n	800d890 <prvTaskExitError+0x28>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	60bb      	str	r3, [r7, #8]
}
 800d8a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d8a8:	bf00      	nop
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d0fc      	beq.n	800d8aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	2400007c 	.word	0x2400007c
	...

0800d8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8d0:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <pxCurrentTCBConst2>)
 800d8d2:	6819      	ldr	r1, [r3, #0]
 800d8d4:	6808      	ldr	r0, [r1, #0]
 800d8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8da:	f380 8809 	msr	PSP, r0
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f04f 0000 	mov.w	r0, #0
 800d8e6:	f380 8811 	msr	BASEPRI, r0
 800d8ea:	4770      	bx	lr
 800d8ec:	f3af 8000 	nop.w

0800d8f0 <pxCurrentTCBConst2>:
 800d8f0:	2400126c 	.word	0x2400126c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop

0800d8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8f8:	4808      	ldr	r0, [pc, #32]	@ (800d91c <prvPortStartFirstTask+0x24>)
 800d8fa:	6800      	ldr	r0, [r0, #0]
 800d8fc:	6800      	ldr	r0, [r0, #0]
 800d8fe:	f380 8808 	msr	MSP, r0
 800d902:	f04f 0000 	mov.w	r0, #0
 800d906:	f380 8814 	msr	CONTROL, r0
 800d90a:	b662      	cpsie	i
 800d90c:	b661      	cpsie	f
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	df00      	svc	0
 800d918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d91a:	bf00      	nop
 800d91c:	e000ed08 	.word	0xe000ed08

0800d920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d926:	4b47      	ldr	r3, [pc, #284]	@ (800da44 <xPortStartScheduler+0x124>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a47      	ldr	r2, [pc, #284]	@ (800da48 <xPortStartScheduler+0x128>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d10b      	bne.n	800d948 <xPortStartScheduler+0x28>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	60fb      	str	r3, [r7, #12]
}
 800d942:	bf00      	nop
 800d944:	bf00      	nop
 800d946:	e7fd      	b.n	800d944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d948:	4b3e      	ldr	r3, [pc, #248]	@ (800da44 <xPortStartScheduler+0x124>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a3f      	ldr	r2, [pc, #252]	@ (800da4c <xPortStartScheduler+0x12c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d10b      	bne.n	800d96a <xPortStartScheduler+0x4a>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	613b      	str	r3, [r7, #16]
}
 800d964:	bf00      	nop
 800d966:	bf00      	nop
 800d968:	e7fd      	b.n	800d966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d96a:	4b39      	ldr	r3, [pc, #228]	@ (800da50 <xPortStartScheduler+0x130>)
 800d96c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	22ff      	movs	r2, #255	@ 0xff
 800d97a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	b2db      	uxtb	r3, r3
 800d982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4b31      	ldr	r3, [pc, #196]	@ (800da54 <xPortStartScheduler+0x134>)
 800d990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d992:	4b31      	ldr	r3, [pc, #196]	@ (800da58 <xPortStartScheduler+0x138>)
 800d994:	2207      	movs	r2, #7
 800d996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d998:	e009      	b.n	800d9ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d99a:	4b2f      	ldr	r3, [pc, #188]	@ (800da58 <xPortStartScheduler+0x138>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	4a2d      	ldr	r2, [pc, #180]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9ae:	78fb      	ldrb	r3, [r7, #3]
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9b6:	2b80      	cmp	r3, #128	@ 0x80
 800d9b8:	d0ef      	beq.n	800d99a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d9ba:	4b27      	ldr	r3, [pc, #156]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f1c3 0307 	rsb	r3, r3, #7
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d00b      	beq.n	800d9de <xPortStartScheduler+0xbe>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	60bb      	str	r3, [r7, #8]
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	e7fd      	b.n	800d9da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9de:	4b1e      	ldr	r3, [pc, #120]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	021b      	lsls	r3, r3, #8
 800d9e4:	4a1c      	ldr	r2, [pc, #112]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d9e8:	4b1b      	ldr	r3, [pc, #108]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d9f0:	4a19      	ldr	r2, [pc, #100]	@ (800da58 <xPortStartScheduler+0x138>)
 800d9f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d9fc:	4b17      	ldr	r3, [pc, #92]	@ (800da5c <xPortStartScheduler+0x13c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a16      	ldr	r2, [pc, #88]	@ (800da5c <xPortStartScheduler+0x13c>)
 800da02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da08:	4b14      	ldr	r3, [pc, #80]	@ (800da5c <xPortStartScheduler+0x13c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a13      	ldr	r2, [pc, #76]	@ (800da5c <xPortStartScheduler+0x13c>)
 800da0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800da12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da14:	f000 f8da 	bl	800dbcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da18:	4b11      	ldr	r3, [pc, #68]	@ (800da60 <xPortStartScheduler+0x140>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da1e:	f000 f8f9 	bl	800dc14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da22:	4b10      	ldr	r3, [pc, #64]	@ (800da64 <xPortStartScheduler+0x144>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a0f      	ldr	r2, [pc, #60]	@ (800da64 <xPortStartScheduler+0x144>)
 800da28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800da2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da2e:	f7ff ff63 	bl	800d8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da32:	f7ff f82b 	bl	800ca8c <vTaskSwitchContext>
	prvTaskExitError();
 800da36:	f7ff ff17 	bl	800d868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	e000ed00 	.word	0xe000ed00
 800da48:	410fc271 	.word	0x410fc271
 800da4c:	410fc270 	.word	0x410fc270
 800da50:	e000e400 	.word	0xe000e400
 800da54:	24001898 	.word	0x24001898
 800da58:	2400189c 	.word	0x2400189c
 800da5c:	e000ed20 	.word	0xe000ed20
 800da60:	2400007c 	.word	0x2400007c
 800da64:	e000ef34 	.word	0xe000ef34

0800da68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	607b      	str	r3, [r7, #4]
}
 800da80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da82:	4b10      	ldr	r3, [pc, #64]	@ (800dac4 <vPortEnterCritical+0x5c>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	3301      	adds	r3, #1
 800da88:	4a0e      	ldr	r2, [pc, #56]	@ (800dac4 <vPortEnterCritical+0x5c>)
 800da8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da8c:	4b0d      	ldr	r3, [pc, #52]	@ (800dac4 <vPortEnterCritical+0x5c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d110      	bne.n	800dab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da94:	4b0c      	ldr	r3, [pc, #48]	@ (800dac8 <vPortEnterCritical+0x60>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00b      	beq.n	800dab6 <vPortEnterCritical+0x4e>
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa2:	f383 8811 	msr	BASEPRI, r3
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	f3bf 8f4f 	dsb	sy
 800daae:	603b      	str	r3, [r7, #0]
}
 800dab0:	bf00      	nop
 800dab2:	bf00      	nop
 800dab4:	e7fd      	b.n	800dab2 <vPortEnterCritical+0x4a>
	}
}
 800dab6:	bf00      	nop
 800dab8:	370c      	adds	r7, #12
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	2400007c 	.word	0x2400007c
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dad2:	4b12      	ldr	r3, [pc, #72]	@ (800db1c <vPortExitCritical+0x50>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d10b      	bne.n	800daf2 <vPortExitCritical+0x26>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	607b      	str	r3, [r7, #4]
}
 800daec:	bf00      	nop
 800daee:	bf00      	nop
 800daf0:	e7fd      	b.n	800daee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800daf2:	4b0a      	ldr	r3, [pc, #40]	@ (800db1c <vPortExitCritical+0x50>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	4a08      	ldr	r2, [pc, #32]	@ (800db1c <vPortExitCritical+0x50>)
 800dafa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dafc:	4b07      	ldr	r3, [pc, #28]	@ (800db1c <vPortExitCritical+0x50>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d105      	bne.n	800db10 <vPortExitCritical+0x44>
 800db04:	2300      	movs	r3, #0
 800db06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f383 8811 	msr	BASEPRI, r3
}
 800db0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	2400007c 	.word	0x2400007c

0800db20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db20:	f3ef 8009 	mrs	r0, PSP
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	4b15      	ldr	r3, [pc, #84]	@ (800db80 <pxCurrentTCBConst>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	f01e 0f10 	tst.w	lr, #16
 800db30:	bf08      	it	eq
 800db32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3a:	6010      	str	r0, [r2, #0]
 800db3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800db44:	f380 8811 	msr	BASEPRI, r0
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f7fe ff9c 	bl	800ca8c <vTaskSwitchContext>
 800db54:	f04f 0000 	mov.w	r0, #0
 800db58:	f380 8811 	msr	BASEPRI, r0
 800db5c:	bc09      	pop	{r0, r3}
 800db5e:	6819      	ldr	r1, [r3, #0]
 800db60:	6808      	ldr	r0, [r1, #0]
 800db62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db66:	f01e 0f10 	tst.w	lr, #16
 800db6a:	bf08      	it	eq
 800db6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db70:	f380 8809 	msr	PSP, r0
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	f3af 8000 	nop.w

0800db80 <pxCurrentTCBConst>:
 800db80:	2400126c 	.word	0x2400126c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop

0800db88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	607b      	str	r3, [r7, #4]
}
 800dba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dba2:	f7fe feb9 	bl	800c918 <xTaskIncrementTick>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dbac:	4b06      	ldr	r3, [pc, #24]	@ (800dbc8 <xPortSysTickHandler+0x40>)
 800dbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f383 8811 	msr	BASEPRI, r3
}
 800dbbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dbc0:	bf00      	nop
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	e000ed04 	.word	0xe000ed04

0800dbcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbd0:	4b0b      	ldr	r3, [pc, #44]	@ (800dc00 <vPortSetupTimerInterrupt+0x34>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbd6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc04 <vPortSetupTimerInterrupt+0x38>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbdc:	4b0a      	ldr	r3, [pc, #40]	@ (800dc08 <vPortSetupTimerInterrupt+0x3c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a0a      	ldr	r2, [pc, #40]	@ (800dc0c <vPortSetupTimerInterrupt+0x40>)
 800dbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe6:	095b      	lsrs	r3, r3, #5
 800dbe8:	4a09      	ldr	r2, [pc, #36]	@ (800dc10 <vPortSetupTimerInterrupt+0x44>)
 800dbea:	3b01      	subs	r3, #1
 800dbec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dbee:	4b04      	ldr	r3, [pc, #16]	@ (800dc00 <vPortSetupTimerInterrupt+0x34>)
 800dbf0:	2207      	movs	r2, #7
 800dbf2:	601a      	str	r2, [r3, #0]
}
 800dbf4:	bf00      	nop
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	e000e010 	.word	0xe000e010
 800dc04:	e000e018 	.word	0xe000e018
 800dc08:	24000054 	.word	0x24000054
 800dc0c:	10624dd3 	.word	0x10624dd3
 800dc10:	e000e014 	.word	0xe000e014

0800dc14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dc24 <vPortEnableVFP+0x10>
 800dc18:	6801      	ldr	r1, [r0, #0]
 800dc1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dc1e:	6001      	str	r1, [r0, #0]
 800dc20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc22:	bf00      	nop
 800dc24:	e000ed88 	.word	0xe000ed88

0800dc28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc2e:	f3ef 8305 	mrs	r3, IPSR
 800dc32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b0f      	cmp	r3, #15
 800dc38:	d915      	bls.n	800dc66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc3a:	4a18      	ldr	r2, [pc, #96]	@ (800dc9c <vPortValidateInterruptPriority+0x74>)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc44:	4b16      	ldr	r3, [pc, #88]	@ (800dca0 <vPortValidateInterruptPriority+0x78>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	7afa      	ldrb	r2, [r7, #11]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d20b      	bcs.n	800dc66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	607b      	str	r3, [r7, #4]
}
 800dc60:	bf00      	nop
 800dc62:	bf00      	nop
 800dc64:	e7fd      	b.n	800dc62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc66:	4b0f      	ldr	r3, [pc, #60]	@ (800dca4 <vPortValidateInterruptPriority+0x7c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800dca8 <vPortValidateInterruptPriority+0x80>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d90b      	bls.n	800dc8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	603b      	str	r3, [r7, #0]
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	e7fd      	b.n	800dc8a <vPortValidateInterruptPriority+0x62>
	}
 800dc8e:	bf00      	nop
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	e000e3f0 	.word	0xe000e3f0
 800dca0:	24001898 	.word	0x24001898
 800dca4:	e000ed0c 	.word	0xe000ed0c
 800dca8:	2400189c 	.word	0x2400189c

0800dcac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	@ 0x28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dcb8:	f7fe fd72 	bl	800c7a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dcbc:	4b5c      	ldr	r3, [pc, #368]	@ (800de30 <pvPortMalloc+0x184>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d101      	bne.n	800dcc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dcc4:	f000 f924 	bl	800df10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dcc8:	4b5a      	ldr	r3, [pc, #360]	@ (800de34 <pvPortMalloc+0x188>)
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4013      	ands	r3, r2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f040 8095 	bne.w	800de00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d01e      	beq.n	800dd1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dcdc:	2208      	movs	r2, #8
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4413      	add	r3, r2
 800dce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f003 0307 	and.w	r3, r3, #7
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d015      	beq.n	800dd1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f023 0307 	bic.w	r3, r3, #7
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f003 0307 	and.w	r3, r3, #7
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00b      	beq.n	800dd1a <pvPortMalloc+0x6e>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	617b      	str	r3, [r7, #20]
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop
 800dd18:	e7fd      	b.n	800dd16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d06f      	beq.n	800de00 <pvPortMalloc+0x154>
 800dd20:	4b45      	ldr	r3, [pc, #276]	@ (800de38 <pvPortMalloc+0x18c>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d86a      	bhi.n	800de00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd2a:	4b44      	ldr	r3, [pc, #272]	@ (800de3c <pvPortMalloc+0x190>)
 800dd2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd2e:	4b43      	ldr	r3, [pc, #268]	@ (800de3c <pvPortMalloc+0x190>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd34:	e004      	b.n	800dd40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d903      	bls.n	800dd52 <pvPortMalloc+0xa6>
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1f1      	bne.n	800dd36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dd52:	4b37      	ldr	r3, [pc, #220]	@ (800de30 <pvPortMalloc+0x184>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d051      	beq.n	800de00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2208      	movs	r2, #8
 800dd62:	4413      	add	r3, r2
 800dd64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	1ad2      	subs	r2, r2, r3
 800dd76:	2308      	movs	r3, #8
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d920      	bls.n	800ddc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4413      	add	r3, r2
 800dd84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	f003 0307 	and.w	r3, r3, #7
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00b      	beq.n	800dda8 <pvPortMalloc+0xfc>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
 800dda6:	e7fd      	b.n	800dda4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	1ad2      	subs	r2, r2, r3
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ddba:	69b8      	ldr	r0, [r7, #24]
 800ddbc:	f000 f90a 	bl	800dfd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ddc0:	4b1d      	ldr	r3, [pc, #116]	@ (800de38 <pvPortMalloc+0x18c>)
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	4a1b      	ldr	r2, [pc, #108]	@ (800de38 <pvPortMalloc+0x18c>)
 800ddcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddce:	4b1a      	ldr	r3, [pc, #104]	@ (800de38 <pvPortMalloc+0x18c>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b1b      	ldr	r3, [pc, #108]	@ (800de40 <pvPortMalloc+0x194>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d203      	bcs.n	800dde2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ddda:	4b17      	ldr	r3, [pc, #92]	@ (800de38 <pvPortMalloc+0x18c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a18      	ldr	r2, [pc, #96]	@ (800de40 <pvPortMalloc+0x194>)
 800dde0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde4:	685a      	ldr	r2, [r3, #4]
 800dde6:	4b13      	ldr	r3, [pc, #76]	@ (800de34 <pvPortMalloc+0x188>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	431a      	orrs	r2, r3
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ddf6:	4b13      	ldr	r3, [pc, #76]	@ (800de44 <pvPortMalloc+0x198>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	4a11      	ldr	r2, [pc, #68]	@ (800de44 <pvPortMalloc+0x198>)
 800ddfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de00:	f7fe fcdc 	bl	800c7bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f003 0307 	and.w	r3, r3, #7
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00b      	beq.n	800de26 <pvPortMalloc+0x17a>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	60fb      	str	r3, [r7, #12]
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <pvPortMalloc+0x176>
	return pvReturn;
 800de26:	69fb      	ldr	r3, [r7, #28]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3728      	adds	r7, #40	@ 0x28
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	240054a8 	.word	0x240054a8
 800de34:	240054bc 	.word	0x240054bc
 800de38:	240054ac 	.word	0x240054ac
 800de3c:	240054a0 	.word	0x240054a0
 800de40:	240054b0 	.word	0x240054b0
 800de44:	240054b4 	.word	0x240054b4

0800de48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d04f      	beq.n	800defa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800de5a:	2308      	movs	r3, #8
 800de5c:	425b      	negs	r3, r3
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	4413      	add	r3, r2
 800de62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	4b25      	ldr	r3, [pc, #148]	@ (800df04 <vPortFree+0xbc>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4013      	ands	r3, r2
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <vPortFree+0x46>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	60fb      	str	r3, [r7, #12]
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	e7fd      	b.n	800de8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00b      	beq.n	800deae <vPortFree+0x66>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	60bb      	str	r3, [r7, #8]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	685a      	ldr	r2, [r3, #4]
 800deb2:	4b14      	ldr	r3, [pc, #80]	@ (800df04 <vPortFree+0xbc>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4013      	ands	r3, r2
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d01e      	beq.n	800defa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d11a      	bne.n	800defa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	4b0e      	ldr	r3, [pc, #56]	@ (800df04 <vPortFree+0xbc>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	43db      	mvns	r3, r3
 800dece:	401a      	ands	r2, r3
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ded4:	f7fe fc64 	bl	800c7a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	4b0a      	ldr	r3, [pc, #40]	@ (800df08 <vPortFree+0xc0>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4413      	add	r3, r2
 800dee2:	4a09      	ldr	r2, [pc, #36]	@ (800df08 <vPortFree+0xc0>)
 800dee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dee6:	6938      	ldr	r0, [r7, #16]
 800dee8:	f000 f874 	bl	800dfd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800deec:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <vPortFree+0xc4>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	4a06      	ldr	r2, [pc, #24]	@ (800df0c <vPortFree+0xc4>)
 800def4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800def6:	f7fe fc61 	bl	800c7bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800defa:	bf00      	nop
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	240054bc 	.word	0x240054bc
 800df08:	240054ac 	.word	0x240054ac
 800df0c:	240054b8 	.word	0x240054b8

0800df10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800df1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df1c:	4b27      	ldr	r3, [pc, #156]	@ (800dfbc <prvHeapInit+0xac>)
 800df1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f003 0307 	and.w	r3, r3, #7
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00c      	beq.n	800df44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3307      	adds	r3, #7
 800df2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f023 0307 	bic.w	r3, r3, #7
 800df36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	4a1f      	ldr	r2, [pc, #124]	@ (800dfbc <prvHeapInit+0xac>)
 800df40:	4413      	add	r3, r2
 800df42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df48:	4a1d      	ldr	r2, [pc, #116]	@ (800dfc0 <prvHeapInit+0xb0>)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800df4e:	4b1c      	ldr	r3, [pc, #112]	@ (800dfc0 <prvHeapInit+0xb0>)
 800df50:	2200      	movs	r2, #0
 800df52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	4413      	add	r3, r2
 800df5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800df5c:	2208      	movs	r2, #8
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	1a9b      	subs	r3, r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f023 0307 	bic.w	r3, r3, #7
 800df6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4a15      	ldr	r2, [pc, #84]	@ (800dfc4 <prvHeapInit+0xb4>)
 800df70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800df72:	4b14      	ldr	r3, [pc, #80]	@ (800dfc4 <prvHeapInit+0xb4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2200      	movs	r2, #0
 800df78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800df7a:	4b12      	ldr	r3, [pc, #72]	@ (800dfc4 <prvHeapInit+0xb4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	1ad2      	subs	r2, r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df90:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <prvHeapInit+0xb4>)
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	4a0a      	ldr	r2, [pc, #40]	@ (800dfc8 <prvHeapInit+0xb8>)
 800df9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	4a09      	ldr	r2, [pc, #36]	@ (800dfcc <prvHeapInit+0xbc>)
 800dfa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dfa8:	4b09      	ldr	r3, [pc, #36]	@ (800dfd0 <prvHeapInit+0xc0>)
 800dfaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dfae:	601a      	str	r2, [r3, #0]
}
 800dfb0:	bf00      	nop
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	240018a0 	.word	0x240018a0
 800dfc0:	240054a0 	.word	0x240054a0
 800dfc4:	240054a8 	.word	0x240054a8
 800dfc8:	240054b0 	.word	0x240054b0
 800dfcc:	240054ac 	.word	0x240054ac
 800dfd0:	240054bc 	.word	0x240054bc

0800dfd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dfdc:	4b28      	ldr	r3, [pc, #160]	@ (800e080 <prvInsertBlockIntoFreeList+0xac>)
 800dfde:	60fb      	str	r3, [r7, #12]
 800dfe0:	e002      	b.n	800dfe8 <prvInsertBlockIntoFreeList+0x14>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d8f7      	bhi.n	800dfe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	4413      	add	r3, r2
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	429a      	cmp	r2, r3
 800e002:	d108      	bne.n	800e016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	441a      	add	r2, r3
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	441a      	add	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	429a      	cmp	r2, r3
 800e028:	d118      	bne.n	800e05c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	4b15      	ldr	r3, [pc, #84]	@ (800e084 <prvInsertBlockIntoFreeList+0xb0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	429a      	cmp	r2, r3
 800e034:	d00d      	beq.n	800e052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685a      	ldr	r2, [r3, #4]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	441a      	add	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	e008      	b.n	800e064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e052:	4b0c      	ldr	r3, [pc, #48]	@ (800e084 <prvInsertBlockIntoFreeList+0xb0>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	e003      	b.n	800e064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d002      	beq.n	800e072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	240054a0 	.word	0x240054a0
 800e084:	240054a8 	.word	0x240054a8

0800e088 <arm_mat_trans_f32>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	8802      	ldrh	r2, [r0, #0]
 800e08e:	b085      	sub	sp, #20
 800e090:	884b      	ldrh	r3, [r1, #2]
 800e092:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e096:	4293      	cmp	r3, r2
 800e098:	8844      	ldrh	r4, [r0, #2]
 800e09a:	6848      	ldr	r0, [r1, #4]
 800e09c:	d14e      	bne.n	800e13c <arm_mat_trans_f32+0xb4>
 800e09e:	f8b1 8000 	ldrh.w	r8, [r1]
 800e0a2:	45a0      	cmp	r8, r4
 800e0a4:	d14a      	bne.n	800e13c <arm_mat_trans_f32+0xb4>
 800e0a6:	ea4f 0998 	mov.w	r9, r8, lsr #2
 800e0aa:	f008 0803 	and.w	r8, r8, #3
 800e0ae:	009c      	lsls	r4, r3, #2
 800e0b0:	4684      	mov	ip, r0
 800e0b2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800e0b6:	fb09 f204 	mul.w	r2, r9, r4
 800e0ba:	011d      	lsls	r5, r3, #4
 800e0bc:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 800e0c0:	eb00 0a04 	add.w	sl, r0, r4
 800e0c4:	0092      	lsls	r2, r2, #2
 800e0c6:	9103      	str	r1, [sp, #12]
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	9202      	str	r2, [sp, #8]
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	4663      	mov	r3, ip
 800e0d0:	f1b9 0f00 	cmp.w	r9, #0
 800e0d4:	d01d      	beq.n	800e112 <arm_mat_trans_f32+0x8a>
 800e0d6:	9901      	ldr	r1, [sp, #4]
 800e0d8:	f10e 0210 	add.w	r2, lr, #16
 800e0dc:	4648      	mov	r0, r9
 800e0de:	4461      	add	r1, ip
 800e0e0:	ed52 7a04 	vldr	s15, [r2, #-16]
 800e0e4:	191f      	adds	r7, r3, r4
 800e0e6:	190e      	adds	r6, r1, r4
 800e0e8:	3801      	subs	r0, #1
 800e0ea:	edc3 7a00 	vstr	s15, [r3]
 800e0ee:	f102 0210 	add.w	r2, r2, #16
 800e0f2:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 800e0f6:	442b      	add	r3, r5
 800e0f8:	edc7 7a00 	vstr	s15, [r7]
 800e0fc:	f852 7c18 	ldr.w	r7, [r2, #-24]
 800e100:	600f      	str	r7, [r1, #0]
 800e102:	4429      	add	r1, r5
 800e104:	f852 7c14 	ldr.w	r7, [r2, #-20]
 800e108:	6037      	str	r7, [r6, #0]
 800e10a:	d1e9      	bne.n	800e0e0 <arm_mat_trans_f32+0x58>
 800e10c:	9b02      	ldr	r3, [sp, #8]
 800e10e:	44de      	add	lr, fp
 800e110:	4463      	add	r3, ip
 800e112:	f1b8 0f00 	cmp.w	r8, #0
 800e116:	d009      	beq.n	800e12c <arm_mat_trans_f32+0xa4>
 800e118:	4642      	mov	r2, r8
 800e11a:	4671      	mov	r1, lr
 800e11c:	f851 0b04 	ldr.w	r0, [r1], #4
 800e120:	3a01      	subs	r2, #1
 800e122:	6018      	str	r0, [r3, #0]
 800e124:	4423      	add	r3, r4
 800e126:	d1f9      	bne.n	800e11c <arm_mat_trans_f32+0x94>
 800e128:	9b03      	ldr	r3, [sp, #12]
 800e12a:	449e      	add	lr, r3
 800e12c:	f10c 0c04 	add.w	ip, ip, #4
 800e130:	45d4      	cmp	ip, sl
 800e132:	d1cc      	bne.n	800e0ce <arm_mat_trans_f32+0x46>
 800e134:	2000      	movs	r0, #0
 800e136:	b005      	add	sp, #20
 800e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13c:	f06f 0002 	mvn.w	r0, #2
 800e140:	e7f9      	b.n	800e136 <arm_mat_trans_f32+0xae>
 800e142:	bf00      	nop

0800e144 <arm_mat_mult_f32>:
 800e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	8845      	ldrh	r5, [r0, #2]
 800e14a:	b08b      	sub	sp, #44	@ 0x2c
 800e14c:	880b      	ldrh	r3, [r1, #0]
 800e14e:	8806      	ldrh	r6, [r0, #0]
 800e150:	42ab      	cmp	r3, r5
 800e152:	9109      	str	r1, [sp, #36]	@ 0x24
 800e154:	6847      	ldr	r7, [r0, #4]
 800e156:	9604      	str	r6, [sp, #16]
 800e158:	6848      	ldr	r0, [r1, #4]
 800e15a:	6854      	ldr	r4, [r2, #4]
 800e15c:	8849      	ldrh	r1, [r1, #2]
 800e15e:	f040 808d 	bne.w	800e27c <arm_mat_mult_f32+0x138>
 800e162:	8815      	ldrh	r5, [r2, #0]
 800e164:	42b5      	cmp	r5, r6
 800e166:	f040 8089 	bne.w	800e27c <arm_mat_mult_f32+0x138>
 800e16a:	8852      	ldrh	r2, [r2, #2]
 800e16c:	428a      	cmp	r2, r1
 800e16e:	f040 8085 	bne.w	800e27c <arm_mat_mult_f32+0x138>
 800e172:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800e176:	1d01      	adds	r1, r0, #4
 800e178:	0116      	lsls	r6, r2, #4
 800e17a:	f003 0903 	and.w	r9, r3, #3
 800e17e:	9108      	str	r1, [sp, #32]
 800e180:	0095      	lsls	r5, r2, #2
 800e182:	fb06 f108 	mul.w	r1, r6, r8
 800e186:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	f107 0b10 	add.w	fp, r7, #16
 800e190:	9103      	str	r1, [sp, #12]
 800e192:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800e196:	00d2      	lsls	r2, r2, #3
 800e198:	eb04 0a05 	add.w	sl, r4, r5
 800e19c:	9101      	str	r1, [sp, #4]
 800e19e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800e1a2:	9202      	str	r2, [sp, #8]
 800e1a4:	9107      	str	r1, [sp, #28]
 800e1a6:	9306      	str	r3, [sp, #24]
 800e1a8:	f1ab 0310 	sub.w	r3, fp, #16
 800e1ac:	f8dd e020 	ldr.w	lr, [sp, #32]
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	9b07      	ldr	r3, [sp, #28]
 800e1b4:	eb03 0c0a 	add.w	ip, r3, sl
 800e1b8:	f1b8 0f00 	cmp.w	r8, #0
 800e1bc:	d056      	beq.n	800e26c <arm_mat_mult_f32+0x128>
 800e1be:	9b02      	ldr	r3, [sp, #8]
 800e1c0:	4644      	mov	r4, r8
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e288 <arm_mat_mult_f32+0x144>
 800e1c8:	18c1      	adds	r1, r0, r3
 800e1ca:	465b      	mov	r3, fp
 800e1cc:	edd2 6a00 	vldr	s13, [r2]
 800e1d0:	1957      	adds	r7, r2, r5
 800e1d2:	ed13 7a04 	vldr	s14, [r3, #-16]
 800e1d6:	3c01      	subs	r4, #1
 800e1d8:	ed53 5a03 	vldr	s11, [r3, #-12]
 800e1dc:	4432      	add	r2, r6
 800e1de:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e1e2:	ed97 6a00 	vldr	s12, [r7]
 800e1e6:	ed53 6a02 	vldr	s13, [r3, #-8]
 800e1ea:	eb01 0705 	add.w	r7, r1, r5
 800e1ee:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e1f2:	ed91 5a00 	vldr	s10, [r1]
 800e1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1fa:	edd7 5a00 	vldr	s11, [r7]
 800e1fe:	ee26 7a85 	vmul.f32	s14, s13, s10
 800e202:	ed53 6a01 	vldr	s13, [r3, #-4]
 800e206:	4431      	add	r1, r6
 800e208:	f103 0310 	add.w	r3, r3, #16
 800e20c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e210:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e21c:	d1d6      	bne.n	800e1cc <arm_mat_mult_f32+0x88>
 800e21e:	9b03      	ldr	r3, [sp, #12]
 800e220:	9a01      	ldr	r2, [sp, #4]
 800e222:	4418      	add	r0, r3
 800e224:	f1b9 0f00 	cmp.w	r9, #0
 800e228:	d00b      	beq.n	800e242 <arm_mat_mult_f32+0xfe>
 800e22a:	464b      	mov	r3, r9
 800e22c:	edd0 6a00 	vldr	s13, [r0]
 800e230:	3b01      	subs	r3, #1
 800e232:	ecb2 7a01 	vldmia	r2!, {s14}
 800e236:	4428      	add	r0, r5
 800e238:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e23c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e240:	d1f4      	bne.n	800e22c <arm_mat_mult_f32+0xe8>
 800e242:	ecec 7a01 	vstmia	ip!, {s15}
 800e246:	45d4      	cmp	ip, sl
 800e248:	4670      	mov	r0, lr
 800e24a:	f10e 0e04 	add.w	lr, lr, #4
 800e24e:	d1b3      	bne.n	800e1b8 <arm_mat_mult_f32+0x74>
 800e250:	9a01      	ldr	r2, [sp, #4]
 800e252:	44aa      	add	sl, r5
 800e254:	9b06      	ldr	r3, [sp, #24]
 800e256:	4611      	mov	r1, r2
 800e258:	449b      	add	fp, r3
 800e25a:	4419      	add	r1, r3
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	3b01      	subs	r3, #1
 800e260:	9101      	str	r1, [sp, #4]
 800e262:	9304      	str	r3, [sp, #16]
 800e264:	d006      	beq.n	800e274 <arm_mat_mult_f32+0x130>
 800e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e268:	6858      	ldr	r0, [r3, #4]
 800e26a:	e79d      	b.n	800e1a8 <arm_mat_mult_f32+0x64>
 800e26c:	9a05      	ldr	r2, [sp, #20]
 800e26e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800e288 <arm_mat_mult_f32+0x144>
 800e272:	e7d7      	b.n	800e224 <arm_mat_mult_f32+0xe0>
 800e274:	4618      	mov	r0, r3
 800e276:	b00b      	add	sp, #44	@ 0x2c
 800e278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27c:	f06f 0002 	mvn.w	r0, #2
 800e280:	b00b      	add	sp, #44	@ 0x2c
 800e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e286:	bf00      	nop
 800e288:	00000000 	.word	0x00000000

0800e28c <arm_mat_inverse_f32>:
 800e28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e290:	8843      	ldrh	r3, [r0, #2]
 800e292:	b087      	sub	sp, #28
 800e294:	8804      	ldrh	r4, [r0, #0]
 800e296:	684d      	ldr	r5, [r1, #4]
 800e298:	429c      	cmp	r4, r3
 800e29a:	9301      	str	r3, [sp, #4]
 800e29c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e2a0:	9503      	str	r5, [sp, #12]
 800e2a2:	f040 80e2 	bne.w	800e46a <arm_mat_inverse_f32+0x1de>
 800e2a6:	880b      	ldrh	r3, [r1, #0]
 800e2a8:	884a      	ldrh	r2, [r1, #2]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	f040 80dd 	bne.w	800e46a <arm_mat_inverse_f32+0x1de>
 800e2b0:	429c      	cmp	r4, r3
 800e2b2:	f040 80da 	bne.w	800e46a <arm_mat_inverse_f32+0x1de>
 800e2b6:	9005      	str	r0, [sp, #20]
 800e2b8:	b1fc      	cbz	r4, 800e2fa <arm_mat_inverse_f32+0x6e>
 800e2ba:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 800e2be:	1e66      	subs	r6, r4, #1
 800e2c0:	f845 bb04 	str.w	fp, [r5], #4
 800e2c4:	d019      	beq.n	800e2fa <arm_mat_inverse_f32+0x6e>
 800e2c6:	2701      	movs	r7, #1
 800e2c8:	00b2      	lsls	r2, r6, #2
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	eb05 0a02 	add.w	sl, r5, r2
 800e2d6:	f000 fe28 	bl	800ef2a <memset>
 800e2da:	4642      	mov	r2, r8
 800e2dc:	2100      	movs	r1, #0
 800e2de:	eb0a 0508 	add.w	r5, sl, r8
 800e2e2:	4650      	mov	r0, sl
 800e2e4:	2f00      	cmp	r7, #0
 800e2e6:	f000 80c5 	beq.w	800e474 <arm_mat_inverse_f32+0x1e8>
 800e2ea:	f000 fe1e 	bl	800ef2a <memset>
 800e2ee:	3e01      	subs	r6, #1
 800e2f0:	f107 0701 	add.w	r7, r7, #1
 800e2f4:	f845 bb04 	str.w	fp, [r5], #4
 800e2f8:	d1e6      	bne.n	800e2c8 <arm_mat_inverse_f32+0x3c>
 800e2fa:	9b01      	ldr	r3, [sp, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 80af 	beq.w	800e460 <arm_mat_inverse_f32+0x1d4>
 800e302:	009d      	lsls	r5, r3, #2
 800e304:	46cc      	mov	ip, r9
 800e306:	469e      	mov	lr, r3
 800e308:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e30c:	eb0c 0305 	add.w	r3, ip, r5
 800e310:	462f      	mov	r7, r5
 800e312:	2600      	movs	r6, #0
 800e314:	9302      	str	r3, [sp, #8]
 800e316:	1d2b      	adds	r3, r5, #4
 800e318:	9304      	str	r3, [sp, #16]
 800e31a:	9b02      	ldr	r3, [sp, #8]
 800e31c:	42b4      	cmp	r4, r6
 800e31e:	eddc 6a00 	vldr	s13, [ip]
 800e322:	eba3 0b07 	sub.w	fp, r3, r7
 800e326:	f000 809b 	beq.w	800e460 <arm_mat_inverse_f32+0x1d4>
 800e32a:	4632      	mov	r2, r6
 800e32c:	4663      	mov	r3, ip
 800e32e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e484 <arm_mat_inverse_f32+0x1f8>
 800e332:	e009      	b.n	800e348 <arm_mat_inverse_f32+0xbc>
 800e334:	eef4 7a47 	vcmp.f32	s15, s14
 800e338:	3201      	adds	r2, #1
 800e33a:	442b      	add	r3, r5
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	fe37 7a87 	vselgt.f32	s14, s15, s14
 800e344:	42a2      	cmp	r2, r4
 800e346:	d012      	beq.n	800e36e <arm_mat_inverse_f32+0xe2>
 800e348:	edd3 7a00 	vldr	s15, [r3]
 800e34c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e350:	eeb1 6a67 	vneg.f32	s12, s15
 800e354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e358:	dcec      	bgt.n	800e334 <arm_mat_inverse_f32+0xa8>
 800e35a:	eeb4 6a47 	vcmp.f32	s12, s14
 800e35e:	3201      	adds	r2, #1
 800e360:	442b      	add	r3, r5
 800e362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e366:	fe36 7a07 	vselgt.f32	s14, s12, s14
 800e36a:	42a2      	cmp	r2, r4
 800e36c:	d1ec      	bne.n	800e348 <arm_mat_inverse_f32+0xbc>
 800e36e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e376:	d073      	beq.n	800e460 <arm_mat_inverse_f32+0x1d4>
 800e378:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e380:	d06e      	beq.n	800e460 <arm_mat_inverse_f32+0x1d4>
 800e382:	4672      	mov	r2, lr
 800e384:	4663      	mov	r3, ip
 800e386:	ed93 7a00 	vldr	s14, [r3]
 800e38a:	3a01      	subs	r2, #1
 800e38c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e390:	ece3 7a01 	vstmia	r3!, {s15}
 800e394:	d1f7      	bne.n	800e386 <arm_mat_inverse_f32+0xfa>
 800e396:	9901      	ldr	r1, [sp, #4]
 800e398:	464b      	mov	r3, r9
 800e39a:	ed93 7a00 	vldr	s14, [r3]
 800e39e:	3901      	subs	r1, #1
 800e3a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3a4:	ece3 7a01 	vstmia	r3!, {s15}
 800e3a8:	d1f7      	bne.n	800e39a <arm_mat_inverse_f32+0x10e>
 800e3aa:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e3ae:	9803      	ldr	r0, [sp, #12]
 800e3b0:	42b1      	cmp	r1, r6
 800e3b2:	d038      	beq.n	800e426 <arm_mat_inverse_f32+0x19a>
 800e3b4:	eddb 6a00 	vldr	s13, [fp]
 800e3b8:	465a      	mov	r2, fp
 800e3ba:	4673      	mov	r3, lr
 800e3bc:	46e2      	mov	sl, ip
 800e3be:	ecba 7a01 	vldmia	sl!, {s14}
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	edd2 7a00 	vldr	s15, [r2]
 800e3c8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e3cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3d0:	ece2 7a01 	vstmia	r2!, {s15}
 800e3d4:	d1f3      	bne.n	800e3be <arm_mat_inverse_f32+0x132>
 800e3d6:	44bb      	add	fp, r7
 800e3d8:	4602      	mov	r2, r0
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	46ca      	mov	sl, r9
 800e3de:	ecba 7a01 	vldmia	sl!, {s14}
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	edd2 7a00 	vldr	s15, [r2]
 800e3e8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e3ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3f0:	ece2 7a01 	vstmia	r2!, {s15}
 800e3f4:	d1f3      	bne.n	800e3de <arm_mat_inverse_f32+0x152>
 800e3f6:	4428      	add	r0, r5
 800e3f8:	3101      	adds	r1, #1
 800e3fa:	44c3      	add	fp, r8
 800e3fc:	428c      	cmp	r4, r1
 800e3fe:	d1d7      	bne.n	800e3b0 <arm_mat_inverse_f32+0x124>
 800e400:	9b04      	ldr	r3, [sp, #16]
 800e402:	f1be 0e01 	subs.w	lr, lr, #1
 800e406:	f106 0601 	add.w	r6, r6, #1
 800e40a:	f1a7 0704 	sub.w	r7, r7, #4
 800e40e:	449c      	add	ip, r3
 800e410:	44a9      	add	r9, r5
 800e412:	d182      	bne.n	800e31a <arm_mat_inverse_f32+0x8e>
 800e414:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41c:	d006      	beq.n	800e42c <arm_mat_inverse_f32+0x1a0>
 800e41e:	2000      	movs	r0, #0
 800e420:	b007      	add	sp, #28
 800e422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e426:	44bb      	add	fp, r7
 800e428:	4428      	add	r0, r5
 800e42a:	e7e5      	b.n	800e3f8 <arm_mat_inverse_f32+0x16c>
 800e42c:	9b05      	ldr	r3, [sp, #20]
 800e42e:	9a01      	ldr	r2, [sp, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	fb02 f204 	mul.w	r2, r2, r4
 800e436:	edd3 7a00 	vldr	s15, [r3]
 800e43a:	4614      	mov	r4, r2
 800e43c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e444:	d1eb      	bne.n	800e41e <arm_mat_inverse_f32+0x192>
 800e446:	3304      	adds	r3, #4
 800e448:	e006      	b.n	800e458 <arm_mat_inverse_f32+0x1cc>
 800e44a:	ecf3 7a01 	vldmia	r3!, {s15}
 800e44e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e456:	d1e2      	bne.n	800e41e <arm_mat_inverse_f32+0x192>
 800e458:	f10e 0e01 	add.w	lr, lr, #1
 800e45c:	4574      	cmp	r4, lr
 800e45e:	d1f4      	bne.n	800e44a <arm_mat_inverse_f32+0x1be>
 800e460:	f06f 0004 	mvn.w	r0, #4
 800e464:	b007      	add	sp, #28
 800e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46a:	f06f 0002 	mvn.w	r0, #2
 800e46e:	b007      	add	sp, #28
 800e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e474:	4655      	mov	r5, sl
 800e476:	3e01      	subs	r6, #1
 800e478:	f845 bb04 	str.w	fp, [r5], #4
 800e47c:	f47f af23 	bne.w	800e2c6 <arm_mat_inverse_f32+0x3a>
 800e480:	e73b      	b.n	800e2fa <arm_mat_inverse_f32+0x6e>
 800e482:	bf00      	nop
 800e484:	00000000 	.word	0x00000000

0800e488 <arm_mat_init_f32>:
 800e488:	8001      	strh	r1, [r0, #0]
 800e48a:	8042      	strh	r2, [r0, #2]
 800e48c:	6043      	str	r3, [r0, #4]
 800e48e:	4770      	bx	lr

0800e490 <__cvt>:
 800e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e492:	ed2d 8b02 	vpush	{d8}
 800e496:	eeb0 8b40 	vmov.f64	d8, d0
 800e49a:	b085      	sub	sp, #20
 800e49c:	4617      	mov	r7, r2
 800e49e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e4a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4a2:	ee18 2a90 	vmov	r2, s17
 800e4a6:	f025 0520 	bic.w	r5, r5, #32
 800e4aa:	2a00      	cmp	r2, #0
 800e4ac:	bfb6      	itet	lt
 800e4ae:	222d      	movlt	r2, #45	@ 0x2d
 800e4b0:	2200      	movge	r2, #0
 800e4b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800e4b6:	2d46      	cmp	r5, #70	@ 0x46
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	d004      	beq.n	800e4c8 <__cvt+0x38>
 800e4be:	2d45      	cmp	r5, #69	@ 0x45
 800e4c0:	d100      	bne.n	800e4c4 <__cvt+0x34>
 800e4c2:	3401      	adds	r4, #1
 800e4c4:	2102      	movs	r1, #2
 800e4c6:	e000      	b.n	800e4ca <__cvt+0x3a>
 800e4c8:	2103      	movs	r1, #3
 800e4ca:	ab03      	add	r3, sp, #12
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	ab02      	add	r3, sp, #8
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	4633      	mov	r3, r6
 800e4d6:	eeb0 0b48 	vmov.f64	d0, d8
 800e4da:	f000 fe9d 	bl	800f218 <_dtoa_r>
 800e4de:	2d47      	cmp	r5, #71	@ 0x47
 800e4e0:	d114      	bne.n	800e50c <__cvt+0x7c>
 800e4e2:	07fb      	lsls	r3, r7, #31
 800e4e4:	d50a      	bpl.n	800e4fc <__cvt+0x6c>
 800e4e6:	1902      	adds	r2, r0, r4
 800e4e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f0:	bf08      	it	eq
 800e4f2:	9203      	streq	r2, [sp, #12]
 800e4f4:	2130      	movs	r1, #48	@ 0x30
 800e4f6:	9b03      	ldr	r3, [sp, #12]
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d319      	bcc.n	800e530 <__cvt+0xa0>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e500:	1a1b      	subs	r3, r3, r0
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	b005      	add	sp, #20
 800e506:	ecbd 8b02 	vpop	{d8}
 800e50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50c:	2d46      	cmp	r5, #70	@ 0x46
 800e50e:	eb00 0204 	add.w	r2, r0, r4
 800e512:	d1e9      	bne.n	800e4e8 <__cvt+0x58>
 800e514:	7803      	ldrb	r3, [r0, #0]
 800e516:	2b30      	cmp	r3, #48	@ 0x30
 800e518:	d107      	bne.n	800e52a <__cvt+0x9a>
 800e51a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e522:	bf1c      	itt	ne
 800e524:	f1c4 0401 	rsbne	r4, r4, #1
 800e528:	6034      	strne	r4, [r6, #0]
 800e52a:	6833      	ldr	r3, [r6, #0]
 800e52c:	441a      	add	r2, r3
 800e52e:	e7db      	b.n	800e4e8 <__cvt+0x58>
 800e530:	1c5c      	adds	r4, r3, #1
 800e532:	9403      	str	r4, [sp, #12]
 800e534:	7019      	strb	r1, [r3, #0]
 800e536:	e7de      	b.n	800e4f6 <__cvt+0x66>

0800e538 <__exponent>:
 800e538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e53a:	2900      	cmp	r1, #0
 800e53c:	bfba      	itte	lt
 800e53e:	4249      	neglt	r1, r1
 800e540:	232d      	movlt	r3, #45	@ 0x2d
 800e542:	232b      	movge	r3, #43	@ 0x2b
 800e544:	2909      	cmp	r1, #9
 800e546:	7002      	strb	r2, [r0, #0]
 800e548:	7043      	strb	r3, [r0, #1]
 800e54a:	dd29      	ble.n	800e5a0 <__exponent+0x68>
 800e54c:	f10d 0307 	add.w	r3, sp, #7
 800e550:	461d      	mov	r5, r3
 800e552:	270a      	movs	r7, #10
 800e554:	461a      	mov	r2, r3
 800e556:	fbb1 f6f7 	udiv	r6, r1, r7
 800e55a:	fb07 1416 	mls	r4, r7, r6, r1
 800e55e:	3430      	adds	r4, #48	@ 0x30
 800e560:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e564:	460c      	mov	r4, r1
 800e566:	2c63      	cmp	r4, #99	@ 0x63
 800e568:	f103 33ff 	add.w	r3, r3, #4294967295
 800e56c:	4631      	mov	r1, r6
 800e56e:	dcf1      	bgt.n	800e554 <__exponent+0x1c>
 800e570:	3130      	adds	r1, #48	@ 0x30
 800e572:	1e94      	subs	r4, r2, #2
 800e574:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e578:	1c41      	adds	r1, r0, #1
 800e57a:	4623      	mov	r3, r4
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	d30a      	bcc.n	800e596 <__exponent+0x5e>
 800e580:	f10d 0309 	add.w	r3, sp, #9
 800e584:	1a9b      	subs	r3, r3, r2
 800e586:	42ac      	cmp	r4, r5
 800e588:	bf88      	it	hi
 800e58a:	2300      	movhi	r3, #0
 800e58c:	3302      	adds	r3, #2
 800e58e:	4403      	add	r3, r0
 800e590:	1a18      	subs	r0, r3, r0
 800e592:	b003      	add	sp, #12
 800e594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e596:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e59a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e59e:	e7ed      	b.n	800e57c <__exponent+0x44>
 800e5a0:	2330      	movs	r3, #48	@ 0x30
 800e5a2:	3130      	adds	r1, #48	@ 0x30
 800e5a4:	7083      	strb	r3, [r0, #2]
 800e5a6:	70c1      	strb	r1, [r0, #3]
 800e5a8:	1d03      	adds	r3, r0, #4
 800e5aa:	e7f1      	b.n	800e590 <__exponent+0x58>
 800e5ac:	0000      	movs	r0, r0
	...

0800e5b0 <_printf_float>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	b08d      	sub	sp, #52	@ 0x34
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e5bc:	4616      	mov	r6, r2
 800e5be:	461f      	mov	r7, r3
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f000 fcbb 	bl	800ef3c <_localeconv_r>
 800e5c6:	f8d0 b000 	ldr.w	fp, [r0]
 800e5ca:	4658      	mov	r0, fp
 800e5cc:	f7f1 fed8 	bl	8000380 <strlen>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e5dc:	6822      	ldr	r2, [r4, #0]
 800e5de:	9005      	str	r0, [sp, #20]
 800e5e0:	3307      	adds	r3, #7
 800e5e2:	f023 0307 	bic.w	r3, r3, #7
 800e5e6:	f103 0108 	add.w	r1, r3, #8
 800e5ea:	f8c8 1000 	str.w	r1, [r8]
 800e5ee:	ed93 0b00 	vldr	d0, [r3]
 800e5f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e850 <_printf_float+0x2a0>
 800e5f6:	eeb0 7bc0 	vabs.f64	d7, d0
 800e5fa:	eeb4 7b46 	vcmp.f64	d7, d6
 800e5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e602:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e606:	dd24      	ble.n	800e652 <_printf_float+0xa2>
 800e608:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e610:	d502      	bpl.n	800e618 <_printf_float+0x68>
 800e612:	232d      	movs	r3, #45	@ 0x2d
 800e614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e618:	498f      	ldr	r1, [pc, #572]	@ (800e858 <_printf_float+0x2a8>)
 800e61a:	4b90      	ldr	r3, [pc, #576]	@ (800e85c <_printf_float+0x2ac>)
 800e61c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e620:	bf8c      	ite	hi
 800e622:	4688      	movhi	r8, r1
 800e624:	4698      	movls	r8, r3
 800e626:	f022 0204 	bic.w	r2, r2, #4
 800e62a:	2303      	movs	r3, #3
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	f04f 0a00 	mov.w	sl, #0
 800e634:	9700      	str	r7, [sp, #0]
 800e636:	4633      	mov	r3, r6
 800e638:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e63a:	4621      	mov	r1, r4
 800e63c:	4628      	mov	r0, r5
 800e63e:	f000 f9d1 	bl	800e9e4 <_printf_common>
 800e642:	3001      	adds	r0, #1
 800e644:	f040 8089 	bne.w	800e75a <_printf_float+0x1aa>
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
 800e64c:	b00d      	add	sp, #52	@ 0x34
 800e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e652:	eeb4 0b40 	vcmp.f64	d0, d0
 800e656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65a:	d709      	bvc.n	800e670 <_printf_float+0xc0>
 800e65c:	ee10 3a90 	vmov	r3, s1
 800e660:	2b00      	cmp	r3, #0
 800e662:	bfbc      	itt	lt
 800e664:	232d      	movlt	r3, #45	@ 0x2d
 800e666:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e66a:	497d      	ldr	r1, [pc, #500]	@ (800e860 <_printf_float+0x2b0>)
 800e66c:	4b7d      	ldr	r3, [pc, #500]	@ (800e864 <_printf_float+0x2b4>)
 800e66e:	e7d5      	b.n	800e61c <_printf_float+0x6c>
 800e670:	6863      	ldr	r3, [r4, #4]
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e678:	d139      	bne.n	800e6ee <_printf_float+0x13e>
 800e67a:	2306      	movs	r3, #6
 800e67c:	6063      	str	r3, [r4, #4]
 800e67e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e682:	2300      	movs	r3, #0
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	9303      	str	r3, [sp, #12]
 800e688:	ab0a      	add	r3, sp, #40	@ 0x28
 800e68a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e68e:	ab09      	add	r3, sp, #36	@ 0x24
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	6861      	ldr	r1, [r4, #4]
 800e694:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e698:	4628      	mov	r0, r5
 800e69a:	f7ff fef9 	bl	800e490 <__cvt>
 800e69e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e6a4:	4680      	mov	r8, r0
 800e6a6:	d129      	bne.n	800e6fc <_printf_float+0x14c>
 800e6a8:	1cc8      	adds	r0, r1, #3
 800e6aa:	db02      	blt.n	800e6b2 <_printf_float+0x102>
 800e6ac:	6863      	ldr	r3, [r4, #4]
 800e6ae:	4299      	cmp	r1, r3
 800e6b0:	dd41      	ble.n	800e736 <_printf_float+0x186>
 800e6b2:	f1a9 0902 	sub.w	r9, r9, #2
 800e6b6:	fa5f f989 	uxtb.w	r9, r9
 800e6ba:	3901      	subs	r1, #1
 800e6bc:	464a      	mov	r2, r9
 800e6be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e6c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e6c4:	f7ff ff38 	bl	800e538 <__exponent>
 800e6c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e6ca:	1813      	adds	r3, r2, r0
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	4682      	mov	sl, r0
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	dc02      	bgt.n	800e6da <_printf_float+0x12a>
 800e6d4:	6822      	ldr	r2, [r4, #0]
 800e6d6:	07d2      	lsls	r2, r2, #31
 800e6d8:	d501      	bpl.n	800e6de <_printf_float+0x12e>
 800e6da:	3301      	adds	r3, #1
 800e6dc:	6123      	str	r3, [r4, #16]
 800e6de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0a6      	beq.n	800e634 <_printf_float+0x84>
 800e6e6:	232d      	movs	r3, #45	@ 0x2d
 800e6e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6ec:	e7a2      	b.n	800e634 <_printf_float+0x84>
 800e6ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6f2:	d1c4      	bne.n	800e67e <_printf_float+0xce>
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1c2      	bne.n	800e67e <_printf_float+0xce>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e7bf      	b.n	800e67c <_printf_float+0xcc>
 800e6fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e700:	d9db      	bls.n	800e6ba <_printf_float+0x10a>
 800e702:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e706:	d118      	bne.n	800e73a <_printf_float+0x18a>
 800e708:	2900      	cmp	r1, #0
 800e70a:	6863      	ldr	r3, [r4, #4]
 800e70c:	dd0b      	ble.n	800e726 <_printf_float+0x176>
 800e70e:	6121      	str	r1, [r4, #16]
 800e710:	b913      	cbnz	r3, 800e718 <_printf_float+0x168>
 800e712:	6822      	ldr	r2, [r4, #0]
 800e714:	07d0      	lsls	r0, r2, #31
 800e716:	d502      	bpl.n	800e71e <_printf_float+0x16e>
 800e718:	3301      	adds	r3, #1
 800e71a:	440b      	add	r3, r1
 800e71c:	6123      	str	r3, [r4, #16]
 800e71e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e720:	f04f 0a00 	mov.w	sl, #0
 800e724:	e7db      	b.n	800e6de <_printf_float+0x12e>
 800e726:	b913      	cbnz	r3, 800e72e <_printf_float+0x17e>
 800e728:	6822      	ldr	r2, [r4, #0]
 800e72a:	07d2      	lsls	r2, r2, #31
 800e72c:	d501      	bpl.n	800e732 <_printf_float+0x182>
 800e72e:	3302      	adds	r3, #2
 800e730:	e7f4      	b.n	800e71c <_printf_float+0x16c>
 800e732:	2301      	movs	r3, #1
 800e734:	e7f2      	b.n	800e71c <_printf_float+0x16c>
 800e736:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e73a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e73c:	4299      	cmp	r1, r3
 800e73e:	db05      	blt.n	800e74c <_printf_float+0x19c>
 800e740:	6823      	ldr	r3, [r4, #0]
 800e742:	6121      	str	r1, [r4, #16]
 800e744:	07d8      	lsls	r0, r3, #31
 800e746:	d5ea      	bpl.n	800e71e <_printf_float+0x16e>
 800e748:	1c4b      	adds	r3, r1, #1
 800e74a:	e7e7      	b.n	800e71c <_printf_float+0x16c>
 800e74c:	2900      	cmp	r1, #0
 800e74e:	bfd4      	ite	le
 800e750:	f1c1 0202 	rsble	r2, r1, #2
 800e754:	2201      	movgt	r2, #1
 800e756:	4413      	add	r3, r2
 800e758:	e7e0      	b.n	800e71c <_printf_float+0x16c>
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	055a      	lsls	r2, r3, #21
 800e75e:	d407      	bmi.n	800e770 <_printf_float+0x1c0>
 800e760:	6923      	ldr	r3, [r4, #16]
 800e762:	4642      	mov	r2, r8
 800e764:	4631      	mov	r1, r6
 800e766:	4628      	mov	r0, r5
 800e768:	47b8      	blx	r7
 800e76a:	3001      	adds	r0, #1
 800e76c:	d12a      	bne.n	800e7c4 <_printf_float+0x214>
 800e76e:	e76b      	b.n	800e648 <_printf_float+0x98>
 800e770:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e774:	f240 80e0 	bls.w	800e938 <_printf_float+0x388>
 800e778:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e77c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e784:	d133      	bne.n	800e7ee <_printf_float+0x23e>
 800e786:	4a38      	ldr	r2, [pc, #224]	@ (800e868 <_printf_float+0x2b8>)
 800e788:	2301      	movs	r3, #1
 800e78a:	4631      	mov	r1, r6
 800e78c:	4628      	mov	r0, r5
 800e78e:	47b8      	blx	r7
 800e790:	3001      	adds	r0, #1
 800e792:	f43f af59 	beq.w	800e648 <_printf_float+0x98>
 800e796:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e79a:	4543      	cmp	r3, r8
 800e79c:	db02      	blt.n	800e7a4 <_printf_float+0x1f4>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	07d8      	lsls	r0, r3, #31
 800e7a2:	d50f      	bpl.n	800e7c4 <_printf_float+0x214>
 800e7a4:	9b05      	ldr	r3, [sp, #20]
 800e7a6:	465a      	mov	r2, fp
 800e7a8:	4631      	mov	r1, r6
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	47b8      	blx	r7
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	f43f af4a 	beq.w	800e648 <_printf_float+0x98>
 800e7b4:	f04f 0900 	mov.w	r9, #0
 800e7b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7bc:	f104 0a1a 	add.w	sl, r4, #26
 800e7c0:	45c8      	cmp	r8, r9
 800e7c2:	dc09      	bgt.n	800e7d8 <_printf_float+0x228>
 800e7c4:	6823      	ldr	r3, [r4, #0]
 800e7c6:	079b      	lsls	r3, r3, #30
 800e7c8:	f100 8107 	bmi.w	800e9da <_printf_float+0x42a>
 800e7cc:	68e0      	ldr	r0, [r4, #12]
 800e7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7d0:	4298      	cmp	r0, r3
 800e7d2:	bfb8      	it	lt
 800e7d4:	4618      	movlt	r0, r3
 800e7d6:	e739      	b.n	800e64c <_printf_float+0x9c>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	4652      	mov	r2, sl
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4628      	mov	r0, r5
 800e7e0:	47b8      	blx	r7
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f43f af30 	beq.w	800e648 <_printf_float+0x98>
 800e7e8:	f109 0901 	add.w	r9, r9, #1
 800e7ec:	e7e8      	b.n	800e7c0 <_printf_float+0x210>
 800e7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	dc3b      	bgt.n	800e86c <_printf_float+0x2bc>
 800e7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e868 <_printf_float+0x2b8>)
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	47b8      	blx	r7
 800e7fe:	3001      	adds	r0, #1
 800e800:	f43f af22 	beq.w	800e648 <_printf_float+0x98>
 800e804:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e808:	ea59 0303 	orrs.w	r3, r9, r3
 800e80c:	d102      	bne.n	800e814 <_printf_float+0x264>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	07d9      	lsls	r1, r3, #31
 800e812:	d5d7      	bpl.n	800e7c4 <_printf_float+0x214>
 800e814:	9b05      	ldr	r3, [sp, #20]
 800e816:	465a      	mov	r2, fp
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	f43f af12 	beq.w	800e648 <_printf_float+0x98>
 800e824:	f04f 0a00 	mov.w	sl, #0
 800e828:	f104 0b1a 	add.w	fp, r4, #26
 800e82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e82e:	425b      	negs	r3, r3
 800e830:	4553      	cmp	r3, sl
 800e832:	dc01      	bgt.n	800e838 <_printf_float+0x288>
 800e834:	464b      	mov	r3, r9
 800e836:	e794      	b.n	800e762 <_printf_float+0x1b2>
 800e838:	2301      	movs	r3, #1
 800e83a:	465a      	mov	r2, fp
 800e83c:	4631      	mov	r1, r6
 800e83e:	4628      	mov	r0, r5
 800e840:	47b8      	blx	r7
 800e842:	3001      	adds	r0, #1
 800e844:	f43f af00 	beq.w	800e648 <_printf_float+0x98>
 800e848:	f10a 0a01 	add.w	sl, sl, #1
 800e84c:	e7ee      	b.n	800e82c <_printf_float+0x27c>
 800e84e:	bf00      	nop
 800e850:	ffffffff 	.word	0xffffffff
 800e854:	7fefffff 	.word	0x7fefffff
 800e858:	080114d8 	.word	0x080114d8
 800e85c:	080114d4 	.word	0x080114d4
 800e860:	080114e0 	.word	0x080114e0
 800e864:	080114dc 	.word	0x080114dc
 800e868:	080114e4 	.word	0x080114e4
 800e86c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e86e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e872:	4553      	cmp	r3, sl
 800e874:	bfa8      	it	ge
 800e876:	4653      	movge	r3, sl
 800e878:	2b00      	cmp	r3, #0
 800e87a:	4699      	mov	r9, r3
 800e87c:	dc37      	bgt.n	800e8ee <_printf_float+0x33e>
 800e87e:	2300      	movs	r3, #0
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e886:	f104 021a 	add.w	r2, r4, #26
 800e88a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e88c:	9907      	ldr	r1, [sp, #28]
 800e88e:	9306      	str	r3, [sp, #24]
 800e890:	eba3 0309 	sub.w	r3, r3, r9
 800e894:	428b      	cmp	r3, r1
 800e896:	dc31      	bgt.n	800e8fc <_printf_float+0x34c>
 800e898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89a:	459a      	cmp	sl, r3
 800e89c:	dc3b      	bgt.n	800e916 <_printf_float+0x366>
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	07da      	lsls	r2, r3, #31
 800e8a2:	d438      	bmi.n	800e916 <_printf_float+0x366>
 800e8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8a6:	ebaa 0903 	sub.w	r9, sl, r3
 800e8aa:	9b06      	ldr	r3, [sp, #24]
 800e8ac:	ebaa 0303 	sub.w	r3, sl, r3
 800e8b0:	4599      	cmp	r9, r3
 800e8b2:	bfa8      	it	ge
 800e8b4:	4699      	movge	r9, r3
 800e8b6:	f1b9 0f00 	cmp.w	r9, #0
 800e8ba:	dc34      	bgt.n	800e926 <_printf_float+0x376>
 800e8bc:	f04f 0800 	mov.w	r8, #0
 800e8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8c4:	f104 0b1a 	add.w	fp, r4, #26
 800e8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ca:	ebaa 0303 	sub.w	r3, sl, r3
 800e8ce:	eba3 0309 	sub.w	r3, r3, r9
 800e8d2:	4543      	cmp	r3, r8
 800e8d4:	f77f af76 	ble.w	800e7c4 <_printf_float+0x214>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	465a      	mov	r2, fp
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4628      	mov	r0, r5
 800e8e0:	47b8      	blx	r7
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	f43f aeb0 	beq.w	800e648 <_printf_float+0x98>
 800e8e8:	f108 0801 	add.w	r8, r8, #1
 800e8ec:	e7ec      	b.n	800e8c8 <_printf_float+0x318>
 800e8ee:	4642      	mov	r2, r8
 800e8f0:	4631      	mov	r1, r6
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	47b8      	blx	r7
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	d1c1      	bne.n	800e87e <_printf_float+0x2ce>
 800e8fa:	e6a5      	b.n	800e648 <_printf_float+0x98>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	4631      	mov	r1, r6
 800e900:	4628      	mov	r0, r5
 800e902:	9206      	str	r2, [sp, #24]
 800e904:	47b8      	blx	r7
 800e906:	3001      	adds	r0, #1
 800e908:	f43f ae9e 	beq.w	800e648 <_printf_float+0x98>
 800e90c:	9b07      	ldr	r3, [sp, #28]
 800e90e:	9a06      	ldr	r2, [sp, #24]
 800e910:	3301      	adds	r3, #1
 800e912:	9307      	str	r3, [sp, #28]
 800e914:	e7b9      	b.n	800e88a <_printf_float+0x2da>
 800e916:	9b05      	ldr	r3, [sp, #20]
 800e918:	465a      	mov	r2, fp
 800e91a:	4631      	mov	r1, r6
 800e91c:	4628      	mov	r0, r5
 800e91e:	47b8      	blx	r7
 800e920:	3001      	adds	r0, #1
 800e922:	d1bf      	bne.n	800e8a4 <_printf_float+0x2f4>
 800e924:	e690      	b.n	800e648 <_printf_float+0x98>
 800e926:	9a06      	ldr	r2, [sp, #24]
 800e928:	464b      	mov	r3, r9
 800e92a:	4442      	add	r2, r8
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	d1c2      	bne.n	800e8bc <_printf_float+0x30c>
 800e936:	e687      	b.n	800e648 <_printf_float+0x98>
 800e938:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e93c:	f1b9 0f01 	cmp.w	r9, #1
 800e940:	dc01      	bgt.n	800e946 <_printf_float+0x396>
 800e942:	07db      	lsls	r3, r3, #31
 800e944:	d536      	bpl.n	800e9b4 <_printf_float+0x404>
 800e946:	2301      	movs	r3, #1
 800e948:	4642      	mov	r2, r8
 800e94a:	4631      	mov	r1, r6
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b8      	blx	r7
 800e950:	3001      	adds	r0, #1
 800e952:	f43f ae79 	beq.w	800e648 <_printf_float+0x98>
 800e956:	9b05      	ldr	r3, [sp, #20]
 800e958:	465a      	mov	r2, fp
 800e95a:	4631      	mov	r1, r6
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b8      	blx	r7
 800e960:	3001      	adds	r0, #1
 800e962:	f43f ae71 	beq.w	800e648 <_printf_float+0x98>
 800e966:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e96a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e972:	f109 39ff 	add.w	r9, r9, #4294967295
 800e976:	d018      	beq.n	800e9aa <_printf_float+0x3fa>
 800e978:	464b      	mov	r3, r9
 800e97a:	f108 0201 	add.w	r2, r8, #1
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	d10c      	bne.n	800e9a2 <_printf_float+0x3f2>
 800e988:	e65e      	b.n	800e648 <_printf_float+0x98>
 800e98a:	2301      	movs	r3, #1
 800e98c:	465a      	mov	r2, fp
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	f43f ae57 	beq.w	800e648 <_printf_float+0x98>
 800e99a:	f108 0801 	add.w	r8, r8, #1
 800e99e:	45c8      	cmp	r8, r9
 800e9a0:	dbf3      	blt.n	800e98a <_printf_float+0x3da>
 800e9a2:	4653      	mov	r3, sl
 800e9a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e9a8:	e6dc      	b.n	800e764 <_printf_float+0x1b4>
 800e9aa:	f04f 0800 	mov.w	r8, #0
 800e9ae:	f104 0b1a 	add.w	fp, r4, #26
 800e9b2:	e7f4      	b.n	800e99e <_printf_float+0x3ee>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	4642      	mov	r2, r8
 800e9b8:	e7e1      	b.n	800e97e <_printf_float+0x3ce>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	464a      	mov	r2, r9
 800e9be:	4631      	mov	r1, r6
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	47b8      	blx	r7
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	f43f ae3f 	beq.w	800e648 <_printf_float+0x98>
 800e9ca:	f108 0801 	add.w	r8, r8, #1
 800e9ce:	68e3      	ldr	r3, [r4, #12]
 800e9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9d2:	1a5b      	subs	r3, r3, r1
 800e9d4:	4543      	cmp	r3, r8
 800e9d6:	dcf0      	bgt.n	800e9ba <_printf_float+0x40a>
 800e9d8:	e6f8      	b.n	800e7cc <_printf_float+0x21c>
 800e9da:	f04f 0800 	mov.w	r8, #0
 800e9de:	f104 0919 	add.w	r9, r4, #25
 800e9e2:	e7f4      	b.n	800e9ce <_printf_float+0x41e>

0800e9e4 <_printf_common>:
 800e9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	4698      	mov	r8, r3
 800e9ec:	688a      	ldr	r2, [r1, #8]
 800e9ee:	690b      	ldr	r3, [r1, #16]
 800e9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	bfb8      	it	lt
 800e9f8:	4613      	movlt	r3, r2
 800e9fa:	6033      	str	r3, [r6, #0]
 800e9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea00:	4607      	mov	r7, r0
 800ea02:	460c      	mov	r4, r1
 800ea04:	b10a      	cbz	r2, 800ea0a <_printf_common+0x26>
 800ea06:	3301      	adds	r3, #1
 800ea08:	6033      	str	r3, [r6, #0]
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	0699      	lsls	r1, r3, #26
 800ea0e:	bf42      	ittt	mi
 800ea10:	6833      	ldrmi	r3, [r6, #0]
 800ea12:	3302      	addmi	r3, #2
 800ea14:	6033      	strmi	r3, [r6, #0]
 800ea16:	6825      	ldr	r5, [r4, #0]
 800ea18:	f015 0506 	ands.w	r5, r5, #6
 800ea1c:	d106      	bne.n	800ea2c <_printf_common+0x48>
 800ea1e:	f104 0a19 	add.w	sl, r4, #25
 800ea22:	68e3      	ldr	r3, [r4, #12]
 800ea24:	6832      	ldr	r2, [r6, #0]
 800ea26:	1a9b      	subs	r3, r3, r2
 800ea28:	42ab      	cmp	r3, r5
 800ea2a:	dc26      	bgt.n	800ea7a <_printf_common+0x96>
 800ea2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea30:	6822      	ldr	r2, [r4, #0]
 800ea32:	3b00      	subs	r3, #0
 800ea34:	bf18      	it	ne
 800ea36:	2301      	movne	r3, #1
 800ea38:	0692      	lsls	r2, r2, #26
 800ea3a:	d42b      	bmi.n	800ea94 <_printf_common+0xb0>
 800ea3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea40:	4641      	mov	r1, r8
 800ea42:	4638      	mov	r0, r7
 800ea44:	47c8      	blx	r9
 800ea46:	3001      	adds	r0, #1
 800ea48:	d01e      	beq.n	800ea88 <_printf_common+0xa4>
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	6922      	ldr	r2, [r4, #16]
 800ea4e:	f003 0306 	and.w	r3, r3, #6
 800ea52:	2b04      	cmp	r3, #4
 800ea54:	bf02      	ittt	eq
 800ea56:	68e5      	ldreq	r5, [r4, #12]
 800ea58:	6833      	ldreq	r3, [r6, #0]
 800ea5a:	1aed      	subeq	r5, r5, r3
 800ea5c:	68a3      	ldr	r3, [r4, #8]
 800ea5e:	bf0c      	ite	eq
 800ea60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea64:	2500      	movne	r5, #0
 800ea66:	4293      	cmp	r3, r2
 800ea68:	bfc4      	itt	gt
 800ea6a:	1a9b      	subgt	r3, r3, r2
 800ea6c:	18ed      	addgt	r5, r5, r3
 800ea6e:	2600      	movs	r6, #0
 800ea70:	341a      	adds	r4, #26
 800ea72:	42b5      	cmp	r5, r6
 800ea74:	d11a      	bne.n	800eaac <_printf_common+0xc8>
 800ea76:	2000      	movs	r0, #0
 800ea78:	e008      	b.n	800ea8c <_printf_common+0xa8>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4652      	mov	r2, sl
 800ea7e:	4641      	mov	r1, r8
 800ea80:	4638      	mov	r0, r7
 800ea82:	47c8      	blx	r9
 800ea84:	3001      	adds	r0, #1
 800ea86:	d103      	bne.n	800ea90 <_printf_common+0xac>
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea90:	3501      	adds	r5, #1
 800ea92:	e7c6      	b.n	800ea22 <_printf_common+0x3e>
 800ea94:	18e1      	adds	r1, r4, r3
 800ea96:	1c5a      	adds	r2, r3, #1
 800ea98:	2030      	movs	r0, #48	@ 0x30
 800ea9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea9e:	4422      	add	r2, r4
 800eaa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eaa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eaa8:	3302      	adds	r3, #2
 800eaaa:	e7c7      	b.n	800ea3c <_printf_common+0x58>
 800eaac:	2301      	movs	r3, #1
 800eaae:	4622      	mov	r2, r4
 800eab0:	4641      	mov	r1, r8
 800eab2:	4638      	mov	r0, r7
 800eab4:	47c8      	blx	r9
 800eab6:	3001      	adds	r0, #1
 800eab8:	d0e6      	beq.n	800ea88 <_printf_common+0xa4>
 800eaba:	3601      	adds	r6, #1
 800eabc:	e7d9      	b.n	800ea72 <_printf_common+0x8e>
	...

0800eac0 <_printf_i>:
 800eac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eac4:	7e0f      	ldrb	r7, [r1, #24]
 800eac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eac8:	2f78      	cmp	r7, #120	@ 0x78
 800eaca:	4691      	mov	r9, r2
 800eacc:	4680      	mov	r8, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	469a      	mov	sl, r3
 800ead2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ead6:	d807      	bhi.n	800eae8 <_printf_i+0x28>
 800ead8:	2f62      	cmp	r7, #98	@ 0x62
 800eada:	d80a      	bhi.n	800eaf2 <_printf_i+0x32>
 800eadc:	2f00      	cmp	r7, #0
 800eade:	f000 80d1 	beq.w	800ec84 <_printf_i+0x1c4>
 800eae2:	2f58      	cmp	r7, #88	@ 0x58
 800eae4:	f000 80b8 	beq.w	800ec58 <_printf_i+0x198>
 800eae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eaec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eaf0:	e03a      	b.n	800eb68 <_printf_i+0xa8>
 800eaf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eaf6:	2b15      	cmp	r3, #21
 800eaf8:	d8f6      	bhi.n	800eae8 <_printf_i+0x28>
 800eafa:	a101      	add	r1, pc, #4	@ (adr r1, 800eb00 <_printf_i+0x40>)
 800eafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb00:	0800eb59 	.word	0x0800eb59
 800eb04:	0800eb6d 	.word	0x0800eb6d
 800eb08:	0800eae9 	.word	0x0800eae9
 800eb0c:	0800eae9 	.word	0x0800eae9
 800eb10:	0800eae9 	.word	0x0800eae9
 800eb14:	0800eae9 	.word	0x0800eae9
 800eb18:	0800eb6d 	.word	0x0800eb6d
 800eb1c:	0800eae9 	.word	0x0800eae9
 800eb20:	0800eae9 	.word	0x0800eae9
 800eb24:	0800eae9 	.word	0x0800eae9
 800eb28:	0800eae9 	.word	0x0800eae9
 800eb2c:	0800ec6b 	.word	0x0800ec6b
 800eb30:	0800eb97 	.word	0x0800eb97
 800eb34:	0800ec25 	.word	0x0800ec25
 800eb38:	0800eae9 	.word	0x0800eae9
 800eb3c:	0800eae9 	.word	0x0800eae9
 800eb40:	0800ec8d 	.word	0x0800ec8d
 800eb44:	0800eae9 	.word	0x0800eae9
 800eb48:	0800eb97 	.word	0x0800eb97
 800eb4c:	0800eae9 	.word	0x0800eae9
 800eb50:	0800eae9 	.word	0x0800eae9
 800eb54:	0800ec2d 	.word	0x0800ec2d
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	1d1a      	adds	r2, r3, #4
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6032      	str	r2, [r6, #0]
 800eb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e09c      	b.n	800eca6 <_printf_i+0x1e6>
 800eb6c:	6833      	ldr	r3, [r6, #0]
 800eb6e:	6820      	ldr	r0, [r4, #0]
 800eb70:	1d19      	adds	r1, r3, #4
 800eb72:	6031      	str	r1, [r6, #0]
 800eb74:	0606      	lsls	r6, r0, #24
 800eb76:	d501      	bpl.n	800eb7c <_printf_i+0xbc>
 800eb78:	681d      	ldr	r5, [r3, #0]
 800eb7a:	e003      	b.n	800eb84 <_printf_i+0xc4>
 800eb7c:	0645      	lsls	r5, r0, #25
 800eb7e:	d5fb      	bpl.n	800eb78 <_printf_i+0xb8>
 800eb80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb84:	2d00      	cmp	r5, #0
 800eb86:	da03      	bge.n	800eb90 <_printf_i+0xd0>
 800eb88:	232d      	movs	r3, #45	@ 0x2d
 800eb8a:	426d      	negs	r5, r5
 800eb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb90:	4858      	ldr	r0, [pc, #352]	@ (800ecf4 <_printf_i+0x234>)
 800eb92:	230a      	movs	r3, #10
 800eb94:	e011      	b.n	800ebba <_printf_i+0xfa>
 800eb96:	6821      	ldr	r1, [r4, #0]
 800eb98:	6833      	ldr	r3, [r6, #0]
 800eb9a:	0608      	lsls	r0, r1, #24
 800eb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800eba0:	d402      	bmi.n	800eba8 <_printf_i+0xe8>
 800eba2:	0649      	lsls	r1, r1, #25
 800eba4:	bf48      	it	mi
 800eba6:	b2ad      	uxthmi	r5, r5
 800eba8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebaa:	4852      	ldr	r0, [pc, #328]	@ (800ecf4 <_printf_i+0x234>)
 800ebac:	6033      	str	r3, [r6, #0]
 800ebae:	bf14      	ite	ne
 800ebb0:	230a      	movne	r3, #10
 800ebb2:	2308      	moveq	r3, #8
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebba:	6866      	ldr	r6, [r4, #4]
 800ebbc:	60a6      	str	r6, [r4, #8]
 800ebbe:	2e00      	cmp	r6, #0
 800ebc0:	db05      	blt.n	800ebce <_printf_i+0x10e>
 800ebc2:	6821      	ldr	r1, [r4, #0]
 800ebc4:	432e      	orrs	r6, r5
 800ebc6:	f021 0104 	bic.w	r1, r1, #4
 800ebca:	6021      	str	r1, [r4, #0]
 800ebcc:	d04b      	beq.n	800ec66 <_printf_i+0x1a6>
 800ebce:	4616      	mov	r6, r2
 800ebd0:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebd4:	fb03 5711 	mls	r7, r3, r1, r5
 800ebd8:	5dc7      	ldrb	r7, [r0, r7]
 800ebda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebde:	462f      	mov	r7, r5
 800ebe0:	42bb      	cmp	r3, r7
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	d9f4      	bls.n	800ebd0 <_printf_i+0x110>
 800ebe6:	2b08      	cmp	r3, #8
 800ebe8:	d10b      	bne.n	800ec02 <_printf_i+0x142>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	07df      	lsls	r7, r3, #31
 800ebee:	d508      	bpl.n	800ec02 <_printf_i+0x142>
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	6861      	ldr	r1, [r4, #4]
 800ebf4:	4299      	cmp	r1, r3
 800ebf6:	bfde      	ittt	le
 800ebf8:	2330      	movle	r3, #48	@ 0x30
 800ebfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec02:	1b92      	subs	r2, r2, r6
 800ec04:	6122      	str	r2, [r4, #16]
 800ec06:	f8cd a000 	str.w	sl, [sp]
 800ec0a:	464b      	mov	r3, r9
 800ec0c:	aa03      	add	r2, sp, #12
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4640      	mov	r0, r8
 800ec12:	f7ff fee7 	bl	800e9e4 <_printf_common>
 800ec16:	3001      	adds	r0, #1
 800ec18:	d14a      	bne.n	800ecb0 <_printf_i+0x1f0>
 800ec1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1e:	b004      	add	sp, #16
 800ec20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	f043 0320 	orr.w	r3, r3, #32
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	4832      	ldr	r0, [pc, #200]	@ (800ecf8 <_printf_i+0x238>)
 800ec2e:	2778      	movs	r7, #120	@ 0x78
 800ec30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	6831      	ldr	r1, [r6, #0]
 800ec38:	061f      	lsls	r7, r3, #24
 800ec3a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec3e:	d402      	bmi.n	800ec46 <_printf_i+0x186>
 800ec40:	065f      	lsls	r7, r3, #25
 800ec42:	bf48      	it	mi
 800ec44:	b2ad      	uxthmi	r5, r5
 800ec46:	6031      	str	r1, [r6, #0]
 800ec48:	07d9      	lsls	r1, r3, #31
 800ec4a:	bf44      	itt	mi
 800ec4c:	f043 0320 	orrmi.w	r3, r3, #32
 800ec50:	6023      	strmi	r3, [r4, #0]
 800ec52:	b11d      	cbz	r5, 800ec5c <_printf_i+0x19c>
 800ec54:	2310      	movs	r3, #16
 800ec56:	e7ad      	b.n	800ebb4 <_printf_i+0xf4>
 800ec58:	4826      	ldr	r0, [pc, #152]	@ (800ecf4 <_printf_i+0x234>)
 800ec5a:	e7e9      	b.n	800ec30 <_printf_i+0x170>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	f023 0320 	bic.w	r3, r3, #32
 800ec62:	6023      	str	r3, [r4, #0]
 800ec64:	e7f6      	b.n	800ec54 <_printf_i+0x194>
 800ec66:	4616      	mov	r6, r2
 800ec68:	e7bd      	b.n	800ebe6 <_printf_i+0x126>
 800ec6a:	6833      	ldr	r3, [r6, #0]
 800ec6c:	6825      	ldr	r5, [r4, #0]
 800ec6e:	6961      	ldr	r1, [r4, #20]
 800ec70:	1d18      	adds	r0, r3, #4
 800ec72:	6030      	str	r0, [r6, #0]
 800ec74:	062e      	lsls	r6, r5, #24
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	d501      	bpl.n	800ec7e <_printf_i+0x1be>
 800ec7a:	6019      	str	r1, [r3, #0]
 800ec7c:	e002      	b.n	800ec84 <_printf_i+0x1c4>
 800ec7e:	0668      	lsls	r0, r5, #25
 800ec80:	d5fb      	bpl.n	800ec7a <_printf_i+0x1ba>
 800ec82:	8019      	strh	r1, [r3, #0]
 800ec84:	2300      	movs	r3, #0
 800ec86:	6123      	str	r3, [r4, #16]
 800ec88:	4616      	mov	r6, r2
 800ec8a:	e7bc      	b.n	800ec06 <_printf_i+0x146>
 800ec8c:	6833      	ldr	r3, [r6, #0]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	6032      	str	r2, [r6, #0]
 800ec92:	681e      	ldr	r6, [r3, #0]
 800ec94:	6862      	ldr	r2, [r4, #4]
 800ec96:	2100      	movs	r1, #0
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f7f1 fb21 	bl	80002e0 <memchr>
 800ec9e:	b108      	cbz	r0, 800eca4 <_printf_i+0x1e4>
 800eca0:	1b80      	subs	r0, r0, r6
 800eca2:	6060      	str	r0, [r4, #4]
 800eca4:	6863      	ldr	r3, [r4, #4]
 800eca6:	6123      	str	r3, [r4, #16]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecae:	e7aa      	b.n	800ec06 <_printf_i+0x146>
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	47d0      	blx	sl
 800ecba:	3001      	adds	r0, #1
 800ecbc:	d0ad      	beq.n	800ec1a <_printf_i+0x15a>
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	079b      	lsls	r3, r3, #30
 800ecc2:	d413      	bmi.n	800ecec <_printf_i+0x22c>
 800ecc4:	68e0      	ldr	r0, [r4, #12]
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	4298      	cmp	r0, r3
 800ecca:	bfb8      	it	lt
 800eccc:	4618      	movlt	r0, r3
 800ecce:	e7a6      	b.n	800ec1e <_printf_i+0x15e>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	47d0      	blx	sl
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d09d      	beq.n	800ec1a <_printf_i+0x15a>
 800ecde:	3501      	adds	r5, #1
 800ece0:	68e3      	ldr	r3, [r4, #12]
 800ece2:	9903      	ldr	r1, [sp, #12]
 800ece4:	1a5b      	subs	r3, r3, r1
 800ece6:	42ab      	cmp	r3, r5
 800ece8:	dcf2      	bgt.n	800ecd0 <_printf_i+0x210>
 800ecea:	e7eb      	b.n	800ecc4 <_printf_i+0x204>
 800ecec:	2500      	movs	r5, #0
 800ecee:	f104 0619 	add.w	r6, r4, #25
 800ecf2:	e7f5      	b.n	800ece0 <_printf_i+0x220>
 800ecf4:	080114e6 	.word	0x080114e6
 800ecf8:	080114f7 	.word	0x080114f7

0800ecfc <std>:
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	b510      	push	{r4, lr}
 800ed00:	4604      	mov	r4, r0
 800ed02:	e9c0 3300 	strd	r3, r3, [r0]
 800ed06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed0a:	6083      	str	r3, [r0, #8]
 800ed0c:	8181      	strh	r1, [r0, #12]
 800ed0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed10:	81c2      	strh	r2, [r0, #14]
 800ed12:	6183      	str	r3, [r0, #24]
 800ed14:	4619      	mov	r1, r3
 800ed16:	2208      	movs	r2, #8
 800ed18:	305c      	adds	r0, #92	@ 0x5c
 800ed1a:	f000 f906 	bl	800ef2a <memset>
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed54 <std+0x58>)
 800ed20:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed22:	4b0d      	ldr	r3, [pc, #52]	@ (800ed58 <std+0x5c>)
 800ed24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed26:	4b0d      	ldr	r3, [pc, #52]	@ (800ed5c <std+0x60>)
 800ed28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed60 <std+0x64>)
 800ed2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed64 <std+0x68>)
 800ed30:	6224      	str	r4, [r4, #32]
 800ed32:	429c      	cmp	r4, r3
 800ed34:	d006      	beq.n	800ed44 <std+0x48>
 800ed36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed3a:	4294      	cmp	r4, r2
 800ed3c:	d002      	beq.n	800ed44 <std+0x48>
 800ed3e:	33d0      	adds	r3, #208	@ 0xd0
 800ed40:	429c      	cmp	r4, r3
 800ed42:	d105      	bne.n	800ed50 <std+0x54>
 800ed44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed4c:	f000 b9c8 	b.w	800f0e0 <__retarget_lock_init_recursive>
 800ed50:	bd10      	pop	{r4, pc}
 800ed52:	bf00      	nop
 800ed54:	0800eea5 	.word	0x0800eea5
 800ed58:	0800eec7 	.word	0x0800eec7
 800ed5c:	0800eeff 	.word	0x0800eeff
 800ed60:	0800ef23 	.word	0x0800ef23
 800ed64:	240054c0 	.word	0x240054c0

0800ed68 <stdio_exit_handler>:
 800ed68:	4a02      	ldr	r2, [pc, #8]	@ (800ed74 <stdio_exit_handler+0xc>)
 800ed6a:	4903      	ldr	r1, [pc, #12]	@ (800ed78 <stdio_exit_handler+0x10>)
 800ed6c:	4803      	ldr	r0, [pc, #12]	@ (800ed7c <stdio_exit_handler+0x14>)
 800ed6e:	f000 b869 	b.w	800ee44 <_fwalk_sglue>
 800ed72:	bf00      	nop
 800ed74:	24000080 	.word	0x24000080
 800ed78:	08010955 	.word	0x08010955
 800ed7c:	24000090 	.word	0x24000090

0800ed80 <cleanup_stdio>:
 800ed80:	6841      	ldr	r1, [r0, #4]
 800ed82:	4b0c      	ldr	r3, [pc, #48]	@ (800edb4 <cleanup_stdio+0x34>)
 800ed84:	4299      	cmp	r1, r3
 800ed86:	b510      	push	{r4, lr}
 800ed88:	4604      	mov	r4, r0
 800ed8a:	d001      	beq.n	800ed90 <cleanup_stdio+0x10>
 800ed8c:	f001 fde2 	bl	8010954 <_fflush_r>
 800ed90:	68a1      	ldr	r1, [r4, #8]
 800ed92:	4b09      	ldr	r3, [pc, #36]	@ (800edb8 <cleanup_stdio+0x38>)
 800ed94:	4299      	cmp	r1, r3
 800ed96:	d002      	beq.n	800ed9e <cleanup_stdio+0x1e>
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f001 fddb 	bl	8010954 <_fflush_r>
 800ed9e:	68e1      	ldr	r1, [r4, #12]
 800eda0:	4b06      	ldr	r3, [pc, #24]	@ (800edbc <cleanup_stdio+0x3c>)
 800eda2:	4299      	cmp	r1, r3
 800eda4:	d004      	beq.n	800edb0 <cleanup_stdio+0x30>
 800eda6:	4620      	mov	r0, r4
 800eda8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edac:	f001 bdd2 	b.w	8010954 <_fflush_r>
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	bf00      	nop
 800edb4:	240054c0 	.word	0x240054c0
 800edb8:	24005528 	.word	0x24005528
 800edbc:	24005590 	.word	0x24005590

0800edc0 <global_stdio_init.part.0>:
 800edc0:	b510      	push	{r4, lr}
 800edc2:	4b0b      	ldr	r3, [pc, #44]	@ (800edf0 <global_stdio_init.part.0+0x30>)
 800edc4:	4c0b      	ldr	r4, [pc, #44]	@ (800edf4 <global_stdio_init.part.0+0x34>)
 800edc6:	4a0c      	ldr	r2, [pc, #48]	@ (800edf8 <global_stdio_init.part.0+0x38>)
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	4620      	mov	r0, r4
 800edcc:	2200      	movs	r2, #0
 800edce:	2104      	movs	r1, #4
 800edd0:	f7ff ff94 	bl	800ecfc <std>
 800edd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edd8:	2201      	movs	r2, #1
 800edda:	2109      	movs	r1, #9
 800eddc:	f7ff ff8e 	bl	800ecfc <std>
 800ede0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ede4:	2202      	movs	r2, #2
 800ede6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edea:	2112      	movs	r1, #18
 800edec:	f7ff bf86 	b.w	800ecfc <std>
 800edf0:	240055f8 	.word	0x240055f8
 800edf4:	240054c0 	.word	0x240054c0
 800edf8:	0800ed69 	.word	0x0800ed69

0800edfc <__sfp_lock_acquire>:
 800edfc:	4801      	ldr	r0, [pc, #4]	@ (800ee04 <__sfp_lock_acquire+0x8>)
 800edfe:	f000 b970 	b.w	800f0e2 <__retarget_lock_acquire_recursive>
 800ee02:	bf00      	nop
 800ee04:	24005601 	.word	0x24005601

0800ee08 <__sfp_lock_release>:
 800ee08:	4801      	ldr	r0, [pc, #4]	@ (800ee10 <__sfp_lock_release+0x8>)
 800ee0a:	f000 b96b 	b.w	800f0e4 <__retarget_lock_release_recursive>
 800ee0e:	bf00      	nop
 800ee10:	24005601 	.word	0x24005601

0800ee14 <__sinit>:
 800ee14:	b510      	push	{r4, lr}
 800ee16:	4604      	mov	r4, r0
 800ee18:	f7ff fff0 	bl	800edfc <__sfp_lock_acquire>
 800ee1c:	6a23      	ldr	r3, [r4, #32]
 800ee1e:	b11b      	cbz	r3, 800ee28 <__sinit+0x14>
 800ee20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee24:	f7ff bff0 	b.w	800ee08 <__sfp_lock_release>
 800ee28:	4b04      	ldr	r3, [pc, #16]	@ (800ee3c <__sinit+0x28>)
 800ee2a:	6223      	str	r3, [r4, #32]
 800ee2c:	4b04      	ldr	r3, [pc, #16]	@ (800ee40 <__sinit+0x2c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1f5      	bne.n	800ee20 <__sinit+0xc>
 800ee34:	f7ff ffc4 	bl	800edc0 <global_stdio_init.part.0>
 800ee38:	e7f2      	b.n	800ee20 <__sinit+0xc>
 800ee3a:	bf00      	nop
 800ee3c:	0800ed81 	.word	0x0800ed81
 800ee40:	240055f8 	.word	0x240055f8

0800ee44 <_fwalk_sglue>:
 800ee44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee48:	4607      	mov	r7, r0
 800ee4a:	4688      	mov	r8, r1
 800ee4c:	4614      	mov	r4, r2
 800ee4e:	2600      	movs	r6, #0
 800ee50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee54:	f1b9 0901 	subs.w	r9, r9, #1
 800ee58:	d505      	bpl.n	800ee66 <_fwalk_sglue+0x22>
 800ee5a:	6824      	ldr	r4, [r4, #0]
 800ee5c:	2c00      	cmp	r4, #0
 800ee5e:	d1f7      	bne.n	800ee50 <_fwalk_sglue+0xc>
 800ee60:	4630      	mov	r0, r6
 800ee62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee66:	89ab      	ldrh	r3, [r5, #12]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d907      	bls.n	800ee7c <_fwalk_sglue+0x38>
 800ee6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee70:	3301      	adds	r3, #1
 800ee72:	d003      	beq.n	800ee7c <_fwalk_sglue+0x38>
 800ee74:	4629      	mov	r1, r5
 800ee76:	4638      	mov	r0, r7
 800ee78:	47c0      	blx	r8
 800ee7a:	4306      	orrs	r6, r0
 800ee7c:	3568      	adds	r5, #104	@ 0x68
 800ee7e:	e7e9      	b.n	800ee54 <_fwalk_sglue+0x10>

0800ee80 <iprintf>:
 800ee80:	b40f      	push	{r0, r1, r2, r3}
 800ee82:	b507      	push	{r0, r1, r2, lr}
 800ee84:	4906      	ldr	r1, [pc, #24]	@ (800eea0 <iprintf+0x20>)
 800ee86:	ab04      	add	r3, sp, #16
 800ee88:	6808      	ldr	r0, [r1, #0]
 800ee8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee8e:	6881      	ldr	r1, [r0, #8]
 800ee90:	9301      	str	r3, [sp, #4]
 800ee92:	f001 fbc3 	bl	801061c <_vfiprintf_r>
 800ee96:	b003      	add	sp, #12
 800ee98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee9c:	b004      	add	sp, #16
 800ee9e:	4770      	bx	lr
 800eea0:	2400008c 	.word	0x2400008c

0800eea4 <__sread>:
 800eea4:	b510      	push	{r4, lr}
 800eea6:	460c      	mov	r4, r1
 800eea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeac:	f000 f8ca 	bl	800f044 <_read_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	bfab      	itete	ge
 800eeb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eeb6:	89a3      	ldrhlt	r3, [r4, #12]
 800eeb8:	181b      	addge	r3, r3, r0
 800eeba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eebe:	bfac      	ite	ge
 800eec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eec2:	81a3      	strhlt	r3, [r4, #12]
 800eec4:	bd10      	pop	{r4, pc}

0800eec6 <__swrite>:
 800eec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	461f      	mov	r7, r3
 800eecc:	898b      	ldrh	r3, [r1, #12]
 800eece:	05db      	lsls	r3, r3, #23
 800eed0:	4605      	mov	r5, r0
 800eed2:	460c      	mov	r4, r1
 800eed4:	4616      	mov	r6, r2
 800eed6:	d505      	bpl.n	800eee4 <__swrite+0x1e>
 800eed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eedc:	2302      	movs	r3, #2
 800eede:	2200      	movs	r2, #0
 800eee0:	f000 f89e 	bl	800f020 <_lseek_r>
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eeee:	81a3      	strh	r3, [r4, #12]
 800eef0:	4632      	mov	r2, r6
 800eef2:	463b      	mov	r3, r7
 800eef4:	4628      	mov	r0, r5
 800eef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eefa:	f000 b8b5 	b.w	800f068 <_write_r>

0800eefe <__sseek>:
 800eefe:	b510      	push	{r4, lr}
 800ef00:	460c      	mov	r4, r1
 800ef02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef06:	f000 f88b 	bl	800f020 <_lseek_r>
 800ef0a:	1c43      	adds	r3, r0, #1
 800ef0c:	89a3      	ldrh	r3, [r4, #12]
 800ef0e:	bf15      	itete	ne
 800ef10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef1a:	81a3      	strheq	r3, [r4, #12]
 800ef1c:	bf18      	it	ne
 800ef1e:	81a3      	strhne	r3, [r4, #12]
 800ef20:	bd10      	pop	{r4, pc}

0800ef22 <__sclose>:
 800ef22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef26:	f000 b80d 	b.w	800ef44 <_close_r>

0800ef2a <memset>:
 800ef2a:	4402      	add	r2, r0
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d100      	bne.n	800ef34 <memset+0xa>
 800ef32:	4770      	bx	lr
 800ef34:	f803 1b01 	strb.w	r1, [r3], #1
 800ef38:	e7f9      	b.n	800ef2e <memset+0x4>
	...

0800ef3c <_localeconv_r>:
 800ef3c:	4800      	ldr	r0, [pc, #0]	@ (800ef40 <_localeconv_r+0x4>)
 800ef3e:	4770      	bx	lr
 800ef40:	240001cc 	.word	0x240001cc

0800ef44 <_close_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4d06      	ldr	r5, [pc, #24]	@ (800ef60 <_close_r+0x1c>)
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4608      	mov	r0, r1
 800ef4e:	602b      	str	r3, [r5, #0]
 800ef50:	f7f5 ff94 	bl	8004e7c <_close>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_close_r+0x1a>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_close_r+0x1a>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	240055fc 	.word	0x240055fc

0800ef64 <_reclaim_reent>:
 800ef64:	4b2d      	ldr	r3, [pc, #180]	@ (800f01c <_reclaim_reent+0xb8>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4283      	cmp	r3, r0
 800ef6a:	b570      	push	{r4, r5, r6, lr}
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	d053      	beq.n	800f018 <_reclaim_reent+0xb4>
 800ef70:	69c3      	ldr	r3, [r0, #28]
 800ef72:	b31b      	cbz	r3, 800efbc <_reclaim_reent+0x58>
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	b163      	cbz	r3, 800ef92 <_reclaim_reent+0x2e>
 800ef78:	2500      	movs	r5, #0
 800ef7a:	69e3      	ldr	r3, [r4, #28]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	5959      	ldr	r1, [r3, r5]
 800ef80:	b9b1      	cbnz	r1, 800efb0 <_reclaim_reent+0x4c>
 800ef82:	3504      	adds	r5, #4
 800ef84:	2d80      	cmp	r5, #128	@ 0x80
 800ef86:	d1f8      	bne.n	800ef7a <_reclaim_reent+0x16>
 800ef88:	69e3      	ldr	r3, [r4, #28]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	68d9      	ldr	r1, [r3, #12]
 800ef8e:	f000 fea1 	bl	800fcd4 <_free_r>
 800ef92:	69e3      	ldr	r3, [r4, #28]
 800ef94:	6819      	ldr	r1, [r3, #0]
 800ef96:	b111      	cbz	r1, 800ef9e <_reclaim_reent+0x3a>
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f000 fe9b 	bl	800fcd4 <_free_r>
 800ef9e:	69e3      	ldr	r3, [r4, #28]
 800efa0:	689d      	ldr	r5, [r3, #8]
 800efa2:	b15d      	cbz	r5, 800efbc <_reclaim_reent+0x58>
 800efa4:	4629      	mov	r1, r5
 800efa6:	4620      	mov	r0, r4
 800efa8:	682d      	ldr	r5, [r5, #0]
 800efaa:	f000 fe93 	bl	800fcd4 <_free_r>
 800efae:	e7f8      	b.n	800efa2 <_reclaim_reent+0x3e>
 800efb0:	680e      	ldr	r6, [r1, #0]
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fe8e 	bl	800fcd4 <_free_r>
 800efb8:	4631      	mov	r1, r6
 800efba:	e7e1      	b.n	800ef80 <_reclaim_reent+0x1c>
 800efbc:	6961      	ldr	r1, [r4, #20]
 800efbe:	b111      	cbz	r1, 800efc6 <_reclaim_reent+0x62>
 800efc0:	4620      	mov	r0, r4
 800efc2:	f000 fe87 	bl	800fcd4 <_free_r>
 800efc6:	69e1      	ldr	r1, [r4, #28]
 800efc8:	b111      	cbz	r1, 800efd0 <_reclaim_reent+0x6c>
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 fe82 	bl	800fcd4 <_free_r>
 800efd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800efd2:	b111      	cbz	r1, 800efda <_reclaim_reent+0x76>
 800efd4:	4620      	mov	r0, r4
 800efd6:	f000 fe7d 	bl	800fcd4 <_free_r>
 800efda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efdc:	b111      	cbz	r1, 800efe4 <_reclaim_reent+0x80>
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 fe78 	bl	800fcd4 <_free_r>
 800efe4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800efe6:	b111      	cbz	r1, 800efee <_reclaim_reent+0x8a>
 800efe8:	4620      	mov	r0, r4
 800efea:	f000 fe73 	bl	800fcd4 <_free_r>
 800efee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eff0:	b111      	cbz	r1, 800eff8 <_reclaim_reent+0x94>
 800eff2:	4620      	mov	r0, r4
 800eff4:	f000 fe6e 	bl	800fcd4 <_free_r>
 800eff8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800effa:	b111      	cbz	r1, 800f002 <_reclaim_reent+0x9e>
 800effc:	4620      	mov	r0, r4
 800effe:	f000 fe69 	bl	800fcd4 <_free_r>
 800f002:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f004:	b111      	cbz	r1, 800f00c <_reclaim_reent+0xa8>
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fe64 	bl	800fcd4 <_free_r>
 800f00c:	6a23      	ldr	r3, [r4, #32]
 800f00e:	b11b      	cbz	r3, 800f018 <_reclaim_reent+0xb4>
 800f010:	4620      	mov	r0, r4
 800f012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f016:	4718      	bx	r3
 800f018:	bd70      	pop	{r4, r5, r6, pc}
 800f01a:	bf00      	nop
 800f01c:	2400008c 	.word	0x2400008c

0800f020 <_lseek_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d07      	ldr	r5, [pc, #28]	@ (800f040 <_lseek_r+0x20>)
 800f024:	4604      	mov	r4, r0
 800f026:	4608      	mov	r0, r1
 800f028:	4611      	mov	r1, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	602a      	str	r2, [r5, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	f7f5 ff4b 	bl	8004eca <_lseek>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d102      	bne.n	800f03e <_lseek_r+0x1e>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	b103      	cbz	r3, 800f03e <_lseek_r+0x1e>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	240055fc 	.word	0x240055fc

0800f044 <_read_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4d07      	ldr	r5, [pc, #28]	@ (800f064 <_read_r+0x20>)
 800f048:	4604      	mov	r4, r0
 800f04a:	4608      	mov	r0, r1
 800f04c:	4611      	mov	r1, r2
 800f04e:	2200      	movs	r2, #0
 800f050:	602a      	str	r2, [r5, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	f7f5 fef5 	bl	8004e42 <_read>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	d102      	bne.n	800f062 <_read_r+0x1e>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	b103      	cbz	r3, 800f062 <_read_r+0x1e>
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	bd38      	pop	{r3, r4, r5, pc}
 800f064:	240055fc 	.word	0x240055fc

0800f068 <_write_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4d07      	ldr	r5, [pc, #28]	@ (800f088 <_write_r+0x20>)
 800f06c:	4604      	mov	r4, r0
 800f06e:	4608      	mov	r0, r1
 800f070:	4611      	mov	r1, r2
 800f072:	2200      	movs	r2, #0
 800f074:	602a      	str	r2, [r5, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	f7f1 fdea 	bl	8000c50 <_write>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d102      	bne.n	800f086 <_write_r+0x1e>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	b103      	cbz	r3, 800f086 <_write_r+0x1e>
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	240055fc 	.word	0x240055fc

0800f08c <__errno>:
 800f08c:	4b01      	ldr	r3, [pc, #4]	@ (800f094 <__errno+0x8>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	2400008c 	.word	0x2400008c

0800f098 <__libc_init_array>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	4d0d      	ldr	r5, [pc, #52]	@ (800f0d0 <__libc_init_array+0x38>)
 800f09c:	4c0d      	ldr	r4, [pc, #52]	@ (800f0d4 <__libc_init_array+0x3c>)
 800f09e:	1b64      	subs	r4, r4, r5
 800f0a0:	10a4      	asrs	r4, r4, #2
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	42a6      	cmp	r6, r4
 800f0a6:	d109      	bne.n	800f0bc <__libc_init_array+0x24>
 800f0a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f0d8 <__libc_init_array+0x40>)
 800f0aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f0dc <__libc_init_array+0x44>)
 800f0ac:	f002 f896 	bl	80111dc <_init>
 800f0b0:	1b64      	subs	r4, r4, r5
 800f0b2:	10a4      	asrs	r4, r4, #2
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	42a6      	cmp	r6, r4
 800f0b8:	d105      	bne.n	800f0c6 <__libc_init_array+0x2e>
 800f0ba:	bd70      	pop	{r4, r5, r6, pc}
 800f0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0c0:	4798      	blx	r3
 800f0c2:	3601      	adds	r6, #1
 800f0c4:	e7ee      	b.n	800f0a4 <__libc_init_array+0xc>
 800f0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ca:	4798      	blx	r3
 800f0cc:	3601      	adds	r6, #1
 800f0ce:	e7f2      	b.n	800f0b6 <__libc_init_array+0x1e>
 800f0d0:	08011998 	.word	0x08011998
 800f0d4:	08011998 	.word	0x08011998
 800f0d8:	08011998 	.word	0x08011998
 800f0dc:	0801199c 	.word	0x0801199c

0800f0e0 <__retarget_lock_init_recursive>:
 800f0e0:	4770      	bx	lr

0800f0e2 <__retarget_lock_acquire_recursive>:
 800f0e2:	4770      	bx	lr

0800f0e4 <__retarget_lock_release_recursive>:
 800f0e4:	4770      	bx	lr

0800f0e6 <memcpy>:
 800f0e6:	440a      	add	r2, r1
 800f0e8:	4291      	cmp	r1, r2
 800f0ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0ee:	d100      	bne.n	800f0f2 <memcpy+0xc>
 800f0f0:	4770      	bx	lr
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0fc:	4291      	cmp	r1, r2
 800f0fe:	d1f9      	bne.n	800f0f4 <memcpy+0xe>
 800f100:	bd10      	pop	{r4, pc}

0800f102 <quorem>:
 800f102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f106:	6903      	ldr	r3, [r0, #16]
 800f108:	690c      	ldr	r4, [r1, #16]
 800f10a:	42a3      	cmp	r3, r4
 800f10c:	4607      	mov	r7, r0
 800f10e:	db7e      	blt.n	800f20e <quorem+0x10c>
 800f110:	3c01      	subs	r4, #1
 800f112:	f101 0814 	add.w	r8, r1, #20
 800f116:	00a3      	lsls	r3, r4, #2
 800f118:	f100 0514 	add.w	r5, r0, #20
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f122:	9301      	str	r3, [sp, #4]
 800f124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f12c:	3301      	adds	r3, #1
 800f12e:	429a      	cmp	r2, r3
 800f130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f134:	fbb2 f6f3 	udiv	r6, r2, r3
 800f138:	d32e      	bcc.n	800f198 <quorem+0x96>
 800f13a:	f04f 0a00 	mov.w	sl, #0
 800f13e:	46c4      	mov	ip, r8
 800f140:	46ae      	mov	lr, r5
 800f142:	46d3      	mov	fp, sl
 800f144:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f148:	b298      	uxth	r0, r3
 800f14a:	fb06 a000 	mla	r0, r6, r0, sl
 800f14e:	0c02      	lsrs	r2, r0, #16
 800f150:	0c1b      	lsrs	r3, r3, #16
 800f152:	fb06 2303 	mla	r3, r6, r3, r2
 800f156:	f8de 2000 	ldr.w	r2, [lr]
 800f15a:	b280      	uxth	r0, r0
 800f15c:	b292      	uxth	r2, r2
 800f15e:	1a12      	subs	r2, r2, r0
 800f160:	445a      	add	r2, fp
 800f162:	f8de 0000 	ldr.w	r0, [lr]
 800f166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f170:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f174:	b292      	uxth	r2, r2
 800f176:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f17a:	45e1      	cmp	r9, ip
 800f17c:	f84e 2b04 	str.w	r2, [lr], #4
 800f180:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f184:	d2de      	bcs.n	800f144 <quorem+0x42>
 800f186:	9b00      	ldr	r3, [sp, #0]
 800f188:	58eb      	ldr	r3, [r5, r3]
 800f18a:	b92b      	cbnz	r3, 800f198 <quorem+0x96>
 800f18c:	9b01      	ldr	r3, [sp, #4]
 800f18e:	3b04      	subs	r3, #4
 800f190:	429d      	cmp	r5, r3
 800f192:	461a      	mov	r2, r3
 800f194:	d32f      	bcc.n	800f1f6 <quorem+0xf4>
 800f196:	613c      	str	r4, [r7, #16]
 800f198:	4638      	mov	r0, r7
 800f19a:	f001 f90d 	bl	80103b8 <__mcmp>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	db25      	blt.n	800f1ee <quorem+0xec>
 800f1a2:	4629      	mov	r1, r5
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1aa:	f8d1 c000 	ldr.w	ip, [r1]
 800f1ae:	fa1f fe82 	uxth.w	lr, r2
 800f1b2:	fa1f f38c 	uxth.w	r3, ip
 800f1b6:	eba3 030e 	sub.w	r3, r3, lr
 800f1ba:	4403      	add	r3, r0
 800f1bc:	0c12      	lsrs	r2, r2, #16
 800f1be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1cc:	45c1      	cmp	r9, r8
 800f1ce:	f841 3b04 	str.w	r3, [r1], #4
 800f1d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f1d6:	d2e6      	bcs.n	800f1a6 <quorem+0xa4>
 800f1d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1e0:	b922      	cbnz	r2, 800f1ec <quorem+0xea>
 800f1e2:	3b04      	subs	r3, #4
 800f1e4:	429d      	cmp	r5, r3
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	d30b      	bcc.n	800f202 <quorem+0x100>
 800f1ea:	613c      	str	r4, [r7, #16]
 800f1ec:	3601      	adds	r6, #1
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	b003      	add	sp, #12
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	3b04      	subs	r3, #4
 800f1fa:	2a00      	cmp	r2, #0
 800f1fc:	d1cb      	bne.n	800f196 <quorem+0x94>
 800f1fe:	3c01      	subs	r4, #1
 800f200:	e7c6      	b.n	800f190 <quorem+0x8e>
 800f202:	6812      	ldr	r2, [r2, #0]
 800f204:	3b04      	subs	r3, #4
 800f206:	2a00      	cmp	r2, #0
 800f208:	d1ef      	bne.n	800f1ea <quorem+0xe8>
 800f20a:	3c01      	subs	r4, #1
 800f20c:	e7ea      	b.n	800f1e4 <quorem+0xe2>
 800f20e:	2000      	movs	r0, #0
 800f210:	e7ee      	b.n	800f1f0 <quorem+0xee>
 800f212:	0000      	movs	r0, r0
 800f214:	0000      	movs	r0, r0
	...

0800f218 <_dtoa_r>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	ed2d 8b02 	vpush	{d8}
 800f220:	69c7      	ldr	r7, [r0, #28]
 800f222:	b091      	sub	sp, #68	@ 0x44
 800f224:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f228:	ec55 4b10 	vmov	r4, r5, d0
 800f22c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f22e:	9107      	str	r1, [sp, #28]
 800f230:	4681      	mov	r9, r0
 800f232:	9209      	str	r2, [sp, #36]	@ 0x24
 800f234:	930d      	str	r3, [sp, #52]	@ 0x34
 800f236:	b97f      	cbnz	r7, 800f258 <_dtoa_r+0x40>
 800f238:	2010      	movs	r0, #16
 800f23a:	f000 fd95 	bl	800fd68 <malloc>
 800f23e:	4602      	mov	r2, r0
 800f240:	f8c9 001c 	str.w	r0, [r9, #28]
 800f244:	b920      	cbnz	r0, 800f250 <_dtoa_r+0x38>
 800f246:	4ba0      	ldr	r3, [pc, #640]	@ (800f4c8 <_dtoa_r+0x2b0>)
 800f248:	21ef      	movs	r1, #239	@ 0xef
 800f24a:	48a0      	ldr	r0, [pc, #640]	@ (800f4cc <_dtoa_r+0x2b4>)
 800f24c:	f001 fc4e 	bl	8010aec <__assert_func>
 800f250:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f254:	6007      	str	r7, [r0, #0]
 800f256:	60c7      	str	r7, [r0, #12]
 800f258:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f25c:	6819      	ldr	r1, [r3, #0]
 800f25e:	b159      	cbz	r1, 800f278 <_dtoa_r+0x60>
 800f260:	685a      	ldr	r2, [r3, #4]
 800f262:	604a      	str	r2, [r1, #4]
 800f264:	2301      	movs	r3, #1
 800f266:	4093      	lsls	r3, r2
 800f268:	608b      	str	r3, [r1, #8]
 800f26a:	4648      	mov	r0, r9
 800f26c:	f000 fe72 	bl	800ff54 <_Bfree>
 800f270:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	1e2b      	subs	r3, r5, #0
 800f27a:	bfbb      	ittet	lt
 800f27c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f280:	9303      	strlt	r3, [sp, #12]
 800f282:	2300      	movge	r3, #0
 800f284:	2201      	movlt	r2, #1
 800f286:	bfac      	ite	ge
 800f288:	6033      	strge	r3, [r6, #0]
 800f28a:	6032      	strlt	r2, [r6, #0]
 800f28c:	4b90      	ldr	r3, [pc, #576]	@ (800f4d0 <_dtoa_r+0x2b8>)
 800f28e:	9e03      	ldr	r6, [sp, #12]
 800f290:	43b3      	bics	r3, r6
 800f292:	d110      	bne.n	800f2b6 <_dtoa_r+0x9e>
 800f294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f296:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f29a:	6013      	str	r3, [r2, #0]
 800f29c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f2a0:	4323      	orrs	r3, r4
 800f2a2:	f000 84e6 	beq.w	800fc72 <_dtoa_r+0xa5a>
 800f2a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2a8:	4f8a      	ldr	r7, [pc, #552]	@ (800f4d4 <_dtoa_r+0x2bc>)
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 84e8 	beq.w	800fc80 <_dtoa_r+0xa68>
 800f2b0:	1cfb      	adds	r3, r7, #3
 800f2b2:	f000 bce3 	b.w	800fc7c <_dtoa_r+0xa64>
 800f2b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f2ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c2:	d10a      	bne.n	800f2da <_dtoa_r+0xc2>
 800f2c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	6013      	str	r3, [r2, #0]
 800f2ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2cc:	b113      	cbz	r3, 800f2d4 <_dtoa_r+0xbc>
 800f2ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f2d0:	4b81      	ldr	r3, [pc, #516]	@ (800f4d8 <_dtoa_r+0x2c0>)
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	4f81      	ldr	r7, [pc, #516]	@ (800f4dc <_dtoa_r+0x2c4>)
 800f2d6:	f000 bcd3 	b.w	800fc80 <_dtoa_r+0xa68>
 800f2da:	aa0e      	add	r2, sp, #56	@ 0x38
 800f2dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f2de:	4648      	mov	r0, r9
 800f2e0:	eeb0 0b48 	vmov.f64	d0, d8
 800f2e4:	f001 f918 	bl	8010518 <__d2b>
 800f2e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2ee:	9001      	str	r0, [sp, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d045      	beq.n	800f380 <_dtoa_r+0x168>
 800f2f4:	eeb0 7b48 	vmov.f64	d7, d8
 800f2f8:	ee18 1a90 	vmov	r1, s17
 800f2fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f300:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f304:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f308:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f30c:	2500      	movs	r5, #0
 800f30e:	ee07 1a90 	vmov	s15, r1
 800f312:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f316:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f4b0 <_dtoa_r+0x298>
 800f31a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f31e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f4b8 <_dtoa_r+0x2a0>
 800f322:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f326:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f4c0 <_dtoa_r+0x2a8>
 800f32a:	ee07 3a90 	vmov	s15, r3
 800f32e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f332:	eeb0 7b46 	vmov.f64	d7, d6
 800f336:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f33a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f33e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f346:	ee16 8a90 	vmov	r8, s13
 800f34a:	d508      	bpl.n	800f35e <_dtoa_r+0x146>
 800f34c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f350:	eeb4 6b47 	vcmp.f64	d6, d7
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	bf18      	it	ne
 800f35a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f35e:	f1b8 0f16 	cmp.w	r8, #22
 800f362:	d82b      	bhi.n	800f3bc <_dtoa_r+0x1a4>
 800f364:	495e      	ldr	r1, [pc, #376]	@ (800f4e0 <_dtoa_r+0x2c8>)
 800f366:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f36a:	ed91 7b00 	vldr	d7, [r1]
 800f36e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f376:	d501      	bpl.n	800f37c <_dtoa_r+0x164>
 800f378:	f108 38ff 	add.w	r8, r8, #4294967295
 800f37c:	2100      	movs	r1, #0
 800f37e:	e01e      	b.n	800f3be <_dtoa_r+0x1a6>
 800f380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f382:	4413      	add	r3, r2
 800f384:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f388:	2920      	cmp	r1, #32
 800f38a:	bfc1      	itttt	gt
 800f38c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f390:	408e      	lslgt	r6, r1
 800f392:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f396:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f39a:	bfd6      	itet	le
 800f39c:	f1c1 0120 	rsble	r1, r1, #32
 800f3a0:	4331      	orrgt	r1, r6
 800f3a2:	fa04 f101 	lslle.w	r1, r4, r1
 800f3a6:	ee07 1a90 	vmov	s15, r1
 800f3aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	ee17 1a90 	vmov	r1, s15
 800f3b4:	2501      	movs	r5, #1
 800f3b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f3ba:	e7a8      	b.n	800f30e <_dtoa_r+0xf6>
 800f3bc:	2101      	movs	r1, #1
 800f3be:	1ad2      	subs	r2, r2, r3
 800f3c0:	1e53      	subs	r3, r2, #1
 800f3c2:	9306      	str	r3, [sp, #24]
 800f3c4:	bf45      	ittet	mi
 800f3c6:	f1c2 0301 	rsbmi	r3, r2, #1
 800f3ca:	9304      	strmi	r3, [sp, #16]
 800f3cc:	2300      	movpl	r3, #0
 800f3ce:	2300      	movmi	r3, #0
 800f3d0:	bf4c      	ite	mi
 800f3d2:	9306      	strmi	r3, [sp, #24]
 800f3d4:	9304      	strpl	r3, [sp, #16]
 800f3d6:	f1b8 0f00 	cmp.w	r8, #0
 800f3da:	910c      	str	r1, [sp, #48]	@ 0x30
 800f3dc:	db18      	blt.n	800f410 <_dtoa_r+0x1f8>
 800f3de:	9b06      	ldr	r3, [sp, #24]
 800f3e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f3e4:	4443      	add	r3, r8
 800f3e6:	9306      	str	r3, [sp, #24]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	9a07      	ldr	r2, [sp, #28]
 800f3ec:	2a09      	cmp	r2, #9
 800f3ee:	d845      	bhi.n	800f47c <_dtoa_r+0x264>
 800f3f0:	2a05      	cmp	r2, #5
 800f3f2:	bfc4      	itt	gt
 800f3f4:	3a04      	subgt	r2, #4
 800f3f6:	9207      	strgt	r2, [sp, #28]
 800f3f8:	9a07      	ldr	r2, [sp, #28]
 800f3fa:	f1a2 0202 	sub.w	r2, r2, #2
 800f3fe:	bfcc      	ite	gt
 800f400:	2400      	movgt	r4, #0
 800f402:	2401      	movle	r4, #1
 800f404:	2a03      	cmp	r2, #3
 800f406:	d844      	bhi.n	800f492 <_dtoa_r+0x27a>
 800f408:	e8df f002 	tbb	[pc, r2]
 800f40c:	0b173634 	.word	0x0b173634
 800f410:	9b04      	ldr	r3, [sp, #16]
 800f412:	2200      	movs	r2, #0
 800f414:	eba3 0308 	sub.w	r3, r3, r8
 800f418:	9304      	str	r3, [sp, #16]
 800f41a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f41c:	f1c8 0300 	rsb	r3, r8, #0
 800f420:	e7e3      	b.n	800f3ea <_dtoa_r+0x1d2>
 800f422:	2201      	movs	r2, #1
 800f424:	9208      	str	r2, [sp, #32]
 800f426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f428:	eb08 0b02 	add.w	fp, r8, r2
 800f42c:	f10b 0a01 	add.w	sl, fp, #1
 800f430:	4652      	mov	r2, sl
 800f432:	2a01      	cmp	r2, #1
 800f434:	bfb8      	it	lt
 800f436:	2201      	movlt	r2, #1
 800f438:	e006      	b.n	800f448 <_dtoa_r+0x230>
 800f43a:	2201      	movs	r2, #1
 800f43c:	9208      	str	r2, [sp, #32]
 800f43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f440:	2a00      	cmp	r2, #0
 800f442:	dd29      	ble.n	800f498 <_dtoa_r+0x280>
 800f444:	4693      	mov	fp, r2
 800f446:	4692      	mov	sl, r2
 800f448:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f44c:	2100      	movs	r1, #0
 800f44e:	2004      	movs	r0, #4
 800f450:	f100 0614 	add.w	r6, r0, #20
 800f454:	4296      	cmp	r6, r2
 800f456:	d926      	bls.n	800f4a6 <_dtoa_r+0x28e>
 800f458:	6079      	str	r1, [r7, #4]
 800f45a:	4648      	mov	r0, r9
 800f45c:	9305      	str	r3, [sp, #20]
 800f45e:	f000 fd39 	bl	800fed4 <_Balloc>
 800f462:	9b05      	ldr	r3, [sp, #20]
 800f464:	4607      	mov	r7, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d13e      	bne.n	800f4e8 <_dtoa_r+0x2d0>
 800f46a:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e4 <_dtoa_r+0x2cc>)
 800f46c:	4602      	mov	r2, r0
 800f46e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f472:	e6ea      	b.n	800f24a <_dtoa_r+0x32>
 800f474:	2200      	movs	r2, #0
 800f476:	e7e1      	b.n	800f43c <_dtoa_r+0x224>
 800f478:	2200      	movs	r2, #0
 800f47a:	e7d3      	b.n	800f424 <_dtoa_r+0x20c>
 800f47c:	2401      	movs	r4, #1
 800f47e:	2200      	movs	r2, #0
 800f480:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f484:	f04f 3bff 	mov.w	fp, #4294967295
 800f488:	2100      	movs	r1, #0
 800f48a:	46da      	mov	sl, fp
 800f48c:	2212      	movs	r2, #18
 800f48e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f490:	e7da      	b.n	800f448 <_dtoa_r+0x230>
 800f492:	2201      	movs	r2, #1
 800f494:	9208      	str	r2, [sp, #32]
 800f496:	e7f5      	b.n	800f484 <_dtoa_r+0x26c>
 800f498:	f04f 0b01 	mov.w	fp, #1
 800f49c:	46da      	mov	sl, fp
 800f49e:	465a      	mov	r2, fp
 800f4a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f4a4:	e7d0      	b.n	800f448 <_dtoa_r+0x230>
 800f4a6:	3101      	adds	r1, #1
 800f4a8:	0040      	lsls	r0, r0, #1
 800f4aa:	e7d1      	b.n	800f450 <_dtoa_r+0x238>
 800f4ac:	f3af 8000 	nop.w
 800f4b0:	636f4361 	.word	0x636f4361
 800f4b4:	3fd287a7 	.word	0x3fd287a7
 800f4b8:	8b60c8b3 	.word	0x8b60c8b3
 800f4bc:	3fc68a28 	.word	0x3fc68a28
 800f4c0:	509f79fb 	.word	0x509f79fb
 800f4c4:	3fd34413 	.word	0x3fd34413
 800f4c8:	08011515 	.word	0x08011515
 800f4cc:	0801152c 	.word	0x0801152c
 800f4d0:	7ff00000 	.word	0x7ff00000
 800f4d4:	08011511 	.word	0x08011511
 800f4d8:	080114e5 	.word	0x080114e5
 800f4dc:	080114e4 	.word	0x080114e4
 800f4e0:	08011680 	.word	0x08011680
 800f4e4:	08011584 	.word	0x08011584
 800f4e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f4ec:	f1ba 0f0e 	cmp.w	sl, #14
 800f4f0:	6010      	str	r0, [r2, #0]
 800f4f2:	d86e      	bhi.n	800f5d2 <_dtoa_r+0x3ba>
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d06c      	beq.n	800f5d2 <_dtoa_r+0x3ba>
 800f4f8:	f1b8 0f00 	cmp.w	r8, #0
 800f4fc:	f340 80b4 	ble.w	800f668 <_dtoa_r+0x450>
 800f500:	4ac8      	ldr	r2, [pc, #800]	@ (800f824 <_dtoa_r+0x60c>)
 800f502:	f008 010f 	and.w	r1, r8, #15
 800f506:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f50a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f50e:	ed92 7b00 	vldr	d7, [r2]
 800f512:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f516:	f000 809b 	beq.w	800f650 <_dtoa_r+0x438>
 800f51a:	4ac3      	ldr	r2, [pc, #780]	@ (800f828 <_dtoa_r+0x610>)
 800f51c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f520:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f524:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f528:	f001 010f 	and.w	r1, r1, #15
 800f52c:	2203      	movs	r2, #3
 800f52e:	48be      	ldr	r0, [pc, #760]	@ (800f828 <_dtoa_r+0x610>)
 800f530:	2900      	cmp	r1, #0
 800f532:	f040 808f 	bne.w	800f654 <_dtoa_r+0x43c>
 800f536:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f53a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f53e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f542:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f544:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f548:	2900      	cmp	r1, #0
 800f54a:	f000 80b3 	beq.w	800f6b4 <_dtoa_r+0x49c>
 800f54e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f552:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55a:	f140 80ab 	bpl.w	800f6b4 <_dtoa_r+0x49c>
 800f55e:	f1ba 0f00 	cmp.w	sl, #0
 800f562:	f000 80a7 	beq.w	800f6b4 <_dtoa_r+0x49c>
 800f566:	f1bb 0f00 	cmp.w	fp, #0
 800f56a:	dd30      	ble.n	800f5ce <_dtoa_r+0x3b6>
 800f56c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f570:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f574:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f578:	f108 31ff 	add.w	r1, r8, #4294967295
 800f57c:	9105      	str	r1, [sp, #20]
 800f57e:	3201      	adds	r2, #1
 800f580:	465c      	mov	r4, fp
 800f582:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f586:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f58a:	ee07 2a90 	vmov	s15, r2
 800f58e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f592:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f596:	ee15 2a90 	vmov	r2, s11
 800f59a:	ec51 0b15 	vmov	r0, r1, d5
 800f59e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f5a2:	2c00      	cmp	r4, #0
 800f5a4:	f040 808a 	bne.w	800f6bc <_dtoa_r+0x4a4>
 800f5a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f5ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f5b0:	ec41 0b17 	vmov	d7, r0, r1
 800f5b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5bc:	f300 826a 	bgt.w	800fa94 <_dtoa_r+0x87c>
 800f5c0:	eeb1 7b47 	vneg.f64	d7, d7
 800f5c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5cc:	d423      	bmi.n	800f616 <_dtoa_r+0x3fe>
 800f5ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f5d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f5d4:	2a00      	cmp	r2, #0
 800f5d6:	f2c0 8129 	blt.w	800f82c <_dtoa_r+0x614>
 800f5da:	f1b8 0f0e 	cmp.w	r8, #14
 800f5de:	f300 8125 	bgt.w	800f82c <_dtoa_r+0x614>
 800f5e2:	4b90      	ldr	r3, [pc, #576]	@ (800f824 <_dtoa_r+0x60c>)
 800f5e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5e8:	ed93 6b00 	vldr	d6, [r3]
 800f5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	f280 80c8 	bge.w	800f784 <_dtoa_r+0x56c>
 800f5f4:	f1ba 0f00 	cmp.w	sl, #0
 800f5f8:	f300 80c4 	bgt.w	800f784 <_dtoa_r+0x56c>
 800f5fc:	d10b      	bne.n	800f616 <_dtoa_r+0x3fe>
 800f5fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f602:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f606:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f60a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f612:	f2c0 823c 	blt.w	800fa8e <_dtoa_r+0x876>
 800f616:	2400      	movs	r4, #0
 800f618:	4625      	mov	r5, r4
 800f61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f61c:	43db      	mvns	r3, r3
 800f61e:	9305      	str	r3, [sp, #20]
 800f620:	463e      	mov	r6, r7
 800f622:	f04f 0800 	mov.w	r8, #0
 800f626:	4621      	mov	r1, r4
 800f628:	4648      	mov	r0, r9
 800f62a:	f000 fc93 	bl	800ff54 <_Bfree>
 800f62e:	2d00      	cmp	r5, #0
 800f630:	f000 80a2 	beq.w	800f778 <_dtoa_r+0x560>
 800f634:	f1b8 0f00 	cmp.w	r8, #0
 800f638:	d005      	beq.n	800f646 <_dtoa_r+0x42e>
 800f63a:	45a8      	cmp	r8, r5
 800f63c:	d003      	beq.n	800f646 <_dtoa_r+0x42e>
 800f63e:	4641      	mov	r1, r8
 800f640:	4648      	mov	r0, r9
 800f642:	f000 fc87 	bl	800ff54 <_Bfree>
 800f646:	4629      	mov	r1, r5
 800f648:	4648      	mov	r0, r9
 800f64a:	f000 fc83 	bl	800ff54 <_Bfree>
 800f64e:	e093      	b.n	800f778 <_dtoa_r+0x560>
 800f650:	2202      	movs	r2, #2
 800f652:	e76c      	b.n	800f52e <_dtoa_r+0x316>
 800f654:	07cc      	lsls	r4, r1, #31
 800f656:	d504      	bpl.n	800f662 <_dtoa_r+0x44a>
 800f658:	ed90 6b00 	vldr	d6, [r0]
 800f65c:	3201      	adds	r2, #1
 800f65e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f662:	1049      	asrs	r1, r1, #1
 800f664:	3008      	adds	r0, #8
 800f666:	e763      	b.n	800f530 <_dtoa_r+0x318>
 800f668:	d022      	beq.n	800f6b0 <_dtoa_r+0x498>
 800f66a:	f1c8 0100 	rsb	r1, r8, #0
 800f66e:	4a6d      	ldr	r2, [pc, #436]	@ (800f824 <_dtoa_r+0x60c>)
 800f670:	f001 000f 	and.w	r0, r1, #15
 800f674:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f678:	ed92 7b00 	vldr	d7, [r2]
 800f67c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f680:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f684:	4868      	ldr	r0, [pc, #416]	@ (800f828 <_dtoa_r+0x610>)
 800f686:	1109      	asrs	r1, r1, #4
 800f688:	2400      	movs	r4, #0
 800f68a:	2202      	movs	r2, #2
 800f68c:	b929      	cbnz	r1, 800f69a <_dtoa_r+0x482>
 800f68e:	2c00      	cmp	r4, #0
 800f690:	f43f af57 	beq.w	800f542 <_dtoa_r+0x32a>
 800f694:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f698:	e753      	b.n	800f542 <_dtoa_r+0x32a>
 800f69a:	07ce      	lsls	r6, r1, #31
 800f69c:	d505      	bpl.n	800f6aa <_dtoa_r+0x492>
 800f69e:	ed90 6b00 	vldr	d6, [r0]
 800f6a2:	3201      	adds	r2, #1
 800f6a4:	2401      	movs	r4, #1
 800f6a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6aa:	1049      	asrs	r1, r1, #1
 800f6ac:	3008      	adds	r0, #8
 800f6ae:	e7ed      	b.n	800f68c <_dtoa_r+0x474>
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	e746      	b.n	800f542 <_dtoa_r+0x32a>
 800f6b4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f6b8:	4654      	mov	r4, sl
 800f6ba:	e762      	b.n	800f582 <_dtoa_r+0x36a>
 800f6bc:	4a59      	ldr	r2, [pc, #356]	@ (800f824 <_dtoa_r+0x60c>)
 800f6be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f6c2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f6c6:	9a08      	ldr	r2, [sp, #32]
 800f6c8:	ec41 0b17 	vmov	d7, r0, r1
 800f6cc:	443c      	add	r4, r7
 800f6ce:	b34a      	cbz	r2, 800f724 <_dtoa_r+0x50c>
 800f6d0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f6d4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f6d8:	463e      	mov	r6, r7
 800f6da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f6de:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f6e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f6e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f6ea:	ee14 2a90 	vmov	r2, s9
 800f6ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f6f2:	3230      	adds	r2, #48	@ 0x30
 800f6f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f6f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f700:	f806 2b01 	strb.w	r2, [r6], #1
 800f704:	d438      	bmi.n	800f778 <_dtoa_r+0x560>
 800f706:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f70a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f712:	d46e      	bmi.n	800f7f2 <_dtoa_r+0x5da>
 800f714:	42a6      	cmp	r6, r4
 800f716:	f43f af5a 	beq.w	800f5ce <_dtoa_r+0x3b6>
 800f71a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f71e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f722:	e7e0      	b.n	800f6e6 <_dtoa_r+0x4ce>
 800f724:	4621      	mov	r1, r4
 800f726:	463e      	mov	r6, r7
 800f728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f72c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f730:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f734:	ee14 2a90 	vmov	r2, s9
 800f738:	3230      	adds	r2, #48	@ 0x30
 800f73a:	f806 2b01 	strb.w	r2, [r6], #1
 800f73e:	42a6      	cmp	r6, r4
 800f740:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f744:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f748:	d119      	bne.n	800f77e <_dtoa_r+0x566>
 800f74a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f74e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f752:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	dc4a      	bgt.n	800f7f2 <_dtoa_r+0x5da>
 800f75c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f760:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f768:	f57f af31 	bpl.w	800f5ce <_dtoa_r+0x3b6>
 800f76c:	460e      	mov	r6, r1
 800f76e:	3901      	subs	r1, #1
 800f770:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f774:	2b30      	cmp	r3, #48	@ 0x30
 800f776:	d0f9      	beq.n	800f76c <_dtoa_r+0x554>
 800f778:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f77c:	e027      	b.n	800f7ce <_dtoa_r+0x5b6>
 800f77e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f782:	e7d5      	b.n	800f730 <_dtoa_r+0x518>
 800f784:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f788:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f78c:	463e      	mov	r6, r7
 800f78e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f792:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f796:	ee15 3a10 	vmov	r3, s10
 800f79a:	3330      	adds	r3, #48	@ 0x30
 800f79c:	f806 3b01 	strb.w	r3, [r6], #1
 800f7a0:	1bf3      	subs	r3, r6, r7
 800f7a2:	459a      	cmp	sl, r3
 800f7a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f7a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f7ac:	d132      	bne.n	800f814 <_dtoa_r+0x5fc>
 800f7ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f7b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ba:	dc18      	bgt.n	800f7ee <_dtoa_r+0x5d6>
 800f7bc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c4:	d103      	bne.n	800f7ce <_dtoa_r+0x5b6>
 800f7c6:	ee15 3a10 	vmov	r3, s10
 800f7ca:	07db      	lsls	r3, r3, #31
 800f7cc:	d40f      	bmi.n	800f7ee <_dtoa_r+0x5d6>
 800f7ce:	9901      	ldr	r1, [sp, #4]
 800f7d0:	4648      	mov	r0, r9
 800f7d2:	f000 fbbf 	bl	800ff54 <_Bfree>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7da:	7033      	strb	r3, [r6, #0]
 800f7dc:	f108 0301 	add.w	r3, r8, #1
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 824b 	beq.w	800fc80 <_dtoa_r+0xa68>
 800f7ea:	601e      	str	r6, [r3, #0]
 800f7ec:	e248      	b.n	800fc80 <_dtoa_r+0xa68>
 800f7ee:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7f2:	4633      	mov	r3, r6
 800f7f4:	461e      	mov	r6, r3
 800f7f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7fa:	2a39      	cmp	r2, #57	@ 0x39
 800f7fc:	d106      	bne.n	800f80c <_dtoa_r+0x5f4>
 800f7fe:	429f      	cmp	r7, r3
 800f800:	d1f8      	bne.n	800f7f4 <_dtoa_r+0x5dc>
 800f802:	9a05      	ldr	r2, [sp, #20]
 800f804:	3201      	adds	r2, #1
 800f806:	9205      	str	r2, [sp, #20]
 800f808:	2230      	movs	r2, #48	@ 0x30
 800f80a:	703a      	strb	r2, [r7, #0]
 800f80c:	781a      	ldrb	r2, [r3, #0]
 800f80e:	3201      	adds	r2, #1
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	e7b1      	b.n	800f778 <_dtoa_r+0x560>
 800f814:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f820:	d1b5      	bne.n	800f78e <_dtoa_r+0x576>
 800f822:	e7d4      	b.n	800f7ce <_dtoa_r+0x5b6>
 800f824:	08011680 	.word	0x08011680
 800f828:	08011658 	.word	0x08011658
 800f82c:	9908      	ldr	r1, [sp, #32]
 800f82e:	2900      	cmp	r1, #0
 800f830:	f000 80e9 	beq.w	800fa06 <_dtoa_r+0x7ee>
 800f834:	9907      	ldr	r1, [sp, #28]
 800f836:	2901      	cmp	r1, #1
 800f838:	f300 80cb 	bgt.w	800f9d2 <_dtoa_r+0x7ba>
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	f000 80c4 	beq.w	800f9ca <_dtoa_r+0x7b2>
 800f842:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f846:	9e04      	ldr	r6, [sp, #16]
 800f848:	461c      	mov	r4, r3
 800f84a:	9305      	str	r3, [sp, #20]
 800f84c:	9b04      	ldr	r3, [sp, #16]
 800f84e:	4413      	add	r3, r2
 800f850:	9304      	str	r3, [sp, #16]
 800f852:	9b06      	ldr	r3, [sp, #24]
 800f854:	2101      	movs	r1, #1
 800f856:	4413      	add	r3, r2
 800f858:	4648      	mov	r0, r9
 800f85a:	9306      	str	r3, [sp, #24]
 800f85c:	f000 fc2e 	bl	80100bc <__i2b>
 800f860:	9b05      	ldr	r3, [sp, #20]
 800f862:	4605      	mov	r5, r0
 800f864:	b166      	cbz	r6, 800f880 <_dtoa_r+0x668>
 800f866:	9a06      	ldr	r2, [sp, #24]
 800f868:	2a00      	cmp	r2, #0
 800f86a:	dd09      	ble.n	800f880 <_dtoa_r+0x668>
 800f86c:	42b2      	cmp	r2, r6
 800f86e:	9904      	ldr	r1, [sp, #16]
 800f870:	bfa8      	it	ge
 800f872:	4632      	movge	r2, r6
 800f874:	1a89      	subs	r1, r1, r2
 800f876:	9104      	str	r1, [sp, #16]
 800f878:	9906      	ldr	r1, [sp, #24]
 800f87a:	1ab6      	subs	r6, r6, r2
 800f87c:	1a8a      	subs	r2, r1, r2
 800f87e:	9206      	str	r2, [sp, #24]
 800f880:	b30b      	cbz	r3, 800f8c6 <_dtoa_r+0x6ae>
 800f882:	9a08      	ldr	r2, [sp, #32]
 800f884:	2a00      	cmp	r2, #0
 800f886:	f000 80c5 	beq.w	800fa14 <_dtoa_r+0x7fc>
 800f88a:	2c00      	cmp	r4, #0
 800f88c:	f000 80bf 	beq.w	800fa0e <_dtoa_r+0x7f6>
 800f890:	4629      	mov	r1, r5
 800f892:	4622      	mov	r2, r4
 800f894:	4648      	mov	r0, r9
 800f896:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f898:	f000 fcc8 	bl	801022c <__pow5mult>
 800f89c:	9a01      	ldr	r2, [sp, #4]
 800f89e:	4601      	mov	r1, r0
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	4648      	mov	r0, r9
 800f8a4:	f000 fc20 	bl	80100e8 <__multiply>
 800f8a8:	9901      	ldr	r1, [sp, #4]
 800f8aa:	9005      	str	r0, [sp, #20]
 800f8ac:	4648      	mov	r0, r9
 800f8ae:	f000 fb51 	bl	800ff54 <_Bfree>
 800f8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8b4:	1b1b      	subs	r3, r3, r4
 800f8b6:	f000 80b0 	beq.w	800fa1a <_dtoa_r+0x802>
 800f8ba:	9905      	ldr	r1, [sp, #20]
 800f8bc:	461a      	mov	r2, r3
 800f8be:	4648      	mov	r0, r9
 800f8c0:	f000 fcb4 	bl	801022c <__pow5mult>
 800f8c4:	9001      	str	r0, [sp, #4]
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	4648      	mov	r0, r9
 800f8ca:	f000 fbf7 	bl	80100bc <__i2b>
 800f8ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f000 81da 	beq.w	800fc8c <_dtoa_r+0xa74>
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4601      	mov	r1, r0
 800f8dc:	4648      	mov	r0, r9
 800f8de:	f000 fca5 	bl	801022c <__pow5mult>
 800f8e2:	9b07      	ldr	r3, [sp, #28]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	f300 80a0 	bgt.w	800fa2c <_dtoa_r+0x814>
 800f8ec:	9b02      	ldr	r3, [sp, #8]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f040 8096 	bne.w	800fa20 <_dtoa_r+0x808>
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f8fa:	2a00      	cmp	r2, #0
 800f8fc:	f040 8092 	bne.w	800fa24 <_dtoa_r+0x80c>
 800f900:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f904:	0d12      	lsrs	r2, r2, #20
 800f906:	0512      	lsls	r2, r2, #20
 800f908:	2a00      	cmp	r2, #0
 800f90a:	f000 808d 	beq.w	800fa28 <_dtoa_r+0x810>
 800f90e:	9b04      	ldr	r3, [sp, #16]
 800f910:	3301      	adds	r3, #1
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	9b06      	ldr	r3, [sp, #24]
 800f916:	3301      	adds	r3, #1
 800f918:	9306      	str	r3, [sp, #24]
 800f91a:	2301      	movs	r3, #1
 800f91c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f91e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 81b9 	beq.w	800fc98 <_dtoa_r+0xa80>
 800f926:	6922      	ldr	r2, [r4, #16]
 800f928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f92c:	6910      	ldr	r0, [r2, #16]
 800f92e:	f000 fb79 	bl	8010024 <__hi0bits>
 800f932:	f1c0 0020 	rsb	r0, r0, #32
 800f936:	9b06      	ldr	r3, [sp, #24]
 800f938:	4418      	add	r0, r3
 800f93a:	f010 001f 	ands.w	r0, r0, #31
 800f93e:	f000 8081 	beq.w	800fa44 <_dtoa_r+0x82c>
 800f942:	f1c0 0220 	rsb	r2, r0, #32
 800f946:	2a04      	cmp	r2, #4
 800f948:	dd73      	ble.n	800fa32 <_dtoa_r+0x81a>
 800f94a:	9b04      	ldr	r3, [sp, #16]
 800f94c:	f1c0 001c 	rsb	r0, r0, #28
 800f950:	4403      	add	r3, r0
 800f952:	9304      	str	r3, [sp, #16]
 800f954:	9b06      	ldr	r3, [sp, #24]
 800f956:	4406      	add	r6, r0
 800f958:	4403      	add	r3, r0
 800f95a:	9306      	str	r3, [sp, #24]
 800f95c:	9b04      	ldr	r3, [sp, #16]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	dd05      	ble.n	800f96e <_dtoa_r+0x756>
 800f962:	9901      	ldr	r1, [sp, #4]
 800f964:	461a      	mov	r2, r3
 800f966:	4648      	mov	r0, r9
 800f968:	f000 fcba 	bl	80102e0 <__lshift>
 800f96c:	9001      	str	r0, [sp, #4]
 800f96e:	9b06      	ldr	r3, [sp, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	dd05      	ble.n	800f980 <_dtoa_r+0x768>
 800f974:	4621      	mov	r1, r4
 800f976:	461a      	mov	r2, r3
 800f978:	4648      	mov	r0, r9
 800f97a:	f000 fcb1 	bl	80102e0 <__lshift>
 800f97e:	4604      	mov	r4, r0
 800f980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f982:	2b00      	cmp	r3, #0
 800f984:	d060      	beq.n	800fa48 <_dtoa_r+0x830>
 800f986:	9801      	ldr	r0, [sp, #4]
 800f988:	4621      	mov	r1, r4
 800f98a:	f000 fd15 	bl	80103b8 <__mcmp>
 800f98e:	2800      	cmp	r0, #0
 800f990:	da5a      	bge.n	800fa48 <_dtoa_r+0x830>
 800f992:	f108 33ff 	add.w	r3, r8, #4294967295
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	9901      	ldr	r1, [sp, #4]
 800f99a:	2300      	movs	r3, #0
 800f99c:	220a      	movs	r2, #10
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f000 fafa 	bl	800ff98 <__multadd>
 800f9a4:	9b08      	ldr	r3, [sp, #32]
 800f9a6:	9001      	str	r0, [sp, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 8177 	beq.w	800fc9c <_dtoa_r+0xa84>
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	220a      	movs	r2, #10
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	f000 faef 	bl	800ff98 <__multadd>
 800f9ba:	f1bb 0f00 	cmp.w	fp, #0
 800f9be:	4605      	mov	r5, r0
 800f9c0:	dc6e      	bgt.n	800faa0 <_dtoa_r+0x888>
 800f9c2:	9b07      	ldr	r3, [sp, #28]
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	dc48      	bgt.n	800fa5a <_dtoa_r+0x842>
 800f9c8:	e06a      	b.n	800faa0 <_dtoa_r+0x888>
 800f9ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f9d0:	e739      	b.n	800f846 <_dtoa_r+0x62e>
 800f9d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f9d6:	42a3      	cmp	r3, r4
 800f9d8:	db07      	blt.n	800f9ea <_dtoa_r+0x7d2>
 800f9da:	f1ba 0f00 	cmp.w	sl, #0
 800f9de:	eba3 0404 	sub.w	r4, r3, r4
 800f9e2:	db0b      	blt.n	800f9fc <_dtoa_r+0x7e4>
 800f9e4:	9e04      	ldr	r6, [sp, #16]
 800f9e6:	4652      	mov	r2, sl
 800f9e8:	e72f      	b.n	800f84a <_dtoa_r+0x632>
 800f9ea:	1ae2      	subs	r2, r4, r3
 800f9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ee:	9e04      	ldr	r6, [sp, #16]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9f4:	4652      	mov	r2, sl
 800f9f6:	4623      	mov	r3, r4
 800f9f8:	2400      	movs	r4, #0
 800f9fa:	e726      	b.n	800f84a <_dtoa_r+0x632>
 800f9fc:	9a04      	ldr	r2, [sp, #16]
 800f9fe:	eba2 060a 	sub.w	r6, r2, sl
 800fa02:	2200      	movs	r2, #0
 800fa04:	e721      	b.n	800f84a <_dtoa_r+0x632>
 800fa06:	9e04      	ldr	r6, [sp, #16]
 800fa08:	9d08      	ldr	r5, [sp, #32]
 800fa0a:	461c      	mov	r4, r3
 800fa0c:	e72a      	b.n	800f864 <_dtoa_r+0x64c>
 800fa0e:	9a01      	ldr	r2, [sp, #4]
 800fa10:	9205      	str	r2, [sp, #20]
 800fa12:	e752      	b.n	800f8ba <_dtoa_r+0x6a2>
 800fa14:	9901      	ldr	r1, [sp, #4]
 800fa16:	461a      	mov	r2, r3
 800fa18:	e751      	b.n	800f8be <_dtoa_r+0x6a6>
 800fa1a:	9b05      	ldr	r3, [sp, #20]
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	e752      	b.n	800f8c6 <_dtoa_r+0x6ae>
 800fa20:	2300      	movs	r3, #0
 800fa22:	e77b      	b.n	800f91c <_dtoa_r+0x704>
 800fa24:	9b02      	ldr	r3, [sp, #8]
 800fa26:	e779      	b.n	800f91c <_dtoa_r+0x704>
 800fa28:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fa2a:	e778      	b.n	800f91e <_dtoa_r+0x706>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa30:	e779      	b.n	800f926 <_dtoa_r+0x70e>
 800fa32:	d093      	beq.n	800f95c <_dtoa_r+0x744>
 800fa34:	9b04      	ldr	r3, [sp, #16]
 800fa36:	321c      	adds	r2, #28
 800fa38:	4413      	add	r3, r2
 800fa3a:	9304      	str	r3, [sp, #16]
 800fa3c:	9b06      	ldr	r3, [sp, #24]
 800fa3e:	4416      	add	r6, r2
 800fa40:	4413      	add	r3, r2
 800fa42:	e78a      	b.n	800f95a <_dtoa_r+0x742>
 800fa44:	4602      	mov	r2, r0
 800fa46:	e7f5      	b.n	800fa34 <_dtoa_r+0x81c>
 800fa48:	f1ba 0f00 	cmp.w	sl, #0
 800fa4c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fa50:	46d3      	mov	fp, sl
 800fa52:	dc21      	bgt.n	800fa98 <_dtoa_r+0x880>
 800fa54:	9b07      	ldr	r3, [sp, #28]
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	dd1e      	ble.n	800fa98 <_dtoa_r+0x880>
 800fa5a:	f1bb 0f00 	cmp.w	fp, #0
 800fa5e:	f47f addc 	bne.w	800f61a <_dtoa_r+0x402>
 800fa62:	4621      	mov	r1, r4
 800fa64:	465b      	mov	r3, fp
 800fa66:	2205      	movs	r2, #5
 800fa68:	4648      	mov	r0, r9
 800fa6a:	f000 fa95 	bl	800ff98 <__multadd>
 800fa6e:	4601      	mov	r1, r0
 800fa70:	4604      	mov	r4, r0
 800fa72:	9801      	ldr	r0, [sp, #4]
 800fa74:	f000 fca0 	bl	80103b8 <__mcmp>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f77f adce 	ble.w	800f61a <_dtoa_r+0x402>
 800fa7e:	463e      	mov	r6, r7
 800fa80:	2331      	movs	r3, #49	@ 0x31
 800fa82:	f806 3b01 	strb.w	r3, [r6], #1
 800fa86:	9b05      	ldr	r3, [sp, #20]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	9305      	str	r3, [sp, #20]
 800fa8c:	e5c9      	b.n	800f622 <_dtoa_r+0x40a>
 800fa8e:	f8cd 8014 	str.w	r8, [sp, #20]
 800fa92:	4654      	mov	r4, sl
 800fa94:	4625      	mov	r5, r4
 800fa96:	e7f2      	b.n	800fa7e <_dtoa_r+0x866>
 800fa98:	9b08      	ldr	r3, [sp, #32]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8102 	beq.w	800fca4 <_dtoa_r+0xa8c>
 800faa0:	2e00      	cmp	r6, #0
 800faa2:	dd05      	ble.n	800fab0 <_dtoa_r+0x898>
 800faa4:	4629      	mov	r1, r5
 800faa6:	4632      	mov	r2, r6
 800faa8:	4648      	mov	r0, r9
 800faaa:	f000 fc19 	bl	80102e0 <__lshift>
 800faae:	4605      	mov	r5, r0
 800fab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d058      	beq.n	800fb68 <_dtoa_r+0x950>
 800fab6:	6869      	ldr	r1, [r5, #4]
 800fab8:	4648      	mov	r0, r9
 800faba:	f000 fa0b 	bl	800fed4 <_Balloc>
 800fabe:	4606      	mov	r6, r0
 800fac0:	b928      	cbnz	r0, 800face <_dtoa_r+0x8b6>
 800fac2:	4b82      	ldr	r3, [pc, #520]	@ (800fccc <_dtoa_r+0xab4>)
 800fac4:	4602      	mov	r2, r0
 800fac6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800faca:	f7ff bbbe 	b.w	800f24a <_dtoa_r+0x32>
 800face:	692a      	ldr	r2, [r5, #16]
 800fad0:	3202      	adds	r2, #2
 800fad2:	0092      	lsls	r2, r2, #2
 800fad4:	f105 010c 	add.w	r1, r5, #12
 800fad8:	300c      	adds	r0, #12
 800fada:	f7ff fb04 	bl	800f0e6 <memcpy>
 800fade:	2201      	movs	r2, #1
 800fae0:	4631      	mov	r1, r6
 800fae2:	4648      	mov	r0, r9
 800fae4:	f000 fbfc 	bl	80102e0 <__lshift>
 800fae8:	1c7b      	adds	r3, r7, #1
 800faea:	9304      	str	r3, [sp, #16]
 800faec:	eb07 030b 	add.w	r3, r7, fp
 800faf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800faf2:	9b02      	ldr	r3, [sp, #8]
 800faf4:	f003 0301 	and.w	r3, r3, #1
 800faf8:	46a8      	mov	r8, r5
 800fafa:	9308      	str	r3, [sp, #32]
 800fafc:	4605      	mov	r5, r0
 800fafe:	9b04      	ldr	r3, [sp, #16]
 800fb00:	9801      	ldr	r0, [sp, #4]
 800fb02:	4621      	mov	r1, r4
 800fb04:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb08:	f7ff fafb 	bl	800f102 <quorem>
 800fb0c:	4641      	mov	r1, r8
 800fb0e:	9002      	str	r0, [sp, #8]
 800fb10:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fb14:	9801      	ldr	r0, [sp, #4]
 800fb16:	f000 fc4f 	bl	80103b8 <__mcmp>
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	9006      	str	r0, [sp, #24]
 800fb1e:	4621      	mov	r1, r4
 800fb20:	4648      	mov	r0, r9
 800fb22:	f000 fc65 	bl	80103f0 <__mdiff>
 800fb26:	68c2      	ldr	r2, [r0, #12]
 800fb28:	4606      	mov	r6, r0
 800fb2a:	b9fa      	cbnz	r2, 800fb6c <_dtoa_r+0x954>
 800fb2c:	4601      	mov	r1, r0
 800fb2e:	9801      	ldr	r0, [sp, #4]
 800fb30:	f000 fc42 	bl	80103b8 <__mcmp>
 800fb34:	4602      	mov	r2, r0
 800fb36:	4631      	mov	r1, r6
 800fb38:	4648      	mov	r0, r9
 800fb3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fb3c:	f000 fa0a 	bl	800ff54 <_Bfree>
 800fb40:	9b07      	ldr	r3, [sp, #28]
 800fb42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb44:	9e04      	ldr	r6, [sp, #16]
 800fb46:	ea42 0103 	orr.w	r1, r2, r3
 800fb4a:	9b08      	ldr	r3, [sp, #32]
 800fb4c:	4319      	orrs	r1, r3
 800fb4e:	d10f      	bne.n	800fb70 <_dtoa_r+0x958>
 800fb50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fb54:	d028      	beq.n	800fba8 <_dtoa_r+0x990>
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	dd02      	ble.n	800fb62 <_dtoa_r+0x94a>
 800fb5c:	9b02      	ldr	r3, [sp, #8]
 800fb5e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fb62:	f88b a000 	strb.w	sl, [fp]
 800fb66:	e55e      	b.n	800f626 <_dtoa_r+0x40e>
 800fb68:	4628      	mov	r0, r5
 800fb6a:	e7bd      	b.n	800fae8 <_dtoa_r+0x8d0>
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	e7e2      	b.n	800fb36 <_dtoa_r+0x91e>
 800fb70:	9b06      	ldr	r3, [sp, #24]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	db04      	blt.n	800fb80 <_dtoa_r+0x968>
 800fb76:	9907      	ldr	r1, [sp, #28]
 800fb78:	430b      	orrs	r3, r1
 800fb7a:	9908      	ldr	r1, [sp, #32]
 800fb7c:	430b      	orrs	r3, r1
 800fb7e:	d120      	bne.n	800fbc2 <_dtoa_r+0x9aa>
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	ddee      	ble.n	800fb62 <_dtoa_r+0x94a>
 800fb84:	9901      	ldr	r1, [sp, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f000 fba9 	bl	80102e0 <__lshift>
 800fb8e:	4621      	mov	r1, r4
 800fb90:	9001      	str	r0, [sp, #4]
 800fb92:	f000 fc11 	bl	80103b8 <__mcmp>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	dc03      	bgt.n	800fba2 <_dtoa_r+0x98a>
 800fb9a:	d1e2      	bne.n	800fb62 <_dtoa_r+0x94a>
 800fb9c:	f01a 0f01 	tst.w	sl, #1
 800fba0:	d0df      	beq.n	800fb62 <_dtoa_r+0x94a>
 800fba2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fba6:	d1d9      	bne.n	800fb5c <_dtoa_r+0x944>
 800fba8:	2339      	movs	r3, #57	@ 0x39
 800fbaa:	f88b 3000 	strb.w	r3, [fp]
 800fbae:	4633      	mov	r3, r6
 800fbb0:	461e      	mov	r6, r3
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fbb8:	2a39      	cmp	r2, #57	@ 0x39
 800fbba:	d052      	beq.n	800fc62 <_dtoa_r+0xa4a>
 800fbbc:	3201      	adds	r2, #1
 800fbbe:	701a      	strb	r2, [r3, #0]
 800fbc0:	e531      	b.n	800f626 <_dtoa_r+0x40e>
 800fbc2:	2a00      	cmp	r2, #0
 800fbc4:	dd07      	ble.n	800fbd6 <_dtoa_r+0x9be>
 800fbc6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fbca:	d0ed      	beq.n	800fba8 <_dtoa_r+0x990>
 800fbcc:	f10a 0301 	add.w	r3, sl, #1
 800fbd0:	f88b 3000 	strb.w	r3, [fp]
 800fbd4:	e527      	b.n	800f626 <_dtoa_r+0x40e>
 800fbd6:	9b04      	ldr	r3, [sp, #16]
 800fbd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbda:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d029      	beq.n	800fc36 <_dtoa_r+0xa1e>
 800fbe2:	9901      	ldr	r1, [sp, #4]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	4648      	mov	r0, r9
 800fbea:	f000 f9d5 	bl	800ff98 <__multadd>
 800fbee:	45a8      	cmp	r8, r5
 800fbf0:	9001      	str	r0, [sp, #4]
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	f04f 020a 	mov.w	r2, #10
 800fbfa:	4641      	mov	r1, r8
 800fbfc:	4648      	mov	r0, r9
 800fbfe:	d107      	bne.n	800fc10 <_dtoa_r+0x9f8>
 800fc00:	f000 f9ca 	bl	800ff98 <__multadd>
 800fc04:	4680      	mov	r8, r0
 800fc06:	4605      	mov	r5, r0
 800fc08:	9b04      	ldr	r3, [sp, #16]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	9304      	str	r3, [sp, #16]
 800fc0e:	e776      	b.n	800fafe <_dtoa_r+0x8e6>
 800fc10:	f000 f9c2 	bl	800ff98 <__multadd>
 800fc14:	4629      	mov	r1, r5
 800fc16:	4680      	mov	r8, r0
 800fc18:	2300      	movs	r3, #0
 800fc1a:	220a      	movs	r2, #10
 800fc1c:	4648      	mov	r0, r9
 800fc1e:	f000 f9bb 	bl	800ff98 <__multadd>
 800fc22:	4605      	mov	r5, r0
 800fc24:	e7f0      	b.n	800fc08 <_dtoa_r+0x9f0>
 800fc26:	f1bb 0f00 	cmp.w	fp, #0
 800fc2a:	bfcc      	ite	gt
 800fc2c:	465e      	movgt	r6, fp
 800fc2e:	2601      	movle	r6, #1
 800fc30:	443e      	add	r6, r7
 800fc32:	f04f 0800 	mov.w	r8, #0
 800fc36:	9901      	ldr	r1, [sp, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	4648      	mov	r0, r9
 800fc3c:	f000 fb50 	bl	80102e0 <__lshift>
 800fc40:	4621      	mov	r1, r4
 800fc42:	9001      	str	r0, [sp, #4]
 800fc44:	f000 fbb8 	bl	80103b8 <__mcmp>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	dcb0      	bgt.n	800fbae <_dtoa_r+0x996>
 800fc4c:	d102      	bne.n	800fc54 <_dtoa_r+0xa3c>
 800fc4e:	f01a 0f01 	tst.w	sl, #1
 800fc52:	d1ac      	bne.n	800fbae <_dtoa_r+0x996>
 800fc54:	4633      	mov	r3, r6
 800fc56:	461e      	mov	r6, r3
 800fc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc5c:	2a30      	cmp	r2, #48	@ 0x30
 800fc5e:	d0fa      	beq.n	800fc56 <_dtoa_r+0xa3e>
 800fc60:	e4e1      	b.n	800f626 <_dtoa_r+0x40e>
 800fc62:	429f      	cmp	r7, r3
 800fc64:	d1a4      	bne.n	800fbb0 <_dtoa_r+0x998>
 800fc66:	9b05      	ldr	r3, [sp, #20]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	9305      	str	r3, [sp, #20]
 800fc6c:	2331      	movs	r3, #49	@ 0x31
 800fc6e:	703b      	strb	r3, [r7, #0]
 800fc70:	e4d9      	b.n	800f626 <_dtoa_r+0x40e>
 800fc72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc74:	4f16      	ldr	r7, [pc, #88]	@ (800fcd0 <_dtoa_r+0xab8>)
 800fc76:	b11b      	cbz	r3, 800fc80 <_dtoa_r+0xa68>
 800fc78:	f107 0308 	add.w	r3, r7, #8
 800fc7c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	4638      	mov	r0, r7
 800fc82:	b011      	add	sp, #68	@ 0x44
 800fc84:	ecbd 8b02 	vpop	{d8}
 800fc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8c:	9b07      	ldr	r3, [sp, #28]
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	f77f ae2c 	ble.w	800f8ec <_dtoa_r+0x6d4>
 800fc94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc98:	2001      	movs	r0, #1
 800fc9a:	e64c      	b.n	800f936 <_dtoa_r+0x71e>
 800fc9c:	f1bb 0f00 	cmp.w	fp, #0
 800fca0:	f77f aed8 	ble.w	800fa54 <_dtoa_r+0x83c>
 800fca4:	463e      	mov	r6, r7
 800fca6:	9801      	ldr	r0, [sp, #4]
 800fca8:	4621      	mov	r1, r4
 800fcaa:	f7ff fa2a 	bl	800f102 <quorem>
 800fcae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fcb2:	f806 ab01 	strb.w	sl, [r6], #1
 800fcb6:	1bf2      	subs	r2, r6, r7
 800fcb8:	4593      	cmp	fp, r2
 800fcba:	ddb4      	ble.n	800fc26 <_dtoa_r+0xa0e>
 800fcbc:	9901      	ldr	r1, [sp, #4]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	220a      	movs	r2, #10
 800fcc2:	4648      	mov	r0, r9
 800fcc4:	f000 f968 	bl	800ff98 <__multadd>
 800fcc8:	9001      	str	r0, [sp, #4]
 800fcca:	e7ec      	b.n	800fca6 <_dtoa_r+0xa8e>
 800fccc:	08011584 	.word	0x08011584
 800fcd0:	08011508 	.word	0x08011508

0800fcd4 <_free_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	2900      	cmp	r1, #0
 800fcda:	d041      	beq.n	800fd60 <_free_r+0x8c>
 800fcdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fce0:	1f0c      	subs	r4, r1, #4
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	bfb8      	it	lt
 800fce6:	18e4      	addlt	r4, r4, r3
 800fce8:	f000 f8e8 	bl	800febc <__malloc_lock>
 800fcec:	4a1d      	ldr	r2, [pc, #116]	@ (800fd64 <_free_r+0x90>)
 800fcee:	6813      	ldr	r3, [r2, #0]
 800fcf0:	b933      	cbnz	r3, 800fd00 <_free_r+0x2c>
 800fcf2:	6063      	str	r3, [r4, #4]
 800fcf4:	6014      	str	r4, [r2, #0]
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcfc:	f000 b8e4 	b.w	800fec8 <__malloc_unlock>
 800fd00:	42a3      	cmp	r3, r4
 800fd02:	d908      	bls.n	800fd16 <_free_r+0x42>
 800fd04:	6820      	ldr	r0, [r4, #0]
 800fd06:	1821      	adds	r1, r4, r0
 800fd08:	428b      	cmp	r3, r1
 800fd0a:	bf01      	itttt	eq
 800fd0c:	6819      	ldreq	r1, [r3, #0]
 800fd0e:	685b      	ldreq	r3, [r3, #4]
 800fd10:	1809      	addeq	r1, r1, r0
 800fd12:	6021      	streq	r1, [r4, #0]
 800fd14:	e7ed      	b.n	800fcf2 <_free_r+0x1e>
 800fd16:	461a      	mov	r2, r3
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	b10b      	cbz	r3, 800fd20 <_free_r+0x4c>
 800fd1c:	42a3      	cmp	r3, r4
 800fd1e:	d9fa      	bls.n	800fd16 <_free_r+0x42>
 800fd20:	6811      	ldr	r1, [r2, #0]
 800fd22:	1850      	adds	r0, r2, r1
 800fd24:	42a0      	cmp	r0, r4
 800fd26:	d10b      	bne.n	800fd40 <_free_r+0x6c>
 800fd28:	6820      	ldr	r0, [r4, #0]
 800fd2a:	4401      	add	r1, r0
 800fd2c:	1850      	adds	r0, r2, r1
 800fd2e:	4283      	cmp	r3, r0
 800fd30:	6011      	str	r1, [r2, #0]
 800fd32:	d1e0      	bne.n	800fcf6 <_free_r+0x22>
 800fd34:	6818      	ldr	r0, [r3, #0]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	6053      	str	r3, [r2, #4]
 800fd3a:	4408      	add	r0, r1
 800fd3c:	6010      	str	r0, [r2, #0]
 800fd3e:	e7da      	b.n	800fcf6 <_free_r+0x22>
 800fd40:	d902      	bls.n	800fd48 <_free_r+0x74>
 800fd42:	230c      	movs	r3, #12
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	e7d6      	b.n	800fcf6 <_free_r+0x22>
 800fd48:	6820      	ldr	r0, [r4, #0]
 800fd4a:	1821      	adds	r1, r4, r0
 800fd4c:	428b      	cmp	r3, r1
 800fd4e:	bf04      	itt	eq
 800fd50:	6819      	ldreq	r1, [r3, #0]
 800fd52:	685b      	ldreq	r3, [r3, #4]
 800fd54:	6063      	str	r3, [r4, #4]
 800fd56:	bf04      	itt	eq
 800fd58:	1809      	addeq	r1, r1, r0
 800fd5a:	6021      	streq	r1, [r4, #0]
 800fd5c:	6054      	str	r4, [r2, #4]
 800fd5e:	e7ca      	b.n	800fcf6 <_free_r+0x22>
 800fd60:	bd38      	pop	{r3, r4, r5, pc}
 800fd62:	bf00      	nop
 800fd64:	24005608 	.word	0x24005608

0800fd68 <malloc>:
 800fd68:	4b02      	ldr	r3, [pc, #8]	@ (800fd74 <malloc+0xc>)
 800fd6a:	4601      	mov	r1, r0
 800fd6c:	6818      	ldr	r0, [r3, #0]
 800fd6e:	f000 b825 	b.w	800fdbc <_malloc_r>
 800fd72:	bf00      	nop
 800fd74:	2400008c 	.word	0x2400008c

0800fd78 <sbrk_aligned>:
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	4e0f      	ldr	r6, [pc, #60]	@ (800fdb8 <sbrk_aligned+0x40>)
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	6831      	ldr	r1, [r6, #0]
 800fd80:	4605      	mov	r5, r0
 800fd82:	b911      	cbnz	r1, 800fd8a <sbrk_aligned+0x12>
 800fd84:	f000 fea2 	bl	8010acc <_sbrk_r>
 800fd88:	6030      	str	r0, [r6, #0]
 800fd8a:	4621      	mov	r1, r4
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f000 fe9d 	bl	8010acc <_sbrk_r>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	d103      	bne.n	800fd9e <sbrk_aligned+0x26>
 800fd96:	f04f 34ff 	mov.w	r4, #4294967295
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	bd70      	pop	{r4, r5, r6, pc}
 800fd9e:	1cc4      	adds	r4, r0, #3
 800fda0:	f024 0403 	bic.w	r4, r4, #3
 800fda4:	42a0      	cmp	r0, r4
 800fda6:	d0f8      	beq.n	800fd9a <sbrk_aligned+0x22>
 800fda8:	1a21      	subs	r1, r4, r0
 800fdaa:	4628      	mov	r0, r5
 800fdac:	f000 fe8e 	bl	8010acc <_sbrk_r>
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	d1f2      	bne.n	800fd9a <sbrk_aligned+0x22>
 800fdb4:	e7ef      	b.n	800fd96 <sbrk_aligned+0x1e>
 800fdb6:	bf00      	nop
 800fdb8:	24005604 	.word	0x24005604

0800fdbc <_malloc_r>:
 800fdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc0:	1ccd      	adds	r5, r1, #3
 800fdc2:	f025 0503 	bic.w	r5, r5, #3
 800fdc6:	3508      	adds	r5, #8
 800fdc8:	2d0c      	cmp	r5, #12
 800fdca:	bf38      	it	cc
 800fdcc:	250c      	movcc	r5, #12
 800fdce:	2d00      	cmp	r5, #0
 800fdd0:	4606      	mov	r6, r0
 800fdd2:	db01      	blt.n	800fdd8 <_malloc_r+0x1c>
 800fdd4:	42a9      	cmp	r1, r5
 800fdd6:	d904      	bls.n	800fde2 <_malloc_r+0x26>
 800fdd8:	230c      	movs	r3, #12
 800fdda:	6033      	str	r3, [r6, #0]
 800fddc:	2000      	movs	r0, #0
 800fdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fde2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800feb8 <_malloc_r+0xfc>
 800fde6:	f000 f869 	bl	800febc <__malloc_lock>
 800fdea:	f8d8 3000 	ldr.w	r3, [r8]
 800fdee:	461c      	mov	r4, r3
 800fdf0:	bb44      	cbnz	r4, 800fe44 <_malloc_r+0x88>
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	f7ff ffbf 	bl	800fd78 <sbrk_aligned>
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	d158      	bne.n	800feb2 <_malloc_r+0xf6>
 800fe00:	f8d8 4000 	ldr.w	r4, [r8]
 800fe04:	4627      	mov	r7, r4
 800fe06:	2f00      	cmp	r7, #0
 800fe08:	d143      	bne.n	800fe92 <_malloc_r+0xd6>
 800fe0a:	2c00      	cmp	r4, #0
 800fe0c:	d04b      	beq.n	800fea6 <_malloc_r+0xea>
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	4639      	mov	r1, r7
 800fe12:	4630      	mov	r0, r6
 800fe14:	eb04 0903 	add.w	r9, r4, r3
 800fe18:	f000 fe58 	bl	8010acc <_sbrk_r>
 800fe1c:	4581      	cmp	r9, r0
 800fe1e:	d142      	bne.n	800fea6 <_malloc_r+0xea>
 800fe20:	6821      	ldr	r1, [r4, #0]
 800fe22:	1a6d      	subs	r5, r5, r1
 800fe24:	4629      	mov	r1, r5
 800fe26:	4630      	mov	r0, r6
 800fe28:	f7ff ffa6 	bl	800fd78 <sbrk_aligned>
 800fe2c:	3001      	adds	r0, #1
 800fe2e:	d03a      	beq.n	800fea6 <_malloc_r+0xea>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	442b      	add	r3, r5
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	f8d8 3000 	ldr.w	r3, [r8]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	bb62      	cbnz	r2, 800fe98 <_malloc_r+0xdc>
 800fe3e:	f8c8 7000 	str.w	r7, [r8]
 800fe42:	e00f      	b.n	800fe64 <_malloc_r+0xa8>
 800fe44:	6822      	ldr	r2, [r4, #0]
 800fe46:	1b52      	subs	r2, r2, r5
 800fe48:	d420      	bmi.n	800fe8c <_malloc_r+0xd0>
 800fe4a:	2a0b      	cmp	r2, #11
 800fe4c:	d917      	bls.n	800fe7e <_malloc_r+0xc2>
 800fe4e:	1961      	adds	r1, r4, r5
 800fe50:	42a3      	cmp	r3, r4
 800fe52:	6025      	str	r5, [r4, #0]
 800fe54:	bf18      	it	ne
 800fe56:	6059      	strne	r1, [r3, #4]
 800fe58:	6863      	ldr	r3, [r4, #4]
 800fe5a:	bf08      	it	eq
 800fe5c:	f8c8 1000 	streq.w	r1, [r8]
 800fe60:	5162      	str	r2, [r4, r5]
 800fe62:	604b      	str	r3, [r1, #4]
 800fe64:	4630      	mov	r0, r6
 800fe66:	f000 f82f 	bl	800fec8 <__malloc_unlock>
 800fe6a:	f104 000b 	add.w	r0, r4, #11
 800fe6e:	1d23      	adds	r3, r4, #4
 800fe70:	f020 0007 	bic.w	r0, r0, #7
 800fe74:	1ac2      	subs	r2, r0, r3
 800fe76:	bf1c      	itt	ne
 800fe78:	1a1b      	subne	r3, r3, r0
 800fe7a:	50a3      	strne	r3, [r4, r2]
 800fe7c:	e7af      	b.n	800fdde <_malloc_r+0x22>
 800fe7e:	6862      	ldr	r2, [r4, #4]
 800fe80:	42a3      	cmp	r3, r4
 800fe82:	bf0c      	ite	eq
 800fe84:	f8c8 2000 	streq.w	r2, [r8]
 800fe88:	605a      	strne	r2, [r3, #4]
 800fe8a:	e7eb      	b.n	800fe64 <_malloc_r+0xa8>
 800fe8c:	4623      	mov	r3, r4
 800fe8e:	6864      	ldr	r4, [r4, #4]
 800fe90:	e7ae      	b.n	800fdf0 <_malloc_r+0x34>
 800fe92:	463c      	mov	r4, r7
 800fe94:	687f      	ldr	r7, [r7, #4]
 800fe96:	e7b6      	b.n	800fe06 <_malloc_r+0x4a>
 800fe98:	461a      	mov	r2, r3
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	42a3      	cmp	r3, r4
 800fe9e:	d1fb      	bne.n	800fe98 <_malloc_r+0xdc>
 800fea0:	2300      	movs	r3, #0
 800fea2:	6053      	str	r3, [r2, #4]
 800fea4:	e7de      	b.n	800fe64 <_malloc_r+0xa8>
 800fea6:	230c      	movs	r3, #12
 800fea8:	6033      	str	r3, [r6, #0]
 800feaa:	4630      	mov	r0, r6
 800feac:	f000 f80c 	bl	800fec8 <__malloc_unlock>
 800feb0:	e794      	b.n	800fddc <_malloc_r+0x20>
 800feb2:	6005      	str	r5, [r0, #0]
 800feb4:	e7d6      	b.n	800fe64 <_malloc_r+0xa8>
 800feb6:	bf00      	nop
 800feb8:	24005608 	.word	0x24005608

0800febc <__malloc_lock>:
 800febc:	4801      	ldr	r0, [pc, #4]	@ (800fec4 <__malloc_lock+0x8>)
 800febe:	f7ff b910 	b.w	800f0e2 <__retarget_lock_acquire_recursive>
 800fec2:	bf00      	nop
 800fec4:	24005600 	.word	0x24005600

0800fec8 <__malloc_unlock>:
 800fec8:	4801      	ldr	r0, [pc, #4]	@ (800fed0 <__malloc_unlock+0x8>)
 800feca:	f7ff b90b 	b.w	800f0e4 <__retarget_lock_release_recursive>
 800fece:	bf00      	nop
 800fed0:	24005600 	.word	0x24005600

0800fed4 <_Balloc>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	69c6      	ldr	r6, [r0, #28]
 800fed8:	4604      	mov	r4, r0
 800feda:	460d      	mov	r5, r1
 800fedc:	b976      	cbnz	r6, 800fefc <_Balloc+0x28>
 800fede:	2010      	movs	r0, #16
 800fee0:	f7ff ff42 	bl	800fd68 <malloc>
 800fee4:	4602      	mov	r2, r0
 800fee6:	61e0      	str	r0, [r4, #28]
 800fee8:	b920      	cbnz	r0, 800fef4 <_Balloc+0x20>
 800feea:	4b18      	ldr	r3, [pc, #96]	@ (800ff4c <_Balloc+0x78>)
 800feec:	4818      	ldr	r0, [pc, #96]	@ (800ff50 <_Balloc+0x7c>)
 800feee:	216b      	movs	r1, #107	@ 0x6b
 800fef0:	f000 fdfc 	bl	8010aec <__assert_func>
 800fef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fef8:	6006      	str	r6, [r0, #0]
 800fefa:	60c6      	str	r6, [r0, #12]
 800fefc:	69e6      	ldr	r6, [r4, #28]
 800fefe:	68f3      	ldr	r3, [r6, #12]
 800ff00:	b183      	cbz	r3, 800ff24 <_Balloc+0x50>
 800ff02:	69e3      	ldr	r3, [r4, #28]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff0a:	b9b8      	cbnz	r0, 800ff3c <_Balloc+0x68>
 800ff0c:	2101      	movs	r1, #1
 800ff0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ff12:	1d72      	adds	r2, r6, #5
 800ff14:	0092      	lsls	r2, r2, #2
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 fe06 	bl	8010b28 <_calloc_r>
 800ff1c:	b160      	cbz	r0, 800ff38 <_Balloc+0x64>
 800ff1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff22:	e00e      	b.n	800ff42 <_Balloc+0x6e>
 800ff24:	2221      	movs	r2, #33	@ 0x21
 800ff26:	2104      	movs	r1, #4
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fdfd 	bl	8010b28 <_calloc_r>
 800ff2e:	69e3      	ldr	r3, [r4, #28]
 800ff30:	60f0      	str	r0, [r6, #12]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1e4      	bne.n	800ff02 <_Balloc+0x2e>
 800ff38:	2000      	movs	r0, #0
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	6802      	ldr	r2, [r0, #0]
 800ff3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff42:	2300      	movs	r3, #0
 800ff44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff48:	e7f7      	b.n	800ff3a <_Balloc+0x66>
 800ff4a:	bf00      	nop
 800ff4c:	08011515 	.word	0x08011515
 800ff50:	08011595 	.word	0x08011595

0800ff54 <_Bfree>:
 800ff54:	b570      	push	{r4, r5, r6, lr}
 800ff56:	69c6      	ldr	r6, [r0, #28]
 800ff58:	4605      	mov	r5, r0
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	b976      	cbnz	r6, 800ff7c <_Bfree+0x28>
 800ff5e:	2010      	movs	r0, #16
 800ff60:	f7ff ff02 	bl	800fd68 <malloc>
 800ff64:	4602      	mov	r2, r0
 800ff66:	61e8      	str	r0, [r5, #28]
 800ff68:	b920      	cbnz	r0, 800ff74 <_Bfree+0x20>
 800ff6a:	4b09      	ldr	r3, [pc, #36]	@ (800ff90 <_Bfree+0x3c>)
 800ff6c:	4809      	ldr	r0, [pc, #36]	@ (800ff94 <_Bfree+0x40>)
 800ff6e:	218f      	movs	r1, #143	@ 0x8f
 800ff70:	f000 fdbc 	bl	8010aec <__assert_func>
 800ff74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff78:	6006      	str	r6, [r0, #0]
 800ff7a:	60c6      	str	r6, [r0, #12]
 800ff7c:	b13c      	cbz	r4, 800ff8e <_Bfree+0x3a>
 800ff7e:	69eb      	ldr	r3, [r5, #28]
 800ff80:	6862      	ldr	r2, [r4, #4]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff88:	6021      	str	r1, [r4, #0]
 800ff8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}
 800ff90:	08011515 	.word	0x08011515
 800ff94:	08011595 	.word	0x08011595

0800ff98 <__multadd>:
 800ff98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff9c:	690d      	ldr	r5, [r1, #16]
 800ff9e:	4607      	mov	r7, r0
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	461e      	mov	r6, r3
 800ffa4:	f101 0c14 	add.w	ip, r1, #20
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ffae:	b299      	uxth	r1, r3
 800ffb0:	fb02 6101 	mla	r1, r2, r1, r6
 800ffb4:	0c1e      	lsrs	r6, r3, #16
 800ffb6:	0c0b      	lsrs	r3, r1, #16
 800ffb8:	fb02 3306 	mla	r3, r2, r6, r3
 800ffbc:	b289      	uxth	r1, r1
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ffc4:	4285      	cmp	r5, r0
 800ffc6:	f84c 1b04 	str.w	r1, [ip], #4
 800ffca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ffce:	dcec      	bgt.n	800ffaa <__multadd+0x12>
 800ffd0:	b30e      	cbz	r6, 8010016 <__multadd+0x7e>
 800ffd2:	68a3      	ldr	r3, [r4, #8]
 800ffd4:	42ab      	cmp	r3, r5
 800ffd6:	dc19      	bgt.n	801000c <__multadd+0x74>
 800ffd8:	6861      	ldr	r1, [r4, #4]
 800ffda:	4638      	mov	r0, r7
 800ffdc:	3101      	adds	r1, #1
 800ffde:	f7ff ff79 	bl	800fed4 <_Balloc>
 800ffe2:	4680      	mov	r8, r0
 800ffe4:	b928      	cbnz	r0, 800fff2 <__multadd+0x5a>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	4b0c      	ldr	r3, [pc, #48]	@ (801001c <__multadd+0x84>)
 800ffea:	480d      	ldr	r0, [pc, #52]	@ (8010020 <__multadd+0x88>)
 800ffec:	21ba      	movs	r1, #186	@ 0xba
 800ffee:	f000 fd7d 	bl	8010aec <__assert_func>
 800fff2:	6922      	ldr	r2, [r4, #16]
 800fff4:	3202      	adds	r2, #2
 800fff6:	f104 010c 	add.w	r1, r4, #12
 800fffa:	0092      	lsls	r2, r2, #2
 800fffc:	300c      	adds	r0, #12
 800fffe:	f7ff f872 	bl	800f0e6 <memcpy>
 8010002:	4621      	mov	r1, r4
 8010004:	4638      	mov	r0, r7
 8010006:	f7ff ffa5 	bl	800ff54 <_Bfree>
 801000a:	4644      	mov	r4, r8
 801000c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010010:	3501      	adds	r5, #1
 8010012:	615e      	str	r6, [r3, #20]
 8010014:	6125      	str	r5, [r4, #16]
 8010016:	4620      	mov	r0, r4
 8010018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001c:	08011584 	.word	0x08011584
 8010020:	08011595 	.word	0x08011595

08010024 <__hi0bits>:
 8010024:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010028:	4603      	mov	r3, r0
 801002a:	bf36      	itet	cc
 801002c:	0403      	lslcc	r3, r0, #16
 801002e:	2000      	movcs	r0, #0
 8010030:	2010      	movcc	r0, #16
 8010032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010036:	bf3c      	itt	cc
 8010038:	021b      	lslcc	r3, r3, #8
 801003a:	3008      	addcc	r0, #8
 801003c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010040:	bf3c      	itt	cc
 8010042:	011b      	lslcc	r3, r3, #4
 8010044:	3004      	addcc	r0, #4
 8010046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801004a:	bf3c      	itt	cc
 801004c:	009b      	lslcc	r3, r3, #2
 801004e:	3002      	addcc	r0, #2
 8010050:	2b00      	cmp	r3, #0
 8010052:	db05      	blt.n	8010060 <__hi0bits+0x3c>
 8010054:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010058:	f100 0001 	add.w	r0, r0, #1
 801005c:	bf08      	it	eq
 801005e:	2020      	moveq	r0, #32
 8010060:	4770      	bx	lr

08010062 <__lo0bits>:
 8010062:	6803      	ldr	r3, [r0, #0]
 8010064:	4602      	mov	r2, r0
 8010066:	f013 0007 	ands.w	r0, r3, #7
 801006a:	d00b      	beq.n	8010084 <__lo0bits+0x22>
 801006c:	07d9      	lsls	r1, r3, #31
 801006e:	d421      	bmi.n	80100b4 <__lo0bits+0x52>
 8010070:	0798      	lsls	r0, r3, #30
 8010072:	bf49      	itett	mi
 8010074:	085b      	lsrmi	r3, r3, #1
 8010076:	089b      	lsrpl	r3, r3, #2
 8010078:	2001      	movmi	r0, #1
 801007a:	6013      	strmi	r3, [r2, #0]
 801007c:	bf5c      	itt	pl
 801007e:	6013      	strpl	r3, [r2, #0]
 8010080:	2002      	movpl	r0, #2
 8010082:	4770      	bx	lr
 8010084:	b299      	uxth	r1, r3
 8010086:	b909      	cbnz	r1, 801008c <__lo0bits+0x2a>
 8010088:	0c1b      	lsrs	r3, r3, #16
 801008a:	2010      	movs	r0, #16
 801008c:	b2d9      	uxtb	r1, r3
 801008e:	b909      	cbnz	r1, 8010094 <__lo0bits+0x32>
 8010090:	3008      	adds	r0, #8
 8010092:	0a1b      	lsrs	r3, r3, #8
 8010094:	0719      	lsls	r1, r3, #28
 8010096:	bf04      	itt	eq
 8010098:	091b      	lsreq	r3, r3, #4
 801009a:	3004      	addeq	r0, #4
 801009c:	0799      	lsls	r1, r3, #30
 801009e:	bf04      	itt	eq
 80100a0:	089b      	lsreq	r3, r3, #2
 80100a2:	3002      	addeq	r0, #2
 80100a4:	07d9      	lsls	r1, r3, #31
 80100a6:	d403      	bmi.n	80100b0 <__lo0bits+0x4e>
 80100a8:	085b      	lsrs	r3, r3, #1
 80100aa:	f100 0001 	add.w	r0, r0, #1
 80100ae:	d003      	beq.n	80100b8 <__lo0bits+0x56>
 80100b0:	6013      	str	r3, [r2, #0]
 80100b2:	4770      	bx	lr
 80100b4:	2000      	movs	r0, #0
 80100b6:	4770      	bx	lr
 80100b8:	2020      	movs	r0, #32
 80100ba:	4770      	bx	lr

080100bc <__i2b>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	460c      	mov	r4, r1
 80100c0:	2101      	movs	r1, #1
 80100c2:	f7ff ff07 	bl	800fed4 <_Balloc>
 80100c6:	4602      	mov	r2, r0
 80100c8:	b928      	cbnz	r0, 80100d6 <__i2b+0x1a>
 80100ca:	4b05      	ldr	r3, [pc, #20]	@ (80100e0 <__i2b+0x24>)
 80100cc:	4805      	ldr	r0, [pc, #20]	@ (80100e4 <__i2b+0x28>)
 80100ce:	f240 1145 	movw	r1, #325	@ 0x145
 80100d2:	f000 fd0b 	bl	8010aec <__assert_func>
 80100d6:	2301      	movs	r3, #1
 80100d8:	6144      	str	r4, [r0, #20]
 80100da:	6103      	str	r3, [r0, #16]
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	08011584 	.word	0x08011584
 80100e4:	08011595 	.word	0x08011595

080100e8 <__multiply>:
 80100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ec:	4617      	mov	r7, r2
 80100ee:	690a      	ldr	r2, [r1, #16]
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	bfa8      	it	ge
 80100f6:	463b      	movge	r3, r7
 80100f8:	4689      	mov	r9, r1
 80100fa:	bfa4      	itt	ge
 80100fc:	460f      	movge	r7, r1
 80100fe:	4699      	movge	r9, r3
 8010100:	693d      	ldr	r5, [r7, #16]
 8010102:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	eb05 060a 	add.w	r6, r5, sl
 801010e:	42b3      	cmp	r3, r6
 8010110:	b085      	sub	sp, #20
 8010112:	bfb8      	it	lt
 8010114:	3101      	addlt	r1, #1
 8010116:	f7ff fedd 	bl	800fed4 <_Balloc>
 801011a:	b930      	cbnz	r0, 801012a <__multiply+0x42>
 801011c:	4602      	mov	r2, r0
 801011e:	4b41      	ldr	r3, [pc, #260]	@ (8010224 <__multiply+0x13c>)
 8010120:	4841      	ldr	r0, [pc, #260]	@ (8010228 <__multiply+0x140>)
 8010122:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010126:	f000 fce1 	bl	8010aec <__assert_func>
 801012a:	f100 0414 	add.w	r4, r0, #20
 801012e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010132:	4623      	mov	r3, r4
 8010134:	2200      	movs	r2, #0
 8010136:	4573      	cmp	r3, lr
 8010138:	d320      	bcc.n	801017c <__multiply+0x94>
 801013a:	f107 0814 	add.w	r8, r7, #20
 801013e:	f109 0114 	add.w	r1, r9, #20
 8010142:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010146:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801014a:	9302      	str	r3, [sp, #8]
 801014c:	1beb      	subs	r3, r5, r7
 801014e:	3b15      	subs	r3, #21
 8010150:	f023 0303 	bic.w	r3, r3, #3
 8010154:	3304      	adds	r3, #4
 8010156:	3715      	adds	r7, #21
 8010158:	42bd      	cmp	r5, r7
 801015a:	bf38      	it	cc
 801015c:	2304      	movcc	r3, #4
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	9b02      	ldr	r3, [sp, #8]
 8010162:	9103      	str	r1, [sp, #12]
 8010164:	428b      	cmp	r3, r1
 8010166:	d80c      	bhi.n	8010182 <__multiply+0x9a>
 8010168:	2e00      	cmp	r6, #0
 801016a:	dd03      	ble.n	8010174 <__multiply+0x8c>
 801016c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010170:	2b00      	cmp	r3, #0
 8010172:	d055      	beq.n	8010220 <__multiply+0x138>
 8010174:	6106      	str	r6, [r0, #16]
 8010176:	b005      	add	sp, #20
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	f843 2b04 	str.w	r2, [r3], #4
 8010180:	e7d9      	b.n	8010136 <__multiply+0x4e>
 8010182:	f8b1 a000 	ldrh.w	sl, [r1]
 8010186:	f1ba 0f00 	cmp.w	sl, #0
 801018a:	d01f      	beq.n	80101cc <__multiply+0xe4>
 801018c:	46c4      	mov	ip, r8
 801018e:	46a1      	mov	r9, r4
 8010190:	2700      	movs	r7, #0
 8010192:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010196:	f8d9 3000 	ldr.w	r3, [r9]
 801019a:	fa1f fb82 	uxth.w	fp, r2
 801019e:	b29b      	uxth	r3, r3
 80101a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80101a4:	443b      	add	r3, r7
 80101a6:	f8d9 7000 	ldr.w	r7, [r9]
 80101aa:	0c12      	lsrs	r2, r2, #16
 80101ac:	0c3f      	lsrs	r7, r7, #16
 80101ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80101b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101bc:	4565      	cmp	r5, ip
 80101be:	f849 3b04 	str.w	r3, [r9], #4
 80101c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80101c6:	d8e4      	bhi.n	8010192 <__multiply+0xaa>
 80101c8:	9b01      	ldr	r3, [sp, #4]
 80101ca:	50e7      	str	r7, [r4, r3]
 80101cc:	9b03      	ldr	r3, [sp, #12]
 80101ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80101d2:	3104      	adds	r1, #4
 80101d4:	f1b9 0f00 	cmp.w	r9, #0
 80101d8:	d020      	beq.n	801021c <__multiply+0x134>
 80101da:	6823      	ldr	r3, [r4, #0]
 80101dc:	4647      	mov	r7, r8
 80101de:	46a4      	mov	ip, r4
 80101e0:	f04f 0a00 	mov.w	sl, #0
 80101e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80101e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80101ec:	fb09 220b 	mla	r2, r9, fp, r2
 80101f0:	4452      	add	r2, sl
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101f8:	f84c 3b04 	str.w	r3, [ip], #4
 80101fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8010200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010204:	f8bc 3000 	ldrh.w	r3, [ip]
 8010208:	fb09 330a 	mla	r3, r9, sl, r3
 801020c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010210:	42bd      	cmp	r5, r7
 8010212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010216:	d8e5      	bhi.n	80101e4 <__multiply+0xfc>
 8010218:	9a01      	ldr	r2, [sp, #4]
 801021a:	50a3      	str	r3, [r4, r2]
 801021c:	3404      	adds	r4, #4
 801021e:	e79f      	b.n	8010160 <__multiply+0x78>
 8010220:	3e01      	subs	r6, #1
 8010222:	e7a1      	b.n	8010168 <__multiply+0x80>
 8010224:	08011584 	.word	0x08011584
 8010228:	08011595 	.word	0x08011595

0801022c <__pow5mult>:
 801022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010230:	4615      	mov	r5, r2
 8010232:	f012 0203 	ands.w	r2, r2, #3
 8010236:	4607      	mov	r7, r0
 8010238:	460e      	mov	r6, r1
 801023a:	d007      	beq.n	801024c <__pow5mult+0x20>
 801023c:	4c25      	ldr	r4, [pc, #148]	@ (80102d4 <__pow5mult+0xa8>)
 801023e:	3a01      	subs	r2, #1
 8010240:	2300      	movs	r3, #0
 8010242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010246:	f7ff fea7 	bl	800ff98 <__multadd>
 801024a:	4606      	mov	r6, r0
 801024c:	10ad      	asrs	r5, r5, #2
 801024e:	d03d      	beq.n	80102cc <__pow5mult+0xa0>
 8010250:	69fc      	ldr	r4, [r7, #28]
 8010252:	b97c      	cbnz	r4, 8010274 <__pow5mult+0x48>
 8010254:	2010      	movs	r0, #16
 8010256:	f7ff fd87 	bl	800fd68 <malloc>
 801025a:	4602      	mov	r2, r0
 801025c:	61f8      	str	r0, [r7, #28]
 801025e:	b928      	cbnz	r0, 801026c <__pow5mult+0x40>
 8010260:	4b1d      	ldr	r3, [pc, #116]	@ (80102d8 <__pow5mult+0xac>)
 8010262:	481e      	ldr	r0, [pc, #120]	@ (80102dc <__pow5mult+0xb0>)
 8010264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010268:	f000 fc40 	bl	8010aec <__assert_func>
 801026c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010270:	6004      	str	r4, [r0, #0]
 8010272:	60c4      	str	r4, [r0, #12]
 8010274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801027c:	b94c      	cbnz	r4, 8010292 <__pow5mult+0x66>
 801027e:	f240 2171 	movw	r1, #625	@ 0x271
 8010282:	4638      	mov	r0, r7
 8010284:	f7ff ff1a 	bl	80100bc <__i2b>
 8010288:	2300      	movs	r3, #0
 801028a:	f8c8 0008 	str.w	r0, [r8, #8]
 801028e:	4604      	mov	r4, r0
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	f04f 0900 	mov.w	r9, #0
 8010296:	07eb      	lsls	r3, r5, #31
 8010298:	d50a      	bpl.n	80102b0 <__pow5mult+0x84>
 801029a:	4631      	mov	r1, r6
 801029c:	4622      	mov	r2, r4
 801029e:	4638      	mov	r0, r7
 80102a0:	f7ff ff22 	bl	80100e8 <__multiply>
 80102a4:	4631      	mov	r1, r6
 80102a6:	4680      	mov	r8, r0
 80102a8:	4638      	mov	r0, r7
 80102aa:	f7ff fe53 	bl	800ff54 <_Bfree>
 80102ae:	4646      	mov	r6, r8
 80102b0:	106d      	asrs	r5, r5, #1
 80102b2:	d00b      	beq.n	80102cc <__pow5mult+0xa0>
 80102b4:	6820      	ldr	r0, [r4, #0]
 80102b6:	b938      	cbnz	r0, 80102c8 <__pow5mult+0x9c>
 80102b8:	4622      	mov	r2, r4
 80102ba:	4621      	mov	r1, r4
 80102bc:	4638      	mov	r0, r7
 80102be:	f7ff ff13 	bl	80100e8 <__multiply>
 80102c2:	6020      	str	r0, [r4, #0]
 80102c4:	f8c0 9000 	str.w	r9, [r0]
 80102c8:	4604      	mov	r4, r0
 80102ca:	e7e4      	b.n	8010296 <__pow5mult+0x6a>
 80102cc:	4630      	mov	r0, r6
 80102ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d2:	bf00      	nop
 80102d4:	08011648 	.word	0x08011648
 80102d8:	08011515 	.word	0x08011515
 80102dc:	08011595 	.word	0x08011595

080102e0 <__lshift>:
 80102e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102e4:	460c      	mov	r4, r1
 80102e6:	6849      	ldr	r1, [r1, #4]
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102ee:	68a3      	ldr	r3, [r4, #8]
 80102f0:	4607      	mov	r7, r0
 80102f2:	4691      	mov	r9, r2
 80102f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102f8:	f108 0601 	add.w	r6, r8, #1
 80102fc:	42b3      	cmp	r3, r6
 80102fe:	db0b      	blt.n	8010318 <__lshift+0x38>
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff fde7 	bl	800fed4 <_Balloc>
 8010306:	4605      	mov	r5, r0
 8010308:	b948      	cbnz	r0, 801031e <__lshift+0x3e>
 801030a:	4602      	mov	r2, r0
 801030c:	4b28      	ldr	r3, [pc, #160]	@ (80103b0 <__lshift+0xd0>)
 801030e:	4829      	ldr	r0, [pc, #164]	@ (80103b4 <__lshift+0xd4>)
 8010310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010314:	f000 fbea 	bl	8010aec <__assert_func>
 8010318:	3101      	adds	r1, #1
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	e7ee      	b.n	80102fc <__lshift+0x1c>
 801031e:	2300      	movs	r3, #0
 8010320:	f100 0114 	add.w	r1, r0, #20
 8010324:	f100 0210 	add.w	r2, r0, #16
 8010328:	4618      	mov	r0, r3
 801032a:	4553      	cmp	r3, sl
 801032c:	db33      	blt.n	8010396 <__lshift+0xb6>
 801032e:	6920      	ldr	r0, [r4, #16]
 8010330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010334:	f104 0314 	add.w	r3, r4, #20
 8010338:	f019 091f 	ands.w	r9, r9, #31
 801033c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010344:	d02b      	beq.n	801039e <__lshift+0xbe>
 8010346:	f1c9 0e20 	rsb	lr, r9, #32
 801034a:	468a      	mov	sl, r1
 801034c:	2200      	movs	r2, #0
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	fa00 f009 	lsl.w	r0, r0, r9
 8010354:	4310      	orrs	r0, r2
 8010356:	f84a 0b04 	str.w	r0, [sl], #4
 801035a:	f853 2b04 	ldr.w	r2, [r3], #4
 801035e:	459c      	cmp	ip, r3
 8010360:	fa22 f20e 	lsr.w	r2, r2, lr
 8010364:	d8f3      	bhi.n	801034e <__lshift+0x6e>
 8010366:	ebac 0304 	sub.w	r3, ip, r4
 801036a:	3b15      	subs	r3, #21
 801036c:	f023 0303 	bic.w	r3, r3, #3
 8010370:	3304      	adds	r3, #4
 8010372:	f104 0015 	add.w	r0, r4, #21
 8010376:	4560      	cmp	r0, ip
 8010378:	bf88      	it	hi
 801037a:	2304      	movhi	r3, #4
 801037c:	50ca      	str	r2, [r1, r3]
 801037e:	b10a      	cbz	r2, 8010384 <__lshift+0xa4>
 8010380:	f108 0602 	add.w	r6, r8, #2
 8010384:	3e01      	subs	r6, #1
 8010386:	4638      	mov	r0, r7
 8010388:	612e      	str	r6, [r5, #16]
 801038a:	4621      	mov	r1, r4
 801038c:	f7ff fde2 	bl	800ff54 <_Bfree>
 8010390:	4628      	mov	r0, r5
 8010392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010396:	f842 0f04 	str.w	r0, [r2, #4]!
 801039a:	3301      	adds	r3, #1
 801039c:	e7c5      	b.n	801032a <__lshift+0x4a>
 801039e:	3904      	subs	r1, #4
 80103a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80103a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80103a8:	459c      	cmp	ip, r3
 80103aa:	d8f9      	bhi.n	80103a0 <__lshift+0xc0>
 80103ac:	e7ea      	b.n	8010384 <__lshift+0xa4>
 80103ae:	bf00      	nop
 80103b0:	08011584 	.word	0x08011584
 80103b4:	08011595 	.word	0x08011595

080103b8 <__mcmp>:
 80103b8:	690a      	ldr	r2, [r1, #16]
 80103ba:	4603      	mov	r3, r0
 80103bc:	6900      	ldr	r0, [r0, #16]
 80103be:	1a80      	subs	r0, r0, r2
 80103c0:	b530      	push	{r4, r5, lr}
 80103c2:	d10e      	bne.n	80103e2 <__mcmp+0x2a>
 80103c4:	3314      	adds	r3, #20
 80103c6:	3114      	adds	r1, #20
 80103c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80103cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80103d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80103d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80103d8:	4295      	cmp	r5, r2
 80103da:	d003      	beq.n	80103e4 <__mcmp+0x2c>
 80103dc:	d205      	bcs.n	80103ea <__mcmp+0x32>
 80103de:	f04f 30ff 	mov.w	r0, #4294967295
 80103e2:	bd30      	pop	{r4, r5, pc}
 80103e4:	42a3      	cmp	r3, r4
 80103e6:	d3f3      	bcc.n	80103d0 <__mcmp+0x18>
 80103e8:	e7fb      	b.n	80103e2 <__mcmp+0x2a>
 80103ea:	2001      	movs	r0, #1
 80103ec:	e7f9      	b.n	80103e2 <__mcmp+0x2a>
	...

080103f0 <__mdiff>:
 80103f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	4689      	mov	r9, r1
 80103f6:	4606      	mov	r6, r0
 80103f8:	4611      	mov	r1, r2
 80103fa:	4648      	mov	r0, r9
 80103fc:	4614      	mov	r4, r2
 80103fe:	f7ff ffdb 	bl	80103b8 <__mcmp>
 8010402:	1e05      	subs	r5, r0, #0
 8010404:	d112      	bne.n	801042c <__mdiff+0x3c>
 8010406:	4629      	mov	r1, r5
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff fd63 	bl	800fed4 <_Balloc>
 801040e:	4602      	mov	r2, r0
 8010410:	b928      	cbnz	r0, 801041e <__mdiff+0x2e>
 8010412:	4b3f      	ldr	r3, [pc, #252]	@ (8010510 <__mdiff+0x120>)
 8010414:	f240 2137 	movw	r1, #567	@ 0x237
 8010418:	483e      	ldr	r0, [pc, #248]	@ (8010514 <__mdiff+0x124>)
 801041a:	f000 fb67 	bl	8010aec <__assert_func>
 801041e:	2301      	movs	r3, #1
 8010420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010424:	4610      	mov	r0, r2
 8010426:	b003      	add	sp, #12
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	bfbc      	itt	lt
 801042e:	464b      	movlt	r3, r9
 8010430:	46a1      	movlt	r9, r4
 8010432:	4630      	mov	r0, r6
 8010434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010438:	bfba      	itte	lt
 801043a:	461c      	movlt	r4, r3
 801043c:	2501      	movlt	r5, #1
 801043e:	2500      	movge	r5, #0
 8010440:	f7ff fd48 	bl	800fed4 <_Balloc>
 8010444:	4602      	mov	r2, r0
 8010446:	b918      	cbnz	r0, 8010450 <__mdiff+0x60>
 8010448:	4b31      	ldr	r3, [pc, #196]	@ (8010510 <__mdiff+0x120>)
 801044a:	f240 2145 	movw	r1, #581	@ 0x245
 801044e:	e7e3      	b.n	8010418 <__mdiff+0x28>
 8010450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010454:	6926      	ldr	r6, [r4, #16]
 8010456:	60c5      	str	r5, [r0, #12]
 8010458:	f109 0310 	add.w	r3, r9, #16
 801045c:	f109 0514 	add.w	r5, r9, #20
 8010460:	f104 0e14 	add.w	lr, r4, #20
 8010464:	f100 0b14 	add.w	fp, r0, #20
 8010468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801046c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010470:	9301      	str	r3, [sp, #4]
 8010472:	46d9      	mov	r9, fp
 8010474:	f04f 0c00 	mov.w	ip, #0
 8010478:	9b01      	ldr	r3, [sp, #4]
 801047a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801047e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	fa1f f38a 	uxth.w	r3, sl
 8010488:	4619      	mov	r1, r3
 801048a:	b283      	uxth	r3, r0
 801048c:	1acb      	subs	r3, r1, r3
 801048e:	0c00      	lsrs	r0, r0, #16
 8010490:	4463      	add	r3, ip
 8010492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801049a:	b29b      	uxth	r3, r3
 801049c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80104a0:	4576      	cmp	r6, lr
 80104a2:	f849 3b04 	str.w	r3, [r9], #4
 80104a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104aa:	d8e5      	bhi.n	8010478 <__mdiff+0x88>
 80104ac:	1b33      	subs	r3, r6, r4
 80104ae:	3b15      	subs	r3, #21
 80104b0:	f023 0303 	bic.w	r3, r3, #3
 80104b4:	3415      	adds	r4, #21
 80104b6:	3304      	adds	r3, #4
 80104b8:	42a6      	cmp	r6, r4
 80104ba:	bf38      	it	cc
 80104bc:	2304      	movcc	r3, #4
 80104be:	441d      	add	r5, r3
 80104c0:	445b      	add	r3, fp
 80104c2:	461e      	mov	r6, r3
 80104c4:	462c      	mov	r4, r5
 80104c6:	4544      	cmp	r4, r8
 80104c8:	d30e      	bcc.n	80104e8 <__mdiff+0xf8>
 80104ca:	f108 0103 	add.w	r1, r8, #3
 80104ce:	1b49      	subs	r1, r1, r5
 80104d0:	f021 0103 	bic.w	r1, r1, #3
 80104d4:	3d03      	subs	r5, #3
 80104d6:	45a8      	cmp	r8, r5
 80104d8:	bf38      	it	cc
 80104da:	2100      	movcc	r1, #0
 80104dc:	440b      	add	r3, r1
 80104de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104e2:	b191      	cbz	r1, 801050a <__mdiff+0x11a>
 80104e4:	6117      	str	r7, [r2, #16]
 80104e6:	e79d      	b.n	8010424 <__mdiff+0x34>
 80104e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80104ec:	46e6      	mov	lr, ip
 80104ee:	0c08      	lsrs	r0, r1, #16
 80104f0:	fa1c fc81 	uxtah	ip, ip, r1
 80104f4:	4471      	add	r1, lr
 80104f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80104fa:	b289      	uxth	r1, r1
 80104fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010500:	f846 1b04 	str.w	r1, [r6], #4
 8010504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010508:	e7dd      	b.n	80104c6 <__mdiff+0xd6>
 801050a:	3f01      	subs	r7, #1
 801050c:	e7e7      	b.n	80104de <__mdiff+0xee>
 801050e:	bf00      	nop
 8010510:	08011584 	.word	0x08011584
 8010514:	08011595 	.word	0x08011595

08010518 <__d2b>:
 8010518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801051c:	460f      	mov	r7, r1
 801051e:	2101      	movs	r1, #1
 8010520:	ec59 8b10 	vmov	r8, r9, d0
 8010524:	4616      	mov	r6, r2
 8010526:	f7ff fcd5 	bl	800fed4 <_Balloc>
 801052a:	4604      	mov	r4, r0
 801052c:	b930      	cbnz	r0, 801053c <__d2b+0x24>
 801052e:	4602      	mov	r2, r0
 8010530:	4b23      	ldr	r3, [pc, #140]	@ (80105c0 <__d2b+0xa8>)
 8010532:	4824      	ldr	r0, [pc, #144]	@ (80105c4 <__d2b+0xac>)
 8010534:	f240 310f 	movw	r1, #783	@ 0x30f
 8010538:	f000 fad8 	bl	8010aec <__assert_func>
 801053c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010544:	b10d      	cbz	r5, 801054a <__d2b+0x32>
 8010546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801054a:	9301      	str	r3, [sp, #4]
 801054c:	f1b8 0300 	subs.w	r3, r8, #0
 8010550:	d023      	beq.n	801059a <__d2b+0x82>
 8010552:	4668      	mov	r0, sp
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	f7ff fd84 	bl	8010062 <__lo0bits>
 801055a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801055e:	b1d0      	cbz	r0, 8010596 <__d2b+0x7e>
 8010560:	f1c0 0320 	rsb	r3, r0, #32
 8010564:	fa02 f303 	lsl.w	r3, r2, r3
 8010568:	430b      	orrs	r3, r1
 801056a:	40c2      	lsrs	r2, r0
 801056c:	6163      	str	r3, [r4, #20]
 801056e:	9201      	str	r2, [sp, #4]
 8010570:	9b01      	ldr	r3, [sp, #4]
 8010572:	61a3      	str	r3, [r4, #24]
 8010574:	2b00      	cmp	r3, #0
 8010576:	bf0c      	ite	eq
 8010578:	2201      	moveq	r2, #1
 801057a:	2202      	movne	r2, #2
 801057c:	6122      	str	r2, [r4, #16]
 801057e:	b1a5      	cbz	r5, 80105aa <__d2b+0x92>
 8010580:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010584:	4405      	add	r5, r0
 8010586:	603d      	str	r5, [r7, #0]
 8010588:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801058c:	6030      	str	r0, [r6, #0]
 801058e:	4620      	mov	r0, r4
 8010590:	b003      	add	sp, #12
 8010592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010596:	6161      	str	r1, [r4, #20]
 8010598:	e7ea      	b.n	8010570 <__d2b+0x58>
 801059a:	a801      	add	r0, sp, #4
 801059c:	f7ff fd61 	bl	8010062 <__lo0bits>
 80105a0:	9b01      	ldr	r3, [sp, #4]
 80105a2:	6163      	str	r3, [r4, #20]
 80105a4:	3020      	adds	r0, #32
 80105a6:	2201      	movs	r2, #1
 80105a8:	e7e8      	b.n	801057c <__d2b+0x64>
 80105aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80105b2:	6038      	str	r0, [r7, #0]
 80105b4:	6918      	ldr	r0, [r3, #16]
 80105b6:	f7ff fd35 	bl	8010024 <__hi0bits>
 80105ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105be:	e7e5      	b.n	801058c <__d2b+0x74>
 80105c0:	08011584 	.word	0x08011584
 80105c4:	08011595 	.word	0x08011595

080105c8 <__sfputc_r>:
 80105c8:	6893      	ldr	r3, [r2, #8]
 80105ca:	3b01      	subs	r3, #1
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	b410      	push	{r4}
 80105d0:	6093      	str	r3, [r2, #8]
 80105d2:	da08      	bge.n	80105e6 <__sfputc_r+0x1e>
 80105d4:	6994      	ldr	r4, [r2, #24]
 80105d6:	42a3      	cmp	r3, r4
 80105d8:	db01      	blt.n	80105de <__sfputc_r+0x16>
 80105da:	290a      	cmp	r1, #10
 80105dc:	d103      	bne.n	80105e6 <__sfputc_r+0x1e>
 80105de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105e2:	f000 b9df 	b.w	80109a4 <__swbuf_r>
 80105e6:	6813      	ldr	r3, [r2, #0]
 80105e8:	1c58      	adds	r0, r3, #1
 80105ea:	6010      	str	r0, [r2, #0]
 80105ec:	7019      	strb	r1, [r3, #0]
 80105ee:	4608      	mov	r0, r1
 80105f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <__sfputs_r>:
 80105f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f8:	4606      	mov	r6, r0
 80105fa:	460f      	mov	r7, r1
 80105fc:	4614      	mov	r4, r2
 80105fe:	18d5      	adds	r5, r2, r3
 8010600:	42ac      	cmp	r4, r5
 8010602:	d101      	bne.n	8010608 <__sfputs_r+0x12>
 8010604:	2000      	movs	r0, #0
 8010606:	e007      	b.n	8010618 <__sfputs_r+0x22>
 8010608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060c:	463a      	mov	r2, r7
 801060e:	4630      	mov	r0, r6
 8010610:	f7ff ffda 	bl	80105c8 <__sfputc_r>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d1f3      	bne.n	8010600 <__sfputs_r+0xa>
 8010618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801061c <_vfiprintf_r>:
 801061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010620:	460d      	mov	r5, r1
 8010622:	b09d      	sub	sp, #116	@ 0x74
 8010624:	4614      	mov	r4, r2
 8010626:	4698      	mov	r8, r3
 8010628:	4606      	mov	r6, r0
 801062a:	b118      	cbz	r0, 8010634 <_vfiprintf_r+0x18>
 801062c:	6a03      	ldr	r3, [r0, #32]
 801062e:	b90b      	cbnz	r3, 8010634 <_vfiprintf_r+0x18>
 8010630:	f7fe fbf0 	bl	800ee14 <__sinit>
 8010634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010636:	07d9      	lsls	r1, r3, #31
 8010638:	d405      	bmi.n	8010646 <_vfiprintf_r+0x2a>
 801063a:	89ab      	ldrh	r3, [r5, #12]
 801063c:	059a      	lsls	r2, r3, #22
 801063e:	d402      	bmi.n	8010646 <_vfiprintf_r+0x2a>
 8010640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010642:	f7fe fd4e 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 8010646:	89ab      	ldrh	r3, [r5, #12]
 8010648:	071b      	lsls	r3, r3, #28
 801064a:	d501      	bpl.n	8010650 <_vfiprintf_r+0x34>
 801064c:	692b      	ldr	r3, [r5, #16]
 801064e:	b99b      	cbnz	r3, 8010678 <_vfiprintf_r+0x5c>
 8010650:	4629      	mov	r1, r5
 8010652:	4630      	mov	r0, r6
 8010654:	f000 f9e4 	bl	8010a20 <__swsetup_r>
 8010658:	b170      	cbz	r0, 8010678 <_vfiprintf_r+0x5c>
 801065a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801065c:	07dc      	lsls	r4, r3, #31
 801065e:	d504      	bpl.n	801066a <_vfiprintf_r+0x4e>
 8010660:	f04f 30ff 	mov.w	r0, #4294967295
 8010664:	b01d      	add	sp, #116	@ 0x74
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066a:	89ab      	ldrh	r3, [r5, #12]
 801066c:	0598      	lsls	r0, r3, #22
 801066e:	d4f7      	bmi.n	8010660 <_vfiprintf_r+0x44>
 8010670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010672:	f7fe fd37 	bl	800f0e4 <__retarget_lock_release_recursive>
 8010676:	e7f3      	b.n	8010660 <_vfiprintf_r+0x44>
 8010678:	2300      	movs	r3, #0
 801067a:	9309      	str	r3, [sp, #36]	@ 0x24
 801067c:	2320      	movs	r3, #32
 801067e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010682:	f8cd 800c 	str.w	r8, [sp, #12]
 8010686:	2330      	movs	r3, #48	@ 0x30
 8010688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010838 <_vfiprintf_r+0x21c>
 801068c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010690:	f04f 0901 	mov.w	r9, #1
 8010694:	4623      	mov	r3, r4
 8010696:	469a      	mov	sl, r3
 8010698:	f813 2b01 	ldrb.w	r2, [r3], #1
 801069c:	b10a      	cbz	r2, 80106a2 <_vfiprintf_r+0x86>
 801069e:	2a25      	cmp	r2, #37	@ 0x25
 80106a0:	d1f9      	bne.n	8010696 <_vfiprintf_r+0x7a>
 80106a2:	ebba 0b04 	subs.w	fp, sl, r4
 80106a6:	d00b      	beq.n	80106c0 <_vfiprintf_r+0xa4>
 80106a8:	465b      	mov	r3, fp
 80106aa:	4622      	mov	r2, r4
 80106ac:	4629      	mov	r1, r5
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ff ffa1 	bl	80105f6 <__sfputs_r>
 80106b4:	3001      	adds	r0, #1
 80106b6:	f000 80a7 	beq.w	8010808 <_vfiprintf_r+0x1ec>
 80106ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106bc:	445a      	add	r2, fp
 80106be:	9209      	str	r2, [sp, #36]	@ 0x24
 80106c0:	f89a 3000 	ldrb.w	r3, [sl]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 809f 	beq.w	8010808 <_vfiprintf_r+0x1ec>
 80106ca:	2300      	movs	r3, #0
 80106cc:	f04f 32ff 	mov.w	r2, #4294967295
 80106d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106d4:	f10a 0a01 	add.w	sl, sl, #1
 80106d8:	9304      	str	r3, [sp, #16]
 80106da:	9307      	str	r3, [sp, #28]
 80106dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80106e2:	4654      	mov	r4, sl
 80106e4:	2205      	movs	r2, #5
 80106e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ea:	4853      	ldr	r0, [pc, #332]	@ (8010838 <_vfiprintf_r+0x21c>)
 80106ec:	f7ef fdf8 	bl	80002e0 <memchr>
 80106f0:	9a04      	ldr	r2, [sp, #16]
 80106f2:	b9d8      	cbnz	r0, 801072c <_vfiprintf_r+0x110>
 80106f4:	06d1      	lsls	r1, r2, #27
 80106f6:	bf44      	itt	mi
 80106f8:	2320      	movmi	r3, #32
 80106fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106fe:	0713      	lsls	r3, r2, #28
 8010700:	bf44      	itt	mi
 8010702:	232b      	movmi	r3, #43	@ 0x2b
 8010704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010708:	f89a 3000 	ldrb.w	r3, [sl]
 801070c:	2b2a      	cmp	r3, #42	@ 0x2a
 801070e:	d015      	beq.n	801073c <_vfiprintf_r+0x120>
 8010710:	9a07      	ldr	r2, [sp, #28]
 8010712:	4654      	mov	r4, sl
 8010714:	2000      	movs	r0, #0
 8010716:	f04f 0c0a 	mov.w	ip, #10
 801071a:	4621      	mov	r1, r4
 801071c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010720:	3b30      	subs	r3, #48	@ 0x30
 8010722:	2b09      	cmp	r3, #9
 8010724:	d94b      	bls.n	80107be <_vfiprintf_r+0x1a2>
 8010726:	b1b0      	cbz	r0, 8010756 <_vfiprintf_r+0x13a>
 8010728:	9207      	str	r2, [sp, #28]
 801072a:	e014      	b.n	8010756 <_vfiprintf_r+0x13a>
 801072c:	eba0 0308 	sub.w	r3, r0, r8
 8010730:	fa09 f303 	lsl.w	r3, r9, r3
 8010734:	4313      	orrs	r3, r2
 8010736:	9304      	str	r3, [sp, #16]
 8010738:	46a2      	mov	sl, r4
 801073a:	e7d2      	b.n	80106e2 <_vfiprintf_r+0xc6>
 801073c:	9b03      	ldr	r3, [sp, #12]
 801073e:	1d19      	adds	r1, r3, #4
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	9103      	str	r1, [sp, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	bfbb      	ittet	lt
 8010748:	425b      	neglt	r3, r3
 801074a:	f042 0202 	orrlt.w	r2, r2, #2
 801074e:	9307      	strge	r3, [sp, #28]
 8010750:	9307      	strlt	r3, [sp, #28]
 8010752:	bfb8      	it	lt
 8010754:	9204      	strlt	r2, [sp, #16]
 8010756:	7823      	ldrb	r3, [r4, #0]
 8010758:	2b2e      	cmp	r3, #46	@ 0x2e
 801075a:	d10a      	bne.n	8010772 <_vfiprintf_r+0x156>
 801075c:	7863      	ldrb	r3, [r4, #1]
 801075e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010760:	d132      	bne.n	80107c8 <_vfiprintf_r+0x1ac>
 8010762:	9b03      	ldr	r3, [sp, #12]
 8010764:	1d1a      	adds	r2, r3, #4
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	9203      	str	r2, [sp, #12]
 801076a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801076e:	3402      	adds	r4, #2
 8010770:	9305      	str	r3, [sp, #20]
 8010772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010848 <_vfiprintf_r+0x22c>
 8010776:	7821      	ldrb	r1, [r4, #0]
 8010778:	2203      	movs	r2, #3
 801077a:	4650      	mov	r0, sl
 801077c:	f7ef fdb0 	bl	80002e0 <memchr>
 8010780:	b138      	cbz	r0, 8010792 <_vfiprintf_r+0x176>
 8010782:	9b04      	ldr	r3, [sp, #16]
 8010784:	eba0 000a 	sub.w	r0, r0, sl
 8010788:	2240      	movs	r2, #64	@ 0x40
 801078a:	4082      	lsls	r2, r0
 801078c:	4313      	orrs	r3, r2
 801078e:	3401      	adds	r4, #1
 8010790:	9304      	str	r3, [sp, #16]
 8010792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010796:	4829      	ldr	r0, [pc, #164]	@ (801083c <_vfiprintf_r+0x220>)
 8010798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801079c:	2206      	movs	r2, #6
 801079e:	f7ef fd9f 	bl	80002e0 <memchr>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	d03f      	beq.n	8010826 <_vfiprintf_r+0x20a>
 80107a6:	4b26      	ldr	r3, [pc, #152]	@ (8010840 <_vfiprintf_r+0x224>)
 80107a8:	bb1b      	cbnz	r3, 80107f2 <_vfiprintf_r+0x1d6>
 80107aa:	9b03      	ldr	r3, [sp, #12]
 80107ac:	3307      	adds	r3, #7
 80107ae:	f023 0307 	bic.w	r3, r3, #7
 80107b2:	3308      	adds	r3, #8
 80107b4:	9303      	str	r3, [sp, #12]
 80107b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b8:	443b      	add	r3, r7
 80107ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80107bc:	e76a      	b.n	8010694 <_vfiprintf_r+0x78>
 80107be:	fb0c 3202 	mla	r2, ip, r2, r3
 80107c2:	460c      	mov	r4, r1
 80107c4:	2001      	movs	r0, #1
 80107c6:	e7a8      	b.n	801071a <_vfiprintf_r+0xfe>
 80107c8:	2300      	movs	r3, #0
 80107ca:	3401      	adds	r4, #1
 80107cc:	9305      	str	r3, [sp, #20]
 80107ce:	4619      	mov	r1, r3
 80107d0:	f04f 0c0a 	mov.w	ip, #10
 80107d4:	4620      	mov	r0, r4
 80107d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107da:	3a30      	subs	r2, #48	@ 0x30
 80107dc:	2a09      	cmp	r2, #9
 80107de:	d903      	bls.n	80107e8 <_vfiprintf_r+0x1cc>
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d0c6      	beq.n	8010772 <_vfiprintf_r+0x156>
 80107e4:	9105      	str	r1, [sp, #20]
 80107e6:	e7c4      	b.n	8010772 <_vfiprintf_r+0x156>
 80107e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80107ec:	4604      	mov	r4, r0
 80107ee:	2301      	movs	r3, #1
 80107f0:	e7f0      	b.n	80107d4 <_vfiprintf_r+0x1b8>
 80107f2:	ab03      	add	r3, sp, #12
 80107f4:	9300      	str	r3, [sp, #0]
 80107f6:	462a      	mov	r2, r5
 80107f8:	4b12      	ldr	r3, [pc, #72]	@ (8010844 <_vfiprintf_r+0x228>)
 80107fa:	a904      	add	r1, sp, #16
 80107fc:	4630      	mov	r0, r6
 80107fe:	f7fd fed7 	bl	800e5b0 <_printf_float>
 8010802:	4607      	mov	r7, r0
 8010804:	1c78      	adds	r0, r7, #1
 8010806:	d1d6      	bne.n	80107b6 <_vfiprintf_r+0x19a>
 8010808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801080a:	07d9      	lsls	r1, r3, #31
 801080c:	d405      	bmi.n	801081a <_vfiprintf_r+0x1fe>
 801080e:	89ab      	ldrh	r3, [r5, #12]
 8010810:	059a      	lsls	r2, r3, #22
 8010812:	d402      	bmi.n	801081a <_vfiprintf_r+0x1fe>
 8010814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010816:	f7fe fc65 	bl	800f0e4 <__retarget_lock_release_recursive>
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	065b      	lsls	r3, r3, #25
 801081e:	f53f af1f 	bmi.w	8010660 <_vfiprintf_r+0x44>
 8010822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010824:	e71e      	b.n	8010664 <_vfiprintf_r+0x48>
 8010826:	ab03      	add	r3, sp, #12
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	462a      	mov	r2, r5
 801082c:	4b05      	ldr	r3, [pc, #20]	@ (8010844 <_vfiprintf_r+0x228>)
 801082e:	a904      	add	r1, sp, #16
 8010830:	4630      	mov	r0, r6
 8010832:	f7fe f945 	bl	800eac0 <_printf_i>
 8010836:	e7e4      	b.n	8010802 <_vfiprintf_r+0x1e6>
 8010838:	080115ee 	.word	0x080115ee
 801083c:	080115f8 	.word	0x080115f8
 8010840:	0800e5b1 	.word	0x0800e5b1
 8010844:	080105f7 	.word	0x080105f7
 8010848:	080115f4 	.word	0x080115f4

0801084c <__sflush_r>:
 801084c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010854:	0716      	lsls	r6, r2, #28
 8010856:	4605      	mov	r5, r0
 8010858:	460c      	mov	r4, r1
 801085a:	d454      	bmi.n	8010906 <__sflush_r+0xba>
 801085c:	684b      	ldr	r3, [r1, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	dc02      	bgt.n	8010868 <__sflush_r+0x1c>
 8010862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd48      	ble.n	80108fa <__sflush_r+0xae>
 8010868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801086a:	2e00      	cmp	r6, #0
 801086c:	d045      	beq.n	80108fa <__sflush_r+0xae>
 801086e:	2300      	movs	r3, #0
 8010870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010874:	682f      	ldr	r7, [r5, #0]
 8010876:	6a21      	ldr	r1, [r4, #32]
 8010878:	602b      	str	r3, [r5, #0]
 801087a:	d030      	beq.n	80108de <__sflush_r+0x92>
 801087c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	0759      	lsls	r1, r3, #29
 8010882:	d505      	bpl.n	8010890 <__sflush_r+0x44>
 8010884:	6863      	ldr	r3, [r4, #4]
 8010886:	1ad2      	subs	r2, r2, r3
 8010888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801088a:	b10b      	cbz	r3, 8010890 <__sflush_r+0x44>
 801088c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801088e:	1ad2      	subs	r2, r2, r3
 8010890:	2300      	movs	r3, #0
 8010892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010894:	6a21      	ldr	r1, [r4, #32]
 8010896:	4628      	mov	r0, r5
 8010898:	47b0      	blx	r6
 801089a:	1c43      	adds	r3, r0, #1
 801089c:	89a3      	ldrh	r3, [r4, #12]
 801089e:	d106      	bne.n	80108ae <__sflush_r+0x62>
 80108a0:	6829      	ldr	r1, [r5, #0]
 80108a2:	291d      	cmp	r1, #29
 80108a4:	d82b      	bhi.n	80108fe <__sflush_r+0xb2>
 80108a6:	4a2a      	ldr	r2, [pc, #168]	@ (8010950 <__sflush_r+0x104>)
 80108a8:	40ca      	lsrs	r2, r1
 80108aa:	07d6      	lsls	r6, r2, #31
 80108ac:	d527      	bpl.n	80108fe <__sflush_r+0xb2>
 80108ae:	2200      	movs	r2, #0
 80108b0:	6062      	str	r2, [r4, #4]
 80108b2:	04d9      	lsls	r1, r3, #19
 80108b4:	6922      	ldr	r2, [r4, #16]
 80108b6:	6022      	str	r2, [r4, #0]
 80108b8:	d504      	bpl.n	80108c4 <__sflush_r+0x78>
 80108ba:	1c42      	adds	r2, r0, #1
 80108bc:	d101      	bne.n	80108c2 <__sflush_r+0x76>
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	b903      	cbnz	r3, 80108c4 <__sflush_r+0x78>
 80108c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80108c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108c6:	602f      	str	r7, [r5, #0]
 80108c8:	b1b9      	cbz	r1, 80108fa <__sflush_r+0xae>
 80108ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108ce:	4299      	cmp	r1, r3
 80108d0:	d002      	beq.n	80108d8 <__sflush_r+0x8c>
 80108d2:	4628      	mov	r0, r5
 80108d4:	f7ff f9fe 	bl	800fcd4 <_free_r>
 80108d8:	2300      	movs	r3, #0
 80108da:	6363      	str	r3, [r4, #52]	@ 0x34
 80108dc:	e00d      	b.n	80108fa <__sflush_r+0xae>
 80108de:	2301      	movs	r3, #1
 80108e0:	4628      	mov	r0, r5
 80108e2:	47b0      	blx	r6
 80108e4:	4602      	mov	r2, r0
 80108e6:	1c50      	adds	r0, r2, #1
 80108e8:	d1c9      	bne.n	801087e <__sflush_r+0x32>
 80108ea:	682b      	ldr	r3, [r5, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d0c6      	beq.n	801087e <__sflush_r+0x32>
 80108f0:	2b1d      	cmp	r3, #29
 80108f2:	d001      	beq.n	80108f8 <__sflush_r+0xac>
 80108f4:	2b16      	cmp	r3, #22
 80108f6:	d11e      	bne.n	8010936 <__sflush_r+0xea>
 80108f8:	602f      	str	r7, [r5, #0]
 80108fa:	2000      	movs	r0, #0
 80108fc:	e022      	b.n	8010944 <__sflush_r+0xf8>
 80108fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010902:	b21b      	sxth	r3, r3
 8010904:	e01b      	b.n	801093e <__sflush_r+0xf2>
 8010906:	690f      	ldr	r7, [r1, #16]
 8010908:	2f00      	cmp	r7, #0
 801090a:	d0f6      	beq.n	80108fa <__sflush_r+0xae>
 801090c:	0793      	lsls	r3, r2, #30
 801090e:	680e      	ldr	r6, [r1, #0]
 8010910:	bf08      	it	eq
 8010912:	694b      	ldreq	r3, [r1, #20]
 8010914:	600f      	str	r7, [r1, #0]
 8010916:	bf18      	it	ne
 8010918:	2300      	movne	r3, #0
 801091a:	eba6 0807 	sub.w	r8, r6, r7
 801091e:	608b      	str	r3, [r1, #8]
 8010920:	f1b8 0f00 	cmp.w	r8, #0
 8010924:	dde9      	ble.n	80108fa <__sflush_r+0xae>
 8010926:	6a21      	ldr	r1, [r4, #32]
 8010928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801092a:	4643      	mov	r3, r8
 801092c:	463a      	mov	r2, r7
 801092e:	4628      	mov	r0, r5
 8010930:	47b0      	blx	r6
 8010932:	2800      	cmp	r0, #0
 8010934:	dc08      	bgt.n	8010948 <__sflush_r+0xfc>
 8010936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801093a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	f04f 30ff 	mov.w	r0, #4294967295
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	4407      	add	r7, r0
 801094a:	eba8 0800 	sub.w	r8, r8, r0
 801094e:	e7e7      	b.n	8010920 <__sflush_r+0xd4>
 8010950:	20400001 	.word	0x20400001

08010954 <_fflush_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	690b      	ldr	r3, [r1, #16]
 8010958:	4605      	mov	r5, r0
 801095a:	460c      	mov	r4, r1
 801095c:	b913      	cbnz	r3, 8010964 <_fflush_r+0x10>
 801095e:	2500      	movs	r5, #0
 8010960:	4628      	mov	r0, r5
 8010962:	bd38      	pop	{r3, r4, r5, pc}
 8010964:	b118      	cbz	r0, 801096e <_fflush_r+0x1a>
 8010966:	6a03      	ldr	r3, [r0, #32]
 8010968:	b90b      	cbnz	r3, 801096e <_fflush_r+0x1a>
 801096a:	f7fe fa53 	bl	800ee14 <__sinit>
 801096e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d0f3      	beq.n	801095e <_fflush_r+0xa>
 8010976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010978:	07d0      	lsls	r0, r2, #31
 801097a:	d404      	bmi.n	8010986 <_fflush_r+0x32>
 801097c:	0599      	lsls	r1, r3, #22
 801097e:	d402      	bmi.n	8010986 <_fflush_r+0x32>
 8010980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010982:	f7fe fbae 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 8010986:	4628      	mov	r0, r5
 8010988:	4621      	mov	r1, r4
 801098a:	f7ff ff5f 	bl	801084c <__sflush_r>
 801098e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010990:	07da      	lsls	r2, r3, #31
 8010992:	4605      	mov	r5, r0
 8010994:	d4e4      	bmi.n	8010960 <_fflush_r+0xc>
 8010996:	89a3      	ldrh	r3, [r4, #12]
 8010998:	059b      	lsls	r3, r3, #22
 801099a:	d4e1      	bmi.n	8010960 <_fflush_r+0xc>
 801099c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801099e:	f7fe fba1 	bl	800f0e4 <__retarget_lock_release_recursive>
 80109a2:	e7dd      	b.n	8010960 <_fflush_r+0xc>

080109a4 <__swbuf_r>:
 80109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a6:	460e      	mov	r6, r1
 80109a8:	4614      	mov	r4, r2
 80109aa:	4605      	mov	r5, r0
 80109ac:	b118      	cbz	r0, 80109b6 <__swbuf_r+0x12>
 80109ae:	6a03      	ldr	r3, [r0, #32]
 80109b0:	b90b      	cbnz	r3, 80109b6 <__swbuf_r+0x12>
 80109b2:	f7fe fa2f 	bl	800ee14 <__sinit>
 80109b6:	69a3      	ldr	r3, [r4, #24]
 80109b8:	60a3      	str	r3, [r4, #8]
 80109ba:	89a3      	ldrh	r3, [r4, #12]
 80109bc:	071a      	lsls	r2, r3, #28
 80109be:	d501      	bpl.n	80109c4 <__swbuf_r+0x20>
 80109c0:	6923      	ldr	r3, [r4, #16]
 80109c2:	b943      	cbnz	r3, 80109d6 <__swbuf_r+0x32>
 80109c4:	4621      	mov	r1, r4
 80109c6:	4628      	mov	r0, r5
 80109c8:	f000 f82a 	bl	8010a20 <__swsetup_r>
 80109cc:	b118      	cbz	r0, 80109d6 <__swbuf_r+0x32>
 80109ce:	f04f 37ff 	mov.w	r7, #4294967295
 80109d2:	4638      	mov	r0, r7
 80109d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	6922      	ldr	r2, [r4, #16]
 80109da:	1a98      	subs	r0, r3, r2
 80109dc:	6963      	ldr	r3, [r4, #20]
 80109de:	b2f6      	uxtb	r6, r6
 80109e0:	4283      	cmp	r3, r0
 80109e2:	4637      	mov	r7, r6
 80109e4:	dc05      	bgt.n	80109f2 <__swbuf_r+0x4e>
 80109e6:	4621      	mov	r1, r4
 80109e8:	4628      	mov	r0, r5
 80109ea:	f7ff ffb3 	bl	8010954 <_fflush_r>
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d1ed      	bne.n	80109ce <__swbuf_r+0x2a>
 80109f2:	68a3      	ldr	r3, [r4, #8]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	60a3      	str	r3, [r4, #8]
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	6022      	str	r2, [r4, #0]
 80109fe:	701e      	strb	r6, [r3, #0]
 8010a00:	6962      	ldr	r2, [r4, #20]
 8010a02:	1c43      	adds	r3, r0, #1
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d004      	beq.n	8010a12 <__swbuf_r+0x6e>
 8010a08:	89a3      	ldrh	r3, [r4, #12]
 8010a0a:	07db      	lsls	r3, r3, #31
 8010a0c:	d5e1      	bpl.n	80109d2 <__swbuf_r+0x2e>
 8010a0e:	2e0a      	cmp	r6, #10
 8010a10:	d1df      	bne.n	80109d2 <__swbuf_r+0x2e>
 8010a12:	4621      	mov	r1, r4
 8010a14:	4628      	mov	r0, r5
 8010a16:	f7ff ff9d 	bl	8010954 <_fflush_r>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d0d9      	beq.n	80109d2 <__swbuf_r+0x2e>
 8010a1e:	e7d6      	b.n	80109ce <__swbuf_r+0x2a>

08010a20 <__swsetup_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4b29      	ldr	r3, [pc, #164]	@ (8010ac8 <__swsetup_r+0xa8>)
 8010a24:	4605      	mov	r5, r0
 8010a26:	6818      	ldr	r0, [r3, #0]
 8010a28:	460c      	mov	r4, r1
 8010a2a:	b118      	cbz	r0, 8010a34 <__swsetup_r+0x14>
 8010a2c:	6a03      	ldr	r3, [r0, #32]
 8010a2e:	b90b      	cbnz	r3, 8010a34 <__swsetup_r+0x14>
 8010a30:	f7fe f9f0 	bl	800ee14 <__sinit>
 8010a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a38:	0719      	lsls	r1, r3, #28
 8010a3a:	d422      	bmi.n	8010a82 <__swsetup_r+0x62>
 8010a3c:	06da      	lsls	r2, r3, #27
 8010a3e:	d407      	bmi.n	8010a50 <__swsetup_r+0x30>
 8010a40:	2209      	movs	r2, #9
 8010a42:	602a      	str	r2, [r5, #0]
 8010a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a48:	81a3      	strh	r3, [r4, #12]
 8010a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a4e:	e033      	b.n	8010ab8 <__swsetup_r+0x98>
 8010a50:	0758      	lsls	r0, r3, #29
 8010a52:	d512      	bpl.n	8010a7a <__swsetup_r+0x5a>
 8010a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a56:	b141      	cbz	r1, 8010a6a <__swsetup_r+0x4a>
 8010a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a5c:	4299      	cmp	r1, r3
 8010a5e:	d002      	beq.n	8010a66 <__swsetup_r+0x46>
 8010a60:	4628      	mov	r0, r5
 8010a62:	f7ff f937 	bl	800fcd4 <_free_r>
 8010a66:	2300      	movs	r3, #0
 8010a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010a70:	81a3      	strh	r3, [r4, #12]
 8010a72:	2300      	movs	r3, #0
 8010a74:	6063      	str	r3, [r4, #4]
 8010a76:	6923      	ldr	r3, [r4, #16]
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	89a3      	ldrh	r3, [r4, #12]
 8010a7c:	f043 0308 	orr.w	r3, r3, #8
 8010a80:	81a3      	strh	r3, [r4, #12]
 8010a82:	6923      	ldr	r3, [r4, #16]
 8010a84:	b94b      	cbnz	r3, 8010a9a <__swsetup_r+0x7a>
 8010a86:	89a3      	ldrh	r3, [r4, #12]
 8010a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a90:	d003      	beq.n	8010a9a <__swsetup_r+0x7a>
 8010a92:	4621      	mov	r1, r4
 8010a94:	4628      	mov	r0, r5
 8010a96:	f000 f8b3 	bl	8010c00 <__smakebuf_r>
 8010a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9e:	f013 0201 	ands.w	r2, r3, #1
 8010aa2:	d00a      	beq.n	8010aba <__swsetup_r+0x9a>
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	60a2      	str	r2, [r4, #8]
 8010aa8:	6962      	ldr	r2, [r4, #20]
 8010aaa:	4252      	negs	r2, r2
 8010aac:	61a2      	str	r2, [r4, #24]
 8010aae:	6922      	ldr	r2, [r4, #16]
 8010ab0:	b942      	cbnz	r2, 8010ac4 <__swsetup_r+0xa4>
 8010ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ab6:	d1c5      	bne.n	8010a44 <__swsetup_r+0x24>
 8010ab8:	bd38      	pop	{r3, r4, r5, pc}
 8010aba:	0799      	lsls	r1, r3, #30
 8010abc:	bf58      	it	pl
 8010abe:	6962      	ldrpl	r2, [r4, #20]
 8010ac0:	60a2      	str	r2, [r4, #8]
 8010ac2:	e7f4      	b.n	8010aae <__swsetup_r+0x8e>
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	e7f7      	b.n	8010ab8 <__swsetup_r+0x98>
 8010ac8:	2400008c 	.word	0x2400008c

08010acc <_sbrk_r>:
 8010acc:	b538      	push	{r3, r4, r5, lr}
 8010ace:	4d06      	ldr	r5, [pc, #24]	@ (8010ae8 <_sbrk_r+0x1c>)
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	4608      	mov	r0, r1
 8010ad6:	602b      	str	r3, [r5, #0]
 8010ad8:	f7f4 fa04 	bl	8004ee4 <_sbrk>
 8010adc:	1c43      	adds	r3, r0, #1
 8010ade:	d102      	bne.n	8010ae6 <_sbrk_r+0x1a>
 8010ae0:	682b      	ldr	r3, [r5, #0]
 8010ae2:	b103      	cbz	r3, 8010ae6 <_sbrk_r+0x1a>
 8010ae4:	6023      	str	r3, [r4, #0]
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	240055fc 	.word	0x240055fc

08010aec <__assert_func>:
 8010aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aee:	4614      	mov	r4, r2
 8010af0:	461a      	mov	r2, r3
 8010af2:	4b09      	ldr	r3, [pc, #36]	@ (8010b18 <__assert_func+0x2c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4605      	mov	r5, r0
 8010af8:	68d8      	ldr	r0, [r3, #12]
 8010afa:	b14c      	cbz	r4, 8010b10 <__assert_func+0x24>
 8010afc:	4b07      	ldr	r3, [pc, #28]	@ (8010b1c <__assert_func+0x30>)
 8010afe:	9100      	str	r1, [sp, #0]
 8010b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b04:	4906      	ldr	r1, [pc, #24]	@ (8010b20 <__assert_func+0x34>)
 8010b06:	462b      	mov	r3, r5
 8010b08:	f000 f842 	bl	8010b90 <fiprintf>
 8010b0c:	f000 f8d6 	bl	8010cbc <abort>
 8010b10:	4b04      	ldr	r3, [pc, #16]	@ (8010b24 <__assert_func+0x38>)
 8010b12:	461c      	mov	r4, r3
 8010b14:	e7f3      	b.n	8010afe <__assert_func+0x12>
 8010b16:	bf00      	nop
 8010b18:	2400008c 	.word	0x2400008c
 8010b1c:	08011609 	.word	0x08011609
 8010b20:	08011616 	.word	0x08011616
 8010b24:	08011644 	.word	0x08011644

08010b28 <_calloc_r>:
 8010b28:	b570      	push	{r4, r5, r6, lr}
 8010b2a:	fba1 5402 	umull	r5, r4, r1, r2
 8010b2e:	b934      	cbnz	r4, 8010b3e <_calloc_r+0x16>
 8010b30:	4629      	mov	r1, r5
 8010b32:	f7ff f943 	bl	800fdbc <_malloc_r>
 8010b36:	4606      	mov	r6, r0
 8010b38:	b928      	cbnz	r0, 8010b46 <_calloc_r+0x1e>
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	bd70      	pop	{r4, r5, r6, pc}
 8010b3e:	220c      	movs	r2, #12
 8010b40:	6002      	str	r2, [r0, #0]
 8010b42:	2600      	movs	r6, #0
 8010b44:	e7f9      	b.n	8010b3a <_calloc_r+0x12>
 8010b46:	462a      	mov	r2, r5
 8010b48:	4621      	mov	r1, r4
 8010b4a:	f7fe f9ee 	bl	800ef2a <memset>
 8010b4e:	e7f4      	b.n	8010b3a <_calloc_r+0x12>

08010b50 <__ascii_mbtowc>:
 8010b50:	b082      	sub	sp, #8
 8010b52:	b901      	cbnz	r1, 8010b56 <__ascii_mbtowc+0x6>
 8010b54:	a901      	add	r1, sp, #4
 8010b56:	b142      	cbz	r2, 8010b6a <__ascii_mbtowc+0x1a>
 8010b58:	b14b      	cbz	r3, 8010b6e <__ascii_mbtowc+0x1e>
 8010b5a:	7813      	ldrb	r3, [r2, #0]
 8010b5c:	600b      	str	r3, [r1, #0]
 8010b5e:	7812      	ldrb	r2, [r2, #0]
 8010b60:	1e10      	subs	r0, r2, #0
 8010b62:	bf18      	it	ne
 8010b64:	2001      	movne	r0, #1
 8010b66:	b002      	add	sp, #8
 8010b68:	4770      	bx	lr
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	e7fb      	b.n	8010b66 <__ascii_mbtowc+0x16>
 8010b6e:	f06f 0001 	mvn.w	r0, #1
 8010b72:	e7f8      	b.n	8010b66 <__ascii_mbtowc+0x16>

08010b74 <__ascii_wctomb>:
 8010b74:	4603      	mov	r3, r0
 8010b76:	4608      	mov	r0, r1
 8010b78:	b141      	cbz	r1, 8010b8c <__ascii_wctomb+0x18>
 8010b7a:	2aff      	cmp	r2, #255	@ 0xff
 8010b7c:	d904      	bls.n	8010b88 <__ascii_wctomb+0x14>
 8010b7e:	228a      	movs	r2, #138	@ 0x8a
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	f04f 30ff 	mov.w	r0, #4294967295
 8010b86:	4770      	bx	lr
 8010b88:	700a      	strb	r2, [r1, #0]
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	4770      	bx	lr
	...

08010b90 <fiprintf>:
 8010b90:	b40e      	push	{r1, r2, r3}
 8010b92:	b503      	push	{r0, r1, lr}
 8010b94:	4601      	mov	r1, r0
 8010b96:	ab03      	add	r3, sp, #12
 8010b98:	4805      	ldr	r0, [pc, #20]	@ (8010bb0 <fiprintf+0x20>)
 8010b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b9e:	6800      	ldr	r0, [r0, #0]
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	f7ff fd3b 	bl	801061c <_vfiprintf_r>
 8010ba6:	b002      	add	sp, #8
 8010ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bac:	b003      	add	sp, #12
 8010bae:	4770      	bx	lr
 8010bb0:	2400008c 	.word	0x2400008c

08010bb4 <__swhatbuf_r>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bbc:	2900      	cmp	r1, #0
 8010bbe:	b096      	sub	sp, #88	@ 0x58
 8010bc0:	4615      	mov	r5, r2
 8010bc2:	461e      	mov	r6, r3
 8010bc4:	da0d      	bge.n	8010be2 <__swhatbuf_r+0x2e>
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bcc:	f04f 0100 	mov.w	r1, #0
 8010bd0:	bf14      	ite	ne
 8010bd2:	2340      	movne	r3, #64	@ 0x40
 8010bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bd8:	2000      	movs	r0, #0
 8010bda:	6031      	str	r1, [r6, #0]
 8010bdc:	602b      	str	r3, [r5, #0]
 8010bde:	b016      	add	sp, #88	@ 0x58
 8010be0:	bd70      	pop	{r4, r5, r6, pc}
 8010be2:	466a      	mov	r2, sp
 8010be4:	f000 f848 	bl	8010c78 <_fstat_r>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	dbec      	blt.n	8010bc6 <__swhatbuf_r+0x12>
 8010bec:	9901      	ldr	r1, [sp, #4]
 8010bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010bf6:	4259      	negs	r1, r3
 8010bf8:	4159      	adcs	r1, r3
 8010bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bfe:	e7eb      	b.n	8010bd8 <__swhatbuf_r+0x24>

08010c00 <__smakebuf_r>:
 8010c00:	898b      	ldrh	r3, [r1, #12]
 8010c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c04:	079d      	lsls	r5, r3, #30
 8010c06:	4606      	mov	r6, r0
 8010c08:	460c      	mov	r4, r1
 8010c0a:	d507      	bpl.n	8010c1c <__smakebuf_r+0x1c>
 8010c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c10:	6023      	str	r3, [r4, #0]
 8010c12:	6123      	str	r3, [r4, #16]
 8010c14:	2301      	movs	r3, #1
 8010c16:	6163      	str	r3, [r4, #20]
 8010c18:	b003      	add	sp, #12
 8010c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c1c:	ab01      	add	r3, sp, #4
 8010c1e:	466a      	mov	r2, sp
 8010c20:	f7ff ffc8 	bl	8010bb4 <__swhatbuf_r>
 8010c24:	9f00      	ldr	r7, [sp, #0]
 8010c26:	4605      	mov	r5, r0
 8010c28:	4639      	mov	r1, r7
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	f7ff f8c6 	bl	800fdbc <_malloc_r>
 8010c30:	b948      	cbnz	r0, 8010c46 <__smakebuf_r+0x46>
 8010c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c36:	059a      	lsls	r2, r3, #22
 8010c38:	d4ee      	bmi.n	8010c18 <__smakebuf_r+0x18>
 8010c3a:	f023 0303 	bic.w	r3, r3, #3
 8010c3e:	f043 0302 	orr.w	r3, r3, #2
 8010c42:	81a3      	strh	r3, [r4, #12]
 8010c44:	e7e2      	b.n	8010c0c <__smakebuf_r+0xc>
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	6020      	str	r0, [r4, #0]
 8010c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c4e:	81a3      	strh	r3, [r4, #12]
 8010c50:	9b01      	ldr	r3, [sp, #4]
 8010c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c56:	b15b      	cbz	r3, 8010c70 <__smakebuf_r+0x70>
 8010c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f000 f81d 	bl	8010c9c <_isatty_r>
 8010c62:	b128      	cbz	r0, 8010c70 <__smakebuf_r+0x70>
 8010c64:	89a3      	ldrh	r3, [r4, #12]
 8010c66:	f023 0303 	bic.w	r3, r3, #3
 8010c6a:	f043 0301 	orr.w	r3, r3, #1
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	431d      	orrs	r5, r3
 8010c74:	81a5      	strh	r5, [r4, #12]
 8010c76:	e7cf      	b.n	8010c18 <__smakebuf_r+0x18>

08010c78 <_fstat_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	4d07      	ldr	r5, [pc, #28]	@ (8010c98 <_fstat_r+0x20>)
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	4604      	mov	r4, r0
 8010c80:	4608      	mov	r0, r1
 8010c82:	4611      	mov	r1, r2
 8010c84:	602b      	str	r3, [r5, #0]
 8010c86:	f7f4 f905 	bl	8004e94 <_fstat>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	d102      	bne.n	8010c94 <_fstat_r+0x1c>
 8010c8e:	682b      	ldr	r3, [r5, #0]
 8010c90:	b103      	cbz	r3, 8010c94 <_fstat_r+0x1c>
 8010c92:	6023      	str	r3, [r4, #0]
 8010c94:	bd38      	pop	{r3, r4, r5, pc}
 8010c96:	bf00      	nop
 8010c98:	240055fc 	.word	0x240055fc

08010c9c <_isatty_r>:
 8010c9c:	b538      	push	{r3, r4, r5, lr}
 8010c9e:	4d06      	ldr	r5, [pc, #24]	@ (8010cb8 <_isatty_r+0x1c>)
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	4608      	mov	r0, r1
 8010ca6:	602b      	str	r3, [r5, #0]
 8010ca8:	f7f4 f904 	bl	8004eb4 <_isatty>
 8010cac:	1c43      	adds	r3, r0, #1
 8010cae:	d102      	bne.n	8010cb6 <_isatty_r+0x1a>
 8010cb0:	682b      	ldr	r3, [r5, #0]
 8010cb2:	b103      	cbz	r3, 8010cb6 <_isatty_r+0x1a>
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	bd38      	pop	{r3, r4, r5, pc}
 8010cb8:	240055fc 	.word	0x240055fc

08010cbc <abort>:
 8010cbc:	b508      	push	{r3, lr}
 8010cbe:	2006      	movs	r0, #6
 8010cc0:	f000 f82c 	bl	8010d1c <raise>
 8010cc4:	2001      	movs	r0, #1
 8010cc6:	f7f4 f8b1 	bl	8004e2c <_exit>

08010cca <_raise_r>:
 8010cca:	291f      	cmp	r1, #31
 8010ccc:	b538      	push	{r3, r4, r5, lr}
 8010cce:	4605      	mov	r5, r0
 8010cd0:	460c      	mov	r4, r1
 8010cd2:	d904      	bls.n	8010cde <_raise_r+0x14>
 8010cd4:	2316      	movs	r3, #22
 8010cd6:	6003      	str	r3, [r0, #0]
 8010cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cdc:	bd38      	pop	{r3, r4, r5, pc}
 8010cde:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ce0:	b112      	cbz	r2, 8010ce8 <_raise_r+0x1e>
 8010ce2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ce6:	b94b      	cbnz	r3, 8010cfc <_raise_r+0x32>
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f000 f831 	bl	8010d50 <_getpid_r>
 8010cee:	4622      	mov	r2, r4
 8010cf0:	4601      	mov	r1, r0
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cf8:	f000 b818 	b.w	8010d2c <_kill_r>
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d00a      	beq.n	8010d16 <_raise_r+0x4c>
 8010d00:	1c59      	adds	r1, r3, #1
 8010d02:	d103      	bne.n	8010d0c <_raise_r+0x42>
 8010d04:	2316      	movs	r3, #22
 8010d06:	6003      	str	r3, [r0, #0]
 8010d08:	2001      	movs	r0, #1
 8010d0a:	e7e7      	b.n	8010cdc <_raise_r+0x12>
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d12:	4620      	mov	r0, r4
 8010d14:	4798      	blx	r3
 8010d16:	2000      	movs	r0, #0
 8010d18:	e7e0      	b.n	8010cdc <_raise_r+0x12>
	...

08010d1c <raise>:
 8010d1c:	4b02      	ldr	r3, [pc, #8]	@ (8010d28 <raise+0xc>)
 8010d1e:	4601      	mov	r1, r0
 8010d20:	6818      	ldr	r0, [r3, #0]
 8010d22:	f7ff bfd2 	b.w	8010cca <_raise_r>
 8010d26:	bf00      	nop
 8010d28:	2400008c 	.word	0x2400008c

08010d2c <_kill_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	4d07      	ldr	r5, [pc, #28]	@ (8010d4c <_kill_r+0x20>)
 8010d30:	2300      	movs	r3, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	4608      	mov	r0, r1
 8010d36:	4611      	mov	r1, r2
 8010d38:	602b      	str	r3, [r5, #0]
 8010d3a:	f7f4 f867 	bl	8004e0c <_kill>
 8010d3e:	1c43      	adds	r3, r0, #1
 8010d40:	d102      	bne.n	8010d48 <_kill_r+0x1c>
 8010d42:	682b      	ldr	r3, [r5, #0]
 8010d44:	b103      	cbz	r3, 8010d48 <_kill_r+0x1c>
 8010d46:	6023      	str	r3, [r4, #0]
 8010d48:	bd38      	pop	{r3, r4, r5, pc}
 8010d4a:	bf00      	nop
 8010d4c:	240055fc 	.word	0x240055fc

08010d50 <_getpid_r>:
 8010d50:	f7f4 b854 	b.w	8004dfc <_getpid>

08010d54 <fmax>:
 8010d54:	b508      	push	{r3, lr}
 8010d56:	ed2d 8b04 	vpush	{d8-d9}
 8010d5a:	eeb0 8b40 	vmov.f64	d8, d0
 8010d5e:	eeb0 9b41 	vmov.f64	d9, d1
 8010d62:	f000 f831 	bl	8010dc8 <__fpclassifyd>
 8010d66:	b930      	cbnz	r0, 8010d76 <fmax+0x22>
 8010d68:	eeb0 8b49 	vmov.f64	d8, d9
 8010d6c:	eeb0 0b48 	vmov.f64	d0, d8
 8010d70:	ecbd 8b04 	vpop	{d8-d9}
 8010d74:	bd08      	pop	{r3, pc}
 8010d76:	eeb0 0b49 	vmov.f64	d0, d9
 8010d7a:	f000 f825 	bl	8010dc8 <__fpclassifyd>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d0f4      	beq.n	8010d6c <fmax+0x18>
 8010d82:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8a:	dded      	ble.n	8010d68 <fmax+0x14>
 8010d8c:	e7ee      	b.n	8010d6c <fmax+0x18>

08010d8e <fmin>:
 8010d8e:	b508      	push	{r3, lr}
 8010d90:	ed2d 8b04 	vpush	{d8-d9}
 8010d94:	eeb0 8b40 	vmov.f64	d8, d0
 8010d98:	eeb0 9b41 	vmov.f64	d9, d1
 8010d9c:	f000 f814 	bl	8010dc8 <__fpclassifyd>
 8010da0:	b930      	cbnz	r0, 8010db0 <fmin+0x22>
 8010da2:	eeb0 8b49 	vmov.f64	d8, d9
 8010da6:	eeb0 0b48 	vmov.f64	d0, d8
 8010daa:	ecbd 8b04 	vpop	{d8-d9}
 8010dae:	bd08      	pop	{r3, pc}
 8010db0:	eeb0 0b49 	vmov.f64	d0, d9
 8010db4:	f000 f808 	bl	8010dc8 <__fpclassifyd>
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d0f4      	beq.n	8010da6 <fmin+0x18>
 8010dbc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc4:	d5ed      	bpl.n	8010da2 <fmin+0x14>
 8010dc6:	e7ee      	b.n	8010da6 <fmin+0x18>

08010dc8 <__fpclassifyd>:
 8010dc8:	ec51 0b10 	vmov	r0, r1, d0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8010dd2:	b510      	push	{r4, lr}
 8010dd4:	d104      	bne.n	8010de0 <__fpclassifyd+0x18>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	bf0c      	ite	eq
 8010dda:	2002      	moveq	r0, #2
 8010ddc:	2003      	movne	r0, #3
 8010dde:	bd10      	pop	{r4, pc}
 8010de0:	4a09      	ldr	r2, [pc, #36]	@ (8010e08 <__fpclassifyd+0x40>)
 8010de2:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8010de6:	4294      	cmp	r4, r2
 8010de8:	d908      	bls.n	8010dfc <__fpclassifyd+0x34>
 8010dea:	4a08      	ldr	r2, [pc, #32]	@ (8010e0c <__fpclassifyd+0x44>)
 8010dec:	4213      	tst	r3, r2
 8010dee:	d007      	beq.n	8010e00 <__fpclassifyd+0x38>
 8010df0:	4291      	cmp	r1, r2
 8010df2:	d107      	bne.n	8010e04 <__fpclassifyd+0x3c>
 8010df4:	fab0 f080 	clz	r0, r0
 8010df8:	0940      	lsrs	r0, r0, #5
 8010dfa:	e7f0      	b.n	8010dde <__fpclassifyd+0x16>
 8010dfc:	2004      	movs	r0, #4
 8010dfe:	e7ee      	b.n	8010dde <__fpclassifyd+0x16>
 8010e00:	2003      	movs	r0, #3
 8010e02:	e7ec      	b.n	8010dde <__fpclassifyd+0x16>
 8010e04:	2000      	movs	r0, #0
 8010e06:	e7ea      	b.n	8010dde <__fpclassifyd+0x16>
 8010e08:	7fdfffff 	.word	0x7fdfffff
 8010e0c:	7ff00000 	.word	0x7ff00000

08010e10 <fmaxf>:
 8010e10:	b508      	push	{r3, lr}
 8010e12:	ed2d 8b02 	vpush	{d8}
 8010e16:	eeb0 8a40 	vmov.f32	s16, s0
 8010e1a:	eef0 8a60 	vmov.f32	s17, s1
 8010e1e:	f000 f815 	bl	8010e4c <__fpclassifyf>
 8010e22:	b930      	cbnz	r0, 8010e32 <fmaxf+0x22>
 8010e24:	eeb0 8a68 	vmov.f32	s16, s17
 8010e28:	eeb0 0a48 	vmov.f32	s0, s16
 8010e2c:	ecbd 8b02 	vpop	{d8}
 8010e30:	bd08      	pop	{r3, pc}
 8010e32:	eeb0 0a68 	vmov.f32	s0, s17
 8010e36:	f000 f809 	bl	8010e4c <__fpclassifyf>
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0f4      	beq.n	8010e28 <fmaxf+0x18>
 8010e3e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e46:	dded      	ble.n	8010e24 <fmaxf+0x14>
 8010e48:	e7ee      	b.n	8010e28 <fmaxf+0x18>
	...

08010e4c <__fpclassifyf>:
 8010e4c:	ee10 3a10 	vmov	r3, s0
 8010e50:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010e54:	d00d      	beq.n	8010e72 <__fpclassifyf+0x26>
 8010e56:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010e5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010e5e:	d30a      	bcc.n	8010e76 <__fpclassifyf+0x2a>
 8010e60:	4b07      	ldr	r3, [pc, #28]	@ (8010e80 <__fpclassifyf+0x34>)
 8010e62:	1e42      	subs	r2, r0, #1
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d908      	bls.n	8010e7a <__fpclassifyf+0x2e>
 8010e68:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010e6c:	4258      	negs	r0, r3
 8010e6e:	4158      	adcs	r0, r3
 8010e70:	4770      	bx	lr
 8010e72:	2002      	movs	r0, #2
 8010e74:	4770      	bx	lr
 8010e76:	2004      	movs	r0, #4
 8010e78:	4770      	bx	lr
 8010e7a:	2003      	movs	r0, #3
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	007ffffe 	.word	0x007ffffe

08010e84 <sinf_poly>:
 8010e84:	07cb      	lsls	r3, r1, #31
 8010e86:	d412      	bmi.n	8010eae <sinf_poly+0x2a>
 8010e88:	ee21 5b00 	vmul.f64	d5, d1, d0
 8010e8c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8010e90:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8010e94:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010e98:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8010e9c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010ea0:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010ea4:	eea7 0b01 	vfma.f64	d0, d7, d1
 8010ea8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010eac:	4770      	bx	lr
 8010eae:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8010eb2:	ee21 5b01 	vmul.f64	d5, d1, d1
 8010eb6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8010eba:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8010ebe:	eea1 7b06 	vfma.f64	d7, d1, d6
 8010ec2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8010ec6:	eea1 0b06 	vfma.f64	d0, d1, d6
 8010eca:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8010ece:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010ed2:	eea5 0b06 	vfma.f64	d0, d5, d6
 8010ed6:	e7e5      	b.n	8010ea4 <sinf_poly+0x20>

08010ed8 <sinf>:
 8010ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eda:	ee10 4a10 	vmov	r4, s0
 8010ede:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010ee2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8010ee6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8010eea:	eef0 7a40 	vmov.f32	s15, s0
 8010eee:	d218      	bcs.n	8010f22 <sinf+0x4a>
 8010ef0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010ef4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8010ef8:	d20a      	bcs.n	8010f10 <sinf+0x38>
 8010efa:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8010efe:	d103      	bne.n	8010f08 <sinf+0x30>
 8010f00:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8010f04:	ed8d 1a01 	vstr	s2, [sp, #4]
 8010f08:	eeb0 0a67 	vmov.f32	s0, s15
 8010f0c:	b003      	add	sp, #12
 8010f0e:	bd30      	pop	{r4, r5, pc}
 8010f10:	483b      	ldr	r0, [pc, #236]	@ (8011000 <sinf+0x128>)
 8010f12:	eeb0 0b46 	vmov.f64	d0, d6
 8010f16:	2100      	movs	r1, #0
 8010f18:	b003      	add	sp, #12
 8010f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f1e:	f7ff bfb1 	b.w	8010e84 <sinf_poly>
 8010f22:	f240 422e 	movw	r2, #1070	@ 0x42e
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d824      	bhi.n	8010f74 <sinf+0x9c>
 8010f2a:	4b35      	ldr	r3, [pc, #212]	@ (8011000 <sinf+0x128>)
 8010f2c:	ed93 7b08 	vldr	d7, [r3, #32]
 8010f30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010f34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010f38:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8010f3c:	ee17 1a90 	vmov	r1, s15
 8010f40:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8010f44:	1609      	asrs	r1, r1, #24
 8010f46:	ee07 1a90 	vmov	s15, r1
 8010f4a:	f001 0203 	and.w	r2, r1, #3
 8010f4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010f52:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010f56:	ed92 0b00 	vldr	d0, [r2]
 8010f5a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8010f5e:	f011 0f02 	tst.w	r1, #2
 8010f62:	eea5 6b47 	vfms.f64	d6, d5, d7
 8010f66:	bf08      	it	eq
 8010f68:	4618      	moveq	r0, r3
 8010f6a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010f6e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010f72:	e7d1      	b.n	8010f18 <sinf+0x40>
 8010f74:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8010f78:	d237      	bcs.n	8010fea <sinf+0x112>
 8010f7a:	4922      	ldr	r1, [pc, #136]	@ (8011004 <sinf+0x12c>)
 8010f7c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8010f80:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8010f84:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8010f88:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8010f8c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010f90:	6a10      	ldr	r0, [r2, #32]
 8010f92:	6912      	ldr	r2, [r2, #16]
 8010f94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010f98:	40ab      	lsls	r3, r5
 8010f9a:	fba0 5003 	umull	r5, r0, r0, r3
 8010f9e:	4359      	muls	r1, r3
 8010fa0:	fbe3 0102 	umlal	r0, r1, r3, r2
 8010fa4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8010fa8:	0f9d      	lsrs	r5, r3, #30
 8010faa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8010fae:	1ac9      	subs	r1, r1, r3
 8010fb0:	f7ef fb7c 	bl	80006ac <__aeabi_l2d>
 8010fb4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8010fb8:	4b11      	ldr	r3, [pc, #68]	@ (8011000 <sinf+0x128>)
 8010fba:	f004 0203 	and.w	r2, r4, #3
 8010fbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010fc2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8010ff8 <sinf+0x120>
 8010fc6:	ed92 0b00 	vldr	d0, [r2]
 8010fca:	ec41 0b17 	vmov	d7, r0, r1
 8010fce:	f014 0f02 	tst.w	r4, #2
 8010fd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010fd6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8010fda:	4629      	mov	r1, r5
 8010fdc:	bf08      	it	eq
 8010fde:	4618      	moveq	r0, r3
 8010fe0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010fe4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010fe8:	e796      	b.n	8010f18 <sinf+0x40>
 8010fea:	b003      	add	sp, #12
 8010fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ff0:	f000 b8e4 	b.w	80111bc <__math_invalidf>
 8010ff4:	f3af 8000 	nop.w
 8010ff8:	54442d18 	.word	0x54442d18
 8010ffc:	3c1921fb 	.word	0x3c1921fb
 8011000:	080118b0 	.word	0x080118b0
 8011004:	0801184c 	.word	0x0801184c

08011008 <sinf_poly>:
 8011008:	07cb      	lsls	r3, r1, #31
 801100a:	d412      	bmi.n	8011032 <sinf_poly+0x2a>
 801100c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8011010:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8011014:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8011018:	eea6 7b01 	vfma.f64	d7, d6, d1
 801101c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8011020:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011024:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011028:	eea7 0b01 	vfma.f64	d0, d7, d1
 801102c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011030:	4770      	bx	lr
 8011032:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8011036:	ee21 5b01 	vmul.f64	d5, d1, d1
 801103a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801103e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8011042:	eea1 7b06 	vfma.f64	d7, d1, d6
 8011046:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801104a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801104e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8011052:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011056:	eea5 0b06 	vfma.f64	d0, d5, d6
 801105a:	e7e5      	b.n	8011028 <sinf_poly+0x20>
 801105c:	0000      	movs	r0, r0
	...

08011060 <cosf>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	ee10 4a10 	vmov	r4, s0
 8011066:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801106a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801106e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8011072:	d21f      	bcs.n	80110b4 <cosf+0x54>
 8011074:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011078:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801107c:	f0c0 8082 	bcc.w	8011184 <cosf+0x124>
 8011080:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011084:	4b44      	ldr	r3, [pc, #272]	@ (8011198 <cosf+0x138>)
 8011086:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801108a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801108e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8011092:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011096:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801109a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801109e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80110a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80110a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80110aa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80110ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80110b2:	bd38      	pop	{r3, r4, r5, pc}
 80110b4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d829      	bhi.n	8011110 <cosf+0xb0>
 80110bc:	4b36      	ldr	r3, [pc, #216]	@ (8011198 <cosf+0x138>)
 80110be:	ed93 6b08 	vldr	d6, [r3, #32]
 80110c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80110c6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80110ca:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80110ce:	ee16 1a90 	vmov	r1, s13
 80110d2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80110d6:	1609      	asrs	r1, r1, #24
 80110d8:	ee06 1a90 	vmov	s13, r1
 80110dc:	f001 0203 	and.w	r2, r1, #3
 80110e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80110e4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80110e8:	ed92 0b00 	vldr	d0, [r2]
 80110ec:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80110f0:	f011 0f02 	tst.w	r1, #2
 80110f4:	f081 0101 	eor.w	r1, r1, #1
 80110f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80110fc:	bf08      	it	eq
 80110fe:	4618      	moveq	r0, r3
 8011100:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011108:	ee20 0b07 	vmul.f64	d0, d0, d7
 801110c:	f7ff bf7c 	b.w	8011008 <sinf_poly>
 8011110:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8011114:	d232      	bcs.n	801117c <cosf+0x11c>
 8011116:	4921      	ldr	r1, [pc, #132]	@ (801119c <cosf+0x13c>)
 8011118:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801111c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8011120:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8011124:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011128:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801112c:	6a10      	ldr	r0, [r2, #32]
 801112e:	6912      	ldr	r2, [r2, #16]
 8011130:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011134:	40ab      	lsls	r3, r5
 8011136:	fba0 5003 	umull	r5, r0, r0, r3
 801113a:	4359      	muls	r1, r3
 801113c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011140:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8011144:	0f9d      	lsrs	r5, r3, #30
 8011146:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801114a:	1ac9      	subs	r1, r1, r3
 801114c:	f7ef faae 	bl	80006ac <__aeabi_l2d>
 8011150:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8011154:	4b10      	ldr	r3, [pc, #64]	@ (8011198 <cosf+0x138>)
 8011156:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011190 <cosf+0x130>
 801115a:	ec41 0b17 	vmov	d7, r0, r1
 801115e:	f004 0203 	and.w	r2, r4, #3
 8011162:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011166:	ed92 0b00 	vldr	d0, [r2]
 801116a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801116e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8011172:	f014 0f02 	tst.w	r4, #2
 8011176:	f085 0101 	eor.w	r1, r5, #1
 801117a:	e7bf      	b.n	80110fc <cosf+0x9c>
 801117c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011180:	f000 b81c 	b.w	80111bc <__math_invalidf>
 8011184:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011188:	e793      	b.n	80110b2 <cosf+0x52>
 801118a:	bf00      	nop
 801118c:	f3af 8000 	nop.w
 8011190:	54442d18 	.word	0x54442d18
 8011194:	3c1921fb 	.word	0x3c1921fb
 8011198:	080118b0 	.word	0x080118b0
 801119c:	0801184c 	.word	0x0801184c

080111a0 <with_errnof>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	ed2d 8b02 	vpush	{d8}
 80111a6:	eeb0 8a40 	vmov.f32	s16, s0
 80111aa:	4604      	mov	r4, r0
 80111ac:	f7fd ff6e 	bl	800f08c <__errno>
 80111b0:	eeb0 0a48 	vmov.f32	s0, s16
 80111b4:	ecbd 8b02 	vpop	{d8}
 80111b8:	6004      	str	r4, [r0, #0]
 80111ba:	bd10      	pop	{r4, pc}

080111bc <__math_invalidf>:
 80111bc:	eef0 7a40 	vmov.f32	s15, s0
 80111c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80111c4:	eef4 7a67 	vcmp.f32	s15, s15
 80111c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80111d0:	d602      	bvs.n	80111d8 <__math_invalidf+0x1c>
 80111d2:	2021      	movs	r0, #33	@ 0x21
 80111d4:	f7ff bfe4 	b.w	80111a0 <with_errnof>
 80111d8:	4770      	bx	lr
	...

080111dc <_init>:
 80111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111de:	bf00      	nop
 80111e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111e2:	bc08      	pop	{r3}
 80111e4:	469e      	mov	lr, r3
 80111e6:	4770      	bx	lr

080111e8 <_fini>:
 80111e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ea:	bf00      	nop
 80111ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ee:	bc08      	pop	{r3}
 80111f0:	469e      	mov	lr, r3
 80111f2:	4770      	bx	lr
